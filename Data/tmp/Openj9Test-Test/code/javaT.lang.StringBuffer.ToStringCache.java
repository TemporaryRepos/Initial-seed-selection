public class ToStringCache {
	public static void main(java.lang.String[] args) throws java.lang.Exception {
		java.lang.String original = "The original String";
		java.lang.StringBuffer sb = new java.lang.StringBuffer(original);
		java.lang.String a = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, original);
		java.lang.String b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		sb.setLength(12);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.setCharAt(0, 'X');
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(new java.lang.Character('X'));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append("More text");
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(sb);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(new java.lang.StringBuilder("Build"));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(new java.lang.StringBuilder("Build2"), 0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(new char[]{ 'a', 'b' });
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(true);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append('c');
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(23);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.appendCodePoint(java.lang.Character.codePointAt(new char[]{ 'X' }, 0));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(1L);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(1.0F);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(1.0);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.delete(0, 5);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.deleteCharAt(0);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.replace(0, 2, "123");
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, new char[]{ 'a', 'b', 'c' }, 0, 3);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, new java.lang.Object());
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, "abc");
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, new char[]{ 'a', 'b', 'c' });
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, new java.lang.StringBuilder("Build"));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, new java.lang.StringBuilder("Build"), 0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, false);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, 'X');
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, 1L);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, 1.0F);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.insert(0, 1.0);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.reverse();
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		sb.append(((java.lang.String) (null)));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(((java.lang.StringBuffer) (null)));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(((java.lang.StringBuilder) (null)));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb.append(((java.lang.CharSequence) (null)));
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkUnequal(a, b);
		a = b;
		sb = new java.lang.StringBuffer(original);
		a = sb.toString();
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		int l = sb.length();
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		int cap = sb.capacity();
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		sb.ensureCapacity(100);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		sb.trimToSize();
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		char c = sb.charAt(1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		int cp = sb.codePointAt(1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		cp = sb.codePointBefore(2);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		int count = sb.codePointCount(0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		count = sb.offsetByCodePoints(0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		sb.getChars(0, 1, new char[2], 0);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		java.lang.String sub = sb.substring(0);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		java.lang.CharSequence cs = sb.subSequence(0, 1);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		sub = sb.substring(0, 3);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		int index = sb.indexOf("rig");
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		index = sb.indexOf("rig", 2);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		index = sb.lastIndexOf("rig");
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
		index = sb.lastIndexOf("rig", 3);
		b = sb.toString();
		javaT.lang.StringBuffer.ToStringCache.checkEqual(a, b);
	}

	private static void checkEqual(java.lang.String s1, java.lang.String s2) {
		if (!s1.equals(s2)) {
			throw new java.lang.RuntimeException((("Unmatched strings: s1 = " + s1) + " s2 = ") + s2);
		}
	}

	private static void checkUnequal(java.lang.String s1, java.lang.String s2) {
		if (s1.equals(s2)) {
			throw new java.lang.RuntimeException("Unexpected matched strings: " + s1);
		}
	}
}