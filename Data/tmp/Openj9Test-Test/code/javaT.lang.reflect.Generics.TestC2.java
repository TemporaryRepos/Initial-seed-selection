public class TestC2 {
	static java.lang.Class<javaT.lang.reflect.Generics.C2> cls = javaT.lang.reflect.Generics.C2.class;

	public static void main(java.lang.String[] args) throws java.lang.Throwable {
		javaT.lang.reflect.Generics.TestC2.testSuperclass();
		javaT.lang.reflect.Generics.TestC2.testSuperInterfaces();
		javaT.lang.reflect.Generics.TestC2.testTypeParameters();
		javaT.lang.reflect.Generics.TestC2.testMethods();
		javaT.lang.reflect.Generics.TestC2.testConstructors();
		javaT.lang.reflect.Generics.TestC2.testFields();
	}

	static void testSuperclass() {
		java.lang.System.out.println("testing superclass");
		java.lang.reflect.Type sc = javaT.lang.reflect.Generics.TestC2.cls.getGenericSuperclass();
		assert sc instanceof java.lang.reflect.ParameterizedType : "Superclass of C2 should be a parameterized type";
		java.lang.reflect.ParameterizedType psc = ((java.lang.reflect.ParameterizedType) (sc));
		assert psc.getRawType() == javaT.lang.reflect.Generics.C0.class : "The raw generic superclass of C2 should be C0";
		java.lang.reflect.Type[] tas = psc.getActualTypeArguments();
		assert tas.length == 1 : "Superclass of C2 should have one type argument";
		java.lang.reflect.Type t = tas[0];
		assert t instanceof java.lang.reflect.TypeVariable : "Type argument to superclass of C2 should be a type variable";
		java.lang.reflect.TypeVariable tv = ((java.lang.reflect.TypeVariable) (t));
		assert tv.getName().equals("T1") : "Name of type argument to superclass of C2 should be T1";
		java.lang.reflect.Type[] bs = tv.getBounds();
		assert bs.length == 1 : "T1 has one bound (superclass)";
		t = bs[0];
		assert t instanceof java.lang.reflect.ParameterizedType : "Bound of C0 should be a parameterized type";
		java.lang.reflect.ParameterizedType pt = ((java.lang.reflect.ParameterizedType) (t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.C2.class : "The raw bound of T1 should be C2";
		tas = pt.getActualTypeArguments();
		assert tas.length == 3 : "Bound of T1 should have three type arguments";
		assert tas[0] instanceof java.lang.reflect.TypeVariable : "First argument to bound of T1 is a type variable";
		assert tas[1] instanceof java.lang.reflect.TypeVariable : "Second argument to bound of T1 is a type variable";
		assert tas[2] instanceof java.lang.reflect.TypeVariable : "Third argument to bound of T1 is a type variable";
		java.lang.reflect.TypeVariable tv1 = ((java.lang.reflect.TypeVariable) (tas[0]));
		java.lang.reflect.TypeVariable tv2 = ((java.lang.reflect.TypeVariable) (tas[1]));
		java.lang.reflect.TypeVariable tv3 = ((java.lang.reflect.TypeVariable) (tas[2]));
		assert tv1.getName().equals("T1") : "First type arg to bound of T1 is T1";
		assert tv2.getName().equals("T2") : "Seconmd type arg to bound of T1 is T2";
		assert tv3.getName().equals("T3") : "Third type arg to bound of T1 is T3";
	}

	static void testSuperInterfaces() {
		java.lang.System.out.println("testing superinterfaces");
		java.lang.reflect.Type[] sis = javaT.lang.reflect.Generics.TestC2.cls.getGenericInterfaces();
		assert sis.length == 3 : "C2 should have three generic superinterfaces";
		java.lang.reflect.Type t = sis[0];
		assert t instanceof java.lang.reflect.ParameterizedType : "First superinterface of C2 should be a parameterized type";
		java.lang.reflect.ParameterizedType pt = ((java.lang.reflect.ParameterizedType) (t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.I1.class : "First super interface of C2 is instantiation of I1";
		java.lang.reflect.Type[] tas = pt.getActualTypeArguments();
		assert tas.length == 2 : "First super interface of C2 has 2 type arguments";
		t = sis[1];
		assert t instanceof java.lang.reflect.ParameterizedType : "Second superinterface of C2 should be a parameterized type";
		pt = ((java.lang.reflect.ParameterizedType) (t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.I2.class : "Second super interface of C2 is instantiation of I2";
		tas = pt.getActualTypeArguments();
		assert tas.length == 3 : "Second super interface of C2 has 3 type arguments";
		t = sis[2];
		assert t == javaT.lang.reflect.Generics.I3.class : "Third superinterface of C2 is I3";
		java.lang.reflect.TypeVariable[] tvs = javaT.lang.reflect.Generics.I1.class.getTypeParameters();
		assert tvs.length == 2 : "I3 has two formal type parameters";
		assert tvs[0].getName().equals("X1") : "Name of first formal type arg of I1 is X1";
		assert tvs[1].getName().equals("X2") : "Name of second formal type arg of I1 is X2";
		assert javaT.lang.reflect.Generics.I1.class.getGenericSuperclass() == javaT.lang.reflect.Generics.I1.class.getSuperclass() : "The generic and non-generic superclasses of an interface must be the same";
		sis = javaT.lang.reflect.Generics.I1.class.getGenericInterfaces();
		assert sis.length == 1 : "I1 has one generic superinterface";
		assert sis[0] == javaT.lang.reflect.Generics.I3.class : "Superinterface of I1 is I3";
		tvs = javaT.lang.reflect.Generics.I2.class.getTypeParameters();
		assert tvs.length == 3 : "I3 has three formal type parameters";
		assert tvs[0].getName().equals("E1") : "Name of first formal type arg of I2 is E1";
		assert tvs[1].getName().equals("E2") : "Name of second formal type arg of I2 is E2";
		assert tvs[2].getName().equals("E3") : "Name of third formal type arg of I2 is E3";
		assert javaT.lang.reflect.Generics.I2.class.getGenericSuperclass() == javaT.lang.reflect.Generics.I2.class.getSuperclass() : "The generic and non-generic superclasses of an interface must be the same";
		tvs = javaT.lang.reflect.Generics.I3.class.getTypeParameters();
		assert tvs.length == 0 : "I3 has no formal type parameters";
		assert javaT.lang.reflect.Generics.I3.class.getGenericSuperclass() == javaT.lang.reflect.Generics.I3.class.getSuperclass() : "The generic and non-generic superclasses of an interface must be the same";
	}

	static void testTypeParameters() {
		java.lang.System.out.println("testing type parameters");
		java.lang.reflect.TypeVariable[] tvs = javaT.lang.reflect.Generics.TestC2.cls.getTypeParameters();
		assert tvs.length == 3 : "C2 should have three type parameters";
		java.lang.reflect.TypeVariable tv = tvs[0];
		java.lang.reflect.Type[] bs = tv.getBounds();
		assert bs.length == 1 : "T1 should have one bound";
		assert bs[0] instanceof java.lang.reflect.ParameterizedType : "The bound of T1 should be a parameterized type";
		tv = tvs[1];
		bs = tv.getBounds();
		assert bs.length == 1 : "T2 should have one bound";
		assert bs[0] instanceof java.lang.reflect.ParameterizedType : "The bound of T2 should be a parameterized type";
		tv = tvs[2];
		bs = tv.getBounds();
		assert bs.length == 1 : "T3 should have one bound";
		assert bs[0] == java.lang.Throwable.class : "The bound of T3 should be Throwable";
	}

	static void testMethods() throws java.lang.NoSuchMethodException {
		java.lang.System.out.println("testing methods");
		java.lang.Class[] params1 = new java.lang.Class[3];
		params1[0] = java.lang.Throwable.class;
		params1[1] = javaT.lang.reflect.Generics.C0.class;
		params1[2] = javaT.lang.reflect.Generics.C0.class;
		java.lang.Class[] params2 = new java.lang.Class[1];
		params2[0] = java.lang.Object.class;
		java.lang.Class[] params3 = new java.lang.Class[1];
		params3[0] = javaT.lang.reflect.Generics.C0.class;
		java.lang.reflect.Method mc1t = javaT.lang.reflect.Generics.TestC2.cls.getMethod("mc1t", params1);
		java.lang.reflect.Method mc1 = javaT.lang.reflect.Generics.TestC2.cls.getMethod("mc1", params2);
		java.lang.reflect.Method mt = javaT.lang.reflect.Generics.TestC2.cls.getMethod("mt", params3);
		java.lang.reflect.Type rt_mc1t = mc1t.getGenericReturnType();
		assert rt_mc1t instanceof java.lang.reflect.ParameterizedType : "The return type of mc1t should be a parameterized type";
		java.lang.reflect.ParameterizedType pt = ((java.lang.reflect.ParameterizedType) (rt_mc1t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.C0.class : "The raw return type of mc1t should be C0";
		java.lang.reflect.Type[] tas = pt.getActualTypeArguments();
		assert tas.length == 1 : "Return type of mc1t should have one type argument";
		assert tas[0] instanceof java.lang.reflect.TypeVariable : "Type argument of return type of mc1t is a type variable";
		java.lang.reflect.Type rt_mc1 = mc1.getGenericReturnType();
		assert rt_mc1 == javaT.lang.reflect.Generics.C0.class : "Return type of mc1 is C0";
		java.lang.reflect.Type rt_mt = mt.getGenericReturnType();
		assert rt_mt instanceof java.lang.reflect.TypeVariable : "Return type of mt is a type variable";
		java.lang.reflect.Type[] pt_mc1t = mc1t.getGenericParameterTypes();
		assert pt_mc1t.length == 3 : "C0.mc1t has three parameters";
		java.lang.reflect.Type p1_mc1t = pt_mc1t[0];
		assert p1_mc1t != null;
		assert p1_mc1t instanceof java.lang.reflect.TypeVariable : "Generic type of the 1st parameter of mc1t(T) is a type variable";
		java.lang.reflect.TypeVariable tv = ((java.lang.reflect.TypeVariable) (p1_mc1t));
		assert tv.getName().equals("T3") : "Name of 1st type parameter of mc1t is T3, not " + tv.getName();
		java.lang.reflect.Type[] bs = tv.getBounds();
		assert bs.length == 1 : "T3 should have one bound (mc1t)";
		assert bs[0] == java.lang.Throwable.class : "The bound of T3 should be Throwable(mc1t)";
		java.lang.reflect.Type p2_mc1t = pt_mc1t[1];
		assert p2_mc1t instanceof java.lang.reflect.ParameterizedType : "The type of parameter 2 of mc1t is a parameterized type";
		pt = ((java.lang.reflect.ParameterizedType) (p2_mc1t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.C0.class : "Type of parameter 2 of mc1t is instantiation of C0";
		assert pt.getOwnerType() == null : "Type of parameter 2 of mc1t is has null owner";
		tas = pt.getActualTypeArguments();
		assert tas.length == 1 : "The type of parameter 2 of mc1t has one type argument";
		java.lang.reflect.Type ta = tas[0];
		assert ta instanceof java.lang.reflect.TypeVariable : "The actual type arg of C0<T> is a type variable (mc1t)";
		tv = ((java.lang.reflect.TypeVariable) (ta));
		assert tv.getName().equals("T") : "mc1t: Name of the type arg of C0<T> is T, not " + tv.getName();
		bs = tv.getBounds();
		assert bs.length == 1 : "mc1t: The type argument of C0<T>  should have one bound";
		assert bs[0] == java.lang.Object.class : "mc1t: The bound of the type arg of C0<T> should be Object";
		java.lang.reflect.Type p3_mc1t = pt_mc1t[2];
		assert p3_mc1t == javaT.lang.reflect.Generics.C0.class : "Type of parameter 3 of mc1t is C0";
		java.lang.reflect.Type[] pt_mc1 = mc1.getGenericParameterTypes();
		assert pt_mc1.length == 1 : "C2.mc1 has one parameter";
		java.lang.reflect.Type[] pt_mt = mt.getGenericParameterTypes();
		assert pt_mt.length == 1 : "C2.mt has one parameter";
		java.lang.reflect.Type p_mt = pt_mt[0];
		assert p_mt instanceof java.lang.reflect.TypeVariable : "The generic type of the parameter of mt(T) is a type variable";
		tv = ((java.lang.reflect.TypeVariable) (p_mt));
		assert tv.getName().equals("T2") : "The name of the type parameter of mt is T2, not " + tv.getName();
		bs = tv.getBounds();
		assert bs.length == 1 : "T2 should have one bound";
		assert bs[0] instanceof java.lang.reflect.ParameterizedType : "The bound of T2 should be parameterized type";
		java.lang.reflect.Type[] et_mc1t = mc1t.getGenericExceptionTypes();
		assert et_mc1t.length == 0 : "Method C0.mc1t should have no generic exception types";
		java.lang.reflect.Type[] et_mc1 = mc1.getGenericExceptionTypes();
		assert et_mc1.length == 0 : "Method C0.mc1 should have no generic exception types";
		java.lang.reflect.Type[] et_mt = mt.getGenericExceptionTypes();
		assert et_mt.length == 0 : "Method C0.mt should have no generic exception types";
		java.lang.reflect.TypeVariable[] tv_mc1t = mc1t.getTypeParameters();
		assert tv_mc1t.length == 1 : "Method C2.mc1t should have one type parameter";
		java.lang.reflect.TypeVariable[] tv_mc1 = mc1.getTypeParameters();
		assert tv_mc1.length == 2 : "Method C2.mc1 should have two type parameters";
		java.lang.reflect.TypeVariable[] tv_mt = mt.getTypeParameters();
		assert tv_mt.length == 0 : "Method C2.mt should have no type parameters";
	}

	static void testFields() throws java.lang.NoSuchFieldException {
		java.lang.System.out.println("testing fields");
		java.lang.reflect.Field ft = javaT.lang.reflect.Generics.TestC2.cls.getField("ft");
		java.lang.reflect.Field fc1t = javaT.lang.reflect.Generics.TestC2.cls.getField("fc1t");
		java.lang.reflect.Field fc1 = javaT.lang.reflect.Generics.TestC2.cls.getField("fc1");
		java.lang.reflect.Field fi = javaT.lang.reflect.Generics.TestC2.cls.getField("fi");
		java.lang.reflect.Type gt_ft = ft.getGenericType();
		assert gt_ft instanceof java.lang.reflect.TypeVariable : "The generic type of C0.ft is a type variable";
		java.lang.reflect.TypeVariable tv = ((java.lang.reflect.TypeVariable) (gt_ft));
		assert tv.getName().equals("T1") : "The name of the type of ft is T1, not " + tv.getName();
		java.lang.reflect.Type[] bs = tv.getBounds();
		assert bs.length == 1 : "The type of ft should have one bound";
		java.lang.reflect.Type gt_fc1t = fc1t.getGenericType();
		assert gt_fc1t instanceof java.lang.reflect.ParameterizedType : "The generic type of C0.fc1t is a parameterized type";
		java.lang.reflect.ParameterizedType pt = ((java.lang.reflect.ParameterizedType) (gt_fc1t));
		assert pt.getRawType() == javaT.lang.reflect.Generics.C0.class : "Type of C2.fc1t is an instantiation of C0";
		assert pt.getOwnerType() == null : "Type of C2.fc1t is has null owner";
		java.lang.reflect.Type[] tas = pt.getActualTypeArguments();
		assert tas.length == 1 : "The type of fc1t has one type argument";
		java.lang.reflect.Type ta = tas[0];
		assert ta == java.lang.String.class : "The actual type arg of C0<String> is String";
		java.lang.reflect.Type gt_fc1 = fc1.getGenericType();
		assert gt_fc1 == javaT.lang.reflect.Generics.C0.class : " Type of C2.fc1 should be C0";
		java.lang.reflect.Type gt_fi = fi.getGenericType();
		assert gt_fi == int.class : " Type of C2.fi should be int";
	}

	static void testConstructors() throws java.lang.NoSuchMethodException {
		java.lang.System.out.println("testing constructors");
		java.lang.Class[] params1 = new java.lang.Class[1];
		params1[0] = javaT.lang.reflect.Generics.C0.class;
		java.lang.reflect.Constructor<javaT.lang.reflect.Generics.C2> con = javaT.lang.reflect.Generics.TestC2.cls.getDeclaredConstructor(params1);
		java.lang.reflect.Type[] pt_con = con.getGenericParameterTypes();
		assert pt_con.length == 1 : "Constructor C0(T) should have one generic parameter type";
		java.lang.reflect.Type pt = pt_con[0];
		assert pt instanceof java.lang.reflect.TypeVariable : "The generic type of the parameter of C0(T2) is a type variable";
		java.lang.reflect.TypeVariable tv = ((java.lang.reflect.TypeVariable) (pt));
		assert tv.getName().equals("T2") : "The name of the type parameter of C2 is T2, not " + tv.getName();
		java.lang.reflect.Type[] bs = tv.getBounds();
		assert bs.length == 1 : "T should have one bound";
		java.lang.reflect.Type[] et_con = con.getGenericExceptionTypes();
		assert et_con.length == 0 : "Constructor C2(T2) should have no generic exception types";
		java.lang.reflect.TypeVariable[] tv_con = con.getTypeParameters();
		assert tv_con.length == 0 : "Constructor C2(T2) should have no type parameters";
		java.lang.Class[] params2 = new java.lang.Class[1];
		params2[0] = java.lang.Object.class;
		con = javaT.lang.reflect.Generics.TestC2.cls.getDeclaredConstructor(params2);
		pt_con = con.getGenericParameterTypes();
		assert pt_con.length == 1 : "Constructor C0(T) should have one generic parameter type";
		pt = pt_con[0];
		assert pt instanceof java.lang.reflect.TypeVariable : "The generic type of the parameter of C2(T) is a type variable";
		tv = ((java.lang.reflect.TypeVariable) (pt));
		assert tv.getName().equals("T") : "The name of the type parameter of C2 is T, not " + tv.getName();
		bs = tv.getBounds();
		assert bs.length == 1 : "T should have one bound";
		et_con = con.getGenericExceptionTypes();
		assert et_con.length == 0 : "Constructor C2(T) should have no generic exception types";
		tv_con = con.getTypeParameters();
		assert tv_con.length == 1 : "Constructor C2(T) should have one type parameter";
		java.lang.Class[] params3 = new java.lang.Class[3];
		params3[0] = java.lang.Object.class;
		params3[1] = java.lang.Object.class;
		params3[2] = java.lang.Object.class;
		con = javaT.lang.reflect.Generics.TestC2.cls.getDeclaredConstructor(params3);
		pt_con = con.getGenericParameterTypes();
		assert pt_con.length == 3 : "Constructor C2(T1,T2,T4) should have three generic parameter types";
		pt = pt_con[0];
		assert pt instanceof java.lang.reflect.TypeVariable : "The generic type of the first parameter of C2(T1,T2,T4) is a type variable";
		tv = ((java.lang.reflect.TypeVariable) (pt));
		assert tv.getName().equals("T1") : "The name of the type parameter of C2(T1,T2,T4) is T1, not " + tv.getName();
		bs = tv.getBounds();
		assert bs.length == 1 : "T should have one bound";
		et_con = con.getGenericExceptionTypes();
		assert et_con.length == 0 : "Constructor C2(T1,T2,T4) should have no generic exception types";
		tv_con = con.getTypeParameters();
		assert tv_con.length == 4 : "Constructor C2(T1,T2,T4) should have four type parameters";
		java.lang.Class[] params4 = new java.lang.Class[0];
		con = javaT.lang.reflect.Generics.TestC2.cls.getDeclaredConstructor(params4);
		pt_con = con.getGenericParameterTypes();
		assert pt_con.length == 0 : "Constructor C2() should have no generic parameter types";
		et_con = con.getGenericExceptionTypes();
		assert et_con.length == 1 : "Constructor C2() should have one generic exception type";
		tv_con = con.getTypeParameters();
		assert tv_con.length == 0 : "Constructor C2() should have no type parameters";
	}
}