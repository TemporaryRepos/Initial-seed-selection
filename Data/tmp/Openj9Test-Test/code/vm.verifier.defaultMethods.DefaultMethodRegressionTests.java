public class DefaultMethodRegressionTests {
	public static void main(java.lang.String... args) {
		new vm.verifier.defaultMethods.DefaultMethodRegressionTests().run(args);
	}

	void run(java.lang.String... args) {
		testLostOverloadedMethod();
		java.lang.System.out.println("testLostOverloadedMethod: OK");
		testInferenceVerifier();
		java.lang.System.out.println("testInferenceVerifier: OK");
	}

	void testLostOverloadedMethod() {
		vm.verifier.defaultMethods.C c = new vm.verifier.defaultMethods.C();
		assertEquals(c.bbb(new java.lang.Integer(1)), 22);
		assertEquals(c.bbb(new java.lang.Float(1.1)), 33);
		assertEquals(c.bbb(new java.lang.Long(1L)), 44);
		assertEquals(c.bbb(new java.lang.Double(0.01)), 55);
		assertEquals(c.bbb(new java.lang.String("")), 66);
	}

	void testInferenceVerifier() {
		byte[] I_bytes = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), 0x0, 0x0, 0x0, 0x34, 0x0, 0x8, 0x7, 0x0, 0x6, 0x7, 0x0, 0x7, 0x1, 0x0, 0x3, 0x66, 0x6f, 0x6f, 0x1, 0x0, 0x3, 0x28, 0x29, 0x49, 0x1, 0x0, 0x4, 0x43, 0x6f, 0x64, 0x65, 0x1, 0x0, 0x1, 0x49, 0x1, 0x0, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x1, 0x0, 0x3, 0x0, 0x4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x0, 0x0, 0xf, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x3, 0x10, 0x63, ((byte) (0xac)), 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
		byte[] C_bytes = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), 0x0, 0x0, 0x0, 0x31, 0x0, 0xc, 0xa, 0x0, 0x3, 0x0, 0x8, 0x7, 0x0, 0x9, 0x7, 0x0, 0xa, 0x7, 0x0, 0xb, 0x1, 0x0, 0x6, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x1, 0x0, 0x3, 0x28, 0x29, 0x56, 0x1, 0x0, 0x4, 0x43, 0x6f, 0x64, 0x65, 0xc, 0x0, 0x5, 0x0, 0x6, 0x1, 0x0, 0x1, 0x43, 0x1, 0x0, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1, 0x0, 0x1, 0x49, 0x0, 0x21, 0x0, 0x2, 0x0, 0x3, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x5, 0x0, 0x6, 0x0, 0x1, 0x0, 0x7, 0x0, 0x0, 0x0, 0x11, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x2a, ((byte) (0xb7)), 0x0, 0x1, ((byte) (0xb1)), 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
		java.lang.ClassLoader cl = new java.lang.ClassLoader() {
			protected java.lang.Class<?> findClass(java.lang.String name) {
				if (name.equals("I")) {
					return defineClass("I", I_bytes, 0, I_bytes.length);
				} else if (name.equals("C")) {
					return defineClass("C", C_bytes, 0, C_bytes.length);
				} else {
					return null;
				}
			}
		};
		try {
			java.lang.Class.forName("C", true, cl);
		} catch (java.lang.Exception e) {
			throw new java.lang.RuntimeException(e);
		}
	}

	void assertEquals(java.lang.Object o1, java.lang.Object o2) {
		java.lang.System.out.print("Expected: " + o1);
		java.lang.System.out.println(", Obtained: " + o2);
		if (!o1.equals(o2)) {
			throw new java.lang.RuntimeException("got unexpected values");
		}
	}
}