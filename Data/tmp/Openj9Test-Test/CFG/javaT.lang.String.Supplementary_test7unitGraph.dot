digraph "unitGraph" {
    "i17 = 0"
    "$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "$i0 = lengthof $r0"
    "if i17 >= $i0 goto r28 = newarray (int)[1114111]"
    "$r2 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "r23 = $r2[i17]"
    "i18 = 0"
    "i19 = 0"
    "$i10 = virtualinvoke r23.<java.lang.String: int length()>()"
    "if i19 >= $i10 goto r24 = newarray (int)[i18]"
    "i20 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i19)"
    "i18 = i18 + 1"
    "$i16 = staticinvoke <java.lang.Character: int charCount(int)>(i20)"
    "i19 = i19 + $i16"
    "goto [?= $i10 = virtualinvoke r23.<java.lang.String: int length()>()]"
    "r24 = newarray (int)[i18]"
    "i21 = 0"
    "i22 = 0"
    "i23 = 0"
    "i24 = 0"
    "$i11 = virtualinvoke r23.<java.lang.String: int length()>()"
    "if i24 >= $i11 goto $r3 = new java.lang.String"
    "if i22 != 0 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"
    "$i14 = virtualinvoke r23.<java.lang.String: int length()>()"
    "$i15 = $i14 / 2"
    "if i24 < $i15 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"
    "i22 = i24"
    "i23 = i21"
    "i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"
    "$i26 = i21"
    "i21 = i21 + 1"
    "r24[$i26] = i25"
    "$i27 = staticinvoke <java.lang.Character: int charCount(int)>(i25)"
    "i24 = i24 + $i27"
    "goto [?= $i11 = virtualinvoke r23.<java.lang.String: int length()>()]"
    "$r3 = new java.lang.String"
    "specialinvoke $r3.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i21)"
    "r25 = $r3"
    "$z0 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>(r25)"
    "if $z0 != 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= $r4 = new java.lang.StringBuilder]"
    "$z3 = 0"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"new String(int[]...) with input[\")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z3, $r8)"
    "$r9 = new java.lang.String"
    "specialinvoke $r9.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i23)"
    "r26 = $r9"
    "$r10 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, i22)"
    "$z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r26)"
    "if $z1 != 0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= $r11 = new java.lang.StringBuilder]"
    "$z4 = 0"
    "$r11 = new java.lang.StringBuilder"
    "specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first half: new String(int[]...) with input[\")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r15)"
    "$r16 = new java.lang.String"
    "$i12 = i21 - i23"
    "specialinvoke $r16.<java.lang.String: void <init>(int[],int,int)>(r24, i23, $i12)"
    "r27 = $r16"
    "$r17 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>(i22)"
    "$z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r27)"
    "if $z2 != 0 goto $z5 = 0"
    "$z5 = 1"
    "goto [?= $r18 = new java.lang.StringBuilder]"
    "$z5 = 0"
    "$r18 = new java.lang.StringBuilder"
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"second half: new String(int[]...) with input[\")"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z5, $r22)"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(null, 0, i21, class \"Ljava/lang/NullPointerException;\")"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, -1, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i13 = i21 + 1"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, $i13, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, -1, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i21, 1, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "r24[i23] = -1"
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, i21, class \"Ljava/lang/IllegalArgumentException;\")"
    "r24[i23] = 1114112"
    "i17 = i17 + 1"
    "goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"
    "r28 = newarray (int)[1114111]"
    "i28 = 0"
    "$i1 = lengthof r28"
    "if i28 >= $i1 goto $r1 = new java.lang.String"
    "if i28 == 56319 goto i28 = i28 + 1"
    "r28[i28] = i28"
    "i28 = i28 + 1"
    "goto [?= $i1 = lengthof r28]"
    "$r1 = new java.lang.String"
    "$i2 = lengthof r28"
    "specialinvoke $r1.<java.lang.String: void <init>(int[],int,int)>(r28, 0, $i2)"
    "r29 = $r1"
    "$i3 = virtualinvoke r29.<java.lang.String: int length()>()"
    "$i4 = virtualinvoke r29.<java.lang.String: int codePointCount(int,int)>(0, $i3)"
    "$i5 = lengthof r28"
    "if $i4 == $i5 goto $z6 = 0"
    "$z6 = 1"
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")]"
    "$z6 = 0"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")"
    "$i6 = virtualinvoke r29.<java.lang.String: int length()>()"
    "$i7 = lengthof r28"
    "if $i6 > $i7 goto $z7 = 0"
    "$z7 = 1"
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")]"
    "$z7 = 0"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")"
    "i29 = 0"
    "i30 = 0"
    "$i31 = lengthof r28"
    "if i29 >= $i31 goto return"
    "i32 = virtualinvoke r29.<java.lang.String: int codePointAt(int)>(i30)"
    "$i8 = r28[i29]"
    "if i32 == $i8 goto $z8 = 0"
    "$z8 = 1"
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")]"
    "$z8 = 0"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")"
    "$i9 = staticinvoke <java.lang.Character: int charCount(int)>(i32)"
    "i30 = i30 + $i9"
    "i29 = i29 + 1"
    "goto [?= $i31 = lengthof r28]"
    "return"
    "i17 = 0"->"$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"$i0 = lengthof $r0";
    "$i0 = lengthof $r0"->"if i17 >= $i0 goto r28 = newarray (int)[1114111]";
    "if i17 >= $i0 goto r28 = newarray (int)[1114111]"->"$r2 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "if i17 >= $i0 goto r28 = newarray (int)[1114111]"->"r28 = newarray (int)[1114111]";
    "$r2 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"r23 = $r2[i17]";
    "r23 = $r2[i17]"->"i18 = 0";
    "i18 = 0"->"i19 = 0";
    "i19 = 0"->"$i10 = virtualinvoke r23.<java.lang.String: int length()>()";
    "$i10 = virtualinvoke r23.<java.lang.String: int length()>()"->"if i19 >= $i10 goto r24 = newarray (int)[i18]";
    "if i19 >= $i10 goto r24 = newarray (int)[i18]"->"i20 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i19)";
    "if i19 >= $i10 goto r24 = newarray (int)[i18]"->"r24 = newarray (int)[i18]";
    "i20 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i19)"->"i18 = i18 + 1";
    "i18 = i18 + 1"->"$i16 = staticinvoke <java.lang.Character: int charCount(int)>(i20)";
    "$i16 = staticinvoke <java.lang.Character: int charCount(int)>(i20)"->"i19 = i19 + $i16";
    "i19 = i19 + $i16"->"goto [?= $i10 = virtualinvoke r23.<java.lang.String: int length()>()]";
    "goto [?= $i10 = virtualinvoke r23.<java.lang.String: int length()>()]"->"$i10 = virtualinvoke r23.<java.lang.String: int length()>()";
    "r24 = newarray (int)[i18]"->"i21 = 0";
    "i21 = 0"->"i22 = 0";
    "i22 = 0"->"i23 = 0";
    "i23 = 0"->"i24 = 0";
    "i24 = 0"->"$i11 = virtualinvoke r23.<java.lang.String: int length()>()";
    "$i11 = virtualinvoke r23.<java.lang.String: int length()>()"->"if i24 >= $i11 goto $r3 = new java.lang.String";
    "if i24 >= $i11 goto $r3 = new java.lang.String"->"if i22 != 0 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)";
    "if i24 >= $i11 goto $r3 = new java.lang.String"->"$r3 = new java.lang.String";
    "if i22 != 0 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"->"$i14 = virtualinvoke r23.<java.lang.String: int length()>()";
    "if i22 != 0 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"->"i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)";
    "$i14 = virtualinvoke r23.<java.lang.String: int length()>()"->"$i15 = $i14 / 2";
    "$i15 = $i14 / 2"->"if i24 < $i15 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)";
    "if i24 < $i15 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"->"i22 = i24";
    "if i24 < $i15 goto i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"->"i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)";
    "i22 = i24"->"i23 = i21";
    "i23 = i21"->"i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)";
    "i25 = virtualinvoke r23.<java.lang.String: int codePointAt(int)>(i24)"->"$i26 = i21";
    "$i26 = i21"->"i21 = i21 + 1";
    "i21 = i21 + 1"->"r24[$i26] = i25";
    "r24[$i26] = i25"->"$i27 = staticinvoke <java.lang.Character: int charCount(int)>(i25)";
    "$i27 = staticinvoke <java.lang.Character: int charCount(int)>(i25)"->"i24 = i24 + $i27";
    "i24 = i24 + $i27"->"goto [?= $i11 = virtualinvoke r23.<java.lang.String: int length()>()]";
    "goto [?= $i11 = virtualinvoke r23.<java.lang.String: int length()>()]"->"$i11 = virtualinvoke r23.<java.lang.String: int length()>()";
    "$r3 = new java.lang.String"->"specialinvoke $r3.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i21)";
    "specialinvoke $r3.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i21)"->"r25 = $r3";
    "r25 = $r3"->"$z0 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>(r25)";
    "$z0 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>(r25)"->"if $z0 != 0 goto $z3 = 0";
    "if $z0 != 0 goto $z3 = 0"->"$z3 = 1";
    "if $z0 != 0 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= $r4 = new java.lang.StringBuilder]";
    "goto [?= $r4 = new java.lang.StringBuilder]"->"$r4 = new java.lang.StringBuilder";
    "$z3 = 0"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"new String(int[]...) with input[\")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"new String(int[]...) with input[\")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z3, $r8)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z3, $r8)"->"$r9 = new java.lang.String";
    "$r9 = new java.lang.String"->"specialinvoke $r9.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i23)";
    "specialinvoke $r9.<java.lang.String: void <init>(int[],int,int)>(r24, 0, i23)"->"r26 = $r9";
    "r26 = $r9"->"$r10 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, i22)";
    "$r10 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, i22)"->"$z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r26)";
    "$z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r26)"->"if $z1 != 0 goto $z4 = 0";
    "if $z1 != 0 goto $z4 = 0"->"$z4 = 1";
    "if $z1 != 0 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= $r11 = new java.lang.StringBuilder]";
    "goto [?= $r11 = new java.lang.StringBuilder]"->"$r11 = new java.lang.StringBuilder";
    "$z4 = 0"->"$r11 = new java.lang.StringBuilder";
    "$r11 = new java.lang.StringBuilder"->"specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first half: new String(int[]...) with input[\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first half: new String(int[]...) with input[\")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r15)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r15)"->"$r16 = new java.lang.String";
    "$r16 = new java.lang.String"->"$i12 = i21 - i23";
    "$i12 = i21 - i23"->"specialinvoke $r16.<java.lang.String: void <init>(int[],int,int)>(r24, i23, $i12)";
    "specialinvoke $r16.<java.lang.String: void <init>(int[],int,int)>(r24, i23, $i12)"->"r27 = $r16";
    "r27 = $r16"->"$r17 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>(i22)";
    "$r17 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>(i22)"->"$z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r27)";
    "$z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r27)"->"if $z2 != 0 goto $z5 = 0";
    "if $z2 != 0 goto $z5 = 0"->"$z5 = 1";
    "if $z2 != 0 goto $z5 = 0"->"$z5 = 0";
    "$z5 = 1"->"goto [?= $r18 = new java.lang.StringBuilder]";
    "goto [?= $r18 = new java.lang.StringBuilder]"->"$r18 = new java.lang.StringBuilder";
    "$z5 = 0"->"$r18 = new java.lang.StringBuilder";
    "$r18 = new java.lang.StringBuilder"->"specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"second half: new String(int[]...) with input[\")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"second half: new String(int[]...) with input[\")"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z5, $r22)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z5, $r22)"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(null, 0, i21, class \"Ljava/lang/NullPointerException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(null, 0, i21, class \"Ljava/lang/NullPointerException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, -1, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, -1, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i13 = i21 + 1";
    "$i13 = i21 + 1"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, $i13, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, $i13, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, i21, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, -1, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i23, -1, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i21, 1, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, i21, 1, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"r24[i23] = -1";
    "r24[i23] = -1"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, i21, class \"Ljava/lang/IllegalArgumentException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, i21, class \"Ljava/lang/IllegalArgumentException;\")"->"r24[i23] = 1114112";
    "r24[i23] = 1114112"->"staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, i21, class \"Ljava/lang/IllegalArgumentException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testNewString(int[],int,int,java.lang.Class)>(r24, 0, i21, class \"Ljava/lang/IllegalArgumentException;\")"->"i17 = i17 + 1";
    "i17 = i17 + 1"->"goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]";
    "goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"->"$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "r28 = newarray (int)[1114111]"->"i28 = 0";
    "i28 = 0"->"$i1 = lengthof r28";
    "$i1 = lengthof r28"->"if i28 >= $i1 goto $r1 = new java.lang.String";
    "if i28 >= $i1 goto $r1 = new java.lang.String"->"if i28 == 56319 goto i28 = i28 + 1";
    "if i28 >= $i1 goto $r1 = new java.lang.String"->"$r1 = new java.lang.String";
    "if i28 == 56319 goto i28 = i28 + 1"->"r28[i28] = i28";
    "if i28 == 56319 goto i28 = i28 + 1"->"i28 = i28 + 1";
    "r28[i28] = i28"->"i28 = i28 + 1";
    "i28 = i28 + 1"->"goto [?= $i1 = lengthof r28]";
    "goto [?= $i1 = lengthof r28]"->"$i1 = lengthof r28";
    "$r1 = new java.lang.String"->"$i2 = lengthof r28";
    "$i2 = lengthof r28"->"specialinvoke $r1.<java.lang.String: void <init>(int[],int,int)>(r28, 0, $i2)";
    "specialinvoke $r1.<java.lang.String: void <init>(int[],int,int)>(r28, 0, $i2)"->"r29 = $r1";
    "r29 = $r1"->"$i3 = virtualinvoke r29.<java.lang.String: int length()>()";
    "$i3 = virtualinvoke r29.<java.lang.String: int length()>()"->"$i4 = virtualinvoke r29.<java.lang.String: int codePointCount(int,int)>(0, $i3)";
    "$i4 = virtualinvoke r29.<java.lang.String: int codePointCount(int,int)>(0, $i3)"->"$i5 = lengthof r28";
    "$i5 = lengthof r28"->"if $i4 == $i5 goto $z6 = 0";
    "if $i4 == $i5 goto $z6 = 0"->"$z6 = 1";
    "if $i4 == $i5 goto $z6 = 0"->"$z6 = 0";
    "$z6 = 1"->"goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")]";
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")]"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")";
    "$z6 = 0"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z6, \"s.codePointCount(0, s.length()) != x.length\")"->"$i6 = virtualinvoke r29.<java.lang.String: int length()>()";
    "$i6 = virtualinvoke r29.<java.lang.String: int length()>()"->"$i7 = lengthof r28";
    "$i7 = lengthof r28"->"if $i6 > $i7 goto $z7 = 0";
    "if $i6 > $i7 goto $z7 = 0"->"$z7 = 1";
    "if $i6 > $i7 goto $z7 = 0"->"$z7 = 0";
    "$z7 = 1"->"goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")]";
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")]"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")";
    "$z7 = 0"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z7, \"s.length() <= x.length\")"->"i29 = 0";
    "i29 = 0"->"i30 = 0";
    "i30 = 0"->"$i31 = lengthof r28";
    "$i31 = lengthof r28"->"if i29 >= $i31 goto return";
    "if i29 >= $i31 goto return"->"i32 = virtualinvoke r29.<java.lang.String: int codePointAt(int)>(i30)";
    "if i29 >= $i31 goto return"->"return";
    "i32 = virtualinvoke r29.<java.lang.String: int codePointAt(int)>(i30)"->"$i8 = r28[i29]";
    "$i8 = r28[i29]"->"if i32 == $i8 goto $z8 = 0";
    "if i32 == $i8 goto $z8 = 0"->"$z8 = 1";
    "if i32 == $i8 goto $z8 = 0"->"$z8 = 0";
    "$z8 = 1"->"goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")]";
    "goto [?= staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")]"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")";
    "$z8 = 0"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z8, \"c != x[i]\")"->"$i9 = staticinvoke <java.lang.Character: int charCount(int)>(i32)";
    "$i9 = staticinvoke <java.lang.Character: int charCount(int)>(i32)"->"i30 = i30 + $i9";
    "i30 = i30 + $i9"->"i29 = i29 + 1";
    "i29 = i29 + 1"->"goto [?= $i31 = lengthof r28]";
    "goto [?= $i31 = lengthof r28]"->"$i31 = lengthof r28";
}
