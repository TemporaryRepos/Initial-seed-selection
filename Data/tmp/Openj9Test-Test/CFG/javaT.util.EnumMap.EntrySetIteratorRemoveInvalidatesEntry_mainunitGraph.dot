digraph "unitGraph" {
    "r10 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.EnumMap"
    "specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class \"LjavaT/util/EnumMap/EntrySetIteratorRemoveInvalidatesEntry$TestEnum;\")"
    "r1 = $r0"
    "r11 = staticinvoke <javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum[] values()>()"
    "i0 = lengthof r11"
    "i1 = 0"
    "if i1 >= i0 goto $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()"
    "r6 = r11[i1]"
    "$r7 = virtualinvoke r6.<javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: java.lang.String name()>()"
    "virtualinvoke r1.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r6, $r7)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "$r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()"
    "r12 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()"
    "$r3 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()"
    "r13 = (java.util.Map$Entry) $r3"
    "interfaceinvoke r12.<java.util.Iterator: void remove()>()"
    "interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "$r5 = new java.lang.RuntimeException"
    "specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test FAILED: Entry not invalidated by removal.\")"
    "throw $r5"
    "$r9 := @caughtexception"
    "r14 = $r9"
    "return"
    "r10 := @parameter0: java.lang.String[]"->"$r0 = new java.util.EnumMap";
    "$r0 = new java.util.EnumMap"->"specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class \"LjavaT/util/EnumMap/EntrySetIteratorRemoveInvalidatesEntry$TestEnum;\")";
    "specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class \"LjavaT/util/EnumMap/EntrySetIteratorRemoveInvalidatesEntry$TestEnum;\")"->"r1 = $r0";
    "r1 = $r0"->"r11 = staticinvoke <javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum[] values()>()";
    "r11 = staticinvoke <javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum[] values()>()"->"i0 = lengthof r11";
    "i0 = lengthof r11"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()";
    "if i1 >= i0 goto $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()"->"r6 = r11[i1]";
    "if i1 >= i0 goto $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()"->"$r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()";
    "r6 = r11[i1]"->"$r7 = virtualinvoke r6.<javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: java.lang.String name()>()";
    "$r7 = virtualinvoke r6.<javaT.util.EnumMap.EntrySetIteratorRemoveInvalidatesEntry$TestEnum: java.lang.String name()>()"->"virtualinvoke r1.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r6, $r7)";
    "virtualinvoke r1.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r6, $r7)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto $r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()";
    "$r2 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>()"->"r12 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()";
    "r12 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()"->"$r3 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()";
    "$r3 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()"->"r13 = (java.util.Map$Entry) $r3";
    "r13 = (java.util.Map$Entry) $r3"->"interfaceinvoke r12.<java.util.Iterator: void remove()>()";
    "interfaceinvoke r12.<java.util.Iterator: void remove()>()"->"interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "interfaceinvoke r12.<java.util.Iterator: void remove()>()"->"$r9 := @caughtexception";
    "interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r5 = new java.lang.RuntimeException";
    "interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r9 := @caughtexception";
    "$r5 = new java.lang.RuntimeException"->"specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test FAILED: Entry not invalidated by removal.\")";
    "$r5 = new java.lang.RuntimeException"->"$r9 := @caughtexception";
    "specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test FAILED: Entry not invalidated by removal.\")"->"throw $r5";
    "specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test FAILED: Entry not invalidated by removal.\")"->"$r9 := @caughtexception";
    "throw $r5"->"$r9 := @caughtexception";
    "$r9 := @caughtexception"->"r14 = $r9";
    "r14 = $r9"->"return";
}
