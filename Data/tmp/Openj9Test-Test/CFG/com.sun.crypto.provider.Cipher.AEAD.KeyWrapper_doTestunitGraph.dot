digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String"
    "r3 := @parameter1: java.lang.String"
    "r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\")"
    "virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(128)"
    "r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"
    "r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"
    "r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(r3, r4)"
    "$r21 = (java.security.Key) r1"
    "virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(3, $r21)"
    "r6 = virtualinvoke r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()"
    "$r22 = (java.security.Key) r2"
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r22)"
    "$r23 = (java.security.Key) r2"
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r23)"
    "$r19 = new java.lang.RuntimeException"
    "specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: expected IllegalStateException hasn\'t been thrown \")"
    "throw $r19"
    "$r8 := @caughtexception"
    "r17 = $r8"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "$r10 = virtualinvoke r17.<java.lang.IllegalStateException: java.lang.String getMessage()>()"
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r10)"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Expected exception\")"
    "$r24 = (java.security.Key) r1"
    "virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(4, $r24, r6)"
    "virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)"
    "r18 = virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)"
    "$r13 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()"
    "$r14 = interfaceinvoke r18.<java.security.Key: byte[] getEncoded()>()"
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r14)"
    "if $z0 != 0 goto return"
    "$r20 = new java.lang.RuntimeException"
    "specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: original and unwrapped keys are not equal\")"
    "throw $r20"
    "return"
    "r4 := @parameter0: java.lang.String"->"r3 := @parameter1: java.lang.String";
    "r3 := @parameter1: java.lang.String"->"r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\")";
    "r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\")"->"virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(128)";
    "virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(128)"->"r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()";
    "r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"->"r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()";
    "r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"->"r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(r3, r4)";
    "r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(r3, r4)"->"$r21 = (java.security.Key) r1";
    "$r21 = (java.security.Key) r1"->"virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(3, $r21)";
    "virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(3, $r21)"->"r6 = virtualinvoke r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()";
    "r6 = virtualinvoke r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()"->"$r22 = (java.security.Key) r2";
    "$r22 = (java.security.Key) r2"->"r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r22)";
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r22)"->"$r23 = (java.security.Key) r2";
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r22)"->"$r8 := @caughtexception";
    "$r23 = (java.security.Key) r2"->"r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r23)";
    "$r23 = (java.security.Key) r2"->"$r8 := @caughtexception";
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r23)"->"$r19 = new java.lang.RuntimeException";
    "r16 = virtualinvoke r5.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r23)"->"$r8 := @caughtexception";
    "$r19 = new java.lang.RuntimeException"->"specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: expected IllegalStateException hasn\'t been thrown \")";
    "$r19 = new java.lang.RuntimeException"->"$r8 := @caughtexception";
    "specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: expected IllegalStateException hasn\'t been thrown \")"->"throw $r19";
    "specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: expected IllegalStateException hasn\'t been thrown \")"->"$r8 := @caughtexception";
    "throw $r19"->"$r8 := @caughtexception";
    "$r8 := @caughtexception"->"r17 = $r8";
    "r17 = $r8"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"$r10 = virtualinvoke r17.<java.lang.IllegalStateException: java.lang.String getMessage()>()";
    "$r10 = virtualinvoke r17.<java.lang.IllegalStateException: java.lang.String getMessage()>()"->"virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r10)";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r10)"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Expected exception\")";
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Expected exception\")"->"$r24 = (java.security.Key) r1";
    "$r24 = (java.security.Key) r1"->"virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(4, $r24, r6)";
    "virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(4, $r24, r6)"->"virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)";
    "virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)"->"r18 = virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)";
    "r18 = virtualinvoke r5.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>(r16, r3, 3)"->"$r13 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()";
    "$r13 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()"->"$r14 = interfaceinvoke r18.<java.security.Key: byte[] getEncoded()>()";
    "$r14 = interfaceinvoke r18.<java.security.Key: byte[] getEncoded()>()"->"$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r14)";
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r14)"->"if $z0 != 0 goto return";
    "if $z0 != 0 goto return"->"$r20 = new java.lang.RuntimeException";
    "if $z0 != 0 goto return"->"return";
    "$r20 = new java.lang.RuntimeException"->"specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: original and unwrapped keys are not equal\")";
    "specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"FAILED: original and unwrapped keys are not equal\")"->"throw $r20";
}
