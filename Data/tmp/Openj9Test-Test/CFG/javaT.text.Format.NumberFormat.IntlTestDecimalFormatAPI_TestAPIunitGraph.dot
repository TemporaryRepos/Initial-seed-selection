digraph "unitGraph" {
    "r1 := @this: javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI"
    "r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"DecimalFormat API test---\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"\")"
    "$r2 = <java.util.Locale: java.util.Locale ENGLISH>"
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r2)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing DecimalFormat constructors\")"
    "$r3 = new java.text.DecimalFormat"
    "specialinvoke $r3.<java.text.DecimalFormat: void <init>()>()"
    "r4 = $r3"
    "$r5 = new java.lang.String"
    "specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.# FF\")"
    "r6 = $r5"
    "r133 = null"
    "$r7 = new java.text.DecimalFormat"
    "specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String)>(r6)"
    "r133 = $r7"
    "goto [?= $r8 = new java.text.DecimalFormatSymbols]"
    "$r132 := @caughtexception"
    "r134 = $r132"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Could not create DecimalFormat (pattern)\")"
    "$r8 = new java.text.DecimalFormatSymbols"
    "$r9 = <java.util.Locale: java.util.Locale FRENCH>"
    "specialinvoke $r8.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r9)"
    "r135 = $r8"
    "$r10 = new java.text.DecimalFormat"
    "specialinvoke $r10.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r6, r135)"
    "r11 = $r10"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing clone() and equality operators\")"
    "$r12 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.Object clone()>()"
    "r13 = (java.text.Format) $r12"
    "$z0 = virtualinvoke r4.<java.text.DecimalFormat: boolean equals(java.lang.Object)>(r13)"
    "if $z0 != 0 goto virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Clone() failed\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"
    "d0 = -10456.0037"
    "l0 = 100000000L"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"-10456.0037 is the double value\")"
    "$r14 = new java.lang.StringBuffer"
    "specialinvoke $r14.<java.lang.StringBuffer: void <init>()>()"
    "r136 = $r14"
    "$r15 = new java.lang.StringBuffer"
    "specialinvoke $r15.<java.lang.StringBuffer: void <init>()>()"
    "r137 = $r15"
    "$r16 = new java.lang.StringBuffer"
    "specialinvoke $r16.<java.lang.StringBuffer: void <init>()>()"
    "r138 = $r16"
    "$r17 = new java.lang.StringBuffer"
    "specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()"
    "r139 = $r17"
    "$r18 = new java.text.FieldPosition"
    "specialinvoke $r18.<java.text.FieldPosition: void <init>(int)>(0)"
    "r19 = $r18"
    "$r20 = new java.text.FieldPosition"
    "specialinvoke $r20.<java.text.FieldPosition: void <init>(int)>(0)"
    "r21 = $r20"
    "$r22 = new java.text.FieldPosition"
    "specialinvoke $r22.<java.text.FieldPosition: void <init>(int)>(0)"
    "r23 = $r22"
    "$r24 = new java.text.FieldPosition"
    "specialinvoke $r24.<java.text.FieldPosition: void <init>(int)>(0)"
    "r25 = $r24"
    "r140 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r136, r19)"
    "$r26 = new java.lang.StringBuilder"
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r140)"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r29)"
    "r141 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r137, r21)"
    "$r30 = new java.lang.StringBuilder"
    "specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()"
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r141)"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r33)"
    "r142 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r138, r23)"
    "$r34 = new java.lang.StringBuilder"
    "specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()"
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r142)"
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r37)"
    "r143 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r139, r25)"
    "$r38 = new java.lang.StringBuilder"
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r143)"
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r41)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing parse()\")"
    "$r42 = new java.lang.String"
    "specialinvoke $r42.<java.lang.String: void <init>(java.lang.String)>(\"-10,456.0037\")"
    "r43 = $r42"
    "$r44 = new java.text.ParsePosition"
    "specialinvoke $r44.<java.text.ParsePosition: void <init>(int)>(0)"
    "r45 = $r44"
    "$r46 = new java.lang.String"
    "specialinvoke $r46.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.#\")"
    "r47 = $r46"
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r47)"
    "$r48 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r43, r45)"
    "d1 = virtualinvoke $r48.<java.lang.Number: double doubleValue()>()"
    "$b1 = d1 cmpl -10456.0037"
    "if $b1 == 0 goto $r49 = new java.lang.StringBuilder"
    "$r122 = new java.lang.StringBuilder"
    "specialinvoke $r122.<java.lang.StringBuilder: void <init>()>()"
    "$r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"ERROR: Roundtrip failed (via parse(\")"
    "$r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"
    "$r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(-10456.0037)"
    "$r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")) for \")"
    "$r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"
    "$r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>($r129)"
    "$r49 = new java.lang.StringBuilder"
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" parsed into \")"
    "$l2 = (long) d1"
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)"
    "$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r53)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing getters and setters\")"
    "r54 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"
    "virtualinvoke r4.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>(r54)"
    "$r55 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"
    "$r56 = virtualinvoke r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"
    "$z1 = virtualinvoke $r55.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>($r56)"
    "if $z1 != 0 goto virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: set DecimalFormatSymbols() failed\")"
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"
    "r57 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>()"
    "$r58 = new java.lang.StringBuilder"
    "specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()"
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive prefix (should be +): \")"
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57)"
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r61)"
    "if r57 == \"+\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositivePrefix() failed\")"
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"
    "r62 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>()"
    "$r63 = new java.lang.StringBuilder"
    "specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()"
    "$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative prefix (should be -): \")"
    "$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62)"
    "$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r66)"
    "if r62 == \"-\" goto virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativePrefix() failed\")"
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"
    "r67 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>()"
    "$r68 = new java.lang.StringBuilder"
    "specialinvoke $r68.<java.lang.StringBuilder: void <init>()>()"
    "$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive suffix (should be _): \")"
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67)"
    "$r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r71)"
    "if r67 == \"_\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositiveSuffix() failed\")"
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"
    "r72 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>()"
    "$r73 = new java.lang.StringBuilder"
    "specialinvoke $r73.<java.lang.StringBuilder: void <init>()>()"
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative suffix (should be ~): \")"
    "$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72)"
    "$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r76)"
    "if r72 == \"~\" goto l6 = 0L"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativeSuffix() failed\")"
    "l6 = 0L"
    "virtualinvoke r133.<java.text.DecimalFormat: void setMultiplier(int)>(8)"
    "$i3 = virtualinvoke r133.<java.text.DecimalFormat: int getMultiplier()>()"
    "l7 = (long) $i3"
    "$r77 = new java.lang.StringBuilder"
    "specialinvoke $r77.<java.lang.StringBuilder: void <init>()>()"
    "$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Multiplier (should be 8): \")"
    "$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l7)"
    "$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r80)"
    "$b4 = l7 cmp 8L"
    "if $b4 == 0 goto z5 = 0"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setMultiplier() failed\")"
    "z5 = 0"
    "virtualinvoke r133.<java.text.DecimalFormat: void setGroupingSize(int)>(2)"
    "i8 = virtualinvoke r133.<java.text.DecimalFormat: int getGroupingSize()>()"
    "$r81 = new java.lang.StringBuilder"
    "specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()"
    "$r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Grouping size (should be 2): \")"
    "$l5 = (long) i8"
    "$r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5)"
    "$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r84)"
    "if i8 == 2 goto virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setGroupingSize() failed\")"
    "virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"
    "z2 = virtualinvoke r133.<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>()"
    "$r85 = new java.lang.StringBuilder"
    "specialinvoke $r85.<java.lang.StringBuilder: void <init>()>()"
    "$r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"DecimalSeparatorIsAlwaysShown (should be true) is \")"
    "if z2 == 0 goto $r144 = \"false\""
    "$r144 = \"true\""
    "goto [?= $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)]"
    "$r144 = \"false\""
    "$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)"
    "$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r88)"
    "if z2 == 1 goto r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setDecimalSeparatorAlwaysShown() failed\")"
    "r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"
    "$r90 = new java.lang.StringBuilder"
    "specialinvoke $r90.<java.lang.StringBuilder: void <init>()>()"
    "$r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Pattern is \")"
    "$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89)"
    "$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r93)"
    "r94 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"
    "$r95 = new java.lang.StringBuilder"
    "specialinvoke $r95.<java.lang.StringBuilder: void <init>()>()"
    "$r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Localized pattern is \")"
    "$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94)"
    "$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r98)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing applyPattern()\")"
    "$r99 = new java.lang.String"
    "specialinvoke $r99.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0#;(#,##0.0#)\")"
    "r100 = $r99"
    "$r101 = new java.lang.StringBuilder"
    "specialinvoke $r101.<java.lang.StringBuilder: void <init>()>()"
    "$r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"
    "$r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100)"
    "$r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r104)"
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r100)"
    "r105 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"
    "$r106 = new java.lang.StringBuilder"
    "specialinvoke $r106.<java.lang.StringBuilder: void <init>()>()"
    "$r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"
    "$r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105)"
    "$r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r109)"
    "$z3 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>(r100)"
    "if $z3 != 0 goto $r110 = new java.lang.String"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toPattern() result did not match pattern applied\")"
    "$r110 = new java.lang.String"
    "specialinvoke $r110.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0# FF;(#,##0.0# FF)\")"
    "r111 = $r110"
    "$r112 = new java.lang.StringBuilder"
    "specialinvoke $r112.<java.lang.StringBuilder: void <init>()>()"
    "$r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"
    "$r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r111)"
    "$r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r115)"
    "virtualinvoke r133.<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>(r111)"
    "r116 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"
    "$r117 = new java.lang.StringBuilder"
    "specialinvoke $r117.<java.lang.StringBuilder: void <init>()>()"
    "$r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"
    "$r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116)"
    "$r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r120)"
    "$z4 = virtualinvoke r116.<java.lang.String: boolean equals(java.lang.Object)>(r111)"
    "if $z4 != 0 goto staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toLocalizedPattern() result did not match pattern applied\")"
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"
    "goto [?= return]"
    "$r130 := @caughtexception"
    "r131 = $r130"
    "throw r131"
    "return"
    "r1 := @this: javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI"->"r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()";
    "r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"DecimalFormat API test---\")";
    "r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"DecimalFormat API test---\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"DecimalFormat API test---\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"\")"->"$r2 = <java.util.Locale: java.util.Locale ENGLISH>";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"\")"->"$r130 := @caughtexception";
    "$r2 = <java.util.Locale: java.util.Locale ENGLISH>"->"staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r2)";
    "$r2 = <java.util.Locale: java.util.Locale ENGLISH>"->"$r130 := @caughtexception";
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r2)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing DecimalFormat constructors\")";
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r2)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing DecimalFormat constructors\")"->"$r3 = new java.text.DecimalFormat";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing DecimalFormat constructors\")"->"$r130 := @caughtexception";
    "$r3 = new java.text.DecimalFormat"->"specialinvoke $r3.<java.text.DecimalFormat: void <init>()>()";
    "$r3 = new java.text.DecimalFormat"->"$r130 := @caughtexception";
    "specialinvoke $r3.<java.text.DecimalFormat: void <init>()>()"->"r4 = $r3";
    "specialinvoke $r3.<java.text.DecimalFormat: void <init>()>()"->"$r130 := @caughtexception";
    "r4 = $r3"->"$r5 = new java.lang.String";
    "r4 = $r3"->"$r130 := @caughtexception";
    "$r5 = new java.lang.String"->"specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.# FF\")";
    "$r5 = new java.lang.String"->"$r130 := @caughtexception";
    "specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.# FF\")"->"r6 = $r5";
    "specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.# FF\")"->"$r130 := @caughtexception";
    "r6 = $r5"->"r133 = null";
    "r6 = $r5"->"$r130 := @caughtexception";
    "r133 = null"->"$r132 := @caughtexception";
    "r133 = null"->"$r130 := @caughtexception";
    "r133 = null"->"$r7 = new java.text.DecimalFormat";
    "$r7 = new java.text.DecimalFormat"->"$r132 := @caughtexception";
    "$r7 = new java.text.DecimalFormat"->"$r130 := @caughtexception";
    "$r7 = new java.text.DecimalFormat"->"specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String)>(r6)";
    "specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String)>(r6)"->"$r132 := @caughtexception";
    "specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String)>(r6)"->"$r130 := @caughtexception";
    "specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String)>(r6)"->"r133 = $r7";
    "r133 = $r7"->"$r132 := @caughtexception";
    "r133 = $r7"->"$r130 := @caughtexception";
    "r133 = $r7"->"goto [?= $r8 = new java.text.DecimalFormatSymbols]";
    "goto [?= $r8 = new java.text.DecimalFormatSymbols]"->"$r8 = new java.text.DecimalFormatSymbols";
    "goto [?= $r8 = new java.text.DecimalFormatSymbols]"->"$r130 := @caughtexception";
    "$r132 := @caughtexception"->"r134 = $r132";
    "$r132 := @caughtexception"->"$r130 := @caughtexception";
    "r134 = $r132"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Could not create DecimalFormat (pattern)\")";
    "r134 = $r132"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Could not create DecimalFormat (pattern)\")"->"$r8 = new java.text.DecimalFormatSymbols";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Could not create DecimalFormat (pattern)\")"->"$r130 := @caughtexception";
    "$r8 = new java.text.DecimalFormatSymbols"->"$r9 = <java.util.Locale: java.util.Locale FRENCH>";
    "$r8 = new java.text.DecimalFormatSymbols"->"$r130 := @caughtexception";
    "$r9 = <java.util.Locale: java.util.Locale FRENCH>"->"specialinvoke $r8.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r9)";
    "$r9 = <java.util.Locale: java.util.Locale FRENCH>"->"$r130 := @caughtexception";
    "specialinvoke $r8.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r9)"->"r135 = $r8";
    "specialinvoke $r8.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r9)"->"$r130 := @caughtexception";
    "r135 = $r8"->"$r10 = new java.text.DecimalFormat";
    "r135 = $r8"->"$r130 := @caughtexception";
    "$r10 = new java.text.DecimalFormat"->"specialinvoke $r10.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r6, r135)";
    "$r10 = new java.text.DecimalFormat"->"$r130 := @caughtexception";
    "specialinvoke $r10.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r6, r135)"->"r11 = $r10";
    "specialinvoke $r10.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r6, r135)"->"$r130 := @caughtexception";
    "r11 = $r10"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing clone() and equality operators\")";
    "r11 = $r10"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing clone() and equality operators\")"->"$r12 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.Object clone()>()";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing clone() and equality operators\")"->"$r130 := @caughtexception";
    "$r12 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.Object clone()>()"->"r13 = (java.text.Format) $r12";
    "$r12 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.Object clone()>()"->"$r130 := @caughtexception";
    "r13 = (java.text.Format) $r12"->"$z0 = virtualinvoke r4.<java.text.DecimalFormat: boolean equals(java.lang.Object)>(r13)";
    "r13 = (java.text.Format) $r12"->"$r130 := @caughtexception";
    "$z0 = virtualinvoke r4.<java.text.DecimalFormat: boolean equals(java.lang.Object)>(r13)"->"if $z0 != 0 goto virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")";
    "$z0 = virtualinvoke r4.<java.text.DecimalFormat: boolean equals(java.lang.Object)>(r13)"->"$r130 := @caughtexception";
    "if $z0 != 0 goto virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Clone() failed\")";
    "if $z0 != 0 goto virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")";
    "if $z0 != 0 goto virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Clone() failed\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: Clone() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"->"d0 = -10456.0037";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing various format() methods\")"->"$r130 := @caughtexception";
    "d0 = -10456.0037"->"l0 = 100000000L";
    "d0 = -10456.0037"->"$r130 := @caughtexception";
    "l0 = 100000000L"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"-10456.0037 is the double value\")";
    "l0 = 100000000L"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"-10456.0037 is the double value\")"->"$r14 = new java.lang.StringBuffer";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"-10456.0037 is the double value\")"->"$r130 := @caughtexception";
    "$r14 = new java.lang.StringBuffer"->"specialinvoke $r14.<java.lang.StringBuffer: void <init>()>()";
    "$r14 = new java.lang.StringBuffer"->"$r130 := @caughtexception";
    "specialinvoke $r14.<java.lang.StringBuffer: void <init>()>()"->"r136 = $r14";
    "specialinvoke $r14.<java.lang.StringBuffer: void <init>()>()"->"$r130 := @caughtexception";
    "r136 = $r14"->"$r15 = new java.lang.StringBuffer";
    "r136 = $r14"->"$r130 := @caughtexception";
    "$r15 = new java.lang.StringBuffer"->"specialinvoke $r15.<java.lang.StringBuffer: void <init>()>()";
    "$r15 = new java.lang.StringBuffer"->"$r130 := @caughtexception";
    "specialinvoke $r15.<java.lang.StringBuffer: void <init>()>()"->"r137 = $r15";
    "specialinvoke $r15.<java.lang.StringBuffer: void <init>()>()"->"$r130 := @caughtexception";
    "r137 = $r15"->"$r16 = new java.lang.StringBuffer";
    "r137 = $r15"->"$r130 := @caughtexception";
    "$r16 = new java.lang.StringBuffer"->"specialinvoke $r16.<java.lang.StringBuffer: void <init>()>()";
    "$r16 = new java.lang.StringBuffer"->"$r130 := @caughtexception";
    "specialinvoke $r16.<java.lang.StringBuffer: void <init>()>()"->"r138 = $r16";
    "specialinvoke $r16.<java.lang.StringBuffer: void <init>()>()"->"$r130 := @caughtexception";
    "r138 = $r16"->"$r17 = new java.lang.StringBuffer";
    "r138 = $r16"->"$r130 := @caughtexception";
    "$r17 = new java.lang.StringBuffer"->"specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()";
    "$r17 = new java.lang.StringBuffer"->"$r130 := @caughtexception";
    "specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()"->"r139 = $r17";
    "specialinvoke $r17.<java.lang.StringBuffer: void <init>()>()"->"$r130 := @caughtexception";
    "r139 = $r17"->"$r18 = new java.text.FieldPosition";
    "r139 = $r17"->"$r130 := @caughtexception";
    "$r18 = new java.text.FieldPosition"->"specialinvoke $r18.<java.text.FieldPosition: void <init>(int)>(0)";
    "$r18 = new java.text.FieldPosition"->"$r130 := @caughtexception";
    "specialinvoke $r18.<java.text.FieldPosition: void <init>(int)>(0)"->"r19 = $r18";
    "specialinvoke $r18.<java.text.FieldPosition: void <init>(int)>(0)"->"$r130 := @caughtexception";
    "r19 = $r18"->"$r20 = new java.text.FieldPosition";
    "r19 = $r18"->"$r130 := @caughtexception";
    "$r20 = new java.text.FieldPosition"->"specialinvoke $r20.<java.text.FieldPosition: void <init>(int)>(0)";
    "$r20 = new java.text.FieldPosition"->"$r130 := @caughtexception";
    "specialinvoke $r20.<java.text.FieldPosition: void <init>(int)>(0)"->"r21 = $r20";
    "specialinvoke $r20.<java.text.FieldPosition: void <init>(int)>(0)"->"$r130 := @caughtexception";
    "r21 = $r20"->"$r22 = new java.text.FieldPosition";
    "r21 = $r20"->"$r130 := @caughtexception";
    "$r22 = new java.text.FieldPosition"->"specialinvoke $r22.<java.text.FieldPosition: void <init>(int)>(0)";
    "$r22 = new java.text.FieldPosition"->"$r130 := @caughtexception";
    "specialinvoke $r22.<java.text.FieldPosition: void <init>(int)>(0)"->"r23 = $r22";
    "specialinvoke $r22.<java.text.FieldPosition: void <init>(int)>(0)"->"$r130 := @caughtexception";
    "r23 = $r22"->"$r24 = new java.text.FieldPosition";
    "r23 = $r22"->"$r130 := @caughtexception";
    "$r24 = new java.text.FieldPosition"->"specialinvoke $r24.<java.text.FieldPosition: void <init>(int)>(0)";
    "$r24 = new java.text.FieldPosition"->"$r130 := @caughtexception";
    "specialinvoke $r24.<java.text.FieldPosition: void <init>(int)>(0)"->"r25 = $r24";
    "specialinvoke $r24.<java.text.FieldPosition: void <init>(int)>(0)"->"$r130 := @caughtexception";
    "r25 = $r24"->"r140 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r136, r19)";
    "r25 = $r24"->"$r130 := @caughtexception";
    "r140 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r136, r19)"->"$r26 = new java.lang.StringBuilder";
    "r140 = virtualinvoke r4.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r136, r19)"->"$r130 := @caughtexception";
    "$r26 = new java.lang.StringBuilder"->"specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()";
    "$r26 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")";
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r140)";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"->"$r130 := @caughtexception";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r140)"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r140)"->"$r130 := @caughtexception";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r29)";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r29)"->"r141 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r137, r21)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r29)"->"$r130 := @caughtexception";
    "r141 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r137, r21)"->"$r30 = new java.lang.StringBuilder";
    "r141 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r137, r21)"->"$r130 := @caughtexception";
    "$r30 = new java.lang.StringBuilder"->"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()";
    "$r30 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()"->"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")";
    "specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r141)";
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"->"$r130 := @caughtexception";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r141)"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r141)"->"$r130 := @caughtexception";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r33)";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r33)"->"r142 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r138, r23)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r33)"->"$r130 := @caughtexception";
    "r142 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r138, r23)"->"$r34 = new java.lang.StringBuilder";
    "r142 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(-10456.0037, r138, r23)"->"$r130 := @caughtexception";
    "$r34 = new java.lang.StringBuilder"->"specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()";
    "$r34 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()"->"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")";
    "specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"->"$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r142)";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-10456.0037 formatted to \")"->"$r130 := @caughtexception";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r142)"->"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r142)"->"$r130 := @caughtexception";
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r37)";
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r37)"->"r143 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r139, r25)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r37)"->"$r130 := @caughtexception";
    "r143 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r139, r25)"->"$r38 = new java.lang.StringBuilder";
    "r143 = virtualinvoke r11.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(100000000L, r139, r25)"->"$r130 := @caughtexception";
    "$r38 = new java.lang.StringBuilder"->"specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()";
    "$r38 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")";
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"->"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r143)";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"100000000 formatted to \")"->"$r130 := @caughtexception";
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r143)"->"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r143)"->"$r130 := @caughtexception";
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r41)";
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r41)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing parse()\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r41)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing parse()\")"->"$r42 = new java.lang.String";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing parse()\")"->"$r130 := @caughtexception";
    "$r42 = new java.lang.String"->"specialinvoke $r42.<java.lang.String: void <init>(java.lang.String)>(\"-10,456.0037\")";
    "$r42 = new java.lang.String"->"$r130 := @caughtexception";
    "specialinvoke $r42.<java.lang.String: void <init>(java.lang.String)>(\"-10,456.0037\")"->"r43 = $r42";
    "specialinvoke $r42.<java.lang.String: void <init>(java.lang.String)>(\"-10,456.0037\")"->"$r130 := @caughtexception";
    "r43 = $r42"->"$r44 = new java.text.ParsePosition";
    "r43 = $r42"->"$r130 := @caughtexception";
    "$r44 = new java.text.ParsePosition"->"specialinvoke $r44.<java.text.ParsePosition: void <init>(int)>(0)";
    "$r44 = new java.text.ParsePosition"->"$r130 := @caughtexception";
    "specialinvoke $r44.<java.text.ParsePosition: void <init>(int)>(0)"->"r45 = $r44";
    "specialinvoke $r44.<java.text.ParsePosition: void <init>(int)>(0)"->"$r130 := @caughtexception";
    "r45 = $r44"->"$r46 = new java.lang.String";
    "r45 = $r44"->"$r130 := @caughtexception";
    "$r46 = new java.lang.String"->"specialinvoke $r46.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.#\")";
    "$r46 = new java.lang.String"->"$r130 := @caughtexception";
    "specialinvoke $r46.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.#\")"->"r47 = $r46";
    "specialinvoke $r46.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.#\")"->"$r130 := @caughtexception";
    "r47 = $r46"->"virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r47)";
    "r47 = $r46"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r47)"->"$r48 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r43, r45)";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r47)"->"$r130 := @caughtexception";
    "$r48 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r43, r45)"->"d1 = virtualinvoke $r48.<java.lang.Number: double doubleValue()>()";
    "$r48 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r43, r45)"->"$r130 := @caughtexception";
    "d1 = virtualinvoke $r48.<java.lang.Number: double doubleValue()>()"->"$b1 = d1 cmpl -10456.0037";
    "d1 = virtualinvoke $r48.<java.lang.Number: double doubleValue()>()"->"$r130 := @caughtexception";
    "$b1 = d1 cmpl -10456.0037"->"if $b1 == 0 goto $r49 = new java.lang.StringBuilder";
    "$b1 = d1 cmpl -10456.0037"->"$r130 := @caughtexception";
    "if $b1 == 0 goto $r49 = new java.lang.StringBuilder"->"$r122 = new java.lang.StringBuilder";
    "if $b1 == 0 goto $r49 = new java.lang.StringBuilder"->"$r49 = new java.lang.StringBuilder";
    "if $b1 == 0 goto $r49 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "$r122 = new java.lang.StringBuilder"->"specialinvoke $r122.<java.lang.StringBuilder: void <init>()>()";
    "$r122 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r122.<java.lang.StringBuilder: void <init>()>()"->"$r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"ERROR: Roundtrip failed (via parse(\")";
    "specialinvoke $r122.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"ERROR: Roundtrip failed (via parse(\")"->"$r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)";
    "$r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"ERROR: Roundtrip failed (via parse(\")"->"$r130 := @caughtexception";
    "$r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"->"$r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"->"$r130 := @caughtexception";
    "$r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(-10456.0037)";
    "$r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r130 := @caughtexception";
    "$r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(-10456.0037)"->"$r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")) for \")";
    "$r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(-10456.0037)"->"$r130 := @caughtexception";
    "$r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")) for \")"->"$r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)";
    "$r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")) for \")"->"$r130 := @caughtexception";
    "$r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"->"$r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"->"$r130 := @caughtexception";
    "$r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>($r129)";
    "$r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>($r129)"->"$r49 = new java.lang.StringBuilder";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>($r129)"->"$r130 := @caughtexception";
    "$r49 = new java.lang.StringBuilder"->"specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()";
    "$r49 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"->"$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)";
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"->"$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" parsed into \")";
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43)"->"$r130 := @caughtexception";
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" parsed into \")"->"$l2 = (long) d1";
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" parsed into \")"->"$r130 := @caughtexception";
    "$l2 = (long) d1"->"$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)";
    "$l2 = (long) d1"->"$r130 := @caughtexception";
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)"->"$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)"->"$r130 := @caughtexception";
    "$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r53)";
    "$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r53)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing getters and setters\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r53)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing getters and setters\")"->"r54 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing getters and setters\")"->"$r130 := @caughtexception";
    "r54 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"virtualinvoke r4.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>(r54)";
    "r54 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"$r130 := @caughtexception";
    "virtualinvoke r4.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>(r54)"->"$r55 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()";
    "virtualinvoke r4.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>(r54)"->"$r130 := @caughtexception";
    "$r55 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"$r56 = virtualinvoke r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()";
    "$r55 = virtualinvoke r133.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"$r130 := @caughtexception";
    "$r56 = virtualinvoke r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"$z1 = virtualinvoke $r55.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>($r56)";
    "$r56 = virtualinvoke r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>()"->"$r130 := @caughtexception";
    "$z1 = virtualinvoke $r55.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>($r56)"->"if $z1 != 0 goto virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")";
    "$z1 = virtualinvoke $r55.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>($r56)"->"$r130 := @caughtexception";
    "if $z1 != 0 goto virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: set DecimalFormatSymbols() failed\")";
    "if $z1 != 0 goto virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")";
    "if $z1 != 0 goto virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: set DecimalFormatSymbols() failed\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: set DecimalFormatSymbols() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"->"r57 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>(\"+\")"->"$r130 := @caughtexception";
    "r57 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>()"->"$r58 = new java.lang.StringBuilder";
    "r57 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>()"->"$r130 := @caughtexception";
    "$r58 = new java.lang.StringBuilder"->"specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()";
    "$r58 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()"->"$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive prefix (should be +): \")";
    "specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive prefix (should be +): \")"->"$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57)";
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive prefix (should be +): \")"->"$r130 := @caughtexception";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57)"->"$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57)"->"$r130 := @caughtexception";
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r61)";
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r61)"->"if r57 == \"+\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r61)"->"$r130 := @caughtexception";
    "if r57 == \"+\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositivePrefix() failed\")";
    "if r57 == \"+\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")";
    "if r57 == \"+\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositivePrefix() failed\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositivePrefix() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"->"r62 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>(\"-\")"->"$r130 := @caughtexception";
    "r62 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>()"->"$r63 = new java.lang.StringBuilder";
    "r62 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>()"->"$r130 := @caughtexception";
    "$r63 = new java.lang.StringBuilder"->"specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()";
    "$r63 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()"->"$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative prefix (should be -): \")";
    "specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative prefix (should be -): \")"->"$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62)";
    "$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative prefix (should be -): \")"->"$r130 := @caughtexception";
    "$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62)"->"$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62)"->"$r130 := @caughtexception";
    "$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r66)";
    "$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r66)"->"if r62 == \"-\" goto virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r66)"->"$r130 := @caughtexception";
    "if r62 == \"-\" goto virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativePrefix() failed\")";
    "if r62 == \"-\" goto virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")";
    "if r62 == \"-\" goto virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativePrefix() failed\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativePrefix() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"->"r67 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>(\"_\")"->"$r130 := @caughtexception";
    "r67 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>()"->"$r68 = new java.lang.StringBuilder";
    "r67 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>()"->"$r130 := @caughtexception";
    "$r68 = new java.lang.StringBuilder"->"specialinvoke $r68.<java.lang.StringBuilder: void <init>()>()";
    "$r68 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r68.<java.lang.StringBuilder: void <init>()>()"->"$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive suffix (should be _): \")";
    "specialinvoke $r68.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive suffix (should be _): \")"->"$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67)";
    "$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Positive suffix (should be _): \")"->"$r130 := @caughtexception";
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67)"->"$r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67)"->"$r130 := @caughtexception";
    "$r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r71)";
    "$r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r71)"->"if r67 == \"_\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r71)"->"$r130 := @caughtexception";
    "if r67 == \"_\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositiveSuffix() failed\")";
    "if r67 == \"_\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")";
    "if r67 == \"_\" goto virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositiveSuffix() failed\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setPositiveSuffix() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"->"r72 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>(\"~\")"->"$r130 := @caughtexception";
    "r72 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>()"->"$r73 = new java.lang.StringBuilder";
    "r72 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>()"->"$r130 := @caughtexception";
    "$r73 = new java.lang.StringBuilder"->"specialinvoke $r73.<java.lang.StringBuilder: void <init>()>()";
    "$r73 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r73.<java.lang.StringBuilder: void <init>()>()"->"$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative suffix (should be ~): \")";
    "specialinvoke $r73.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative suffix (should be ~): \")"->"$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72)";
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Negative suffix (should be ~): \")"->"$r130 := @caughtexception";
    "$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72)"->"$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72)"->"$r130 := @caughtexception";
    "$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r76)";
    "$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r76)"->"if r72 == \"~\" goto l6 = 0L";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r76)"->"$r130 := @caughtexception";
    "if r72 == \"~\" goto l6 = 0L"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativeSuffix() failed\")";
    "if r72 == \"~\" goto l6 = 0L"->"l6 = 0L";
    "if r72 == \"~\" goto l6 = 0L"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativeSuffix() failed\")"->"l6 = 0L";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setNegativeSuffix() failed\")"->"$r130 := @caughtexception";
    "l6 = 0L"->"virtualinvoke r133.<java.text.DecimalFormat: void setMultiplier(int)>(8)";
    "l6 = 0L"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setMultiplier(int)>(8)"->"$i3 = virtualinvoke r133.<java.text.DecimalFormat: int getMultiplier()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setMultiplier(int)>(8)"->"$r130 := @caughtexception";
    "$i3 = virtualinvoke r133.<java.text.DecimalFormat: int getMultiplier()>()"->"l7 = (long) $i3";
    "$i3 = virtualinvoke r133.<java.text.DecimalFormat: int getMultiplier()>()"->"$r130 := @caughtexception";
    "l7 = (long) $i3"->"$r77 = new java.lang.StringBuilder";
    "l7 = (long) $i3"->"$r130 := @caughtexception";
    "$r77 = new java.lang.StringBuilder"->"specialinvoke $r77.<java.lang.StringBuilder: void <init>()>()";
    "$r77 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r77.<java.lang.StringBuilder: void <init>()>()"->"$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Multiplier (should be 8): \")";
    "specialinvoke $r77.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Multiplier (should be 8): \")"->"$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l7)";
    "$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Multiplier (should be 8): \")"->"$r130 := @caughtexception";
    "$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l7)"->"$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l7)"->"$r130 := @caughtexception";
    "$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r80)";
    "$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r80)"->"$b4 = l7 cmp 8L";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r80)"->"$r130 := @caughtexception";
    "$b4 = l7 cmp 8L"->"if $b4 == 0 goto z5 = 0";
    "$b4 = l7 cmp 8L"->"$r130 := @caughtexception";
    "if $b4 == 0 goto z5 = 0"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setMultiplier() failed\")";
    "if $b4 == 0 goto z5 = 0"->"z5 = 0";
    "if $b4 == 0 goto z5 = 0"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setMultiplier() failed\")"->"z5 = 0";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setMultiplier() failed\")"->"$r130 := @caughtexception";
    "z5 = 0"->"virtualinvoke r133.<java.text.DecimalFormat: void setGroupingSize(int)>(2)";
    "z5 = 0"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setGroupingSize(int)>(2)"->"i8 = virtualinvoke r133.<java.text.DecimalFormat: int getGroupingSize()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setGroupingSize(int)>(2)"->"$r130 := @caughtexception";
    "i8 = virtualinvoke r133.<java.text.DecimalFormat: int getGroupingSize()>()"->"$r81 = new java.lang.StringBuilder";
    "i8 = virtualinvoke r133.<java.text.DecimalFormat: int getGroupingSize()>()"->"$r130 := @caughtexception";
    "$r81 = new java.lang.StringBuilder"->"specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()";
    "$r81 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()"->"$r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Grouping size (should be 2): \")";
    "specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Grouping size (should be 2): \")"->"$l5 = (long) i8";
    "$r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Grouping size (should be 2): \")"->"$r130 := @caughtexception";
    "$l5 = (long) i8"->"$r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5)";
    "$l5 = (long) i8"->"$r130 := @caughtexception";
    "$r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5)"->"$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5)"->"$r130 := @caughtexception";
    "$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r84)";
    "$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r84)"->"if i8 == 2 goto virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r84)"->"$r130 := @caughtexception";
    "if i8 == 2 goto virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setGroupingSize() failed\")";
    "if i8 == 2 goto virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"->"virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)";
    "if i8 == 2 goto virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setGroupingSize() failed\")"->"virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setGroupingSize() failed\")"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"->"z2 = virtualinvoke r133.<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(1)"->"$r130 := @caughtexception";
    "z2 = virtualinvoke r133.<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>()"->"$r85 = new java.lang.StringBuilder";
    "z2 = virtualinvoke r133.<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>()"->"$r130 := @caughtexception";
    "$r85 = new java.lang.StringBuilder"->"specialinvoke $r85.<java.lang.StringBuilder: void <init>()>()";
    "$r85 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r85.<java.lang.StringBuilder: void <init>()>()"->"$r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"DecimalSeparatorIsAlwaysShown (should be true) is \")";
    "specialinvoke $r85.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"DecimalSeparatorIsAlwaysShown (should be true) is \")"->"if z2 == 0 goto $r144 = \"false\"";
    "$r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"DecimalSeparatorIsAlwaysShown (should be true) is \")"->"$r130 := @caughtexception";
    "if z2 == 0 goto $r144 = \"false\""->"$r144 = \"true\"";
    "if z2 == 0 goto $r144 = \"false\""->"$r144 = \"false\"";
    "if z2 == 0 goto $r144 = \"false\""->"$r130 := @caughtexception";
    "$r144 = \"true\""->"goto [?= $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)]";
    "$r144 = \"true\""->"$r130 := @caughtexception";
    "goto [?= $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)]"->"$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)";
    "goto [?= $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)]"->"$r130 := @caughtexception";
    "$r144 = \"false\""->"$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)";
    "$r144 = \"false\""->"$r130 := @caughtexception";
    "$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)"->"$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144)"->"$r130 := @caughtexception";
    "$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r88)";
    "$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r88)"->"if z2 == 1 goto r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r88)"->"$r130 := @caughtexception";
    "if z2 == 1 goto r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setDecimalSeparatorAlwaysShown() failed\")";
    "if z2 == 1 goto r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()";
    "if z2 == 1 goto r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setDecimalSeparatorAlwaysShown() failed\")"->"r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: setDecimalSeparatorAlwaysShown() failed\")"->"$r130 := @caughtexception";
    "r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"$r90 = new java.lang.StringBuilder";
    "r89 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"$r130 := @caughtexception";
    "$r90 = new java.lang.StringBuilder"->"specialinvoke $r90.<java.lang.StringBuilder: void <init>()>()";
    "$r90 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r90.<java.lang.StringBuilder: void <init>()>()"->"$r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Pattern is \")";
    "specialinvoke $r90.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Pattern is \")"->"$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89)";
    "$r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Pattern is \")"->"$r130 := @caughtexception";
    "$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89)"->"$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89)"->"$r130 := @caughtexception";
    "$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r93)";
    "$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r93)"->"r94 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r93)"->"$r130 := @caughtexception";
    "r94 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"->"$r95 = new java.lang.StringBuilder";
    "r94 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"->"$r130 := @caughtexception";
    "$r95 = new java.lang.StringBuilder"->"specialinvoke $r95.<java.lang.StringBuilder: void <init>()>()";
    "$r95 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r95.<java.lang.StringBuilder: void <init>()>()"->"$r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Localized pattern is \")";
    "specialinvoke $r95.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Localized pattern is \")"->"$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94)";
    "$r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Localized pattern is \")"->"$r130 := @caughtexception";
    "$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94)"->"$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94)"->"$r130 := @caughtexception";
    "$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r98)";
    "$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r98)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing applyPattern()\")";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r98)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing applyPattern()\")"->"$r99 = new java.lang.String";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>(\"Testing applyPattern()\")"->"$r130 := @caughtexception";
    "$r99 = new java.lang.String"->"specialinvoke $r99.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0#;(#,##0.0#)\")";
    "$r99 = new java.lang.String"->"$r130 := @caughtexception";
    "specialinvoke $r99.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0#;(#,##0.0#)\")"->"r100 = $r99";
    "specialinvoke $r99.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0#;(#,##0.0#)\")"->"$r130 := @caughtexception";
    "r100 = $r99"->"$r101 = new java.lang.StringBuilder";
    "r100 = $r99"->"$r130 := @caughtexception";
    "$r101 = new java.lang.StringBuilder"->"specialinvoke $r101.<java.lang.StringBuilder: void <init>()>()";
    "$r101 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r101.<java.lang.StringBuilder: void <init>()>()"->"$r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")";
    "specialinvoke $r101.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"->"$r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100)";
    "$r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"->"$r130 := @caughtexception";
    "$r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100)"->"$r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100)"->"$r130 := @caughtexception";
    "$r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r104)";
    "$r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r104)"->"virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r100)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r104)"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r100)"->"r105 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(r100)"->"$r130 := @caughtexception";
    "r105 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"$r106 = new java.lang.StringBuilder";
    "r105 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toPattern()>()"->"$r130 := @caughtexception";
    "$r106 = new java.lang.StringBuilder"->"specialinvoke $r106.<java.lang.StringBuilder: void <init>()>()";
    "$r106 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r106.<java.lang.StringBuilder: void <init>()>()"->"$r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")";
    "specialinvoke $r106.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"->"$r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105)";
    "$r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"->"$r130 := @caughtexception";
    "$r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105)"->"$r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105)"->"$r130 := @caughtexception";
    "$r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r109)";
    "$r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r109)"->"$z3 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>(r100)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r109)"->"$r130 := @caughtexception";
    "$z3 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>(r100)"->"if $z3 != 0 goto $r110 = new java.lang.String";
    "$z3 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>(r100)"->"$r130 := @caughtexception";
    "if $z3 != 0 goto $r110 = new java.lang.String"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toPattern() result did not match pattern applied\")";
    "if $z3 != 0 goto $r110 = new java.lang.String"->"$r110 = new java.lang.String";
    "if $z3 != 0 goto $r110 = new java.lang.String"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toPattern() result did not match pattern applied\")"->"$r110 = new java.lang.String";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toPattern() result did not match pattern applied\")"->"$r130 := @caughtexception";
    "$r110 = new java.lang.String"->"specialinvoke $r110.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0# FF;(#,##0.0# FF)\")";
    "$r110 = new java.lang.String"->"$r130 := @caughtexception";
    "specialinvoke $r110.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0# FF;(#,##0.0# FF)\")"->"r111 = $r110";
    "specialinvoke $r110.<java.lang.String: void <init>(java.lang.String)>(\"#,##0.0# FF;(#,##0.0# FF)\")"->"$r130 := @caughtexception";
    "r111 = $r110"->"$r112 = new java.lang.StringBuilder";
    "r111 = $r110"->"$r130 := @caughtexception";
    "$r112 = new java.lang.StringBuilder"->"specialinvoke $r112.<java.lang.StringBuilder: void <init>()>()";
    "$r112 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r112.<java.lang.StringBuilder: void <init>()>()"->"$r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")";
    "specialinvoke $r112.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"->"$r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r111)";
    "$r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Applying pattern \")"->"$r130 := @caughtexception";
    "$r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r111)"->"$r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r111)"->"$r130 := @caughtexception";
    "$r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r115)";
    "$r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r115)"->"virtualinvoke r133.<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>(r111)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r115)"->"$r130 := @caughtexception";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>(r111)"->"r116 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()";
    "virtualinvoke r133.<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>(r111)"->"$r130 := @caughtexception";
    "r116 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"->"$r117 = new java.lang.StringBuilder";
    "r116 = virtualinvoke r133.<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>()"->"$r130 := @caughtexception";
    "$r117 = new java.lang.StringBuilder"->"specialinvoke $r117.<java.lang.StringBuilder: void <init>()>()";
    "$r117 = new java.lang.StringBuilder"->"$r130 := @caughtexception";
    "specialinvoke $r117.<java.lang.StringBuilder: void <init>()>()"->"$r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")";
    "specialinvoke $r117.<java.lang.StringBuilder: void <init>()>()"->"$r130 := @caughtexception";
    "$r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"->"$r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116)";
    "$r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Extracted pattern is \")"->"$r130 := @caughtexception";
    "$r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116)"->"$r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116)"->"$r130 := @caughtexception";
    "$r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r120)";
    "$r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r120)"->"$z4 = virtualinvoke r116.<java.lang.String: boolean equals(java.lang.Object)>(r111)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void logln(java.lang.String)>($r120)"->"$r130 := @caughtexception";
    "$z4 = virtualinvoke r116.<java.lang.String: boolean equals(java.lang.Object)>(r111)"->"if $z4 != 0 goto staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)";
    "$z4 = virtualinvoke r116.<java.lang.String: boolean equals(java.lang.Object)>(r111)"->"$r130 := @caughtexception";
    "if $z4 != 0 goto staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"->"virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toLocalizedPattern() result did not match pattern applied\")";
    "if $z4 != 0 goto staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"->"staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)";
    "if $z4 != 0 goto staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"->"$r130 := @caughtexception";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toLocalizedPattern() result did not match pattern applied\")"->"staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)";
    "virtualinvoke r1.<javaT.text.Format.NumberFormat.IntlTestDecimalFormatAPI: void errln(java.lang.String)>(\"ERROR: toLocalizedPattern() result did not match pattern applied\")"->"$r130 := @caughtexception";
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r130 := @caughtexception"->"r131 = $r130";
    "$r130 := @caughtexception"->"$r130 := @caughtexception";
    "r131 = $r130"->"staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)";
    "r131 = $r130"->"$r130 := @caughtexception";
    "staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r0)"->"throw r131";
}
