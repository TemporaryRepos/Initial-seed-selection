digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r6 := @parameter0: java.lang.String[];
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r0);
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r1);
z3 = interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>(r1);
staticinvoke <javaT.util.Collections.EqualsTest: void assertTrue(boolean)>(z3);
interfaceinvoke r1.<java.util.List: boolean remove(java.lang.Object)>(r1);
$r2 = new java.util.HashSet;
specialinvoke $r2.<java.util.HashSet: void <init>()>();
r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r2);
interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r3);
z4 = interfaceinvoke r3.<java.util.Set: boolean equals(java.lang.Object)>(r3);
staticinvoke <javaT.util.Collections.EqualsTest: void assertTrue(boolean)>(z4);
$r4 = new java.util.HashMap;
specialinvoke $r4.<java.util.HashMap: void <init>()>();
r5 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r4);
z5 = interfaceinvoke r5.<java.util.Map: boolean equals(java.lang.Object)>(r5);
staticinvoke <javaT.util.Collections.EqualsTest: void assertTrue(boolean)>(z5);
return;
"
}
