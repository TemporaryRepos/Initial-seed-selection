digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
b3 = 0;
$i0 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueTests()>();
i4 = b3 + $i0;
$i1 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueRoundedTests()>();
i5 = i4 + $i1;
$i2 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueScalingTests()>();
i6 = i5 + $i2;
if i6 <= 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream err>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Encountered \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing integral division.\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();
throw $r6;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
b3 = 0;
$i0 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueTests()>();
i4 = b3 + $i0;
$i1 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueRoundedTests()>();
i5 = i4 + $i1;
$i2 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueScalingTests()>();
i6 = i5 + $i2;
if i6 <= 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream err>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Encountered \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing integral division.\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();
throw $r6;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
b3 = 0;
$i0 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueTests()>();
i4 = b3 + $i0;
$i1 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueRoundedTests()>();
i5 = i4 + $i1;
$i2 = staticinvoke <javaT.math.BigDecimal.IntegralDivisionTests: int dividetoIntegralValueScalingTests()>();
i6 = i5 + $i2;
if i6 <= 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
