digraph "unitGraph" {
    "r0 := @parameter0: java.nio.IntBuffer"
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"
    "$i1 = i0 + 7"
    "r1 = newarray (int)[$i1]"
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>(r1, 7, i0)"
    "i8 = 0"
    "if i8 >= i0 goto return"
    "$i2 = i8 + 7"
    "$i3 = r1[$i2]"
    "$l4 = (long) $i3"
    "$l5 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i8)"
    "$i6 = (int) $l5"
    "$l7 = (long) $i6"
    "staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l7)"
    "i8 = i8 + 1"
    "goto [?= (branch)]"
    "return"
    "r0 := @parameter0: java.nio.IntBuffer"->"i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"->"$i1 = i0 + 7";
    "$i1 = i0 + 7"->"r1 = newarray (int)[$i1]";
    "r1 = newarray (int)[$i1]"->"virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>(r1, 7, i0)";
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>(r1, 7, i0)"->"i8 = 0";
    "i8 = 0"->"if i8 >= i0 goto return";
    "if i8 >= i0 goto return"->"$i2 = i8 + 7";
    "if i8 >= i0 goto return"->"return";
    "$i2 = i8 + 7"->"$i3 = r1[$i2]";
    "$i3 = r1[$i2]"->"$l4 = (long) $i3";
    "$l4 = (long) $i3"->"$l5 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i8)";
    "$l5 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i8)"->"$i6 = (int) $l5";
    "$i6 = (int) $l5"->"$l7 = (long) $i6";
    "$l7 = (long) $i6"->"staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l7)";
    "staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l7)"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i0 goto return";
}
