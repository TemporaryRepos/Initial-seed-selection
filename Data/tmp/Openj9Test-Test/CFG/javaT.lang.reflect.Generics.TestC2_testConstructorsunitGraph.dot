digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")"
    "r1 = newarray (java.lang.Class)[1]"
    "r1[0] = class \"LjavaT/lang/reflect/Generics/C0;\""
    "$r2 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r48 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)"
    "r49 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r50 = r49[0]"
    "$i14 = lengthof r49"
    "if $i14 == 1 goto r50 = r49[0]"
    "$r47 = new java.lang.AssertionError"
    "specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")"
    "throw $r47"
    "r50 = r49[0]"
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z1 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"
    "$z26 = r50 instanceof java.lang.reflect.TypeVariable"
    "if $z26 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"
    "$r46 = new java.lang.AssertionError"
    "specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C0(T2) is a type variable\")"
    "throw $r46"
    "r51 = (java.lang.reflect.TypeVariable) r50"
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z2 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r39 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z25 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")"
    "if $z25 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r40 = new java.lang.AssertionError"
    "$r41 = new java.lang.StringBuilder"
    "specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()"
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T2, not \")"
    "$r43 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43)"
    "$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>($r45)"
    "throw $r40"
    "r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z3 != 0 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i13 = lengthof r52"
    "if $i13 == 1 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r38 = new java.lang.AssertionError"
    "specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r38"
    "r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z4 != 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i12 = lengthof r53"
    "if $i12 == 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r37 = new java.lang.AssertionError"
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no generic exception types\")"
    "throw $r37"
    "r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z5 != 0 goto r3 = newarray (java.lang.Class)[1]"
    "$i11 = lengthof r54"
    "if $i11 == 0 goto r3 = newarray (java.lang.Class)[1]"
    "$r36 = new java.lang.AssertionError"
    "specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no type parameters\")"
    "throw $r36"
    "r3 = newarray (java.lang.Class)[1]"
    "r3[0] = class \"Ljava/lang/Object;\""
    "$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r55 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r3)"
    "r56 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z6 != 0 goto r57 = r56[0]"
    "$i10 = lengthof r56"
    "if $i10 == 1 goto r57 = r56[0]"
    "$r35 = new java.lang.AssertionError"
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")"
    "throw $r35"
    "r57 = r56[0]"
    "$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z7 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"
    "$z24 = r57 instanceof java.lang.reflect.TypeVariable"
    "if $z24 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"
    "$r34 = new java.lang.AssertionError"
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C2(T) is a type variable\")"
    "throw $r34"
    "r58 = (java.lang.reflect.TypeVariable) r57"
    "$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z8 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r27 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z23 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z23 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r28 = new java.lang.AssertionError"
    "$r29 = new java.lang.StringBuilder"
    "specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()"
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T, not \")"
    "$r31 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33)"
    "throw $r28"
    "r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z9 != 0 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i9 = lengthof r59"
    "if $i9 == 1 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r26 = new java.lang.AssertionError"
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r26"
    "r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z10 != 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i8 = lengthof r60"
    "if $i8 == 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r25 = new java.lang.AssertionError"
    "specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have no generic exception types\")"
    "throw $r25"
    "r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z11 != 0 goto r5 = newarray (java.lang.Class)[3]"
    "$i7 = lengthof r61"
    "if $i7 == 1 goto r5 = newarray (java.lang.Class)[3]"
    "$r24 = new java.lang.AssertionError"
    "specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have one type parameter\")"
    "throw $r24"
    "r5 = newarray (java.lang.Class)[3]"
    "r5[0] = class \"Ljava/lang/Object;\""
    "r5[1] = class \"Ljava/lang/Object;\""
    "r5[2] = class \"Ljava/lang/Object;\""
    "$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r62 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r5)"
    "r63 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z12 != 0 goto r64 = r63[0]"
    "$i6 = lengthof r63"
    "if $i6 == 3 goto r64 = r63[0]"
    "$r23 = new java.lang.AssertionError"
    "specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have three generic parameter types\")"
    "throw $r23"
    "r64 = r63[0]"
    "$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z13 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"
    "$z22 = r64 instanceof java.lang.reflect.TypeVariable"
    "if $z22 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"
    "$r22 = new java.lang.AssertionError"
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the first parameter of C2(T1,T2,T4) is a type variable\")"
    "throw $r22"
    "r65 = (java.lang.reflect.TypeVariable) r64"
    "$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z14 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r15 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z21 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T1\")"
    "if $z21 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r16 = new java.lang.AssertionError"
    "$r17 = new java.lang.StringBuilder"
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2(T1,T2,T4) is T1, not \")"
    "$r19 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)"
    "throw $r16"
    "r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z15 != 0 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i5 = lengthof r66"
    "if $i5 == 1 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r14 = new java.lang.AssertionError"
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r14"
    "r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z16 != 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i4 = lengthof r67"
    "if $i4 == 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r13 = new java.lang.AssertionError"
    "specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have no generic exception types\")"
    "throw $r13"
    "r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z17 != 0 goto r7 = newarray (java.lang.Class)[0]"
    "$i3 = lengthof r68"
    "if $i3 == 4 goto r7 = newarray (java.lang.Class)[0]"
    "$r12 = new java.lang.AssertionError"
    "specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have four type parameters\")"
    "throw $r12"
    "r7 = newarray (java.lang.Class)[0]"
    "$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r69 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r7)"
    "r70 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z18 != 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i2 = lengthof r70"
    "if $i2 == 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r11 = new java.lang.AssertionError"
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no generic parameter types\")"
    "throw $r11"
    "r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z19 != 0 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i1 = lengthof r71"
    "if $i1 == 1 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r10 = new java.lang.AssertionError"
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have one generic exception type\")"
    "throw $r10"
    "r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z20 != 0 goto return"
    "$i0 = lengthof r72"
    "if $i0 == 0 goto return"
    "$r9 = new java.lang.AssertionError"
    "specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no type parameters\")"
    "throw $r9"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")"->"r1 = newarray (java.lang.Class)[1]";
    "r1 = newarray (java.lang.Class)[1]"->"r1[0] = class \"LjavaT/lang/reflect/Generics/C0;\"";
    "r1[0] = class \"LjavaT/lang/reflect/Generics/C0;\""->"$r2 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r2 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r48 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)";
    "r48 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)"->"r49 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r49 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z0 != 0 goto r50 = r49[0]";
    "if $z0 != 0 goto r50 = r49[0]"->"$i14 = lengthof r49";
    "if $z0 != 0 goto r50 = r49[0]"->"r50 = r49[0]";
    "$i14 = lengthof r49"->"if $i14 == 1 goto r50 = r49[0]";
    "if $i14 == 1 goto r50 = r49[0]"->"$r47 = new java.lang.AssertionError";
    "if $i14 == 1 goto r50 = r49[0]"->"r50 = r49[0]";
    "$r47 = new java.lang.AssertionError"->"specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")";
    "specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")"->"throw $r47";
    "r50 = r49[0]"->"$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z1 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50";
    "if $z1 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"->"$z26 = r50 instanceof java.lang.reflect.TypeVariable";
    "if $z1 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"->"r51 = (java.lang.reflect.TypeVariable) r50";
    "$z26 = r50 instanceof java.lang.reflect.TypeVariable"->"if $z26 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50";
    "if $z26 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"->"$r46 = new java.lang.AssertionError";
    "if $z26 != 0 goto r51 = (java.lang.reflect.TypeVariable) r50"->"r51 = (java.lang.reflect.TypeVariable) r50";
    "$r46 = new java.lang.AssertionError"->"specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C0(T2) is a type variable\")";
    "specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C0(T2) is a type variable\")"->"throw $r46";
    "r51 = (java.lang.reflect.TypeVariable) r50"->"$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z2 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z2 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r39 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z2 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r39 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z25 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")";
    "$z25 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")"->"if $z25 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z25 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r40 = new java.lang.AssertionError";
    "if $z25 != 0 goto r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r40 = new java.lang.AssertionError"->"$r41 = new java.lang.StringBuilder";
    "$r41 = new java.lang.StringBuilder"->"specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()"->"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T2, not \")";
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T2, not \")"->"$r43 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r43 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43)";
    "$r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43)"->"$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>($r45)";
    "specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>($r45)"->"throw $r40";
    "r52 = interfaceinvoke r51.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z3 != 0 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z3 != 0 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i13 = lengthof r52";
    "if $z3 != 0 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i13 = lengthof r52"->"if $i13 == 1 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i13 == 1 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r38 = new java.lang.AssertionError";
    "if $i13 == 1 goto r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r38 = new java.lang.AssertionError"->"specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r38";
    "r53 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z4 != 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z4 != 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i12 = lengthof r53";
    "if $z4 != 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i12 = lengthof r53"->"if $i12 == 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i12 == 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r37 = new java.lang.AssertionError";
    "if $i12 == 0 goto r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r37 = new java.lang.AssertionError"->"specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no generic exception types\")";
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no generic exception types\")"->"throw $r37";
    "r54 = virtualinvoke r48.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z5 != 0 goto r3 = newarray (java.lang.Class)[1]";
    "if $z5 != 0 goto r3 = newarray (java.lang.Class)[1]"->"$i11 = lengthof r54";
    "if $z5 != 0 goto r3 = newarray (java.lang.Class)[1]"->"r3 = newarray (java.lang.Class)[1]";
    "$i11 = lengthof r54"->"if $i11 == 0 goto r3 = newarray (java.lang.Class)[1]";
    "if $i11 == 0 goto r3 = newarray (java.lang.Class)[1]"->"$r36 = new java.lang.AssertionError";
    "if $i11 == 0 goto r3 = newarray (java.lang.Class)[1]"->"r3 = newarray (java.lang.Class)[1]";
    "$r36 = new java.lang.AssertionError"->"specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no type parameters\")";
    "specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T2) should have no type parameters\")"->"throw $r36";
    "r3 = newarray (java.lang.Class)[1]"->"r3[0] = class \"Ljava/lang/Object;\"";
    "r3[0] = class \"Ljava/lang/Object;\""->"$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r55 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r3)";
    "r55 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r3)"->"r56 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r56 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z6 != 0 goto r57 = r56[0]";
    "if $z6 != 0 goto r57 = r56[0]"->"$i10 = lengthof r56";
    "if $z6 != 0 goto r57 = r56[0]"->"r57 = r56[0]";
    "$i10 = lengthof r56"->"if $i10 == 1 goto r57 = r56[0]";
    "if $i10 == 1 goto r57 = r56[0]"->"$r35 = new java.lang.AssertionError";
    "if $i10 == 1 goto r57 = r56[0]"->"r57 = r56[0]";
    "$r35 = new java.lang.AssertionError"->"specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")";
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C0(T) should have one generic parameter type\")"->"throw $r35";
    "r57 = r56[0]"->"$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z7 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57";
    "if $z7 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"->"$z24 = r57 instanceof java.lang.reflect.TypeVariable";
    "if $z7 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"->"r58 = (java.lang.reflect.TypeVariable) r57";
    "$z24 = r57 instanceof java.lang.reflect.TypeVariable"->"if $z24 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57";
    "if $z24 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"->"$r34 = new java.lang.AssertionError";
    "if $z24 != 0 goto r58 = (java.lang.reflect.TypeVariable) r57"->"r58 = (java.lang.reflect.TypeVariable) r57";
    "$r34 = new java.lang.AssertionError"->"specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C2(T) is a type variable\")";
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C2(T) is a type variable\")"->"throw $r34";
    "r58 = (java.lang.reflect.TypeVariable) r57"->"$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z8 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z8 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r27 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z8 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r27 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z23 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z23 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z23 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z23 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r28 = new java.lang.AssertionError";
    "if $z23 != 0 goto r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r28 = new java.lang.AssertionError"->"$r29 = new java.lang.StringBuilder";
    "$r29 = new java.lang.StringBuilder"->"specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()"->"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T, not \")";
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2 is T, not \")"->"$r31 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r31 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)";
    "$r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33)";
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33)"->"throw $r28";
    "r59 = interfaceinvoke r58.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z9 != 0 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z9 != 0 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i9 = lengthof r59";
    "if $z9 != 0 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i9 = lengthof r59"->"if $i9 == 1 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i9 == 1 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r26 = new java.lang.AssertionError";
    "if $i9 == 1 goto r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r26 = new java.lang.AssertionError"->"specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r26";
    "r60 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z10 != 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z10 != 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i8 = lengthof r60";
    "if $z10 != 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i8 = lengthof r60"->"if $i8 == 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i8 == 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r25 = new java.lang.AssertionError";
    "if $i8 == 0 goto r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r25 = new java.lang.AssertionError"->"specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have no generic exception types\")";
    "specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have no generic exception types\")"->"throw $r25";
    "r61 = virtualinvoke r55.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z11 != 0 goto r5 = newarray (java.lang.Class)[3]";
    "if $z11 != 0 goto r5 = newarray (java.lang.Class)[3]"->"$i7 = lengthof r61";
    "if $z11 != 0 goto r5 = newarray (java.lang.Class)[3]"->"r5 = newarray (java.lang.Class)[3]";
    "$i7 = lengthof r61"->"if $i7 == 1 goto r5 = newarray (java.lang.Class)[3]";
    "if $i7 == 1 goto r5 = newarray (java.lang.Class)[3]"->"$r24 = new java.lang.AssertionError";
    "if $i7 == 1 goto r5 = newarray (java.lang.Class)[3]"->"r5 = newarray (java.lang.Class)[3]";
    "$r24 = new java.lang.AssertionError"->"specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have one type parameter\")";
    "specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T) should have one type parameter\")"->"throw $r24";
    "r5 = newarray (java.lang.Class)[3]"->"r5[0] = class \"Ljava/lang/Object;\"";
    "r5[0] = class \"Ljava/lang/Object;\""->"r5[1] = class \"Ljava/lang/Object;\"";
    "r5[1] = class \"Ljava/lang/Object;\""->"r5[2] = class \"Ljava/lang/Object;\"";
    "r5[2] = class \"Ljava/lang/Object;\""->"$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r62 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r5)";
    "r62 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r5)"->"r63 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r63 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z12 != 0 goto r64 = r63[0]";
    "if $z12 != 0 goto r64 = r63[0]"->"$i6 = lengthof r63";
    "if $z12 != 0 goto r64 = r63[0]"->"r64 = r63[0]";
    "$i6 = lengthof r63"->"if $i6 == 3 goto r64 = r63[0]";
    "if $i6 == 3 goto r64 = r63[0]"->"$r23 = new java.lang.AssertionError";
    "if $i6 == 3 goto r64 = r63[0]"->"r64 = r63[0]";
    "$r23 = new java.lang.AssertionError"->"specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have three generic parameter types\")";
    "specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have three generic parameter types\")"->"throw $r23";
    "r64 = r63[0]"->"$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z13 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64";
    "if $z13 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"->"$z22 = r64 instanceof java.lang.reflect.TypeVariable";
    "if $z13 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"->"r65 = (java.lang.reflect.TypeVariable) r64";
    "$z22 = r64 instanceof java.lang.reflect.TypeVariable"->"if $z22 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64";
    "if $z22 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"->"$r22 = new java.lang.AssertionError";
    "if $z22 != 0 goto r65 = (java.lang.reflect.TypeVariable) r64"->"r65 = (java.lang.reflect.TypeVariable) r64";
    "$r22 = new java.lang.AssertionError"->"specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the first parameter of C2(T1,T2,T4) is a type variable\")";
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the first parameter of C2(T1,T2,T4) is a type variable\")"->"throw $r22";
    "r65 = (java.lang.reflect.TypeVariable) r64"->"$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z14 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z14 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r15 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z14 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r15 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z21 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T1\")";
    "$z21 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T1\")"->"if $z21 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z21 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r16 = new java.lang.AssertionError";
    "if $z21 != 0 goto r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r16 = new java.lang.AssertionError"->"$r17 = new java.lang.StringBuilder";
    "$r17 = new java.lang.StringBuilder"->"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2(T1,T2,T4) is T1, not \")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C2(T1,T2,T4) is T1, not \")"->"$r19 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r19 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)";
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)";
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)"->"throw $r16";
    "r66 = interfaceinvoke r65.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z15 != 0 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z15 != 0 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i5 = lengthof r66";
    "if $z15 != 0 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i5 = lengthof r66"->"if $i5 == 1 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i5 == 1 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r14 = new java.lang.AssertionError";
    "if $i5 == 1 goto r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r14 = new java.lang.AssertionError"->"specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r14";
    "r67 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z16 != 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z16 != 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i4 = lengthof r67";
    "if $z16 != 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i4 = lengthof r67"->"if $i4 == 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i4 == 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r13 = new java.lang.AssertionError";
    "if $i4 == 0 goto r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r13 = new java.lang.AssertionError"->"specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have no generic exception types\")";
    "specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have no generic exception types\")"->"throw $r13";
    "r68 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z17 != 0 goto r7 = newarray (java.lang.Class)[0]";
    "if $z17 != 0 goto r7 = newarray (java.lang.Class)[0]"->"$i3 = lengthof r68";
    "if $z17 != 0 goto r7 = newarray (java.lang.Class)[0]"->"r7 = newarray (java.lang.Class)[0]";
    "$i3 = lengthof r68"->"if $i3 == 4 goto r7 = newarray (java.lang.Class)[0]";
    "if $i3 == 4 goto r7 = newarray (java.lang.Class)[0]"->"$r12 = new java.lang.AssertionError";
    "if $i3 == 4 goto r7 = newarray (java.lang.Class)[0]"->"r7 = newarray (java.lang.Class)[0]";
    "$r12 = new java.lang.AssertionError"->"specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have four type parameters\")";
    "specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2(T1,T2,T4) should have four type parameters\")"->"throw $r12";
    "r7 = newarray (java.lang.Class)[0]"->"$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r69 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r7)";
    "r69 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r7)"->"r70 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r70 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z18 != 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z18 != 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i2 = lengthof r70";
    "if $z18 != 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i2 = lengthof r70"->"if $i2 == 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i2 == 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r11 = new java.lang.AssertionError";
    "if $i2 == 0 goto r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r11 = new java.lang.AssertionError"->"specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no generic parameter types\")";
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no generic parameter types\")"->"throw $r11";
    "r71 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z19 != 0 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z19 != 0 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i1 = lengthof r71";
    "if $z19 != 0 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i1 = lengthof r71"->"if $i1 == 1 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i1 == 1 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r10 = new java.lang.AssertionError";
    "if $i1 == 1 goto r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r10 = new java.lang.AssertionError"->"specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have one generic exception type\")";
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have one generic exception type\")"->"throw $r10";
    "r72 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z20 != 0 goto return";
    "if $z20 != 0 goto return"->"$i0 = lengthof r72";
    "if $z20 != 0 goto return"->"return";
    "$i0 = lengthof r72"->"if $i0 == 0 goto return";
    "if $i0 == 0 goto return"->"$r9 = new java.lang.AssertionError";
    "if $i0 == 0 goto return"->"return";
    "$r9 = new java.lang.AssertionError"->"specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no type parameters\")";
    "specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C2() should have no type parameters\")"->"throw $r9";
}
