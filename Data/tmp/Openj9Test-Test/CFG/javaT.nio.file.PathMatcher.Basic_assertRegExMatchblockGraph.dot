digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r0 = newarray (java.lang.Object)[1];
$r0[0] = r1;
virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test regex pattern: %s\", $r0);
$r5 = newarray (java.lang.String)[0];
r6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r4, $r5);
$r7 = interfaceinvoke r6.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"regex:\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = virtualinvoke $r7.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>($r11);
z0 = interfaceinvoke $r12.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r6);
if z0 == 0 goto $r13 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
goto [?= return];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\" ==> UNEXPECTED RESULT!\");
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
$i1 = $i0 + 1;
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
"
    "Block 3:
[preds: 1 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r0 = newarray (java.lang.Object)[1];
$r0[0] = r1;
virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test regex pattern: %s\", $r0);
$r5 = newarray (java.lang.String)[0];
r6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r4, $r5);
$r7 = interfaceinvoke r6.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"regex:\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = virtualinvoke $r7.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>($r11);
z0 = interfaceinvoke $r12.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r6);
if z0 == 0 goto $r13 = <java.lang.System: java.io.PrintStream out>;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
goto [?= return];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r0 = newarray (java.lang.Object)[1];
$r0[0] = r1;
virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test regex pattern: %s\", $r0);
$r5 = newarray (java.lang.String)[0];
r6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r4, $r5);
$r7 = interfaceinvoke r6.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"regex:\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = virtualinvoke $r7.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>($r11);
z0 = interfaceinvoke $r12.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r6);
if z0 == 0 goto $r13 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\" ==> UNEXPECTED RESULT!\");
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
$i1 = $i0 + 1;
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
goto [?= return];
"->"Block 3:
[preds: 1 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\" ==> UNEXPECTED RESULT!\");
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
$i1 = $i0 + 1;
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
"->"Block 3:
[preds: 1 2 ] [succs: ]
return;
";
}
