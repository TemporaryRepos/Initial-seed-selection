digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")"
    "$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r3 = r2[0]"
    "$i1 = lengthof r2"
    "if $i1 == 1 goto r3 = r2[0]"
    "$r8 = new java.lang.AssertionError"
    "specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1 should have one type parameter\")"
    "throw $r8"
    "r3 = r2[0]"
    "r4 = interfaceinvoke r3.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i0 = lengthof r4"
    "if $i0 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r7 = new java.lang.AssertionError"
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r7"
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z2 != 0 goto return"
    "$r5 = r4[0]"
    "if $r5 == class \"Ljava/lang/Object;\" goto return"
    "$r6 = new java.lang.AssertionError"
    "specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The default bound of a type variable should be Object\")"
    "throw $r6"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")"->"$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z0 != 0 goto r3 = r2[0]";
    "if $z0 != 0 goto r3 = r2[0]"->"$i1 = lengthof r2";
    "if $z0 != 0 goto r3 = r2[0]"->"r3 = r2[0]";
    "$i1 = lengthof r2"->"if $i1 == 1 goto r3 = r2[0]";
    "if $i1 == 1 goto r3 = r2[0]"->"$r8 = new java.lang.AssertionError";
    "if $i1 == 1 goto r3 = r2[0]"->"r3 = r2[0]";
    "$r8 = new java.lang.AssertionError"->"specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1 should have one type parameter\")";
    "specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1 should have one type parameter\")"->"throw $r8";
    "r3 = r2[0]"->"r4 = interfaceinvoke r3.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "r4 = interfaceinvoke r3.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i0 = lengthof r4";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i0 = lengthof r4"->"if $i0 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i0 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r7 = new java.lang.AssertionError";
    "if $i0 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r7 = new java.lang.AssertionError"->"specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r7";
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z2 != 0 goto return";
    "if $z2 != 0 goto return"->"$r5 = r4[0]";
    "if $z2 != 0 goto return"->"return";
    "$r5 = r4[0]"->"if $r5 == class \"Ljava/lang/Object;\" goto return";
    "if $r5 == class \"Ljava/lang/Object;\" goto return"->"$r6 = new java.lang.AssertionError";
    "if $r5 == class \"Ljava/lang/Object;\" goto return"->"return";
    "$r6 = new java.lang.AssertionError"->"specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The default bound of a type variable should be Object\")";
    "specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The default bound of a type variable should be Object\")"->"throw $r6";
}
