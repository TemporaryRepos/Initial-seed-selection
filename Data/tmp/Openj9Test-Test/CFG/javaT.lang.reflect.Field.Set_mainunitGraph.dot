digraph "unitGraph" {
    "r13 := @parameter0: java.lang.String[]"
    "z10 = 0"
    "$r0 = new javaT.lang.reflect.Field.Test"
    "specialinvoke $r0.<javaT.lang.reflect.Field.Test: void <init>()>()"
    "r1 = $r0"
    "$z0 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testPrimitive()>()"
    "if $z0 != 0 goto $z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()"
    "z10 = 1"
    "$r12 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testPrimitive()\")"
    "$z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()"
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessiblePrimitive()\")"
    "$z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()"
    "if $z2 != 0 goto $z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()"
    "$r10 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatilePrimitive()\")"
    "$z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()"
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticPrimitive()\")"
    "$z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()"
    "if $z4 != 0 goto $z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticPrimitive()\")"
    "$z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()"
    "if $z5 != 0 goto $z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()"
    "$r7 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testObject()\")"
    "$z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()"
    "if $z6 != 0 goto $z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleObject()\")"
    "$z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()"
    "if $z7 != 0 goto $z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()"
    "$r5 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatileObject()\")"
    "$z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()"
    "if $z8 != 0 goto $z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticObject()\")"
    "$z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()"
    "if $z9 != 0 goto (branch)"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticObject()\")"
    "if z10 == 0 goto return"
    "$r2 = new java.lang.Throwable"
    "specialinvoke $r2.<java.lang.Throwable: void <init>(java.lang.String)>(\"Test for Field.set FAILED\")"
    "throw $r2"
    "return"
    "r13 := @parameter0: java.lang.String[]"->"z10 = 0";
    "z10 = 0"->"$r0 = new javaT.lang.reflect.Field.Test";
    "$r0 = new javaT.lang.reflect.Field.Test"->"specialinvoke $r0.<javaT.lang.reflect.Field.Test: void <init>()>()";
    "specialinvoke $r0.<javaT.lang.reflect.Field.Test: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$z0 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testPrimitive()>()";
    "$z0 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testPrimitive()>()"->"if $z0 != 0 goto $z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()";
    "if $z0 != 0 goto $z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()"->"z10 = 1";
    "if $z0 != 0 goto $z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()"->"$z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()";
    "z10 = 1"->"$r12 = <java.lang.System: java.io.PrintStream out>";
    "$r12 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testPrimitive()\")";
    "virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testPrimitive()\")"->"$z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()";
    "$z1 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessiblePrimitive()>()"->"if $z1 != 0 goto $z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()";
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()"->"z10 = 1";
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()"->"$z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()";
    "z10 = 1"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessiblePrimitive()\")";
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessiblePrimitive()\")"->"$z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()";
    "$z2 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatilePrimitive()>()"->"if $z2 != 0 goto $z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()";
    "if $z2 != 0 goto $z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()"->"z10 = 1";
    "if $z2 != 0 goto $z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()"->"$z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()";
    "z10 = 1"->"$r10 = <java.lang.System: java.io.PrintStream out>";
    "$r10 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatilePrimitive()\")";
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatilePrimitive()\")"->"$z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()";
    "$z3 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticPrimitive()>()"->"if $z3 != 0 goto $z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()";
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()"->"z10 = 1";
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()"->"$z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()";
    "z10 = 1"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticPrimitive()\")";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticPrimitive()\")"->"$z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()";
    "$z4 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticPrimitive()>()"->"if $z4 != 0 goto $z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()";
    "if $z4 != 0 goto $z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()"->"z10 = 1";
    "if $z4 != 0 goto $z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()"->"$z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()";
    "z10 = 1"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticPrimitive()\")";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticPrimitive()\")"->"$z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()";
    "$z5 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testObject()>()"->"if $z5 != 0 goto $z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()";
    "if $z5 != 0 goto $z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()"->"z10 = 1";
    "if $z5 != 0 goto $z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()"->"$z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()";
    "z10 = 1"->"$r7 = <java.lang.System: java.io.PrintStream out>";
    "$r7 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testObject()\")";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testObject()\")"->"$z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()";
    "$z6 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleObject()>()"->"if $z6 != 0 goto $z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()";
    "if $z6 != 0 goto $z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()"->"z10 = 1";
    "if $z6 != 0 goto $z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()"->"$z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()";
    "z10 = 1"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleObject()\")";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleObject()\")"->"$z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()";
    "$z7 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testVolatileObject()>()"->"if $z7 != 0 goto $z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()";
    "if $z7 != 0 goto $z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()"->"z10 = 1";
    "if $z7 != 0 goto $z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()"->"$z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()";
    "z10 = 1"->"$r5 = <java.lang.System: java.io.PrintStream out>";
    "$r5 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatileObject()\")";
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testVolatileObject()\")"->"$z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()";
    "$z8 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testStaticObject()>()"->"if $z8 != 0 goto $z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()";
    "if $z8 != 0 goto $z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()"->"z10 = 1";
    "if $z8 != 0 goto $z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()"->"$z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()";
    "z10 = 1"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticObject()\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testStaticObject()\")"->"$z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()";
    "$z9 = virtualinvoke r1.<javaT.lang.reflect.Field.Test: boolean testAccessibleStaticObject()>()"->"if $z9 != 0 goto (branch)";
    "if $z9 != 0 goto (branch)"->"z10 = 1";
    "if $z9 != 0 goto (branch)"->"if z10 == 0 goto return";
    "z10 = 1"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticObject()\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED: testAccessibleStaticObject()\")"->"if z10 == 0 goto return";
    "if z10 == 0 goto return"->"$r2 = new java.lang.Throwable";
    "if z10 == 0 goto return"->"return";
    "$r2 = new java.lang.Throwable"->"specialinvoke $r2.<java.lang.Throwable: void <init>(java.lang.String)>(\"Test for Field.set FAILED\")";
    "specialinvoke $r2.<java.lang.Throwable: void <init>(java.lang.String)>(\"Test for Field.set FAILED\")"->"throw $r2";
}
