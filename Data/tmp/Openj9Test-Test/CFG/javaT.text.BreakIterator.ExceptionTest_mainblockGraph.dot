digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r0 = new javaT.text.BreakIterator.MirroredBreakIterator;
specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9);
r1 = $r0;
i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>();
if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>();
"
    "Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first != 0: \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r3;
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
virtualinvoke r9.<java.text.BreakIterator: int last()>();
r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\";
i2 = virtualinvoke $r2.<java.lang.String: int length()>();
i29 = 0;
"
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i29 > i2 goto i30 = neg i2;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1);
"
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25);
$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27);
i29 = i29 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 3 ] [succs: 8 ]
i30 = neg i2;
"
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i30 >= 0 goto i31 = 1;
"
    "Block 9:
[preds: 8 ] [succs: 8 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30);
$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23);
i30 = i30 + 1;
goto [?= (branch)];
"
    "Block 10:
[preds: 8 ] [succs: 11 ]
i31 = 1;
"
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i31 >= i2 goto i32 = i2;
"
    "Block 12:
[preds: 11 ] [succs: 11 ]
$i18 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18);
$i19 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19);
$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21);
i31 = i31 + 1;
goto [?= (branch)];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
i32 = i2;
"
    "Block 14:
[preds: 13 17 ] [succs: 15 18 ]
if i32 < 0 goto i33 = neg i2;
"
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
"
    "Block 16:
[preds: 15 ] [succs: 17 ]
$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1);
"
    "Block 17:
[preds: 15 16 ] [succs: 14 ]
$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14);
$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16);
i32 = i32 + -1;
goto [?= (branch)];
"
    "Block 18:
[preds: 14 ] [succs: 19 ]
i33 = neg i2;
"
    "Block 19:
[preds: 18 20 ] [succs: 20 21 ]
if i33 >= 0 goto i34 = 1;
"
    "Block 20:
[preds: 19 ] [succs: 19 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33);
$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12);
i33 = i33 + 1;
goto [?= (branch)];
"
    "Block 21:
[preds: 19 ] [succs: 22 ]
i34 = 1;
"
    "Block 22:
[preds: 21 23 ] [succs: 23 24 ]
if i34 >= i2 goto i35 = 0;
"
    "Block 23:
[preds: 22 ] [succs: 22 ]
$i7 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7);
$i8 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8);
$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10);
i34 = i34 + 1;
goto [?= (branch)];
"
    "Block 24:
[preds: 22 ] [succs: 25 ]
i35 = 0;
"
    "Block 25:
[preds: 24 26 ] [succs: 26 27 ]
if i35 > i2 goto i36 = neg i2;
"
    "Block 26:
[preds: 25 ] [succs: 25 ]
$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35);
$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1);
$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6);
i35 = i35 + 1;
goto [?= (branch)];
"
    "Block 27:
[preds: 25 ] [succs: 28 ]
i36 = neg i2;
"
    "Block 28:
[preds: 27 29 ] [succs: 29 30 ]
if i36 >= 0 goto i37 = 1;
"
    "Block 29:
[preds: 28 ] [succs: 28 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36);
i36 = i36 + 1;
goto [?= (branch)];
"
    "Block 30:
[preds: 28 ] [succs: 31 ]
i37 = 1;
"
    "Block 31:
[preds: 30 32 ] [succs: 32 33 ]
if i37 >= i2 goto return;
"
    "Block 32:
[preds: 31 ] [succs: 31 ]
$i3 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3);
$i4 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4);
i37 = i37 + 1;
goto [?= (branch)];
"
    "Block 33:
[preds: 31 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r0 = new javaT.text.BreakIterator.MirroredBreakIterator;
specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9);
r1 = $r0;
i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>();
if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>();
"->"Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first != 0: \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r3;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r0 = new javaT.text.BreakIterator.MirroredBreakIterator;
specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9);
r1 = $r0;
i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>();
if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>();
"->"Block 2:
[preds: 0 ] [succs: 3 ]
virtualinvoke r9.<java.text.BreakIterator: int last()>();
r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\";
i2 = virtualinvoke $r2.<java.lang.String: int length()>();
i29 = 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
virtualinvoke r9.<java.text.BreakIterator: int last()>();
r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>();
virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\");
$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\";
i2 = virtualinvoke $r2.<java.lang.String: int length()>();
i29 = 0;
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i29 > i2 goto i30 = neg i2;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i29 > i2 goto i30 = neg i2;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i29 > i2 goto i30 = neg i2;
"->"Block 7:
[preds: 3 ] [succs: 8 ]
i30 = neg i2;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1);
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25);
$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27);
i29 = i29 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1);
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25);
$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27);
i29 = i29 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29);
$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25);
$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27);
i29 = i29 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i29 > i2 goto i30 = neg i2;
";
    "Block 7:
[preds: 3 ] [succs: 8 ]
i30 = neg i2;
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i30 >= 0 goto i31 = 1;
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i30 >= 0 goto i31 = 1;
"->"Block 9:
[preds: 8 ] [succs: 8 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30);
$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23);
i30 = i30 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i30 >= 0 goto i31 = 1;
"->"Block 10:
[preds: 8 ] [succs: 11 ]
i31 = 1;
";
    "Block 9:
[preds: 8 ] [succs: 8 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30);
$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23);
i30 = i30 + 1;
goto [?= (branch)];
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i30 >= 0 goto i31 = 1;
";
    "Block 10:
[preds: 8 ] [succs: 11 ]
i31 = 1;
"->"Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i31 >= i2 goto i32 = i2;
";
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i31 >= i2 goto i32 = i2;
"->"Block 12:
[preds: 11 ] [succs: 11 ]
$i18 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18);
$i19 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19);
$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21);
i31 = i31 + 1;
goto [?= (branch)];
";
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i31 >= i2 goto i32 = i2;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
i32 = i2;
";
    "Block 12:
[preds: 11 ] [succs: 11 ]
$i18 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18);
$i19 = i2 + i31;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19);
$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21);
i31 = i31 + 1;
goto [?= (branch)];
"->"Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i31 >= i2 goto i32 = i2;
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
i32 = i2;
"->"Block 14:
[preds: 13 17 ] [succs: 15 18 ]
if i32 < 0 goto i33 = neg i2;
";
    "Block 14:
[preds: 13 17 ] [succs: 15 18 ]
if i32 < 0 goto i33 = neg i2;
"->"Block 15:
[preds: 14 ] [succs: 16 17 ]
if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
";
    "Block 14:
[preds: 13 17 ] [succs: 15 18 ]
if i32 < 0 goto i33 = neg i2;
"->"Block 18:
[preds: 14 ] [succs: 19 ]
i33 = neg i2;
";
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
"->"Block 16:
[preds: 15 ] [succs: 17 ]
$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1);
";
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
"->"Block 17:
[preds: 15 16 ] [succs: 14 ]
$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14);
$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16);
i32 = i32 + -1;
goto [?= (branch)];
";
    "Block 16:
[preds: 15 ] [succs: 17 ]
$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1);
"->"Block 17:
[preds: 15 16 ] [succs: 14 ]
$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14);
$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16);
i32 = i32 + -1;
goto [?= (branch)];
";
    "Block 17:
[preds: 15 16 ] [succs: 14 ]
$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32);
$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14);
$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16);
i32 = i32 + -1;
goto [?= (branch)];
"->"Block 14:
[preds: 13 17 ] [succs: 15 18 ]
if i32 < 0 goto i33 = neg i2;
";
    "Block 18:
[preds: 14 ] [succs: 19 ]
i33 = neg i2;
"->"Block 19:
[preds: 18 20 ] [succs: 20 21 ]
if i33 >= 0 goto i34 = 1;
";
    "Block 19:
[preds: 18 20 ] [succs: 20 21 ]
if i33 >= 0 goto i34 = 1;
"->"Block 20:
[preds: 19 ] [succs: 19 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33);
$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12);
i33 = i33 + 1;
goto [?= (branch)];
";
    "Block 19:
[preds: 18 20 ] [succs: 20 21 ]
if i33 >= 0 goto i34 = 1;
"->"Block 21:
[preds: 19 ] [succs: 22 ]
i34 = 1;
";
    "Block 20:
[preds: 19 ] [succs: 19 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33);
$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12);
i33 = i33 + 1;
goto [?= (branch)];
"->"Block 19:
[preds: 18 20 ] [succs: 20 21 ]
if i33 >= 0 goto i34 = 1;
";
    "Block 21:
[preds: 19 ] [succs: 22 ]
i34 = 1;
"->"Block 22:
[preds: 21 23 ] [succs: 23 24 ]
if i34 >= i2 goto i35 = 0;
";
    "Block 22:
[preds: 21 23 ] [succs: 23 24 ]
if i34 >= i2 goto i35 = 0;
"->"Block 23:
[preds: 22 ] [succs: 22 ]
$i7 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7);
$i8 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8);
$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10);
i34 = i34 + 1;
goto [?= (branch)];
";
    "Block 22:
[preds: 21 23 ] [succs: 23 24 ]
if i34 >= i2 goto i35 = 0;
"->"Block 24:
[preds: 22 ] [succs: 25 ]
i35 = 0;
";
    "Block 23:
[preds: 22 ] [succs: 22 ]
$i7 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7);
$i8 = i2 + i34;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8);
$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10);
i34 = i34 + 1;
goto [?= (branch)];
"->"Block 22:
[preds: 21 23 ] [succs: 23 24 ]
if i34 >= i2 goto i35 = 0;
";
    "Block 24:
[preds: 22 ] [succs: 25 ]
i35 = 0;
"->"Block 25:
[preds: 24 26 ] [succs: 26 27 ]
if i35 > i2 goto i36 = neg i2;
";
    "Block 25:
[preds: 24 26 ] [succs: 26 27 ]
if i35 > i2 goto i36 = neg i2;
"->"Block 26:
[preds: 25 ] [succs: 25 ]
$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35);
$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1);
$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6);
i35 = i35 + 1;
goto [?= (branch)];
";
    "Block 25:
[preds: 24 26 ] [succs: 26 27 ]
if i35 > i2 goto i36 = neg i2;
"->"Block 27:
[preds: 25 ] [succs: 28 ]
i36 = neg i2;
";
    "Block 26:
[preds: 25 ] [succs: 25 ]
$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35);
$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1);
$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>();
$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>();
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6);
i35 = i35 + 1;
goto [?= (branch)];
"->"Block 25:
[preds: 24 26 ] [succs: 26 27 ]
if i35 > i2 goto i36 = neg i2;
";
    "Block 27:
[preds: 25 ] [succs: 28 ]
i36 = neg i2;
"->"Block 28:
[preds: 27 29 ] [succs: 29 30 ]
if i36 >= 0 goto i37 = 1;
";
    "Block 28:
[preds: 27 29 ] [succs: 29 30 ]
if i36 >= 0 goto i37 = 1;
"->"Block 29:
[preds: 28 ] [succs: 28 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36);
i36 = i36 + 1;
goto [?= (branch)];
";
    "Block 28:
[preds: 27 29 ] [succs: 29 30 ]
if i36 >= 0 goto i37 = 1;
"->"Block 30:
[preds: 28 ] [succs: 31 ]
i37 = 1;
";
    "Block 29:
[preds: 28 ] [succs: 28 ]
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36);
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36);
i36 = i36 + 1;
goto [?= (branch)];
"->"Block 28:
[preds: 27 29 ] [succs: 29 30 ]
if i36 >= 0 goto i37 = 1;
";
    "Block 30:
[preds: 28 ] [succs: 31 ]
i37 = 1;
"->"Block 31:
[preds: 30 32 ] [succs: 32 33 ]
if i37 >= i2 goto return;
";
    "Block 31:
[preds: 30 32 ] [succs: 32 33 ]
if i37 >= i2 goto return;
"->"Block 32:
[preds: 31 ] [succs: 31 ]
$i3 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3);
$i4 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4);
i37 = i37 + 1;
goto [?= (branch)];
";
    "Block 31:
[preds: 30 32 ] [succs: 32 33 ]
if i37 >= i2 goto return;
"->"Block 33:
[preds: 31 ] [succs: ]
return;
";
    "Block 32:
[preds: 31 ] [succs: 31 ]
$i3 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3);
$i4 = i2 + i37;
staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4);
i37 = i37 + 1;
goto [?= (branch)];
"->"Block 31:
[preds: 30 32 ] [succs: 32 33 ]
if i37 >= i2 goto return;
";
}
