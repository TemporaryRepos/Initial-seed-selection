digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
l1 := @parameter1: long;
l2 := @parameter2: long;
l0 := @parameter3: long;
r1 := @parameter4: java.math.BigInteger;
r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);
$z0 = staticinvoke <javaT.lang.Math.ExactArithTests: boolean inLongRange(java.math.BigInteger)>(r1);
if $z0 != 0 goto $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
"
    "Block 1:
[preds: 0 ] [succs: 4 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected an arithmetic exception: \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r25);
goto [?= return];
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
if $z1 != 0 goto return;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r14);
"
    "Block 4:
[preds: 1 2 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
l1 := @parameter1: long;
l2 := @parameter2: long;
l0 := @parameter3: long;
r1 := @parameter4: java.math.BigInteger;
r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);
$z0 = staticinvoke <javaT.lang.Math.ExactArithTests: boolean inLongRange(java.math.BigInteger)>(r1);
if $z0 != 0 goto $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
"->"Block 1:
[preds: 0 ] [succs: 4 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected an arithmetic exception: \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r25);
goto [?= return];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String;
l1 := @parameter1: long;
l2 := @parameter2: long;
l0 := @parameter3: long;
r1 := @parameter4: java.math.BigInteger;
r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);
$z0 = staticinvoke <javaT.lang.Math.ExactArithTests: boolean inLongRange(java.math.BigInteger)>(r1);
if $z0 != 0 goto $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
if $z1 != 0 goto return;
";
    "Block 1:
[preds: 0 ] [succs: 4 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected an arithmetic exception: \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r25);
goto [?= return];
"->"Block 4:
[preds: 1 2 3 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
if $z1 != 0 goto return;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r14);
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);
if $z1 != 0 goto return;
"->"Block 4:
[preds: 1 2 3 ] [succs: ]
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"FAIL: \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") = \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.Math.ExactArithTests: void fail(java.lang.String)>($r14);
"->"Block 4:
[preds: 1 2 3 ] [succs: ]
return;
";
}
