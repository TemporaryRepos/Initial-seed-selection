digraph "unitGraph" {
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1Super;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\")"
    "$r2 = class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\""
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"
    "i0 = lengthof r3"
    "i1 = 0"
    "if i1 >= i0 goto return r1"
    "r4 = r3[i1]"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return r1"
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1Super;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1Super;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\")"->"$r2 = class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\"";
    "$r2 = class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\""->"r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()";
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"->"i0 = lengthof r3";
    "i0 = lengthof r3"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return r1";
    "if i1 >= i0 goto return r1"->"r4 = r3[i1]";
    "if i1 >= i0 goto return r1"->"return r1";
    "r4 = r3[i1]"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return r1";
}
