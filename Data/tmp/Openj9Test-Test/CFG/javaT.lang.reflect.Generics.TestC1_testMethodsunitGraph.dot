digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")"
    "r1 = newarray (java.lang.Class)[3]"
    "r1[0] = class \"Ljava/lang/Object;\""
    "$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r1[1] = $r2"
    "$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r1[2] = $r3"
    "r4 = newarray (java.lang.Class)[1]"
    "r4[0] = class \"Ljava/lang/Object;\""
    "$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)"
    "$r8 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "$r7 = newarray (java.lang.Class)[0]"
    "r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", $r7)"
    "$r10 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r4)"
    "virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "r15 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r16 = r15[0]"
    "$i12 = lengthof r15"
    "if $i12 == 3 goto r16 = r15[0]"
    "$r82 = new java.lang.AssertionError"
    "specialinvoke $r82.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1t has three parameters\")"
    "throw $r82"
    "r16 = r15[0]"
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if r16 != null goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r81 = new java.lang.AssertionError"
    "specialinvoke $r81.<java.lang.AssertionError: void <init>()>()"
    "throw $r81"
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z2 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"
    "$z33 = r16 instanceof java.lang.reflect.TypeVariable"
    "if $z33 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"
    "$r80 = new java.lang.AssertionError"
    "specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")"
    "throw $r80"
    "r83 = (java.lang.reflect.TypeVariable) r16"
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z3 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r73 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z32 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z32 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r74 = new java.lang.AssertionError"
    "$r75 = new java.lang.StringBuilder"
    "specialinvoke $r75.<java.lang.StringBuilder: void <init>()>()"
    "$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T, not \")"
    "$r77 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77)"
    "$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>($r79)"
    "throw $r74"
    "r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z4 != 0 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i11 = lengthof r84"
    "if $i11 == 1 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r72 = new java.lang.AssertionError"
    "specialinvoke $r72.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound (mc1t)\")"
    "throw $r72"
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z5 != 0 goto r17 = r15[1]"
    "$r70 = r84[0]"
    "if $r70 == class \"Ljava/lang/Object;\" goto r17 = r15[1]"
    "$r71 = new java.lang.AssertionError"
    "specialinvoke $r71.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object (mc1t)\")"
    "throw $r71"
    "r17 = r15[1]"
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z6 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"
    "$z31 = r17 instanceof java.lang.reflect.ParameterizedType"
    "if $z31 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"
    "$r69 = new java.lang.AssertionError"
    "specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")"
    "throw $r69"
    "r18 = (java.lang.reflect.ParameterizedType) r17"
    "$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r66 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"
    "$r67 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "if $r66 == $r67 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r68 = new java.lang.AssertionError"
    "specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C1\")"
    "throw $r68"
    "$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z8 != 0 goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r64 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"
    "if $r64 == null goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r65 = new java.lang.AssertionError"
    "specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")"
    "throw $r65"
    "r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z9 != 0 goto r20 = r19[0]"
    "$i10 = lengthof r19"
    "if $i10 == 1 goto r20 = r19[0]"
    "$r63 = new java.lang.AssertionError"
    "specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")"
    "throw $r63"
    "r20 = r19[0]"
    "$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z10 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"
    "$z30 = r20 instanceof java.lang.reflect.TypeVariable"
    "if $z30 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"
    "$r62 = new java.lang.AssertionError"
    "specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable (mc1t)\")"
    "throw $r62"
    "r85 = (java.lang.reflect.TypeVariable) r20"
    "$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z11 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r55 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z29 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z29 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r56 = new java.lang.AssertionError"
    "$r57 = new java.lang.StringBuilder"
    "specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()"
    "$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C1<T> is T, not \")"
    "$r59 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)"
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r56.<java.lang.AssertionError: void <init>(java.lang.Object)>($r61)"
    "throw $r56"
    "r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z12 != 0 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i9 = lengthof r86"
    "if $i9 == 1 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r54 = new java.lang.AssertionError"
    "specialinvoke $r54.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C1<T>  should have one bound\")"
    "throw $r54"
    "$z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z13 != 0 goto r21 = r15[2]"
    "$r52 = r86[0]"
    "if $r52 == class \"Ljava/lang/Object;\" goto r21 = r15[2]"
    "$r53 = new java.lang.AssertionError"
    "specialinvoke $r53.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C1<T> should be Object\")"
    "throw $r53"
    "r21 = r15[2]"
    "$z14 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z14 != 0 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r50 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "if r21 == $r50 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r51 = new java.lang.AssertionError"
    "specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C1\")"
    "throw $r51"
    "r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z15 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z15 != 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$i8 = lengthof r22"
    "if $i8 == 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r49 = new java.lang.AssertionError"
    "specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1 has zero parameters\")"
    "throw $r49"
    "r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z16 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z16 != 0 goto r24 = r23[0]"
    "$i7 = lengthof r23"
    "if $i7 == 1 goto r24 = r23[0]"
    "$r48 = new java.lang.AssertionError"
    "specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mt has one parameter\")"
    "throw $r48"
    "r24 = r23[0]"
    "$z17 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z17 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"
    "$z28 = r24 instanceof java.lang.reflect.TypeVariable"
    "if $z28 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"
    "$r47 = new java.lang.AssertionError"
    "specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")"
    "throw $r47"
    "r87 = (java.lang.reflect.TypeVariable) r24"
    "$z18 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z18 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r40 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z27 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z27 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r41 = new java.lang.AssertionError"
    "$r42 = new java.lang.StringBuilder"
    "specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()"
    "$r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T, not \")"
    "$r44 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)"
    "$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>($r46)"
    "throw $r41"
    "r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z19 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z19 != 0 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i6 = lengthof r88"
    "if $i6 == 1 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r39 = new java.lang.AssertionError"
    "specialinvoke $r39.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r39"
    "$z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z20 != 0 goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r37 = r88[0]"
    "if $r37 == class \"Ljava/lang/Object;\" goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r38 = new java.lang.AssertionError"
    "specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")"
    "throw $r38"
    "r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z21 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z21 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i5 = lengthof r25"
    "if $i5 == 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r36 = new java.lang.AssertionError"
    "specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no generic exception types\")"
    "throw $r36"
    "r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z22 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z22 != 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i4 = lengthof r26"
    "if $i4 == 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r35 = new java.lang.AssertionError"
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no generic exception types\")"
    "throw $r35"
    "r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z23 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z23 != 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i3 = lengthof r27"
    "if $i3 == 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r34 = new java.lang.AssertionError"
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no generic exception types\")"
    "throw $r34"
    "r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z24 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z24 != 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i2 = lengthof r28"
    "if $i2 == 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r33 = new java.lang.AssertionError"
    "specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no type parameters\")"
    "throw $r33"
    "r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z25 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z25 != 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i1 = lengthof r29"
    "if $i1 == 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r32 = new java.lang.AssertionError"
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no type parameters\")"
    "throw $r32"
    "r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z26 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z26 != 0 goto return"
    "$i0 = lengthof r30"
    "if $i0 == 0 goto return"
    "$r31 = new java.lang.AssertionError"
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no type parameters\")"
    "throw $r31"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")"->"r1 = newarray (java.lang.Class)[3]";
    "r1 = newarray (java.lang.Class)[3]"->"r1[0] = class \"Ljava/lang/Object;\"";
    "r1[0] = class \"Ljava/lang/Object;\""->"$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r1[1] = $r2";
    "r1[1] = $r2"->"$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r1[2] = $r3";
    "r1[2] = $r3"->"r4 = newarray (java.lang.Class)[1]";
    "r4 = newarray (java.lang.Class)[1]"->"r4[0] = class \"Ljava/lang/Object;\"";
    "r4[0] = class \"Ljava/lang/Object;\""->"$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)";
    "r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)"->"$r8 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r8 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"$r7 = newarray (java.lang.Class)[0]";
    "$r7 = newarray (java.lang.Class)[0]"->"r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", $r7)";
    "r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", $r7)"->"$r10 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r10 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r4)";
    "r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r4)"->"virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"r15 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r15 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z0 != 0 goto r16 = r15[0]";
    "if $z0 != 0 goto r16 = r15[0]"->"$i12 = lengthof r15";
    "if $z0 != 0 goto r16 = r15[0]"->"r16 = r15[0]";
    "$i12 = lengthof r15"->"if $i12 == 3 goto r16 = r15[0]";
    "if $i12 == 3 goto r16 = r15[0]"->"$r82 = new java.lang.AssertionError";
    "if $i12 == 3 goto r16 = r15[0]"->"r16 = r15[0]";
    "$r82 = new java.lang.AssertionError"->"specialinvoke $r82.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1t has three parameters\")";
    "specialinvoke $r82.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1t has three parameters\")"->"throw $r82";
    "r16 = r15[0]"->"$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if r16 != null goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if r16 != null goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r81 = new java.lang.AssertionError";
    "if r16 != null goto $z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r81 = new java.lang.AssertionError"->"specialinvoke $r81.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r81.<java.lang.AssertionError: void <init>()>()"->"throw $r81";
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z2 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16";
    "if $z2 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"->"$z33 = r16 instanceof java.lang.reflect.TypeVariable";
    "if $z2 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"->"r83 = (java.lang.reflect.TypeVariable) r16";
    "$z33 = r16 instanceof java.lang.reflect.TypeVariable"->"if $z33 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16";
    "if $z33 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"->"$r80 = new java.lang.AssertionError";
    "if $z33 != 0 goto r83 = (java.lang.reflect.TypeVariable) r16"->"r83 = (java.lang.reflect.TypeVariable) r16";
    "$r80 = new java.lang.AssertionError"->"specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")";
    "specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")"->"throw $r80";
    "r83 = (java.lang.reflect.TypeVariable) r16"->"$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z3 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z3 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r73 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z3 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r73 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z32 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z32 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z32 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z32 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r74 = new java.lang.AssertionError";
    "if $z32 != 0 goto r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r74 = new java.lang.AssertionError"->"$r75 = new java.lang.StringBuilder";
    "$r75 = new java.lang.StringBuilder"->"specialinvoke $r75.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r75.<java.lang.StringBuilder: void <init>()>()"->"$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T, not \")";
    "$r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T, not \")"->"$r77 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r77 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77)";
    "$r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77)"->"$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>($r79)";
    "specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>($r79)"->"throw $r74";
    "r84 = interfaceinvoke r83.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z4 != 0 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z4 != 0 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i11 = lengthof r84";
    "if $z4 != 0 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i11 = lengthof r84"->"if $i11 == 1 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i11 == 1 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r72 = new java.lang.AssertionError";
    "if $i11 == 1 goto $z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r72 = new java.lang.AssertionError"->"specialinvoke $r72.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound (mc1t)\")";
    "specialinvoke $r72.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound (mc1t)\")"->"throw $r72";
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z5 != 0 goto r17 = r15[1]";
    "if $z5 != 0 goto r17 = r15[1]"->"$r70 = r84[0]";
    "if $z5 != 0 goto r17 = r15[1]"->"r17 = r15[1]";
    "$r70 = r84[0]"->"if $r70 == class \"Ljava/lang/Object;\" goto r17 = r15[1]";
    "if $r70 == class \"Ljava/lang/Object;\" goto r17 = r15[1]"->"$r71 = new java.lang.AssertionError";
    "if $r70 == class \"Ljava/lang/Object;\" goto r17 = r15[1]"->"r17 = r15[1]";
    "$r71 = new java.lang.AssertionError"->"specialinvoke $r71.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object (mc1t)\")";
    "specialinvoke $r71.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object (mc1t)\")"->"throw $r71";
    "r17 = r15[1]"->"$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z6 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17";
    "if $z6 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"->"$z31 = r17 instanceof java.lang.reflect.ParameterizedType";
    "if $z6 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"->"r18 = (java.lang.reflect.ParameterizedType) r17";
    "$z31 = r17 instanceof java.lang.reflect.ParameterizedType"->"if $z31 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17";
    "if $z31 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"->"$r69 = new java.lang.AssertionError";
    "if $z31 != 0 goto r18 = (java.lang.reflect.ParameterizedType) r17"->"r18 = (java.lang.reflect.ParameterizedType) r17";
    "$r69 = new java.lang.AssertionError"->"specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")";
    "specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")"->"throw $r69";
    "r18 = (java.lang.reflect.ParameterizedType) r17"->"$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r66 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()";
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r66 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"->"$r67 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r67 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"if $r66 == $r67 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $r66 == $r67 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r68 = new java.lang.AssertionError";
    "if $r66 == $r67 goto $z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r68 = new java.lang.AssertionError"->"specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C1\")";
    "specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C1\")"->"throw $r68";
    "$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z8 != 0 goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $z8 != 0 goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r64 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()";
    "if $z8 != 0 goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r64 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"->"if $r64 == null goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $r64 == null goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r65 = new java.lang.AssertionError";
    "if $r64 == null goto r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r65 = new java.lang.AssertionError"->"specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")";
    "specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")"->"throw $r65";
    "r19 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z9 != 0 goto r20 = r19[0]";
    "if $z9 != 0 goto r20 = r19[0]"->"$i10 = lengthof r19";
    "if $z9 != 0 goto r20 = r19[0]"->"r20 = r19[0]";
    "$i10 = lengthof r19"->"if $i10 == 1 goto r20 = r19[0]";
    "if $i10 == 1 goto r20 = r19[0]"->"$r63 = new java.lang.AssertionError";
    "if $i10 == 1 goto r20 = r19[0]"->"r20 = r19[0]";
    "$r63 = new java.lang.AssertionError"->"specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")";
    "specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")"->"throw $r63";
    "r20 = r19[0]"->"$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z10 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20";
    "if $z10 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"->"$z30 = r20 instanceof java.lang.reflect.TypeVariable";
    "if $z10 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"->"r85 = (java.lang.reflect.TypeVariable) r20";
    "$z30 = r20 instanceof java.lang.reflect.TypeVariable"->"if $z30 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20";
    "if $z30 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"->"$r62 = new java.lang.AssertionError";
    "if $z30 != 0 goto r85 = (java.lang.reflect.TypeVariable) r20"->"r85 = (java.lang.reflect.TypeVariable) r20";
    "$r62 = new java.lang.AssertionError"->"specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable (mc1t)\")";
    "specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable (mc1t)\")"->"throw $r62";
    "r85 = (java.lang.reflect.TypeVariable) r20"->"$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z11 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z11 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r55 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z11 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r55 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z29 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z29 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z29 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z29 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r56 = new java.lang.AssertionError";
    "if $z29 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r56 = new java.lang.AssertionError"->"$r57 = new java.lang.StringBuilder";
    "$r57 = new java.lang.StringBuilder"->"specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()"->"$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C1<T> is T, not \")";
    "$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C1<T> is T, not \")"->"$r59 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r59 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)";
    "$r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)"->"$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r56.<java.lang.AssertionError: void <init>(java.lang.Object)>($r61)";
    "specialinvoke $r56.<java.lang.AssertionError: void <init>(java.lang.Object)>($r61)"->"throw $r56";
    "r86 = interfaceinvoke r85.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z12 != 0 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z12 != 0 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i9 = lengthof r86";
    "if $z12 != 0 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i9 = lengthof r86"->"if $i9 == 1 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i9 == 1 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r54 = new java.lang.AssertionError";
    "if $i9 == 1 goto $z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r54 = new java.lang.AssertionError"->"specialinvoke $r54.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C1<T>  should have one bound\")";
    "specialinvoke $r54.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C1<T>  should have one bound\")"->"throw $r54";
    "$z13 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z13 != 0 goto r21 = r15[2]";
    "if $z13 != 0 goto r21 = r15[2]"->"$r52 = r86[0]";
    "if $z13 != 0 goto r21 = r15[2]"->"r21 = r15[2]";
    "$r52 = r86[0]"->"if $r52 == class \"Ljava/lang/Object;\" goto r21 = r15[2]";
    "if $r52 == class \"Ljava/lang/Object;\" goto r21 = r15[2]"->"$r53 = new java.lang.AssertionError";
    "if $r52 == class \"Ljava/lang/Object;\" goto r21 = r15[2]"->"r21 = r15[2]";
    "$r53 = new java.lang.AssertionError"->"specialinvoke $r53.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C1<T> should be Object\")";
    "specialinvoke $r53.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C1<T> should be Object\")"->"throw $r53";
    "r21 = r15[2]"->"$z14 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z14 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z14 != 0 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z14 != 0 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r50 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "if $z14 != 0 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r50 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"if r21 == $r50 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if r21 == $r50 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r51 = new java.lang.AssertionError";
    "if r21 == $r50 goto r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r51 = new java.lang.AssertionError"->"specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C1\")";
    "specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C1\")"->"throw $r51";
    "r22 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z15 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z15 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z15 != 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z15 != 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$i8 = lengthof r22";
    "if $z15 != 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$i8 = lengthof r22"->"if $i8 == 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $i8 == 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r49 = new java.lang.AssertionError";
    "if $i8 == 0 goto r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r49 = new java.lang.AssertionError"->"specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1 has zero parameters\")";
    "specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mc1 has zero parameters\")"->"throw $r49";
    "r23 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z16 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z16 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z16 != 0 goto r24 = r23[0]";
    "if $z16 != 0 goto r24 = r23[0]"->"$i7 = lengthof r23";
    "if $z16 != 0 goto r24 = r23[0]"->"r24 = r23[0]";
    "$i7 = lengthof r23"->"if $i7 == 1 goto r24 = r23[0]";
    "if $i7 == 1 goto r24 = r23[0]"->"$r48 = new java.lang.AssertionError";
    "if $i7 == 1 goto r24 = r23[0]"->"r24 = r23[0]";
    "$r48 = new java.lang.AssertionError"->"specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mt has one parameter\")";
    "specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C1.mt has one parameter\")"->"throw $r48";
    "r24 = r23[0]"->"$z17 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z17 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z17 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24";
    "if $z17 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"->"$z28 = r24 instanceof java.lang.reflect.TypeVariable";
    "if $z17 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"->"r87 = (java.lang.reflect.TypeVariable) r24";
    "$z28 = r24 instanceof java.lang.reflect.TypeVariable"->"if $z28 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24";
    "if $z28 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"->"$r47 = new java.lang.AssertionError";
    "if $z28 != 0 goto r87 = (java.lang.reflect.TypeVariable) r24"->"r87 = (java.lang.reflect.TypeVariable) r24";
    "$r47 = new java.lang.AssertionError"->"specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")";
    "specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")"->"throw $r47";
    "r87 = (java.lang.reflect.TypeVariable) r24"->"$z18 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z18 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z18 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z18 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r40 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z18 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r40 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z27 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z27 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z27 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z27 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r41 = new java.lang.AssertionError";
    "if $z27 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r41 = new java.lang.AssertionError"->"$r42 = new java.lang.StringBuilder";
    "$r42 = new java.lang.StringBuilder"->"specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()"->"$r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T, not \")";
    "$r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T, not \")"->"$r44 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r44 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)";
    "$r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)"->"$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>($r46)";
    "specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>($r46)"->"throw $r41";
    "r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z19 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z19 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z19 != 0 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z19 != 0 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i6 = lengthof r88";
    "if $z19 != 0 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i6 = lengthof r88"->"if $i6 == 1 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i6 == 1 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r39 = new java.lang.AssertionError";
    "if $i6 == 1 goto $z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r39 = new java.lang.AssertionError"->"specialinvoke $r39.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r39.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r39";
    "$z20 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z20 != 0 goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z20 != 0 goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r37 = r88[0]";
    "if $z20 != 0 goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r37 = r88[0]"->"if $r37 == class \"Ljava/lang/Object;\" goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $r37 == class \"Ljava/lang/Object;\" goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r38 = new java.lang.AssertionError";
    "if $r37 == class \"Ljava/lang/Object;\" goto r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r38 = new java.lang.AssertionError"->"specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")";
    "specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")"->"throw $r38";
    "r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z21 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z21 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z21 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z21 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i5 = lengthof r25";
    "if $z21 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i5 = lengthof r25"->"if $i5 == 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i5 == 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r36 = new java.lang.AssertionError";
    "if $i5 == 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r36 = new java.lang.AssertionError"->"specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no generic exception types\")";
    "specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no generic exception types\")"->"throw $r36";
    "r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z22 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z22 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z22 != 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z22 != 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i4 = lengthof r26";
    "if $z22 != 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i4 = lengthof r26"->"if $i4 == 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i4 == 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r35 = new java.lang.AssertionError";
    "if $i4 == 0 goto r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r35 = new java.lang.AssertionError"->"specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no generic exception types\")";
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no generic exception types\")"->"throw $r35";
    "r27 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z23 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z23 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z23 != 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z23 != 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i3 = lengthof r27";
    "if $z23 != 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i3 = lengthof r27"->"if $i3 == 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i3 == 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r34 = new java.lang.AssertionError";
    "if $i3 == 0 goto r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r34 = new java.lang.AssertionError"->"specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no generic exception types\")";
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no generic exception types\")"->"throw $r34";
    "r28 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z24 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z24 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z24 != 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z24 != 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i2 = lengthof r28";
    "if $z24 != 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i2 = lengthof r28"->"if $i2 == 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i2 == 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r33 = new java.lang.AssertionError";
    "if $i2 == 0 goto r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r33 = new java.lang.AssertionError"->"specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no type parameters\")";
    "specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1t should have no type parameters\")"->"throw $r33";
    "r29 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z25 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z25 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z25 != 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z25 != 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i1 = lengthof r29";
    "if $z25 != 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i1 = lengthof r29"->"if $i1 == 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i1 == 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r32 = new java.lang.AssertionError";
    "if $i1 == 0 goto r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r32 = new java.lang.AssertionError"->"specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no type parameters\")";
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mc1 should have no type parameters\")"->"throw $r32";
    "r30 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z26 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z26 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z26 != 0 goto return";
    "if $z26 != 0 goto return"->"$i0 = lengthof r30";
    "if $z26 != 0 goto return"->"return";
    "$i0 = lengthof r30"->"if $i0 == 0 goto return";
    "if $i0 == 0 goto return"->"$r31 = new java.lang.AssertionError";
    "if $i0 == 0 goto return"->"return";
    "$r31 = new java.lang.AssertionError"->"specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no type parameters\")";
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C1.mt should have no type parameters\")"->"throw $r31";
}
