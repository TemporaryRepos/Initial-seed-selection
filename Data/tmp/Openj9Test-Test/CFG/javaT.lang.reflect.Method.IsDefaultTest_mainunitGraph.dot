digraph "unitGraph" {
    "r19 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "i2 = 0"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType1;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType3;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType4;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2$nestedTestType2;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5$nestedTestType5;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6$nestedTestType6;\")"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType7;\")"
    "r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"
    "$z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()"
    "if $z10 == 0 goto (branch)"
    "$r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()"
    "r8 = (java.lang.Class) $r7"
    "r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"
    "i0 = lengthof r9"
    "i3 = 0"
    "if i3 >= i0 goto (branch)"
    "r10 = r9[i3]"
    "$r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/Method/ExpectedIsDefault;\")"
    "r12 = (javaT.lang.reflect.Method.ExpectedIsDefault) $r11"
    "if r12 == null goto i3 = i3 + 1"
    "i2 = i2 + 1"
    "z11 = interfaceinvoke r12.<javaT.lang.reflect.Method.ExpectedIsDefault: boolean value()>()"
    "z12 = virtualinvoke r10.<java.lang.reflect.Method: boolean isDefault()>()"
    "if z12 == z11 goto i3 = i3 + 1"
    "i1 = i1 + 1"
    "$r14 = <java.lang.System: java.io.PrintStream err>"
    "$r13 = newarray (java.lang.Object)[3]"
    "$r15 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.String toString()>()"
    "$r13[0] = $r15"
    "$r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z11)"
    "$r13[1] = $r16"
    "$r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z12)"
    "$r13[2] = $r17"
    "virtualinvoke $r14.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"ERROR: On %s expected isDefault of \'\'%s\'\'; got \'\'%s\'\'.\n\", $r13)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "goto [?= $z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]"
    "if i2 != 0 goto (branch)"
    "$r5 = <java.lang.System: java.io.PrintStream err>"
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed because no methods checked.\")"
    "$r6 = new java.lang.RuntimeException"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"
    "throw $r6"
    "if i1 <= 0 goto return"
    "$r3 = <java.lang.System: java.io.PrintStream err>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed.\")"
    "$r4 = new java.lang.RuntimeException"
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>()>()"
    "throw $r4"
    "return"
    "r19 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"i2 = 0";
    "i2 = 0"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType1;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType1;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType3;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType3;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType4;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType4;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2$nestedTestType2;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType2$nestedTestType2;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5$nestedTestType5;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType5$nestedTestType5;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6$nestedTestType6;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType6$nestedTestType6;\")"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType7;\")";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/Method/TestType7;\")"->"r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()";
    "r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"->"$z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()";
    "$z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()"->"if $z10 == 0 goto (branch)";
    "if $z10 == 0 goto (branch)"->"$r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()";
    "if $z10 == 0 goto (branch)"->"if i2 != 0 goto (branch)";
    "$r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()"->"r8 = (java.lang.Class) $r7";
    "r8 = (java.lang.Class) $r7"->"r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()";
    "r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"->"i0 = lengthof r9";
    "i0 = lengthof r9"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto (branch)";
    "if i3 >= i0 goto (branch)"->"r10 = r9[i3]";
    "if i3 >= i0 goto (branch)"->"goto [?= $z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]";
    "r10 = r9[i3]"->"$r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/Method/ExpectedIsDefault;\")";
    "$r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/Method/ExpectedIsDefault;\")"->"r12 = (javaT.lang.reflect.Method.ExpectedIsDefault) $r11";
    "r12 = (javaT.lang.reflect.Method.ExpectedIsDefault) $r11"->"if r12 == null goto i3 = i3 + 1";
    "if r12 == null goto i3 = i3 + 1"->"i2 = i2 + 1";
    "if r12 == null goto i3 = i3 + 1"->"i3 = i3 + 1";
    "i2 = i2 + 1"->"z11 = interfaceinvoke r12.<javaT.lang.reflect.Method.ExpectedIsDefault: boolean value()>()";
    "z11 = interfaceinvoke r12.<javaT.lang.reflect.Method.ExpectedIsDefault: boolean value()>()"->"z12 = virtualinvoke r10.<java.lang.reflect.Method: boolean isDefault()>()";
    "z12 = virtualinvoke r10.<java.lang.reflect.Method: boolean isDefault()>()"->"if z12 == z11 goto i3 = i3 + 1";
    "if z12 == z11 goto i3 = i3 + 1"->"i1 = i1 + 1";
    "if z12 == z11 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "i1 = i1 + 1"->"$r14 = <java.lang.System: java.io.PrintStream err>";
    "$r14 = <java.lang.System: java.io.PrintStream err>"->"$r13 = newarray (java.lang.Object)[3]";
    "$r13 = newarray (java.lang.Object)[3]"->"$r15 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.String toString()>()";
    "$r15 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.String toString()>()"->"$r13[0] = $r15";
    "$r13[0] = $r15"->"$r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z11)";
    "$r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z11)"->"$r13[1] = $r16";
    "$r13[1] = $r16"->"$r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z12)";
    "$r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z12)"->"$r13[2] = $r17";
    "$r13[2] = $r17"->"virtualinvoke $r14.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"ERROR: On %s expected isDefault of \'\'%s\'\'; got \'\'%s\'\'.\n\", $r13)";
    "virtualinvoke $r14.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"ERROR: On %s expected isDefault of \'\'%s\'\'; got \'\'%s\'\'.\n\", $r13)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto (branch)";
    "goto [?= $z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]"->"$z10 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()";
    "if i2 != 0 goto (branch)"->"$r5 = <java.lang.System: java.io.PrintStream err>";
    "if i2 != 0 goto (branch)"->"if i1 <= 0 goto return";
    "$r5 = <java.lang.System: java.io.PrintStream err>"->"virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed because no methods checked.\")";
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed because no methods checked.\")"->"$r6 = new java.lang.RuntimeException";
    "$r6 = new java.lang.RuntimeException"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"->"throw $r6";
    "if i1 <= 0 goto return"->"$r3 = <java.lang.System: java.io.PrintStream err>";
    "if i1 <= 0 goto return"->"return";
    "$r3 = <java.lang.System: java.io.PrintStream err>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed.\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Test failed.\")"->"$r4 = new java.lang.RuntimeException";
    "$r4 = new java.lang.RuntimeException"->"specialinvoke $r4.<java.lang.RuntimeException: void <init>()>()";
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>()>()"->"throw $r4";
}
