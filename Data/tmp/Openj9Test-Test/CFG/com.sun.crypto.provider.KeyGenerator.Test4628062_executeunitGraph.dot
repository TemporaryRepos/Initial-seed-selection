digraph "unitGraph" {
    "r13 := @this: com.sun.crypto.provider.KeyGenerator.Test4628062"
    "r0 := @parameter0: java.lang.String"
    "r4 := @parameter1: int[]"
    "r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"
    "r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"
    "$r20 = (java.security.Key) r2"
    "r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>()"
    "i0 = lengthof r3"
    "if i0 != 0 goto $i1 = r4[0]"
    "$r16 = new java.lang.Exception"
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length is 0!\")"
    "throw $r16"
    "$i1 = r4[0]"
    "if i0 == $i1 goto $i2 = lengthof r4"
    "$r17 = new java.lang.Exception"
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length mismatch!\")"
    "throw $r17"
    "$i2 = lengthof r4"
    "if $i2 <= 1 goto return 1"
    "i11 = 0"
    "$i3 = lengthof r4"
    "if i11 >= $i3 goto $i4 = r4[0]"
    "$i7 = r4[i11]"
    "$i8 = $i7 * 8"
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8)"
    "r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"
    "$r21 = (java.security.Key) r5"
    "$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>()"
    "$i10 = lengthof $r6"
    "$i9 = r4[i11]"
    "if $i10 == $i9 goto i11 = i11 + 1"
    "$r18 = new java.lang.Exception"
    "specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"key is generated with the wrong length!\")"
    "throw $r18"
    "i11 = i11 + 1"
    "goto [?= $i3 = lengthof r4]"
    "$i4 = r4[0]"
    "$i5 = $i4 * 8"
    "$i6 = $i5 + 1"
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6)"
    "goto [?= return 1]"
    "$r12 := @caughtexception"
    "r14 = $r12"
    "$r10 := @caughtexception"
    "r15 = $r10"
    "$r19 = new java.lang.Exception"
    "specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\")"
    "throw $r19"
    "return 1"
    "r13 := @this: com.sun.crypto.provider.KeyGenerator.Test4628062"->"r0 := @parameter0: java.lang.String";
    "r0 := @parameter0: java.lang.String"->"r4 := @parameter1: int[]";
    "r4 := @parameter1: int[]"->"r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")";
    "r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"->"r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()";
    "r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"->"$r20 = (java.security.Key) r2";
    "$r20 = (java.security.Key) r2"->"r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>()";
    "r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>()"->"i0 = lengthof r3";
    "i0 = lengthof r3"->"if i0 != 0 goto $i1 = r4[0]";
    "if i0 != 0 goto $i1 = r4[0]"->"$r16 = new java.lang.Exception";
    "if i0 != 0 goto $i1 = r4[0]"->"$i1 = r4[0]";
    "$r16 = new java.lang.Exception"->"specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length is 0!\")";
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length is 0!\")"->"throw $r16";
    "$i1 = r4[0]"->"if i0 == $i1 goto $i2 = lengthof r4";
    "if i0 == $i1 goto $i2 = lengthof r4"->"$r17 = new java.lang.Exception";
    "if i0 == $i1 goto $i2 = lengthof r4"->"$i2 = lengthof r4";
    "$r17 = new java.lang.Exception"->"specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length mismatch!\")";
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length mismatch!\")"->"throw $r17";
    "$i2 = lengthof r4"->"if $i2 <= 1 goto return 1";
    "if $i2 <= 1 goto return 1"->"i11 = 0";
    "if $i2 <= 1 goto return 1"->"return 1";
    "i11 = 0"->"$i3 = lengthof r4";
    "$i3 = lengthof r4"->"if i11 >= $i3 goto $i4 = r4[0]";
    "if i11 >= $i3 goto $i4 = r4[0]"->"$i7 = r4[i11]";
    "if i11 >= $i3 goto $i4 = r4[0]"->"$i4 = r4[0]";
    "if i11 >= $i3 goto $i4 = r4[0]"->"$r12 := @caughtexception";
    "if i11 >= $i3 goto $i4 = r4[0]"->"$r10 := @caughtexception";
    "$i7 = r4[i11]"->"$i8 = $i7 * 8";
    "$i8 = $i7 * 8"->"virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8)";
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8)"->"r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()";
    "r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"->"$r21 = (java.security.Key) r5";
    "$r21 = (java.security.Key) r5"->"$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>()";
    "$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>()"->"$i10 = lengthof $r6";
    "$i10 = lengthof $r6"->"$i9 = r4[i11]";
    "$i9 = r4[i11]"->"if $i10 == $i9 goto i11 = i11 + 1";
    "if $i10 == $i9 goto i11 = i11 + 1"->"$r18 = new java.lang.Exception";
    "if $i10 == $i9 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "$r18 = new java.lang.Exception"->"specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"key is generated with the wrong length!\")";
    "specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"key is generated with the wrong length!\")"->"throw $r18";
    "i11 = i11 + 1"->"goto [?= $i3 = lengthof r4]";
    "goto [?= $i3 = lengthof r4]"->"$i3 = lengthof r4";
    "$i4 = r4[0]"->"$r12 := @caughtexception";
    "$i4 = r4[0]"->"$r10 := @caughtexception";
    "$i4 = r4[0]"->"$i5 = $i4 * 8";
    "$i5 = $i4 * 8"->"$r12 := @caughtexception";
    "$i5 = $i4 * 8"->"$r10 := @caughtexception";
    "$i5 = $i4 * 8"->"$i6 = $i5 + 1";
    "$i6 = $i5 + 1"->"$r12 := @caughtexception";
    "$i6 = $i5 + 1"->"$r10 := @caughtexception";
    "$i6 = $i5 + 1"->"virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6)";
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6)"->"$r12 := @caughtexception";
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6)"->"$r10 := @caughtexception";
    "virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6)"->"goto [?= return 1]";
    "goto [?= return 1]"->"return 1";
    "$r12 := @caughtexception"->"r14 = $r12";
    "r14 = $r12"->"goto [?= return 1]";
    "goto [?= return 1]"->"return 1";
    "$r10 := @caughtexception"->"r15 = $r10";
    "r15 = $r10"->"$r19 = new java.lang.Exception";
    "$r19 = new java.lang.Exception"->"specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\")";
    "specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\")"->"throw $r19";
}
