digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
$r1 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r6 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
if $r6 != null goto r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r21 = newarray (char)[4];
$r21[0] = 116;
$r21[1] = 101;
$r21[2] = 115;
$r21[3] = 116;
r24 = $r21;
$r31 = new javax.crypto.spec.PBEKeySpec;
specialinvoke $r31.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>(r24);
r25 = $r31;
r26 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(\"PBE\", \"SunJCE\");
$r36 = (java.security.spec.KeySpec) r25;
$r23 = virtualinvoke r26.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r36);
<com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key> = $r23;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
r28 = newarray (byte)[30];
$r32 = new javax.crypto.spec.PBEParameterSpec;
$r8 = \"saltValue\";
$r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();
specialinvoke $r32.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, 250);
r29 = $r32;
$r10 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
$r37 = (java.security.Key) $r10;
$r38 = (java.security.spec.AlgorithmParameterSpec) r29;
virtualinvoke r27.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r37, $r38);
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r11 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$i1 = lengthof r11;
if $i1 == i0 goto virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
"
    "Block 3:
[preds: 2 ] [succs: ]
$r34 = new java.lang.Exception;
$r33 = new java.lang.StringBuilder;
specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"incorrect MAC output length, expected \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", got \");
$i2 = lengthof r11;
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>($r20);
throw $r34;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r12 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, r12);
if $z0 != 0 goto return;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r35 = new java.lang.Exception;
specialinvoke $r35.<java.lang.Exception: void <init>(java.lang.String)>(\"generated different MAC outputs\");
throw $r35;
"
    "Block 6:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
$r1 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r6 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
if $r6 != null goto r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$r21 = newarray (char)[4];
$r21[0] = 116;
$r21[1] = 101;
$r21[2] = 115;
$r21[3] = 116;
r24 = $r21;
$r31 = new javax.crypto.spec.PBEKeySpec;
specialinvoke $r31.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>(r24);
r25 = $r31;
r26 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(\"PBE\", \"SunJCE\");
$r36 = (java.security.spec.KeySpec) r25;
$r23 = virtualinvoke r26.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r36);
<com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key> = $r23;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
$r1 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r6 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
if $r6 != null goto r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
r28 = newarray (byte)[30];
$r32 = new javax.crypto.spec.PBEParameterSpec;
$r8 = \"saltValue\";
$r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();
specialinvoke $r32.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, 250);
r29 = $r32;
$r10 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
$r37 = (java.security.Key) $r10;
$r38 = (java.security.spec.AlgorithmParameterSpec) r29;
virtualinvoke r27.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r37, $r38);
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r11 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$i1 = lengthof r11;
if $i1 == i0 goto virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r21 = newarray (char)[4];
$r21[0] = 116;
$r21[1] = 101;
$r21[2] = 115;
$r21[3] = 116;
r24 = $r21;
$r31 = new javax.crypto.spec.PBEKeySpec;
specialinvoke $r31.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>(r24);
r25 = $r31;
r26 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(\"PBE\", \"SunJCE\");
$r36 = (java.security.spec.KeySpec) r25;
$r23 = virtualinvoke r26.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r36);
<com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key> = $r23;
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
r28 = newarray (byte)[30];
$r32 = new javax.crypto.spec.PBEParameterSpec;
$r8 = \"saltValue\";
$r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();
specialinvoke $r32.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, 250);
r29 = $r32;
$r10 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
$r37 = (java.security.Key) $r10;
$r38 = (java.security.spec.AlgorithmParameterSpec) r29;
virtualinvoke r27.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r37, $r38);
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r11 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$i1 = lengthof r11;
if $i1 == i0 goto virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
r28 = newarray (byte)[30];
$r32 = new javax.crypto.spec.PBEParameterSpec;
$r8 = \"saltValue\";
$r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();
specialinvoke $r32.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, 250);
r29 = $r32;
$r10 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
$r37 = (java.security.Key) $r10;
$r38 = (java.security.spec.AlgorithmParameterSpec) r29;
virtualinvoke r27.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r37, $r38);
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r11 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$i1 = lengthof r11;
if $i1 == i0 goto virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
"->"Block 3:
[preds: 2 ] [succs: ]
$r34 = new java.lang.Exception;
$r33 = new java.lang.StringBuilder;
specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"incorrect MAC output length, expected \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", got \");
$i2 = lengthof r11;
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>($r20);
throw $r34;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r27 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r3, \"SunJCE\");
r28 = newarray (byte)[30];
$r32 = new javax.crypto.spec.PBEParameterSpec;
$r8 = \"saltValue\";
$r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();
specialinvoke $r32.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, 250);
r29 = $r32;
$r10 = <com.sun.crypto.provider.Mac.HmacPBESHA1: javax.crypto.SecretKey key>;
$r37 = (java.security.Key) $r10;
$r38 = (java.security.spec.AlgorithmParameterSpec) r29;
virtualinvoke r27.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r37, $r38);
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r11 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$i1 = lengthof r11;
if $i1 == i0 goto virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r12 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, r12);
if $z0 != 0 goto return;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r12 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, r12);
if $z0 != 0 goto return;
"->"Block 5:
[preds: 4 ] [succs: ]
$r35 = new java.lang.Exception;
specialinvoke $r35.<java.lang.Exception: void <init>(java.lang.String)>(\"generated different MAC outputs\");
throw $r35;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
virtualinvoke r27.<javax.crypto.Mac: void update(byte[])>(r28);
r12 = virtualinvoke r27.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, r12);
if $z0 != 0 goto return;
"->"Block 6:
[preds: 4 ] [succs: ]
return;
";
}
