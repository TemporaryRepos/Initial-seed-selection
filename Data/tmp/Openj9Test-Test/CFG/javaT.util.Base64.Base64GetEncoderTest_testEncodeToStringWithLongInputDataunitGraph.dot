digraph "unitGraph" {
    "r4 := @parameter0: java.util.Base64$Encoder"
    "$r0 = <java.lang.System: java.io.PrintStream err>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\n\nEncoder.encodeToStringWithLongInputData test  \")"
    "$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\""
    "$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>"
    "r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1)"
    "r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r3)"
    "$r7 = <java.lang.System: java.io.PrintStream err>"
    "$r6 = new java.lang.StringBuilder"
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Second Base64 encoded string is \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)"
    "$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\")"
    "if $z0 == 0 goto return"
    "$r11 = new java.lang.RuntimeException"
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after encodeToString invoked  ... \n\")"
    "throw $r11"
    "return"
    "r4 := @parameter0: java.util.Base64$Encoder"->"$r0 = <java.lang.System: java.io.PrintStream err>";
    "$r0 = <java.lang.System: java.io.PrintStream err>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\n\nEncoder.encodeToStringWithLongInputData test  \")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\n\nEncoder.encodeToStringWithLongInputData test  \")"->"$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\"";
    "$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\""->"$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>";
    "$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>"->"r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1)";
    "r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1)"->"r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r3)";
    "r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r3)"->"$r7 = <java.lang.System: java.io.PrintStream err>";
    "$r7 = <java.lang.System: java.io.PrintStream err>"->"$r6 = new java.lang.StringBuilder";
    "$r6 = new java.lang.StringBuilder"->"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"->"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Second Base64 encoded string is \")";
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Second Base64 encoded string is \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)"->"$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\")";
    "$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\")"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r11 = new java.lang.RuntimeException";
    "if $z0 == 0 goto return"->"return";
    "$r11 = new java.lang.RuntimeException"->"specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after encodeToString invoked  ... \n\")";
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after encodeToString invoked  ... \n\")"->"throw $r11";
}
