digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r0);
$r1 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r1);
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int passed>;
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r2[0] = $r4;
$i1 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r2[1] = $r5;
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2);
$i2 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
if $i2 <= 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r7 = new java.lang.Error;
specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r7;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r0);
$r1 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r1);
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int passed>;
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r2[0] = $r4;
$i1 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r2[1] = $r5;
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2);
$i2 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
if $i2 <= 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r7 = new java.lang.Error;
specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r7;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r8 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r0);
$r1 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void test(java.util.concurrent.ConcurrentMap)>($r1);
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int passed>;
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r2[0] = $r4;
$i1 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r2[1] = $r5;
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2);
$i2 = <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: int failed>;
if $i2 <= 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
