digraph "unitGraph" {
    "r27 := @parameter0: java.lang.String[]"
    "$r0 = new java.io.ByteArrayOutputStream"
    "specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>()"
    "r1 = $r0"
    "$r2 = new java.util.zip.Deflater"
    "specialinvoke $r2.<java.util.zip.Deflater: void <init>()>()"
    "r3 = $r2"
    "$r4 = new java.io.ByteArrayInputStream"
    "$r5 = newarray (byte)[10]"
    "specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5)"
    "r6 = $r4"
    "$r7 = new java.util.zip.Inflater"
    "specialinvoke $r7.<java.util.zip.Inflater: void <init>()>()"
    "r8 = $r7"
    "$r9 = new java.util.zip.DeflaterOutputStream"
    "specialinvoke $r9.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r1, null)"
    "r28 = $r9"
    "$r10 = new java.lang.Exception"
    "specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r10"
    "$r24 := @caughtexception"
    "r29 = $r24"
    "$r25 = new java.util.zip.DeflaterOutputStream"
    "specialinvoke $r25.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(null, r3)"
    "r30 = $r25"
    "$r26 = new java.lang.Exception"
    "specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r26"
    "$r21 := @caughtexception"
    "r31 = $r21"
    "$r22 = new java.util.zip.DeflaterOutputStream"
    "specialinvoke $r22.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>(r1, r3, -1)"
    "r32 = $r22"
    "$r23 = new java.lang.Exception"
    "specialinvoke $r23.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r23"
    "$r18 := @caughtexception"
    "r33 = $r18"
    "$r19 = new java.util.zip.InflaterInputStream"
    "specialinvoke $r19.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(r6, null)"
    "r34 = $r19"
    "$r20 = new java.lang.Exception"
    "specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r20"
    "$r15 := @caughtexception"
    "r35 = $r15"
    "$r16 = new java.util.zip.InflaterInputStream"
    "specialinvoke $r16.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(null, r8)"
    "r36 = $r16"
    "$r17 = new java.lang.Exception"
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r17"
    "$r12 := @caughtexception"
    "r37 = $r12"
    "$r13 = new java.util.zip.InflaterInputStream"
    "specialinvoke $r13.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r6, r8, -1)"
    "r38 = $r13"
    "$r14 = new java.lang.Exception"
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"
    "throw $r14"
    "$r11 := @caughtexception"
    "r39 = $r11"
    "return"
    "r27 := @parameter0: java.lang.String[]"->"$r0 = new java.io.ByteArrayOutputStream";
    "$r0 = new java.io.ByteArrayOutputStream"->"specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>()";
    "specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.util.zip.Deflater";
    "$r2 = new java.util.zip.Deflater"->"specialinvoke $r2.<java.util.zip.Deflater: void <init>()>()";
    "specialinvoke $r2.<java.util.zip.Deflater: void <init>()>()"->"r3 = $r2";
    "r3 = $r2"->"$r4 = new java.io.ByteArrayInputStream";
    "$r4 = new java.io.ByteArrayInputStream"->"$r5 = newarray (byte)[10]";
    "$r5 = newarray (byte)[10]"->"specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5)";
    "specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5)"->"r6 = $r4";
    "r6 = $r4"->"$r7 = new java.util.zip.Inflater";
    "$r7 = new java.util.zip.Inflater"->"specialinvoke $r7.<java.util.zip.Inflater: void <init>()>()";
    "specialinvoke $r7.<java.util.zip.Inflater: void <init>()>()"->"r8 = $r7";
    "r8 = $r7"->"$r9 = new java.util.zip.DeflaterOutputStream";
    "r8 = $r7"->"$r24 := @caughtexception";
    "$r9 = new java.util.zip.DeflaterOutputStream"->"specialinvoke $r9.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r1, null)";
    "$r9 = new java.util.zip.DeflaterOutputStream"->"$r24 := @caughtexception";
    "specialinvoke $r9.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r1, null)"->"r28 = $r9";
    "specialinvoke $r9.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r1, null)"->"$r24 := @caughtexception";
    "r28 = $r9"->"$r10 = new java.lang.Exception";
    "r28 = $r9"->"$r24 := @caughtexception";
    "$r10 = new java.lang.Exception"->"specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r10 = new java.lang.Exception"->"$r24 := @caughtexception";
    "specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r10";
    "specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r24 := @caughtexception";
    "throw $r10"->"$r24 := @caughtexception";
    "$r24 := @caughtexception"->"r29 = $r24";
    "r29 = $r24"->"$r25 = new java.util.zip.DeflaterOutputStream";
    "r29 = $r24"->"$r21 := @caughtexception";
    "$r25 = new java.util.zip.DeflaterOutputStream"->"specialinvoke $r25.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(null, r3)";
    "$r25 = new java.util.zip.DeflaterOutputStream"->"$r21 := @caughtexception";
    "specialinvoke $r25.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(null, r3)"->"r30 = $r25";
    "specialinvoke $r25.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(null, r3)"->"$r21 := @caughtexception";
    "r30 = $r25"->"$r26 = new java.lang.Exception";
    "r30 = $r25"->"$r21 := @caughtexception";
    "$r26 = new java.lang.Exception"->"specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r26 = new java.lang.Exception"->"$r21 := @caughtexception";
    "specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r26";
    "specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r21 := @caughtexception";
    "throw $r26"->"$r21 := @caughtexception";
    "$r21 := @caughtexception"->"r31 = $r21";
    "r31 = $r21"->"$r22 = new java.util.zip.DeflaterOutputStream";
    "r31 = $r21"->"$r18 := @caughtexception";
    "$r22 = new java.util.zip.DeflaterOutputStream"->"specialinvoke $r22.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>(r1, r3, -1)";
    "$r22 = new java.util.zip.DeflaterOutputStream"->"$r18 := @caughtexception";
    "specialinvoke $r22.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>(r1, r3, -1)"->"r32 = $r22";
    "specialinvoke $r22.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>(r1, r3, -1)"->"$r18 := @caughtexception";
    "r32 = $r22"->"$r23 = new java.lang.Exception";
    "r32 = $r22"->"$r18 := @caughtexception";
    "$r23 = new java.lang.Exception"->"specialinvoke $r23.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r23 = new java.lang.Exception"->"$r18 := @caughtexception";
    "specialinvoke $r23.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r23";
    "specialinvoke $r23.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r18 := @caughtexception";
    "throw $r23"->"$r18 := @caughtexception";
    "$r18 := @caughtexception"->"r33 = $r18";
    "r33 = $r18"->"$r19 = new java.util.zip.InflaterInputStream";
    "r33 = $r18"->"$r15 := @caughtexception";
    "$r19 = new java.util.zip.InflaterInputStream"->"specialinvoke $r19.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(r6, null)";
    "$r19 = new java.util.zip.InflaterInputStream"->"$r15 := @caughtexception";
    "specialinvoke $r19.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(r6, null)"->"r34 = $r19";
    "specialinvoke $r19.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(r6, null)"->"$r15 := @caughtexception";
    "r34 = $r19"->"$r20 = new java.lang.Exception";
    "r34 = $r19"->"$r15 := @caughtexception";
    "$r20 = new java.lang.Exception"->"specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r20 = new java.lang.Exception"->"$r15 := @caughtexception";
    "specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r20";
    "specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r15 := @caughtexception";
    "throw $r20"->"$r15 := @caughtexception";
    "$r15 := @caughtexception"->"r35 = $r15";
    "r35 = $r15"->"$r16 = new java.util.zip.InflaterInputStream";
    "r35 = $r15"->"$r12 := @caughtexception";
    "$r16 = new java.util.zip.InflaterInputStream"->"specialinvoke $r16.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(null, r8)";
    "$r16 = new java.util.zip.InflaterInputStream"->"$r12 := @caughtexception";
    "specialinvoke $r16.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(null, r8)"->"r36 = $r16";
    "specialinvoke $r16.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(null, r8)"->"$r12 := @caughtexception";
    "r36 = $r16"->"$r17 = new java.lang.Exception";
    "r36 = $r16"->"$r12 := @caughtexception";
    "$r17 = new java.lang.Exception"->"specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r17 = new java.lang.Exception"->"$r12 := @caughtexception";
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r17";
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r12 := @caughtexception";
    "throw $r17"->"$r12 := @caughtexception";
    "$r12 := @caughtexception"->"r37 = $r12";
    "r37 = $r12"->"$r13 = new java.util.zip.InflaterInputStream";
    "r37 = $r12"->"$r11 := @caughtexception";
    "$r13 = new java.util.zip.InflaterInputStream"->"specialinvoke $r13.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r6, r8, -1)";
    "$r13 = new java.util.zip.InflaterInputStream"->"$r11 := @caughtexception";
    "specialinvoke $r13.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r6, r8, -1)"->"r38 = $r13";
    "specialinvoke $r13.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r6, r8, -1)"->"$r11 := @caughtexception";
    "r38 = $r13"->"$r14 = new java.lang.Exception";
    "r38 = $r13"->"$r11 := @caughtexception";
    "$r14 = new java.lang.Exception"->"specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")";
    "$r14 = new java.lang.Exception"->"$r11 := @caughtexception";
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"throw $r14";
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"didn\'t catch illegal argument\")"->"$r11 := @caughtexception";
    "throw $r14"->"$r11 := @caughtexception";
    "$r11 := @caughtexception"->"r39 = $r11";
    "r39 = $r11"->"return";
}
