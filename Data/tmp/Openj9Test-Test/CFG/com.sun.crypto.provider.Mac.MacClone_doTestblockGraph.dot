digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 3 ]
r0 := @parameter0: java.lang.String;
r7 := @parameter1: javax.crypto.SecretKey;
r8 := @parameter2: java.security.spec.AlgorithmParameterSpec;
r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>();
r23 = (javax.crypto.Mac) $r1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);
$r5 = <java.lang.System: java.io.PrintStream out>;
$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);
z2 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18);
"
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= (branch)];
"
    "Block 3:
[preds: 0 1 ] [succs: 4 ]
$r21 := @caughtexception;
r24 = $r21;
z2 = 1;
"
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
"
    "Block 5:
[preds: 4 ] [succs: ]
$r32 = new java.lang.Exception;
specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>(\"Expected IllegalStateException not thrown\");
throw $r32;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r35 = (java.security.Key) r7;
virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8);
$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r26 = (javax.crypto.Mac) $r9;
$r10 = <java.lang.System: java.io.PrintStream out>;
$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18);
r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28);
if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r33 = new java.lang.Exception;
specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of init clone is different\");
throw $r33;
"
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\");
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r29 = (javax.crypto.Mac) $r16;
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52);
virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52);
r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>();
$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31);
if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 9:
[preds: 8 ] [succs: ]
$r34 = new java.lang.Exception;
specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of updated clone is different\");
throw $r34;
"
    "Block 10:
[preds: 8 ] [succs: ]
$r17 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#2 passed\");
return;
"
    "Block 0:
[preds: ] [succs: 1 3 ]
r0 := @parameter0: java.lang.String;
r7 := @parameter1: javax.crypto.SecretKey;
r8 := @parameter2: java.security.spec.AlgorithmParameterSpec;
r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>();
r23 = (javax.crypto.Mac) $r1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);
$r5 = <java.lang.System: java.io.PrintStream out>;
$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);
z2 = 0;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18);
";
    "Block 0:
[preds: ] [succs: 1 3 ]
r0 := @parameter0: java.lang.String;
r7 := @parameter1: javax.crypto.SecretKey;
r8 := @parameter2: java.security.spec.AlgorithmParameterSpec;
r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>();
r23 = (javax.crypto.Mac) $r1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);
$r5 = <java.lang.System: java.io.PrintStream out>;
$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);
z2 = 0;
"->"Block 3:
[preds: 0 1 ] [succs: 4 ]
$r21 := @caughtexception;
r24 = $r21;
z2 = 1;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18);
"->"Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= (branch)];
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18);
"->"Block 3:
[preds: 0 1 ] [succs: 4 ]
$r21 := @caughtexception;
r24 = $r21;
z2 = 1;
";
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= (branch)];
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
";
    "Block 3:
[preds: 0 1 ] [succs: 4 ]
$r21 := @caughtexception;
r24 = $r21;
z2 = 1;
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
"->"Block 5:
[preds: 4 ] [succs: ]
$r32 = new java.lang.Exception;
specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>(\"Expected IllegalStateException not thrown\");
throw $r32;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r35 = (java.security.Key) r7;
virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8);
$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r26 = (javax.crypto.Mac) $r9;
$r10 = <java.lang.System: java.io.PrintStream out>;
$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18);
r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28);
if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r35 = (java.security.Key) r7;
virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8);
$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r26 = (javax.crypto.Mac) $r9;
$r10 = <java.lang.System: java.io.PrintStream out>;
$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18);
r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28);
if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 6 ] [succs: ]
$r33 = new java.lang.Exception;
specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of init clone is different\");
throw $r33;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
$r35 = (java.security.Key) r7;
virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8);
$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r26 = (javax.crypto.Mac) $r9;
$r10 = <java.lang.System: java.io.PrintStream out>;
$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>();
$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18);
r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>();
$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28);
if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"->"Block 8:
[preds: 6 ] [succs: 9 10 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\");
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r29 = (javax.crypto.Mac) $r16;
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52);
virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52);
r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>();
$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31);
if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\");
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r29 = (javax.crypto.Mac) $r16;
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52);
virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52);
r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>();
$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31);
if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>;
"->"Block 9:
[preds: 8 ] [succs: ]
$r34 = new java.lang.Exception;
specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of updated clone is different\");
throw $r34;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\");
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18);
$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>();
r29 = (javax.crypto.Mac) $r16;
virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52);
virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52);
r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>();
r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>();
$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31);
if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>;
"->"Block 10:
[preds: 8 ] [succs: ]
$r17 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#2 passed\");
return;
";
}
