digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
l0 := @parameter0: long;
l1 := @parameter1: long;
r1 := @parameter2: java.lang.Object;
r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(long,long)>(l0, l1);
$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = newarray (java.lang.Object)[4];
$r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r15[0] = $r16;
$r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r15[1] = $r17;
$r15[2] = r0;
$r15[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d) = %s; expected %s%n\", $r15);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
"
    "Block 3:
[preds: 2 ] [succs: 4 28 ]
$r12 = newarray (java.lang.Object)[4];
$r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r12[0] = $r13;
$r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r12[1] = $r14;
$r12[2] = r2;
$r12[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r12);
"
    "Block 4:
[preds: 2 3 ] [succs: 5 28 ]
$r3 = new java.math.BigDecimal;
"
    "Block 5:
[preds: 4 ] [succs: 6 28 ]
specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l0);
"
    "Block 6:
[preds: 5 ] [succs: 7 28 ]
r20 = $r3;
"
    "Block 7:
[preds: 6 ] [succs: 8 28 ]
$r4 = new java.math.BigDecimal;
"
    "Block 8:
[preds: 7 ] [succs: 9 28 ]
specialinvoke $r4.<java.math.BigDecimal: void <init>(long)>(l1);
"
    "Block 9:
[preds: 8 ] [succs: 10 28 ]
r5 = $r4;
"
    "Block 10:
[preds: 9 ] [succs: 11 28 ]
$r6 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;
"
    "Block 11:
[preds: 10 ] [succs: 12 28 ]
r21 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>(r5, $r6);
"
    "Block 12:
[preds: 11 ] [succs: 13 28 ]
r22 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r5);
"
    "Block 13:
[preds: 12 ] [succs: 14 28 ]
r23 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r22);
"
    "Block 14:
[preds: 13 ] [succs: 15 28 ]
l2 = virtualinvoke r23.<java.math.BigDecimal: long longValue()>();
"
    "Block 15:
[preds: 14 ] [succs: 16 28 ]
$r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"
    "Block 16:
[preds: 15 ] [succs: 17 28 ]
$z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r7);
"
    "Block 17:
[preds: 16 ] [succs: 18 27 28 ]
if $z2 != 0 goto (branch);
"
    "Block 18:
[preds: 17 ] [succs: 19 28 ]
$r8 = newarray (java.lang.Object)[4];
"
    "Block 19:
[preds: 18 ] [succs: 20 28 ]
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
"
    "Block 20:
[preds: 19 ] [succs: 21 28 ]
$r8[0] = $r9;
"
    "Block 21:
[preds: 20 ] [succs: 22 28 ]
$r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
"
    "Block 22:
[preds: 21 ] [succs: 23 28 ]
$r8[1] = $r10;
"
    "Block 23:
[preds: 22 ] [succs: 24 28 ]
$r8[2] = r0;
"
    "Block 24:
[preds: 23 ] [succs: 25 28 ]
$r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"
    "Block 25:
[preds: 24 ] [succs: 26 28 ]
$r8[3] = $r11;
"
    "Block 26:
[preds: 25 ] [succs: 27 28 ]
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Long.floorMod(%d, %d) = %d is different than BigDecimal result: %d%n\", $r8);
"
    "Block 27:
[preds: 17 26 ] [succs: 30 ]
goto [?= return];
"
    "Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
"
    "Block 29:
[preds: 28 ] [succs: 30 ]
$r19 = newarray (java.lang.Object)[0];
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d); unexpected ArithmeticException from bigdecimal\", $r19);
"
    "Block 30:
[preds: 27 28 29 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
l0 := @parameter0: long;
l1 := @parameter1: long;
r1 := @parameter2: java.lang.Object;
r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(long,long)>(l0, l1);
$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = newarray (java.lang.Object)[4];
$r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r15[0] = $r16;
$r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r15[1] = $r17;
$r15[2] = r0;
$r15[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d) = %s; expected %s%n\", $r15);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
l0 := @parameter0: long;
l1 := @parameter1: long;
r1 := @parameter2: java.lang.Object;
r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(long,long)>(l0, l1);
$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = newarray (java.lang.Object)[4];
$r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r15[0] = $r16;
$r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r15[1] = $r17;
$r15[2] = r0;
$r15[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d) = %s; expected %s%n\", $r15);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
"->"Block 3:
[preds: 2 ] [succs: 4 28 ]
$r12 = newarray (java.lang.Object)[4];
$r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r12[0] = $r13;
$r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r12[1] = $r14;
$r12[2] = r2;
$r12[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r12);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
"->"Block 4:
[preds: 2 3 ] [succs: 5 28 ]
$r3 = new java.math.BigDecimal;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 28 ]
r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(long,long)>(l0, l1);
$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1);
if $z1 != 0 goto $r3 = new java.math.BigDecimal;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 3:
[preds: 2 ] [succs: 4 28 ]
$r12 = newarray (java.lang.Object)[4];
$r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r12[0] = $r13;
$r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r12[1] = $r14;
$r12[2] = r2;
$r12[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r12);
"->"Block 4:
[preds: 2 3 ] [succs: 5 28 ]
$r3 = new java.math.BigDecimal;
";
    "Block 3:
[preds: 2 ] [succs: 4 28 ]
$r12 = newarray (java.lang.Object)[4];
$r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r12[0] = $r13;
$r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
$r12[1] = $r14;
$r12[2] = r2;
$r12[3] = r1;
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r12);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 28 ]
$r3 = new java.math.BigDecimal;
"->"Block 5:
[preds: 4 ] [succs: 6 28 ]
specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l0);
";
    "Block 4:
[preds: 2 3 ] [succs: 5 28 ]
$r3 = new java.math.BigDecimal;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 5:
[preds: 4 ] [succs: 6 28 ]
specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l0);
"->"Block 6:
[preds: 5 ] [succs: 7 28 ]
r20 = $r3;
";
    "Block 5:
[preds: 4 ] [succs: 6 28 ]
specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l0);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 6:
[preds: 5 ] [succs: 7 28 ]
r20 = $r3;
"->"Block 7:
[preds: 6 ] [succs: 8 28 ]
$r4 = new java.math.BigDecimal;
";
    "Block 6:
[preds: 5 ] [succs: 7 28 ]
r20 = $r3;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 7:
[preds: 6 ] [succs: 8 28 ]
$r4 = new java.math.BigDecimal;
"->"Block 8:
[preds: 7 ] [succs: 9 28 ]
specialinvoke $r4.<java.math.BigDecimal: void <init>(long)>(l1);
";
    "Block 7:
[preds: 6 ] [succs: 8 28 ]
$r4 = new java.math.BigDecimal;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 8:
[preds: 7 ] [succs: 9 28 ]
specialinvoke $r4.<java.math.BigDecimal: void <init>(long)>(l1);
"->"Block 9:
[preds: 8 ] [succs: 10 28 ]
r5 = $r4;
";
    "Block 8:
[preds: 7 ] [succs: 9 28 ]
specialinvoke $r4.<java.math.BigDecimal: void <init>(long)>(l1);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 9:
[preds: 8 ] [succs: 10 28 ]
r5 = $r4;
"->"Block 10:
[preds: 9 ] [succs: 11 28 ]
$r6 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;
";
    "Block 9:
[preds: 8 ] [succs: 10 28 ]
r5 = $r4;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 10:
[preds: 9 ] [succs: 11 28 ]
$r6 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;
"->"Block 11:
[preds: 10 ] [succs: 12 28 ]
r21 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>(r5, $r6);
";
    "Block 10:
[preds: 9 ] [succs: 11 28 ]
$r6 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 11:
[preds: 10 ] [succs: 12 28 ]
r21 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>(r5, $r6);
"->"Block 12:
[preds: 11 ] [succs: 13 28 ]
r22 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r5);
";
    "Block 11:
[preds: 10 ] [succs: 12 28 ]
r21 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>(r5, $r6);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 12:
[preds: 11 ] [succs: 13 28 ]
r22 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r5);
"->"Block 13:
[preds: 12 ] [succs: 14 28 ]
r23 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r22);
";
    "Block 12:
[preds: 11 ] [succs: 13 28 ]
r22 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r5);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 13:
[preds: 12 ] [succs: 14 28 ]
r23 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r22);
"->"Block 14:
[preds: 13 ] [succs: 15 28 ]
l2 = virtualinvoke r23.<java.math.BigDecimal: long longValue()>();
";
    "Block 13:
[preds: 12 ] [succs: 14 28 ]
r23 = virtualinvoke r20.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r22);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 14:
[preds: 13 ] [succs: 15 28 ]
l2 = virtualinvoke r23.<java.math.BigDecimal: long longValue()>();
"->"Block 15:
[preds: 14 ] [succs: 16 28 ]
$r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
";
    "Block 14:
[preds: 13 ] [succs: 15 28 ]
l2 = virtualinvoke r23.<java.math.BigDecimal: long longValue()>();
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 15:
[preds: 14 ] [succs: 16 28 ]
$r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"->"Block 16:
[preds: 15 ] [succs: 17 28 ]
$z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r7);
";
    "Block 15:
[preds: 14 ] [succs: 16 28 ]
$r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 16:
[preds: 15 ] [succs: 17 28 ]
$z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r7);
"->"Block 17:
[preds: 16 ] [succs: 18 27 28 ]
if $z2 != 0 goto (branch);
";
    "Block 16:
[preds: 15 ] [succs: 17 28 ]
$z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r7);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 17:
[preds: 16 ] [succs: 18 27 28 ]
if $z2 != 0 goto (branch);
"->"Block 18:
[preds: 17 ] [succs: 19 28 ]
$r8 = newarray (java.lang.Object)[4];
";
    "Block 17:
[preds: 16 ] [succs: 18 27 28 ]
if $z2 != 0 goto (branch);
"->"Block 27:
[preds: 17 26 ] [succs: 30 ]
goto [?= return];
";
    "Block 17:
[preds: 16 ] [succs: 18 27 28 ]
if $z2 != 0 goto (branch);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 18:
[preds: 17 ] [succs: 19 28 ]
$r8 = newarray (java.lang.Object)[4];
"->"Block 19:
[preds: 18 ] [succs: 20 28 ]
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
";
    "Block 18:
[preds: 17 ] [succs: 19 28 ]
$r8 = newarray (java.lang.Object)[4];
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 19:
[preds: 18 ] [succs: 20 28 ]
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
"->"Block 20:
[preds: 19 ] [succs: 21 28 ]
$r8[0] = $r9;
";
    "Block 19:
[preds: 18 ] [succs: 20 28 ]
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 20:
[preds: 19 ] [succs: 21 28 ]
$r8[0] = $r9;
"->"Block 21:
[preds: 20 ] [succs: 22 28 ]
$r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
";
    "Block 20:
[preds: 19 ] [succs: 21 28 ]
$r8[0] = $r9;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 21:
[preds: 20 ] [succs: 22 28 ]
$r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
"->"Block 22:
[preds: 21 ] [succs: 23 28 ]
$r8[1] = $r10;
";
    "Block 21:
[preds: 20 ] [succs: 22 28 ]
$r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 22:
[preds: 21 ] [succs: 23 28 ]
$r8[1] = $r10;
"->"Block 23:
[preds: 22 ] [succs: 24 28 ]
$r8[2] = r0;
";
    "Block 22:
[preds: 21 ] [succs: 23 28 ]
$r8[1] = $r10;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 23:
[preds: 22 ] [succs: 24 28 ]
$r8[2] = r0;
"->"Block 24:
[preds: 23 ] [succs: 25 28 ]
$r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
";
    "Block 23:
[preds: 22 ] [succs: 24 28 ]
$r8[2] = r0;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 24:
[preds: 23 ] [succs: 25 28 ]
$r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"->"Block 25:
[preds: 24 ] [succs: 26 28 ]
$r8[3] = $r11;
";
    "Block 24:
[preds: 23 ] [succs: 25 28 ]
$r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 25:
[preds: 24 ] [succs: 26 28 ]
$r8[3] = $r11;
"->"Block 26:
[preds: 25 ] [succs: 27 28 ]
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Long.floorMod(%d, %d) = %d is different than BigDecimal result: %d%n\", $r8);
";
    "Block 25:
[preds: 24 ] [succs: 26 28 ]
$r8[3] = $r11;
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 26:
[preds: 25 ] [succs: 27 28 ]
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Long.floorMod(%d, %d) = %d is different than BigDecimal result: %d%n\", $r8);
"->"Block 27:
[preds: 17 26 ] [succs: 30 ]
goto [?= return];
";
    "Block 26:
[preds: 25 ] [succs: 27 28 ]
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Long.floorMod(%d, %d) = %d is different than BigDecimal result: %d%n\", $r8);
"->"Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
";
    "Block 27:
[preds: 17 26 ] [succs: 30 ]
goto [?= return];
"->"Block 30:
[preds: 27 28 29 ] [succs: ]
return;
";
    "Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
"->"Block 29:
[preds: 28 ] [succs: 30 ]
$r19 = newarray (java.lang.Object)[0];
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d); unexpected ArithmeticException from bigdecimal\", $r19);
";
    "Block 28:
[preds: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ] [succs: 29 30 ]
$r18 := @caughtexception;
r24 = $r18;
$b3 = l1 cmp 0L;
if $b3 == 0 goto return;
"->"Block 30:
[preds: 27 28 29 ] [succs: ]
return;
";
    "Block 29:
[preds: 28 ] [succs: 30 ]
$r19 = newarray (java.lang.Object)[0];
staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: long Math.floorMod(%d, %d); unexpected ArithmeticException from bigdecimal\", $r19);
"->"Block 30:
[preds: 27 28 29 ] [succs: ]
return;
";
}
