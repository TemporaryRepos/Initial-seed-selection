digraph "unitGraph" {
    "r15 := @parameter0: java.lang.String[]"
    "r0 = newarray (java.lang.Class)[0]"
    "r1 = newarray (java.lang.Object)[0]"
    "$r2 = class \"LjavaT/lang/reflect/Method/invoke/Foo;\""
    "r16 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"privateMethod\", r0)"
    "goto [?= z0 = 0]"
    "$r13 := @caughtexception"
    "$r14 = new java.lang.RuntimeException"
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bizzare: privateMethod *must* be there\")"
    "throw $r14"
    "z0 = 0"
    "$r3 = new javaT.lang.reflect.Method.invoke.Foo"
    "specialinvoke $r3.<javaT.lang.reflect.Method.invoke.Foo: void <init>()>()"
    "virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, r1)"
    "goto [?= (branch)]"
    "$r12 := @caughtexception"
    "z0 = 1"
    "$r5 := @caughtexception"
    "r17 = $r5"
    "$r6 = new java.lang.RuntimeException"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unexpected \")"
    "$r9 = virtualinvoke r17.<java.lang.Exception: java.lang.String toString()>()"
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11)"
    "throw $r6"
    "if z0 != 0 goto return"
    "$r4 = new java.lang.RuntimeException"
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Reflection access checks are disabled\")"
    "throw $r4"
    "return"
    "r15 := @parameter0: java.lang.String[]"->"r0 = newarray (java.lang.Class)[0]";
    "r0 = newarray (java.lang.Class)[0]"->"r1 = newarray (java.lang.Object)[0]";
    "r1 = newarray (java.lang.Object)[0]"->"$r2 = class \"LjavaT/lang/reflect/Method/invoke/Foo;\"";
    "r1 = newarray (java.lang.Object)[0]"->"$r13 := @caughtexception";
    "$r2 = class \"LjavaT/lang/reflect/Method/invoke/Foo;\""->"r16 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"privateMethod\", r0)";
    "$r2 = class \"LjavaT/lang/reflect/Method/invoke/Foo;\""->"$r13 := @caughtexception";
    "r16 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"privateMethod\", r0)"->"goto [?= z0 = 0]";
    "r16 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"privateMethod\", r0)"->"$r13 := @caughtexception";
    "goto [?= z0 = 0]"->"z0 = 0";
    "$r13 := @caughtexception"->"$r14 = new java.lang.RuntimeException";
    "$r14 = new java.lang.RuntimeException"->"specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bizzare: privateMethod *must* be there\")";
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bizzare: privateMethod *must* be there\")"->"throw $r14";
    "z0 = 0"->"$r12 := @caughtexception";
    "z0 = 0"->"$r5 := @caughtexception";
    "z0 = 0"->"$r3 = new javaT.lang.reflect.Method.invoke.Foo";
    "$r3 = new javaT.lang.reflect.Method.invoke.Foo"->"$r12 := @caughtexception";
    "$r3 = new javaT.lang.reflect.Method.invoke.Foo"->"$r5 := @caughtexception";
    "$r3 = new javaT.lang.reflect.Method.invoke.Foo"->"specialinvoke $r3.<javaT.lang.reflect.Method.invoke.Foo: void <init>()>()";
    "specialinvoke $r3.<javaT.lang.reflect.Method.invoke.Foo: void <init>()>()"->"$r12 := @caughtexception";
    "specialinvoke $r3.<javaT.lang.reflect.Method.invoke.Foo: void <init>()>()"->"$r5 := @caughtexception";
    "specialinvoke $r3.<javaT.lang.reflect.Method.invoke.Foo: void <init>()>()"->"virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, r1)";
    "virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, r1)"->"$r12 := @caughtexception";
    "virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, r1)"->"$r5 := @caughtexception";
    "virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, r1)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if z0 != 0 goto return";
    "$r12 := @caughtexception"->"z0 = 1";
    "z0 = 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if z0 != 0 goto return";
    "$r5 := @caughtexception"->"r17 = $r5";
    "r17 = $r5"->"$r6 = new java.lang.RuntimeException";
    "$r6 = new java.lang.RuntimeException"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unexpected \")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unexpected \")"->"$r9 = virtualinvoke r17.<java.lang.Exception: java.lang.String toString()>()";
    "$r9 = virtualinvoke r17.<java.lang.Exception: java.lang.String toString()>()"->"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)";
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11)";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11)"->"throw $r6";
    "if z0 != 0 goto return"->"$r4 = new java.lang.RuntimeException";
    "if z0 != 0 goto return"->"return";
    "$r4 = new java.lang.RuntimeException"->"specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Reflection access checks are disabled\")";
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Reflection access checks are disabled\")"->"throw $r4";
}
