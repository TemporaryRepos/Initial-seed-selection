digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String[];
b4 = 0;
$i0 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests$1StaticLocal;\", \"public static void EnclosingMethodTests.main(java.lang.String[])\");
i5 = b4 + $i0;
$r0 = new javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests;
specialinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: void <init>()>();
$r1 = virtualinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class getLocalClass(java.lang.Object)>(null);
$i1 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r1, \"java.lang.Class EnclosingMethodTests.getLocalClass(Object o)\");
i6 = i5 + $i1;
$i2 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests;\", null);
i7 = i6 + $i2;
$r2 = <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class anonymousClass>;
$i3 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r2, null);
i8 = i7 + $i3;
if i8 <= 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed.\");
throw $r3;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String[];
b4 = 0;
$i0 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests$1StaticLocal;\", \"public static void EnclosingMethodTests.main(java.lang.String[])\");
i5 = b4 + $i0;
$r0 = new javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests;
specialinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: void <init>()>();
$r1 = virtualinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class getLocalClass(java.lang.Object)>(null);
$i1 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r1, \"java.lang.Class EnclosingMethodTests.getLocalClass(Object o)\");
i6 = i5 + $i1;
$i2 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests;\", null);
i7 = i6 + $i2;
$r2 = <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class anonymousClass>;
$i3 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r2, null);
i8 = i7 + $i3;
if i8 <= 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed.\");
throw $r3;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.lang.String[];
b4 = 0;
$i0 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests$1StaticLocal;\", \"public static void EnclosingMethodTests.main(java.lang.String[])\");
i5 = b4 + $i0;
$r0 = new javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests;
specialinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: void <init>()>();
$r1 = virtualinvoke $r0.<javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class getLocalClass(java.lang.Object)>(null);
$i1 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r1, \"java.lang.Class EnclosingMethodTests.getLocalClass(Object o)\");
i6 = i5 + $i1;
$i2 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>(class \"LjavaT/lang/Class/getEnclosingMethod/EnclosingMethodTests;\", null);
i7 = i6 + $i2;
$r2 = <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: java.lang.Class anonymousClass>;
$i3 = staticinvoke <javaT.lang.Class.getEnclosingMethod.EnclosingMethodTests: int examine(java.lang.Class,java.lang.String)>($r2, null);
i8 = i7 + $i3;
if i8 <= 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
