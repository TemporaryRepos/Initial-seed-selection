digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: javaT.lang.reflect.annotationSharing.Baz;
r2 := @parameter1: javaT.lang.reflect.annotationSharing.Baz;
r1 = interfaceinvoke r0.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r3 = interfaceinvoke r2.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r1[0] = \"22\";
$r4 = r3[0];
$z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(\"1\");
if $z0 != 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r5 = new java.lang.RuntimeException;
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Mutation of array elements should not be detectable\");
throw $r5;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: javaT.lang.reflect.annotationSharing.Baz;
r2 := @parameter1: javaT.lang.reflect.annotationSharing.Baz;
r1 = interfaceinvoke r0.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r3 = interfaceinvoke r2.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r1[0] = \"22\";
$r4 = r3[0];
$z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(\"1\");
if $z0 != 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r5 = new java.lang.RuntimeException;
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Mutation of array elements should not be detectable\");
throw $r5;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: javaT.lang.reflect.annotationSharing.Baz;
r2 := @parameter1: javaT.lang.reflect.annotationSharing.Baz;
r1 = interfaceinvoke r0.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r3 = interfaceinvoke r2.<javaT.lang.reflect.annotationSharing.Baz: java.lang.String[] value()>();
r1[0] = \"22\";
$r4 = r3[0];
$z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(\"1\");
if $z0 != 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
