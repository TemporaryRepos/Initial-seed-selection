digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @this: com.sun.crypto.provider.KeyGenerator.Test4628062;
r0 := @parameter0: java.lang.String;
r4 := @parameter1: int[];
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r20 = (java.security.Key) r2;
r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>();
i0 = lengthof r3;
if i0 != 0 goto $i1 = r4[0];
"
    "Block 1:
[preds: 0 ] [succs: ]
$r16 = new java.lang.Exception;
specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length is 0!\");
throw $r16;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$i1 = r4[0];
if i0 == $i1 goto $i2 = lengthof r4;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r17 = new java.lang.Exception;
specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length mismatch!\");
throw $r17;
"
    "Block 4:
[preds: 2 ] [succs: 5 17 ]
$i2 = lengthof r4;
if $i2 <= 1 goto return 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i11 = 0;
"
    "Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i7 = r4[i11];
$i8 = $i7 * 8;
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8);
r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r21 = (java.security.Key) r5;
$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>();
$i10 = lengthof $r6;
$i9 = r4[i11];
if $i10 == $i9 goto i11 = i11 + 1;
"
    "Block 8:
[preds: 7 ] [succs: ]
$r18 = new java.lang.Exception;
specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"key is generated with the wrong length!\");
throw $r18;
"
    "Block 9:
[preds: 7 ] [succs: 6 ]
i11 = i11 + 1;
goto [?= $i3 = lengthof r4];
"
    "Block 10:
[preds: 6 ] [succs: 15 16 11 ]
$i4 = r4[0];
"
    "Block 11:
[preds: 10 ] [succs: 15 16 12 ]
$i5 = $i4 * 8;
"
    "Block 12:
[preds: 11 ] [succs: 15 16 13 ]
$i6 = $i5 + 1;
"
    "Block 13:
[preds: 12 ] [succs: 15 16 14 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6);
"
    "Block 14:
[preds: 13 ] [succs: 17 ]
goto [?= return 1];
"
    "Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
"
    "Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
"
    "Block 17:
[preds: 4 14 15 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @this: com.sun.crypto.provider.KeyGenerator.Test4628062;
r0 := @parameter0: java.lang.String;
r4 := @parameter1: int[];
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r20 = (java.security.Key) r2;
r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>();
i0 = lengthof r3;
if i0 != 0 goto $i1 = r4[0];
"->"Block 1:
[preds: 0 ] [succs: ]
$r16 = new java.lang.Exception;
specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length is 0!\");
throw $r16;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @this: com.sun.crypto.provider.KeyGenerator.Test4628062;
r0 := @parameter0: java.lang.String;
r4 := @parameter1: int[];
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r20 = (java.security.Key) r2;
r3 = interfaceinvoke $r20.<java.security.Key: byte[] getEncoded()>();
i0 = lengthof r3;
if i0 != 0 goto $i1 = r4[0];
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$i1 = r4[0];
if i0 == $i1 goto $i2 = lengthof r4;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$i1 = r4[0];
if i0 == $i1 goto $i2 = lengthof r4;
"->"Block 3:
[preds: 2 ] [succs: ]
$r17 = new java.lang.Exception;
specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"default key length mismatch!\");
throw $r17;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$i1 = r4[0];
if i0 == $i1 goto $i2 = lengthof r4;
"->"Block 4:
[preds: 2 ] [succs: 5 17 ]
$i2 = lengthof r4;
if $i2 <= 1 goto return 1;
";
    "Block 4:
[preds: 2 ] [succs: 5 17 ]
$i2 = lengthof r4;
if $i2 <= 1 goto return 1;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i11 = 0;
";
    "Block 4:
[preds: 2 ] [succs: 5 17 ]
$i2 = lengthof r4;
if $i2 <= 1 goto return 1;
"->"Block 17:
[preds: 4 14 15 ] [succs: ]
return 1;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i11 = 0;
"->"Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$i7 = r4[i11];
$i8 = $i7 * 8;
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8);
r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r21 = (java.security.Key) r5;
$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>();
$i10 = lengthof $r6;
$i9 = r4[i11];
if $i10 == $i9 goto i11 = i11 + 1;
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
"->"Block 10:
[preds: 6 ] [succs: 15 16 11 ]
$i4 = r4[0];
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
"->"Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
"->"Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i7 = r4[i11];
$i8 = $i7 * 8;
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8);
r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r21 = (java.security.Key) r5;
$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>();
$i10 = lengthof $r6;
$i9 = r4[i11];
if $i10 == $i9 goto i11 = i11 + 1;
"->"Block 8:
[preds: 7 ] [succs: ]
$r18 = new java.lang.Exception;
specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"key is generated with the wrong length!\");
throw $r18;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i7 = r4[i11];
$i8 = $i7 * 8;
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i8);
r5 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r21 = (java.security.Key) r5;
$r6 = interfaceinvoke $r21.<java.security.Key: byte[] getEncoded()>();
$i10 = lengthof $r6;
$i9 = r4[i11];
if $i10 == $i9 goto i11 = i11 + 1;
"->"Block 9:
[preds: 7 ] [succs: 6 ]
i11 = i11 + 1;
goto [?= $i3 = lengthof r4];
";
    "Block 9:
[preds: 7 ] [succs: 6 ]
i11 = i11 + 1;
goto [?= $i3 = lengthof r4];
"->"Block 6:
[preds: 5 9 ] [succs: 7 10 15 16 ]
$i3 = lengthof r4;
if i11 >= $i3 goto $i4 = r4[0];
";
    "Block 10:
[preds: 6 ] [succs: 15 16 11 ]
$i4 = r4[0];
"->"Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
";
    "Block 10:
[preds: 6 ] [succs: 15 16 11 ]
$i4 = r4[0];
"->"Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
";
    "Block 10:
[preds: 6 ] [succs: 15 16 11 ]
$i4 = r4[0];
"->"Block 11:
[preds: 10 ] [succs: 15 16 12 ]
$i5 = $i4 * 8;
";
    "Block 11:
[preds: 10 ] [succs: 15 16 12 ]
$i5 = $i4 * 8;
"->"Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
";
    "Block 11:
[preds: 10 ] [succs: 15 16 12 ]
$i5 = $i4 * 8;
"->"Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
";
    "Block 11:
[preds: 10 ] [succs: 15 16 12 ]
$i5 = $i4 * 8;
"->"Block 12:
[preds: 11 ] [succs: 15 16 13 ]
$i6 = $i5 + 1;
";
    "Block 12:
[preds: 11 ] [succs: 15 16 13 ]
$i6 = $i5 + 1;
"->"Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
";
    "Block 12:
[preds: 11 ] [succs: 15 16 13 ]
$i6 = $i5 + 1;
"->"Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
";
    "Block 12:
[preds: 11 ] [succs: 15 16 13 ]
$i6 = $i5 + 1;
"->"Block 13:
[preds: 12 ] [succs: 15 16 14 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6);
";
    "Block 13:
[preds: 12 ] [succs: 15 16 14 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6);
"->"Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
";
    "Block 13:
[preds: 12 ] [succs: 15 16 14 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6);
"->"Block 16:
[preds: 6 10 11 12 13 ] [succs: ]
$r10 := @caughtexception;
r15 = $r10;
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"wrong exception is thrown for invalid key size!\");
throw $r19;
";
    "Block 13:
[preds: 12 ] [succs: 15 16 14 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>($i6);
"->"Block 14:
[preds: 13 ] [succs: 17 ]
goto [?= return 1];
";
    "Block 14:
[preds: 13 ] [succs: 17 ]
goto [?= return 1];
"->"Block 17:
[preds: 4 14 15 ] [succs: ]
return 1;
";
    "Block 15:
[preds: 6 10 11 12 13 ] [succs: 17 ]
$r12 := @caughtexception;
r14 = $r12;
goto [?= return 1];
"->"Block 17:
[preds: 4 14 15 ] [succs: ]
return 1;
";
}
