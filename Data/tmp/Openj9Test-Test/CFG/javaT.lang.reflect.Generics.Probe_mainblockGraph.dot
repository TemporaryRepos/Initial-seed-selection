digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r21 := @parameter0: java.lang.String[];
$r0 = class \"LjavaT/lang/reflect/Generics/Probe;\";
$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/Generics/Classes;\");
r2 = (javaT.lang.reflect.Generics.Classes) $r1;
$r3 = new java.util.ArrayList;
$r4 = interfaceinvoke r2.<javaT.lang.reflect.Generics.Classes: java.lang.String[] value()>();
$r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);
specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);
r6 = $r3;
i1 = 0;
r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.String) $r9;
$r12 = <java.lang.System: java.io.PrintStream out>;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nCLASS \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r10, 0, null);
$i0 = staticinvoke <javaT.lang.reflect.Generics.Probe: int probe(java.lang.Class)>(r16);
i1 = i1 + $i0;
$r18 = <java.lang.System: java.io.PrintStream out>;
if i1 != 0 goto $r17 = new java.lang.StringBuilder;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r22 = \"  ok\";
goto [?= virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22)];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  ERRORS:\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
"
    "Block 5:
[preds: 3 4 ] [succs: 1 ]
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);
goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i1 <= 0 goto return;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r8 = new java.lang.RuntimeException;
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Errors during probing.\");
throw $r8;
"
    "Block 8:
[preds: 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r21 := @parameter0: java.lang.String[];
$r0 = class \"LjavaT/lang/reflect/Generics/Probe;\";
$r1 = virtualinvoke $r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/Generics/Classes;\");
r2 = (javaT.lang.reflect.Generics.Classes) $r1;
$r3 = new java.util.ArrayList;
$r4 = interfaceinvoke r2.<javaT.lang.reflect.Generics.Classes: java.lang.String[] value()>();
$r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);
specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);
r6 = $r3;
i1 = 0;
r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.String) $r9;
$r12 = <java.lang.System: java.io.PrintStream out>;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nCLASS \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r10, 0, null);
$i0 = staticinvoke <javaT.lang.reflect.Generics.Probe: int probe(java.lang.Class)>(r16);
i1 = i1 + $i0;
$r18 = <java.lang.System: java.io.PrintStream out>;
if i1 != 0 goto $r17 = new java.lang.StringBuilder;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 6:
[preds: 1 ] [succs: 7 8 ]
if i1 <= 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.String) $r9;
$r12 = <java.lang.System: java.io.PrintStream out>;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nCLASS \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r10, 0, null);
$i0 = staticinvoke <javaT.lang.reflect.Generics.Probe: int probe(java.lang.Class)>(r16);
i1 = i1 + $i0;
$r18 = <java.lang.System: java.io.PrintStream out>;
if i1 != 0 goto $r17 = new java.lang.StringBuilder;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$r22 = \"  ok\";
goto [?= virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22)];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.String) $r9;
$r12 = <java.lang.System: java.io.PrintStream out>;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nCLASS \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r10, 0, null);
$i0 = staticinvoke <javaT.lang.reflect.Generics.Probe: int probe(java.lang.Class)>(r16);
i1 = i1 + $i0;
$r18 = <java.lang.System: java.io.PrintStream out>;
if i1 != 0 goto $r17 = new java.lang.StringBuilder;
"->"Block 4:
[preds: 2 ] [succs: 5 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  ERRORS:\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r22 = \"  ok\";
goto [?= virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22)];
"->"Block 5:
[preds: 3 4 ] [succs: 1 ]
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);
goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  ERRORS:\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
"->"Block 5:
[preds: 3 4 ] [succs: 1 ]
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);
goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 3 4 ] [succs: 1 ]
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);
goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i1 <= 0 goto return;
"->"Block 7:
[preds: 6 ] [succs: ]
$r8 = new java.lang.RuntimeException;
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Errors during probing.\");
throw $r8;
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i1 <= 0 goto return;
"->"Block 8:
[preds: 6 ] [succs: ]
return;
";
}
