digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r72 := @parameter0: java.lang.String[];
$r0 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(128);
r1 = virtualinvoke $r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r2 = \"Beware the Jabberwock, my son!\";
$i0 = virtualinvoke $r2.<java.lang.String: int length()>();
$r3 = virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i0);
virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer rewind()>();
$r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(128);
$r6 = virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>();
r7 = virtualinvoke $r6.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r8 = \"Beware the Jabberwock, my son!\";
$i1 = virtualinvoke $r8.<java.lang.String: int length()>();
$r9 = virtualinvoke r7.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i1);
virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer rewind()>();
$r11 = newarray (java.lang.CharSequence)[5];
$r11[0] = \"Beware the Jabberwock, my son!\";
$r12 = new java.lang.StringBuffer;
specialinvoke $r12.<java.lang.StringBuffer: void <init>(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r11[1] = $r12;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r11[2] = $r13;
$r11[3] = r1;
$r11[4] = r7;
r14 = $r11;
$r15 = newarray (java.lang.Object[])[6];
$r16 = newarray (java.lang.Object)[2];
$r17 = new java.io.CharArrayWriter;
specialinvoke $r17.<java.io.CharArrayWriter: void <init>()>();
$r16[0] = $r17;
$r18 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharArrayWriter>;
$r16[1] = $r18;
$r15[0] = $r16;
$r19 = newarray (java.lang.Object)[2];
$r20 = new java.io.BufferedWriter;
$r21 = <javaT.lang.Appendable.Basic: java.io.CharArrayWriter gw>;
specialinvoke $r20.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r21);
$r19[0] = $r20;
$r22 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testBufferedWriter>;
$r19[1] = $r22;
$r15[1] = $r19;
$r23 = newarray (java.lang.Object)[2];
$r24 = new java.io.FileWriter;
$r25 = <javaT.lang.Appendable.Basic: java.io.File gf>;
specialinvoke $r24.<java.io.FileWriter: void <init>(java.io.File)>($r25);
$r23[0] = $r24;
$r26 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testFileWriter>;
$r23[1] = $r26;
$r15[2] = $r23;
$r27 = newarray (java.lang.Object)[2];
$r28 = new java.io.OutputStreamWriter;
$r29 = <javaT.lang.Appendable.Basic: java.io.ByteArrayOutputStream gos>;
specialinvoke $r28.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r29);
$r27[0] = $r28;
$r30 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testOutputStreamWriter>;
$r27[1] = $r30;
$r15[3] = $r27;
$r31 = newarray (java.lang.Object)[2];
$r32 = new java.io.PrintWriter;
$r33 = <javaT.lang.Appendable.Basic: java.io.CharArrayWriter gw>;
specialinvoke $r32.<java.io.PrintWriter: void <init>(java.io.Writer)>($r33);
$r31[0] = $r32;
$r34 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testPrintWriter>;
$r31[1] = $r34;
$r15[4] = $r31;
$r35 = newarray (java.lang.Object)[2];
$r36 = new java.io.StringWriter;
specialinvoke $r36.<java.io.StringWriter: void <init>()>();
$r35[0] = $r36;
$r37 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringWriter>;
$r35[1] = $r37;
$r15[5] = $r35;
r38 = $r15;
i12 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i2 = lengthof r14;
if i12 >= $i2 goto $i3 = <javaT.lang.Appendable.Basic: int fail>;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
r53 = r14[i12];
i13 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i11 = lengthof r38;
if i13 >= $i11 goto $r54 = new java.io.PrintStream;
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
$r66 = r38[i13];
$r67 = $r66[0];
$r71 = (java.io.Writer) $r67;
$r68 = r38[i13];
$r69 = $r68[1];
$r70 = (javaT.lang.Appendable.BasicRunnable) $r69;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r71, r53, $r70);
i13 = i13 + 1;
goto [?= $i11 = lengthof r38];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
$r54 = new java.io.PrintStream;
$r55 = <javaT.lang.Appendable.Basic: java.io.ByteArrayOutputStream gos>;
specialinvoke $r54.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r55);
$r56 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testPrintStream>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r54, r53, $r56);
$r57 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(128);
$r58 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r57, r53, $r58);
$r59 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(128);
$r60 = virtualinvoke $r59.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>();
$r61 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r60, r53, $r61);
$r62 = new java.lang.StringBuffer;
specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();
$r63 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r62, r53, $r63);
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r65 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuilder>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r64, r53, $r65);
i12 = i12 + 1;
goto [?= $i2 = lengthof r14];
"
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
$i3 = <javaT.lang.Appendable.Basic: int fail>;
if $i3 == 0 goto $r40 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r45 = new java.lang.RuntimeException;
$r46 = new java.lang.StringBuilder;
specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();
$i8 = <javaT.lang.Appendable.Basic: int fail>;
$i7 = <javaT.lang.Appendable.Basic: int pass>;
$i9 = $i8 + $i7;
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests: \");
$i10 = <javaT.lang.Appendable.Basic: int fail>;
$r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failure(s), first\");
$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
$r52 = <javaT.lang.Appendable.Basic: java.lang.Throwable first>;
specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r51, $r52);
throw $r45;
"
    "Block 8:
[preds: 6 ] [succs: ]
$r40 = <java.lang.System: java.io.PrintStream out>;
$r39 = new java.lang.StringBuilder;
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"all \");
$i5 = <javaT.lang.Appendable.Basic: int fail>;
$i4 = <javaT.lang.Appendable.Basic: int pass>;
$i6 = $i5 + $i4;
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests passed\");
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r44);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r72 := @parameter0: java.lang.String[];
$r0 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(128);
r1 = virtualinvoke $r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r2 = \"Beware the Jabberwock, my son!\";
$i0 = virtualinvoke $r2.<java.lang.String: int length()>();
$r3 = virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i0);
virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer rewind()>();
$r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(128);
$r6 = virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>();
r7 = virtualinvoke $r6.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r8 = \"Beware the Jabberwock, my son!\";
$i1 = virtualinvoke $r8.<java.lang.String: int length()>();
$r9 = virtualinvoke r7.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i1);
virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer rewind()>();
$r11 = newarray (java.lang.CharSequence)[5];
$r11[0] = \"Beware the Jabberwock, my son!\";
$r12 = new java.lang.StringBuffer;
specialinvoke $r12.<java.lang.StringBuffer: void <init>(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r11[1] = $r12;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Beware the Jabberwock, my son!\");
$r11[2] = $r13;
$r11[3] = r1;
$r11[4] = r7;
r14 = $r11;
$r15 = newarray (java.lang.Object[])[6];
$r16 = newarray (java.lang.Object)[2];
$r17 = new java.io.CharArrayWriter;
specialinvoke $r17.<java.io.CharArrayWriter: void <init>()>();
$r16[0] = $r17;
$r18 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharArrayWriter>;
$r16[1] = $r18;
$r15[0] = $r16;
$r19 = newarray (java.lang.Object)[2];
$r20 = new java.io.BufferedWriter;
$r21 = <javaT.lang.Appendable.Basic: java.io.CharArrayWriter gw>;
specialinvoke $r20.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r21);
$r19[0] = $r20;
$r22 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testBufferedWriter>;
$r19[1] = $r22;
$r15[1] = $r19;
$r23 = newarray (java.lang.Object)[2];
$r24 = new java.io.FileWriter;
$r25 = <javaT.lang.Appendable.Basic: java.io.File gf>;
specialinvoke $r24.<java.io.FileWriter: void <init>(java.io.File)>($r25);
$r23[0] = $r24;
$r26 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testFileWriter>;
$r23[1] = $r26;
$r15[2] = $r23;
$r27 = newarray (java.lang.Object)[2];
$r28 = new java.io.OutputStreamWriter;
$r29 = <javaT.lang.Appendable.Basic: java.io.ByteArrayOutputStream gos>;
specialinvoke $r28.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r29);
$r27[0] = $r28;
$r30 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testOutputStreamWriter>;
$r27[1] = $r30;
$r15[3] = $r27;
$r31 = newarray (java.lang.Object)[2];
$r32 = new java.io.PrintWriter;
$r33 = <javaT.lang.Appendable.Basic: java.io.CharArrayWriter gw>;
specialinvoke $r32.<java.io.PrintWriter: void <init>(java.io.Writer)>($r33);
$r31[0] = $r32;
$r34 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testPrintWriter>;
$r31[1] = $r34;
$r15[4] = $r31;
$r35 = newarray (java.lang.Object)[2];
$r36 = new java.io.StringWriter;
specialinvoke $r36.<java.io.StringWriter: void <init>()>();
$r35[0] = $r36;
$r37 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringWriter>;
$r35[1] = $r37;
$r15[5] = $r35;
r38 = $r15;
i12 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i2 = lengthof r14;
if i12 >= $i2 goto $i3 = <javaT.lang.Appendable.Basic: int fail>;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i2 = lengthof r14;
if i12 >= $i2 goto $i3 = <javaT.lang.Appendable.Basic: int fail>;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
r53 = r14[i12];
i13 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i2 = lengthof r14;
if i12 >= $i2 goto $i3 = <javaT.lang.Appendable.Basic: int fail>;
"->"Block 6:
[preds: 1 ] [succs: 7 8 ]
$i3 = <javaT.lang.Appendable.Basic: int fail>;
if $i3 == 0 goto $r40 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
r53 = r14[i12];
i13 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i11 = lengthof r38;
if i13 >= $i11 goto $r54 = new java.io.PrintStream;
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i11 = lengthof r38;
if i13 >= $i11 goto $r54 = new java.io.PrintStream;
"->"Block 4:
[preds: 3 ] [succs: 3 ]
$r66 = r38[i13];
$r67 = $r66[0];
$r71 = (java.io.Writer) $r67;
$r68 = r38[i13];
$r69 = $r68[1];
$r70 = (javaT.lang.Appendable.BasicRunnable) $r69;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r71, r53, $r70);
i13 = i13 + 1;
goto [?= $i11 = lengthof r38];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i11 = lengthof r38;
if i13 >= $i11 goto $r54 = new java.io.PrintStream;
"->"Block 5:
[preds: 3 ] [succs: 1 ]
$r54 = new java.io.PrintStream;
$r55 = <javaT.lang.Appendable.Basic: java.io.ByteArrayOutputStream gos>;
specialinvoke $r54.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r55);
$r56 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testPrintStream>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r54, r53, $r56);
$r57 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(128);
$r58 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r57, r53, $r58);
$r59 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(128);
$r60 = virtualinvoke $r59.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>();
$r61 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r60, r53, $r61);
$r62 = new java.lang.StringBuffer;
specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();
$r63 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r62, r53, $r63);
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r65 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuilder>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r64, r53, $r65);
i12 = i12 + 1;
goto [?= $i2 = lengthof r14];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
$r66 = r38[i13];
$r67 = $r66[0];
$r71 = (java.io.Writer) $r67;
$r68 = r38[i13];
$r69 = $r68[1];
$r70 = (javaT.lang.Appendable.BasicRunnable) $r69;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r71, r53, $r70);
i13 = i13 + 1;
goto [?= $i11 = lengthof r38];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i11 = lengthof r38;
if i13 >= $i11 goto $r54 = new java.io.PrintStream;
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
$r54 = new java.io.PrintStream;
$r55 = <javaT.lang.Appendable.Basic: java.io.ByteArrayOutputStream gos>;
specialinvoke $r54.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r55);
$r56 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testPrintStream>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r54, r53, $r56);
$r57 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(128);
$r58 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r57, r53, $r58);
$r59 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(128);
$r60 = virtualinvoke $r59.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>();
$r61 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testCharBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r60, r53, $r61);
$r62 = new java.lang.StringBuffer;
specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();
$r63 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuffer>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r62, r53, $r63);
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r65 = <javaT.lang.Appendable.Basic: javaT.lang.Appendable.BasicRunnable testStringBuilder>;
staticinvoke <javaT.lang.Appendable.Basic: void test(java.lang.Appendable,java.lang.CharSequence,javaT.lang.Appendable.BasicRunnable)>($r64, r53, $r65);
i12 = i12 + 1;
goto [?= $i2 = lengthof r14];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i2 = lengthof r14;
if i12 >= $i2 goto $i3 = <javaT.lang.Appendable.Basic: int fail>;
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
$i3 = <javaT.lang.Appendable.Basic: int fail>;
if $i3 == 0 goto $r40 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 6 ] [succs: ]
$r45 = new java.lang.RuntimeException;
$r46 = new java.lang.StringBuilder;
specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();
$i8 = <javaT.lang.Appendable.Basic: int fail>;
$i7 = <javaT.lang.Appendable.Basic: int pass>;
$i9 = $i8 + $i7;
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests: \");
$i10 = <javaT.lang.Appendable.Basic: int fail>;
$r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failure(s), first\");
$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
$r52 = <javaT.lang.Appendable.Basic: java.lang.Throwable first>;
specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r51, $r52);
throw $r45;
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
$i3 = <javaT.lang.Appendable.Basic: int fail>;
if $i3 == 0 goto $r40 = <java.lang.System: java.io.PrintStream out>;
"->"Block 8:
[preds: 6 ] [succs: ]
$r40 = <java.lang.System: java.io.PrintStream out>;
$r39 = new java.lang.StringBuilder;
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"all \");
$i5 = <javaT.lang.Appendable.Basic: int fail>;
$i4 = <javaT.lang.Appendable.Basic: int pass>;
$i6 = $i5 + $i4;
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests passed\");
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r44);
return;
";
}
