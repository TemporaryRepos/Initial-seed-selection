digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0)"
    "r2 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>()"
    "r3 = virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r2, 4)"
    "virtualinvoke r2.<java.nio.channels.Selector: void close()>()"
    "$z0 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isValid()>()"
    "if $z0 == 0 goto virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"
    "$r4 = new java.lang.Exception"
    "specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Key valid after selector closed\")"
    "throw $r4"
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"
    "goto [?= return]"
    "$r5 := @caughtexception"
    "r6 = $r5"
    "throw r6"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()";
    "r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"->"virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0)";
    "r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"->"$r5 := @caughtexception";
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0)"->"r2 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>()";
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0)"->"$r5 := @caughtexception";
    "r2 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>()"->"r3 = virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r2, 4)";
    "r2 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>()"->"$r5 := @caughtexception";
    "r3 = virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r2, 4)"->"virtualinvoke r2.<java.nio.channels.Selector: void close()>()";
    "r3 = virtualinvoke r0.<java.nio.channels.DatagramChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r2, 4)"->"$r5 := @caughtexception";
    "virtualinvoke r2.<java.nio.channels.Selector: void close()>()"->"$z0 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isValid()>()";
    "virtualinvoke r2.<java.nio.channels.Selector: void close()>()"->"$r5 := @caughtexception";
    "$z0 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isValid()>()"->"if $z0 == 0 goto virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()";
    "$z0 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isValid()>()"->"$r5 := @caughtexception";
    "if $z0 == 0 goto virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"->"$r4 = new java.lang.Exception";
    "if $z0 == 0 goto virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"->"virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()";
    "if $z0 == 0 goto virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"->"$r5 := @caughtexception";
    "$r4 = new java.lang.Exception"->"specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Key valid after selector closed\")";
    "$r4 = new java.lang.Exception"->"$r5 := @caughtexception";
    "specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Key valid after selector closed\")"->"throw $r4";
    "specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Key valid after selector closed\")"->"$r5 := @caughtexception";
    "throw $r4"->"$r5 := @caughtexception";
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r5 := @caughtexception"->"r6 = $r5";
    "$r5 := @caughtexception"->"$r5 := @caughtexception";
    "r6 = $r5"->"virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()";
    "r6 = $r5"->"$r5 := @caughtexception";
    "virtualinvoke r0.<java.nio.channels.DatagramChannel: void close()>()"->"throw r6";
}
