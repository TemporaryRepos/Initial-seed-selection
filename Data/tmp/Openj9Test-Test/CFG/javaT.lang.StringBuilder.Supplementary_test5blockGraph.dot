digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
i4 = 0;
"
    "Block 1:
[preds: 0 14 ] [succs: 2 15 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i4 >= $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i4];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
i5 = 0;
"
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i5 > i1 goto i8 = i1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i6 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(i5, i1);
i7 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i5, i1);
if i6 == i7 goto $z0 = 0;
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
"
    "Block 7:
[preds: 5 6 ] [succs: 3 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r20, i6, i7);
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 3 ] [succs: 9 ]
i8 = i1;
"
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i8 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i9 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(0, i8);
i10 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i8);
if i9 == i10 goto $z1 = 0;
"
    "Block 11:
[preds: 10 ] [succs: 13 ]
$z1 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
"
    "Block 12:
[preds: 10 ] [succs: 13 ]
$z1 = 0;
"
    "Block 13:
[preds: 11 12 ] [succs: 9 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r11, i9, i10);
i8 = i8 + -1;
goto [?= (branch)];
"
    "Block 14:
[preds: 9 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i4 = i4 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
"
    "Block 15:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
i4 = 0;
"->"Block 1:
[preds: 0 14 ] [succs: 2 15 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i4 >= $i0 goto return;
";
    "Block 1:
[preds: 0 14 ] [succs: 2 15 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i4 >= $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i4];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
i5 = 0;
";
    "Block 1:
[preds: 0 14 ] [succs: 2 15 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i4 >= $i0 goto return;
"->"Block 15:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i4];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
i5 = 0;
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i5 > i1 goto i8 = i1;
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i5 > i1 goto i8 = i1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
i6 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(i5, i1);
i7 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i5, i1);
if i6 == i7 goto $z0 = 0;
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i5 > i1 goto i8 = i1;
"->"Block 8:
[preds: 3 ] [succs: 9 ]
i8 = i1;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i6 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(i5, i1);
i7 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i5, i1);
if i6 == i7 goto $z0 = 0;
"->"Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i6 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(i5, i1);
i7 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i5, i1);
if i6 == i7 goto $z0 = 0;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
"->"Block 7:
[preds: 5 6 ] [succs: 3 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r20, i6, i7);
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
"->"Block 7:
[preds: 5 6 ] [succs: 3 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r20, i6, i7);
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 7:
[preds: 5 6 ] [succs: 3 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r20, i6, i7);
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i5 > i1 goto i8 = i1;
";
    "Block 8:
[preds: 3 ] [succs: 9 ]
i8 = i1;
"->"Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i8 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i8 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
i9 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(0, i8);
i10 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i8);
if i9 == i10 goto $z1 = 0;
";
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i8 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 14:
[preds: 9 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i4 = i4 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i9 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(0, i8);
i10 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i8);
if i9 == i10 goto $z1 = 0;
"->"Block 11:
[preds: 10 ] [succs: 13 ]
$z1 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i9 = virtualinvoke r4.<java.lang.StringBuilder: int codePointCount(int,int)>(0, i8);
i10 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i8);
if i9 == i10 goto $z1 = 0;
"->"Block 12:
[preds: 10 ] [succs: 13 ]
$z1 = 0;
";
    "Block 11:
[preds: 10 ] [succs: 13 ]
$z1 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
"->"Block 13:
[preds: 11 12 ] [succs: 9 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r11, i9, i10);
i8 = i8 + -1;
goto [?= (branch)];
";
    "Block 12:
[preds: 10 ] [succs: 13 ]
$z1 = 0;
"->"Block 13:
[preds: 11 12 ] [succs: 9 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r11, i9, i10);
i8 = i8 + -1;
goto [?= (branch)];
";
    "Block 13:
[preds: 11 12 ] [succs: 9 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r11, i9, i10);
i8 = i8 + -1;
goto [?= (branch)];
"->"Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i8 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 14:
[preds: 9 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testCodePointCount(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i4 = i4 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
"->"Block 1:
[preds: 0 14 ] [succs: 2 15 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i4 >= $i0 goto return;
";
}
