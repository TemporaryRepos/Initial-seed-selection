digraph "unitGraph" {
    "$r0 = newarray (long)[10]"
    "$r0[0] = -9223372036854775808L"
    "$r0[1] = 0L"
    "$r0[2] = 1L"
    "$r0[3] = 2L"
    "$r0[4] = 8388607L"
    "$r0[5] = 8388608L"
    "$r0[6] = 8388609L"
    "$r0[7] = 2147483391L"
    "$r0[8] = 2147483392L"
    "$r0[9] = 2147483393L"
    "r1 = $r0"
    "r2 = r1"
    "i0 = lengthof r2"
    "i5 = 0"
    "if i5 >= i0 goto return"
    "l1 = r2[i5]"
    "$r3 = new java.math.BigDecimal"
    "specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l1)"
    "r4 = $r3"
    "$r5 = new java.math.BigDecimal"
    "$l2 = neg l1"
    "specialinvoke $r5.<java.math.BigDecimal: void <init>(long)>($l2)"
    "r6 = $r5"
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>(l1, r4)"
    "$l3 = neg l1"
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>($l3, r6)"
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>(l1, r4)"
    "$l4 = neg l1"
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>($l4, r6)"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "return"
    "$r0 = newarray (long)[10]"->"$r0[0] = -9223372036854775808L";
    "$r0[0] = -9223372036854775808L"->"$r0[1] = 0L";
    "$r0[1] = 0L"->"$r0[2] = 1L";
    "$r0[2] = 1L"->"$r0[3] = 2L";
    "$r0[3] = 2L"->"$r0[4] = 8388607L";
    "$r0[4] = 8388607L"->"$r0[5] = 8388608L";
    "$r0[5] = 8388608L"->"$r0[6] = 8388609L";
    "$r0[6] = 8388609L"->"$r0[7] = 2147483391L";
    "$r0[7] = 2147483391L"->"$r0[8] = 2147483392L";
    "$r0[8] = 2147483392L"->"$r0[9] = 2147483393L";
    "$r0[9] = 2147483393L"->"r1 = $r0";
    "r1 = $r0"->"r2 = r1";
    "r2 = r1"->"i0 = lengthof r2";
    "i0 = lengthof r2"->"i5 = 0";
    "i5 = 0"->"if i5 >= i0 goto return";
    "if i5 >= i0 goto return"->"l1 = r2[i5]";
    "if i5 >= i0 goto return"->"return";
    "l1 = r2[i5]"->"$r3 = new java.math.BigDecimal";
    "$r3 = new java.math.BigDecimal"->"specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l1)";
    "specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(l1)"->"r4 = $r3";
    "r4 = $r3"->"$r5 = new java.math.BigDecimal";
    "$r5 = new java.math.BigDecimal"->"$l2 = neg l1";
    "$l2 = neg l1"->"specialinvoke $r5.<java.math.BigDecimal: void <init>(long)>($l2)";
    "specialinvoke $r5.<java.math.BigDecimal: void <init>(long)>($l2)"->"r6 = $r5";
    "r6 = $r5"->"staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>(l1, r4)";
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>(l1, r4)"->"$l3 = neg l1";
    "$l3 = neg l1"->"staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>($l3, r6)";
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testDoubleValue0(long,java.math.BigDecimal)>($l3, r6)"->"staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>(l1, r4)";
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>(l1, r4)"->"$l4 = neg l1";
    "$l4 = neg l1"->"staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>($l4, r6)";
    "staticinvoke <javaT.math.BigDecimal.FloatDoubleValueTests: void testFloatValue0(long,java.math.BigDecimal)>($l4, r6)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto return";
}
