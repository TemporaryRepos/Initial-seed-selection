digraph "unitGraph" {
    "r13 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.jar.Attributes"
    "specialinvoke $r0.<java.util.jar.Attributes: void <init>()>()"
    "r1 = $r0"
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"this is not an Attributes.Name\", \"value\")"
    "$r3 = new java.lang.Exception"
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non Attributes.Name names\")"
    "throw $r3"
    "$r8 := @caughtexception"
    "r14 = $r8"
    "$r9 = new java.util.jar.Attributes$Name"
    "specialinvoke $r9.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(\"name\")"
    "$r10 = new java.lang.Integer"
    "specialinvoke $r10.<java.lang.Integer: void <init>(int)>(0)"
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"
    "$r12 = new java.lang.Exception"
    "specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non String values\")"
    "throw $r12"
    "$r5 := @caughtexception"
    "r15 = $r5"
    "$r6 = new java.util.HashMap"
    "specialinvoke $r6.<java.util.HashMap: void <init>()>()"
    "virtualinvoke r1.<java.util.jar.Attributes: void putAll(java.util.Map)>($r6)"
    "$r7 = new java.lang.Exception"
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"putAll should check for non Attributes maps\")"
    "throw $r7"
    "$r4 := @caughtexception"
    "r16 = $r4"
    "return"
    "r13 := @parameter0: java.lang.String[]"->"$r0 = new java.util.jar.Attributes";
    "$r0 = new java.util.jar.Attributes"->"specialinvoke $r0.<java.util.jar.Attributes: void <init>()>()";
    "specialinvoke $r0.<java.util.jar.Attributes: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"this is not an Attributes.Name\", \"value\")";
    "r1 = $r0"->"$r8 := @caughtexception";
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"this is not an Attributes.Name\", \"value\")"->"$r3 = new java.lang.Exception";
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"this is not an Attributes.Name\", \"value\")"->"$r8 := @caughtexception";
    "$r3 = new java.lang.Exception"->"specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non Attributes.Name names\")";
    "$r3 = new java.lang.Exception"->"$r8 := @caughtexception";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non Attributes.Name names\")"->"throw $r3";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non Attributes.Name names\")"->"$r8 := @caughtexception";
    "throw $r3"->"$r8 := @caughtexception";
    "$r8 := @caughtexception"->"r14 = $r8";
    "r14 = $r8"->"$r9 = new java.util.jar.Attributes$Name";
    "r14 = $r8"->"$r5 := @caughtexception";
    "$r9 = new java.util.jar.Attributes$Name"->"specialinvoke $r9.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(\"name\")";
    "$r9 = new java.util.jar.Attributes$Name"->"$r5 := @caughtexception";
    "specialinvoke $r9.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(\"name\")"->"$r10 = new java.lang.Integer";
    "specialinvoke $r9.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(\"name\")"->"$r5 := @caughtexception";
    "$r10 = new java.lang.Integer"->"specialinvoke $r10.<java.lang.Integer: void <init>(int)>(0)";
    "$r10 = new java.lang.Integer"->"$r5 := @caughtexception";
    "specialinvoke $r10.<java.lang.Integer: void <init>(int)>(0)"->"virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)";
    "specialinvoke $r10.<java.lang.Integer: void <init>(int)>(0)"->"$r5 := @caughtexception";
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$r12 = new java.lang.Exception";
    "virtualinvoke r1.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$r5 := @caughtexception";
    "$r12 = new java.lang.Exception"->"specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non String values\")";
    "$r12 = new java.lang.Exception"->"$r5 := @caughtexception";
    "specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non String values\")"->"throw $r12";
    "specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>(\"put should check for non String values\")"->"$r5 := @caughtexception";
    "throw $r12"->"$r5 := @caughtexception";
    "$r5 := @caughtexception"->"r15 = $r5";
    "r15 = $r5"->"$r6 = new java.util.HashMap";
    "r15 = $r5"->"$r4 := @caughtexception";
    "$r6 = new java.util.HashMap"->"specialinvoke $r6.<java.util.HashMap: void <init>()>()";
    "$r6 = new java.util.HashMap"->"$r4 := @caughtexception";
    "specialinvoke $r6.<java.util.HashMap: void <init>()>()"->"virtualinvoke r1.<java.util.jar.Attributes: void putAll(java.util.Map)>($r6)";
    "specialinvoke $r6.<java.util.HashMap: void <init>()>()"->"$r4 := @caughtexception";
    "virtualinvoke r1.<java.util.jar.Attributes: void putAll(java.util.Map)>($r6)"->"$r7 = new java.lang.Exception";
    "virtualinvoke r1.<java.util.jar.Attributes: void putAll(java.util.Map)>($r6)"->"$r4 := @caughtexception";
    "$r7 = new java.lang.Exception"->"specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"putAll should check for non Attributes maps\")";
    "$r7 = new java.lang.Exception"->"$r4 := @caughtexception";
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"putAll should check for non Attributes maps\")"->"throw $r7";
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"putAll should check for non Attributes maps\")"->"$r4 := @caughtexception";
    "throw $r7"->"$r4 := @caughtexception";
    "$r4 := @caughtexception"->"r16 = $r4";
    "r16 = $r4"->"return";
}
