digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")"
    "$r1 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r13 = r2[0]"
    "$i3 = lengthof r2"
    "if $i3 == 3 goto r13 = r2[0]"
    "$r12 = new java.lang.AssertionError"
    "specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2 should have three type parameters\")"
    "throw $r12"
    "r13 = r2[0]"
    "r14 = interfaceinvoke r13.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i2 = lengthof r14"
    "if $i2 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r11 = new java.lang.AssertionError"
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T1 should have one bound\")"
    "throw $r11"
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z2 != 0 goto r15 = r2[1]"
    "$r9 = r14[0]"
    "$z8 = $r9 instanceof java.lang.reflect.ParameterizedType"
    "if $z8 != 0 goto r15 = r2[1]"
    "$r10 = new java.lang.AssertionError"
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T1 should be a parameterized type\")"
    "throw $r10"
    "r15 = r2[1]"
    "r16 = interfaceinvoke r15.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i1 = lengthof r16"
    "if $i1 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r8 = new java.lang.AssertionError"
    "specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")"
    "throw $r8"
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z4 != 0 goto r17 = r2[2]"
    "$r6 = r16[0]"
    "$z7 = $r6 instanceof java.lang.reflect.ParameterizedType"
    "if $z7 != 0 goto r17 = r2[2]"
    "$r7 = new java.lang.AssertionError"
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be a parameterized type\")"
    "throw $r7"
    "r17 = r2[2]"
    "r18 = interfaceinvoke r17.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i0 = lengthof r18"
    "if $i0 == 1 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r5 = new java.lang.AssertionError"
    "specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound\")"
    "throw $r5"
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z6 != 0 goto return"
    "$r3 = r18[0]"
    "if $r3 == class \"Ljava/lang/Throwable;\" goto return"
    "$r4 = new java.lang.AssertionError"
    "specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable\")"
    "throw $r4"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing type parameters\")"->"$r1 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r1 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z0 != 0 goto r13 = r2[0]";
    "if $z0 != 0 goto r13 = r2[0]"->"$i3 = lengthof r2";
    "if $z0 != 0 goto r13 = r2[0]"->"r13 = r2[0]";
    "$i3 = lengthof r2"->"if $i3 == 3 goto r13 = r2[0]";
    "if $i3 == 3 goto r13 = r2[0]"->"$r12 = new java.lang.AssertionError";
    "if $i3 == 3 goto r13 = r2[0]"->"r13 = r2[0]";
    "$r12 = new java.lang.AssertionError"->"specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2 should have three type parameters\")";
    "specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2 should have three type parameters\")"->"throw $r12";
    "r13 = r2[0]"->"r14 = interfaceinvoke r13.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "r14 = interfaceinvoke r13.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i2 = lengthof r14";
    "if $z1 != 0 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i2 = lengthof r14"->"if $i2 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i2 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r11 = new java.lang.AssertionError";
    "if $i2 == 1 goto $z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r11 = new java.lang.AssertionError"->"specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T1 should have one bound\")";
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T1 should have one bound\")"->"throw $r11";
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z2 != 0 goto r15 = r2[1]";
    "if $z2 != 0 goto r15 = r2[1]"->"$r9 = r14[0]";
    "if $z2 != 0 goto r15 = r2[1]"->"r15 = r2[1]";
    "$r9 = r14[0]"->"$z8 = $r9 instanceof java.lang.reflect.ParameterizedType";
    "$z8 = $r9 instanceof java.lang.reflect.ParameterizedType"->"if $z8 != 0 goto r15 = r2[1]";
    "if $z8 != 0 goto r15 = r2[1]"->"$r10 = new java.lang.AssertionError";
    "if $z8 != 0 goto r15 = r2[1]"->"r15 = r2[1]";
    "$r10 = new java.lang.AssertionError"->"specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T1 should be a parameterized type\")";
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T1 should be a parameterized type\")"->"throw $r10";
    "r15 = r2[1]"->"r16 = interfaceinvoke r15.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "r16 = interfaceinvoke r15.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i1 = lengthof r16";
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i1 = lengthof r16"->"if $i1 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i1 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r8 = new java.lang.AssertionError";
    "if $i1 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r8 = new java.lang.AssertionError"->"specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")";
    "specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")"->"throw $r8";
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z4 != 0 goto r17 = r2[2]";
    "if $z4 != 0 goto r17 = r2[2]"->"$r6 = r16[0]";
    "if $z4 != 0 goto r17 = r2[2]"->"r17 = r2[2]";
    "$r6 = r16[0]"->"$z7 = $r6 instanceof java.lang.reflect.ParameterizedType";
    "$z7 = $r6 instanceof java.lang.reflect.ParameterizedType"->"if $z7 != 0 goto r17 = r2[2]";
    "if $z7 != 0 goto r17 = r2[2]"->"$r7 = new java.lang.AssertionError";
    "if $z7 != 0 goto r17 = r2[2]"->"r17 = r2[2]";
    "$r7 = new java.lang.AssertionError"->"specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be a parameterized type\")";
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be a parameterized type\")"->"throw $r7";
    "r17 = r2[2]"->"r18 = interfaceinvoke r17.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "r18 = interfaceinvoke r17.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i0 = lengthof r18";
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i0 = lengthof r18"->"if $i0 == 1 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i0 == 1 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r5 = new java.lang.AssertionError";
    "if $i0 == 1 goto $z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r5 = new java.lang.AssertionError"->"specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound\")";
    "specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound\")"->"throw $r5";
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z6 != 0 goto return";
    "if $z6 != 0 goto return"->"$r3 = r18[0]";
    "if $z6 != 0 goto return"->"return";
    "$r3 = r18[0]"->"if $r3 == class \"Ljava/lang/Throwable;\" goto return";
    "if $r3 == class \"Ljava/lang/Throwable;\" goto return"->"$r4 = new java.lang.AssertionError";
    "if $r3 == class \"Ljava/lang/Throwable;\" goto return"->"return";
    "$r4 = new java.lang.AssertionError"->"specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable\")";
    "specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable\")"->"throw $r4";
}
