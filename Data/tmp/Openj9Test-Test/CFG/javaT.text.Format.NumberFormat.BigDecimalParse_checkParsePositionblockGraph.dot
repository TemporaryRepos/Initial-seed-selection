digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: javaT.text.Format.NumberFormat.BigDecimalParse;
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 == i1 goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Parsing... wrong ParsePosition returned.\n   original: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   got:      \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   expected: \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Format.NumberFormat.BigDecimalParse: void errln(java.lang.String)>($r10);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: javaT.text.Format.NumberFormat.BigDecimalParse;
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 == i1 goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Parsing... wrong ParsePosition returned.\n   original: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   got:      \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   expected: \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Format.NumberFormat.BigDecimalParse: void errln(java.lang.String)>($r10);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: javaT.text.Format.NumberFormat.BigDecimalParse;
r3 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 == i1 goto return;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Parsing... wrong ParsePosition returned.\n   original: \");
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   got:      \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n   expected: \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Format.NumberFormat.BigDecimalParse: void errln(java.lang.String)>($r10);
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
}
