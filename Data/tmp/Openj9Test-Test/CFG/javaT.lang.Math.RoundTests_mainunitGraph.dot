digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "b4 = 0"
    "$i0 = staticinvoke <javaT.lang.Math.RoundTests: int testNearFloatHalfCases()>()"
    "i5 = b4 + $i0"
    "$i1 = staticinvoke <javaT.lang.Math.RoundTests: int testNearDoubleHalfCases()>()"
    "i6 = i5 + $i1"
    "$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testUnityULPCases()>()"
    "i7 = i6 + $i2"
    "$i3 = staticinvoke <javaT.lang.Math.RoundTests: int testSpecialCases()>()"
    "i8 = i7 + $i3"
    "if i8 <= 0 goto return"
    "$r1 = <java.lang.System: java.io.PrintStream err>"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing {Math, StrictMath}.round incurred \")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures.\")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5)"
    "$r6 = new java.lang.RuntimeException"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"
    "throw $r6"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"b4 = 0";
    "b4 = 0"->"$i0 = staticinvoke <javaT.lang.Math.RoundTests: int testNearFloatHalfCases()>()";
    "$i0 = staticinvoke <javaT.lang.Math.RoundTests: int testNearFloatHalfCases()>()"->"i5 = b4 + $i0";
    "i5 = b4 + $i0"->"$i1 = staticinvoke <javaT.lang.Math.RoundTests: int testNearDoubleHalfCases()>()";
    "$i1 = staticinvoke <javaT.lang.Math.RoundTests: int testNearDoubleHalfCases()>()"->"i6 = i5 + $i1";
    "i6 = i5 + $i1"->"$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testUnityULPCases()>()";
    "$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testUnityULPCases()>()"->"i7 = i6 + $i2";
    "i7 = i6 + $i2"->"$i3 = staticinvoke <javaT.lang.Math.RoundTests: int testSpecialCases()>()";
    "$i3 = staticinvoke <javaT.lang.Math.RoundTests: int testSpecialCases()>()"->"i8 = i7 + $i3";
    "i8 = i7 + $i3"->"if i8 <= 0 goto return";
    "if i8 <= 0 goto return"->"$r1 = <java.lang.System: java.io.PrintStream err>";
    "if i8 <= 0 goto return"->"return";
    "$r1 = <java.lang.System: java.io.PrintStream err>"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"->"$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing {Math, StrictMath}.round incurred \")";
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing {Math, StrictMath}.round incurred \")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures.\")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures.\")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5)";
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5)"->"$r6 = new java.lang.RuntimeException";
    "$r6 = new java.lang.RuntimeException"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"->"throw $r6";
}
