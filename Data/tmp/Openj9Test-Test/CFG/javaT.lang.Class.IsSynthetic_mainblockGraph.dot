digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r16 := @parameter0: java.lang.String[];
b9 = 0;
$r0 = new javaT.lang.Class.IsSynthetic$1;
specialinvoke $r0.<javaT.lang.Class.IsSynthetic$1: void <init>()>();
r1 = $r0;
$i0 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic;\", 0);
i10 = b9 + $i0;
$i1 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"Ljava/lang/String;\", 0);
i11 = i10 + $i1;
$i2 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic$1LocalClass;\", 0);
i12 = i11 + $i2;
$i3 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic$NestedClass;\", 0);
i13 = i12 + $i3;
$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
$i4 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>($r2, 0);
i14 = i13 + $i4;
$r3 = class \"LjavaT/lang/Class/Tricky;\";
r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
i5 = lengthof r4;
i15 = 0;
"
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i15 >= i5 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
r11 = r4[i15];
r12 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
$i6 = lengthof r12;
if $i6 <= 0 goto i15 = i15 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Testing class that should be synthetic.\");
r14 = r12;
i7 = lengthof r14;
i16 = 0;
"
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i16 >= i7 goto i15 = i15 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 4 ]
r15 = r14[i16];
$i8 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(r15, 1);
i14 = i14 + $i8;
i16 = i16 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 2 4 ] [succs: 1 ]
i15 = i15 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 1 ] [succs: 8 9 ]
if i14 == 0 goto return;
"
    "Block 8:
[preds: 7 ] [succs: ]
$r5 = new java.lang.RuntimeException;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test failed with \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures.\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);
throw $r5;
"
    "Block 9:
[preds: 7 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r16 := @parameter0: java.lang.String[];
b9 = 0;
$r0 = new javaT.lang.Class.IsSynthetic$1;
specialinvoke $r0.<javaT.lang.Class.IsSynthetic$1: void <init>()>();
r1 = $r0;
$i0 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic;\", 0);
i10 = b9 + $i0;
$i1 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"Ljava/lang/String;\", 0);
i11 = i10 + $i1;
$i2 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic$1LocalClass;\", 0);
i12 = i11 + $i2;
$i3 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(class \"LjavaT/lang/Class/IsSynthetic$NestedClass;\", 0);
i13 = i12 + $i3;
$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
$i4 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>($r2, 0);
i14 = i13 + $i4;
$r3 = class \"LjavaT/lang/Class/Tricky;\";
r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
i5 = lengthof r4;
i15 = 0;
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i15 >= i5 goto (branch);
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i15 >= i5 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 6 ]
r11 = r4[i15];
r12 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
$i6 = lengthof r12;
if $i6 <= 0 goto i15 = i15 + 1;
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i15 >= i5 goto (branch);
"->"Block 7:
[preds: 1 ] [succs: 8 9 ]
if i14 == 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
r11 = r4[i15];
r12 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
$i6 = lengthof r12;
if $i6 <= 0 goto i15 = i15 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Testing class that should be synthetic.\");
r14 = r12;
i7 = lengthof r14;
i16 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
r11 = r4[i15];
r12 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
$i6 = lengthof r12;
if $i6 <= 0 goto i15 = i15 + 1;
"->"Block 6:
[preds: 2 4 ] [succs: 1 ]
i15 = i15 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r13 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Testing class that should be synthetic.\");
r14 = r12;
i7 = lengthof r14;
i16 = 0;
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i16 >= i7 goto i15 = i15 + 1;
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i16 >= i7 goto i15 = i15 + 1;
"->"Block 5:
[preds: 4 ] [succs: 4 ]
r15 = r14[i16];
$i8 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(r15, 1);
i14 = i14 + $i8;
i16 = i16 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i16 >= i7 goto i15 = i15 + 1;
"->"Block 6:
[preds: 2 4 ] [succs: 1 ]
i15 = i15 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 4 ]
r15 = r14[i16];
$i8 = staticinvoke <javaT.lang.Class.IsSynthetic: int test(java.lang.Class,boolean)>(r15, 1);
i14 = i14 + $i8;
i16 = i16 + 1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i16 >= i7 goto i15 = i15 + 1;
";
    "Block 6:
[preds: 2 4 ] [succs: 1 ]
i15 = i15 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i15 >= i5 goto (branch);
";
    "Block 7:
[preds: 1 ] [succs: 8 9 ]
if i14 == 0 goto return;
"->"Block 8:
[preds: 7 ] [succs: ]
$r5 = new java.lang.RuntimeException;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test failed with \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures.\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);
throw $r5;
";
    "Block 7:
[preds: 1 ] [succs: 8 9 ]
if i14 == 0 goto return;
"->"Block 9:
[preds: 7 ] [succs: ]
return;
";
}
