digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
i12 = 0;
"
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i12 >= $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i12];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i13 = 0;
"
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i13 > i1 goto i19 = i1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1);
i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14);
if i15 == i1 goto $z2 = 0;
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r21 = new java.lang.StringBuilder];
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
"
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1);
$i9 = neg i14;
i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9);
i17 = i13;
if i13 <= 0 goto (branch);
"
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i13 >= i1 goto (branch);
"
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i11 = i13 + 1;
i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18);
if $z1 == 0 goto (branch);
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
i17 = i17 + -1;
"
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
"
    "Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r30 = new java.lang.StringBuilder];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
"
    "Block 14:
[preds: 12 13 ] [succs: 3 ]
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i10 = neg i14;
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17);
i13 = i13 + 1;
goto [?= (branch)];
"
    "Block 15:
[preds: 3 ] [succs: 16 ]
i19 = i1;
"
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19);
i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20);
i22 = i19;
if i19 <= 0 goto (branch);
"
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i19 >= i1 goto (branch);
"
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i8 = i19 - 1;
i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23);
if $z0 == 0 goto (branch);
"
    "Block 20:
[preds: 19 ] [succs: 21 ]
i22 = i22 + 1;
"
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
"
    "Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
"
    "Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
"
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22);
$i6 = neg i20;
i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6);
if i24 == 0 goto $z5 = 0;
"
    "Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
"
    "Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
"
    "Block 27:
[preds: 25 26 ] [succs: 16 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i20;
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0);
i19 = i19 + -1;
goto [?= (branch)];
"
    "Block 28:
[preds: 16 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i4 = i1 + 1;
$i5 = neg $i4;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\");
i12 = i12 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
"
    "Block 29:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
i12 = 0;
"->"Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i12 >= $i0 goto return;
";
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i12 >= $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i12];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i13 = 0;
";
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i12 >= $i0 goto return;
"->"Block 29:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
r2 = $r1[i12];
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);
r4 = $r3;
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i13 = 0;
"->"Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i13 > i1 goto i19 = i1;
";
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i13 > i1 goto i19 = i1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1);
i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14);
if i15 == i1 goto $z2 = 0;
";
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i13 > i1 goto i19 = i1;
"->"Block 15:
[preds: 3 ] [succs: 16 ]
i19 = i1;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1);
i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14);
if i15 == i1 goto $z2 = 0;
"->"Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r21 = new java.lang.StringBuilder];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1);
i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14);
if i15 == i1 goto $z2 = 0;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r21 = new java.lang.StringBuilder];
"->"Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1);
$i9 = neg i14;
i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9);
i17 = i13;
if i13 <= 0 goto (branch);
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
"->"Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1);
$i9 = neg i14;
i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9);
i17 = i13;
if i13 <= 0 goto (branch);
";
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1);
$i9 = neg i14;
i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9);
i17 = i13;
if i13 <= 0 goto (branch);
"->"Block 8:
[preds: 7 ] [succs: 9 11 ]
if i13 >= i1 goto (branch);
";
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1);
$i9 = neg i14;
i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9);
i17 = i13;
if i13 <= 0 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
";
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i13 >= i1 goto (branch);
"->"Block 9:
[preds: 8 ] [succs: 10 11 ]
$i11 = i13 + 1;
i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18);
if $z1 == 0 goto (branch);
";
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i13 >= i1 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i11 = i13 + 1;
i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18);
if $z1 == 0 goto (branch);
"->"Block 10:
[preds: 9 ] [succs: 11 ]
i17 = i17 + -1;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i11 = i13 + 1;
i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18);
if $z1 == 0 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
i17 = i17 + -1;
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
";
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
"->"Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r30 = new java.lang.StringBuilder];
";
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i16 == i17 goto $z3 = 0;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
";
    "Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r30 = new java.lang.StringBuilder];
"->"Block 14:
[preds: 12 13 ] [succs: 3 ]
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i10 = neg i14;
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17);
i13 = i13 + 1;
goto [?= (branch)];
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
"->"Block 14:
[preds: 12 13 ] [succs: 3 ]
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i10 = neg i14;
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17);
i13 = i13 + 1;
goto [?= (branch)];
";
    "Block 14:
[preds: 12 13 ] [succs: 3 ]
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i10 = neg i14;
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17);
i13 = i13 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i13 > i1 goto i19 = i1;
";
    "Block 15:
[preds: 3 ] [succs: 16 ]
i19 = i1;
"->"Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 17:
[preds: 16 ] [succs: 18 21 ]
i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19);
i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20);
i22 = i19;
if i19 <= 0 goto (branch);
";
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 28:
[preds: 16 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i4 = i1 + 1;
$i5 = neg $i4;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\");
i12 = i12 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
";
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19);
i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20);
i22 = i19;
if i19 <= 0 goto (branch);
"->"Block 18:
[preds: 17 ] [succs: 19 21 ]
if i19 >= i1 goto (branch);
";
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19);
i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20);
i22 = i19;
if i19 <= 0 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
";
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i19 >= i1 goto (branch);
"->"Block 19:
[preds: 18 ] [succs: 20 21 ]
$i8 = i19 - 1;
i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23);
if $z0 == 0 goto (branch);
";
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i19 >= i1 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i8 = i19 - 1;
i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23);
if $z0 == 0 goto (branch);
"->"Block 20:
[preds: 19 ] [succs: 21 ]
i22 = i22 + 1;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i8 = i19 - 1;
i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23);
if $z0 == 0 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
";
    "Block 20:
[preds: 19 ] [succs: 21 ]
i22 = i22 + 1;
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
";
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
"->"Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
";
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i21 == i22 goto $z4 = 0;
"->"Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
";
    "Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r5 = new java.lang.StringBuilder];
"->"Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22);
$i6 = neg i20;
i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6);
if i24 == 0 goto $z5 = 0;
";
    "Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
"->"Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22);
$i6 = neg i20;
i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6);
if i24 == 0 goto $z5 = 0;
";
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22);
$i6 = neg i20;
i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6);
if i24 == 0 goto $z5 = 0;
"->"Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
";
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22);
$i6 = neg i20;
i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6);
if i24 == 0 goto $z5 = 0;
"->"Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
";
    "Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r12 = new java.lang.StringBuilder];
"->"Block 27:
[preds: 25 26 ] [succs: 16 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i20;
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0);
i19 = i19 + -1;
goto [?= (branch)];
";
    "Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
"->"Block 27:
[preds: 25 26 ] [succs: 16 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i20;
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0);
i19 = i19 + -1;
goto [?= (branch)];
";
    "Block 27:
[preds: 25 26 ] [succs: 16 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i20;
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0);
i19 = i19 + -1;
goto [?= (branch)];
"->"Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 28:
[preds: 16 ] [succs: 1 ]
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i4 = i1 + 1;
$i5 = neg $i4;
staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\");
i12 = i12 + 1;
goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>];
"->"Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i12 >= $i0 goto return;
";
}
