digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.util.Base64$Encoder;
$r1 = \"fo\";
$r0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0);
$r3 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.encodeToString test  \");
r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r2);
$r7 = <java.lang.System: java.io.PrintStream err>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Base64 encoded string is \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);
$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r11 = new java.lang.RuntimeException;
specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after Encoder.encodeToString invoked ... \n\");
throw $r11;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.util.Base64$Encoder;
$r1 = \"fo\";
$r0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0);
$r3 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.encodeToString test  \");
r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r2);
$r7 = <java.lang.System: java.io.PrintStream err>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Base64 encoded string is \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);
$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r11 = new java.lang.RuntimeException;
specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after Encoder.encodeToString invoked ... \n\");
throw $r11;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r4 := @parameter0: java.util.Base64$Encoder;
$r1 = \"fo\";
$r0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0);
$r3 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.encodeToString test  \");
r5 = virtualinvoke r4.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r2);
$r7 = <java.lang.System: java.io.PrintStream err>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Base64 encoded string is \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);
$z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
