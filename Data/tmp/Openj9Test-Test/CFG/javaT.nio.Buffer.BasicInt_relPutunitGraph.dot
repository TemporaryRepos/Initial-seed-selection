digraph "unitGraph" {
    "r0 := @parameter0: java.nio.IntBuffer"
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer clear()>()"
    "i3 = 0"
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()"
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i3)"
    "$i2 = (int) $l1"
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i2)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()"
    "return"
    "r0 := @parameter0: java.nio.IntBuffer"->"i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"->"virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer clear()>()";
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer clear()>()"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()";
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()"->"$l1 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i3)";
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()"->"virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()";
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i3)"->"$i2 = (int) $l1";
    "$i2 = (int) $l1"->"virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i2)";
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i2)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()";
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>()"->"return";
}
