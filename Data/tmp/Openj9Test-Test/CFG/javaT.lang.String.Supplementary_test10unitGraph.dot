digraph "unitGraph" {
    "r0 = \"H\ud800e\udfffa\udbff\udc00der<\""
    "i9 = 0"
    "$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "$i0 = lengthof $r1"
    "if i9 >= $i0 goto return"
    "$r2 = new java.lang.StringBuilder"
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"
    "$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "$r5 = $r4[i9]"
    "$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"
    "r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$i1 = virtualinvoke r0.<java.lang.String: int length()>()"
    "r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1)"
    "i2 = virtualinvoke r8.<java.lang.String: int length()>()"
    "i10 = 0"
    "if i10 > i2 goto i16 = i2"
    "i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2)"
    "i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11)"
    "if i12 == i2 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= $r25 = new java.lang.StringBuilder]"
    "$z2 = 0"
    "$r25 = new java.lang.StringBuilder"
    "specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2)"
    "$i6 = neg i11"
    "i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6)"
    "i14 = i10"
    "if i10 <= 0 goto (branch)"
    "if i10 >= i2 goto (branch)"
    "$i8 = i10 + 1"
    "i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8)"
    "$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15)"
    "if $z1 == 0 goto (branch)"
    "i14 = i14 + -1"
    "if i13 == i14 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= $r34 = new java.lang.StringBuilder]"
    "$z3 = 0"
    "$r34 = new java.lang.StringBuilder"
    "specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()"
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$i7 = neg i11"
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14)"
    "i10 = i10 + 1"
    "goto [?= (branch)]"
    "i16 = i2"
    "if i16 < 0 goto i9 = i9 + 1"
    "i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16)"
    "i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17)"
    "i19 = i16"
    "if i16 <= 0 goto (branch)"
    "if i16 >= i2 goto (branch)"
    "$i5 = i16 - 1"
    "i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5)"
    "$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20)"
    "if $z0 == 0 goto (branch)"
    "i19 = i19 + 1"
    "if i18 == i19 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= $r9 = new java.lang.StringBuilder]"
    "$z4 = 0"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19)"
    "$i3 = neg i17"
    "i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3)"
    "if i21 == 0 goto $z5 = 0"
    "$z5 = 1"
    "goto [?= $r16 = new java.lang.StringBuilder]"
    "$z5 = 0"
    "$r16 = new java.lang.StringBuilder"
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$i4 = neg i17"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0)"
    "i16 = i16 + -1"
    "i9 = i9 + 1"
    "goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"
    "return"
    "r0 = \"H\ud800e\udfffa\udbff\udc00der<\""->"i9 = 0";
    "i9 = 0"->"$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"$i0 = lengthof $r1";
    "$i0 = lengthof $r1"->"if i9 >= $i0 goto return";
    "if i9 >= $i0 goto return"->"$r2 = new java.lang.StringBuilder";
    "if i9 >= $i0 goto return"->"return";
    "$r2 = new java.lang.StringBuilder"->"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"->"$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"$r5 = $r4[i9]";
    "$r5 = $r4[i9]"->"$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)";
    "$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"->"r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"$i1 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i1 = virtualinvoke r0.<java.lang.String: int length()>()"->"r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1)";
    "r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1)"->"i2 = virtualinvoke r8.<java.lang.String: int length()>()";
    "i2 = virtualinvoke r8.<java.lang.String: int length()>()"->"i10 = 0";
    "i10 = 0"->"if i10 > i2 goto i16 = i2";
    "if i10 > i2 goto i16 = i2"->"i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2)";
    "if i10 > i2 goto i16 = i2"->"i16 = i2";
    "i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2)"->"i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11)";
    "i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11)"->"if i12 == i2 goto $z2 = 0";
    "if i12 == i2 goto $z2 = 0"->"$z2 = 1";
    "if i12 == i2 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= $r25 = new java.lang.StringBuilder]";
    "goto [?= $r25 = new java.lang.StringBuilder]"->"$r25 = new java.lang.StringBuilder";
    "$z2 = 0"->"$r25 = new java.lang.StringBuilder";
    "$r25 = new java.lang.StringBuilder"->"specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"->"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)";
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2)"->"$i6 = neg i11";
    "$i6 = neg i11"->"i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6)";
    "i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6)"->"i14 = i10";
    "i14 = i10"->"if i10 <= 0 goto (branch)";
    "if i10 <= 0 goto (branch)"->"if i10 >= i2 goto (branch)";
    "if i10 <= 0 goto (branch)"->"if i13 == i14 goto $z3 = 0";
    "if i10 >= i2 goto (branch)"->"$i8 = i10 + 1";
    "if i10 >= i2 goto (branch)"->"if i13 == i14 goto $z3 = 0";
    "$i8 = i10 + 1"->"i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8)";
    "i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8)"->"$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15)";
    "$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15)"->"if $z1 == 0 goto (branch)";
    "if $z1 == 0 goto (branch)"->"i14 = i14 + -1";
    "if $z1 == 0 goto (branch)"->"if i13 == i14 goto $z3 = 0";
    "i14 = i14 + -1"->"if i13 == i14 goto $z3 = 0";
    "if i13 == i14 goto $z3 = 0"->"$z3 = 1";
    "if i13 == i14 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= $r34 = new java.lang.StringBuilder]";
    "goto [?= $r34 = new java.lang.StringBuilder]"->"$r34 = new java.lang.StringBuilder";
    "$z3 = 0"->"$r34 = new java.lang.StringBuilder";
    "$r34 = new java.lang.StringBuilder"->"specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()"->"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)";
    "$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$i7 = neg i11";
    "$i7 = neg i11"->"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)";
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"->"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14)"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 > i2 goto i16 = i2";
    "i16 = i2"->"if i16 < 0 goto i9 = i9 + 1";
    "if i16 < 0 goto i9 = i9 + 1"->"i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16)";
    "if i16 < 0 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16)"->"i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17)";
    "i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17)"->"i19 = i16";
    "i19 = i16"->"if i16 <= 0 goto (branch)";
    "if i16 <= 0 goto (branch)"->"if i16 >= i2 goto (branch)";
    "if i16 <= 0 goto (branch)"->"if i18 == i19 goto $z4 = 0";
    "if i16 >= i2 goto (branch)"->"$i5 = i16 - 1";
    "if i16 >= i2 goto (branch)"->"if i18 == i19 goto $z4 = 0";
    "$i5 = i16 - 1"->"i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5)";
    "i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5)"->"$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20)";
    "$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20)"->"if $z0 == 0 goto (branch)";
    "if $z0 == 0 goto (branch)"->"i19 = i19 + 1";
    "if $z0 == 0 goto (branch)"->"if i18 == i19 goto $z4 = 0";
    "i19 = i19 + 1"->"if i18 == i19 goto $z4 = 0";
    "if i18 == i19 goto $z4 = 0"->"$z4 = 1";
    "if i18 == i19 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= $r9 = new java.lang.StringBuilder]";
    "goto [?= $r9 = new java.lang.StringBuilder]"->"$r9 = new java.lang.StringBuilder";
    "$z4 = 0"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17)"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19)"->"$i3 = neg i17";
    "$i3 = neg i17"->"i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3)";
    "i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3)"->"if i21 == 0 goto $z5 = 0";
    "if i21 == 0 goto $z5 = 0"->"$z5 = 1";
    "if i21 == 0 goto $z5 = 0"->"$z5 = 0";
    "$z5 = 1"->"goto [?= $r16 = new java.lang.StringBuilder]";
    "goto [?= $r16 = new java.lang.StringBuilder]"->"$r16 = new java.lang.StringBuilder";
    "$z5 = 0"->"$r16 = new java.lang.StringBuilder";
    "$r16 = new java.lang.StringBuilder"->"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16)";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$i4 = neg i17";
    "$i4 = neg i17"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0)"->"i16 = i16 + -1";
    "i16 = i16 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i16 < 0 goto i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>]";
    "goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"->"$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
}
