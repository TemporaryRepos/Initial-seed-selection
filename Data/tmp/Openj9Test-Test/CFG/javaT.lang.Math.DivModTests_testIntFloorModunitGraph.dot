digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "r1 := @parameter2: java.lang.Object"
    "r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(int,int)>(i0, i1)"
    "$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1)"
    "if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)"
    "$r12 = newarray (java.lang.Object)[4]"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "$r12[0] = $r13"
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r12[1] = $r14"
    "$r12[2] = r0"
    "$r12[3] = r1"
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s; expected %s%n\", $r12)"
    "r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)"
    "$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1)"
    "if $z1 != 0 goto i4 = i0 / i1"
    "$r9 = newarray (java.lang.Object)[4]"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "$r9[0] = $r10"
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r9[1] = $r11"
    "$r9[2] = r2"
    "$r9[3] = r1"
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r9)"
    "i4 = i0 / i1"
    "$d3 = (double) i0"
    "$d1 = (double) i0"
    "$d0 = (double) i1"
    "$d2 = $d1 / $d0"
    "$d4 = staticinvoke <java.lang.Math: double floor(double)>($d2)"
    "$d5 = (double) i1"
    "$d6 = $d4 * $d5"
    "d7 = $d3 - $d6"
    "i2 = (int) d7"
    "$r3 = (java.lang.Integer) r0"
    "$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()"
    "if i2 != $i3 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= z2 = $z4]"
    "$z4 = 0"
    "z2 = $z4"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4)"
    "if $z3 != 0 goto (branch)"
    "$r5 = newarray (java.lang.Object)[4]"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "$r5[0] = $r6"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r5[1] = $r7"
    "$r5[2] = r0"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$r5[3] = $r8"
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s differs from Math.floor(x, y): %d%n\", $r5)"
    "goto [?= return]"
    "$r15 := @caughtexception"
    "r19 = $r15"
    "if i1 == 0 goto return"
    "$r16 = newarray (java.lang.Object)[3]"
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "$r16[0] = $r17"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r16[1] = $r18"
    "$r16[2] = r19"
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d); unexpected %s%n\", $r16)"
    "return"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"r1 := @parameter2: java.lang.Object";
    "r1 := @parameter2: java.lang.Object"->"r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(int,int)>(i0, i1)";
    "r0 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doFloorMod(int,int)>(i0, i1)"->"$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1)";
    "$z0 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r0, r1)"->"if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)";
    "if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)"->"$r12 = newarray (java.lang.Object)[4]";
    "if $z0 != 0 goto r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)"->"r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)";
    "$r12 = newarray (java.lang.Object)[4]"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r12[0] = $r13";
    "$r12[0] = $r13"->"$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r12[1] = $r14";
    "$r12[1] = $r14"->"$r12[2] = r0";
    "$r12[2] = r0"->"$r12[3] = r1";
    "$r12[3] = r1"->"staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s; expected %s%n\", $r12)";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s; expected %s%n\", $r12)"->"r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)";
    "r2 = staticinvoke <javaT.lang.Math.DivModTests: java.lang.Object doStrictFloorMod(int,int)>(i0, i1)"->"$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1)";
    "$z1 = staticinvoke <javaT.lang.Math.DivModTests: boolean resultEquals(java.lang.Object,java.lang.Object)>(r2, r1)"->"if $z1 != 0 goto i4 = i0 / i1";
    "if $z1 != 0 goto i4 = i0 / i1"->"$r9 = newarray (java.lang.Object)[4]";
    "if $z1 != 0 goto i4 = i0 / i1"->"i4 = i0 / i1";
    "if $z1 != 0 goto i4 = i0 / i1"->"$r15 := @caughtexception";
    "$r9 = newarray (java.lang.Object)[4]"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r9[0] = $r10";
    "$r9[0] = $r10"->"$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r9[1] = $r11";
    "$r9[1] = $r11"->"$r9[2] = r2";
    "$r9[2] = r2"->"$r9[3] = r1";
    "$r9[3] = r1"->"staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r9)";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r9)"->"i4 = i0 / i1";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: StrictMath.floorMod(%d, %d) = %s; expected %s%n\", $r9)"->"$r15 := @caughtexception";
    "i4 = i0 / i1"->"$d3 = (double) i0";
    "i4 = i0 / i1"->"$r15 := @caughtexception";
    "$d3 = (double) i0"->"$d1 = (double) i0";
    "$d3 = (double) i0"->"$r15 := @caughtexception";
    "$d1 = (double) i0"->"$d0 = (double) i1";
    "$d1 = (double) i0"->"$r15 := @caughtexception";
    "$d0 = (double) i1"->"$d2 = $d1 / $d0";
    "$d0 = (double) i1"->"$r15 := @caughtexception";
    "$d2 = $d1 / $d0"->"$d4 = staticinvoke <java.lang.Math: double floor(double)>($d2)";
    "$d2 = $d1 / $d0"->"$r15 := @caughtexception";
    "$d4 = staticinvoke <java.lang.Math: double floor(double)>($d2)"->"$d5 = (double) i1";
    "$d4 = staticinvoke <java.lang.Math: double floor(double)>($d2)"->"$r15 := @caughtexception";
    "$d5 = (double) i1"->"$d6 = $d4 * $d5";
    "$d5 = (double) i1"->"$r15 := @caughtexception";
    "$d6 = $d4 * $d5"->"d7 = $d3 - $d6";
    "$d6 = $d4 * $d5"->"$r15 := @caughtexception";
    "d7 = $d3 - $d6"->"i2 = (int) d7";
    "d7 = $d3 - $d6"->"$r15 := @caughtexception";
    "i2 = (int) d7"->"$r3 = (java.lang.Integer) r0";
    "i2 = (int) d7"->"$r15 := @caughtexception";
    "$r3 = (java.lang.Integer) r0"->"$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()";
    "$r3 = (java.lang.Integer) r0"->"$r15 := @caughtexception";
    "$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()"->"if i2 != $i3 goto $z4 = 0";
    "$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()"->"$r15 := @caughtexception";
    "if i2 != $i3 goto $z4 = 0"->"$z4 = 1";
    "if i2 != $i3 goto $z4 = 0"->"$z4 = 0";
    "if i2 != $i3 goto $z4 = 0"->"$r15 := @caughtexception";
    "$z4 = 1"->"goto [?= z2 = $z4]";
    "$z4 = 1"->"$r15 := @caughtexception";
    "goto [?= z2 = $z4]"->"z2 = $z4";
    "goto [?= z2 = $z4]"->"$r15 := @caughtexception";
    "$z4 = 0"->"z2 = $z4";
    "$z4 = 0"->"$r15 := @caughtexception";
    "z2 = $z4"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "z2 = $z4"->"$r15 := @caughtexception";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r15 := @caughtexception";
    "$z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4)"->"if $z3 != 0 goto (branch)";
    "$z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4)"->"$r15 := @caughtexception";
    "if $z3 != 0 goto (branch)"->"$r5 = newarray (java.lang.Object)[4]";
    "if $z3 != 0 goto (branch)"->"goto [?= return]";
    "if $z3 != 0 goto (branch)"->"$r15 := @caughtexception";
    "$r5 = newarray (java.lang.Object)[4]"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r5 = newarray (java.lang.Object)[4]"->"$r15 := @caughtexception";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r5[0] = $r6";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r15 := @caughtexception";
    "$r5[0] = $r6"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r5[0] = $r6"->"$r15 := @caughtexception";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r5[1] = $r7";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r15 := @caughtexception";
    "$r5[1] = $r7"->"$r5[2] = r0";
    "$r5[1] = $r7"->"$r15 := @caughtexception";
    "$r5[2] = r0"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "$r5[2] = r0"->"$r15 := @caughtexception";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r5[3] = $r8";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r15 := @caughtexception";
    "$r5[3] = $r8"->"staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s differs from Math.floor(x, y): %d%n\", $r5)";
    "$r5[3] = $r8"->"$r15 := @caughtexception";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s differs from Math.floor(x, y): %d%n\", $r5)"->"goto [?= return]";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d) = %s differs from Math.floor(x, y): %d%n\", $r5)"->"$r15 := @caughtexception";
    "goto [?= return]"->"return";
    "$r15 := @caughtexception"->"r19 = $r15";
    "r19 = $r15"->"if i1 == 0 goto return";
    "if i1 == 0 goto return"->"$r16 = newarray (java.lang.Object)[3]";
    "if i1 == 0 goto return"->"return";
    "$r16 = newarray (java.lang.Object)[3]"->"$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r16[0] = $r17";
    "$r16[0] = $r17"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r16[1] = $r18";
    "$r16[1] = $r18"->"$r16[2] = r19";
    "$r16[2] = r19"->"staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d); unexpected %s%n\", $r16)";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Math.floorMod(%d, %d); unexpected %s%n\", $r16)"->"return";
}
