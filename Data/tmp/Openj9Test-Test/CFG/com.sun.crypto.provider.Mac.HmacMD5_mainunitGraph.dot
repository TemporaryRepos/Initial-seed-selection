digraph "unitGraph" {
    "r46 := @parameter0: java.lang.String[]"
    "$r51 = new com.sun.crypto.provider.SunJCE"
    "specialinvoke $r51.<com.sun.crypto.provider.SunJCE: void <init>()>()"
    "r1 = $r51"
    "$r58 = (java.security.Provider) r1"
    "staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r58)"
    "$r2 = newarray (byte[][])[3]"
    "$r3 = newarray (byte[])[3]"
    "$r4 = newarray (byte)[16]"
    "$r4[0] = 11"
    "$r4[1] = 11"
    "$r4[2] = 11"
    "$r4[3] = 11"
    "$r4[4] = 11"
    "$r4[5] = 11"
    "$r4[6] = 11"
    "$r4[7] = 11"
    "$r4[8] = 11"
    "$r4[9] = 11"
    "$r4[10] = 11"
    "$r4[11] = 11"
    "$r4[12] = 11"
    "$r4[13] = 11"
    "$r4[14] = 11"
    "$r4[15] = 11"
    "$r3[0] = $r4"
    "$r5 = \"Hi There\""
    "$r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>()"
    "$r3[1] = $r6"
    "$r7 = newarray (byte)[16]"
    "$r7[0] = -110"
    "$r7[1] = -108"
    "$r7[2] = 114"
    "$r7[3] = 122"
    "$r7[4] = 54"
    "$r7[5] = 56"
    "$r7[6] = -69"
    "$r7[7] = 28"
    "$r7[8] = 19"
    "$r7[9] = -12"
    "$r7[10] = -114"
    "$r7[11] = -8"
    "$r7[12] = 21"
    "$r7[13] = -117"
    "$r7[14] = -4"
    "$r7[15] = -99"
    "$r3[2] = $r7"
    "$r2[0] = $r3"
    "$r8 = newarray (byte[])[3]"
    "$r9 = \"Jefe\""
    "$r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>()"
    "$r8[0] = $r10"
    "$r11 = \"what do ya want for nothing?\""
    "$r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>()"
    "$r8[1] = $r12"
    "$r13 = newarray (byte)[16]"
    "$r13[0] = 117"
    "$r13[1] = 12"
    "$r13[2] = 120"
    "$r13[3] = 62"
    "$r13[4] = 106"
    "$r13[5] = -80"
    "$r13[6] = -75"
    "$r13[7] = 3"
    "$r13[8] = -22"
    "$r13[9] = -88"
    "$r13[10] = 110"
    "$r13[11] = 49"
    "$r13[12] = 10"
    "$r13[13] = 93"
    "$r13[14] = -73"
    "$r13[15] = 56"
    "$r8[2] = $r13"
    "$r2[1] = $r8"
    "$r14 = newarray (byte[])[3]"
    "$r15 = newarray (byte)[16]"
    "$r15[0] = -86"
    "$r15[1] = -86"
    "$r15[2] = -86"
    "$r15[3] = -86"
    "$r15[4] = -86"
    "$r15[5] = -86"
    "$r15[6] = -86"
    "$r15[7] = -86"
    "$r15[8] = -86"
    "$r15[9] = -86"
    "$r15[10] = -86"
    "$r15[11] = -86"
    "$r15[12] = -86"
    "$r15[13] = -86"
    "$r15[14] = -86"
    "$r15[15] = -86"
    "$r14[0] = $r15"
    "$r16 = newarray (byte)[50]"
    "$r16[0] = -35"
    "$r16[1] = -35"
    "$r16[2] = -35"
    "$r16[3] = -35"
    "$r16[4] = -35"
    "$r16[5] = -35"
    "$r16[6] = -35"
    "$r16[7] = -35"
    "$r16[8] = -35"
    "$r16[9] = -35"
    "$r16[10] = -35"
    "$r16[11] = -35"
    "$r16[12] = -35"
    "$r16[13] = -35"
    "$r16[14] = -35"
    "$r16[15] = -35"
    "$r16[16] = -35"
    "$r16[17] = -35"
    "$r16[18] = -35"
    "$r16[19] = -35"
    "$r16[20] = -35"
    "$r16[21] = -35"
    "$r16[22] = -35"
    "$r16[23] = -35"
    "$r16[24] = -35"
    "$r16[25] = -35"
    "$r16[26] = -35"
    "$r16[27] = -35"
    "$r16[28] = -35"
    "$r16[29] = -35"
    "$r16[30] = -35"
    "$r16[31] = -35"
    "$r16[32] = -35"
    "$r16[33] = -35"
    "$r16[34] = -35"
    "$r16[35] = -35"
    "$r16[36] = -35"
    "$r16[37] = -35"
    "$r16[38] = -35"
    "$r16[39] = -35"
    "$r16[40] = -35"
    "$r16[41] = -35"
    "$r16[42] = -35"
    "$r16[43] = -35"
    "$r16[44] = -35"
    "$r16[45] = -35"
    "$r16[46] = -35"
    "$r16[47] = -35"
    "$r16[48] = -35"
    "$r16[49] = -35"
    "$r14[1] = $r16"
    "$r17 = newarray (byte)[16]"
    "$r17[0] = 86"
    "$r17[1] = -66"
    "$r17[2] = 52"
    "$r17[3] = 82"
    "$r17[4] = 29"
    "$r17[5] = 20"
    "$r17[6] = 76"
    "$r17[7] = -120"
    "$r17[8] = -37"
    "$r17[9] = -72"
    "$r17[10] = -57"
    "$r17[11] = 51"
    "$r17[12] = -16"
    "$r17[13] = -24"
    "$r17[14] = -77"
    "$r17[15] = -10"
    "$r14[2] = $r17"
    "$r2[2] = $r14"
    "r18 = $r2"
    "r47 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"
    "i11 = 0"
    "if i11 >= 3 goto r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"
    "b12 = 0"
    "$r52 = new javax.crypto.spec.SecretKeySpec"
    "$r36 = r18[i11]"
    "i13 = b12 + 1"
    "$r37 = $r36[b12]"
    "specialinvoke $r52.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r37, \"HMAC\")"
    "$r59 = (java.security.Key) $r52"
    "virtualinvoke r47.<javax.crypto.Mac: void init(java.security.Key)>($r59)"
    "$r38 = r18[i11]"
    "i14 = i13 + 1"
    "$r39 = $r38[i13]"
    "r48 = virtualinvoke r47.<javax.crypto.Mac: byte[] doFinal(byte[])>($r39)"
    "$i7 = lengthof r48"
    "$r40 = r18[i11]"
    "$r41 = $r40[i14]"
    "$i6 = lengthof $r41"
    "if $i7 == $i6 goto i15 = 0"
    "$r53 = new java.lang.Exception"
    "specialinvoke $r53.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")"
    "throw $r53"
    "i15 = 0"
    "$i8 = lengthof r48"
    "if i15 >= $i8 goto i11 = i11 + 1"
    "$b10 = r48[i15]"
    "$r42 = r18[i11]"
    "$r43 = $r42[i14]"
    "$b9 = $r43[i15]"
    "if $b10 == $b9 goto i15 = i15 + 1"
    "$r54 = new java.lang.Exception"
    "specialinvoke $r54.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")"
    "throw $r54"
    "i15 = i15 + 1"
    "goto [?= $i8 = lengthof r48]"
    "i11 = i11 + 1"
    "goto [?= (branch)]"
    "r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"
    "$r55 = new javax.crypto.spec.SecretKeySpec"
    "$r20 = \"Jefe\""
    "$r21 = virtualinvoke $r20.<java.lang.String: byte[] getBytes()>()"
    "specialinvoke $r55.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r21, \"HMAC\")"
    "$r60 = (java.security.Key) $r55"
    "virtualinvoke r49.<javax.crypto.Mac: void init(java.security.Key)>($r60)"
    "$r22 = \"what do ya \""
    "$r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes()>()"
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r23)"
    "$r24 = \"want for \""
    "$r25 = virtualinvoke $r24.<java.lang.String: byte[] getBytes()>()"
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r25)"
    "$r26 = \"nothing?\""
    "$r27 = virtualinvoke $r26.<java.lang.String: byte[] getBytes()>()"
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r27)"
    "r50 = virtualinvoke r49.<javax.crypto.Mac: byte[] doFinal()>()"
    "$i2 = lengthof r50"
    "$r28 = r18[1]"
    "$r29 = $r28[2]"
    "$i1 = lengthof $r29"
    "if $i2 == $i1 goto i16 = 0"
    "$r56 = new java.lang.Exception"
    "specialinvoke $r56.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")"
    "throw $r56"
    "i16 = 0"
    "$i3 = lengthof r50"
    "if i16 >= $i3 goto $r30 = <java.lang.System: java.io.PrintStream out>"
    "$b5 = r50[i16]"
    "$r31 = r18[1]"
    "$r32 = $r31[2]"
    "$b4 = $r32[i16]"
    "if $b5 == $b4 goto i16 = i16 + 1"
    "$r57 = new java.lang.Exception"
    "specialinvoke $r57.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")"
    "throw $r57"
    "i16 = i16 + 1"
    "goto [?= $i3 = lengthof r50]"
    "$r30 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"Test SUCCEEDED\")"
    "return"
    "r46 := @parameter0: java.lang.String[]"->"$r51 = new com.sun.crypto.provider.SunJCE";
    "$r51 = new com.sun.crypto.provider.SunJCE"->"specialinvoke $r51.<com.sun.crypto.provider.SunJCE: void <init>()>()";
    "specialinvoke $r51.<com.sun.crypto.provider.SunJCE: void <init>()>()"->"r1 = $r51";
    "r1 = $r51"->"$r58 = (java.security.Provider) r1";
    "$r58 = (java.security.Provider) r1"->"staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r58)";
    "staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r58)"->"$r2 = newarray (byte[][])[3]";
    "$r2 = newarray (byte[][])[3]"->"$r3 = newarray (byte[])[3]";
    "$r3 = newarray (byte[])[3]"->"$r4 = newarray (byte)[16]";
    "$r4 = newarray (byte)[16]"->"$r4[0] = 11";
    "$r4[0] = 11"->"$r4[1] = 11";
    "$r4[1] = 11"->"$r4[2] = 11";
    "$r4[2] = 11"->"$r4[3] = 11";
    "$r4[3] = 11"->"$r4[4] = 11";
    "$r4[4] = 11"->"$r4[5] = 11";
    "$r4[5] = 11"->"$r4[6] = 11";
    "$r4[6] = 11"->"$r4[7] = 11";
    "$r4[7] = 11"->"$r4[8] = 11";
    "$r4[8] = 11"->"$r4[9] = 11";
    "$r4[9] = 11"->"$r4[10] = 11";
    "$r4[10] = 11"->"$r4[11] = 11";
    "$r4[11] = 11"->"$r4[12] = 11";
    "$r4[12] = 11"->"$r4[13] = 11";
    "$r4[13] = 11"->"$r4[14] = 11";
    "$r4[14] = 11"->"$r4[15] = 11";
    "$r4[15] = 11"->"$r3[0] = $r4";
    "$r3[0] = $r4"->"$r5 = \"Hi There\"";
    "$r5 = \"Hi There\""->"$r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>()";
    "$r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>()"->"$r3[1] = $r6";
    "$r3[1] = $r6"->"$r7 = newarray (byte)[16]";
    "$r7 = newarray (byte)[16]"->"$r7[0] = -110";
    "$r7[0] = -110"->"$r7[1] = -108";
    "$r7[1] = -108"->"$r7[2] = 114";
    "$r7[2] = 114"->"$r7[3] = 122";
    "$r7[3] = 122"->"$r7[4] = 54";
    "$r7[4] = 54"->"$r7[5] = 56";
    "$r7[5] = 56"->"$r7[6] = -69";
    "$r7[6] = -69"->"$r7[7] = 28";
    "$r7[7] = 28"->"$r7[8] = 19";
    "$r7[8] = 19"->"$r7[9] = -12";
    "$r7[9] = -12"->"$r7[10] = -114";
    "$r7[10] = -114"->"$r7[11] = -8";
    "$r7[11] = -8"->"$r7[12] = 21";
    "$r7[12] = 21"->"$r7[13] = -117";
    "$r7[13] = -117"->"$r7[14] = -4";
    "$r7[14] = -4"->"$r7[15] = -99";
    "$r7[15] = -99"->"$r3[2] = $r7";
    "$r3[2] = $r7"->"$r2[0] = $r3";
    "$r2[0] = $r3"->"$r8 = newarray (byte[])[3]";
    "$r8 = newarray (byte[])[3]"->"$r9 = \"Jefe\"";
    "$r9 = \"Jefe\""->"$r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>()";
    "$r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>()"->"$r8[0] = $r10";
    "$r8[0] = $r10"->"$r11 = \"what do ya want for nothing?\"";
    "$r11 = \"what do ya want for nothing?\""->"$r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>()";
    "$r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>()"->"$r8[1] = $r12";
    "$r8[1] = $r12"->"$r13 = newarray (byte)[16]";
    "$r13 = newarray (byte)[16]"->"$r13[0] = 117";
    "$r13[0] = 117"->"$r13[1] = 12";
    "$r13[1] = 12"->"$r13[2] = 120";
    "$r13[2] = 120"->"$r13[3] = 62";
    "$r13[3] = 62"->"$r13[4] = 106";
    "$r13[4] = 106"->"$r13[5] = -80";
    "$r13[5] = -80"->"$r13[6] = -75";
    "$r13[6] = -75"->"$r13[7] = 3";
    "$r13[7] = 3"->"$r13[8] = -22";
    "$r13[8] = -22"->"$r13[9] = -88";
    "$r13[9] = -88"->"$r13[10] = 110";
    "$r13[10] = 110"->"$r13[11] = 49";
    "$r13[11] = 49"->"$r13[12] = 10";
    "$r13[12] = 10"->"$r13[13] = 93";
    "$r13[13] = 93"->"$r13[14] = -73";
    "$r13[14] = -73"->"$r13[15] = 56";
    "$r13[15] = 56"->"$r8[2] = $r13";
    "$r8[2] = $r13"->"$r2[1] = $r8";
    "$r2[1] = $r8"->"$r14 = newarray (byte[])[3]";
    "$r14 = newarray (byte[])[3]"->"$r15 = newarray (byte)[16]";
    "$r15 = newarray (byte)[16]"->"$r15[0] = -86";
    "$r15[0] = -86"->"$r15[1] = -86";
    "$r15[1] = -86"->"$r15[2] = -86";
    "$r15[2] = -86"->"$r15[3] = -86";
    "$r15[3] = -86"->"$r15[4] = -86";
    "$r15[4] = -86"->"$r15[5] = -86";
    "$r15[5] = -86"->"$r15[6] = -86";
    "$r15[6] = -86"->"$r15[7] = -86";
    "$r15[7] = -86"->"$r15[8] = -86";
    "$r15[8] = -86"->"$r15[9] = -86";
    "$r15[9] = -86"->"$r15[10] = -86";
    "$r15[10] = -86"->"$r15[11] = -86";
    "$r15[11] = -86"->"$r15[12] = -86";
    "$r15[12] = -86"->"$r15[13] = -86";
    "$r15[13] = -86"->"$r15[14] = -86";
    "$r15[14] = -86"->"$r15[15] = -86";
    "$r15[15] = -86"->"$r14[0] = $r15";
    "$r14[0] = $r15"->"$r16 = newarray (byte)[50]";
    "$r16 = newarray (byte)[50]"->"$r16[0] = -35";
    "$r16[0] = -35"->"$r16[1] = -35";
    "$r16[1] = -35"->"$r16[2] = -35";
    "$r16[2] = -35"->"$r16[3] = -35";
    "$r16[3] = -35"->"$r16[4] = -35";
    "$r16[4] = -35"->"$r16[5] = -35";
    "$r16[5] = -35"->"$r16[6] = -35";
    "$r16[6] = -35"->"$r16[7] = -35";
    "$r16[7] = -35"->"$r16[8] = -35";
    "$r16[8] = -35"->"$r16[9] = -35";
    "$r16[9] = -35"->"$r16[10] = -35";
    "$r16[10] = -35"->"$r16[11] = -35";
    "$r16[11] = -35"->"$r16[12] = -35";
    "$r16[12] = -35"->"$r16[13] = -35";
    "$r16[13] = -35"->"$r16[14] = -35";
    "$r16[14] = -35"->"$r16[15] = -35";
    "$r16[15] = -35"->"$r16[16] = -35";
    "$r16[16] = -35"->"$r16[17] = -35";
    "$r16[17] = -35"->"$r16[18] = -35";
    "$r16[18] = -35"->"$r16[19] = -35";
    "$r16[19] = -35"->"$r16[20] = -35";
    "$r16[20] = -35"->"$r16[21] = -35";
    "$r16[21] = -35"->"$r16[22] = -35";
    "$r16[22] = -35"->"$r16[23] = -35";
    "$r16[23] = -35"->"$r16[24] = -35";
    "$r16[24] = -35"->"$r16[25] = -35";
    "$r16[25] = -35"->"$r16[26] = -35";
    "$r16[26] = -35"->"$r16[27] = -35";
    "$r16[27] = -35"->"$r16[28] = -35";
    "$r16[28] = -35"->"$r16[29] = -35";
    "$r16[29] = -35"->"$r16[30] = -35";
    "$r16[30] = -35"->"$r16[31] = -35";
    "$r16[31] = -35"->"$r16[32] = -35";
    "$r16[32] = -35"->"$r16[33] = -35";
    "$r16[33] = -35"->"$r16[34] = -35";
    "$r16[34] = -35"->"$r16[35] = -35";
    "$r16[35] = -35"->"$r16[36] = -35";
    "$r16[36] = -35"->"$r16[37] = -35";
    "$r16[37] = -35"->"$r16[38] = -35";
    "$r16[38] = -35"->"$r16[39] = -35";
    "$r16[39] = -35"->"$r16[40] = -35";
    "$r16[40] = -35"->"$r16[41] = -35";
    "$r16[41] = -35"->"$r16[42] = -35";
    "$r16[42] = -35"->"$r16[43] = -35";
    "$r16[43] = -35"->"$r16[44] = -35";
    "$r16[44] = -35"->"$r16[45] = -35";
    "$r16[45] = -35"->"$r16[46] = -35";
    "$r16[46] = -35"->"$r16[47] = -35";
    "$r16[47] = -35"->"$r16[48] = -35";
    "$r16[48] = -35"->"$r16[49] = -35";
    "$r16[49] = -35"->"$r14[1] = $r16";
    "$r14[1] = $r16"->"$r17 = newarray (byte)[16]";
    "$r17 = newarray (byte)[16]"->"$r17[0] = 86";
    "$r17[0] = 86"->"$r17[1] = -66";
    "$r17[1] = -66"->"$r17[2] = 52";
    "$r17[2] = 52"->"$r17[3] = 82";
    "$r17[3] = 82"->"$r17[4] = 29";
    "$r17[4] = 29"->"$r17[5] = 20";
    "$r17[5] = 20"->"$r17[6] = 76";
    "$r17[6] = 76"->"$r17[7] = -120";
    "$r17[7] = -120"->"$r17[8] = -37";
    "$r17[8] = -37"->"$r17[9] = -72";
    "$r17[9] = -72"->"$r17[10] = -57";
    "$r17[10] = -57"->"$r17[11] = 51";
    "$r17[11] = 51"->"$r17[12] = -16";
    "$r17[12] = -16"->"$r17[13] = -24";
    "$r17[13] = -24"->"$r17[14] = -77";
    "$r17[14] = -77"->"$r17[15] = -10";
    "$r17[15] = -10"->"$r14[2] = $r17";
    "$r14[2] = $r17"->"$r2[2] = $r14";
    "$r2[2] = $r14"->"r18 = $r2";
    "r18 = $r2"->"r47 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")";
    "r47 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"->"i11 = 0";
    "i11 = 0"->"if i11 >= 3 goto r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")";
    "if i11 >= 3 goto r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"->"b12 = 0";
    "if i11 >= 3 goto r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"->"r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")";
    "b12 = 0"->"$r52 = new javax.crypto.spec.SecretKeySpec";
    "$r52 = new javax.crypto.spec.SecretKeySpec"->"$r36 = r18[i11]";
    "$r36 = r18[i11]"->"i13 = b12 + 1";
    "i13 = b12 + 1"->"$r37 = $r36[b12]";
    "$r37 = $r36[b12]"->"specialinvoke $r52.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r37, \"HMAC\")";
    "specialinvoke $r52.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r37, \"HMAC\")"->"$r59 = (java.security.Key) $r52";
    "$r59 = (java.security.Key) $r52"->"virtualinvoke r47.<javax.crypto.Mac: void init(java.security.Key)>($r59)";
    "virtualinvoke r47.<javax.crypto.Mac: void init(java.security.Key)>($r59)"->"$r38 = r18[i11]";
    "$r38 = r18[i11]"->"i14 = i13 + 1";
    "i14 = i13 + 1"->"$r39 = $r38[i13]";
    "$r39 = $r38[i13]"->"r48 = virtualinvoke r47.<javax.crypto.Mac: byte[] doFinal(byte[])>($r39)";
    "r48 = virtualinvoke r47.<javax.crypto.Mac: byte[] doFinal(byte[])>($r39)"->"$i7 = lengthof r48";
    "$i7 = lengthof r48"->"$r40 = r18[i11]";
    "$r40 = r18[i11]"->"$r41 = $r40[i14]";
    "$r41 = $r40[i14]"->"$i6 = lengthof $r41";
    "$i6 = lengthof $r41"->"if $i7 == $i6 goto i15 = 0";
    "if $i7 == $i6 goto i15 = 0"->"$r53 = new java.lang.Exception";
    "if $i7 == $i6 goto i15 = 0"->"i15 = 0";
    "$r53 = new java.lang.Exception"->"specialinvoke $r53.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")";
    "specialinvoke $r53.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")"->"throw $r53";
    "i15 = 0"->"$i8 = lengthof r48";
    "$i8 = lengthof r48"->"if i15 >= $i8 goto i11 = i11 + 1";
    "if i15 >= $i8 goto i11 = i11 + 1"->"$b10 = r48[i15]";
    "if i15 >= $i8 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "$b10 = r48[i15]"->"$r42 = r18[i11]";
    "$r42 = r18[i11]"->"$r43 = $r42[i14]";
    "$r43 = $r42[i14]"->"$b9 = $r43[i15]";
    "$b9 = $r43[i15]"->"if $b10 == $b9 goto i15 = i15 + 1";
    "if $b10 == $b9 goto i15 = i15 + 1"->"$r54 = new java.lang.Exception";
    "if $b10 == $b9 goto i15 = i15 + 1"->"i15 = i15 + 1";
    "$r54 = new java.lang.Exception"->"specialinvoke $r54.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")";
    "specialinvoke $r54.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")"->"throw $r54";
    "i15 = i15 + 1"->"goto [?= $i8 = lengthof r48]";
    "goto [?= $i8 = lengthof r48]"->"$i8 = lengthof r48";
    "i11 = i11 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 >= 3 goto r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")";
    "r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(\"HmacMD5\")"->"$r55 = new javax.crypto.spec.SecretKeySpec";
    "$r55 = new javax.crypto.spec.SecretKeySpec"->"$r20 = \"Jefe\"";
    "$r20 = \"Jefe\""->"$r21 = virtualinvoke $r20.<java.lang.String: byte[] getBytes()>()";
    "$r21 = virtualinvoke $r20.<java.lang.String: byte[] getBytes()>()"->"specialinvoke $r55.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r21, \"HMAC\")";
    "specialinvoke $r55.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r21, \"HMAC\")"->"$r60 = (java.security.Key) $r55";
    "$r60 = (java.security.Key) $r55"->"virtualinvoke r49.<javax.crypto.Mac: void init(java.security.Key)>($r60)";
    "virtualinvoke r49.<javax.crypto.Mac: void init(java.security.Key)>($r60)"->"$r22 = \"what do ya \"";
    "$r22 = \"what do ya \""->"$r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes()>()";
    "$r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes()>()"->"virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r23)";
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r23)"->"$r24 = \"want for \"";
    "$r24 = \"want for \""->"$r25 = virtualinvoke $r24.<java.lang.String: byte[] getBytes()>()";
    "$r25 = virtualinvoke $r24.<java.lang.String: byte[] getBytes()>()"->"virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r25)";
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r25)"->"$r26 = \"nothing?\"";
    "$r26 = \"nothing?\""->"$r27 = virtualinvoke $r26.<java.lang.String: byte[] getBytes()>()";
    "$r27 = virtualinvoke $r26.<java.lang.String: byte[] getBytes()>()"->"virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r27)";
    "virtualinvoke r49.<javax.crypto.Mac: void update(byte[])>($r27)"->"r50 = virtualinvoke r49.<javax.crypto.Mac: byte[] doFinal()>()";
    "r50 = virtualinvoke r49.<javax.crypto.Mac: byte[] doFinal()>()"->"$i2 = lengthof r50";
    "$i2 = lengthof r50"->"$r28 = r18[1]";
    "$r28 = r18[1]"->"$r29 = $r28[2]";
    "$r29 = $r28[2]"->"$i1 = lengthof $r29";
    "$i1 = lengthof $r29"->"if $i2 == $i1 goto i16 = 0";
    "if $i2 == $i1 goto i16 = 0"->"$r56 = new java.lang.Exception";
    "if $i2 == $i1 goto i16 = 0"->"i16 = 0";
    "$r56 = new java.lang.Exception"->"specialinvoke $r56.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")";
    "specialinvoke $r56.<java.lang.Exception: void <init>(java.lang.String)>(\"Different result length\")"->"throw $r56";
    "i16 = 0"->"$i3 = lengthof r50";
    "$i3 = lengthof r50"->"if i16 >= $i3 goto $r30 = <java.lang.System: java.io.PrintStream out>";
    "if i16 >= $i3 goto $r30 = <java.lang.System: java.io.PrintStream out>"->"$b5 = r50[i16]";
    "if i16 >= $i3 goto $r30 = <java.lang.System: java.io.PrintStream out>"->"$r30 = <java.lang.System: java.io.PrintStream out>";
    "$b5 = r50[i16]"->"$r31 = r18[1]";
    "$r31 = r18[1]"->"$r32 = $r31[2]";
    "$r32 = $r31[2]"->"$b4 = $r32[i16]";
    "$b4 = $r32[i16]"->"if $b5 == $b4 goto i16 = i16 + 1";
    "if $b5 == $b4 goto i16 = i16 + 1"->"$r57 = new java.lang.Exception";
    "if $b5 == $b4 goto i16 = i16 + 1"->"i16 = i16 + 1";
    "$r57 = new java.lang.Exception"->"specialinvoke $r57.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")";
    "specialinvoke $r57.<java.lang.Exception: void <init>(java.lang.String)>(\"Different\")"->"throw $r57";
    "i16 = i16 + 1"->"goto [?= $i3 = lengthof r50]";
    "goto [?= $i3 = lengthof r50]"->"$i3 = lengthof r50";
    "$r30 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"Test SUCCEEDED\")";
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"Test SUCCEEDED\")"->"return";
}
