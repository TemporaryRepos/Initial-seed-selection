digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.lang.String[];
i1 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>;
if i1 > $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>();
staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1);
i1 = i1 + 1;
goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>];
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.lang.String[];
i1 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>;
if i1 > $i0 goto return;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>;
if i1 > $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>();
staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1);
i1 = i1 + 1;
goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>;
if i1 > $i0 goto return;
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>();
staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1);
i1 = i1 + 1;
goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>;
if i1 > $i0 goto return;
";
}
