digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(\"java.lang.annotation.Retention\");
r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"Ljava/lang/annotation/Retention;\");
r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r3 = newarray (java.lang.Class)[1];
$r4 = class \"Ljava/lang/annotation/Retention;\";
$r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
$r3[0] = $r5;
r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"getAnnotation\", $r3);
$r7 = newarray (java.lang.Object)[1];
$r7[0] = class \"Ljava/lang/annotation/Retention;\";
r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r7);
$z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"
    "Block 1:
[preds: 0 ] [succs: ]
$r12 = new java.lang.RuntimeException;
specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base and meta results are not equal.\");
throw $r12;
"
    "Block 2:
[preds: 0 ] [succs: ]
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(\"java.lang.annotation.Retention\");
r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"Ljava/lang/annotation/Retention;\");
r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r3 = newarray (java.lang.Class)[1];
$r4 = class \"Ljava/lang/annotation/Retention;\";
$r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
$r3[0] = $r5;
r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"getAnnotation\", $r3);
$r7 = newarray (java.lang.Object)[1];
$r7[0] = class \"Ljava/lang/annotation/Retention;\";
r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r7);
$z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 1:
[preds: 0 ] [succs: ]
$r12 = new java.lang.RuntimeException;
specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base and meta results are not equal.\");
throw $r12;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(\"java.lang.annotation.Retention\");
r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"Ljava/lang/annotation/Retention;\");
r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r3 = newarray (java.lang.Class)[1];
$r4 = class \"Ljava/lang/annotation/Retention;\";
$r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
$r3[0] = $r5;
r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"getAnnotation\", $r3);
$r7 = newarray (java.lang.Object)[1];
$r7[0] = class \"Ljava/lang/annotation/Retention;\";
r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r7);
$z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 2:
[preds: 0 ] [succs: ]
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
virtualinvoke r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();
return;
";
}
