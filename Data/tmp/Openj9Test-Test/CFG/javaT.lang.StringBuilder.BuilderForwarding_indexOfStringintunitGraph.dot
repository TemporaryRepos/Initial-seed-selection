digraph "unitGraph" {
    "r6 := @this: javaT.lang.StringBuilder.BuilderForwarding"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"
    "r7 = $r0"
    "virtualinvoke r7.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(null, 1)"
    "$r1 = new java.lang.RuntimeException"
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"
    "throw $r1"
    "$r4 := @caughtexception"
    "r8 = $r4"
    "goto [?= $r5 = new java.lang.StringBuilder]"
    "$r2 := @caughtexception"
    "r9 = $r2"
    "$r3 = new java.lang.RuntimeException"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"
    "throw $r3"
    "$r5 = new java.lang.StringBuilder"
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyyz\")"
    "r10 = $r5"
    "$i1 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 0)"
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)"
    "$i2 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 1)"
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, 1)"
    "$i3 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 2)"
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i3, 2)"
    "$i4 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")"
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i4, -1)"
    "return"
    "r6 := @this: javaT.lang.StringBuilder.BuilderForwarding"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"->"r7 = $r0";
    "r7 = $r0"->"$r4 := @caughtexception";
    "r7 = $r0"->"$r2 := @caughtexception";
    "r7 = $r0"->"virtualinvoke r7.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(null, 1)";
    "virtualinvoke r7.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(null, 1)"->"$r4 := @caughtexception";
    "virtualinvoke r7.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(null, 1)"->"$r2 := @caughtexception";
    "virtualinvoke r7.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(null, 1)"->"$r1 = new java.lang.RuntimeException";
    "$r1 = new java.lang.RuntimeException"->"$r4 := @caughtexception";
    "$r1 = new java.lang.RuntimeException"->"$r2 := @caughtexception";
    "$r1 = new java.lang.RuntimeException"->"specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"$r4 := @caughtexception";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"$r2 := @caughtexception";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"throw $r1";
    "throw $r1"->"$r4 := @caughtexception";
    "throw $r1"->"$r2 := @caughtexception";
    "$r4 := @caughtexception"->"r8 = $r4";
    "r8 = $r4"->"goto [?= $r5 = new java.lang.StringBuilder]";
    "goto [?= $r5 = new java.lang.StringBuilder]"->"$r5 = new java.lang.StringBuilder";
    "$r2 := @caughtexception"->"r9 = $r2";
    "r9 = $r2"->"$r3 = new java.lang.RuntimeException";
    "$r3 = new java.lang.RuntimeException"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"throw $r3";
    "$r5 = new java.lang.StringBuilder"->"specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyyz\")";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyyz\")"->"r10 = $r5";
    "r10 = $r5"->"$i1 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 0)";
    "$i1 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 0)"->"virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)";
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)"->"$i2 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 1)";
    "$i2 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 1)"->"virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, 1)";
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, 1)"->"$i3 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 2)";
    "$i3 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(\"y\", 2)"->"virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i3, 2)";
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i3, 2)"->"$i4 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")";
    "$i4 = virtualinvoke r10.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")"->"virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i4, -1)";
    "virtualinvoke r6.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i4, -1)"->"return";
}
