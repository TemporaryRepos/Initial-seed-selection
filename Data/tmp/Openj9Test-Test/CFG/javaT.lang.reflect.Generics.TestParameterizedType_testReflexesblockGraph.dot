digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.util.List;
r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.reflect.Type) $r2;
$z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
if $z1 != 0 goto (branch);
"
    "Block 3:
[preds: 2 ] [succs: ]
$r5 = <java.lang.System: java.io.PrintStream err>;
$r4 = newarray (java.lang.Object)[2];
$r4[0] = r3;
$r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
$r4[1] = $r6;
virtualinvoke $r5.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Bad reflexes for%s %s%n\", $r4);
return 1;
"
    "Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 5:
[preds: 1 ] [succs: ]
return 0;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.util.List;
r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.reflect.Type) $r2;
$z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
if $z1 != 0 goto (branch);
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"->"Block 5:
[preds: 1 ] [succs: ]
return 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.reflect.Type) $r2;
$z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
if $z1 != 0 goto (branch);
"->"Block 3:
[preds: 2 ] [succs: ]
$r5 = <java.lang.System: java.io.PrintStream err>;
$r4 = newarray (java.lang.Object)[2];
$r4[0] = r3;
$r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
$r4[1] = $r6;
virtualinvoke $r5.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Bad reflexes for%s %s%n\", $r4);
return 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.reflect.Type) $r2;
$z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
if $z1 != 0 goto (branch);
"->"Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
";
}
