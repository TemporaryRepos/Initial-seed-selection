digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @this: javaT.lang.reflect.Parameter.BadClassFiles;
r1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: java.lang.Class[] classes>;
i0 = lengthof r1;
i3 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r7 = r1[i3];
virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7);
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
if $i1 == 0 goto return;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.RuntimeException;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$i2 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" errors in test\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r2;
"
    "Block 5:
[preds: 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @this: javaT.lang.reflect.Parameter.BadClassFiles;
r1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: java.lang.Class[] classes>;
i0 = lengthof r1;
i3 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r7 = r1[i3];
virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7);
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
if $i1 == 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r7 = r1[i3];
virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7);
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
if $i1 == 0 goto return;
"->"Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.RuntimeException;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$i2 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" errors in test\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r2;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>;
if $i1 == 0 goto return;
"->"Block 5:
[preds: 3 ] [succs: ]
return;
";
}
