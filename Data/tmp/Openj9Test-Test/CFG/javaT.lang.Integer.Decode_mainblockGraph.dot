digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 5 ]
r10 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-2147483648\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r0, -2147483648);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"2147483647\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r1, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-10\", -10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0x10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0X10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-010\", -8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-#10\", -16);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r2, -2147483648);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483647L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r3, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Integer.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Integer.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483649L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r4, \"Out of range\");
$r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r5, \"Out of range\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(null);
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r7 = new java.lang.RuntimeException;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Integer.decode(null) expected to throw NPE\");
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r7;
"
    "Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
"
    "Block 0:
[preds: ] [succs: 1 5 ]
r10 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-2147483648\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r0, -2147483648);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"2147483647\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r1, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-10\", -10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0x10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0X10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-010\", -8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-#10\", -16);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r2, -2147483648);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483647L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r3, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Integer.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Integer.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483649L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r4, \"Out of range\");
$r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r5, \"Out of range\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"->"Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(null);
";
    "Block 0:
[preds: ] [succs: 1 5 ]
r10 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-2147483648\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r0, -2147483648);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"2147483647\");
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r1, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+10\", 10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0x10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+0X10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+010\", 8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"+#10\", 16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-10\", -10);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0x10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-0X10\", -16);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-010\", -8);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>(\"-#10\", -16);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r2, -2147483648);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483647L);
staticinvoke <javaT.lang.Integer.Decode: void check(java.lang.String,int)>($r3, 2147483647);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Integer.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Integer.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-2147483649L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r4, \"Out of range\");
$r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(2147483648L);
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>($r5, \"Out of range\");
staticinvoke <javaT.lang.Integer.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(null);
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
$r7 = new java.lang.RuntimeException;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(null);
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r7 = new java.lang.RuntimeException;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Integer.decode(null) expected to throw NPE\");
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r7 = new java.lang.RuntimeException;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Integer.decode(null) expected to throw NPE\");
"->"Block 4:
[preds: 3 ] [succs: 5 ]
throw $r7;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Integer.decode(null) expected to throw NPE\");
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r7;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r8 := @caughtexception;
r9 = $r8;
return;
";
}
