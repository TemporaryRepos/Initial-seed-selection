digraph "unitGraph" {
    "r0 := @parameter0: java.nio.DoubleBuffer"
    "i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int capacity()>()"
    "$i1 = i0 + 7"
    "r1 = newarray (double)[$i1]"
    "virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>(r1, 7, i0)"
    "i6 = 0"
    "if i6 >= i0 goto return"
    "$i2 = i6 + 7"
    "$d0 = r1[$i2]"
    "$l3 = (long) $d0"
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicDouble: long ic(int)>(i6)"
    "$d1 = (double) $l4"
    "$l5 = (long) $d1"
    "staticinvoke <javaT.nio.Buffer.BasicDouble: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "return"
    "r0 := @parameter0: java.nio.DoubleBuffer"->"i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int capacity()>()"->"$i1 = i0 + 7";
    "$i1 = i0 + 7"->"r1 = newarray (double)[$i1]";
    "r1 = newarray (double)[$i1]"->"virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>(r1, 7, i0)";
    "virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>(r1, 7, i0)"->"i6 = 0";
    "i6 = 0"->"if i6 >= i0 goto return";
    "if i6 >= i0 goto return"->"$i2 = i6 + 7";
    "if i6 >= i0 goto return"->"return";
    "$i2 = i6 + 7"->"$d0 = r1[$i2]";
    "$d0 = r1[$i2]"->"$l3 = (long) $d0";
    "$l3 = (long) $d0"->"$l4 = staticinvoke <javaT.nio.Buffer.BasicDouble: long ic(int)>(i6)";
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicDouble: long ic(int)>(i6)"->"$d1 = (double) $l4";
    "$d1 = (double) $l4"->"$l5 = (long) $d1";
    "$l5 = (long) $d1"->"staticinvoke <javaT.nio.Buffer.BasicDouble: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)";
    "staticinvoke <javaT.nio.Buffer.BasicDouble: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i0 goto return";
}
