digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
i0 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = virtualinvoke r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>();
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= i0 = i0 + 1];
"
    "Block 4:
[preds: 1 2 ] [succs: 5 ]
$r1 := @caughtexception;
r3 = $r1;
"
    "Block 5:
[preds: 3 4 ] [succs: 1 ]
i0 = i0 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
i0 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = virtualinvoke r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>();
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
"->"Block 6:
[preds: 1 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
"->"Block 4:
[preds: 1 2 ] [succs: 5 ]
$r1 := @caughtexception;
r3 = $r1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = virtualinvoke r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>();
"->"Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= i0 = i0 + 1];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = virtualinvoke r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>();
"->"Block 4:
[preds: 1 2 ] [succs: 5 ]
$r1 := @caughtexception;
r3 = $r1;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= i0 = i0 + 1];
"->"Block 5:
[preds: 3 4 ] [succs: 1 ]
i0 = i0 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 1 2 ] [succs: 5 ]
$r1 := @caughtexception;
r3 = $r1;
"->"Block 5:
[preds: 3 4 ] [succs: 1 ]
i0 = i0 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 3 4 ] [succs: 1 ]
i0 = i0 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 4 ]
if i0 >= 11000 goto return;
";
}
