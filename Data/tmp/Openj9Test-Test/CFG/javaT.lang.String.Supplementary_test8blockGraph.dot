digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
i6 = 0;
"
    "Block 1:
[preds: 0 20 ] [succs: 2 21 ]
$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i6 >= $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
r2 = $r1[i6];
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i7 = 0;
"
    "Block 3:
[preds: 2 10 ] [succs: 4 11 ]
if i7 > i1 goto i11 = i1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1);
i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1);
if i8 == i9 goto $z0 = 0;
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r17 = new java.lang.StringBuilder];
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
"
    "Block 7:
[preds: 5 6 ] [succs: 8 9 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9);
r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1);
$i5 = virtualinvoke r35.<java.lang.String: int length()>();
i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5);
if i10 == i9 goto $z1 = 0;
"
    "Block 8:
[preds: 7 ] [succs: 10 ]
$z1 = 1;
goto [?= $r26 = new java.lang.StringBuilder];
"
    "Block 9:
[preds: 7 ] [succs: 10 ]
$z1 = 0;
"
    "Block 10:
[preds: 8 9 ] [succs: 3 ]
$r26 = new java.lang.StringBuilder;
specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9);
i7 = i7 + 1;
goto [?= (branch)];
"
    "Block 11:
[preds: 3 ] [succs: 12 ]
i11 = i1;
"
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11);
i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11);
if i12 == i13 goto $z2 = 0;
"
    "Block 14:
[preds: 13 ] [succs: 16 ]
$z2 = 1;
goto [?= $r3 = new java.lang.StringBuilder];
"
    "Block 15:
[preds: 13 ] [succs: 16 ]
$z2 = 0;
"
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13);
r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
$i4 = virtualinvoke r36.<java.lang.String: int length()>();
i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4);
if i14 == i13 goto $z3 = 0;
"
    "Block 17:
[preds: 16 ] [succs: 19 ]
$z3 = 1;
goto [?= $r10 = new java.lang.StringBuilder];
"
    "Block 18:
[preds: 16 ] [succs: 19 ]
$z3 = 0;
"
    "Block 19:
[preds: 17 18 ] [succs: 12 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13);
i11 = i11 + -1;
goto [?= (branch)];
"
    "Block 20:
[preds: 12 ] [succs: 1 ]
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i6 = i6 + 1;
goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
"
    "Block 21:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
i6 = 0;
"->"Block 1:
[preds: 0 20 ] [succs: 2 21 ]
$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i6 >= $i0 goto return;
";
    "Block 1:
[preds: 0 20 ] [succs: 2 21 ]
$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i6 >= $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
r2 = $r1[i6];
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i7 = 0;
";
    "Block 1:
[preds: 0 20 ] [succs: 2 21 ]
$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i6 >= $i0 goto return;
"->"Block 21:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
r2 = $r1[i6];
i1 = virtualinvoke r2.<java.lang.String: int length()>();
i7 = 0;
"->"Block 3:
[preds: 2 10 ] [succs: 4 11 ]
if i7 > i1 goto i11 = i1;
";
    "Block 3:
[preds: 2 10 ] [succs: 4 11 ]
if i7 > i1 goto i11 = i1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1);
i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1);
if i8 == i9 goto $z0 = 0;
";
    "Block 3:
[preds: 2 10 ] [succs: 4 11 ]
if i7 > i1 goto i11 = i1;
"->"Block 11:
[preds: 3 ] [succs: 12 ]
i11 = i1;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1);
i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1);
if i8 == i9 goto $z0 = 0;
"->"Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r17 = new java.lang.StringBuilder];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1);
i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1);
if i8 == i9 goto $z0 = 0;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z0 = 1;
goto [?= $r17 = new java.lang.StringBuilder];
"->"Block 7:
[preds: 5 6 ] [succs: 8 9 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9);
r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1);
$i5 = virtualinvoke r35.<java.lang.String: int length()>();
i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5);
if i10 == i9 goto $z1 = 0;
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z0 = 0;
"->"Block 7:
[preds: 5 6 ] [succs: 8 9 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9);
r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1);
$i5 = virtualinvoke r35.<java.lang.String: int length()>();
i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5);
if i10 == i9 goto $z1 = 0;
";
    "Block 7:
[preds: 5 6 ] [succs: 8 9 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9);
r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1);
$i5 = virtualinvoke r35.<java.lang.String: int length()>();
i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5);
if i10 == i9 goto $z1 = 0;
"->"Block 8:
[preds: 7 ] [succs: 10 ]
$z1 = 1;
goto [?= $r26 = new java.lang.StringBuilder];
";
    "Block 7:
[preds: 5 6 ] [succs: 8 9 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9);
r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1);
$i5 = virtualinvoke r35.<java.lang.String: int length()>();
i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5);
if i10 == i9 goto $z1 = 0;
"->"Block 9:
[preds: 7 ] [succs: 10 ]
$z1 = 0;
";
    "Block 8:
[preds: 7 ] [succs: 10 ]
$z1 = 1;
goto [?= $r26 = new java.lang.StringBuilder];
"->"Block 10:
[preds: 8 9 ] [succs: 3 ]
$r26 = new java.lang.StringBuilder;
specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9);
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 9:
[preds: 7 ] [succs: 10 ]
$z1 = 0;
"->"Block 10:
[preds: 8 9 ] [succs: 3 ]
$r26 = new java.lang.StringBuilder;
specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9);
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 10:
[preds: 8 9 ] [succs: 3 ]
$r26 = new java.lang.StringBuilder;
specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9);
i7 = i7 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 10 ] [succs: 4 11 ]
if i7 > i1 goto i11 = i1;
";
    "Block 11:
[preds: 3 ] [succs: 12 ]
i11 = i1;
"->"Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11);
i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11);
if i12 == i13 goto $z2 = 0;
";
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
"->"Block 20:
[preds: 12 ] [succs: 1 ]
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i6 = i6 + 1;
goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11);
i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11);
if i12 == i13 goto $z2 = 0;
"->"Block 14:
[preds: 13 ] [succs: 16 ]
$z2 = 1;
goto [?= $r3 = new java.lang.StringBuilder];
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11);
i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11);
if i12 == i13 goto $z2 = 0;
"->"Block 15:
[preds: 13 ] [succs: 16 ]
$z2 = 0;
";
    "Block 14:
[preds: 13 ] [succs: 16 ]
$z2 = 1;
goto [?= $r3 = new java.lang.StringBuilder];
"->"Block 16:
[preds: 14 15 ] [succs: 17 18 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13);
r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
$i4 = virtualinvoke r36.<java.lang.String: int length()>();
i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4);
if i14 == i13 goto $z3 = 0;
";
    "Block 15:
[preds: 13 ] [succs: 16 ]
$z2 = 0;
"->"Block 16:
[preds: 14 15 ] [succs: 17 18 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13);
r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
$i4 = virtualinvoke r36.<java.lang.String: int length()>();
i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4);
if i14 == i13 goto $z3 = 0;
";
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13);
r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
$i4 = virtualinvoke r36.<java.lang.String: int length()>();
i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4);
if i14 == i13 goto $z3 = 0;
"->"Block 17:
[preds: 16 ] [succs: 19 ]
$z3 = 1;
goto [?= $r10 = new java.lang.StringBuilder];
";
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13);
r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
$i4 = virtualinvoke r36.<java.lang.String: int length()>();
i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4);
if i14 == i13 goto $z3 = 0;
"->"Block 18:
[preds: 16 ] [succs: 19 ]
$z3 = 0;
";
    "Block 17:
[preds: 16 ] [succs: 19 ]
$z3 = 1;
goto [?= $r10 = new java.lang.StringBuilder];
"->"Block 19:
[preds: 17 18 ] [succs: 12 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13);
i11 = i11 + -1;
goto [?= (branch)];
";
    "Block 18:
[preds: 16 ] [succs: 19 ]
$z3 = 0;
"->"Block 19:
[preds: 17 18 ] [succs: 12 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13);
i11 = i11 + -1;
goto [?= (branch)];
";
    "Block 19:
[preds: 17 18 ] [succs: 12 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13);
i11 = i11 + -1;
goto [?= (branch)];
"->"Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
";
    "Block 20:
[preds: 12 ] [succs: 1 ]
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\");
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i2 = i1 + 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\");
$i3 = i1 - 1;
staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\");
i6 = i6 + 1;
goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
"->"Block 1:
[preds: 0 20 ] [succs: 2 21 ]
$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r0;
if i6 >= $i0 goto return;
";
}
