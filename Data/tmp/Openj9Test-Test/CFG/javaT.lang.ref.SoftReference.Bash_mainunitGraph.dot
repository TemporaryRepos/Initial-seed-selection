digraph "unitGraph" {
    "r10 := @parameter0: java.lang.String[]"
    "i0 = 0"
    "if i0 >= 2048 goto i1 = 0"
    "$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference"
    "$r9 = newarray (byte)[32768]"
    "specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9)"
    "r11 = $r8"
    "i0 = i0 + 1"
    "goto [?= (branch)]"
    "i1 = 0"
    "i2 = 0"
    "r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>"
    "if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>"
    "$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>()"
    "if $r7 != null goto i2 = i2 + 1"
    "i1 = i1 + 1"
    "goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>]"
    "i2 = i2 + 1"
    "r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>"
    "$r1 = <java.lang.System: java.io.PrintStream err>"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" full, \")"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" empty \")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "return"
    "r10 := @parameter0: java.lang.String[]"->"i0 = 0";
    "i0 = 0"->"if i0 >= 2048 goto i1 = 0";
    "if i0 >= 2048 goto i1 = 0"->"$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference";
    "if i0 >= 2048 goto i1 = 0"->"i1 = 0";
    "$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference"->"$r9 = newarray (byte)[32768]";
    "$r9 = newarray (byte)[32768]"->"specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9)";
    "specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9)"->"r11 = $r8";
    "r11 = $r8"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 >= 2048 goto i1 = 0";
    "i1 = 0"->"i2 = 0";
    "i2 = 0"->"r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>";
    "r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>"->"if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>";
    "if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>"->"$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>()";
    "if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>"->"$r1 = <java.lang.System: java.io.PrintStream err>";
    "$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>()"->"if $r7 != null goto i2 = i2 + 1";
    "if $r7 != null goto i2 = i2 + 1"->"i1 = i1 + 1";
    "if $r7 != null goto i2 = i2 + 1"->"i2 = i2 + 1";
    "i1 = i1 + 1"->"goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>]";
    "goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>]"->"r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>";
    "i2 = i2 + 1"->"r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>";
    "r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>";
    "$r1 = <java.lang.System: java.io.PrintStream err>"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"->"$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)";
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" full, \")";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" full, \")"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" empty \")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" empty \")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"return";
}
