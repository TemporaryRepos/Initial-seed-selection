digraph "unitGraph" {
    "r0 := @parameter0: java.nio.ByteBuffer"
    "i0 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>()"
    "$i1 = i0 + 7"
    "r1 = newarray (byte)[$i1]"
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 7, i0)"
    "i9 = 0"
    "if i9 >= i0 goto return"
    "$i2 = i9 + 7"
    "$b3 = r1[$i2]"
    "$l4 = (long) $b3"
    "$l5 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(i9)"
    "$i6 = (int) $l5"
    "$b7 = (byte) $i6"
    "$l8 = (long) $b7"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l8)"
    "i9 = i9 + 1"
    "goto [?= (branch)]"
    "return"
    "r0 := @parameter0: java.nio.ByteBuffer"->"i0 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>()"->"$i1 = i0 + 7";
    "$i1 = i0 + 7"->"r1 = newarray (byte)[$i1]";
    "r1 = newarray (byte)[$i1]"->"virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 7, i0)";
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 7, i0)"->"i9 = 0";
    "i9 = 0"->"if i9 >= i0 goto return";
    "if i9 >= i0 goto return"->"$i2 = i9 + 7";
    "if i9 >= i0 goto return"->"return";
    "$i2 = i9 + 7"->"$b3 = r1[$i2]";
    "$b3 = r1[$i2]"->"$l4 = (long) $b3";
    "$l4 = (long) $b3"->"$l5 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(i9)";
    "$l5 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(i9)"->"$i6 = (int) $l5";
    "$i6 = (int) $l5"->"$b7 = (byte) $i6";
    "$b7 = (byte) $i6"->"$l8 = (long) $b7";
    "$l8 = (long) $b7"->"staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l8)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r0, $l4, $l8)"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 >= i0 goto return";
}
