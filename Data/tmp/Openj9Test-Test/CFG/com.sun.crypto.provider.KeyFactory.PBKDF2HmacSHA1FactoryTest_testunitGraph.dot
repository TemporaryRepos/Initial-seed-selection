digraph "unitGraph" {
    "r0 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(\"PBKDF2WithHmacSHA1\", \"SunJCE\")"
    "i6 = 0"
    "$r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>"
    "$i0 = lengthof $r1"
    "if i6 >= $i0 goto return"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "$r39 = new java.lang.StringBuilder"
    "specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=>Testing vector#\")"
    "$i1 = i6 + 1"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "$r7 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>"
    "r8 = $r7[i6]"
    "i7 = 0"
    "$r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>"
    "$i2 = lengthof $r9"
    "if i7 >= $i2 goto i6 = i6 + 1"
    "$r10 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: javax.crypto.spec.PBEKeySpec[] keySpecs>"
    "r11 = $r10[i7]"
    "$r46 = (java.security.spec.KeySpec) r11"
    "$r12 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r46)"
    "r13 = (javax.crypto.interfaces.PBEKey) $r12"
    "r14 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: byte[] getEncoded()>()"
    "$r15 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: java.lang.String getFormat()>()"
    "$z0 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"RAW\")"
    "if $z0 != 0 goto $i5 = lengthof r14"
    "$r40 = new java.lang.Exception"
    "specialinvoke $r40.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong format for derived key\")"
    "throw $r40"
    "$i5 = lengthof r14"
    "$r16 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>"
    "$i3 = $r16[i7]"
    "$i4 = $i3 / 8"
    "if $i5 == $i4 goto $r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"
    "$r41 = new java.lang.Exception"
    "specialinvoke $r41.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong length for derived key\")"
    "throw $r41"
    "$r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"
    "$r18 = $r17[i7]"
    "$r19 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)"
    "$z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19)"
    "if $z1 != 0 goto $r47 = (javax.crypto.SecretKey) r13"
    "$r24 = <java.lang.System: java.io.PrintStream out>"
    "$r42 = new java.lang.StringBuilder"
    "specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()"
    "$r25 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"got:      \")"
    "$r26 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)"
    "$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28)"
    "$r30 = <java.lang.System: java.io.PrintStream out>"
    "$r43 = new java.lang.StringBuilder"
    "specialinvoke $r43.<java.lang.StringBuilder: void <init>()>()"
    "$r31 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"expected: \")"
    "$r32 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"
    "$r33 = $r32[i7]"
    "$r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)"
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r35)"
    "$r44 = new java.lang.Exception"
    "specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong value for derived key\")"
    "throw $r44"
    "$r47 = (javax.crypto.SecretKey) r13"
    "$r20 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>($r47, class \"Ljavax/crypto/spec/PBEKeySpec;\")"
    "r21 = (javax.crypto.spec.PBEKeySpec) $r20"
    "$z2 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: boolean isEqual(javax.crypto.spec.PBEKeySpec,javax.crypto.spec.PBEKeySpec)>(r11, r21)"
    "if $z2 != 0 goto i7 = i7 + 1"
    "$r45 = new java.lang.Exception"
    "specialinvoke $r45.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong derived keySpec\")"
    "throw $r45"
    "i7 = i7 + 1"
    "goto [?= $r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>]"
    "i6 = i6 + 1"
    "goto [?= $r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>]"
    "return"
    "r0 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(\"PBKDF2WithHmacSHA1\", \"SunJCE\")"->"i6 = 0";
    "i6 = 0"->"$r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>";
    "$r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>"->"$i0 = lengthof $r1";
    "$i0 = lengthof $r1"->"if i6 >= $i0 goto return";
    "if i6 >= $i0 goto return"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "if i6 >= $i0 goto return"->"return";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"$r39 = new java.lang.StringBuilder";
    "$r39 = new java.lang.StringBuilder"->"specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=>Testing vector#\")";
    "$r4 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=>Testing vector#\")"->"$i1 = i6 + 1";
    "$i1 = i6 + 1"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"$r7 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>";
    "$r7 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>"->"r8 = $r7[i6]";
    "r8 = $r7[i6]"->"i7 = 0";
    "i7 = 0"->"$r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>";
    "$r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>"->"$i2 = lengthof $r9";
    "$i2 = lengthof $r9"->"if i7 >= $i2 goto i6 = i6 + 1";
    "if i7 >= $i2 goto i6 = i6 + 1"->"$r10 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: javax.crypto.spec.PBEKeySpec[] keySpecs>";
    "if i7 >= $i2 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$r10 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: javax.crypto.spec.PBEKeySpec[] keySpecs>"->"r11 = $r10[i7]";
    "r11 = $r10[i7]"->"$r46 = (java.security.spec.KeySpec) r11";
    "$r46 = (java.security.spec.KeySpec) r11"->"$r12 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r46)";
    "$r12 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r46)"->"r13 = (javax.crypto.interfaces.PBEKey) $r12";
    "r13 = (javax.crypto.interfaces.PBEKey) $r12"->"r14 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: byte[] getEncoded()>()";
    "r14 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: byte[] getEncoded()>()"->"$r15 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: java.lang.String getFormat()>()";
    "$r15 = interfaceinvoke r13.<javax.crypto.interfaces.PBEKey: java.lang.String getFormat()>()"->"$z0 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"RAW\")";
    "$z0 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"RAW\")"->"if $z0 != 0 goto $i5 = lengthof r14";
    "if $z0 != 0 goto $i5 = lengthof r14"->"$r40 = new java.lang.Exception";
    "if $z0 != 0 goto $i5 = lengthof r14"->"$i5 = lengthof r14";
    "$r40 = new java.lang.Exception"->"specialinvoke $r40.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong format for derived key\")";
    "specialinvoke $r40.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong format for derived key\")"->"throw $r40";
    "$i5 = lengthof r14"->"$r16 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>";
    "$r16 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>"->"$i3 = $r16[i7]";
    "$i3 = $r16[i7]"->"$i4 = $i3 / 8";
    "$i4 = $i3 / 8"->"if $i5 == $i4 goto $r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>";
    "if $i5 == $i4 goto $r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"->"$r41 = new java.lang.Exception";
    "if $i5 == $i4 goto $r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"->"$r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>";
    "$r41 = new java.lang.Exception"->"specialinvoke $r41.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong length for derived key\")";
    "specialinvoke $r41.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong length for derived key\")"->"throw $r41";
    "$r17 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"->"$r18 = $r17[i7]";
    "$r18 = $r17[i7]"->"$r19 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)";
    "$r19 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)"->"$z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19)";
    "$z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19)"->"if $z1 != 0 goto $r47 = (javax.crypto.SecretKey) r13";
    "if $z1 != 0 goto $r47 = (javax.crypto.SecretKey) r13"->"$r24 = <java.lang.System: java.io.PrintStream out>";
    "if $z1 != 0 goto $r47 = (javax.crypto.SecretKey) r13"->"$r47 = (javax.crypto.SecretKey) r13";
    "$r24 = <java.lang.System: java.io.PrintStream out>"->"$r42 = new java.lang.StringBuilder";
    "$r42 = new java.lang.StringBuilder"->"specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()"->"$r25 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"got:      \")";
    "$r25 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"got:      \")"->"$r26 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)";
    "$r26 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: java.lang.String toHexString(byte[])>(r14)"->"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)";
    "$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28)";
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28)"->"$r30 = <java.lang.System: java.io.PrintStream out>";
    "$r30 = <java.lang.System: java.io.PrintStream out>"->"$r43 = new java.lang.StringBuilder";
    "$r43 = new java.lang.StringBuilder"->"specialinvoke $r43.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r43.<java.lang.StringBuilder: void <init>()>()"->"$r31 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"expected: \")";
    "$r31 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"expected: \")"->"$r32 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>";
    "$r32 = r8.<com.sun.crypto.provider.KeyFactory.TestVector: java.lang.String[] expectedVals>"->"$r33 = $r32[i7]";
    "$r33 = $r32[i7]"->"$r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)";
    "$r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)"->"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r35)";
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r35)"->"$r44 = new java.lang.Exception";
    "$r44 = new java.lang.Exception"->"specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong value for derived key\")";
    "specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong value for derived key\")"->"throw $r44";
    "$r47 = (javax.crypto.SecretKey) r13"->"$r20 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>($r47, class \"Ljavax/crypto/spec/PBEKeySpec;\")";
    "$r20 = virtualinvoke r0.<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>($r47, class \"Ljavax/crypto/spec/PBEKeySpec;\")"->"r21 = (javax.crypto.spec.PBEKeySpec) $r20";
    "r21 = (javax.crypto.spec.PBEKeySpec) $r20"->"$z2 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: boolean isEqual(javax.crypto.spec.PBEKeySpec,javax.crypto.spec.PBEKeySpec)>(r11, r21)";
    "$z2 = staticinvoke <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: boolean isEqual(javax.crypto.spec.PBEKeySpec,javax.crypto.spec.PBEKeySpec)>(r11, r21)"->"if $z2 != 0 goto i7 = i7 + 1";
    "if $z2 != 0 goto i7 = i7 + 1"->"$r45 = new java.lang.Exception";
    "if $z2 != 0 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "$r45 = new java.lang.Exception"->"specialinvoke $r45.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong derived keySpec\")";
    "specialinvoke $r45.<java.lang.Exception: void <init>(java.lang.String)>(\"Wrong derived keySpec\")"->"throw $r45";
    "i7 = i7 + 1"->"goto [?= $r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>]";
    "goto [?= $r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>]"->"$r9 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: int[] KEY_SIZES>";
    "i6 = i6 + 1"->"goto [?= $r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>]";
    "goto [?= $r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>]"->"$r1 = <com.sun.crypto.provider.KeyFactory.PBKDF2HmacSHA1FactoryTest: com.sun.crypto.provider.KeyFactory.TestVector[] TEST_VECTORS>";
}
