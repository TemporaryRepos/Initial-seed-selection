digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @this: com.sun.crypto.provider.Cipher.AES.Test4511676;
r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(128);
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$r8 = (java.security.Key) r2;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r8);
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= return 1];
"
    "Block 4:
[preds: 0 1 2 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"key length is mis-intepreted!\");
throw $r7;
"
    "Block 5:
[preds: 3 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @this: com.sun.crypto.provider.Cipher.AES.Test4511676;
r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(128);
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"->"Block 1:
[preds: 0 ] [succs: 2 4 ]
$r8 = (java.security.Key) r2;
";
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @this: com.sun.crypto.provider.Cipher.AES.Test4511676;
r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(\"AES\", \"SunJCE\");
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(128);
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"->"Block 4:
[preds: 0 1 2 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"key length is mis-intepreted!\");
throw $r7;
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$r8 = (java.security.Key) r2;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r8);
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$r8 = (java.security.Key) r2;
"->"Block 4:
[preds: 0 1 2 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"key length is mis-intepreted!\");
throw $r7;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r8);
"->"Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= return 1];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r8);
"->"Block 4:
[preds: 0 1 2 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"key length is mis-intepreted!\");
throw $r7;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= return 1];
"->"Block 5:
[preds: 3 ] [succs: ]
return 1;
";
}
