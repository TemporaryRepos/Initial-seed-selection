digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "staticinvoke <javaT.lang.Double.ParseDouble: void rudimentaryTest()>()"
    "$r0 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r0, 0)"
    "$r1 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r1, 0)"
    "$r2 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r2, 1)"
    "$r3 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r3, 1)"
    "$r4 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r4, 0)"
    "$r5 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r5, 0)"
    "$r6 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r6, 1)"
    "$r7 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r7, 1)"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testSubnormalPowers()>()"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testPowers()>()"
    "staticinvoke <javaT.lang.Double.ParseDouble: void testStrictness()>()"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"staticinvoke <javaT.lang.Double.ParseDouble: void rudimentaryTest()>()";
    "staticinvoke <javaT.lang.Double.ParseDouble: void rudimentaryTest()>()"->"$r0 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>";
    "$r0 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r0, 0)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r0, 0)"->"$r1 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>";
    "$r1 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r1, 0)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r1, 0)"->"$r2 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>";
    "$r2 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r2, 1)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r2, 1)"->"$r3 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>";
    "$r3 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r3, 1)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testParsing(java.lang.String[],boolean)>($r3, 1)"->"$r4 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>";
    "$r4 = <javaT.lang.Double.ParseDouble: java.lang.String[] goodStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r4, 0)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r4, 0)"->"$r5 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>";
    "$r5 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedGoodStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r5, 0)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r5, 0)"->"$r6 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>";
    "$r6 = <javaT.lang.Double.ParseDouble: java.lang.String[] badStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r6, 1)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r6, 1)"->"$r7 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>";
    "$r7 = <javaT.lang.Double.ParseDouble: java.lang.String[] paddedBadStrings>"->"staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r7, 1)";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testRegex(java.lang.String[],boolean)>($r7, 1)"->"staticinvoke <javaT.lang.Double.ParseDouble: void testSubnormalPowers()>()";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testSubnormalPowers()>()"->"staticinvoke <javaT.lang.Double.ParseDouble: void testPowers()>()";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testPowers()>()"->"staticinvoke <javaT.lang.Double.ParseDouble: void testStrictness()>()";
    "staticinvoke <javaT.lang.Double.ParseDouble: void testStrictness()>()"->"return";
}
