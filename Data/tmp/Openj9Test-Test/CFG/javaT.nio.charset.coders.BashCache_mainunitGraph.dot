digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(\"us-ascii\")"
    "r1 = newarray (javaT.nio.charset.coders.BashCache$Basher)[10]"
    "i0 = 0"
    "if i0 >= 10 goto i1 = 0"
    "$r4 = new javaT.nio.charset.coders.BashCache$Basher"
    "specialinvoke $r4.<javaT.nio.charset.coders.BashCache$Basher: void <init>(javaT.nio.charset.coders.BashCache$1)>(null)"
    "r1[i0] = $r4"
    "$r5 = r1[i0]"
    "virtualinvoke $r5.<javaT.nio.charset.coders.BashCache$Basher: void start()>()"
    "i0 = i0 + 1"
    "goto [?= (branch)]"
    "i1 = 0"
    "if i1 >= 10 goto $z0 = <javaT.nio.charset.coders.BashCache: boolean failed>"
    "$r3 = r1[i1]"
    "virtualinvoke $r3.<javaT.nio.charset.coders.BashCache$Basher: void join()>()"
    "i1 = i1 + 1"
    "$z0 = <javaT.nio.charset.coders.BashCache: boolean failed>"
    "if $z0 == 0 goto return"
    "$r2 = new java.lang.Exception"
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")"
    "throw $r2"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(\"us-ascii\")";
    "r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(\"us-ascii\")"->"r1 = newarray (javaT.nio.charset.coders.BashCache$Basher)[10]";
    "r1 = newarray (javaT.nio.charset.coders.BashCache$Basher)[10]"->"i0 = 0";
    "i0 = 0"->"if i0 >= 10 goto i1 = 0";
    "if i0 >= 10 goto i1 = 0"->"$r4 = new javaT.nio.charset.coders.BashCache$Basher";
    "if i0 >= 10 goto i1 = 0"->"i1 = 0";
    "$r4 = new javaT.nio.charset.coders.BashCache$Basher"->"specialinvoke $r4.<javaT.nio.charset.coders.BashCache$Basher: void <init>(javaT.nio.charset.coders.BashCache$1)>(null)";
    "specialinvoke $r4.<javaT.nio.charset.coders.BashCache$Basher: void <init>(javaT.nio.charset.coders.BashCache$1)>(null)"->"r1[i0] = $r4";
    "r1[i0] = $r4"->"$r5 = r1[i0]";
    "$r5 = r1[i0]"->"virtualinvoke $r5.<javaT.nio.charset.coders.BashCache$Basher: void start()>()";
    "virtualinvoke $r5.<javaT.nio.charset.coders.BashCache$Basher: void start()>()"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 >= 10 goto i1 = 0";
    "i1 = 0"->"if i1 >= 10 goto $z0 = <javaT.nio.charset.coders.BashCache: boolean failed>";
    "if i1 >= 10 goto $z0 = <javaT.nio.charset.coders.BashCache: boolean failed>"->"$r3 = r1[i1]";
    "if i1 >= 10 goto $z0 = <javaT.nio.charset.coders.BashCache: boolean failed>"->"$z0 = <javaT.nio.charset.coders.BashCache: boolean failed>";
    "$r3 = r1[i1]"->"virtualinvoke $r3.<javaT.nio.charset.coders.BashCache$Basher: void join()>()";
    "virtualinvoke $r3.<javaT.nio.charset.coders.BashCache$Basher: void join()>()"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= 10 goto $z0 = <javaT.nio.charset.coders.BashCache: boolean failed>";
    "$z0 = <javaT.nio.charset.coders.BashCache: boolean failed>"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r2 = new java.lang.Exception";
    "if $z0 == 0 goto return"->"return";
    "$r2 = new java.lang.Exception"->"specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")";
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")"->"throw $r2";
}
