digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r34 := @parameter0: java.lang.String[];
b6 = 0;
$r0 = newarray (java.math.BigDecimal)[2];
$r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L);
$r0[0] = $r1;
$r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9L);
$r0[1] = $r2;
r3 = $r0;
$r4 = new java.math.BigDecimal;
specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0);
$i0 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r4, 1);
i7 = b6 + $i0;
i8 = 1;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10];
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
r35 = r3;
i9 = lengthof r35;
i10 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i10 >= i9 goto $r25 = r3[0];
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
r32 = r35[i10];
$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8);
i11 = i7 + $i4;
$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>();
$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8);
i7 = i11 + $i5;
i10 = i10 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
$r25 = r3[0];
$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24);
r3[0] = $r26;
$r28 = r3[1];
$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27);
$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>;
$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30);
r3[1] = $r31;
i8 = i8 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: 7 ]
$r5 = newarray (java.math.BigDecimal)[10];
$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L);
$r5[0] = $r6;
$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L);
$r5[1] = $r7;
$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L);
$r5[2] = $r8;
$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L);
$r5[3] = $r9;
$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L);
$r5[4] = $r10;
$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L);
$r5[5] = $r11;
$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L);
$r5[6] = $r12;
$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L);
$r5[7] = $r13;
$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L);
$r5[8] = $r14;
$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L);
$r5[9] = $r15;
r36 = $r5;
$r16 = newarray (int)[10];
$r16[0] = 10;
$r16[1] = 10;
$r16[2] = 11;
$r16[3] = 13;
$r16[4] = 15;
$r16[5] = 15;
$r16[6] = 16;
$r16[7] = 17;
$r16[8] = 19;
$r16[9] = 19;
r37 = $r16;
i12 = 0;
"
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$i1 = lengthof r36;
if i12 >= $i1 goto (branch);
"
    "Block 8:
[preds: 7 ] [succs: 7 ]
$r23 = r36[i12];
$i2 = r37[i12];
$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2);
i7 = i7 + $i3;
i12 = i12 + 1;
goto [?= $i1 = lengthof r36];
"
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
if i7 <= 0 goto return;
"
    "Block 10:
[preds: 9 ] [succs: ]
$r17 = new java.lang.RuntimeException;
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing precision.\");
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);
throw $r17;
"
    "Block 11:
[preds: 9 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r34 := @parameter0: java.lang.String[];
b6 = 0;
$r0 = newarray (java.math.BigDecimal)[2];
$r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L);
$r0[0] = $r1;
$r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9L);
$r0[1] = $r2;
r3 = $r0;
$r4 = new java.math.BigDecimal;
specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0);
$i0 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r4, 1);
i7 = b6 + $i0;
i8 = 1;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10];
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10];
"->"Block 2:
[preds: 1 ] [succs: 3 ]
r35 = r3;
i9 = lengthof r35;
i10 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10];
"->"Block 6:
[preds: 1 ] [succs: 7 ]
$r5 = newarray (java.math.BigDecimal)[10];
$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L);
$r5[0] = $r6;
$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L);
$r5[1] = $r7;
$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L);
$r5[2] = $r8;
$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L);
$r5[3] = $r9;
$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L);
$r5[4] = $r10;
$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L);
$r5[5] = $r11;
$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L);
$r5[6] = $r12;
$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L);
$r5[7] = $r13;
$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L);
$r5[8] = $r14;
$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L);
$r5[9] = $r15;
r36 = $r5;
$r16 = newarray (int)[10];
$r16[0] = 10;
$r16[1] = 10;
$r16[2] = 11;
$r16[3] = 13;
$r16[4] = 15;
$r16[5] = 15;
$r16[6] = 16;
$r16[7] = 17;
$r16[8] = 19;
$r16[9] = 19;
r37 = $r16;
i12 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
r35 = r3;
i9 = lengthof r35;
i10 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i10 >= i9 goto $r25 = r3[0];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i10 >= i9 goto $r25 = r3[0];
"->"Block 4:
[preds: 3 ] [succs: 3 ]
r32 = r35[i10];
$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8);
i11 = i7 + $i4;
$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>();
$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8);
i7 = i11 + $i5;
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i10 >= i9 goto $r25 = r3[0];
"->"Block 5:
[preds: 3 ] [succs: 1 ]
$r25 = r3[0];
$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24);
r3[0] = $r26;
$r28 = r3[1];
$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27);
$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>;
$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30);
r3[1] = $r31;
i8 = i8 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
r32 = r35[i10];
$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8);
i11 = i7 + $i4;
$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>();
$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8);
i7 = i11 + $i5;
i10 = i10 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i10 >= i9 goto $r25 = r3[0];
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
$r25 = r3[0];
$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24);
r3[0] = $r26;
$r28 = r3[1];
$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>;
$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27);
$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>;
$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30);
r3[1] = $r31;
i8 = i8 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10];
";
    "Block 6:
[preds: 1 ] [succs: 7 ]
$r5 = newarray (java.math.BigDecimal)[10];
$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L);
$r5[0] = $r6;
$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L);
$r5[1] = $r7;
$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L);
$r5[2] = $r8;
$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L);
$r5[3] = $r9;
$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L);
$r5[4] = $r10;
$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L);
$r5[5] = $r11;
$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L);
$r5[6] = $r12;
$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L);
$r5[7] = $r13;
$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L);
$r5[8] = $r14;
$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L);
$r5[9] = $r15;
r36 = $r5;
$r16 = newarray (int)[10];
$r16[0] = 10;
$r16[1] = 10;
$r16[2] = 11;
$r16[3] = 13;
$r16[4] = 15;
$r16[5] = 15;
$r16[6] = 16;
$r16[7] = 17;
$r16[8] = 19;
$r16[9] = 19;
r37 = $r16;
i12 = 0;
"->"Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$i1 = lengthof r36;
if i12 >= $i1 goto (branch);
";
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$i1 = lengthof r36;
if i12 >= $i1 goto (branch);
"->"Block 8:
[preds: 7 ] [succs: 7 ]
$r23 = r36[i12];
$i2 = r37[i12];
$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2);
i7 = i7 + $i3;
i12 = i12 + 1;
goto [?= $i1 = lengthof r36];
";
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$i1 = lengthof r36;
if i12 >= $i1 goto (branch);
"->"Block 9:
[preds: 7 ] [succs: 10 11 ]
if i7 <= 0 goto return;
";
    "Block 8:
[preds: 7 ] [succs: 7 ]
$r23 = r36[i12];
$i2 = r37[i12];
$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2);
i7 = i7 + $i3;
i12 = i12 + 1;
goto [?= $i1 = lengthof r36];
"->"Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$i1 = lengthof r36;
if i12 >= $i1 goto (branch);
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
if i7 <= 0 goto return;
"->"Block 10:
[preds: 9 ] [succs: ]
$r17 = new java.lang.RuntimeException;
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing precision.\");
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);
throw $r17;
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
if i7 <= 0 goto return;
"->"Block 11:
[preds: 9 ] [succs: ]
return;
";
}
