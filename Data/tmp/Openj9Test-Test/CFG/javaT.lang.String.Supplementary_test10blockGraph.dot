digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 = \"H\ud800e\udfffa\udbff\udc00der<\";
i9 = 0;
"
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r1;
if i9 >= $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$r5 = $r4[i9];
$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
$i1 = virtualinvoke r0.<java.lang.String: int length()>();
r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1);
i2 = virtualinvoke r8.<java.lang.String: int length()>();
i10 = 0;
"
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i10 > i2 goto i16 = i2;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2);
i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11);
if i12 == i2 goto $z2 = 0;
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r25 = new java.lang.StringBuilder];
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
"
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r25 = new java.lang.StringBuilder;
specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2);
$i6 = neg i11;
i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6);
i14 = i10;
if i10 <= 0 goto (branch);
"
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i10 >= i2 goto (branch);
"
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i8 = i10 + 1;
i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15);
if $z1 == 0 goto (branch);
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
i14 = i14 + -1;
"
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
"
    "Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r34 = new java.lang.StringBuilder];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
"
    "Block 14:
[preds: 12 13 ] [succs: 3 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i11;
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14);
i10 = i10 + 1;
goto [?= (branch)];
"
    "Block 15:
[preds: 3 ] [succs: 16 ]
i16 = i2;
"
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i16 < 0 goto i9 = i9 + 1;
"
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16);
i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17);
i19 = i16;
if i16 <= 0 goto (branch);
"
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i16 >= i2 goto (branch);
"
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i5 = i16 - 1;
i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20);
if $z0 == 0 goto (branch);
"
    "Block 20:
[preds: 19 ] [succs: 21 ]
i19 = i19 + 1;
"
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
"
    "Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r9 = new java.lang.StringBuilder];
"
    "Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
"
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19);
$i3 = neg i17;
i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3);
if i21 == 0 goto $z5 = 0;
"
    "Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r16 = new java.lang.StringBuilder];
"
    "Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
"
    "Block 27:
[preds: 25 26 ] [succs: 16 ]
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i4 = neg i17;
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0);
i16 = i16 + -1;
goto [?= (branch)];
"
    "Block 28:
[preds: 16 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
"
    "Block 29:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 = \"H\ud800e\udfffa\udbff\udc00der<\";
i9 = 0;
"->"Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r1;
if i9 >= $i0 goto return;
";
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r1;
if i9 >= $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$r5 = $r4[i9];
$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
$i1 = virtualinvoke r0.<java.lang.String: int length()>();
r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1);
i2 = virtualinvoke r8.<java.lang.String: int length()>();
i10 = 0;
";
    "Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r1;
if i9 >= $i0 goto return;
"->"Block 29:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r4 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$r5 = $r4[i9];
$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
$i1 = virtualinvoke r0.<java.lang.String: int length()>();
r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1);
i2 = virtualinvoke r8.<java.lang.String: int length()>();
i10 = 0;
"->"Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i10 > i2 goto i16 = i2;
";
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i10 > i2 goto i16 = i2;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2);
i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11);
if i12 == i2 goto $z2 = 0;
";
    "Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i10 > i2 goto i16 = i2;
"->"Block 15:
[preds: 3 ] [succs: 16 ]
i16 = i2;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2);
i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11);
if i12 == i2 goto $z2 = 0;
"->"Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r25 = new java.lang.StringBuilder];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i11 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, i10, i2);
i12 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i10, i11);
if i12 == i2 goto $z2 = 0;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
$z2 = 1;
goto [?= $r25 = new java.lang.StringBuilder];
"->"Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r25 = new java.lang.StringBuilder;
specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2);
$i6 = neg i11;
i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6);
i14 = i10;
if i10 <= 0 goto (branch);
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
$z2 = 0;
"->"Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r25 = new java.lang.StringBuilder;
specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2);
$i6 = neg i11;
i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6);
i14 = i10;
if i10 <= 0 goto (branch);
";
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r25 = new java.lang.StringBuilder;
specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2);
$i6 = neg i11;
i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6);
i14 = i10;
if i10 <= 0 goto (branch);
"->"Block 8:
[preds: 7 ] [succs: 9 11 ]
if i10 >= i2 goto (branch);
";
    "Block 7:
[preds: 5 6 ] [succs: 8 11 ]
$r25 = new java.lang.StringBuilder;
specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r33, i12, i2);
$i6 = neg i11;
i13 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i2, $i6);
i14 = i10;
if i10 <= 0 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
";
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i10 >= i2 goto (branch);
"->"Block 9:
[preds: 8 ] [succs: 10 11 ]
$i8 = i10 + 1;
i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15);
if $z1 == 0 goto (branch);
";
    "Block 8:
[preds: 7 ] [succs: 9 11 ]
if i10 >= i2 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i8 = i10 + 1;
i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15);
if $z1 == 0 goto (branch);
"->"Block 10:
[preds: 9 ] [succs: 11 ]
i14 = i14 + -1;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i8 = i10 + 1;
i15 = virtualinvoke r8.<java.lang.String: int codePointBefore(int)>($i8);
$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i15);
if $z1 == 0 goto (branch);
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
i14 = i14 + -1;
"->"Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
";
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
"->"Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r34 = new java.lang.StringBuilder];
";
    "Block 11:
[preds: 7 8 9 10 ] [succs: 12 13 ]
if i13 == i14 goto $z3 = 0;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
";
    "Block 12:
[preds: 11 ] [succs: 14 ]
$z3 = 1;
goto [?= $r34 = new java.lang.StringBuilder];
"->"Block 14:
[preds: 12 13 ] [succs: 3 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i11;
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14);
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$z3 = 0;
"->"Block 14:
[preds: 12 13 ] [succs: 3 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i11;
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14);
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 14:
[preds: 12 13 ] [succs: 3 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i7 = neg i11;
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r42, i13, i14);
i10 = i10 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 14 ] [succs: 4 15 ]
if i10 > i2 goto i16 = i2;
";
    "Block 15:
[preds: 3 ] [succs: 16 ]
i16 = i2;
"->"Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i16 < 0 goto i9 = i9 + 1;
";
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i16 < 0 goto i9 = i9 + 1;
"->"Block 17:
[preds: 16 ] [succs: 18 21 ]
i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16);
i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17);
i19 = i16;
if i16 <= 0 goto (branch);
";
    "Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i16 < 0 goto i9 = i9 + 1;
"->"Block 28:
[preds: 16 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
";
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16);
i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17);
i19 = i16;
if i16 <= 0 goto (branch);
"->"Block 18:
[preds: 17 ] [succs: 19 21 ]
if i16 >= i2 goto (branch);
";
    "Block 17:
[preds: 16 ] [succs: 18 21 ]
i17 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r8, 0, i16);
i18 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(0, i17);
i19 = i16;
if i16 <= 0 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
";
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i16 >= i2 goto (branch);
"->"Block 19:
[preds: 18 ] [succs: 20 21 ]
$i5 = i16 - 1;
i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20);
if $z0 == 0 goto (branch);
";
    "Block 18:
[preds: 17 ] [succs: 19 21 ]
if i16 >= i2 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i5 = i16 - 1;
i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20);
if $z0 == 0 goto (branch);
"->"Block 20:
[preds: 19 ] [succs: 21 ]
i19 = i19 + 1;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i5 = i16 - 1;
i20 = virtualinvoke r8.<java.lang.String: int codePointAt(int)>($i5);
$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i20);
if $z0 == 0 goto (branch);
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
";
    "Block 20:
[preds: 19 ] [succs: 21 ]
i19 = i19 + 1;
"->"Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
";
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
"->"Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r9 = new java.lang.StringBuilder];
";
    "Block 21:
[preds: 17 18 19 20 ] [succs: 22 23 ]
if i18 == i19 goto $z4 = 0;
"->"Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
";
    "Block 22:
[preds: 21 ] [succs: 24 ]
$z4 = 1;
goto [?= $r9 = new java.lang.StringBuilder];
"->"Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19);
$i3 = neg i17;
i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3);
if i21 == 0 goto $z5 = 0;
";
    "Block 23:
[preds: 21 ] [succs: 24 ]
$z4 = 0;
"->"Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19);
$i3 = neg i17;
i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3);
if i21 == 0 goto $z5 = 0;
";
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19);
$i3 = neg i17;
i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3);
if i21 == 0 goto $z5 = 0;
"->"Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r16 = new java.lang.StringBuilder];
";
    "Block 24:
[preds: 22 23 ] [succs: 25 26 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r15, i18, i19);
$i3 = neg i17;
i21 = virtualinvoke r8.<java.lang.String: int offsetByCodePoints(int,int)>(i16, $i3);
if i21 == 0 goto $z5 = 0;
"->"Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
";
    "Block 25:
[preds: 24 ] [succs: 27 ]
$z5 = 1;
goto [?= $r16 = new java.lang.StringBuilder];
"->"Block 27:
[preds: 25 26 ] [succs: 16 ]
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i4 = neg i17;
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0);
i16 = i16 + -1;
goto [?= (branch)];
";
    "Block 26:
[preds: 24 ] [succs: 27 ]
$z5 = 0;
"->"Block 27:
[preds: 25 26 ] [succs: 16 ]
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i4 = neg i17;
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0);
i16 = i16 + -1;
goto [?= (branch)];
";
    "Block 27:
[preds: 25 26 ] [succs: 16 ]
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$i4 = neg i17;
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r24, i21, 0);
i16 = i16 + -1;
goto [?= (branch)];
"->"Block 16:
[preds: 15 27 ] [succs: 17 28 ]
if i16 < 0 goto i9 = i9 + 1;
";
    "Block 28:
[preds: 16 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= $r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>];
"->"Block 1:
[preds: 0 28 ] [succs: 2 29 ]
$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>;
$i0 = lengthof $r1;
if i9 >= $i0 goto return;
";
}
