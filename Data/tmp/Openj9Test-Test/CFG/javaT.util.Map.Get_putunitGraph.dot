digraph "unitGraph" {
    "r1 := @parameter0: java.util.Map"
    "r2 := @parameter1: java.lang.Character"
    "r3 := @parameter2: java.lang.Boolean"
    "r0 := @parameter3: java.lang.Boolean"
    "if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)"
    "$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5)"
    "$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()"
    "$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6)"
    "$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)"
    "staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0)"
    "$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)"
    "staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3)"
    "$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0)"
    "$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()"
    "$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1)"
    "$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2)"
    "$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()"
    "$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3)"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3)"
    "$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>()"
    "if $z4 != 0 goto $z7 = 0"
    "$z7 = 1"
    "goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)]"
    "$z7 = 0"
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)"
    "return"
    "r1 := @parameter0: java.util.Map"->"r2 := @parameter1: java.lang.Character";
    "r2 := @parameter1: java.lang.Character"->"r3 := @parameter2: java.lang.Boolean";
    "r3 := @parameter2: java.lang.Boolean"->"r0 := @parameter3: java.lang.Boolean";
    "r0 := @parameter3: java.lang.Boolean"->"if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)";
    "if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)"->"$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0)";
    "if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)"->"$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)";
    "$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5)"->"$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()";
    "$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()"->"$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0)";
    "$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6)"->"$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)";
    "$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)"->"staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0)";
    "staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0)"->"$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)";
    "$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)"->"staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3)";
    "staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3)"->"$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)";
    "$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0)"->"$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()";
    "$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()"->"$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2)";
    "$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1)"->"$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3)";
    "$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2)"->"$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()";
    "$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()"->"$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3)";
    "$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3)"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3)"->"$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>()";
    "$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>()"->"if $z4 != 0 goto $z7 = 0";
    "if $z4 != 0 goto $z7 = 0"->"$z7 = 1";
    "if $z4 != 0 goto $z7 = 0"->"$z7 = 0";
    "$z7 = 1"->"goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)]";
    "goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)]"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)";
    "$z7 = 0"->"staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)";
    "staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)"->"return";
}
