digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Type;
r12 := @parameter1: java.lang.String;
$z0 = r0 instanceof java.lang.reflect.ParameterizedType;
if $z0 == 0 goto $z1 = r0 instanceof java.lang.reflect.TypeVariable;
"
    "Block 1:
[preds: 0 ] [succs: 16 ]
r47 = (java.lang.reflect.ParameterizedType) r0;
$r46 = interfaceinvoke r47.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r46, \"type argument\", r12);
goto [?= return];
"
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = r0 instanceof java.lang.reflect.TypeVariable;
if $z1 == 0 goto $z2 = r0 instanceof java.lang.reflect.WildcardType;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
r48 = (java.lang.reflect.TypeVariable) r0;
$r40 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r40, \"bound\", r12);
r49 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
$z6 = r49 instanceof java.lang.reflect.Type;
if $z6 == 0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r42 = (java.lang.reflect.Type) r49;
$r41 = new java.lang.StringBuilder;
specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"declaration containing \");
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r42, $r45);
"
    "Block 5:
[preds: 3 4 ] [succs: 16 ]
goto [?= return];
"
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$z2 = r0 instanceof java.lang.reflect.WildcardType;
if $z2 == 0 goto $z3 = r0 instanceof java.lang.Class;
"
    "Block 7:
[preds: 6 ] [succs: 16 ]
r50 = (java.lang.reflect.WildcardType) r0;
$r30 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
$r31 = new java.lang.StringBuilder;
specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r30, \"lower bound\", $r34);
$r35 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
$r36 = new java.lang.StringBuilder;
specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r35, \"upper bound\", $r39);
goto [?= return];
"
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$z3 = r0 instanceof java.lang.Class;
if $z3 == 0 goto $z4 = r0 instanceof java.lang.reflect.GenericArrayType;
"
    "Block 9:
[preds: 8 ] [succs: 16 ]
r51 = (java.lang.Class) r0;
$r21 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
$r22 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r21, \"superinterface\", $r22);
$r23 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"superclass of \");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r51);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r23, $r27);
$r28 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$r29 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r28, \"type parameter\", $r29);
goto [?= return];
"
    "Block 10:
[preds: 8 ] [succs: 11 15 ]
$z4 = r0 instanceof java.lang.reflect.GenericArrayType;
if $z4 == 0 goto $r1 = new java.lang.StringBuilder;
"
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
r52 = (java.lang.reflect.GenericArrayType) r0;
r53 = interfaceinvoke r52.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
$z5 = r53 instanceof java.lang.Class;
if $z5 == 0 goto $r10 = new java.lang.StringBuilder;
"
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Type \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" uses GenericArrayType when plain array would do, in \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r20);
goto [?= (branch)];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"component type of \");
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>(r53, $r14);
"
    "Block 14:
[preds: 12 13 ] [succs: 16 ]
goto [?= return];
"
    "Block 15:
[preds: 10 ] [succs: 16 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TEST BUG: mutant Type \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (a \");
$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();
$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r9);
"
    "Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Type;
r12 := @parameter1: java.lang.String;
$z0 = r0 instanceof java.lang.reflect.ParameterizedType;
if $z0 == 0 goto $z1 = r0 instanceof java.lang.reflect.TypeVariable;
"->"Block 1:
[preds: 0 ] [succs: 16 ]
r47 = (java.lang.reflect.ParameterizedType) r0;
$r46 = interfaceinvoke r47.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r46, \"type argument\", r12);
goto [?= return];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Type;
r12 := @parameter1: java.lang.String;
$z0 = r0 instanceof java.lang.reflect.ParameterizedType;
if $z0 == 0 goto $z1 = r0 instanceof java.lang.reflect.TypeVariable;
"->"Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = r0 instanceof java.lang.reflect.TypeVariable;
if $z1 == 0 goto $z2 = r0 instanceof java.lang.reflect.WildcardType;
";
    "Block 1:
[preds: 0 ] [succs: 16 ]
r47 = (java.lang.reflect.ParameterizedType) r0;
$r46 = interfaceinvoke r47.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r46, \"type argument\", r12);
goto [?= return];
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = r0 instanceof java.lang.reflect.TypeVariable;
if $z1 == 0 goto $z2 = r0 instanceof java.lang.reflect.WildcardType;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
r48 = (java.lang.reflect.TypeVariable) r0;
$r40 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r40, \"bound\", r12);
r49 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
$z6 = r49 instanceof java.lang.reflect.Type;
if $z6 == 0 goto (branch);
";
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = r0 instanceof java.lang.reflect.TypeVariable;
if $z1 == 0 goto $z2 = r0 instanceof java.lang.reflect.WildcardType;
"->"Block 6:
[preds: 2 ] [succs: 7 8 ]
$z2 = r0 instanceof java.lang.reflect.WildcardType;
if $z2 == 0 goto $z3 = r0 instanceof java.lang.Class;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
r48 = (java.lang.reflect.TypeVariable) r0;
$r40 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r40, \"bound\", r12);
r49 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
$z6 = r49 instanceof java.lang.reflect.Type;
if $z6 == 0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 5 ]
$r42 = (java.lang.reflect.Type) r49;
$r41 = new java.lang.StringBuilder;
specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"declaration containing \");
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r42, $r45);
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
r48 = (java.lang.reflect.TypeVariable) r0;
$r40 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r40, \"bound\", r12);
r49 = interfaceinvoke r48.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
$z6 = r49 instanceof java.lang.reflect.Type;
if $z6 == 0 goto (branch);
"->"Block 5:
[preds: 3 4 ] [succs: 16 ]
goto [?= return];
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r42 = (java.lang.reflect.Type) r49;
$r41 = new java.lang.StringBuilder;
specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"declaration containing \");
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r42, $r45);
"->"Block 5:
[preds: 3 4 ] [succs: 16 ]
goto [?= return];
";
    "Block 5:
[preds: 3 4 ] [succs: 16 ]
goto [?= return];
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$z2 = r0 instanceof java.lang.reflect.WildcardType;
if $z2 == 0 goto $z3 = r0 instanceof java.lang.Class;
"->"Block 7:
[preds: 6 ] [succs: 16 ]
r50 = (java.lang.reflect.WildcardType) r0;
$r30 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
$r31 = new java.lang.StringBuilder;
specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r30, \"lower bound\", $r34);
$r35 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
$r36 = new java.lang.StringBuilder;
specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r35, \"upper bound\", $r39);
goto [?= return];
";
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$z2 = r0 instanceof java.lang.reflect.WildcardType;
if $z2 == 0 goto $z3 = r0 instanceof java.lang.Class;
"->"Block 8:
[preds: 6 ] [succs: 9 10 ]
$z3 = r0 instanceof java.lang.Class;
if $z3 == 0 goto $z4 = r0 instanceof java.lang.reflect.GenericArrayType;
";
    "Block 7:
[preds: 6 ] [succs: 16 ]
r50 = (java.lang.reflect.WildcardType) r0;
$r30 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
$r31 = new java.lang.StringBuilder;
specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r30, \"lower bound\", $r34);
$r35 = interfaceinvoke r50.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
$r36 = new java.lang.StringBuilder;
specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"wildcard type in \");
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r35, \"upper bound\", $r39);
goto [?= return];
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$z3 = r0 instanceof java.lang.Class;
if $z3 == 0 goto $z4 = r0 instanceof java.lang.reflect.GenericArrayType;
"->"Block 9:
[preds: 8 ] [succs: 16 ]
r51 = (java.lang.Class) r0;
$r21 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
$r22 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r21, \"superinterface\", $r22);
$r23 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"superclass of \");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r51);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r23, $r27);
$r28 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$r29 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r28, \"type parameter\", $r29);
goto [?= return];
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$z3 = r0 instanceof java.lang.Class;
if $z3 == 0 goto $z4 = r0 instanceof java.lang.reflect.GenericArrayType;
"->"Block 10:
[preds: 8 ] [succs: 11 15 ]
$z4 = r0 instanceof java.lang.reflect.GenericArrayType;
if $z4 == 0 goto $r1 = new java.lang.StringBuilder;
";
    "Block 9:
[preds: 8 ] [succs: 16 ]
r51 = (java.lang.Class) r0;
$r21 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
$r22 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r21, \"superinterface\", $r22);
$r23 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"superclass of \");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r51);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r23, $r27);
$r28 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$r29 = virtualinvoke r51.<java.lang.Class: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r28, \"type parameter\", $r29);
goto [?= return];
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
    "Block 10:
[preds: 8 ] [succs: 11 15 ]
$z4 = r0 instanceof java.lang.reflect.GenericArrayType;
if $z4 == 0 goto $r1 = new java.lang.StringBuilder;
"->"Block 11:
[preds: 10 ] [succs: 12 13 ]
r52 = (java.lang.reflect.GenericArrayType) r0;
r53 = interfaceinvoke r52.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
$z5 = r53 instanceof java.lang.Class;
if $z5 == 0 goto $r10 = new java.lang.StringBuilder;
";
    "Block 10:
[preds: 8 ] [succs: 11 15 ]
$z4 = r0 instanceof java.lang.reflect.GenericArrayType;
if $z4 == 0 goto $r1 = new java.lang.StringBuilder;
"->"Block 15:
[preds: 10 ] [succs: 16 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TEST BUG: mutant Type \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (a \");
$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();
$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r9);
";
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
r52 = (java.lang.reflect.GenericArrayType) r0;
r53 = interfaceinvoke r52.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
$z5 = r53 instanceof java.lang.Class;
if $z5 == 0 goto $r10 = new java.lang.StringBuilder;
"->"Block 12:
[preds: 11 ] [succs: 14 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Type \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" uses GenericArrayType when plain array would do, in \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r20);
goto [?= (branch)];
";
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
r52 = (java.lang.reflect.GenericArrayType) r0;
r53 = interfaceinvoke r52.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
$z5 = r53 instanceof java.lang.Class;
if $z5 == 0 goto $r10 = new java.lang.StringBuilder;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"component type of \");
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>(r53, $r14);
";
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Type \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" uses GenericArrayType when plain array would do, in \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r20);
goto [?= (branch)];
"->"Block 14:
[preds: 12 13 ] [succs: 16 ]
goto [?= return];
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"component type of \");
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>(r53, $r14);
"->"Block 14:
[preds: 12 13 ] [succs: 16 ]
goto [?= return];
";
    "Block 14:
[preds: 12 13 ] [succs: 16 ]
goto [?= return];
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
    "Block 15:
[preds: 10 ] [succs: 16 ]
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TEST BUG: mutant Type \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (a \");
$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();
$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void fail(java.lang.String)>($r9);
"->"Block 16:
[preds: 1 5 7 9 14 15 ] [succs: ]
return;
";
}
