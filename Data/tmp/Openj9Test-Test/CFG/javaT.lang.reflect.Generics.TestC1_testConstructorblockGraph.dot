digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\");
r1 = newarray (java.lang.Class)[1];
r1[0] = class \"Ljava/lang/Object;\";
$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);
r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r5 = r4[0];
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i3 = lengthof r4;
if $i3 == 1 goto r5 = r4[0];
"
    "Block 2:
[preds: 1 ] [succs: ]
$r23 = new java.lang.AssertionError;
specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have one generic parameter type\");
throw $r23;
"
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r5 = r4[0];
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z8 = r5 instanceof java.lang.reflect.TypeVariable;
if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r22 = new java.lang.AssertionError;
specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C1(T) is a type variable\");
throw $r22;
"
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r6 = (java.lang.reflect.TypeVariable) r5;
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 8:
[preds: 7 ] [succs: ]
$r16 = new java.lang.AssertionError;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C is T, not \");
$r19 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);
throw $r16;
"
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$i2 = lengthof r7;
if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 11:
[preds: 10 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\");
throw $r14;
"
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r12 = r7[0];
if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"
    "Block 14:
[preds: 13 ] [succs: ]
$r13 = new java.lang.AssertionError;
specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\");
throw $r13;
"
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$i1 = lengthof r8;
if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"
    "Block 17:
[preds: 16 ] [succs: ]
$r11 = new java.lang.AssertionError;
specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no generic exception types\");
throw $r11;
"
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto return;
"
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i0 = lengthof r9;
if $i0 == 0 goto return;
"
    "Block 20:
[preds: 19 ] [succs: ]
$r10 = new java.lang.AssertionError;
specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no type parameters\");
throw $r10;
"
    "Block 21:
[preds: 18 19 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\");
r1 = newarray (java.lang.Class)[1];
r1[0] = class \"Ljava/lang/Object;\";
$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);
r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r5 = r4[0];
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$i3 = lengthof r4;
if $i3 == 1 goto r5 = r4[0];
";
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\");
r1 = newarray (java.lang.Class)[1];
r1[0] = class \"Ljava/lang/Object;\";
$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);
r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r5 = r4[0];
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r5 = r4[0];
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i3 = lengthof r4;
if $i3 == 1 goto r5 = r4[0];
"->"Block 2:
[preds: 1 ] [succs: ]
$r23 = new java.lang.AssertionError;
specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have one generic parameter type\");
throw $r23;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i3 = lengthof r4;
if $i3 == 1 goto r5 = r4[0];
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r5 = r4[0];
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r5 = r4[0];
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$z8 = r5 instanceof java.lang.reflect.TypeVariable;
if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r5 = r4[0];
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r6 = (java.lang.reflect.TypeVariable) r5;
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z8 = r5 instanceof java.lang.reflect.TypeVariable;
if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"->"Block 5:
[preds: 4 ] [succs: ]
$r22 = new java.lang.AssertionError;
specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C1(T) is a type variable\");
throw $r22;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z8 = r5 instanceof java.lang.reflect.TypeVariable;
if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5;
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r6 = (java.lang.reflect.TypeVariable) r5;
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r6 = (java.lang.reflect.TypeVariable) r5;
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r6 = (java.lang.reflect.TypeVariable) r5;
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 8:
[preds: 7 ] [succs: ]
$r16 = new java.lang.AssertionError;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C is T, not \");
$r19 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);
throw $r16;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
$i2 = lengthof r7;
if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$i2 = lengthof r7;
if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 11:
[preds: 10 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\");
throw $r14;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$i2 = lengthof r7;
if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
$r12 = r7[0];
if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r12 = r7[0];
if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 14:
[preds: 13 ] [succs: ]
$r13 = new java.lang.AssertionError;
specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\");
throw $r13;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r12 = r7[0];
if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"->"Block 16:
[preds: 15 ] [succs: 17 18 ]
$i1 = lengthof r8;
if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto return;
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$i1 = lengthof r8;
if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"->"Block 17:
[preds: 16 ] [succs: ]
$r11 = new java.lang.AssertionError;
specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no generic exception types\");
throw $r11;
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$i1 = lengthof r8;
if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto return;
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto return;
"->"Block 19:
[preds: 18 ] [succs: 20 21 ]
$i0 = lengthof r9;
if $i0 == 0 goto return;
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto return;
"->"Block 21:
[preds: 18 19 ] [succs: ]
return;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i0 = lengthof r9;
if $i0 == 0 goto return;
"->"Block 20:
[preds: 19 ] [succs: ]
$r10 = new java.lang.AssertionError;
specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no type parameters\");
throw $r10;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$i0 = lengthof r9;
if $i0 == 0 goto return;
"->"Block 21:
[preds: 18 19 ] [succs: ]
return;
";
}
