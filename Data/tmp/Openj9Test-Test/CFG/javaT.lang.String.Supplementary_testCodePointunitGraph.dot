digraph "unitGraph" {
    "z0 := @parameter0: boolean"
    "r0 := @parameter1: java.lang.String"
    "i0 := @parameter2: int"
    "z2 = 0"
    "if z0 == 0 goto $i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0)"
    "goto [?= i2 = $i1]"
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"
    "i2 = $i1"
    "goto [?= (branch)]"
    "$r2 := @caughtexception"
    "r3 = $r2"
    "z2 = 1"
    "if z2 != 0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= $r1 = new java.lang.StringBuilder]"
    "$z4 = 0"
    "$r1 = new java.lang.StringBuilder"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePoint\")"
    "if z0 == 0 goto $r5 = \"Before\""
    "$r5 = \"At\""
    "goto [?= $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)]"
    "$r5 = \"Before\""
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") for <\")"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"> should throw StringIndexOutOfBoundsPointerException.\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r12)"
    "return"
    "z0 := @parameter0: boolean"->"r0 := @parameter1: java.lang.String";
    "r0 := @parameter1: java.lang.String"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"z2 = 0";
    "z2 = 0"->"if z0 == 0 goto $i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)";
    "z2 = 0"->"$r2 := @caughtexception";
    "if z0 == 0 goto $i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"->"$i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0)";
    "if z0 == 0 goto $i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"->"$i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)";
    "if z0 == 0 goto $i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"->"$r2 := @caughtexception";
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0)"->"goto [?= i2 = $i1]";
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0)"->"$r2 := @caughtexception";
    "goto [?= i2 = $i1]"->"i2 = $i1";
    "goto [?= i2 = $i1]"->"$r2 := @caughtexception";
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"->"i2 = $i1";
    "$i1 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i0)"->"$r2 := @caughtexception";
    "i2 = $i1"->"goto [?= (branch)]";
    "i2 = $i1"->"$r2 := @caughtexception";
    "goto [?= (branch)]"->"if z2 != 0 goto $z4 = 0";
    "$r2 := @caughtexception"->"r3 = $r2";
    "r3 = $r2"->"z2 = 1";
    "z2 = 1"->"if z2 != 0 goto $z4 = 0";
    "if z2 != 0 goto $z4 = 0"->"$z4 = 1";
    "if z2 != 0 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= $r1 = new java.lang.StringBuilder]";
    "goto [?= $r1 = new java.lang.StringBuilder]"->"$r1 = new java.lang.StringBuilder";
    "$z4 = 0"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePoint\")";
    "$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePoint\")"->"if z0 == 0 goto $r5 = \"Before\"";
    "if z0 == 0 goto $r5 = \"Before\""->"$r5 = \"At\"";
    "if z0 == 0 goto $r5 = \"Before\""->"$r5 = \"Before\"";
    "$r5 = \"At\""->"goto [?= $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)]";
    "goto [?= $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)]"->"$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)";
    "$r5 = \"Before\""->"$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)";
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\")"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") for <\")";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") for <\")"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"> should throw StringIndexOutOfBoundsPointerException.\")";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"> should throw StringIndexOutOfBoundsPointerException.\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r12)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String)>($z4, $r12)"->"return";
}
