digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r10 := @parameter0: java.lang.String[];
i0 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 >= 2048 goto i1 = 0;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference;
$r9 = newarray (byte)[32768];
specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9);
r11 = $r8;
i0 = i0 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
i1 = 0;
i2 = 0;
r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>;
"
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>;
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>();
if $r7 != null goto i2 = i2 + 1;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
i1 = i1 + 1;
goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
i2 = i2 + 1;
"
    "Block 8:
[preds: 6 7 ] [succs: 4 ]
r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>;
goto [?= (branch)];
"
    "Block 9:
[preds: 4 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream err>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" full, \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" empty \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r10 := @parameter0: java.lang.String[];
i0 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 >= 2048 goto i1 = 0;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 >= 2048 goto i1 = 0;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference;
$r9 = newarray (byte)[32768];
specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9);
r11 = $r8;
i0 = i0 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 >= 2048 goto i1 = 0;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
i1 = 0;
i2 = 0;
r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r8 = new javaT.lang.ref.SoftReference.Bash$TestReference;
$r9 = newarray (byte)[32768];
specialinvoke $r8.<javaT.lang.ref.SoftReference.Bash$TestReference: void <init>(java.lang.Object)>($r9);
r11 = $r8;
i0 = i0 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 >= 2048 goto i1 = 0;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
i1 = 0;
i2 = 0;
r12 = <javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference head>;
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>;
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>();
if $r7 != null goto i2 = i2 + 1;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>;
"->"Block 9:
[preds: 4 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream err>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" full, \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" empty \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);
return;
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>();
if $r7 != null goto i2 = i2 + 1;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
i1 = i1 + 1;
goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r7 = virtualinvoke r12.<javaT.lang.ref.SoftReference.Bash$TestReference: java.lang.Object get()>();
if $r7 != null goto i2 = i2 + 1;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
i2 = i2 + 1;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
i1 = i1 + 1;
goto [?= r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>];
"->"Block 8:
[preds: 6 7 ] [succs: 4 ]
r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>;
goto [?= (branch)];
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
i2 = i2 + 1;
"->"Block 8:
[preds: 6 7 ] [succs: 4 ]
r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>;
goto [?= (branch)];
";
    "Block 8:
[preds: 6 7 ] [succs: 4 ]
r12 = r12.<javaT.lang.ref.SoftReference.Bash$TestReference: javaT.lang.ref.SoftReference.Bash$TestReference next>;
goto [?= (branch)];
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if r12 == null goto $r1 = <java.lang.System: java.io.PrintStream err>;
";
}
