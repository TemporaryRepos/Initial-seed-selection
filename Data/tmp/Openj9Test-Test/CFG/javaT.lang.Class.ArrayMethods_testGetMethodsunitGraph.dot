digraph "unitGraph" {
    "r6 := @this: javaT.lang.Class.ArrayMethods"
    "$r0 = newmultiarray (java.lang.Integer)[0][0][0]"
    "$r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>()"
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()"
    "r3 = r2"
    "i0 = lengthof r3"
    "i3 = 0"
    "if i3 >= i0 goto return"
    "r4 = r3[i3]"
    "$r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>()"
    "$z0 = virtualinvoke $r5.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(\"clone\")"
    "if $z0 == 0 goto i3 = i3 + 1"
    "$i1 = r6.<javaT.lang.Class.ArrayMethods: int failed>"
    "$i2 = $i1 + 1"
    "r6.<javaT.lang.Class.ArrayMethods: int failed> = $i2"
    "$r7 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"getMethods() Should not find clone()\")"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "return"
    "r6 := @this: javaT.lang.Class.ArrayMethods"->"$r0 = newmultiarray (java.lang.Integer)[0][0][0]";
    "$r0 = newmultiarray (java.lang.Integer)[0][0][0]"->"$r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>()";
    "$r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>()"->"r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()";
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()"->"r3 = r2";
    "r3 = r2"->"i0 = lengthof r3";
    "i0 = lengthof r3"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto return";
    "if i3 >= i0 goto return"->"r4 = r3[i3]";
    "if i3 >= i0 goto return"->"return";
    "r4 = r3[i3]"->"$r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>()";
    "$r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>()"->"$z0 = virtualinvoke $r5.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(\"clone\")";
    "$z0 = virtualinvoke $r5.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(\"clone\")"->"if $z0 == 0 goto i3 = i3 + 1";
    "if $z0 == 0 goto i3 = i3 + 1"->"$i1 = r6.<javaT.lang.Class.ArrayMethods: int failed>";
    "if $z0 == 0 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "$i1 = r6.<javaT.lang.Class.ArrayMethods: int failed>"->"$i2 = $i1 + 1";
    "$i2 = $i1 + 1"->"r6.<javaT.lang.Class.ArrayMethods: int failed> = $i2";
    "r6.<javaT.lang.Class.ArrayMethods: int failed> = $i2"->"$r7 = <java.lang.System: java.io.PrintStream out>";
    "$r7 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"getMethods() Should not find clone()\")";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"getMethods() Should not find clone()\")"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto return";
}
