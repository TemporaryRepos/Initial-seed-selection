digraph "unitGraph" {
    "i3 = 0"
    "$r0 = newarray (double[])[6]"
    "$r1 = newarray (double)[2]"
    "$r1[0] = 0.49999999999999994"
    "$r1[1] = 0.0"
    "$r0[0] = $r1"
    "$r2 = newarray (double)[2]"
    "$r2[0] = 0.5"
    "$r2[1] = 1.0"
    "$r0[1] = $r2"
    "$r3 = newarray (double)[2]"
    "$r3[0] = 0.5000000000000001"
    "$r3[1] = 1.0"
    "$r0[2] = $r3"
    "$r4 = newarray (double)[2]"
    "$r4[0] = -0.49999999999999994"
    "$r4[1] = 0.0"
    "$r0[3] = $r4"
    "$r5 = newarray (double)[2]"
    "$r5[0] = -0.5"
    "$r5[1] = 0.0"
    "$r0[4] = $r5"
    "$r6 = newarray (double)[2]"
    "$r6[0] = -0.5000000000000001"
    "$r6[1] = -1.0"
    "$r0[5] = $r6"
    "r7 = $r0"
    "r8 = r7"
    "i0 = lengthof r8"
    "i4 = 0"
    "if i4 >= i0 goto return i3"
    "r9 = r8[i4]"
    "$d2 = r9[0]"
    "$d0 = r9[1]"
    "$l1 = (long) $d0"
    "$d1 = (double) $l1"
    "$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testNearHalfCases(double,double)>($d2, $d1)"
    "i3 = i3 + $i2"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "return i3"
    "i3 = 0"->"$r0 = newarray (double[])[6]";
    "$r0 = newarray (double[])[6]"->"$r1 = newarray (double)[2]";
    "$r1 = newarray (double)[2]"->"$r1[0] = 0.49999999999999994";
    "$r1[0] = 0.49999999999999994"->"$r1[1] = 0.0";
    "$r1[1] = 0.0"->"$r0[0] = $r1";
    "$r0[0] = $r1"->"$r2 = newarray (double)[2]";
    "$r2 = newarray (double)[2]"->"$r2[0] = 0.5";
    "$r2[0] = 0.5"->"$r2[1] = 1.0";
    "$r2[1] = 1.0"->"$r0[1] = $r2";
    "$r0[1] = $r2"->"$r3 = newarray (double)[2]";
    "$r3 = newarray (double)[2]"->"$r3[0] = 0.5000000000000001";
    "$r3[0] = 0.5000000000000001"->"$r3[1] = 1.0";
    "$r3[1] = 1.0"->"$r0[2] = $r3";
    "$r0[2] = $r3"->"$r4 = newarray (double)[2]";
    "$r4 = newarray (double)[2]"->"$r4[0] = -0.49999999999999994";
    "$r4[0] = -0.49999999999999994"->"$r4[1] = 0.0";
    "$r4[1] = 0.0"->"$r0[3] = $r4";
    "$r0[3] = $r4"->"$r5 = newarray (double)[2]";
    "$r5 = newarray (double)[2]"->"$r5[0] = -0.5";
    "$r5[0] = -0.5"->"$r5[1] = 0.0";
    "$r5[1] = 0.0"->"$r0[4] = $r5";
    "$r0[4] = $r5"->"$r6 = newarray (double)[2]";
    "$r6 = newarray (double)[2]"->"$r6[0] = -0.5000000000000001";
    "$r6[0] = -0.5000000000000001"->"$r6[1] = -1.0";
    "$r6[1] = -1.0"->"$r0[5] = $r6";
    "$r0[5] = $r6"->"r7 = $r0";
    "r7 = $r0"->"r8 = r7";
    "r8 = r7"->"i0 = lengthof r8";
    "i0 = lengthof r8"->"i4 = 0";
    "i4 = 0"->"if i4 >= i0 goto return i3";
    "if i4 >= i0 goto return i3"->"r9 = r8[i4]";
    "if i4 >= i0 goto return i3"->"return i3";
    "r9 = r8[i4]"->"$d2 = r9[0]";
    "$d2 = r9[0]"->"$d0 = r9[1]";
    "$d0 = r9[1]"->"$l1 = (long) $d0";
    "$l1 = (long) $d0"->"$d1 = (double) $l1";
    "$d1 = (double) $l1"->"$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testNearHalfCases(double,double)>($d2, $d1)";
    "$i2 = staticinvoke <javaT.lang.Math.RoundTests: int testNearHalfCases(double,double)>($d2, $d1)"->"i3 = i3 + $i2";
    "i3 = i3 + $i2"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i0 goto return i3";
}
