digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.AccessibleObject;
r3 := @parameter1: java.lang.reflect.AccessibleObject;
$r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r2 = (javaT.lang.reflect.annotationSharing.Bar) $r1;
$r4 = virtualinvoke r3.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r5 = (javaT.lang.reflect.annotationSharing.Bar) $r4;
if r2 == r5 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r6 = new java.lang.RuntimeException;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be ==\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r6;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.AccessibleObject;
r3 := @parameter1: java.lang.reflect.AccessibleObject;
$r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r2 = (javaT.lang.reflect.annotationSharing.Bar) $r1;
$r4 = virtualinvoke r3.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r5 = (javaT.lang.reflect.annotationSharing.Bar) $r4;
if r2 == r5 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r6 = new java.lang.RuntimeException;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be ==\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r6;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.AccessibleObject;
r3 := @parameter1: java.lang.reflect.AccessibleObject;
$r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r2 = (javaT.lang.reflect.annotationSharing.Bar) $r1;
$r4 = virtualinvoke r3.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class \"LjavaT/lang/reflect/annotationSharing/Bar;\");
r5 = (javaT.lang.reflect.annotationSharing.Bar) $r4;
if r2 == r5 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
