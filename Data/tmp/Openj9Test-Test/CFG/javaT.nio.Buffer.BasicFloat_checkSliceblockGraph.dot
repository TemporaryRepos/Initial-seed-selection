digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.nio.FloatBuffer;
r0 := @parameter1: java.nio.FloatBuffer;
$i0 = virtualinvoke r0.<java.nio.FloatBuffer: int position()>();
$l1 = (long) $i0;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1);
$i2 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l3 = (long) $i2;
$i4 = virtualinvoke r0.<java.nio.FloatBuffer: int limit()>();
$l5 = (long) $i4;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5);
$i6 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l7 = (long) $i6;
$i8 = virtualinvoke r0.<java.nio.FloatBuffer: int capacity()>();
$l9 = (long) $i8;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9);
$z0 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isDirect()>();
$z1 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isDirect()>();
if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
$z3 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isReadOnly()>();
if $z2 == $z3 goto return;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0);
"
    "Block 4:
[preds: 2 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.nio.FloatBuffer;
r0 := @parameter1: java.nio.FloatBuffer;
$i0 = virtualinvoke r0.<java.nio.FloatBuffer: int position()>();
$l1 = (long) $i0;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1);
$i2 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l3 = (long) $i2;
$i4 = virtualinvoke r0.<java.nio.FloatBuffer: int limit()>();
$l5 = (long) $i4;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5);
$i6 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l7 = (long) $i6;
$i8 = virtualinvoke r0.<java.nio.FloatBuffer: int capacity()>();
$l9 = (long) $i8;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9);
$z0 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isDirect()>();
$z1 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isDirect()>();
if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
"->"Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.nio.FloatBuffer;
r0 := @parameter1: java.nio.FloatBuffer;
$i0 = virtualinvoke r0.<java.nio.FloatBuffer: int position()>();
$l1 = (long) $i0;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1);
$i2 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l3 = (long) $i2;
$i4 = virtualinvoke r0.<java.nio.FloatBuffer: int limit()>();
$l5 = (long) $i4;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5);
$i6 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
$l7 = (long) $i6;
$i8 = virtualinvoke r0.<java.nio.FloatBuffer: int capacity()>();
$l9 = (long) $i8;
staticinvoke <javaT.nio.Buffer.BasicFloat: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9);
$z0 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isDirect()>();
$z1 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isDirect()>();
if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
$z3 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isReadOnly()>();
if $z2 == $z3 goto return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
$z3 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isReadOnly()>();
if $z2 == $z3 goto return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
$z3 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isReadOnly()>();
if $z2 == $z3 goto return;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$z2 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isReadOnly()>();
$z3 = virtualinvoke r0.<java.nio.FloatBuffer: boolean isReadOnly()>();
if $z2 == $z3 goto return;
"->"Block 4:
[preds: 2 3 ] [succs: ]
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
staticinvoke <javaT.nio.Buffer.BasicFloat: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0);
"->"Block 4:
[preds: 2 3 ] [succs: ]
return;
";
}
