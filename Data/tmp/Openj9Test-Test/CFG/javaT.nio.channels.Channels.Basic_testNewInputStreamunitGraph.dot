digraph "unitGraph" {
    "r1 := @parameter0: java.io.File"
    "$r0 = new java.io.FileInputStream"
    "specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1)"
    "r2 = $r0"
    "r3 = virtualinvoke r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()"
    "r4 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>(r3)"
    "$r5 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "$i0 = virtualinvoke $r5.<java.lang.String: int length()>()"
    "$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"
    "$i2 = $i0 * $i1"
    "$i3 = $i2 * 3"
    "i4 = $i3 + 1"
    "r6 = newarray (byte)[i4]"
    "i16 = 0"
    "i17 = 0"
    "if i16 == -1 goto $i5 = virtualinvoke r4.<java.io.InputStream: int available()>()"
    "i17 = i17 + i16"
    "$l10 = virtualinvoke r3.<java.nio.channels.FileChannel: long size()>()"
    "$l11 = (long) i17"
    "$l12 = $l10 - $l11"
    "l18 = staticinvoke <java.lang.Math: long min(long,long)>($l12, 2147483647L)"
    "$i13 = virtualinvoke r4.<java.io.InputStream: int available()>()"
    "$i14 = (int) l18"
    "if $i13 == $i14 goto $i15 = i4 - i17"
    "$r14 = new java.lang.RuntimeException"
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available not useful or not maximally useful\")"
    "throw $r14"
    "$i15 = i4 - i17"
    "i16 = virtualinvoke r4.<java.io.InputStream: int read(byte[],int,int)>(r6, i17, $i15)"
    "goto [?= (branch)]"
    "$i5 = virtualinvoke r4.<java.io.InputStream: int available()>()"
    "if $i5 == 0 goto $r7 = new java.lang.String"
    "$r13 = new java.lang.RuntimeException"
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available() should return 0 at EOF\")"
    "throw $r13"
    "$r7 = new java.lang.String"
    "$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>"
    "specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r6, 0, i17, $r8)"
    "r15 = $r7"
    "$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "i6 = virtualinvoke $r9.<java.lang.String: int length()>()"
    "i19 = 0"
    "$i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"
    "if i19 >= $i7 goto virtualinvoke r4.<java.io.InputStream: void close()>()"
    "i20 = i19 + 1"
    "$i9 = i19 * i6"
    "$i8 = i20 * i6"
    "r10 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>($i9, $i8)"
    "$r11 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "$z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r11)"
    "if $z0 != 0 goto i19 = i20 + 1"
    "$r12 = new java.lang.RuntimeException"
    "specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")"
    "throw $r12"
    "i19 = i20 + 1"
    "goto [?= $i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]"
    "virtualinvoke r4.<java.io.InputStream: void close()>()"
    "virtualinvoke r2.<java.io.FileInputStream: void close()>()"
    "return"
    "r1 := @parameter0: java.io.File"->"$r0 = new java.io.FileInputStream";
    "$r0 = new java.io.FileInputStream"->"specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1)";
    "specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1)"->"r2 = $r0";
    "r2 = $r0"->"r3 = virtualinvoke r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()";
    "r3 = virtualinvoke r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()"->"r4 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>(r3)";
    "r4 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>(r3)"->"$r5 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "$r5 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"$i0 = virtualinvoke $r5.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke $r5.<java.lang.String: int length()>()"->"$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>";
    "$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"->"$i2 = $i0 * $i1";
    "$i2 = $i0 * $i1"->"$i3 = $i2 * 3";
    "$i3 = $i2 * 3"->"i4 = $i3 + 1";
    "i4 = $i3 + 1"->"r6 = newarray (byte)[i4]";
    "r6 = newarray (byte)[i4]"->"i16 = 0";
    "i16 = 0"->"i17 = 0";
    "i17 = 0"->"if i16 == -1 goto $i5 = virtualinvoke r4.<java.io.InputStream: int available()>()";
    "if i16 == -1 goto $i5 = virtualinvoke r4.<java.io.InputStream: int available()>()"->"i17 = i17 + i16";
    "if i16 == -1 goto $i5 = virtualinvoke r4.<java.io.InputStream: int available()>()"->"$i5 = virtualinvoke r4.<java.io.InputStream: int available()>()";
    "i17 = i17 + i16"->"$l10 = virtualinvoke r3.<java.nio.channels.FileChannel: long size()>()";
    "$l10 = virtualinvoke r3.<java.nio.channels.FileChannel: long size()>()"->"$l11 = (long) i17";
    "$l11 = (long) i17"->"$l12 = $l10 - $l11";
    "$l12 = $l10 - $l11"->"l18 = staticinvoke <java.lang.Math: long min(long,long)>($l12, 2147483647L)";
    "l18 = staticinvoke <java.lang.Math: long min(long,long)>($l12, 2147483647L)"->"$i13 = virtualinvoke r4.<java.io.InputStream: int available()>()";
    "$i13 = virtualinvoke r4.<java.io.InputStream: int available()>()"->"$i14 = (int) l18";
    "$i14 = (int) l18"->"if $i13 == $i14 goto $i15 = i4 - i17";
    "if $i13 == $i14 goto $i15 = i4 - i17"->"$r14 = new java.lang.RuntimeException";
    "if $i13 == $i14 goto $i15 = i4 - i17"->"$i15 = i4 - i17";
    "$r14 = new java.lang.RuntimeException"->"specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available not useful or not maximally useful\")";
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available not useful or not maximally useful\")"->"throw $r14";
    "$i15 = i4 - i17"->"i16 = virtualinvoke r4.<java.io.InputStream: int read(byte[],int,int)>(r6, i17, $i15)";
    "i16 = virtualinvoke r4.<java.io.InputStream: int read(byte[],int,int)>(r6, i17, $i15)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i16 == -1 goto $i5 = virtualinvoke r4.<java.io.InputStream: int available()>()";
    "$i5 = virtualinvoke r4.<java.io.InputStream: int available()>()"->"if $i5 == 0 goto $r7 = new java.lang.String";
    "if $i5 == 0 goto $r7 = new java.lang.String"->"$r13 = new java.lang.RuntimeException";
    "if $i5 == 0 goto $r7 = new java.lang.String"->"$r7 = new java.lang.String";
    "$r13 = new java.lang.RuntimeException"->"specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available() should return 0 at EOF\")";
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"available() should return 0 at EOF\")"->"throw $r13";
    "$r7 = new java.lang.String"->"$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>";
    "$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>"->"specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r6, 0, i17, $r8)";
    "specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r6, 0, i17, $r8)"->"r15 = $r7";
    "r15 = $r7"->"$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"i6 = virtualinvoke $r9.<java.lang.String: int length()>()";
    "i6 = virtualinvoke $r9.<java.lang.String: int length()>()"->"i19 = 0";
    "i19 = 0"->"$i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>";
    "$i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"->"if i19 >= $i7 goto virtualinvoke r4.<java.io.InputStream: void close()>()";
    "if i19 >= $i7 goto virtualinvoke r4.<java.io.InputStream: void close()>()"->"i20 = i19 + 1";
    "if i19 >= $i7 goto virtualinvoke r4.<java.io.InputStream: void close()>()"->"virtualinvoke r4.<java.io.InputStream: void close()>()";
    "i20 = i19 + 1"->"$i9 = i19 * i6";
    "$i9 = i19 * i6"->"$i8 = i20 * i6";
    "$i8 = i20 * i6"->"r10 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>($i9, $i8)";
    "r10 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>($i9, $i8)"->"$r11 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "$r11 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"$z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r11)";
    "$z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r11)"->"if $z0 != 0 goto i19 = i20 + 1";
    "if $z0 != 0 goto i19 = i20 + 1"->"$r12 = new java.lang.RuntimeException";
    "if $z0 != 0 goto i19 = i20 + 1"->"i19 = i20 + 1";
    "$r12 = new java.lang.RuntimeException"->"specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")";
    "specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")"->"throw $r12";
    "i19 = i20 + 1"->"goto [?= $i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]";
    "goto [?= $i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]"->"$i7 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>";
    "virtualinvoke r4.<java.io.InputStream: void close()>()"->"virtualinvoke r2.<java.io.FileInputStream: void close()>()";
    "virtualinvoke r2.<java.io.FileInputStream: void close()>()"->"return";
}
