digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "b3 = 0"
    "$i0 = staticinvoke <javaT.math.BigDecimal.RangeTests: int addBoundaryTest()>()"
    "i4 = b3 + $i0"
    "$i1 = staticinvoke <javaT.math.BigDecimal.RangeTests: int roundingConstructorTest()>()"
    "i5 = i4 + $i1"
    "$i2 = staticinvoke <javaT.math.BigDecimal.RangeTests: int minLongConstructorTest()>()"
    "i6 = i5 + $i2"
    "if i6 <= 0 goto return"
    "$r0 = new java.lang.RuntimeException"
    "$r1 = new java.lang.StringBuilder"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing.\")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5)"
    "throw $r0"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"b3 = 0";
    "b3 = 0"->"$i0 = staticinvoke <javaT.math.BigDecimal.RangeTests: int addBoundaryTest()>()";
    "$i0 = staticinvoke <javaT.math.BigDecimal.RangeTests: int addBoundaryTest()>()"->"i4 = b3 + $i0";
    "i4 = b3 + $i0"->"$i1 = staticinvoke <javaT.math.BigDecimal.RangeTests: int roundingConstructorTest()>()";
    "$i1 = staticinvoke <javaT.math.BigDecimal.RangeTests: int roundingConstructorTest()>()"->"i5 = i4 + $i1";
    "i5 = i4 + $i1"->"$i2 = staticinvoke <javaT.math.BigDecimal.RangeTests: int minLongConstructorTest()>()";
    "$i2 = staticinvoke <javaT.math.BigDecimal.RangeTests: int minLongConstructorTest()>()"->"i6 = i5 + $i2";
    "i6 = i5 + $i2"->"if i6 <= 0 goto return";
    "if i6 <= 0 goto return"->"$r0 = new java.lang.RuntimeException";
    "if i6 <= 0 goto return"->"return";
    "$r0 = new java.lang.RuntimeException"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"->"$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")";
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing.\")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing.\")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5)";
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5)"->"throw $r0";
}
