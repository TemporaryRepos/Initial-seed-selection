digraph "unitGraph" {
    "i1 := @parameter0: int"
    "i0 := @parameter1: int"
    "r0 := @parameter2: java.util.ArrayDeque"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r1)"
    "if i1 >= 33 goto $i2 = i1 + 2"
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r11)"
    "return i1"
    "$i2 = i1 + 2"
    "i5 = $i2 / 2"
    "if i1 < 51 goto (branch)"
    "if i5 >= 33 goto (branch)"
    "i5 = 33"
    "goto [?= $i6 = i1 - i5]"
    "if i1 < 85 goto (branch)"
    "if i5 >= 51 goto (branch)"
    "i5 = 51"
    "if i1 < 137 goto (branch)"
    "if i5 >= 85 goto (branch)"
    "i5 = 85"
    "if i1 < 223 goto $i6 = i1 - i5"
    "if i5 >= 137 goto $i6 = i1 - i5"
    "i5 = 137"
    "$i6 = i1 - i5"
    "if $i6 < i0 goto $i3 = i1 - i5"
    "$r2 = new java.lang.AssertionError"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10)"
    "throw $r2"
    "$i3 = i1 - i5"
    "$i4 = staticinvoke <javaT.util.Arrays.TimSortStackSize: int build(int,int,java.util.ArrayDeque)>(i5, $i3, r0)"
    "return $i4"
    "i1 := @parameter0: int"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"r0 := @parameter2: java.util.ArrayDeque";
    "r0 := @parameter2: java.util.ArrayDeque"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r1)";
    "virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r1)"->"if i1 >= 33 goto $i2 = i1 + 2";
    "if i1 >= 33 goto $i2 = i1 + 2"->"$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "if i1 >= 33 goto $i2 = i1 + 2"->"$i2 = i1 + 2";
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r11)";
    "virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r11)"->"return i1";
    "$i2 = i1 + 2"->"i5 = $i2 / 2";
    "i5 = $i2 / 2"->"if i1 < 51 goto (branch)";
    "if i1 < 51 goto (branch)"->"if i5 >= 33 goto (branch)";
    "if i1 < 51 goto (branch)"->"if i1 < 85 goto (branch)";
    "if i5 >= 33 goto (branch)"->"i5 = 33";
    "if i5 >= 33 goto (branch)"->"if i1 < 85 goto (branch)";
    "i5 = 33"->"goto [?= $i6 = i1 - i5]";
    "goto [?= $i6 = i1 - i5]"->"$i6 = i1 - i5";
    "if i1 < 85 goto (branch)"->"if i5 >= 51 goto (branch)";
    "if i1 < 85 goto (branch)"->"if i1 < 137 goto (branch)";
    "if i5 >= 51 goto (branch)"->"i5 = 51";
    "if i5 >= 51 goto (branch)"->"if i1 < 137 goto (branch)";
    "i5 = 51"->"goto [?= $i6 = i1 - i5]";
    "goto [?= $i6 = i1 - i5]"->"$i6 = i1 - i5";
    "if i1 < 137 goto (branch)"->"if i5 >= 85 goto (branch)";
    "if i1 < 137 goto (branch)"->"if i1 < 223 goto $i6 = i1 - i5";
    "if i5 >= 85 goto (branch)"->"i5 = 85";
    "if i5 >= 85 goto (branch)"->"if i1 < 223 goto $i6 = i1 - i5";
    "i5 = 85"->"goto [?= $i6 = i1 - i5]";
    "goto [?= $i6 = i1 - i5]"->"$i6 = i1 - i5";
    "if i1 < 223 goto $i6 = i1 - i5"->"if i5 >= 137 goto $i6 = i1 - i5";
    "if i1 < 223 goto $i6 = i1 - i5"->"$i6 = i1 - i5";
    "if i5 >= 137 goto $i6 = i1 - i5"->"i5 = 137";
    "if i5 >= 137 goto $i6 = i1 - i5"->"$i6 = i1 - i5";
    "i5 = 137"->"$i6 = i1 - i5";
    "$i6 = i1 - i5"->"if $i6 < i0 goto $i3 = i1 - i5";
    "if $i6 < i0 goto $i3 = i1 - i5"->"$r2 = new java.lang.AssertionError";
    "if $i6 < i0 goto $i3 = i1 - i5"->"$i3 = i1 - i5";
    "$r2 = new java.lang.AssertionError"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" , \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10)";
    "specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10)"->"throw $r2";
    "$i3 = i1 - i5"->"$i4 = staticinvoke <javaT.util.Arrays.TimSortStackSize: int build(int,int,java.util.ArrayDeque)>(i5, $i3, r0)";
    "$i4 = staticinvoke <javaT.util.Arrays.TimSortStackSize: int build(int,int,java.util.ArrayDeque)>(i5, $i3, r0)"->"return $i4";
}
