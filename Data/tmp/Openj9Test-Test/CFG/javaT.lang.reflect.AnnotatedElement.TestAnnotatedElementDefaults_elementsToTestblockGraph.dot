digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1Super;\");
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\");
$r2 = class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\";
r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
i0 = lengthof r3;
i1 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return r1;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r4 = r3[i1];
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
return r1;
"
    "Block 0:
[preds: ] [succs: 1 ]
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1Super;\");
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\");
$r2 = class \"LjavaT/lang/reflect/AnnotatedElement/TestClass1;\";
r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
i0 = lengthof r3;
i1 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return r1;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return r1;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r4 = r3[i1];
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return r1;
"->"Block 3:
[preds: 1 ] [succs: ]
return r1;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r4 = r3[i1];
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return r1;
";
}
