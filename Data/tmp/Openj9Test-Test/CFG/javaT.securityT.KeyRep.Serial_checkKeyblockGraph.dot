digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
i0 := @parameter1: int;
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
if i0 <= 0 goto r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(i0);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r3 = new java.io.ByteArrayOutputStream;
specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();
r4 = $r3;
$r5 = new java.io.ObjectOutputStream;
specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r4);
r6 = $r5;
virtualinvoke r6.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);
virtualinvoke r6.<java.io.ObjectOutputStream: void close()>();
$r7 = new java.io.ObjectInputStream;
$r8 = new java.io.ByteArrayInputStream;
$r9 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);
specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);
r10 = $r7;
$r11 = virtualinvoke r10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
r12 = (javax.crypto.SecretKey) $r11;
virtualinvoke r10.<java.io.ObjectInputStream: void close()>();
$z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r12);
if $z0 != 0 goto return;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r13 = new java.lang.SecurityException;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" test failed\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);
throw $r13;
"
    "Block 4:
[preds: 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
i0 := @parameter1: int;
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
if i0 <= 0 goto r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"->"Block 1:
[preds: 0 ] [succs: 2 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(i0);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
i0 := @parameter1: int;
r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\");
if i0 <= 0 goto r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r3 = new java.io.ByteArrayOutputStream;
specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();
r4 = $r3;
$r5 = new java.io.ObjectOutputStream;
specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r4);
r6 = $r5;
virtualinvoke r6.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);
virtualinvoke r6.<java.io.ObjectOutputStream: void close()>();
$r7 = new java.io.ObjectInputStream;
$r8 = new java.io.ByteArrayInputStream;
$r9 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);
specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);
r10 = $r7;
$r11 = virtualinvoke r10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
r12 = (javax.crypto.SecretKey) $r11;
virtualinvoke r10.<java.io.ObjectInputStream: void close()>();
$z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r12);
if $z0 != 0 goto return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
virtualinvoke r1.<javax.crypto.KeyGenerator: void init(int)>(i0);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r3 = new java.io.ByteArrayOutputStream;
specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();
r4 = $r3;
$r5 = new java.io.ObjectOutputStream;
specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r4);
r6 = $r5;
virtualinvoke r6.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);
virtualinvoke r6.<java.io.ObjectOutputStream: void close()>();
$r7 = new java.io.ObjectInputStream;
$r8 = new java.io.ByteArrayInputStream;
$r9 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);
specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);
r10 = $r7;
$r11 = virtualinvoke r10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
r12 = (javax.crypto.SecretKey) $r11;
virtualinvoke r10.<java.io.ObjectInputStream: void close()>();
$z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r12);
if $z0 != 0 goto return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r3 = new java.io.ByteArrayOutputStream;
specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();
r4 = $r3;
$r5 = new java.io.ObjectOutputStream;
specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r4);
r6 = $r5;
virtualinvoke r6.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);
virtualinvoke r6.<java.io.ObjectOutputStream: void close()>();
$r7 = new java.io.ObjectInputStream;
$r8 = new java.io.ByteArrayInputStream;
$r9 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);
specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);
r10 = $r7;
$r11 = virtualinvoke r10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
r12 = (javax.crypto.SecretKey) $r11;
virtualinvoke r10.<java.io.ObjectInputStream: void close()>();
$z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r12);
if $z0 != 0 goto return;
"->"Block 3:
[preds: 2 ] [succs: ]
$r13 = new java.lang.SecurityException;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" test failed\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);
throw $r13;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();
$r3 = new java.io.ByteArrayOutputStream;
specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();
r4 = $r3;
$r5 = new java.io.ObjectOutputStream;
specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r4);
r6 = $r5;
virtualinvoke r6.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);
virtualinvoke r6.<java.io.ObjectOutputStream: void close()>();
$r7 = new java.io.ObjectInputStream;
$r8 = new java.io.ByteArrayInputStream;
$r9 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);
specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);
r10 = $r7;
$r11 = virtualinvoke r10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
r12 = (javax.crypto.SecretKey) $r11;
virtualinvoke r10.<java.io.ObjectInputStream: void close()>();
$z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r12);
if $z0 != 0 goto return;
"->"Block 4:
[preds: 2 ] [succs: ]
return;
";
}
