digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 5 ]
r16 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);
$r5 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);
$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\");
$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);
$r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);
$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null);
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r13 = new java.lang.RuntimeException;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\");
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r13;
"
    "Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
"
    "Block 0:
[preds: ] [succs: 1 5 ]
r16 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);
$r5 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);
$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\");
$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);
$r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);
$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"->"Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null);
";
    "Block 0:
[preds: ] [succs: 1 5 ]
r16 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\");
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L);
$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L);
$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L);
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);
$r5 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);
$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\");
$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);
$r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);
$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>();
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\");
staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null);
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
$r13 = new java.lang.RuntimeException;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null);
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r13 = new java.lang.RuntimeException;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\");
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r13 = new java.lang.RuntimeException;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\");
"->"Block 4:
[preds: 3 ] [succs: 5 ]
throw $r13;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\");
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r13;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r14 := @caughtexception;
r15 = $r14;
return;
";
}
