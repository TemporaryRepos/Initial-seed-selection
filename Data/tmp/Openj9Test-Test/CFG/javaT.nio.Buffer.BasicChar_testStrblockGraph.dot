digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 = \"abcdefghijklm\";
b0 = 3;
b1 = 9;
r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>(\"abcdefghijklm\", b0, b1);
staticinvoke <javaT.nio.Buffer.BasicChar: void show(int,java.nio.Buffer)>(0, r1);
$r2 = virtualinvoke r1.<java.nio.CharBuffer: java.lang.String toString()>();
$r3 = \"abcdefghijklm\";
$r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(b0, b1);
$z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,boolean)>(r1, $z0);
$r5 = virtualinvoke r1.<java.nio.CharBuffer: java.lang.String toString()>();
$z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(\"defghi\");
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,boolean)>(r1, $z1);
$z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>();
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,boolean)>(r1, $z2);
$r6 = new javaT.nio.Buffer.BasicChar$18;
specialinvoke $r6.<javaT.nio.Buffer.BasicChar$18: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/nio/ReadOnlyBufferException;\", $r6);
$l2 = (long) b0;
$i3 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();
$l4 = (long) $i3;
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r1, $l2, $l4);
$l5 = (long) b1;
$i6 = virtualinvoke r1.<java.nio.CharBuffer: int limit()>();
$l7 = (long) $i6;
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r1, $l5, $l7);
$r7 = \"abcdefghijklm\";
$i8 = virtualinvoke $r7.<java.lang.String: int length()>();
$l9 = (long) $i8;
$i10 = virtualinvoke r1.<java.nio.CharBuffer: int capacity()>();
$l11 = (long) $i10;
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r1, $l9, $l11);
virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(6);
$r9 = virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>(0, 3);
$r10 = virtualinvoke $r9.<java.nio.CharBuffer: java.lang.String toString()>();
$z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(\"ghi\");
staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,boolean)>(r1, $z3);
$r11 = new javaT.nio.Buffer.BasicChar$19;
specialinvoke $r11.<javaT.nio.Buffer.BasicChar$19: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r11);
$r12 = new javaT.nio.Buffer.BasicChar$20;
specialinvoke $r12.<javaT.nio.Buffer.BasicChar$20: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r12);
$r13 = new javaT.nio.Buffer.BasicChar$21;
specialinvoke $r13.<javaT.nio.Buffer.BasicChar$21: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r13);
$r14 = new javaT.nio.Buffer.BasicChar$22;
specialinvoke $r14.<javaT.nio.Buffer.BasicChar$22: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r14);
$r15 = new javaT.nio.Buffer.BasicChar$23;
specialinvoke $r15.<javaT.nio.Buffer.BasicChar$23: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r15);
$r16 = new javaT.nio.Buffer.BasicChar$24;
specialinvoke $r16.<javaT.nio.Buffer.BasicChar$24: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r16);
$r17 = new javaT.nio.Buffer.BasicChar$25;
specialinvoke $r17.<javaT.nio.Buffer.BasicChar$25: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r17);
$r18 = new javaT.nio.Buffer.BasicChar$26;
specialinvoke $r18.<javaT.nio.Buffer.BasicChar$26: void <init>(java.nio.CharBuffer)>(r1);
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r18);
$r19 = new javaT.nio.Buffer.BasicChar$27;
specialinvoke $r19.<javaT.nio.Buffer.BasicChar$27: void <init>()>();
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r19);
$r20 = new javaT.nio.Buffer.BasicChar$28;
specialinvoke $r20.<javaT.nio.Buffer.BasicChar$28: void <init>()>();
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r20);
$r21 = new javaT.nio.Buffer.BasicChar$29;
specialinvoke $r21.<javaT.nio.Buffer.BasicChar$29: void <init>()>();
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r21);
$r22 = new javaT.nio.Buffer.BasicChar$30;
specialinvoke $r22.<javaT.nio.Buffer.BasicChar$30: void <init>()>();
staticinvoke <javaT.nio.Buffer.BasicChar: void tryCatch(java.nio.Buffer,java.lang.Class,java.lang.Runnable)>(r1, class \"Ljava/lang/IndexOutOfBoundsException;\", $r22);
return;
"
}
