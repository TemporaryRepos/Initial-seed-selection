digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r8 := @parameter0: java.lang.String[];
$r0 = new java.util.Hashtable;
specialinvoke $r0.<java.util.Hashtable: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r0);
$r1 = new java.util.HashMap;
specialinvoke $r1.<java.util.HashMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r1);
$r2 = new java.util.IdentityHashMap;
specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r2);
$r3 = new java.util.LinkedHashMap;
specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r3);
$r4 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r4);
$r5 = new java.util.WeakHashMap;
specialinvoke $r5.<java.util.WeakHashMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r5);
$r6 = new java.util.TreeMap;
specialinvoke $r6.<java.util.TreeMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r6);
$r7 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r7.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
staticinvoke <javaT.util.Map.Get: void testMap(java.util.Map)>($r7);
return;
"
}
