digraph "unitGraph" {
    "r9 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(\"blah\", null)"
    "virtualinvoke r0.<java.io.File: void deleteOnExit()>()"
    "staticinvoke <javaT.nio.channels.FileChannel.ReadToLimit: void initTestFile(java.io.File)>(r0)"
    "r1 = newarray (java.nio.ByteBuffer)[2]"
    "i2 = 0"
    "if i2 >= 2 goto $r2 = new java.io.FileInputStream"
    "$r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(10)"
    "r1[i2] = $r6"
    "$r7 = r1[i2]"
    "virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(5)"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "$r2 = new java.io.FileInputStream"
    "specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0)"
    "r10 = $r2"
    "r3 = virtualinvoke r10.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()"
    "virtualinvoke r3.<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>(r1)"
    "i3 = 0"
    "if i3 >= 2 goto virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()"
    "$r4 = r1[i3]"
    "$i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>()"
    "if $i1 == 5 goto i3 = i3 + 1"
    "$r5 = new java.lang.Exception"
    "specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")"
    "throw $r5"
    "i3 = i3 + 1"
    "virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()"
    "virtualinvoke r10.<java.io.FileInputStream: void close()>()"
    "virtualinvoke r0.<java.io.File: boolean delete()>()"
    "return"
    "r9 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(\"blah\", null)";
    "r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(\"blah\", null)"->"virtualinvoke r0.<java.io.File: void deleteOnExit()>()";
    "virtualinvoke r0.<java.io.File: void deleteOnExit()>()"->"staticinvoke <javaT.nio.channels.FileChannel.ReadToLimit: void initTestFile(java.io.File)>(r0)";
    "staticinvoke <javaT.nio.channels.FileChannel.ReadToLimit: void initTestFile(java.io.File)>(r0)"->"r1 = newarray (java.nio.ByteBuffer)[2]";
    "r1 = newarray (java.nio.ByteBuffer)[2]"->"i2 = 0";
    "i2 = 0"->"if i2 >= 2 goto $r2 = new java.io.FileInputStream";
    "if i2 >= 2 goto $r2 = new java.io.FileInputStream"->"$r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(10)";
    "if i2 >= 2 goto $r2 = new java.io.FileInputStream"->"$r2 = new java.io.FileInputStream";
    "$r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(10)"->"r1[i2] = $r6";
    "r1[i2] = $r6"->"$r7 = r1[i2]";
    "$r7 = r1[i2]"->"virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(5)";
    "virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(5)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= 2 goto $r2 = new java.io.FileInputStream";
    "$r2 = new java.io.FileInputStream"->"specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0)";
    "specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0)"->"r10 = $r2";
    "r10 = $r2"->"r3 = virtualinvoke r10.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()";
    "r3 = virtualinvoke r10.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>()"->"virtualinvoke r3.<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>(r1)";
    "virtualinvoke r3.<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>(r1)"->"i3 = 0";
    "i3 = 0"->"if i3 >= 2 goto virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()";
    "if i3 >= 2 goto virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()"->"$r4 = r1[i3]";
    "if i3 >= 2 goto virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()"->"virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()";
    "$r4 = r1[i3]"->"$i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>()";
    "$i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>()"->"if $i1 == 5 goto i3 = i3 + 1";
    "if $i1 == 5 goto i3 = i3 + 1"->"$r5 = new java.lang.Exception";
    "if $i1 == 5 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "$r5 = new java.lang.Exception"->"specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")";
    "specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Test failed\")"->"throw $r5";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= 2 goto virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()";
    "virtualinvoke r3.<java.nio.channels.FileChannel: void close()>()"->"virtualinvoke r10.<java.io.FileInputStream: void close()>()";
    "virtualinvoke r10.<java.io.FileInputStream: void close()>()"->"virtualinvoke r0.<java.io.File: boolean delete()>()";
    "virtualinvoke r0.<java.io.File: boolean delete()>()"->"return";
}
