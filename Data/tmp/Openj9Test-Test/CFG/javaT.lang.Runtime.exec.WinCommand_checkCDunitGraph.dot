digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "r8 = null"
    "r1 = r0"
    "i0 = lengthof r1"
    "i1 = 0"
    "if i1 >= i0 goto return"
    "r2 = r1[i1]"
    "$r3 = newarray (java.lang.String)[3]"
    "$r3[0] = r2"
    "$r3[1] = \"/C\""
    "$r3[2] = \"CD\""
    "r4 = staticinvoke <javaT.lang.Runtime.exec.WinCommand: java.lang.String outputOf(java.lang.String[])>($r3)"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "$r5 = newarray (java.lang.Object)[2]"
    "$r5[0] = r2"
    "$r5[1] = r4"
    "virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%s CD ==> %s%n\", $r5)"
    "if r8 != null goto $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)"
    "r8 = r4"
    "staticinvoke <javaT.lang.Runtime.exec.WinCommand: void checkDir(java.lang.String)>(r4)"
    "$z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)"
    "if $z0 != 0 goto i1 = i1 + 1"
    "staticinvoke <javaT.lang.Runtime.exec.WinCommand: void fail(java.lang.String)>(\"Inconsistent result from CD subcommand\")"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"r8 = null";
    "r8 = null"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return";
    "if i1 >= i0 goto return"->"r2 = r1[i1]";
    "if i1 >= i0 goto return"->"return";
    "r2 = r1[i1]"->"$r3 = newarray (java.lang.String)[3]";
    "$r3 = newarray (java.lang.String)[3]"->"$r3[0] = r2";
    "$r3[0] = r2"->"$r3[1] = \"/C\"";
    "$r3[1] = \"/C\""->"$r3[2] = \"CD\"";
    "$r3[2] = \"CD\""->"r4 = staticinvoke <javaT.lang.Runtime.exec.WinCommand: java.lang.String outputOf(java.lang.String[])>($r3)";
    "r4 = staticinvoke <javaT.lang.Runtime.exec.WinCommand: java.lang.String outputOf(java.lang.String[])>($r3)"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r5 = newarray (java.lang.Object)[2]";
    "$r5 = newarray (java.lang.Object)[2]"->"$r5[0] = r2";
    "$r5[0] = r2"->"$r5[1] = r4";
    "$r5[1] = r4"->"virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%s CD ==> %s%n\", $r5)";
    "virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%s CD ==> %s%n\", $r5)"->"if r8 != null goto $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)";
    "if r8 != null goto $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)"->"r8 = r4";
    "if r8 != null goto $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)"->"$z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)";
    "r8 = r4"->"staticinvoke <javaT.lang.Runtime.exec.WinCommand: void checkDir(java.lang.String)>(r4)";
    "staticinvoke <javaT.lang.Runtime.exec.WinCommand: void checkDir(java.lang.String)>(r4)"->"$z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)";
    "$z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r8)"->"if $z0 != 0 goto i1 = i1 + 1";
    "if $z0 != 0 goto i1 = i1 + 1"->"staticinvoke <javaT.lang.Runtime.exec.WinCommand: void fail(java.lang.String)>(\"Inconsistent result from CD subcommand\")";
    "if $z0 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "staticinvoke <javaT.lang.Runtime.exec.WinCommand: void fail(java.lang.String)>(\"Inconsistent result from CD subcommand\")"->"staticinvoke <javaT.lang.Runtime.exec.WinCommand: void checkDir(java.lang.String)>(r4)";
    "staticinvoke <javaT.lang.Runtime.exec.WinCommand: void checkDir(java.lang.String)>(r4)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return";
}
