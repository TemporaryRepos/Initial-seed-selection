digraph "unitGraph" {
    "r4 := @this: javaT.securityT.KeyStore.TestKeyStoreEntry"
    "r0 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>()"
    "r1 = r0"
    "i0 = lengthof r1"
    "i1 = 0"
    "if i1 >= i0 goto return"
    "r2 = r1[i1]"
    "r3 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()"
    "$z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunJCE\")"
    "if $z0 != 0 goto virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"
    "$z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")"
    "if $z1 == 0 goto i1 = i1 + 1"
    "virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "$r5 = new java.lang.StringBuilder"
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"
    "$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test with provider \")"
    "$r8 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" passed\")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11)"
    "goto [?= i1 = i1 + 1]"
    "$r12 := @caughtexception"
    "r13 = $r12"
    "$z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")"
    "if $z2 == 0 goto throw r13"
    "$r14 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"KeyStoreException is expected because PKCS11KeyStore is invalid keystore type.\")"
    "virtualinvoke r13.<java.security.KeyStoreException: void printStackTrace()>()"
    "throw r13"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r4 := @this: javaT.securityT.KeyStore.TestKeyStoreEntry"->"r0 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>()";
    "r0 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>()"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return";
    "if i1 >= i0 goto return"->"r2 = r1[i1]";
    "if i1 >= i0 goto return"->"return";
    "r2 = r1[i1]"->"r3 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()";
    "r3 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()"->"$z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunJCE\")";
    "$z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunJCE\")"->"if $z0 != 0 goto virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)";
    "if $z0 != 0 goto virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"->"$z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")";
    "if $z0 != 0 goto virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"->"virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)";
    "if $z0 != 0 goto virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"->"$r12 := @caughtexception";
    "$z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")"->"if $z1 == 0 goto i1 = i1 + 1";
    "if $z1 == 0 goto i1 = i1 + 1"->"virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)";
    "if $z1 == 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "if $z1 == 0 goto i1 = i1 + 1"->"$r12 := @caughtexception";
    "virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "virtualinvoke r4.<javaT.securityT.KeyStore.TestKeyStoreEntry: void runTest(java.security.Provider)>(r2)"->"$r12 := @caughtexception";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r5 = new java.lang.StringBuilder";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r12 := @caughtexception";
    "$r5 = new java.lang.StringBuilder"->"specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()";
    "$r5 = new java.lang.StringBuilder"->"$r12 := @caughtexception";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"->"$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test with provider \")";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"->"$r12 := @caughtexception";
    "$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test with provider \")"->"$r8 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()";
    "$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test with provider \")"->"$r12 := @caughtexception";
    "$r8 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)";
    "$r8 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>()"->"$r12 := @caughtexception";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" passed\")";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)"->"$r12 := @caughtexception";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" passed\")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" passed\")"->"$r12 := @caughtexception";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r12 := @caughtexception";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11)"->"goto [?= i1 = i1 + 1]";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11)"->"$r12 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r12 := @caughtexception"->"r13 = $r12";
    "r13 = $r12"->"$z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")";
    "$z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(\"SunPKCS11-Solaris\")"->"if $z2 == 0 goto throw r13";
    "if $z2 == 0 goto throw r13"->"$r14 = <java.lang.System: java.io.PrintStream out>";
    "if $z2 == 0 goto throw r13"->"throw r13";
    "$r14 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"KeyStoreException is expected because PKCS11KeyStore is invalid keystore type.\")";
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"KeyStoreException is expected because PKCS11KeyStore is invalid keystore type.\")"->"virtualinvoke r13.<java.security.KeyStoreException: void printStackTrace()>()";
    "virtualinvoke r13.<java.security.KeyStoreException: void printStackTrace()>()"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return";
}
