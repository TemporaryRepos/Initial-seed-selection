digraph "unitGraph" {
    "r0 := @parameter0: java.nio.LongBuffer"
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"
    "$i1 = i0 + 7"
    "r1 = newarray (long)[$i1]"
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>(r1, 7, i0)"
    "i5 = 0"
    "if i5 >= i0 goto return"
    "$i2 = i5 + 7"
    "$l3 = r1[$i2]"
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i5)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l4)"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "return"
    "r0 := @parameter0: java.nio.LongBuffer"->"i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"->"$i1 = i0 + 7";
    "$i1 = i0 + 7"->"r1 = newarray (long)[$i1]";
    "r1 = newarray (long)[$i1]"->"virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>(r1, 7, i0)";
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>(r1, 7, i0)"->"i5 = 0";
    "i5 = 0"->"if i5 >= i0 goto return";
    "if i5 >= i0 goto return"->"$i2 = i5 + 7";
    "if i5 >= i0 goto return"->"return";
    "$i2 = i5 + 7"->"$l3 = r1[$i2]";
    "$l3 = r1[$i2]"->"$l4 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i5)";
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i5)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l4)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l4)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto return";
}
