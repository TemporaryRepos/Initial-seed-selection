digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.math.BigDecimal[][];
r4 := @parameter1: java.math.MathContext;
i1 = 0;
r1 = r0;
i0 = lengthof r1;
i2 = 0;
"
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= i0 goto return i1;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i2];
r3 = r2[0];
r5 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>(r4);
r6 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal negateThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
r7 = r2[1];
$z0 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto $z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
i1 = i1 + 1;
$r33 = <java.lang.System: java.io.PrintStream err>;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
$r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") => \");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != expected \");
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r42);
"
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
if $z1 != 0 goto r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i1 = i1 + 1;
$r22 = <java.lang.System: java.io.PrintStream err>;
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != ntr \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r31);
"
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
r9 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal absThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
$z2 = virtualinvoke r8.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r9);
if $z2 != 0 goto i2 = i2 + 1;
"
    "Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + 1;
$r11 = <java.lang.System: java.io.PrintStream err>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").abs(\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != atr \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r20);
"
    "Block 8:
[preds: 6 7 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 1 ] [succs: ]
return i1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.math.BigDecimal[][];
r4 := @parameter1: java.math.MathContext;
i1 = 0;
r1 = r0;
i0 = lengthof r1;
i2 = 0;
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= i0 goto return i1;
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= i0 goto return i1;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i2];
r3 = r2[0];
r5 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>(r4);
r6 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal negateThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
r7 = r2[1];
$z0 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto $z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= i0 goto return i1;
"->"Block 9:
[preds: 1 ] [succs: ]
return i1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i2];
r3 = r2[0];
r5 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>(r4);
r6 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal negateThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
r7 = r2[1];
$z0 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto $z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
"->"Block 3:
[preds: 2 ] [succs: 4 ]
i1 = i1 + 1;
$r33 = <java.lang.System: java.io.PrintStream err>;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
$r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") => \");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != expected \");
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r42);
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i2];
r3 = r2[0];
r5 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>(r4);
r6 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal negateThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
r7 = r2[1];
$z0 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto $z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
if $z1 != 0 goto r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
i1 = i1 + 1;
$r33 = <java.lang.System: java.io.PrintStream err>;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
$r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") => \");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != expected \");
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r42);
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
if $z1 != 0 goto r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
if $z1 != 0 goto r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i1 = i1 + 1;
$r22 = <java.lang.System: java.io.PrintStream err>;
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != ntr \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r31);
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$z1 = virtualinvoke r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r6);
if $z1 != 0 goto r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
"->"Block 6:
[preds: 4 5 ] [succs: 7 8 ]
r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
r9 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal absThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
$z2 = virtualinvoke r8.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r9);
if $z2 != 0 goto i2 = i2 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i1 = i1 + 1;
$r22 = <java.lang.System: java.io.PrintStream err>;
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").negate(\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != ntr \");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r31);
"->"Block 6:
[preds: 4 5 ] [succs: 7 8 ]
r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
r9 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal absThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
$z2 = virtualinvoke r8.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r9);
if $z2 != 0 goto i2 = i2 + 1;
";
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
r9 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal absThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
$z2 = virtualinvoke r8.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r9);
if $z2 != 0 goto i2 = i2 + 1;
"->"Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + 1;
$r11 = <java.lang.System: java.io.PrintStream err>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").abs(\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != atr \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r20);
";
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
r8 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>(r4);
r9 = staticinvoke <javaT.math.BigDecimal.NegateTests: java.math.BigDecimal absThenRound(java.math.BigDecimal,java.math.MathContext)>(r3, r4);
$z2 = virtualinvoke r8.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r9);
if $z2 != 0 goto i2 = i2 + 1;
"->"Block 8:
[preds: 6 7 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
";
    "Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + 1;
$r11 = <java.lang.System: java.io.PrintStream err>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\").abs(\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")  => \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != atr \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r20);
"->"Block 8:
[preds: 6 7 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 6 7 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= i0 goto return i1;
";
}
