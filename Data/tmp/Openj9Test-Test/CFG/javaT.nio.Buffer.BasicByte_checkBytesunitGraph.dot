digraph "unitGraph" {
    "r1 := @parameter0: java.nio.ByteBuffer"
    "r0 := @parameter1: byte[]"
    "i0 = lengthof r0"
    "i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>()"
    "$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>()"
    "$r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>"
    "if $r2 != $r3 goto i11 = i0 - 1"
    "i10 = 0"
    "if i10 >= i0 goto (branch)"
    "$b6 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()"
    "$l9 = (long) $b6"
    "$b7 = r0[i10]"
    "$l8 = (long) $b7"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l9, $l8)"
    "i10 = i10 + 1"
    "goto [?= (branch)]"
    "goto [?= virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)]"
    "i11 = i0 - 1"
    "if i11 < 0 goto virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)"
    "$b2 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()"
    "$l5 = (long) $b2"
    "$b3 = r0[i11]"
    "$l4 = (long) $b3"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l5, $l4)"
    "i11 = i11 + -1"
    "virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)"
    "return"
    "r1 := @parameter0: java.nio.ByteBuffer"->"r0 := @parameter1: byte[]";
    "r0 := @parameter1: byte[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>()";
    "i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>()"->"$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>()";
    "$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>()"->"$r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>";
    "$r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>"->"if $r2 != $r3 goto i11 = i0 - 1";
    "if $r2 != $r3 goto i11 = i0 - 1"->"i10 = 0";
    "if $r2 != $r3 goto i11 = i0 - 1"->"i11 = i0 - 1";
    "i10 = 0"->"if i10 >= i0 goto (branch)";
    "if i10 >= i0 goto (branch)"->"$b6 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()";
    "if i10 >= i0 goto (branch)"->"goto [?= virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)]";
    "$b6 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()"->"$l9 = (long) $b6";
    "$l9 = (long) $b6"->"$b7 = r0[i10]";
    "$b7 = r0[i10]"->"$l8 = (long) $b7";
    "$l8 = (long) $b7"->"staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l9, $l8)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l9, $l8)"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i0 goto (branch)";
    "goto [?= virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)]"->"virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)";
    "i11 = i0 - 1"->"if i11 < 0 goto virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)";
    "if i11 < 0 goto virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)"->"$b2 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()";
    "if i11 < 0 goto virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)"->"virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)";
    "$b2 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>()"->"$l5 = (long) $b2";
    "$l5 = (long) $b2"->"$b3 = r0[i11]";
    "$b3 = r0[i11]"->"$l4 = (long) $b3";
    "$l4 = (long) $b3"->"staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l5, $l4)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r1, $l5, $l4)"->"i11 = i11 + -1";
    "i11 = i11 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 < 0 goto virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)";
    "virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1)"->"return";
}
