digraph "unitGraph" {
    "r16 := @parameter0: java.lang.String[]"
    "i2 = 0"
    "$r0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List elementsToTest()>()"
    "r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto (branch)"
    "$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()"
    "r8 = (java.lang.reflect.AnnotatedElement) $r7"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8)"
    "$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate"
    "specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8)"
    "r11 = $r10"
    "$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11)"
    "i2 = i2 + $i0"
    "$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>()"
    "r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto (branch)"
    "$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>()"
    "r15 = (java.lang.Class) $r14"
    "$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15)"
    "i2 = i2 + $i1"
    "goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()]"
    "goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]"
    "if i2 <= 0 goto return"
    "$r3 = <java.lang.System: java.io.PrintStream err>"
    "$r2 = newarray (java.lang.Object)[1]"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$r2[0] = $r4"
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d failures%n\", $r2)"
    "$r6 = new java.lang.RuntimeException"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"
    "throw $r6"
    "return"
    "r16 := @parameter0: java.lang.String[]"->"i2 = 0";
    "i2 = 0"->"$r0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List elementsToTest()>()";
    "$r0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List elementsToTest()>()"->"r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>()";
    "r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto (branch)";
    "if $z0 == 0 goto (branch)"->"$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto (branch)"->"if i2 <= 0 goto return";
    "$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()"->"r8 = (java.lang.reflect.AnnotatedElement) $r7";
    "r8 = (java.lang.reflect.AnnotatedElement) $r7"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8)";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8)"->"$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate";
    "$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate"->"specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8)";
    "specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8)"->"r11 = $r10";
    "r11 = $r10"->"$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11)";
    "$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11)"->"i2 = i2 + $i0";
    "i2 = i2 + $i0"->"$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>()";
    "$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>()"->"r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()";
    "r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()";
    "$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto (branch)";
    "if $z1 == 0 goto (branch)"->"$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 == 0 goto (branch)"->"goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]";
    "$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>()"->"r15 = (java.lang.Class) $r14";
    "r15 = (java.lang.Class) $r14"->"$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15)";
    "$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15)"->"i2 = i2 + $i1";
    "i2 = i2 + $i1"->"goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()";
    "if i2 <= 0 goto return"->"$r3 = <java.lang.System: java.io.PrintStream err>";
    "if i2 <= 0 goto return"->"return";
    "$r3 = <java.lang.System: java.io.PrintStream err>"->"$r2 = newarray (java.lang.Object)[1]";
    "$r2 = newarray (java.lang.Object)[1]"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r2[0] = $r4";
    "$r2[0] = $r4"->"virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d failures%n\", $r2)";
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d failures%n\", $r2)"->"$r6 = new java.lang.RuntimeException";
    "$r6 = new java.lang.RuntimeException"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>()>()"->"throw $r6";
}
