digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Map;
r2 := @parameter1: java.lang.Character;
r3 := @parameter2: java.lang.Boolean;
r0 := @parameter3: java.lang.Boolean;
if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5);
$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0);
$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3);
$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0);
$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();
$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1);
$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2);
$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3);
$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
if $z4 != 0 goto $z7 = 0;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$z7 = 1;
goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
$z7 = 0;
"
    "Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Map;
r2 := @parameter1: java.lang.Character;
r3 := @parameter2: java.lang.Boolean;
r0 := @parameter3: java.lang.Boolean;
if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5);
$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Map;
r2 := @parameter1: java.lang.Character;
r3 := @parameter2: java.lang.Boolean;
r0 := @parameter3: java.lang.Boolean;
if r0 == null goto $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0);
$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3);
$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0);
$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();
$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1);
$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2);
$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3);
$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
if $z4 != 0 goto $z7 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue(oldValue)\", $z5);
$r9 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z6 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r0);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains(oldValue)\", $z6);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0);
$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3);
$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0);
$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();
$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1);
$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2);
$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3);
$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
if $z4 != 0 goto $z7 = 0;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0);
$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3);
$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0);
$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();
$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1);
$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2);
$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3);
$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
if $z4 != 0 goto $z7 = 0;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$z7 = 1;
goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r4, r0);
$r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void equal(java.lang.Object,java.lang.Object)>($r5, r3);
$z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsKey\", $z0);
$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();
$z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"keySet.contains\", $z1);
$z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"containsValue\", $z2);
$r7 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();
$z3 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r3);
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"values.contains\", $z3);
$z4 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
if $z4 != 0 goto $z7 = 0;
"->"Block 4:
[preds: 2 ] [succs: 5 ]
$z7 = 0;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$z7 = 1;
goto [?= staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7)];
"->"Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7);
return;
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
$z7 = 0;
"->"Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <javaT.util.Map.Get: void check(java.lang.String,boolean)>(\"!isEmpty\", $z7);
return;
";
}
