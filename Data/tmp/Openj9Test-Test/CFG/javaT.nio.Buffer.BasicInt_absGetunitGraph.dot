digraph "unitGraph" {
    "r0 := @parameter0: java.nio.IntBuffer"
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"
    "i6 = 0"
    "if i6 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()"
    "$i1 = virtualinvoke r0.<java.nio.IntBuffer: int get()>()"
    "$l2 = (long) $i1"
    "$l3 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i6)"
    "$i4 = (int) $l3"
    "$l5 = (long) $i4"
    "staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l2, $l5)"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()"
    "return"
    "r0 := @parameter0: java.nio.IntBuffer"->"i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>()"->"i6 = 0";
    "i6 = 0"->"if i6 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()";
    "if i6 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()"->"$i1 = virtualinvoke r0.<java.nio.IntBuffer: int get()>()";
    "if i6 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()"->"virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()";
    "$i1 = virtualinvoke r0.<java.nio.IntBuffer: int get()>()"->"$l2 = (long) $i1";
    "$l2 = (long) $i1"->"$l3 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i6)";
    "$l3 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i6)"->"$i4 = (int) $l3";
    "$i4 = (int) $l3"->"$l5 = (long) $i4";
    "$l5 = (long) $i4"->"staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l2, $l5)";
    "staticinvoke <javaT.nio.Buffer.BasicInt: void ck(java.nio.Buffer,long,long)>(r0, $l2, $l5)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i0 goto virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()";
    "virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer rewind()>()"->"return";
}
