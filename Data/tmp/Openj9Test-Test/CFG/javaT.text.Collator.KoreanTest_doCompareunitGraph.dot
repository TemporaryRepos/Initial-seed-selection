digraph "unitGraph" {
    "r1 := @this: javaT.text.Collator.KoreanTest"
    "r0 := @parameter0: java.lang.String[][]"
    "i5 = 0"
    "$i0 = lengthof r0"
    "if i5 >= $i0 goto return"
    "$r6 = r1.<javaT.text.Collator.KoreanTest: java.text.Collator col>"
    "$r2 = r0[i5]"
    "$r5 = $r2[0]"
    "$r3 = r0[i5]"
    "$r4 = $r3[1]"
    "$i1 = virtualinvoke $r6.<java.text.Collator: int compare(java.lang.String,java.lang.String)>($r5, $r4)"
    "i2 = $i1"
    "if $i1 <= -1 goto i5 = i5 + 1"
    "$i3 = r1.<javaT.text.Collator.KoreanTest: int result>"
    "$i4 = $i3 + 1"
    "r1.<javaT.text.Collator.KoreanTest: int result> = $i4"
    "$r8 = <java.lang.System: java.io.PrintStream err>"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TERTIARY: The first string should be less than the second string:  \")"
    "$r10 = r0[i5]"
    "$r11 = $r10[2]"
    "$r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  compare() returned \")"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".\")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r16)"
    "i5 = i5 + 1"
    "goto [?= $i0 = lengthof r0]"
    "return"
    "r1 := @this: javaT.text.Collator.KoreanTest"->"r0 := @parameter0: java.lang.String[][]";
    "r0 := @parameter0: java.lang.String[][]"->"i5 = 0";
    "i5 = 0"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if i5 >= $i0 goto return";
    "if i5 >= $i0 goto return"->"$r6 = r1.<javaT.text.Collator.KoreanTest: java.text.Collator col>";
    "if i5 >= $i0 goto return"->"return";
    "$r6 = r1.<javaT.text.Collator.KoreanTest: java.text.Collator col>"->"$r2 = r0[i5]";
    "$r2 = r0[i5]"->"$r5 = $r2[0]";
    "$r5 = $r2[0]"->"$r3 = r0[i5]";
    "$r3 = r0[i5]"->"$r4 = $r3[1]";
    "$r4 = $r3[1]"->"$i1 = virtualinvoke $r6.<java.text.Collator: int compare(java.lang.String,java.lang.String)>($r5, $r4)";
    "$i1 = virtualinvoke $r6.<java.text.Collator: int compare(java.lang.String,java.lang.String)>($r5, $r4)"->"i2 = $i1";
    "i2 = $i1"->"if $i1 <= -1 goto i5 = i5 + 1";
    "if $i1 <= -1 goto i5 = i5 + 1"->"$i3 = r1.<javaT.text.Collator.KoreanTest: int result>";
    "if $i1 <= -1 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "$i3 = r1.<javaT.text.Collator.KoreanTest: int result>"->"$i4 = $i3 + 1";
    "$i4 = $i3 + 1"->"r1.<javaT.text.Collator.KoreanTest: int result> = $i4";
    "r1.<javaT.text.Collator.KoreanTest: int result> = $i4"->"$r8 = <java.lang.System: java.io.PrintStream err>";
    "$r8 = <java.lang.System: java.io.PrintStream err>"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TERTIARY: The first string should be less than the second string:  \")";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"TERTIARY: The first string should be less than the second string:  \")"->"$r10 = r0[i5]";
    "$r10 = r0[i5]"->"$r11 = $r10[2]";
    "$r11 = $r10[2]"->"$r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)";
    "$r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  compare() returned \")";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  compare() returned \")"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".\")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".\")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r16)";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r16)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= $i0 = lengthof r0]";
    "goto [?= $i0 = lengthof r0]"->"$i0 = lengthof r0";
}
