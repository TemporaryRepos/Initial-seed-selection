digraph "unitGraph" {
    "r0 := @parameter0: long[]"
    "$i0 = lengthof r0"
    "$i1 = $i0 * 8"
    "r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1)"
    "$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()"
    "$r3 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>(r0)"
    "virtualinvoke $r2.<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>($r3)"
    "$r5 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>()"
    "return $r5"
    "r0 := @parameter0: long[]"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"$i1 = $i0 * 8";
    "$i1 = $i0 * 8"->"r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1)";
    "r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1)"->"$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()";
    "$r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()"->"$r3 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>(r0)";
    "$r3 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>(r0)"->"virtualinvoke $r2.<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>($r3)";
    "virtualinvoke $r2.<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>($r3)"->"$r5 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>()";
    "$r5 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>()"->"return $r5";
}
