digraph "unitGraph" {
    "r12 := @parameter0: java.lang.String[]"
    "$r0 = new java.lang.RuntimePermission"
    "specialinvoke $r0.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"*\")"
    "r1 = $r0"
    "$r2 = new java.lang.RuntimePermission"
    "specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"exitVM\")"
    "r3 = $r2"
    "$r4 = new java.net.NetPermission"
    "specialinvoke $r4.<java.net.NetPermission: void <init>(java.lang.String)>(\"setDefaultAuthenticator\")"
    "r5 = $r4"
    "r6 = virtualinvoke r1.<java.lang.RuntimePermission: java.security.PermissionCollection newPermissionCollection()>()"
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r1)"
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r3)"
    "goto [?= virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)]"
    "$r10 := @caughtexception"
    "r13 = $r10"
    "$r11 = new java.lang.SecurityException"
    "specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>(\"GOOD ADD TEST FAILED\")"
    "throw $r11"
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)"
    "$r7 = new java.lang.SecurityException"
    "specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(\"BAD ADD TEST FAILED\")"
    "throw $r7"
    "$r8 := @caughtexception"
    "r14 = $r8"
    "$z0 = virtualinvoke r6.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r5)"
    "if $z0 == 0 goto return"
    "$r9 = new java.lang.SecurityException"
    "specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>(\"IMPLIES TEST FAILED\")"
    "throw $r9"
    "return"
    "r12 := @parameter0: java.lang.String[]"->"$r0 = new java.lang.RuntimePermission";
    "$r0 = new java.lang.RuntimePermission"->"specialinvoke $r0.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"*\")";
    "specialinvoke $r0.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"*\")"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.lang.RuntimePermission";
    "$r2 = new java.lang.RuntimePermission"->"specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"exitVM\")";
    "specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>(\"exitVM\")"->"r3 = $r2";
    "r3 = $r2"->"$r4 = new java.net.NetPermission";
    "$r4 = new java.net.NetPermission"->"specialinvoke $r4.<java.net.NetPermission: void <init>(java.lang.String)>(\"setDefaultAuthenticator\")";
    "specialinvoke $r4.<java.net.NetPermission: void <init>(java.lang.String)>(\"setDefaultAuthenticator\")"->"r5 = $r4";
    "r5 = $r4"->"r6 = virtualinvoke r1.<java.lang.RuntimePermission: java.security.PermissionCollection newPermissionCollection()>()";
    "r6 = virtualinvoke r1.<java.lang.RuntimePermission: java.security.PermissionCollection newPermissionCollection()>()"->"virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r1)";
    "r6 = virtualinvoke r1.<java.lang.RuntimePermission: java.security.PermissionCollection newPermissionCollection()>()"->"$r10 := @caughtexception";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r1)"->"virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r3)";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r1)"->"$r10 := @caughtexception";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r3)"->"goto [?= virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)]";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r3)"->"$r10 := @caughtexception";
    "goto [?= virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)]"->"virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)";
    "goto [?= virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)]"->"$r8 := @caughtexception";
    "$r10 := @caughtexception"->"r13 = $r10";
    "r13 = $r10"->"$r11 = new java.lang.SecurityException";
    "$r11 = new java.lang.SecurityException"->"specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>(\"GOOD ADD TEST FAILED\")";
    "specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>(\"GOOD ADD TEST FAILED\")"->"throw $r11";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)"->"$r7 = new java.lang.SecurityException";
    "virtualinvoke r6.<java.security.PermissionCollection: void add(java.security.Permission)>(r5)"->"$r8 := @caughtexception";
    "$r7 = new java.lang.SecurityException"->"specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(\"BAD ADD TEST FAILED\")";
    "$r7 = new java.lang.SecurityException"->"$r8 := @caughtexception";
    "specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(\"BAD ADD TEST FAILED\")"->"throw $r7";
    "specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(\"BAD ADD TEST FAILED\")"->"$r8 := @caughtexception";
    "throw $r7"->"$r8 := @caughtexception";
    "$r8 := @caughtexception"->"r14 = $r8";
    "r14 = $r8"->"$z0 = virtualinvoke r6.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r5)";
    "$z0 = virtualinvoke r6.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r5)"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r9 = new java.lang.SecurityException";
    "if $z0 == 0 goto return"->"return";
    "$r9 = new java.lang.SecurityException"->"specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>(\"IMPLIES TEST FAILED\")";
    "specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>(\"IMPLIES TEST FAILED\")"->"throw $r9";
}
