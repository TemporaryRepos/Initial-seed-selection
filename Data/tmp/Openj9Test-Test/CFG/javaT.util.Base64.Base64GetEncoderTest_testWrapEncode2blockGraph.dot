digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: java.util.Base64$Encoder;
$r0 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.wrap test II \");
$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\";
$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);
$r4 = new java.io.ByteArrayOutputStream;
specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();
r5 = $r4;
r7 = virtualinvoke r6.<java.util.Base64$Encoder: java.io.OutputStream wrap(java.io.OutputStream)>(r5);
virtualinvoke r7.<java.io.OutputStream: void write(byte[])>(r3);
virtualinvoke r7.<java.io.OutputStream: void close()>();
r8 = virtualinvoke r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
$r10 = <java.lang.System: java.io.PrintStream err>;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"result = \");
$r12 = new java.lang.String;
$r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r12.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r13);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  after wrap Base64 encoding of string\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>($r16);
$r17 = new java.lang.String;
$r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r18);
r19 = $r17;
$z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r20 = new java.lang.RuntimeException;
specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after wrap 2 invoked  ... \n\");
throw $r20;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: java.util.Base64$Encoder;
$r0 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.wrap test II \");
$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\";
$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);
$r4 = new java.io.ByteArrayOutputStream;
specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();
r5 = $r4;
r7 = virtualinvoke r6.<java.util.Base64$Encoder: java.io.OutputStream wrap(java.io.OutputStream)>(r5);
virtualinvoke r7.<java.io.OutputStream: void write(byte[])>(r3);
virtualinvoke r7.<java.io.OutputStream: void close()>();
r8 = virtualinvoke r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
$r10 = <java.lang.System: java.io.PrintStream err>;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"result = \");
$r12 = new java.lang.String;
$r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r12.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r13);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  after wrap Base64 encoding of string\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>($r16);
$r17 = new java.lang.String;
$r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r18);
r19 = $r17;
$z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r20 = new java.lang.RuntimeException;
specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Base64 encoding contains line separator after wrap 2 invoked  ... \n\");
throw $r20;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: java.util.Base64$Encoder;
$r0 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"\nEncoder.wrap test II \");
$r2 = \"api/java_util/Base64/index.html#GetEncoderMimeCustom[noLineSeparatorInEncodedString]\";
$r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);
$r4 = new java.io.ByteArrayOutputStream;
specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();
r5 = $r4;
r7 = virtualinvoke r6.<java.util.Base64$Encoder: java.io.OutputStream wrap(java.io.OutputStream)>(r5);
virtualinvoke r7.<java.io.OutputStream: void write(byte[])>(r3);
virtualinvoke r7.<java.io.OutputStream: void close()>();
r8 = virtualinvoke r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
$r10 = <java.lang.System: java.io.PrintStream err>;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"result = \");
$r12 = new java.lang.String;
$r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r12.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r13);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"  after wrap Base64 encoding of string\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>($r16);
$r17 = new java.lang.String;
$r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke $r17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r8, $r18);
r19 = $r17;
$z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"$$$\");
if $z0 == 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
