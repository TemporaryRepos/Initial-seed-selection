digraph "unitGraph" {
    "i1 = 0"
    "r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(11L, -2147483648)"
    "$r1 = new java.math.MathContext"
    "specialinvoke $r1.<java.math.MathContext: void <init>(int)>(1)"
    "r2 = $r1"
    "r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2)"
    "i1 = 1"
    "$r4 = <java.lang.System: java.io.PrintStream err>"
    "$r3 = newarray (java.lang.Object)[3]"
    "$r3[0] = r0"
    "$i0 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>()"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r3[1] = $r5"
    "$r3[2] = r7"
    "virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Did not get expected overflow rounding %s to %d digits, got %s%n\", $r3)"
    "goto [?= return i1]"
    "$r6 := @caughtexception"
    "return i1"
    "i1 = 0"->"r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(11L, -2147483648)";
    "r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(11L, -2147483648)"->"$r1 = new java.math.MathContext";
    "$r1 = new java.math.MathContext"->"specialinvoke $r1.<java.math.MathContext: void <init>(int)>(1)";
    "specialinvoke $r1.<java.math.MathContext: void <init>(int)>(1)"->"r2 = $r1";
    "r2 = $r1"->"r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2)";
    "r2 = $r1"->"$r6 := @caughtexception";
    "r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2)"->"i1 = 1";
    "r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2)"->"$r6 := @caughtexception";
    "i1 = 1"->"$r4 = <java.lang.System: java.io.PrintStream err>";
    "i1 = 1"->"$r6 := @caughtexception";
    "$r4 = <java.lang.System: java.io.PrintStream err>"->"$r3 = newarray (java.lang.Object)[3]";
    "$r4 = <java.lang.System: java.io.PrintStream err>"->"$r6 := @caughtexception";
    "$r3 = newarray (java.lang.Object)[3]"->"$r3[0] = r0";
    "$r3 = newarray (java.lang.Object)[3]"->"$r6 := @caughtexception";
    "$r3[0] = r0"->"$i0 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>()";
    "$r3[0] = r0"->"$r6 := @caughtexception";
    "$i0 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>()"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$i0 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>()"->"$r6 := @caughtexception";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r3[1] = $r5";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r6 := @caughtexception";
    "$r3[1] = $r5"->"$r3[2] = r7";
    "$r3[1] = $r5"->"$r6 := @caughtexception";
    "$r3[2] = r7"->"virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Did not get expected overflow rounding %s to %d digits, got %s%n\", $r3)";
    "$r3[2] = r7"->"$r6 := @caughtexception";
    "virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Did not get expected overflow rounding %s to %d digits, got %s%n\", $r3)"->"goto [?= return i1]";
    "virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"Did not get expected overflow rounding %s to %d digits, got %s%n\", $r3)"->"$r6 := @caughtexception";
    "goto [?= return i1]"->"return i1";
    "$r6 := @caughtexception"->"return i1";
}
