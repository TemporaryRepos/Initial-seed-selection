digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Method;
r1 := @parameter1: java.lang.reflect.Method;
$z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
"
    "Block 1:
[preds: 0 ] [succs: ]
$r12 = new java.lang.RuntimeException;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be equal()\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);
throw $r12;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
$z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();
if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
"
    "Block 3:
[preds: 2 ] [succs: ]
$r7 = new java.lang.RuntimeException;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should not be accessible\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);
throw $r7;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
if $z2 != 0 goto return;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r2 = new java.lang.RuntimeException;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be accessible\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r2;
"
    "Block 6:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Method;
r1 := @parameter1: java.lang.reflect.Method;
$z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
"->"Block 1:
[preds: 0 ] [succs: ]
$r12 = new java.lang.RuntimeException;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be equal()\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);
throw $r12;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.reflect.Method;
r1 := @parameter1: java.lang.reflect.Method;
$z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);
if $z0 != 0 goto virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
$z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();
if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
$z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();
if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
"->"Block 3:
[preds: 2 ] [succs: ]
$r7 = new java.lang.RuntimeException;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should not be accessible\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);
throw $r7;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(0);
virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
$z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();
if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
$z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
if $z2 != 0 goto return;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
if $z2 != 0 goto return;
"->"Block 5:
[preds: 4 ] [succs: ]
$r2 = new java.lang.RuntimeException;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be accessible\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r2;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$z2 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();
if $z2 != 0 goto return;
"->"Block 6:
[preds: 4 ] [succs: ]
return;
";
}
