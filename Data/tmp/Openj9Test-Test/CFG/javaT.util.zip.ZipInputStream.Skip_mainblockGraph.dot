digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 5 ]
r6 := @parameter0: java.lang.String[];
$r0 = new java.util.zip.ZipInputStream;
$r1 = <java.lang.System: java.io.InputStream in>;
specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1);
r2 = $r0;
"
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L);
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r3 = new java.lang.Exception;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\");
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r3;
"
    "Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
"
    "Block 0:
[preds: ] [succs: 1 5 ]
r6 := @parameter0: java.lang.String[];
$r0 = new java.util.zip.ZipInputStream;
$r1 = <java.lang.System: java.io.InputStream in>;
specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1);
r2 = $r0;
"->"Block 1:
[preds: 0 ] [succs: 2 5 ]
virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L);
";
    "Block 0:
[preds: ] [succs: 1 5 ]
r6 := @parameter0: java.lang.String[];
$r0 = new java.util.zip.ZipInputStream;
$r1 = <java.lang.System: java.io.InputStream in>;
specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1);
r2 = $r0;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L);
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
$r3 = new java.lang.Exception;
";
    "Block 1:
[preds: 0 ] [succs: 2 5 ]
virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L);
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r3 = new java.lang.Exception;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\");
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r3 = new java.lang.Exception;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\");
"->"Block 4:
[preds: 3 ] [succs: 5 ]
throw $r3;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\");
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
throw $r3;
"->"Block 5:
[preds: 0 1 2 3 4 ] [succs: ]
$r4 := @caughtexception;
r5 = $r4;
return;
";
}
