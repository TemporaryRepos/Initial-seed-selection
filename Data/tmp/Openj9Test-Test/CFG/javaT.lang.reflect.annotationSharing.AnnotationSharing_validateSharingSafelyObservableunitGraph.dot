digraph "unitGraph" {
    "r0 := @parameter0: java.lang.reflect.AccessibleObject[]"
    "r1 := @parameter1: java.lang.reflect.AccessibleObject[]"
    "r25 = r0"
    "i3 = lengthof r25"
    "i4 = 0"
    "if i4 >= i3 goto r27 = r1"
    "r26 = r25[i4]"
    "virtualinvoke r26.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(0)"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "r27 = r1"
    "i5 = lengthof r27"
    "i6 = 0"
    "if i6 >= i5 goto r29 = r0"
    "r28 = r27[i6]"
    "virtualinvoke r28.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1)"
    "i6 = i6 + 1"
    "r29 = r0"
    "i7 = lengthof r29"
    "i8 = 0"
    "if i8 >= i7 goto r31 = r1"
    "r30 = r29[i8]"
    "$z2 = virtualinvoke r30.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()"
    "if $z2 == 0 goto i8 = i8 + 1"
    "$r20 = new java.lang.RuntimeException"
    "$r21 = new java.lang.StringBuilder"
    "specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30)"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should not be accessible\")"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24)"
    "throw $r20"
    "i8 = i8 + 1"
    "r31 = r1"
    "i9 = lengthof r31"
    "i10 = 0"
    "if i10 >= i9 goto i11 = 0"
    "r32 = r31[i10]"
    "$z1 = virtualinvoke r32.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()"
    "if $z1 != 0 goto i10 = i10 + 1"
    "$r15 = new java.lang.RuntimeException"
    "$r16 = new java.lang.StringBuilder"
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be accessible\")"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19)"
    "throw $r15"
    "i10 = i10 + 1"
    "i11 = 0"
    "$i0 = lengthof r0"
    "if i11 >= $i0 goto i12 = 0"
    "$r5 = r0[i11]"
    "$r4 = r1[i11]"
    "$z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4)"
    "if $z0 != 0 goto i11 = i11 + 1"
    "$r6 = new java.lang.RuntimeException"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = r0[i11]"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \")"
    "$r11 = r1[i11]"
    "$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11)"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be equal()\")"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14)"
    "throw $r6"
    "i11 = i11 + 1"
    "goto [?= $i0 = lengthof r0]"
    "i12 = 0"
    "$i1 = lengthof r0"
    "if i12 >= $i1 goto i13 = 0"
    "r0[i12] = null"
    "i12 = i12 + 1"
    "goto [?= $i1 = lengthof r0]"
    "i13 = 0"
    "$i2 = lengthof r1"
    "if i13 >= $i2 goto return"
    "$r2 = r1[i13]"
    "if $r2 != null goto i13 = i13 + 1"
    "$r3 = new java.lang.RuntimeException"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Detected sharing of AccessibleObject arrays\")"
    "throw $r3"
    "i13 = i13 + 1"
    "goto [?= $i2 = lengthof r1]"
    "return"
    "r0 := @parameter0: java.lang.reflect.AccessibleObject[]"->"r1 := @parameter1: java.lang.reflect.AccessibleObject[]";
    "r1 := @parameter1: java.lang.reflect.AccessibleObject[]"->"r25 = r0";
    "r25 = r0"->"i3 = lengthof r25";
    "i3 = lengthof r25"->"i4 = 0";
    "i4 = 0"->"if i4 >= i3 goto r27 = r1";
    "if i4 >= i3 goto r27 = r1"->"r26 = r25[i4]";
    "if i4 >= i3 goto r27 = r1"->"r27 = r1";
    "r26 = r25[i4]"->"virtualinvoke r26.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(0)";
    "virtualinvoke r26.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(0)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i3 goto r27 = r1";
    "r27 = r1"->"i5 = lengthof r27";
    "i5 = lengthof r27"->"i6 = 0";
    "i6 = 0"->"if i6 >= i5 goto r29 = r0";
    "if i6 >= i5 goto r29 = r0"->"r28 = r27[i6]";
    "if i6 >= i5 goto r29 = r0"->"r29 = r0";
    "r28 = r27[i6]"->"virtualinvoke r28.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1)";
    "virtualinvoke r28.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i5 goto r29 = r0";
    "r29 = r0"->"i7 = lengthof r29";
    "i7 = lengthof r29"->"i8 = 0";
    "i8 = 0"->"if i8 >= i7 goto r31 = r1";
    "if i8 >= i7 goto r31 = r1"->"r30 = r29[i8]";
    "if i8 >= i7 goto r31 = r1"->"r31 = r1";
    "r30 = r29[i8]"->"$z2 = virtualinvoke r30.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()";
    "$z2 = virtualinvoke r30.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()"->"if $z2 == 0 goto i8 = i8 + 1";
    "if $z2 == 0 goto i8 = i8 + 1"->"$r20 = new java.lang.RuntimeException";
    "if $z2 == 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r20 = new java.lang.RuntimeException"->"$r21 = new java.lang.StringBuilder";
    "$r21 = new java.lang.StringBuilder"->"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30)";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30)"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should not be accessible\")";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should not be accessible\")"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24)";
    "specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24)"->"throw $r20";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i7 goto r31 = r1";
    "r31 = r1"->"i9 = lengthof r31";
    "i9 = lengthof r31"->"i10 = 0";
    "i10 = 0"->"if i10 >= i9 goto i11 = 0";
    "if i10 >= i9 goto i11 = 0"->"r32 = r31[i10]";
    "if i10 >= i9 goto i11 = 0"->"i11 = 0";
    "r32 = r31[i10]"->"$z1 = virtualinvoke r32.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()";
    "$z1 = virtualinvoke r32.<java.lang.reflect.AccessibleObject: boolean isAccessible()>()"->"if $z1 != 0 goto i10 = i10 + 1";
    "if $z1 != 0 goto i10 = i10 + 1"->"$r15 = new java.lang.RuntimeException";
    "if $z1 != 0 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "$r15 = new java.lang.RuntimeException"->"$r16 = new java.lang.StringBuilder";
    "$r16 = new java.lang.StringBuilder"->"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be accessible\")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be accessible\")"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19)";
    "specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19)"->"throw $r15";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i9 goto i11 = 0";
    "i11 = 0"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if i11 >= $i0 goto i12 = 0";
    "if i11 >= $i0 goto i12 = 0"->"$r5 = r0[i11]";
    "if i11 >= $i0 goto i12 = 0"->"i12 = 0";
    "$r5 = r0[i11]"->"$r4 = r1[i11]";
    "$r4 = r1[i11]"->"$z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4)";
    "$z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4)"->"if $z0 != 0 goto i11 = i11 + 1";
    "if $z0 != 0 goto i11 = i11 + 1"->"$r6 = new java.lang.RuntimeException";
    "if $z0 != 0 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "$r6 = new java.lang.RuntimeException"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r8 = r0[i11]";
    "$r8 = r0[i11]"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8)";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \")"->"$r11 = r1[i11]";
    "$r11 = r1[i11]"->"$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11)";
    "$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11)"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be equal()\")";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be equal()\")"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14)";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14)"->"throw $r6";
    "i11 = i11 + 1"->"goto [?= $i0 = lengthof r0]";
    "goto [?= $i0 = lengthof r0]"->"$i0 = lengthof r0";
    "i12 = 0"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"if i12 >= $i1 goto i13 = 0";
    "if i12 >= $i1 goto i13 = 0"->"r0[i12] = null";
    "if i12 >= $i1 goto i13 = 0"->"i13 = 0";
    "r0[i12] = null"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"goto [?= $i1 = lengthof r0]";
    "goto [?= $i1 = lengthof r0]"->"$i1 = lengthof r0";
    "i13 = 0"->"$i2 = lengthof r1";
    "$i2 = lengthof r1"->"if i13 >= $i2 goto return";
    "if i13 >= $i2 goto return"->"$r2 = r1[i13]";
    "if i13 >= $i2 goto return"->"return";
    "$r2 = r1[i13]"->"if $r2 != null goto i13 = i13 + 1";
    "if $r2 != null goto i13 = i13 + 1"->"$r3 = new java.lang.RuntimeException";
    "if $r2 != null goto i13 = i13 + 1"->"i13 = i13 + 1";
    "$r3 = new java.lang.RuntimeException"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Detected sharing of AccessibleObject arrays\")";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Detected sharing of AccessibleObject arrays\")"->"throw $r3";
    "i13 = i13 + 1"->"goto [?= $i2 = lengthof r1]";
    "goto [?= $i2 = lengthof r1]"->"$i2 = lengthof r1";
}
