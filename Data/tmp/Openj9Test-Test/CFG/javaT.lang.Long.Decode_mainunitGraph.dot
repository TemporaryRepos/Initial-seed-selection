digraph "unitGraph" {
    "r16 := @parameter0: java.lang.String[]"
    "$r0 = new java.lang.String"
    "specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\")"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L)"
    "$r1 = new java.lang.String"
    "specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\")"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L)"
    "$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L)"
    "$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L)"
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L)"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\")"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\")"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\")"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\")"
    "$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L)"
    "$r5 = <java.math.BigInteger: java.math.BigInteger ONE>"
    "$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5)"
    "$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\")"
    "$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L)"
    "$r9 = <java.math.BigInteger: java.math.BigInteger ONE>"
    "$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9)"
    "$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\")"
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\")"
    "staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null)"
    "$r13 = new java.lang.RuntimeException"
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\")"
    "throw $r13"
    "$r14 := @caughtexception"
    "r15 = $r14"
    "return"
    "r16 := @parameter0: java.lang.String[]"->"$r0 = new java.lang.String";
    "$r0 = new java.lang.String"->"specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\")";
    "specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-9223372036854775808\")"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r0, -9223372036854775808L)"->"$r1 = new java.lang.String";
    "$r1 = new java.lang.String"->"specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\")";
    "specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"9223372036854775807\")"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r1, 9223372036854775807L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"10\", 10L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0x10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"0X10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"010\", 8L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"#10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+10\", 10L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0x10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+0X10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+010\", 8L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"+#10\", 16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-10\", -10L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0x10\", -16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-0X10\", -16L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-010\", -8L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>(\"-#10\", -16L)"->"$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L)";
    "$r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(-9223372036854775808L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r2, -9223372036854775808L)"->"$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L)";
    "$r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(9223372036854775807L)"->"staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L)";
    "staticinvoke <javaT.lang.Long.Decode: void check(java.lang.String,long)>($r3, 9223372036854775807L)"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Long.decode allows negative sign in wrong position.\")"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Long.decode allows positive sign in wrong position.\")"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\")"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\")"->"$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L)";
    "$r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L)"->"$r5 = <java.math.BigInteger: java.math.BigInteger ONE>";
    "$r5 = <java.math.BigInteger: java.math.BigInteger ONE>"->"$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5)";
    "$r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5)"->"$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString()>()"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r7, \"Out of range\")"->"$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L)";
    "$r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L)"->"$r9 = <java.math.BigInteger: java.math.BigInteger ONE>";
    "$r9 = <java.math.BigInteger: java.math.BigInteger ONE>"->"$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9)";
    "$r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9)"->"$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>()"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>($r11, \"Out of range\")"->"staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\")";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\")"->"staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null)";
    "staticinvoke <javaT.lang.Long.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\")"->"$r14 := @caughtexception";
    "staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null)"->"$r13 = new java.lang.RuntimeException";
    "staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(null)"->"$r14 := @caughtexception";
    "$r13 = new java.lang.RuntimeException"->"specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\")";
    "$r13 = new java.lang.RuntimeException"->"$r14 := @caughtexception";
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\")"->"throw $r13";
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Long.decode(null) expected to throw NPE\")"->"$r14 := @caughtexception";
    "throw $r13"->"$r14 := @caughtexception";
    "$r14 := @caughtexception"->"r15 = $r14";
    "r15 = $r14"->"return";
}
