digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()"
    "virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")"
    "$r0 = new javaT.text.BreakIterator.MirroredBreakIterator"
    "specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9)"
    "r1 = $r0"
    "i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>()"
    "if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>()"
    "$r3 = new java.lang.RuntimeException"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first != 0: \")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"
    "throw $r3"
    "virtualinvoke r9.<java.text.BreakIterator: int last()>()"
    "r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()"
    "virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")"
    "$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\""
    "i2 = virtualinvoke $r2.<java.lang.String: int length()>()"
    "i29 = 0"
    "if i29 > i2 goto i30 = neg i2"
    "if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"
    "$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1)"
    "$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"
    "$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25)"
    "$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27)"
    "i29 = i29 + 1"
    "goto [?= (branch)]"
    "i30 = neg i2"
    "if i30 >= 0 goto i31 = 1"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30)"
    "$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23)"
    "i30 = i30 + 1"
    "i31 = 1"
    "if i31 >= i2 goto i32 = i2"
    "$i18 = i2 + i31"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18)"
    "$i19 = i2 + i31"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19)"
    "$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21)"
    "i31 = i31 + 1"
    "i32 = i2"
    "if i32 < 0 goto i33 = neg i2"
    "if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"
    "$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1)"
    "$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"
    "$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14)"
    "$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16)"
    "i32 = i32 + -1"
    "i33 = neg i2"
    "if i33 >= 0 goto i34 = 1"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33)"
    "$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12)"
    "i33 = i33 + 1"
    "i34 = 1"
    "if i34 >= i2 goto i35 = 0"
    "$i7 = i2 + i34"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7)"
    "$i8 = i2 + i34"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8)"
    "$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10)"
    "i34 = i34 + 1"
    "i35 = 0"
    "if i35 > i2 goto i36 = neg i2"
    "$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35)"
    "$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1)"
    "$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"
    "$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6)"
    "i35 = i35 + 1"
    "i36 = neg i2"
    "if i36 >= 0 goto i37 = 1"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36)"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36)"
    "i36 = i36 + 1"
    "i37 = 1"
    "if i37 >= i2 goto return"
    "$i3 = i2 + i37"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3)"
    "$i4 = i2 + i37"
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4)"
    "i37 = i37 + 1"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()";
    "r9 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()"->"virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")";
    "virtualinvoke r9.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")"->"$r0 = new javaT.text.BreakIterator.MirroredBreakIterator";
    "$r0 = new javaT.text.BreakIterator.MirroredBreakIterator"->"specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9)";
    "specialinvoke $r0.<javaT.text.BreakIterator.MirroredBreakIterator: void <init>(java.text.BreakIterator)>(r9)"->"r1 = $r0";
    "r1 = $r0"->"i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>()";
    "i0 = virtualinvoke r9.<java.text.BreakIterator: int first()>()"->"if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>()";
    "if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>()"->"$r3 = new java.lang.RuntimeException";
    "if i0 == 0 goto virtualinvoke r9.<java.text.BreakIterator: int last()>()"->"virtualinvoke r9.<java.text.BreakIterator: int last()>()";
    "$r3 = new java.lang.RuntimeException"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first != 0: \")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"first != 0: \")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"->"throw $r3";
    "virtualinvoke r9.<java.text.BreakIterator: int last()>()"->"r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()";
    "r10 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance()>()"->"virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")";
    "virtualinvoke r10.<java.text.BreakIterator: void setText(java.lang.String)>(\"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\")"->"$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\"";
    "$r2 = \"An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.\""->"i2 = virtualinvoke $r2.<java.lang.String: int length()>()";
    "i2 = virtualinvoke $r2.<java.lang.String: int length()>()"->"i29 = 0";
    "i29 = 0"->"if i29 > i2 goto i30 = neg i2";
    "if i29 > i2 goto i30 = neg i2"->"if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)";
    "if i29 > i2 goto i30 = neg i2"->"i30 = neg i2";
    "if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"->"$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)";
    "if i29 != i2 goto $i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"->"$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)";
    "$i28 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i28, -1)"->"$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)";
    "$i24 = virtualinvoke r10.<java.text.BreakIterator: int following(int)>(i29)"->"$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29)";
    "$i25 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int following(int)>(i29)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i24, $i25)"->"$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i26 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i27 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i26, $i27)"->"i29 = i29 + 1";
    "i29 = i29 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i29 > i2 goto i30 = neg i2";
    "i30 = neg i2"->"if i30 >= 0 goto i31 = 1";
    "if i30 >= 0 goto i31 = 1"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30)";
    "if i30 >= 0 goto i31 = 1"->"i31 = 1";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, i30)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, i30)"->"$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i22 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i23 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i22, $i23)"->"i30 = i30 + 1";
    "i30 = i30 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i30 >= 0 goto i31 = 1";
    "i31 = 1"->"if i31 >= i2 goto i32 = i2";
    "if i31 >= i2 goto i32 = i2"->"$i18 = i2 + i31";
    "if i31 >= i2 goto i32 = i2"->"i32 = i2";
    "$i18 = i2 + i31"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r10, $i18)"->"$i19 = i2 + i31";
    "$i19 = i2 + i31"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkFollowingException(java.text.BreakIterator,int)>(r1, $i19)"->"$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i20 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i21 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i20, $i21)"->"i31 = i31 + 1";
    "i31 = i31 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i31 >= i2 goto i32 = i2";
    "i32 = i2"->"if i32 < 0 goto i33 = neg i2";
    "if i32 < 0 goto i33 = neg i2"->"if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)";
    "if i32 < 0 goto i33 = neg i2"->"i33 = neg i2";
    "if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"->"$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)";
    "if i32 != 0 goto $i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"->"$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)";
    "$i17 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i17, -1)"->"$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)";
    "$i13 = virtualinvoke r10.<java.text.BreakIterator: int preceding(int)>(i32)"->"$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32)";
    "$i14 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int preceding(int)>(i32)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i13, $i14)"->"$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i15 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i16 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i15, $i16)"->"i32 = i32 + -1";
    "i32 = i32 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i32 < 0 goto i33 = neg i2";
    "i33 = neg i2"->"if i33 >= 0 goto i34 = 1";
    "if i33 >= 0 goto i34 = 1"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33)";
    "if i33 >= 0 goto i34 = 1"->"i34 = 1";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, i33)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, i33)"->"$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i11 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i12 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i11, $i12)"->"i33 = i33 + 1";
    "i33 = i33 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i33 >= 0 goto i34 = 1";
    "i34 = 1"->"if i34 >= i2 goto i35 = 0";
    "if i34 >= i2 goto i35 = 0"->"$i7 = i2 + i34";
    "if i34 >= i2 goto i35 = 0"->"i35 = 0";
    "$i7 = i2 + i34"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r10, $i7)"->"$i8 = i2 + i34";
    "$i8 = i2 + i34"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkPrecedingException(java.text.BreakIterator,int)>(r1, $i8)"->"$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i9 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i10 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i9, $i10)"->"i34 = i34 + 1";
    "i34 = i34 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i34 >= i2 goto i35 = 0";
    "i35 = 0"->"if i35 > i2 goto i36 = neg i2";
    "if i35 > i2 goto i36 = neg i2"->"$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35)";
    "if i35 > i2 goto i36 = neg i2"->"i36 = neg i2";
    "$z0 = virtualinvoke r10.<java.text.BreakIterator: boolean isBoundary(int)>(i35)"->"$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35)";
    "$z1 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: boolean isBoundary(int)>(i35)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(boolean,boolean)>($z0, $z1)"->"$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>()";
    "$i5 = virtualinvoke r10.<java.text.BreakIterator: int current()>()"->"$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()";
    "$i6 = virtualinvoke r1.<javaT.text.BreakIterator.MirroredBreakIterator: int current()>()"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void check(int,int)>($i5, $i6)"->"i35 = i35 + 1";
    "i35 = i35 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i35 > i2 goto i36 = neg i2";
    "i36 = neg i2"->"if i36 >= 0 goto i37 = 1";
    "if i36 >= 0 goto i37 = 1"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36)";
    "if i36 >= 0 goto i37 = 1"->"i37 = 1";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, i36)"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, i36)"->"i36 = i36 + 1";
    "i36 = i36 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i36 >= 0 goto i37 = 1";
    "i37 = 1"->"if i37 >= i2 goto return";
    "if i37 >= i2 goto return"->"$i3 = i2 + i37";
    "if i37 >= i2 goto return"->"return";
    "$i3 = i2 + i37"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r10, $i3)"->"$i4 = i2 + i37";
    "$i4 = i2 + i37"->"staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4)";
    "staticinvoke <javaT.text.BreakIterator.ExceptionTest: void checkIsBoundaryException(java.text.BreakIterator,int)>(r1, $i4)"->"i37 = i37 + 1";
    "i37 = i37 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i37 >= i2 goto return";
}
