digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r17 := @parameter0: java.lang.String[];
$r18 = new com.sun.crypto.provider.SunJCE;
specialinvoke $r18.<com.sun.crypto.provider.SunJCE: void <init>()>();
$r20 = (java.security.Provider) $r18;
staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r20);
i4 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$i1 = lengthof $r1;
if i4 >= $i1 goto $r2 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r19 = new java.lang.StringBuilder;
specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing \");
$r6 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r7 = $r6[i4];
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" KeyGenerator with \");
$r10 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i2 = $r10[i4];
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-bit keysize\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
$r14 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r16 = $r14[i4];
$r15 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i3 = $r15[i4];
staticinvoke <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: void runTest(java.lang.String,int)>($r16, $i3);
i4 = i4 + 1;
goto [?= $r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Tests Passed\");
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r17 := @parameter0: java.lang.String[];
$r18 = new com.sun.crypto.provider.SunJCE;
specialinvoke $r18.<com.sun.crypto.provider.SunJCE: void <init>()>();
$r20 = (java.security.Provider) $r18;
staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r20);
i4 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$i1 = lengthof $r1;
if i4 >= $i1 goto $r2 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$i1 = lengthof $r1;
if i4 >= $i1 goto $r2 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r19 = new java.lang.StringBuilder;
specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing \");
$r6 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r7 = $r6[i4];
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" KeyGenerator with \");
$r10 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i2 = $r10[i4];
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-bit keysize\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
$r14 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r16 = $r14[i4];
$r15 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i3 = $r15[i4];
staticinvoke <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: void runTest(java.lang.String,int)>($r16, $i3);
i4 = i4 + 1;
goto [?= $r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$i1 = lengthof $r1;
if i4 >= $i1 goto $r2 = <java.lang.System: java.io.PrintStream out>;
"->"Block 3:
[preds: 1 ] [succs: ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Tests Passed\");
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r19 = new java.lang.StringBuilder;
specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Testing \");
$r6 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r7 = $r6[i4];
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" KeyGenerator with \");
$r10 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i2 = $r10[i4];
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-bit keysize\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
$r14 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$r16 = $r14[i4];
$r15 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: int[] KEY_SIZES>;
$i3 = $r15[i4];
staticinvoke <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: void runTest(java.lang.String,int)>($r16, $i3);
i4 = i4 + 1;
goto [?= $r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r1 = <com.sun.crypto.provider.KeyGenerator.TestExplicitKeyLength: java.lang.String[] ALGOS>;
$i1 = lengthof $r1;
if i4 >= $i1 goto $r2 = <java.lang.System: java.io.PrintStream out>;
";
}
