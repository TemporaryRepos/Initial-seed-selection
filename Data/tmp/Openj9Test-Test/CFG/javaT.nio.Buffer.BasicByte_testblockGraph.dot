digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
staticinvoke <javaT.nio.Buffer.BasicByte: void testAllocate()>();
$r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(7168);
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, $r0, 0);
$r1 = newarray (byte)[7168];
$r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, 0, 7168);
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, $r2, 0);
$r3 = newarray (byte)[1024];
staticinvoke <javaT.nio.Buffer.BasicByte: void test(byte[])>($r3);
r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(7168);
virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
$i1 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
if $i0 >= $i1 goto staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$b2 = virtualinvoke r4.<java.nio.ByteBuffer: byte get()>();
$l3 = (long) $b2;
staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r4, $l3, 0L);
goto [?= $i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>()];
"
    "Block 3:
[preds: 1 ] [succs: ]
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
$r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10);
staticinvoke <javaT.nio.Buffer.BasicByte: void callReset(java.nio.ByteBuffer)>($r6);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
staticinvoke <javaT.nio.Buffer.BasicByte: void testAllocate()>();
$r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(7168);
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, $r0, 0);
$r1 = newarray (byte)[7168];
$r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, 0, 7168);
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, $r2, 0);
$r3 = newarray (byte)[1024];
staticinvoke <javaT.nio.Buffer.BasicByte: void test(byte[])>($r3);
r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(7168);
virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
$i1 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
if $i0 >= $i1 goto staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
$i1 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
if $i0 >= $i1 goto staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$b2 = virtualinvoke r4.<java.nio.ByteBuffer: byte get()>();
$l3 = (long) $b2;
staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r4, $l3, 0L);
goto [?= $i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>()];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
$i1 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
if $i0 >= $i1 goto staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
"->"Block 3:
[preds: 1 ] [succs: ]
staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
$r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10);
staticinvoke <javaT.nio.Buffer.BasicByte: void callReset(java.nio.ByteBuffer)>($r6);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$b2 = virtualinvoke r4.<java.nio.ByteBuffer: byte get()>();
$l3 = (long) $b2;
staticinvoke <javaT.nio.Buffer.BasicByte: void ck(java.nio.Buffer,long,long)>(r4, $l3, 0L);
goto [?= $i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>()];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
$i1 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
if $i0 >= $i1 goto staticinvoke <javaT.nio.Buffer.BasicByte: void test(int,java.nio.ByteBuffer,boolean)>(0, r4, 1);
";
}
