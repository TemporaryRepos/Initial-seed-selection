digraph "unitGraph" {
    "r0 := @parameter0: java.nio.LongBuffer"
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"
    "i3 = 0"
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()"
    "$l1 = virtualinvoke r0.<java.nio.LongBuffer: long get()>()"
    "$l2 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i3)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l1, $l2)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()"
    "return"
    "r0 := @parameter0: java.nio.LongBuffer"->"i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()";
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()"->"$l1 = virtualinvoke r0.<java.nio.LongBuffer: long get()>()";
    "if i3 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()"->"virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()";
    "$l1 = virtualinvoke r0.<java.nio.LongBuffer: long get()>()"->"$l2 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i3)";
    "$l2 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i3)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l1, $l2)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void ck(java.nio.Buffer,long,long)>(r0, $l1, $l2)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()";
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer rewind()>()"->"return";
}
