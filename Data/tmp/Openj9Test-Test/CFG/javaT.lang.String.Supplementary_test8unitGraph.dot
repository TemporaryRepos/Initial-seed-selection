digraph "unitGraph" {
    "i6 = 0"
    "$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "$i0 = lengthof $r0"
    "if i6 >= $i0 goto return"
    "$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>"
    "r2 = $r1[i6]"
    "i1 = virtualinvoke r2.<java.lang.String: int length()>()"
    "i7 = 0"
    "if i7 > i1 goto i11 = i1"
    "i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1)"
    "i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1)"
    "if i8 == i9 goto $z0 = 0"
    "$z0 = 1"
    "goto [?= $r17 = new java.lang.StringBuilder]"
    "$z0 = 0"
    "$r17 = new java.lang.StringBuilder"
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9)"
    "r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1)"
    "$i5 = virtualinvoke r35.<java.lang.String: int length()>()"
    "i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5)"
    "if i10 == i9 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= $r26 = new java.lang.StringBuilder]"
    "$z1 = 0"
    "$r26 = new java.lang.StringBuilder"
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9)"
    "i7 = i7 + 1"
    "goto [?= (branch)]"
    "i11 = i1"
    "if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"
    "i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11)"
    "i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11)"
    "if i12 == i13 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= $r3 = new java.lang.StringBuilder]"
    "$z2 = 0"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13)"
    "r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11)"
    "$i4 = virtualinvoke r36.<java.lang.String: int length()>()"
    "i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4)"
    "if i14 == i13 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= $r10 = new java.lang.StringBuilder]"
    "$z3 = 0"
    "$r10 = new java.lang.StringBuilder"
    "specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13)"
    "i11 = i11 + -1"
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i2 = i1 + 1"
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i3 = i1 - 1"
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "i6 = i6 + 1"
    "goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"
    "return"
    "i6 = 0"->"$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"$i0 = lengthof $r0";
    "$i0 = lengthof $r0"->"if i6 >= $i0 goto return";
    "if i6 >= $i0 goto return"->"$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
    "if i6 >= $i0 goto return"->"return";
    "$r1 = <javaT.lang.String.Supplementary: java.lang.String[] input>"->"r2 = $r1[i6]";
    "r2 = $r1[i6]"->"i1 = virtualinvoke r2.<java.lang.String: int length()>()";
    "i1 = virtualinvoke r2.<java.lang.String: int length()>()"->"i7 = 0";
    "i7 = 0"->"if i7 > i1 goto i11 = i1";
    "if i7 > i1 goto i11 = i1"->"i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1)";
    "if i7 > i1 goto i11 = i1"->"i11 = i1";
    "i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(i7, i1)"->"i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1)";
    "i9 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, i7, i1)"->"if i8 == i9 goto $z0 = 0";
    "if i8 == i9 goto $z0 = 0"->"$z0 = 1";
    "if i8 == i9 goto $z0 = 0"->"$z0 = 0";
    "$z0 = 1"->"goto [?= $r17 = new java.lang.StringBuilder]";
    "goto [?= $r17 = new java.lang.StringBuilder]"->"$r17 = new java.lang.StringBuilder";
    "$z0 = 0"->"$r17 = new java.lang.StringBuilder";
    "$r17 = new java.lang.StringBuilder"->"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z0, $r25, i8, i9)"->"r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1)";
    "r35 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i1)"->"$i5 = virtualinvoke r35.<java.lang.String: int length()>()";
    "$i5 = virtualinvoke r35.<java.lang.String: int length()>()"->"i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5)";
    "i10 = virtualinvoke r35.<java.lang.String: int codePointCount(int,int)>(0, $i5)"->"if i10 == i9 goto $z1 = 0";
    "if i10 == i9 goto $z1 = 0"->"$z1 = 1";
    "if i10 == i9 goto $z1 = 0"->"$z1 = 0";
    "$z1 = 1"->"goto [?= $r26 = new java.lang.StringBuilder]";
    "goto [?= $r26 = new java.lang.StringBuilder]"->"$r26 = new java.lang.StringBuilder";
    "$z1 = 0"->"$r26 = new java.lang.StringBuilder";
    "$r26 = new java.lang.StringBuilder"->"specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)";
    "$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"->"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z1, $r34, i10, i9)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 > i1 goto i11 = i1";
    "i11 = i1"->"if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11)";
    "if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "i12 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, i11)"->"i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11)";
    "i13 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i11)"->"if i12 == i13 goto $z2 = 0";
    "if i12 == i13 goto $z2 = 0"->"$z2 = 1";
    "if i12 == i13 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= $r3 = new java.lang.StringBuilder]";
    "goto [?= $r3 = new java.lang.StringBuilder]"->"$r3 = new java.lang.StringBuilder";
    "$z2 = 0"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"codePointCount(input[\")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r9, i12, i13)"->"r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11)";
    "r36 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i11)"->"$i4 = virtualinvoke r36.<java.lang.String: int length()>()";
    "$i4 = virtualinvoke r36.<java.lang.String: int length()>()"->"i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4)";
    "i14 = virtualinvoke r36.<java.lang.String: int codePointCount(int,int)>(0, $i4)"->"if i14 == i13 goto $z3 = 0";
    "if i14 == i13 goto $z3 = 0"->"$z3 = 1";
    "if i14 == i13 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= $r10 = new java.lang.StringBuilder]";
    "goto [?= $r10 = new java.lang.StringBuilder]"->"$r10 = new java.lang.StringBuilder";
    "$z3 = 0"->"$r10 = new java.lang.StringBuilder";
    "$r10 = new java.lang.StringBuilder"->"specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"substring:codePointCount(input[\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13)";
    "staticinvoke <javaT.lang.String.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r16, i14, i13)"->"i11 = i11 + -1";
    "i11 = i11 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 < 0 goto staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i2 = i1 + 1";
    "$i2 = i1 + 1"->"staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i3 = i1 - 1";
    "$i3 = i1 - 1"->"staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.String.Supplementary: void testCodePointCount(java.lang.String,int,int,java.lang.Class)>(r2, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]";
    "goto [?= $r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>]"->"$r0 = <javaT.lang.String.Supplementary: java.lang.String[] input>";
}
