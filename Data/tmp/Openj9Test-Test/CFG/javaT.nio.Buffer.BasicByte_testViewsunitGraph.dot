digraph "unitGraph" {
    "i0 := @parameter0: int"
    "r0 := @parameter1: java.nio.ByteBuffer"
    "z0 := @parameter2: boolean"
    "r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicShort: void test(int,java.nio.ShortBuffer,boolean)>(i0, r1, z0)"
    "$r2 = newarray (byte)[2]"
    "$r2[0] = 0"
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"
    "$i2 = (int) $l1"
    "$b3 = (byte) $i2"
    "$r2[1] = $b3"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r2)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r1)"
    "r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void test(int,java.nio.CharBuffer,boolean)>(i0, r3, z0)"
    "$r4 = newarray (byte)[2]"
    "$r4[0] = 0"
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"
    "$i5 = (int) $l4"
    "$b6 = (byte) $i5"
    "$r4[1] = $b6"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r4)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r3)"
    "r5 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicInt: void test(int,java.nio.IntBuffer,boolean)>(i0, r5, z0)"
    "$r6 = newarray (byte)[4]"
    "$r6[0] = 0"
    "$r6[1] = 0"
    "$r6[2] = 0"
    "$l7 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"
    "$i8 = (int) $l7"
    "$b9 = (byte) $i8"
    "$r6[3] = $b9"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r6)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r5)"
    "r7 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(i0, r7, z0)"
    "$r8 = newarray (byte)[8]"
    "$r8[0] = 0"
    "$r8[1] = 0"
    "$r8[2] = 0"
    "$r8[3] = 0"
    "$r8[4] = 0"
    "$r8[5] = 0"
    "$r8[6] = 0"
    "$l10 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"
    "$i11 = (int) $l10"
    "$b12 = (byte) $i11"
    "$r8[7] = $b12"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r8)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r7)"
    "r9 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicFloat: void test(int,java.nio.FloatBuffer,boolean)>(i0, r9, z0)"
    "$r10 = newarray (byte)[4]"
    "$r10[0] = 66"
    "$r10[1] = -62"
    "$r10[2] = 0"
    "$r10[3] = 0"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r10)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r9)"
    "r11 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.BasicDouble: void test(int,java.nio.DoubleBuffer,boolean)>(i0, r11, z0)"
    "$r12 = newarray (byte)[8]"
    "$r12[0] = 64"
    "$r12[1] = 88"
    "$r12[2] = 64"
    "$r12[3] = 0"
    "$r12[4] = 0"
    "$r12[5] = 0"
    "$r12[6] = 0"
    "$r12[7] = 0"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r12)"
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r11)"
    "return"
    "i0 := @parameter0: int"->"r0 := @parameter1: java.nio.ByteBuffer";
    "r0 := @parameter1: java.nio.ByteBuffer"->"z0 := @parameter2: boolean";
    "z0 := @parameter2: boolean"->"r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>()";
    "r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicShort: void test(int,java.nio.ShortBuffer,boolean)>(i0, r1, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicShort: void test(int,java.nio.ShortBuffer,boolean)>(i0, r1, z0)"->"$r2 = newarray (byte)[2]";
    "$r2 = newarray (byte)[2]"->"$r2[0] = 0";
    "$r2[0] = 0"->"$l1 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)";
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"->"$i2 = (int) $l1";
    "$i2 = (int) $l1"->"$b3 = (byte) $i2";
    "$b3 = (byte) $i2"->"$r2[1] = $b3";
    "$r2[1] = $b3"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r2)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r2)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r1)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r1)"->"r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>()";
    "r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicChar: void test(int,java.nio.CharBuffer,boolean)>(i0, r3, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void test(int,java.nio.CharBuffer,boolean)>(i0, r3, z0)"->"$r4 = newarray (byte)[2]";
    "$r4 = newarray (byte)[2]"->"$r4[0] = 0";
    "$r4[0] = 0"->"$l4 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)";
    "$l4 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"->"$i5 = (int) $l4";
    "$i5 = (int) $l4"->"$b6 = (byte) $i5";
    "$b6 = (byte) $i5"->"$r4[1] = $b6";
    "$r4[1] = $b6"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r4)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r4)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r3)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r3)"->"r5 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>()";
    "r5 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicInt: void test(int,java.nio.IntBuffer,boolean)>(i0, r5, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicInt: void test(int,java.nio.IntBuffer,boolean)>(i0, r5, z0)"->"$r6 = newarray (byte)[4]";
    "$r6 = newarray (byte)[4]"->"$r6[0] = 0";
    "$r6[0] = 0"->"$r6[1] = 0";
    "$r6[1] = 0"->"$r6[2] = 0";
    "$r6[2] = 0"->"$l7 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)";
    "$l7 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"->"$i8 = (int) $l7";
    "$i8 = (int) $l7"->"$b9 = (byte) $i8";
    "$b9 = (byte) $i8"->"$r6[3] = $b9";
    "$r6[3] = $b9"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r6)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r6)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r5)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r5)"->"r7 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()";
    "r7 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(i0, r7, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(i0, r7, z0)"->"$r8 = newarray (byte)[8]";
    "$r8 = newarray (byte)[8]"->"$r8[0] = 0";
    "$r8[0] = 0"->"$r8[1] = 0";
    "$r8[1] = 0"->"$r8[2] = 0";
    "$r8[2] = 0"->"$r8[3] = 0";
    "$r8[3] = 0"->"$r8[4] = 0";
    "$r8[4] = 0"->"$r8[5] = 0";
    "$r8[5] = 0"->"$r8[6] = 0";
    "$r8[6] = 0"->"$l10 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)";
    "$l10 = staticinvoke <javaT.nio.Buffer.BasicByte: long ic(int)>(0)"->"$i11 = (int) $l10";
    "$i11 = (int) $l10"->"$b12 = (byte) $i11";
    "$b12 = (byte) $i11"->"$r8[7] = $b12";
    "$r8[7] = $b12"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r8)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r8)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r7)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r7)"->"r9 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()";
    "r9 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicFloat: void test(int,java.nio.FloatBuffer,boolean)>(i0, r9, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicFloat: void test(int,java.nio.FloatBuffer,boolean)>(i0, r9, z0)"->"$r10 = newarray (byte)[4]";
    "$r10 = newarray (byte)[4]"->"$r10[0] = 66";
    "$r10[0] = 66"->"$r10[1] = -62";
    "$r10[1] = -62"->"$r10[2] = 0";
    "$r10[2] = 0"->"$r10[3] = 0";
    "$r10[3] = 0"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r10)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r10)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r9)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r9)"->"r11 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>()";
    "r11 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>()"->"staticinvoke <javaT.nio.Buffer.BasicDouble: void test(int,java.nio.DoubleBuffer,boolean)>(i0, r11, z0)";
    "staticinvoke <javaT.nio.Buffer.BasicDouble: void test(int,java.nio.DoubleBuffer,boolean)>(i0, r11, z0)"->"$r12 = newarray (byte)[8]";
    "$r12 = newarray (byte)[8]"->"$r12[0] = 64";
    "$r12[0] = 64"->"$r12[1] = 88";
    "$r12[1] = 88"->"$r12[2] = 64";
    "$r12[2] = 64"->"$r12[3] = 0";
    "$r12[3] = 0"->"$r12[4] = 0";
    "$r12[4] = 0"->"$r12[5] = 0";
    "$r12[5] = 0"->"$r12[6] = 0";
    "$r12[6] = 0"->"$r12[7] = 0";
    "$r12[7] = 0"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r12)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkBytes(java.nio.ByteBuffer,byte[])>(r0, $r12)"->"staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r11)";
    "staticinvoke <javaT.nio.Buffer.BasicByte: void checkInvalidMarkException(java.nio.Buffer)>(r11)"->"return";
}
