digraph "unitGraph" {
    "r29 := @parameter0: java.lang.String[]"
    "z0 = 0"
    "$r0 = new java.util.Hashtable"
    "specialinvoke $r0.<java.util.Hashtable: void <init>(int,float)>(100, -3.0F)"
    "r30 = $r0"
    "goto [?= (branch)]"
    "$r28 := @caughtexception"
    "r31 = $r28"
    "z0 = 1"
    "if z0 != 0 goto z1 = 0"
    "$r20 = new java.lang.Exception"
    "specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, negative load factor\")"
    "throw $r20"
    "z1 = 0"
    "$r1 = new java.util.Hashtable"
    "specialinvoke $r1.<java.util.Hashtable: void <init>(int,float)>(100, #NaNF)"
    "r32 = $r1"
    "$r27 := @caughtexception"
    "r33 = $r27"
    "z1 = 1"
    "if z1 != 0 goto z2 = 0"
    "$r19 = new java.lang.Exception"
    "specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, NaN load factor\")"
    "throw $r19"
    "z2 = 0"
    "$r2 = new java.util.HashMap"
    "specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(100, -3.0F)"
    "r34 = $r2"
    "$r26 := @caughtexception"
    "r35 = $r26"
    "z2 = 1"
    "if z2 != 0 goto z3 = 0"
    "$r18 = new java.lang.Exception"
    "specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, negative load factor\")"
    "throw $r18"
    "z3 = 0"
    "$r3 = new java.util.HashMap"
    "specialinvoke $r3.<java.util.HashMap: void <init>(int,float)>(100, #NaNF)"
    "r36 = $r3"
    "$r25 := @caughtexception"
    "r37 = $r25"
    "z3 = 1"
    "if z3 != 0 goto z4 = 0"
    "$r17 = new java.lang.Exception"
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, NaN load factor\")"
    "throw $r17"
    "z4 = 0"
    "$r4 = new java.util.HashSet"
    "specialinvoke $r4.<java.util.HashSet: void <init>(int,float)>(100, -3.0F)"
    "r38 = $r4"
    "$r24 := @caughtexception"
    "r39 = $r24"
    "z4 = 1"
    "if z4 != 0 goto z5 = 0"
    "$r16 = new java.lang.Exception"
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, negative load factor\")"
    "throw $r16"
    "z5 = 0"
    "$r5 = new java.util.HashSet"
    "specialinvoke $r5.<java.util.HashSet: void <init>(int,float)>(100, #NaNF)"
    "r40 = $r5"
    "$r23 := @caughtexception"
    "r41 = $r23"
    "z5 = 1"
    "if z5 != 0 goto z6 = 0"
    "$r15 = new java.lang.Exception"
    "specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, NaN load factor\")"
    "throw $r15"
    "z6 = 0"
    "$r6 = new java.util.WeakHashMap"
    "specialinvoke $r6.<java.util.WeakHashMap: void <init>(int,float)>(100, -3.0F)"
    "r42 = $r6"
    "$r22 := @caughtexception"
    "r43 = $r22"
    "z6 = 1"
    "if z6 != 0 goto z7 = 0"
    "$r14 = new java.lang.Exception"
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, negative load factor\")"
    "throw $r14"
    "z7 = 0"
    "$r7 = new java.util.WeakHashMap"
    "specialinvoke $r7.<java.util.WeakHashMap: void <init>(int,float)>(100, #NaNF)"
    "r44 = $r7"
    "$r21 := @caughtexception"
    "r45 = $r21"
    "z7 = 1"
    "if z7 != 0 goto $r8 = new java.util.Hashtable"
    "$r13 = new java.lang.Exception"
    "specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, NaN load factor\")"
    "throw $r13"
    "$r8 = new java.util.Hashtable"
    "specialinvoke $r8.<java.util.Hashtable: void <init>(int,float)>(100, 0.69F)"
    "r46 = $r8"
    "$r9 = new java.util.HashMap"
    "specialinvoke $r9.<java.util.HashMap: void <init>(int,float)>(100, 0.69F)"
    "r47 = $r9"
    "$r10 = new java.util.HashSet"
    "specialinvoke $r10.<java.util.HashSet: void <init>(int,float)>(100, 0.69F)"
    "r11 = $r10"
    "$r12 = new java.util.WeakHashMap"
    "specialinvoke $r12.<java.util.WeakHashMap: void <init>(int,float)>(100, 0.69F)"
    "r48 = $r12"
    "return"
    "r29 := @parameter0: java.lang.String[]"->"z0 = 0";
    "z0 = 0"->"$r0 = new java.util.Hashtable";
    "z0 = 0"->"$r28 := @caughtexception";
    "$r0 = new java.util.Hashtable"->"specialinvoke $r0.<java.util.Hashtable: void <init>(int,float)>(100, -3.0F)";
    "$r0 = new java.util.Hashtable"->"$r28 := @caughtexception";
    "specialinvoke $r0.<java.util.Hashtable: void <init>(int,float)>(100, -3.0F)"->"r30 = $r0";
    "specialinvoke $r0.<java.util.Hashtable: void <init>(int,float)>(100, -3.0F)"->"$r28 := @caughtexception";
    "r30 = $r0"->"goto [?= (branch)]";
    "r30 = $r0"->"$r28 := @caughtexception";
    "goto [?= (branch)]"->"if z0 != 0 goto z1 = 0";
    "$r28 := @caughtexception"->"r31 = $r28";
    "r31 = $r28"->"z0 = 1";
    "z0 = 1"->"if z0 != 0 goto z1 = 0";
    "if z0 != 0 goto z1 = 0"->"$r20 = new java.lang.Exception";
    "if z0 != 0 goto z1 = 0"->"z1 = 0";
    "$r20 = new java.lang.Exception"->"specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, negative load factor\")";
    "specialinvoke $r20.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, negative load factor\")"->"throw $r20";
    "z1 = 0"->"$r1 = new java.util.Hashtable";
    "z1 = 0"->"$r27 := @caughtexception";
    "$r1 = new java.util.Hashtable"->"specialinvoke $r1.<java.util.Hashtable: void <init>(int,float)>(100, #NaNF)";
    "$r1 = new java.util.Hashtable"->"$r27 := @caughtexception";
    "specialinvoke $r1.<java.util.Hashtable: void <init>(int,float)>(100, #NaNF)"->"r32 = $r1";
    "specialinvoke $r1.<java.util.Hashtable: void <init>(int,float)>(100, #NaNF)"->"$r27 := @caughtexception";
    "r32 = $r1"->"goto [?= (branch)]";
    "r32 = $r1"->"$r27 := @caughtexception";
    "goto [?= (branch)]"->"if z1 != 0 goto z2 = 0";
    "$r27 := @caughtexception"->"r33 = $r27";
    "r33 = $r27"->"z1 = 1";
    "z1 = 1"->"if z1 != 0 goto z2 = 0";
    "if z1 != 0 goto z2 = 0"->"$r19 = new java.lang.Exception";
    "if z1 != 0 goto z2 = 0"->"z2 = 0";
    "$r19 = new java.lang.Exception"->"specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, NaN load factor\")";
    "specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"Hashtable, NaN load factor\")"->"throw $r19";
    "z2 = 0"->"$r2 = new java.util.HashMap";
    "z2 = 0"->"$r26 := @caughtexception";
    "$r2 = new java.util.HashMap"->"specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(100, -3.0F)";
    "$r2 = new java.util.HashMap"->"$r26 := @caughtexception";
    "specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(100, -3.0F)"->"r34 = $r2";
    "specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(100, -3.0F)"->"$r26 := @caughtexception";
    "r34 = $r2"->"goto [?= (branch)]";
    "r34 = $r2"->"$r26 := @caughtexception";
    "goto [?= (branch)]"->"if z2 != 0 goto z3 = 0";
    "$r26 := @caughtexception"->"r35 = $r26";
    "r35 = $r26"->"z2 = 1";
    "z2 = 1"->"if z2 != 0 goto z3 = 0";
    "if z2 != 0 goto z3 = 0"->"$r18 = new java.lang.Exception";
    "if z2 != 0 goto z3 = 0"->"z3 = 0";
    "$r18 = new java.lang.Exception"->"specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, negative load factor\")";
    "specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, negative load factor\")"->"throw $r18";
    "z3 = 0"->"$r3 = new java.util.HashMap";
    "z3 = 0"->"$r25 := @caughtexception";
    "$r3 = new java.util.HashMap"->"specialinvoke $r3.<java.util.HashMap: void <init>(int,float)>(100, #NaNF)";
    "$r3 = new java.util.HashMap"->"$r25 := @caughtexception";
    "specialinvoke $r3.<java.util.HashMap: void <init>(int,float)>(100, #NaNF)"->"r36 = $r3";
    "specialinvoke $r3.<java.util.HashMap: void <init>(int,float)>(100, #NaNF)"->"$r25 := @caughtexception";
    "r36 = $r3"->"goto [?= (branch)]";
    "r36 = $r3"->"$r25 := @caughtexception";
    "goto [?= (branch)]"->"if z3 != 0 goto z4 = 0";
    "$r25 := @caughtexception"->"r37 = $r25";
    "r37 = $r25"->"z3 = 1";
    "z3 = 1"->"if z3 != 0 goto z4 = 0";
    "if z3 != 0 goto z4 = 0"->"$r17 = new java.lang.Exception";
    "if z3 != 0 goto z4 = 0"->"z4 = 0";
    "$r17 = new java.lang.Exception"->"specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, NaN load factor\")";
    "specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>(\"HashMap, NaN load factor\")"->"throw $r17";
    "z4 = 0"->"$r4 = new java.util.HashSet";
    "z4 = 0"->"$r24 := @caughtexception";
    "$r4 = new java.util.HashSet"->"specialinvoke $r4.<java.util.HashSet: void <init>(int,float)>(100, -3.0F)";
    "$r4 = new java.util.HashSet"->"$r24 := @caughtexception";
    "specialinvoke $r4.<java.util.HashSet: void <init>(int,float)>(100, -3.0F)"->"r38 = $r4";
    "specialinvoke $r4.<java.util.HashSet: void <init>(int,float)>(100, -3.0F)"->"$r24 := @caughtexception";
    "r38 = $r4"->"goto [?= (branch)]";
    "r38 = $r4"->"$r24 := @caughtexception";
    "goto [?= (branch)]"->"if z4 != 0 goto z5 = 0";
    "$r24 := @caughtexception"->"r39 = $r24";
    "r39 = $r24"->"z4 = 1";
    "z4 = 1"->"if z4 != 0 goto z5 = 0";
    "if z4 != 0 goto z5 = 0"->"$r16 = new java.lang.Exception";
    "if z4 != 0 goto z5 = 0"->"z5 = 0";
    "$r16 = new java.lang.Exception"->"specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, negative load factor\")";
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, negative load factor\")"->"throw $r16";
    "z5 = 0"->"$r5 = new java.util.HashSet";
    "z5 = 0"->"$r23 := @caughtexception";
    "$r5 = new java.util.HashSet"->"specialinvoke $r5.<java.util.HashSet: void <init>(int,float)>(100, #NaNF)";
    "$r5 = new java.util.HashSet"->"$r23 := @caughtexception";
    "specialinvoke $r5.<java.util.HashSet: void <init>(int,float)>(100, #NaNF)"->"r40 = $r5";
    "specialinvoke $r5.<java.util.HashSet: void <init>(int,float)>(100, #NaNF)"->"$r23 := @caughtexception";
    "r40 = $r5"->"goto [?= (branch)]";
    "r40 = $r5"->"$r23 := @caughtexception";
    "goto [?= (branch)]"->"if z5 != 0 goto z6 = 0";
    "$r23 := @caughtexception"->"r41 = $r23";
    "r41 = $r23"->"z5 = 1";
    "z5 = 1"->"if z5 != 0 goto z6 = 0";
    "if z5 != 0 goto z6 = 0"->"$r15 = new java.lang.Exception";
    "if z5 != 0 goto z6 = 0"->"z6 = 0";
    "$r15 = new java.lang.Exception"->"specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, NaN load factor\")";
    "specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>(\"HashSet, NaN load factor\")"->"throw $r15";
    "z6 = 0"->"$r6 = new java.util.WeakHashMap";
    "z6 = 0"->"$r22 := @caughtexception";
    "$r6 = new java.util.WeakHashMap"->"specialinvoke $r6.<java.util.WeakHashMap: void <init>(int,float)>(100, -3.0F)";
    "$r6 = new java.util.WeakHashMap"->"$r22 := @caughtexception";
    "specialinvoke $r6.<java.util.WeakHashMap: void <init>(int,float)>(100, -3.0F)"->"r42 = $r6";
    "specialinvoke $r6.<java.util.WeakHashMap: void <init>(int,float)>(100, -3.0F)"->"$r22 := @caughtexception";
    "r42 = $r6"->"goto [?= (branch)]";
    "r42 = $r6"->"$r22 := @caughtexception";
    "goto [?= (branch)]"->"if z6 != 0 goto z7 = 0";
    "$r22 := @caughtexception"->"r43 = $r22";
    "r43 = $r22"->"z6 = 1";
    "z6 = 1"->"if z6 != 0 goto z7 = 0";
    "if z6 != 0 goto z7 = 0"->"$r14 = new java.lang.Exception";
    "if z6 != 0 goto z7 = 0"->"z7 = 0";
    "$r14 = new java.lang.Exception"->"specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, negative load factor\")";
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, negative load factor\")"->"throw $r14";
    "z7 = 0"->"$r7 = new java.util.WeakHashMap";
    "z7 = 0"->"$r21 := @caughtexception";
    "$r7 = new java.util.WeakHashMap"->"specialinvoke $r7.<java.util.WeakHashMap: void <init>(int,float)>(100, #NaNF)";
    "$r7 = new java.util.WeakHashMap"->"$r21 := @caughtexception";
    "specialinvoke $r7.<java.util.WeakHashMap: void <init>(int,float)>(100, #NaNF)"->"r44 = $r7";
    "specialinvoke $r7.<java.util.WeakHashMap: void <init>(int,float)>(100, #NaNF)"->"$r21 := @caughtexception";
    "r44 = $r7"->"goto [?= (branch)]";
    "r44 = $r7"->"$r21 := @caughtexception";
    "goto [?= (branch)]"->"if z7 != 0 goto $r8 = new java.util.Hashtable";
    "$r21 := @caughtexception"->"r45 = $r21";
    "r45 = $r21"->"z7 = 1";
    "z7 = 1"->"if z7 != 0 goto $r8 = new java.util.Hashtable";
    "if z7 != 0 goto $r8 = new java.util.Hashtable"->"$r13 = new java.lang.Exception";
    "if z7 != 0 goto $r8 = new java.util.Hashtable"->"$r8 = new java.util.Hashtable";
    "$r13 = new java.lang.Exception"->"specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, NaN load factor\")";
    "specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>(\"WeakHashMap, NaN load factor\")"->"throw $r13";
    "$r8 = new java.util.Hashtable"->"specialinvoke $r8.<java.util.Hashtable: void <init>(int,float)>(100, 0.69F)";
    "specialinvoke $r8.<java.util.Hashtable: void <init>(int,float)>(100, 0.69F)"->"r46 = $r8";
    "r46 = $r8"->"$r9 = new java.util.HashMap";
    "$r9 = new java.util.HashMap"->"specialinvoke $r9.<java.util.HashMap: void <init>(int,float)>(100, 0.69F)";
    "specialinvoke $r9.<java.util.HashMap: void <init>(int,float)>(100, 0.69F)"->"r47 = $r9";
    "r47 = $r9"->"$r10 = new java.util.HashSet";
    "$r10 = new java.util.HashSet"->"specialinvoke $r10.<java.util.HashSet: void <init>(int,float)>(100, 0.69F)";
    "specialinvoke $r10.<java.util.HashSet: void <init>(int,float)>(100, 0.69F)"->"r11 = $r10";
    "r11 = $r10"->"$r12 = new java.util.WeakHashMap";
    "$r12 = new java.util.WeakHashMap"->"specialinvoke $r12.<java.util.WeakHashMap: void <init>(int,float)>(100, 0.69F)";
    "specialinvoke $r12.<java.util.WeakHashMap: void <init>(int,float)>(100, 0.69F)"->"r48 = $r12";
    "r48 = $r12"->"return";
}
