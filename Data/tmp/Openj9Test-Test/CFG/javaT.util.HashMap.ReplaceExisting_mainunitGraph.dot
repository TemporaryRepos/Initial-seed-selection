digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>"
    "if i1 > $i0 goto return"
    "r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>()"
    "staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1)"
    "i1 = i1 + 1"
    "goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>]"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>";
    "$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>"->"if i1 > $i0 goto return";
    "if i1 > $i0 goto return"->"r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>()";
    "if i1 > $i0 goto return"->"return";
    "r0 = staticinvoke <javaT.util.HashMap.ReplaceExisting: java.util.HashMap prepHashMap()>()"->"staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1)";
    "staticinvoke <javaT.util.HashMap.ReplaceExisting: void testItr(java.util.HashMap,int)>(r0, i1)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>]";
    "goto [?= $i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>]"->"$i0 = <javaT.util.HashMap.ReplaceExisting: int ENTRIES>";
}
