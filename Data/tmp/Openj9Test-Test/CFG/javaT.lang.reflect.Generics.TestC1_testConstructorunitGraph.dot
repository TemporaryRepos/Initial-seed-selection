digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")"
    "r1 = newarray (java.lang.Class)[1]"
    "r1[0] = class \"Ljava/lang/Object;\""
    "$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)"
    "r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r5 = r4[0]"
    "$i3 = lengthof r4"
    "if $i3 == 1 goto r5 = r4[0]"
    "$r23 = new java.lang.AssertionError"
    "specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have one generic parameter type\")"
    "throw $r23"
    "r5 = r4[0]"
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"
    "$z8 = r5 instanceof java.lang.reflect.TypeVariable"
    "if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"
    "$r22 = new java.lang.AssertionError"
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C1(T) is a type variable\")"
    "throw $r22"
    "r6 = (java.lang.reflect.TypeVariable) r5"
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r16 = new java.lang.AssertionError"
    "$r17 = new java.lang.StringBuilder"
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C is T, not \")"
    "$r19 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)"
    "throw $r16"
    "r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i2 = lengthof r7"
    "if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r14 = new java.lang.AssertionError"
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"
    "throw $r14"
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r12 = r7[0]"
    "if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r13 = new java.lang.AssertionError"
    "specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")"
    "throw $r13"
    "r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i1 = lengthof r8"
    "if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r11 = new java.lang.AssertionError"
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no generic exception types\")"
    "throw $r11"
    "r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z6 != 0 goto return"
    "$i0 = lengthof r9"
    "if $i0 == 0 goto return"
    "$r10 = new java.lang.AssertionError"
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no type parameters\")"
    "throw $r10"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing constructors\")"->"r1 = newarray (java.lang.Class)[1]";
    "r1 = newarray (java.lang.Class)[1]"->"r1[0] = class \"Ljava/lang/Object;\"";
    "r1[0] = class \"Ljava/lang/Object;\""->"$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r2 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)";
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1)"->"r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z0 != 0 goto r5 = r4[0]";
    "if $z0 != 0 goto r5 = r4[0]"->"$i3 = lengthof r4";
    "if $z0 != 0 goto r5 = r4[0]"->"r5 = r4[0]";
    "$i3 = lengthof r4"->"if $i3 == 1 goto r5 = r4[0]";
    "if $i3 == 1 goto r5 = r4[0]"->"$r23 = new java.lang.AssertionError";
    "if $i3 == 1 goto r5 = r4[0]"->"r5 = r4[0]";
    "$r23 = new java.lang.AssertionError"->"specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have one generic parameter type\")";
    "specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have one generic parameter type\")"->"throw $r23";
    "r5 = r4[0]"->"$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5";
    "if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"->"$z8 = r5 instanceof java.lang.reflect.TypeVariable";
    "if $z1 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"->"r6 = (java.lang.reflect.TypeVariable) r5";
    "$z8 = r5 instanceof java.lang.reflect.TypeVariable"->"if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5";
    "if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"->"$r22 = new java.lang.AssertionError";
    "if $z8 != 0 goto r6 = (java.lang.reflect.TypeVariable) r5"->"r6 = (java.lang.reflect.TypeVariable) r5";
    "$r22 = new java.lang.AssertionError"->"specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C1(T) is a type variable\")";
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of C1(T) is a type variable\")"->"throw $r22";
    "r6 = (java.lang.reflect.TypeVariable) r5"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z2 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r15 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r16 = new java.lang.AssertionError";
    "if $z7 != 0 goto r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r16 = new java.lang.AssertionError"->"$r17 = new java.lang.StringBuilder";
    "$r17 = new java.lang.StringBuilder"->"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C is T, not \")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of C is T, not \")"->"$r19 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r19 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)";
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)";
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21)"->"throw $r16";
    "r7 = interfaceinvoke r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i2 = lengthof r7";
    "if $z3 != 0 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i2 = lengthof r7"->"if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r14 = new java.lang.AssertionError";
    "if $i2 == 1 goto $z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r14 = new java.lang.AssertionError"->"specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T should have one bound\")"->"throw $r14";
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r12 = r7[0]";
    "if $z4 != 0 goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r12 = r7[0]"->"if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r13 = new java.lang.AssertionError";
    "if $r12 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r13 = new java.lang.AssertionError"->"specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")";
    "specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T should be Object\")"->"throw $r13";
    "r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i1 = lengthof r8";
    "if $z5 != 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i1 = lengthof r8"->"if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r11 = new java.lang.AssertionError";
    "if $i1 == 0 goto r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r11 = new java.lang.AssertionError"->"specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no generic exception types\")";
    "specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no generic exception types\")"->"throw $r11";
    "r9 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z6 != 0 goto return";
    "if $z6 != 0 goto return"->"$i0 = lengthof r9";
    "if $z6 != 0 goto return"->"return";
    "$i0 = lengthof r9"->"if $i0 == 0 goto return";
    "if $i0 == 0 goto return"->"$r10 = new java.lang.AssertionError";
    "if $i0 == 0 goto return"->"return";
    "$r10 = new java.lang.AssertionError"->"specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no type parameters\")";
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Constructor C1(T) should have no type parameters\")"->"throw $r10";
}
