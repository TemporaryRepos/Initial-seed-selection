digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
b3 = 0;
r0 = class \"LjavaT/lang/reflect/TypeVariable/TestAnnotatedElement;\";
$r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i0 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r1);
i4 = b3 + $i0;
$r2 = newarray (java.lang.Class)[0];
$r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r2);
$r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i1 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r4);
i5 = i4 + $i1;
$r5 = newarray (java.lang.Class)[1];
$r5[0] = class \"Ljava/lang/Object;\";
$r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"m\", $r5);
$r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i2 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r7);
i6 = i5 + $i2;
if i6 <= 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r8;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
b3 = 0;
r0 = class \"LjavaT/lang/reflect/TypeVariable/TestAnnotatedElement;\";
$r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i0 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r1);
i4 = b3 + $i0;
$r2 = newarray (java.lang.Class)[0];
$r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r2);
$r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i1 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r4);
i5 = i4 + $i1;
$r5 = newarray (java.lang.Class)[1];
$r5[0] = class \"Ljava/lang/Object;\";
$r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"m\", $r5);
$r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i2 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r7);
i6 = i5 + $i2;
if i6 <= 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r8;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
b3 = 0;
r0 = class \"LjavaT/lang/reflect/TypeVariable/TestAnnotatedElement;\";
$r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i0 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r1);
i4 = b3 + $i0;
$r2 = newarray (java.lang.Class)[0];
$r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r2);
$r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i1 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r4);
i5 = i4 + $i1;
$r5 = newarray (java.lang.Class)[1];
$r5[0] = class \"Ljava/lang/Object;\";
$r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"m\", $r5);
$r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();
$i2 = staticinvoke <javaT.lang.reflect.TypeVariable.TestAnnotatedElement: int testTypeVariable(java.lang.reflect.TypeVariable[])>($r7);
i6 = i5 + $i2;
if i6 <= 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
