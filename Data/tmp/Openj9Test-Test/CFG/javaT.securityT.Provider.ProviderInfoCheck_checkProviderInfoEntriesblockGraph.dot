digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.security.Provider;
$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\");
r17 = (java.lang.String) $r1;
$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>;
$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z0 == 0 goto $r3 = new java.lang.Exception;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
"
    "Block 2:
[preds: 0 1 ] [succs: ]
$r3 = new java.lang.Exception;
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\");
throw $r3;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
r18 = (java.lang.String) $r5;
$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>;
$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z2 == 0 goto $r7 = new java.lang.Exception;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>();
$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
"
    "Block 5:
[preds: 3 4 ] [succs: ]
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\");
throw $r7;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
r19 = (java.lang.String) $r9;
$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19);
if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
"
    "Block 7:
[preds: 6 ] [succs: ]
$r16 = new java.lang.Exception;
specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect className!\");
throw $r16;
"
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
$r13 = (java.lang.String) $r12;
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);
$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>;
$b0 = $d1 cmpl d0;
if $b0 != 0 goto $r14 = new java.lang.Exception;
"
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>();
$b1 = $d2 cmpl d0;
if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 10:
[preds: 8 9 ] [succs: ]
$r14 = new java.lang.Exception;
specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\");
throw $r14;
"
    "Block 11:
[preds: 9 ] [succs: ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test Passed\");
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.security.Provider;
$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\");
r17 = (java.lang.String) $r1;
$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>;
$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z0 == 0 goto $r3 = new java.lang.Exception;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.security.Provider;
$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\");
r17 = (java.lang.String) $r1;
$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>;
$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z0 == 0 goto $r3 = new java.lang.Exception;
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r3 = new java.lang.Exception;
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\");
throw $r3;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r3 = new java.lang.Exception;
specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\");
throw $r3;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);
if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
r18 = (java.lang.String) $r5;
$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>;
$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z2 == 0 goto $r7 = new java.lang.Exception;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
r18 = (java.lang.String) $r5;
$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>;
$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z2 == 0 goto $r7 = new java.lang.Exception;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>();
$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\");
r18 = (java.lang.String) $r5;
$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>;
$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z2 == 0 goto $r7 = new java.lang.Exception;
"->"Block 5:
[preds: 3 4 ] [succs: ]
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\");
throw $r7;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>();
$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
"->"Block 5:
[preds: 3 4 ] [succs: ]
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\");
throw $r7;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>();
$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);
if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
r19 = (java.lang.String) $r9;
$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19);
if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
r19 = (java.lang.String) $r9;
$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19);
if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
"->"Block 7:
[preds: 6 ] [succs: ]
$r16 = new java.lang.Exception;
specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect className!\");
throw $r16;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\");
r19 = (java.lang.String) $r9;
$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();
$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19);
if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
"->"Block 8:
[preds: 6 ] [succs: 9 10 ]
$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
$r13 = (java.lang.String) $r12;
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);
$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>;
$b0 = $d1 cmpl d0;
if $b0 != 0 goto $r14 = new java.lang.Exception;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
$r13 = (java.lang.String) $r12;
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);
$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>;
$b0 = $d1 cmpl d0;
if $b0 != 0 goto $r14 = new java.lang.Exception;
"->"Block 9:
[preds: 8 ] [succs: 10 11 ]
$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>();
$b1 = $d2 cmpl d0;
if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\");
$r13 = (java.lang.String) $r12;
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);
$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>;
$b0 = $d1 cmpl d0;
if $b0 != 0 goto $r14 = new java.lang.Exception;
"->"Block 10:
[preds: 8 9 ] [succs: ]
$r14 = new java.lang.Exception;
specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\");
throw $r14;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>();
$b1 = $d2 cmpl d0;
if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"->"Block 10:
[preds: 8 9 ] [succs: ]
$r14 = new java.lang.Exception;
specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\");
throw $r14;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>();
$b1 = $d2 cmpl d0;
if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>;
"->"Block 11:
[preds: 9 ] [succs: ]
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test Passed\");
return;
";
}
