digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\");
$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\");
goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\");
"
    "Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 4:
[preds: 3 ] [succs: 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\");
"
    "Block 5:
[preds: 3 4 ] [succs: 6 16 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 6:
[preds: 5 ] [succs: 7 16 ]
$r2 = newarray (java.lang.Object)[0];
"
    "Block 7:
[preds: 6 ] [succs: 8 16 ]
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2);
"
    "Block 8:
[preds: 7 ] [succs: 9 16 ]
$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
"
    "Block 9:
[preds: 8 ] [succs: 10 16 ]
virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\");
"
    "Block 10:
[preds: 9 ] [succs: 11 16 ]
$r7 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 11:
[preds: 10 ] [succs: 12 16 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\");
"
    "Block 12:
[preds: 11 ] [succs: 13 16 ]
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
"
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
$i1 = $i0 + 1;
"
    "Block 14:
[preds: 13 ] [succs: 15 16 ]
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
"
    "Block 15:
[preds: 14 ] [succs: 17 ]
goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>];
"
    "Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
"
    "Block 17:
[preds: 15 16 ] [succs: 18 19 ]
$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>;
if $i2 <= 0 goto return;
"
    "Block 18:
[preds: 17 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$i3 = <javaT.nio.file.PathMatcher.Basic: int failures>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" sub-test(s) failed - see log for details\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r8;
"
    "Block 19:
[preds: 17 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\");
$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
"->"Block 1:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\");
goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\");
$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
"->"Block 2:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\");
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\");
goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")];
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\");
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 4:
[preds: 3 ] [succs: 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\");
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 5:
[preds: 3 4 ] [succs: 6 16 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\");
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\");
$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\");
if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 4:
[preds: 3 ] [succs: 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\");
"->"Block 5:
[preds: 3 4 ] [succs: 6 16 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 4:
[preds: 3 ] [succs: 5 16 ]
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\");
staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\");
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 5:
[preds: 3 4 ] [succs: 6 16 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 6:
[preds: 5 ] [succs: 7 16 ]
$r2 = newarray (java.lang.Object)[0];
";
    "Block 5:
[preds: 3 4 ] [succs: 6 16 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 6:
[preds: 5 ] [succs: 7 16 ]
$r2 = newarray (java.lang.Object)[0];
"->"Block 7:
[preds: 6 ] [succs: 8 16 ]
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2);
";
    "Block 6:
[preds: 5 ] [succs: 7 16 ]
$r2 = newarray (java.lang.Object)[0];
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 7:
[preds: 6 ] [succs: 8 16 ]
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2);
"->"Block 8:
[preds: 7 ] [succs: 9 16 ]
$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
";
    "Block 7:
[preds: 6 ] [succs: 8 16 ]
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2);
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 8:
[preds: 7 ] [succs: 9 16 ]
$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
"->"Block 9:
[preds: 8 ] [succs: 10 16 ]
virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\");
";
    "Block 8:
[preds: 7 ] [succs: 9 16 ]
$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 9:
[preds: 8 ] [succs: 10 16 ]
virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\");
"->"Block 10:
[preds: 9 ] [succs: 11 16 ]
$r7 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 9:
[preds: 8 ] [succs: 10 16 ]
virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\");
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 10:
[preds: 9 ] [succs: 11 16 ]
$r7 = <java.lang.System: java.io.PrintStream out>;
"->"Block 11:
[preds: 10 ] [succs: 12 16 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\");
";
    "Block 10:
[preds: 9 ] [succs: 11 16 ]
$r7 = <java.lang.System: java.io.PrintStream out>;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 11:
[preds: 10 ] [succs: 12 16 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\");
"->"Block 12:
[preds: 11 ] [succs: 13 16 ]
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
";
    "Block 11:
[preds: 10 ] [succs: 12 16 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\");
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 12:
[preds: 11 ] [succs: 13 16 ]
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
"->"Block 13:
[preds: 12 ] [succs: 14 16 ]
$i1 = $i0 + 1;
";
    "Block 12:
[preds: 11 ] [succs: 13 16 ]
$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
$i1 = $i0 + 1;
"->"Block 14:
[preds: 13 ] [succs: 15 16 ]
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
";
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
$i1 = $i0 + 1;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 14:
[preds: 13 ] [succs: 15 16 ]
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
"->"Block 15:
[preds: 14 ] [succs: 17 ]
goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>];
";
    "Block 14:
[preds: 13 ] [succs: 15 16 ]
<javaT.nio.file.PathMatcher.Basic: int failures> = $i1;
"->"Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
";
    "Block 15:
[preds: 14 ] [succs: 17 ]
goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>];
"->"Block 17:
[preds: 15 16 ] [succs: 18 19 ]
$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>;
if $i2 <= 0 goto return;
";
    "Block 16:
[preds: 3 4 5 6 7 8 9 10 11 12 13 14 ] [succs: 17 ]
$r13 := @caughtexception;
r14 = $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\");
"->"Block 17:
[preds: 15 16 ] [succs: 18 19 ]
$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>;
if $i2 <= 0 goto return;
";
    "Block 17:
[preds: 15 16 ] [succs: 18 19 ]
$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>;
if $i2 <= 0 goto return;
"->"Block 18:
[preds: 17 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$i3 = <javaT.nio.file.PathMatcher.Basic: int failures>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" sub-test(s) failed - see log for details\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r8;
";
    "Block 17:
[preds: 15 16 ] [succs: 18 19 ]
$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>;
if $i2 <= 0 goto return;
"->"Block 19:
[preds: 17 ] [succs: ]
return;
";
}
