digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r9 := @parameter0: java.lang.Class;
r0 := @parameter1: java.lang.Enum;
r1 := @parameter2: java.lang.Enum;
r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1);
$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>();
$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();
$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>();
$i3 = $i1 - $i2;
$i4 = $i3 + 1;
if $i0 == $i4 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
$i5 = virtualinvoke r2.<java.util.EnumSet: int size()>();
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$i6 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();
$i7 = virtualinvoke r0.<java.lang.Enum: int ordinal()>();
$i8 = $i6 - $i7;
$i9 = $i8 + 1;
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);
throw $r3;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r9 := @parameter0: java.lang.Class;
r0 := @parameter1: java.lang.Enum;
r1 := @parameter2: java.lang.Enum;
r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1);
$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>();
$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();
$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>();
$i3 = $i1 - $i2;
$i4 = $i3 + 1;
if $i0 == $i4 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
$i5 = virtualinvoke r2.<java.util.EnumSet: int size()>();
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$i6 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();
$i7 = virtualinvoke r0.<java.lang.Enum: int ordinal()>();
$i8 = $i6 - $i7;
$i9 = $i8 + 1;
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);
throw $r3;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r9 := @parameter0: java.lang.Class;
r0 := @parameter1: java.lang.Enum;
r1 := @parameter2: java.lang.Enum;
r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1);
$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>();
$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();
$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>();
$i3 = $i1 - $i2;
$i4 = $i3 + 1;
if $i0 == $i4 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
