digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10)"
    "r1 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: void close()>()"
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r0)"
    "$r3 = new java.lang.Exception"
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Receive on closed DC did not throw\")"
    "throw $r3"
    "$r4 := @caughtexception"
    "r5 = $r4"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10)";
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10)"->"r1 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()";
    "r1 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"->"virtualinvoke r1.<java.nio.channels.DatagramChannel: void close()>()";
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: void close()>()"->"virtualinvoke r1.<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r0)";
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: void close()>()"->"$r4 := @caughtexception";
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r0)"->"$r3 = new java.lang.Exception";
    "virtualinvoke r1.<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r0)"->"$r4 := @caughtexception";
    "$r3 = new java.lang.Exception"->"specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Receive on closed DC did not throw\")";
    "$r3 = new java.lang.Exception"->"$r4 := @caughtexception";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Receive on closed DC did not throw\")"->"throw $r3";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Receive on closed DC did not throw\")"->"$r4 := @caughtexception";
    "throw $r3"->"$r4 := @caughtexception";
    "$r4 := @caughtexception"->"r5 = $r4";
    "r5 = $r4"->"return";
}
