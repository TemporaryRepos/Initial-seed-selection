digraph "unitGraph" {
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(1049600)"
    "r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()"
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"
    "$i0 = virtualinvoke r1.<java.nio.FloatBuffer: int capacity()>()"
    "r2 = newarray (float)[$i0]"
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(float[])>(r2)"
    "virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>(r2)"
    "i6 = 0"
    "$i1 = lengthof r2"
    "if i6 >= $i1 goto staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"
    "$f4 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i6)"
    "$i4 = i6 + 1"
    "$l5 = staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: long ic(int)>($i4)"
    "$f5 = (float) $l5"
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void ck(java.nio.Buffer,float,float)>(r1, $f4, $f5)"
    "i6 = i6 + 1"
    "goto [?= $i1 = lengthof r2]"
    "virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>(r2)"
    "i7 = 0"
    "$i2 = lengthof r2"
    "if i7 >= $i2 goto return"
    "$f0 = r2[i7]"
    "$f1 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)"
    "$b3 = $f0 cmpl $f1"
    "if $b3 == 0 goto i7 = i7 + 1"
    "$r5 = new java.lang.StringBuilder"
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Copy failed at \")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \'\")"
    "$f2 = r2[i7]"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' != \'\")"
    "$f3 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void fail(java.lang.String)>($r13)"
    "i7 = i7 + 1"
    "goto [?= $i2 = lengthof r2]"
    "return"
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(1049600)"->"r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()";
    "r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>()"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"->"$i0 = virtualinvoke r1.<java.nio.FloatBuffer: int capacity()>()";
    "$i0 = virtualinvoke r1.<java.nio.FloatBuffer: int capacity()>()"->"r2 = newarray (float)[$i0]";
    "r2 = newarray (float)[$i0]"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(float[])>(r2)";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(float[])>(r2)"->"virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>(r2)";
    "virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>(r2)"->"i6 = 0";
    "i6 = 0"->"$i1 = lengthof r2";
    "$i1 = lengthof r2"->"if i6 >= $i1 goto staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)";
    "if i6 >= $i1 goto staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"->"$f4 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i6)";
    "if i6 >= $i1 goto staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)";
    "$f4 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i6)"->"$i4 = i6 + 1";
    "$i4 = i6 + 1"->"$l5 = staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: long ic(int)>($i4)";
    "$l5 = staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: long ic(int)>($i4)"->"$f5 = (float) $l5";
    "$f5 = (float) $l5"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void ck(java.nio.Buffer,float,float)>(r1, $f4, $f5)";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void ck(java.nio.Buffer,float,float)>(r1, $f4, $f5)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= $i1 = lengthof r2]";
    "goto [?= $i1 = lengthof r2]"->"$i1 = lengthof r2";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(java.nio.FloatBuffer)>(r1)"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(float[])>(r2)";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void init(float[])>(r2)"->"virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>(r2)";
    "virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>(r2)"->"i7 = 0";
    "i7 = 0"->"$i2 = lengthof r2";
    "$i2 = lengthof r2"->"if i7 >= $i2 goto return";
    "if i7 >= $i2 goto return"->"$f0 = r2[i7]";
    "if i7 >= $i2 goto return"->"return";
    "$f0 = r2[i7]"->"$f1 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)";
    "$f1 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)"->"$b3 = $f0 cmpl $f1";
    "$b3 = $f0 cmpl $f1"->"if $b3 == 0 goto i7 = i7 + 1";
    "if $b3 == 0 goto i7 = i7 + 1"->"$r5 = new java.lang.StringBuilder";
    "if $b3 == 0 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "$r5 = new java.lang.StringBuilder"->"specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Copy failed at \")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Copy failed at \")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \'\")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \'\")"->"$f2 = r2[i7]";
    "$f2 = r2[i7]"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' != \'\")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' != \'\")"->"$f3 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)";
    "$f3 = virtualinvoke r1.<java.nio.FloatBuffer: float get(int)>(i7)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void fail(java.lang.String)>($r13)";
    "staticinvoke <javaT.nio.Buffer.CopyDirectFloatMemory: void fail(java.lang.String)>($r13)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $i2 = lengthof r2]";
    "goto [?= $i2 = lengthof r2]"->"$i2 = lengthof r2";
}
