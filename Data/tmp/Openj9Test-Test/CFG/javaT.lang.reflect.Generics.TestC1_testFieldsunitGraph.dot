digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\")"
    "$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\")"
    "$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\")"
    "$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\")"
    "r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"
    "$z17 = r7 instanceof java.lang.reflect.TypeVariable"
    "if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"
    "$r43 = new java.lang.AssertionError"
    "specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.ft is a type variable\")"
    "throw $r43"
    "r44 = (java.lang.reflect.TypeVariable) r7"
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r37 = new java.lang.AssertionError"
    "$r38 = new java.lang.StringBuilder"
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type of ft is T, not \")"
    "$r40 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)"
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)"
    "throw $r37"
    "r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i2 = lengthof r45"
    "if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r35 = new java.lang.AssertionError"
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of ft should have one bound\")"
    "throw $r35"
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$r33 = r45[0]"
    "if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$r34 = new java.lang.AssertionError"
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type of ft should be Object\")"
    "throw $r34"
    "r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"
    "$z15 = r8 instanceof java.lang.reflect.ParameterizedType"
    "if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"
    "$r32 = new java.lang.AssertionError"
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.fc1t is a parameterized type\")"
    "throw $r32"
    "r9 = (java.lang.reflect.ParameterizedType) r8"
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"
    "$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r31 = new java.lang.AssertionError"
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is instantiation of C1\")"
    "throw $r31"
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"
    "if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r28 = new java.lang.AssertionError"
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is has null owner\")"
    "throw $r28"
    "r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z7 != 0 goto r11 = r10[0]"
    "$i1 = lengthof r10"
    "if $i1 == 1 goto r11 = r10[0]"
    "$r26 = new java.lang.AssertionError"
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of fc1t has one type argument\")"
    "throw $r26"
    "r11 = r10[0]"
    "$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"
    "$z14 = r11 instanceof java.lang.reflect.TypeVariable"
    "if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"
    "$r25 = new java.lang.AssertionError"
    "specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable\")"
    "throw $r25"
    "r46 = (java.lang.reflect.TypeVariable) r11"
    "$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r19 = new java.lang.AssertionError"
    "$r20 = new java.lang.StringBuilder"
    "specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type arg of C1<T> is T, not \")"
    "$r22 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24)"
    "throw $r19"
    "r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$i0 = lengthof r47"
    "if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "$r17 = new java.lang.AssertionError"
    "specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type argument of C1<T>  should have one bound\")"
    "throw $r17"
    "$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$r15 = r47[0]"
    "if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$r16 = new java.lang.AssertionError"
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type arg of C1<T> should be Object\")"
    "throw $r16"
    "r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"
    "$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"
    "if $z12 != 0 goto return"
    "$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"
    "if r12 == $r13 goto return"
    "$r14 = new java.lang.AssertionError"
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\" Type of C1.fc1 should be C1\")"
    "throw $r14"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\")"->"$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\")";
    "r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\")"->"$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\")";
    "r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\")"->"$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\")";
    "r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\")"->"r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7";
    "if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"->"$z17 = r7 instanceof java.lang.reflect.TypeVariable";
    "if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"->"r44 = (java.lang.reflect.TypeVariable) r7";
    "$z17 = r7 instanceof java.lang.reflect.TypeVariable"->"if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7";
    "if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"->"$r43 = new java.lang.AssertionError";
    "if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7"->"r44 = (java.lang.reflect.TypeVariable) r7";
    "$r43 = new java.lang.AssertionError"->"specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.ft is a type variable\")";
    "specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.ft is a type variable\")"->"throw $r43";
    "r44 = (java.lang.reflect.TypeVariable) r7"->"$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r37 = new java.lang.AssertionError";
    "if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r37 = new java.lang.AssertionError"->"$r38 = new java.lang.StringBuilder";
    "$r38 = new java.lang.StringBuilder"->"specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type of ft is T, not \")";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type of ft is T, not \")"->"$r40 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r40 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)";
    "$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)"->"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)";
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)"->"throw $r37";
    "r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i2 = lengthof r45";
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i2 = lengthof r45"->"if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r35 = new java.lang.AssertionError";
    "if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r35 = new java.lang.AssertionError"->"specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of ft should have one bound\")";
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of ft should have one bound\")"->"throw $r35";
    "$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$r33 = r45[0]";
    "if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "$r33 = r45[0]"->"if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$r34 = new java.lang.AssertionError";
    "if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "$r34 = new java.lang.AssertionError"->"specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type of ft should be Object\")";
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type of ft should be Object\")"->"throw $r34";
    "r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8";
    "if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"->"$z15 = r8 instanceof java.lang.reflect.ParameterizedType";
    "if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"->"r9 = (java.lang.reflect.ParameterizedType) r8";
    "$z15 = r8 instanceof java.lang.reflect.ParameterizedType"->"if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8";
    "if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"->"$r32 = new java.lang.AssertionError";
    "if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8"->"r9 = (java.lang.reflect.ParameterizedType) r8";
    "$r32 = new java.lang.AssertionError"->"specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.fc1t is a parameterized type\")";
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.fc1t is a parameterized type\")"->"throw $r32";
    "r9 = (java.lang.reflect.ParameterizedType) r8"->"$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()";
    "if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"->"$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r31 = new java.lang.AssertionError";
    "if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r31 = new java.lang.AssertionError"->"specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is instantiation of C1\")";
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is instantiation of C1\")"->"throw $r31";
    "$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()";
    "if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"->"if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r28 = new java.lang.AssertionError";
    "if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r28 = new java.lang.AssertionError"->"specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is has null owner\")";
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is has null owner\")"->"throw $r28";
    "r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z7 != 0 goto r11 = r10[0]";
    "if $z7 != 0 goto r11 = r10[0]"->"$i1 = lengthof r10";
    "if $z7 != 0 goto r11 = r10[0]"->"r11 = r10[0]";
    "$i1 = lengthof r10"->"if $i1 == 1 goto r11 = r10[0]";
    "if $i1 == 1 goto r11 = r10[0]"->"$r26 = new java.lang.AssertionError";
    "if $i1 == 1 goto r11 = r10[0]"->"r11 = r10[0]";
    "$r26 = new java.lang.AssertionError"->"specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of fc1t has one type argument\")";
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of fc1t has one type argument\")"->"throw $r26";
    "r11 = r10[0]"->"$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11";
    "if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"->"$z14 = r11 instanceof java.lang.reflect.TypeVariable";
    "if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"->"r46 = (java.lang.reflect.TypeVariable) r11";
    "$z14 = r11 instanceof java.lang.reflect.TypeVariable"->"if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11";
    "if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"->"$r25 = new java.lang.AssertionError";
    "if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11"->"r46 = (java.lang.reflect.TypeVariable) r11";
    "$r25 = new java.lang.AssertionError"->"specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable\")";
    "specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable\")"->"throw $r25";
    "r46 = (java.lang.reflect.TypeVariable) r11"->"$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r19 = new java.lang.AssertionError";
    "if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r19 = new java.lang.AssertionError"->"$r20 = new java.lang.StringBuilder";
    "$r20 = new java.lang.StringBuilder"->"specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type arg of C1<T> is T, not \")";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type arg of C1<T> is T, not \")"->"$r22 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r22 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)";
    "$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24)";
    "specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24)"->"throw $r19";
    "r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$i0 = lengthof r47";
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$i0 = lengthof r47"->"if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$r17 = new java.lang.AssertionError";
    "if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$r17 = new java.lang.AssertionError"->"specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type argument of C1<T>  should have one bound\")";
    "specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type argument of C1<T>  should have one bound\")"->"throw $r17";
    "$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$r15 = r47[0]";
    "if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "$r15 = r47[0]"->"if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$r16 = new java.lang.AssertionError";
    "if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()";
    "$r16 = new java.lang.AssertionError"->"specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type arg of C1<T> should be Object\")";
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type arg of C1<T> should be Object\")"->"throw $r16";
    "r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>()"->"$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>";
    "$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>"->"if $z12 != 0 goto return";
    "if $z12 != 0 goto return"->"$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>";
    "if $z12 != 0 goto return"->"return";
    "$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>"->"if r12 == $r13 goto return";
    "if r12 == $r13 goto return"->"$r14 = new java.lang.AssertionError";
    "if r12 == $r13 goto return"->"return";
    "$r14 = new java.lang.AssertionError"->"specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\" Type of C1.fc1 should be C1\")";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\" Type of C1.fc1 should be C1\")"->"throw $r14";
}
