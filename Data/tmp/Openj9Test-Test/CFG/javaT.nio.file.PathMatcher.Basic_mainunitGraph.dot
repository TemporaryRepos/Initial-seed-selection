digraph "unitGraph" {
    "r16 := @parameter0: java.lang.String[]"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\")"
    "$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"
    "$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")"
    "if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\")"
    "goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")]"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")"
    "$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"
    "$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")"
    "if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\")"
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\")"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "$r2 = newarray (java.lang.Object)[0]"
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2)"
    "$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>()"
    "virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\")"
    "$r7 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\")"
    "$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>"
    "$i1 = $i0 + 1"
    "<javaT.nio.file.PathMatcher.Basic: int failures> = $i1"
    "goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>]"
    "$r13 := @caughtexception"
    "r14 = $r13"
    "$r15 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\")"
    "$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>"
    "if $i2 <= 0 goto return"
    "$r8 = new java.lang.RuntimeException"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$i3 = <javaT.nio.file.PathMatcher.Basic: int failures>"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" sub-test(s) failed - see log for details\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)"
    "throw $r8"
    "return"
    "r16 := @parameter0: java.lang.String[]"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.htm\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"bar.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.html*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*foo.html*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"*.htm\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"f.*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"?oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"??o.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"???.htm?\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.???\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.html,.class}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{class,html}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertNotMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo{.htm,.class}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[e-g]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcde-g]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[abcdefx-z]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[!a-e]oo.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo-bar\", \"foo[-a-z]bar\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo[!-]html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"[f]oo.{[h]tml,class}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[a-z]tml,class}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"foo.html\", \"foo.{[!a-e]tml,.class}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"\\{foo*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"{foo}.html\", \"*\\}.html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"\\[foo*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"[foo].html\", \"*\\].html\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--z]\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a--]\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*[a-z\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*{class,java\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.{class,{.java}}\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertBadPattern(java.lang.String,java.lang.String)>(\"foo.html\", \"*.html\\\\")"->"$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")";
    "$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"->"$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")";
    "$z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")"->"if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")";
    "if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\")";
    "if $z0 == 0 goto staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\", \"C:\\\\f*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\FOO\", \"c:\\\\f*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\\\\gus\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"C:\\foo\\bar\\gus\", \"C:\\\\**\")"->"goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")]";
    "goto [?= staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")]"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo\", \"/tmp/*\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"/tmp/foo/bar\", \"/tmp/**\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"myfile?\", \"myfile\\?\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one\\two\", \"one\\\\two\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertMatch(java.lang.String,java.lang.String)>(\"one*two\", \"one\\*two\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo.html\", \".*\\.html\")"->"$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")";
    "$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"->"$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")";
    "$z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"Windows\")"->"if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>";
    "if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\")";
    "if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "if $z1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>"->"$r13 := @caughtexception";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo012\", \"foo\\d+\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"fo o\", \"fo\\so\")"->"staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\")";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\")"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "staticinvoke <javaT.nio.file.PathMatcher.Basic: void assertRegExMatch(java.lang.String,java.lang.String)>(\"foo\", \"\\w+\")"->"$r13 := @caughtexception";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"$r2 = newarray (java.lang.Object)[0]";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"$r13 := @caughtexception";
    "$r2 = newarray (java.lang.Object)[0]"->"virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2)";
    "$r2 = newarray (java.lang.Object)[0]"->"$r13 := @caughtexception";
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2)"->"$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>()";
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Test unknown syntax\", $r2)"->"$r13 := @caughtexception";
    "$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>()"->"virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\")";
    "$r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>()"->"$r13 := @caughtexception";
    "virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\")"->"$r7 = <java.lang.System: java.io.PrintStream out>";
    "virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(\"grep:foo\")"->"$r13 := @caughtexception";
    "$r7 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\")";
    "$r7 = <java.lang.System: java.io.PrintStream out>"->"$r13 := @caughtexception";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\")"->"$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\" ==> NOT EXPECTED TO COMPILE\")"->"$r13 := @caughtexception";
    "$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>"->"$i1 = $i0 + 1";
    "$i0 = <javaT.nio.file.PathMatcher.Basic: int failures>"->"$r13 := @caughtexception";
    "$i1 = $i0 + 1"->"<javaT.nio.file.PathMatcher.Basic: int failures> = $i1";
    "$i1 = $i0 + 1"->"$r13 := @caughtexception";
    "<javaT.nio.file.PathMatcher.Basic: int failures> = $i1"->"goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>]";
    "<javaT.nio.file.PathMatcher.Basic: int failures> = $i1"->"$r13 := @caughtexception";
    "goto [?= $i2 = <javaT.nio.file.PathMatcher.Basic: int failures>]"->"$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>";
    "$r13 := @caughtexception"->"r14 = $r13";
    "r14 = $r13"->"$r15 = <java.lang.System: java.io.PrintStream out>";
    "$r15 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\")";
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\" OKAY\")"->"$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>";
    "$i2 = <javaT.nio.file.PathMatcher.Basic: int failures>"->"if $i2 <= 0 goto return";
    "if $i2 <= 0 goto return"->"$r8 = new java.lang.RuntimeException";
    "if $i2 <= 0 goto return"->"return";
    "$r8 = new java.lang.RuntimeException"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$i3 = <javaT.nio.file.PathMatcher.Basic: int failures>";
    "$i3 = <javaT.nio.file.PathMatcher.Basic: int failures>"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" sub-test(s) failed - see log for details\")";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" sub-test(s) failed - see log for details\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)";
    "specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)"->"throw $r8";
}
