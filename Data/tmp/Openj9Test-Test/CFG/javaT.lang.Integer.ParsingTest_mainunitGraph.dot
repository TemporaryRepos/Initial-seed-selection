digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+100\", 100)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-100\", -100)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+0\", 0)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-0\", 0)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+00000\", 0)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-00000\", 0)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"0\", 0)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"1\", 1)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"9\", 9)"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"\u0000\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"/\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++100\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--100\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-6\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+6\")"
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"*100\")"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+100\", 100)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+100\", 100)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-100\", -100)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-100\", -100)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+0\", 0)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+0\", 0)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-0\", 0)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-0\", 0)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+00000\", 0)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"+00000\", 0)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-00000\", 0)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"-00000\", 0)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"0\", 0)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"0\", 0)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"1\", 1)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"1\", 1)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"9\", 9)";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void check(java.lang.String,int)>(\"9\", 9)"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"\u0000\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"\u0000\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"/\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"/\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++100\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"++100\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--100\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"--100\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-6\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"+-6\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+6\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"-+6\")"->"staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"*100\")";
    "staticinvoke <javaT.lang.Integer.ParsingTest: void checkFailure(java.lang.String)>(\"*100\")"->"return";
}
