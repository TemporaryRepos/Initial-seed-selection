digraph "unitGraph" {
    "r17 := @parameter0: java.lang.String[]"
    "$r0 = new java.lang.StringBuffer"
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>(\"sample string buffer\")"
    "r1 = $r0"
    "r2 = newarray (char)[30]"
    "z0 = 0"
    "$r3 = newarray (int[])[6]"
    "$r4 = newarray (int)[3]"
    "$r4[0] = 0"
    "$r4[1] = 0"
    "$i0 = lengthof r2"
    "$i1 = $i0 + 1"
    "$r4[2] = $i1"
    "$r3[0] = $r4"
    "$r5 = newarray (int)[3]"
    "$r5[0] = 0"
    "$r5[1] = 0"
    "$i2 = lengthof r2"
    "$i3 = $i2 + 2"
    "$r5[2] = $i3"
    "$r3[1] = $r5"
    "$r6 = newarray (int)[3]"
    "$r6[0] = 0"
    "$r6[1] = 0"
    "$i4 = lengthof r2"
    "$i5 = $i4 + 20"
    "$r6[2] = $i5"
    "$r3[2] = $r6"
    "$r7 = newarray (int)[3]"
    "$r7[0] = 5"
    "$r7[1] = 5"
    "$i6 = lengthof r2"
    "$i7 = $i6 + 1"
    "$r7[2] = $i7"
    "$r3[3] = $r7"
    "$r8 = newarray (int)[3]"
    "$r8[0] = 5"
    "$r8[1] = 5"
    "$i8 = lengthof r2"
    "$i9 = $i8 + 2"
    "$r8[2] = $i9"
    "$r3[4] = $r8"
    "$r9 = newarray (int)[3]"
    "$r9[0] = 5"
    "$r9[1] = 5"
    "$i10 = lengthof r2"
    "$i11 = $i10 + 20"
    "$r9[2] = $i11"
    "$r3[5] = $r9"
    "r10 = $r3"
    "i16 = 0"
    "$i12 = lengthof r10"
    "if i16 >= $i12 goto return"
    "$r11 = r10[i16]"
    "$i15 = $r11[0]"
    "$r12 = r10[i16]"
    "$i14 = $r12[1]"
    "$r13 = r10[i16]"
    "$i13 = $r13[2]"
    "virtualinvoke r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i15, $i14, r2, $i13)"
    "$r14 = new java.lang.RuntimeException"
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bounds test failed\")"
    "throw $r14"
    "$r15 := @caughtexception"
    "r16 = $r15"
    "i16 = i16 + 1"
    "goto [?= $i12 = lengthof r10]"
    "return"
    "r17 := @parameter0: java.lang.String[]"->"$r0 = new java.lang.StringBuffer";
    "$r0 = new java.lang.StringBuffer"->"specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>(\"sample string buffer\")";
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>(\"sample string buffer\")"->"r1 = $r0";
    "r1 = $r0"->"r2 = newarray (char)[30]";
    "r2 = newarray (char)[30]"->"z0 = 0";
    "z0 = 0"->"$r3 = newarray (int[])[6]";
    "$r3 = newarray (int[])[6]"->"$r4 = newarray (int)[3]";
    "$r4 = newarray (int)[3]"->"$r4[0] = 0";
    "$r4[0] = 0"->"$r4[1] = 0";
    "$r4[1] = 0"->"$i0 = lengthof r2";
    "$i0 = lengthof r2"->"$i1 = $i0 + 1";
    "$i1 = $i0 + 1"->"$r4[2] = $i1";
    "$r4[2] = $i1"->"$r3[0] = $r4";
    "$r3[0] = $r4"->"$r5 = newarray (int)[3]";
    "$r5 = newarray (int)[3]"->"$r5[0] = 0";
    "$r5[0] = 0"->"$r5[1] = 0";
    "$r5[1] = 0"->"$i2 = lengthof r2";
    "$i2 = lengthof r2"->"$i3 = $i2 + 2";
    "$i3 = $i2 + 2"->"$r5[2] = $i3";
    "$r5[2] = $i3"->"$r3[1] = $r5";
    "$r3[1] = $r5"->"$r6 = newarray (int)[3]";
    "$r6 = newarray (int)[3]"->"$r6[0] = 0";
    "$r6[0] = 0"->"$r6[1] = 0";
    "$r6[1] = 0"->"$i4 = lengthof r2";
    "$i4 = lengthof r2"->"$i5 = $i4 + 20";
    "$i5 = $i4 + 20"->"$r6[2] = $i5";
    "$r6[2] = $i5"->"$r3[2] = $r6";
    "$r3[2] = $r6"->"$r7 = newarray (int)[3]";
    "$r7 = newarray (int)[3]"->"$r7[0] = 5";
    "$r7[0] = 5"->"$r7[1] = 5";
    "$r7[1] = 5"->"$i6 = lengthof r2";
    "$i6 = lengthof r2"->"$i7 = $i6 + 1";
    "$i7 = $i6 + 1"->"$r7[2] = $i7";
    "$r7[2] = $i7"->"$r3[3] = $r7";
    "$r3[3] = $r7"->"$r8 = newarray (int)[3]";
    "$r8 = newarray (int)[3]"->"$r8[0] = 5";
    "$r8[0] = 5"->"$r8[1] = 5";
    "$r8[1] = 5"->"$i8 = lengthof r2";
    "$i8 = lengthof r2"->"$i9 = $i8 + 2";
    "$i9 = $i8 + 2"->"$r8[2] = $i9";
    "$r8[2] = $i9"->"$r3[4] = $r8";
    "$r3[4] = $r8"->"$r9 = newarray (int)[3]";
    "$r9 = newarray (int)[3]"->"$r9[0] = 5";
    "$r9[0] = 5"->"$r9[1] = 5";
    "$r9[1] = 5"->"$i10 = lengthof r2";
    "$i10 = lengthof r2"->"$i11 = $i10 + 20";
    "$i11 = $i10 + 20"->"$r9[2] = $i11";
    "$r9[2] = $i11"->"$r3[5] = $r9";
    "$r3[5] = $r9"->"r10 = $r3";
    "r10 = $r3"->"i16 = 0";
    "i16 = 0"->"$i12 = lengthof r10";
    "$i12 = lengthof r10"->"if i16 >= $i12 goto return";
    "if i16 >= $i12 goto return"->"$r11 = r10[i16]";
    "if i16 >= $i12 goto return"->"return";
    "if i16 >= $i12 goto return"->"$r15 := @caughtexception";
    "$r11 = r10[i16]"->"$i15 = $r11[0]";
    "$r11 = r10[i16]"->"$r15 := @caughtexception";
    "$i15 = $r11[0]"->"$r12 = r10[i16]";
    "$i15 = $r11[0]"->"$r15 := @caughtexception";
    "$r12 = r10[i16]"->"$i14 = $r12[1]";
    "$r12 = r10[i16]"->"$r15 := @caughtexception";
    "$i14 = $r12[1]"->"$r13 = r10[i16]";
    "$i14 = $r12[1]"->"$r15 := @caughtexception";
    "$r13 = r10[i16]"->"$i13 = $r13[2]";
    "$r13 = r10[i16]"->"$r15 := @caughtexception";
    "$i13 = $r13[2]"->"virtualinvoke r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i15, $i14, r2, $i13)";
    "$i13 = $r13[2]"->"$r15 := @caughtexception";
    "virtualinvoke r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i15, $i14, r2, $i13)"->"$r14 = new java.lang.RuntimeException";
    "virtualinvoke r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i15, $i14, r2, $i13)"->"$r15 := @caughtexception";
    "$r14 = new java.lang.RuntimeException"->"specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bounds test failed\")";
    "$r14 = new java.lang.RuntimeException"->"$r15 := @caughtexception";
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bounds test failed\")"->"throw $r14";
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Bounds test failed\")"->"$r15 := @caughtexception";
    "throw $r14"->"$r15 := @caughtexception";
    "$r15 := @caughtexception"->"r16 = $r15";
    "r16 = $r15"->"i16 = i16 + 1";
    "i16 = i16 + 1"->"goto [?= $i12 = lengthof r10]";
    "goto [?= $i12 = lengthof r10]"->"$i12 = lengthof r10";
}
