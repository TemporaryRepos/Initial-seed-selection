digraph "unitGraph" {
    "i12 = 0"
    "$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>"
    "$i0 = lengthof $r0"
    "if i12 >= $i0 goto return"
    "$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>"
    "r2 = $r1[i12]"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2)"
    "r4 = $r3"
    "i1 = virtualinvoke r2.<java.lang.String: int length()>()"
    "i13 = 0"
    "if i13 > i1 goto i19 = i1"
    "i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1)"
    "i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14)"
    "if i15 == i1 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= $r21 = new java.lang.StringBuilder]"
    "$z2 = 0"
    "$r21 = new java.lang.StringBuilder"
    "specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14)"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1)"
    "$i9 = neg i14"
    "i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9)"
    "i17 = i13"
    "if i13 <= 0 goto (branch)"
    "if i13 >= i1 goto (branch)"
    "$i11 = i13 + 1"
    "i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11)"
    "$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18)"
    "if $z1 == 0 goto (branch)"
    "i17 = i17 + -1"
    "if i16 == i17 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= $r30 = new java.lang.StringBuilder]"
    "$z3 = 0"
    "$r30 = new java.lang.StringBuilder"
    "specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()"
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)"
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$i10 = neg i14"
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10)"
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17)"
    "i13 = i13 + 1"
    "goto [?= (branch)]"
    "i19 = i1"
    "if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"
    "i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19)"
    "i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20)"
    "i22 = i19"
    "if i19 <= 0 goto (branch)"
    "if i19 >= i1 goto (branch)"
    "$i8 = i19 - 1"
    "i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8)"
    "$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23)"
    "if $z0 == 0 goto (branch)"
    "i22 = i22 + 1"
    "if i21 == i22 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= $r5 = new java.lang.StringBuilder]"
    "$z4 = 0"
    "$r5 = new java.lang.StringBuilder"
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22)"
    "$i6 = neg i20"
    "i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6)"
    "if i24 == 0 goto $z5 = 0"
    "$z5 = 1"
    "goto [?= $r12 = new java.lang.StringBuilder]"
    "$z5 = 0"
    "$r12 = new java.lang.StringBuilder"
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\")"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19)"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$i7 = neg i20"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0)"
    "i19 = i19 + -1"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i2 = i1 + 1"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i3 = i1 - 1"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "$i4 = i1 + 1"
    "$i5 = neg $i4"
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\")"
    "i12 = i12 + 1"
    "goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>]"
    "return"
    "i12 = 0"->"$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>";
    "$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>"->"$i0 = lengthof $r0";
    "$i0 = lengthof $r0"->"if i12 >= $i0 goto return";
    "if i12 >= $i0 goto return"->"$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>";
    "if i12 >= $i0 goto return"->"return";
    "$r1 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>"->"r2 = $r1[i12]";
    "r2 = $r1[i12]"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2)";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2)"->"r4 = $r3";
    "r4 = $r3"->"i1 = virtualinvoke r2.<java.lang.String: int length()>()";
    "i1 = virtualinvoke r2.<java.lang.String: int length()>()"->"i13 = 0";
    "i13 = 0"->"if i13 > i1 goto i19 = i1";
    "if i13 > i1 goto i19 = i1"->"i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1)";
    "if i13 > i1 goto i19 = i1"->"i19 = i1";
    "i14 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, i13, i1)"->"i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14)";
    "i15 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i13, i14)"->"if i15 == i1 goto $z2 = 0";
    "if i15 == i1 goto $z2 = 0"->"$z2 = 1";
    "if i15 == i1 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= $r21 = new java.lang.StringBuilder]";
    "goto [?= $r21 = new java.lang.StringBuilder]"->"$r21 = new java.lang.StringBuilder";
    "$z2 = 0"->"$r21 = new java.lang.StringBuilder";
    "$r21 = new java.lang.StringBuilder"->"specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14)";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14)"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1)";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z2, $r29, i15, i1)"->"$i9 = neg i14";
    "$i9 = neg i14"->"i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9)";
    "i16 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i1, $i9)"->"i17 = i13";
    "i17 = i13"->"if i13 <= 0 goto (branch)";
    "if i13 <= 0 goto (branch)"->"if i13 >= i1 goto (branch)";
    "if i13 <= 0 goto (branch)"->"if i16 == i17 goto $z3 = 0";
    "if i13 >= i1 goto (branch)"->"$i11 = i13 + 1";
    "if i13 >= i1 goto (branch)"->"if i16 == i17 goto $z3 = 0";
    "$i11 = i13 + 1"->"i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11)";
    "i18 = virtualinvoke r4.<java.lang.StringBuilder: int codePointBefore(int)>($i11)"->"$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18)";
    "$z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i18)"->"if $z1 == 0 goto (branch)";
    "if $z1 == 0 goto (branch)"->"i17 = i17 + -1";
    "if $z1 == 0 goto (branch)"->"if i16 == i17 goto $z3 = 0";
    "i17 = i17 + -1"->"if i16 == i17 goto $z3 = 0";
    "if i16 == i17 goto $z3 = 0"->"$z3 = 1";
    "if i16 == i17 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= $r30 = new java.lang.StringBuilder]";
    "goto [?= $r30 = new java.lang.StringBuilder]"->"$r30 = new java.lang.StringBuilder";
    "$z3 = 0"->"$r30 = new java.lang.StringBuilder";
    "$r30 = new java.lang.StringBuilder"->"specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()"->"$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)";
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13)"->"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$i10 = neg i14";
    "$i10 = neg i14"->"$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10)";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10)"->"$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17)";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z3, $r38, i16, i17)"->"i13 = i13 + 1";
    "i13 = i13 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i13 > i1 goto i19 = i1";
    "i19 = i1"->"if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19)";
    "if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "i20 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r4, 0, i19)"->"i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20)";
    "i21 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(0, i20)"->"i22 = i19";
    "i22 = i19"->"if i19 <= 0 goto (branch)";
    "if i19 <= 0 goto (branch)"->"if i19 >= i1 goto (branch)";
    "if i19 <= 0 goto (branch)"->"if i21 == i22 goto $z4 = 0";
    "if i19 >= i1 goto (branch)"->"$i8 = i19 - 1";
    "if i19 >= i1 goto (branch)"->"if i21 == i22 goto $z4 = 0";
    "$i8 = i19 - 1"->"i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8)";
    "i23 = virtualinvoke r4.<java.lang.StringBuilder: int codePointAt(int)>($i8)"->"$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23)";
    "$z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i23)"->"if $z0 == 0 goto (branch)";
    "if $z0 == 0 goto (branch)"->"i22 = i22 + 1";
    "if $z0 == 0 goto (branch)"->"if i21 == i22 goto $z4 = 0";
    "i22 = i22 + 1"->"if i21 == i22 goto $z4 = 0";
    "if i21 == i22 goto $z4 = 0"->"$z4 = 1";
    "if i21 == i22 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= $r5 = new java.lang.StringBuilder]";
    "goto [?= $r5 = new java.lang.StringBuilder]"->"$r5 = new java.lang.StringBuilder";
    "$z4 = 0"->"$r5 = new java.lang.StringBuilder";
    "$r5 = new java.lang.StringBuilder"->"specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetByCodePoints(input[\")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], 0, \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22)";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z4, $r11, i21, i22)"->"$i6 = neg i20";
    "$i6 = neg i20"->"i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6)";
    "i24 = virtualinvoke r4.<java.lang.StringBuilder: int offsetByCodePoints(int,int)>(i19, $i6)"->"if i24 == 0 goto $z5 = 0";
    "if i24 == 0 goto $z5 = 0"->"$z5 = 1";
    "if i24 == 0 goto $z5 = 0"->"$z5 = 0";
    "$z5 = 1"->"goto [?= $r12 = new java.lang.StringBuilder]";
    "goto [?= $r12 = new java.lang.StringBuilder]"->"$r12 = new java.lang.StringBuilder";
    "$z5 = 0"->"$r12 = new java.lang.StringBuilder";
    "$r12 = new java.lang.StringBuilder"->"specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\")";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"offsetBycodePoints(input[\")"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"], \")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19)";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19)"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$i7 = neg i20";
    "$i7 = neg i20"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0)";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void check(boolean,java.lang.String,int,int)>($z5, $r20, i24, 0)"->"i19 = i19 + -1";
    "i19 = i19 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i19 < 0 goto staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(null, 0, 0, class \"Ljava/lang/NullPointerException;\")"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, -1, i1, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i2 = i1 + 1";
    "$i2 = i1 + 1"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 0, $i2, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, 1, -2, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i3 = i1 - 1";
    "$i3 = i1 - 1"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i3, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"$i4 = i1 + 1";
    "$i4 = i1 + 1"->"$i5 = neg $i4";
    "$i5 = neg $i4"->"staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\")";
    "staticinvoke <javaT.lang.StringBuilder.Supplementary: void testOffsetByCodePoints(java.lang.StringBuilder,int,int,java.lang.Class)>(r4, i1, $i5, class \"Ljava/lang/IndexOutOfBoundsException;\")"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>]";
    "goto [?= $r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>]"->"$r0 = <javaT.lang.StringBuilder.Supplementary: java.lang.String[] input>";
}
