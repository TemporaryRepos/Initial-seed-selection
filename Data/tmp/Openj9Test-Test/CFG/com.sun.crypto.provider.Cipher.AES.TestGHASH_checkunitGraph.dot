digraph "unitGraph" {
    "r0 := @this: com.sun.crypto.provider.Cipher.AES.TestGHASH"
    "i10 := @parameter0: int"
    "r1 := @parameter1: java.lang.String"
    "r20 := @parameter2: java.lang.String"
    "r21 := @parameter3: java.lang.String"
    "r9 := @parameter4: java.lang.String"
    "$i0 = virtualinvoke r20.<java.lang.String: int length()>()"
    "i1 = $i0 * 4"
    "$i2 = virtualinvoke r20.<java.lang.String: int length()>()"
    "$i3 = $i2 % 32"
    "if $i3 == 0 goto $i4 = virtualinvoke r21.<java.lang.String: int length()>()"
    "$r17 = new java.lang.StringBuilder"
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)"
    "r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()"
    "goto [?= $i2 = virtualinvoke r20.<java.lang.String: int length()>()]"
    "$i4 = virtualinvoke r21.<java.lang.String: int length()>()"
    "i5 = $i4 * 4"
    "$i6 = virtualinvoke r21.<java.lang.String: int length()>()"
    "$i7 = $i6 % 32"
    "if $i7 == 0 goto $r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)"
    "$r14 = new java.lang.StringBuilder"
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21)"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)"
    "r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()"
    "goto [?= $i6 = virtualinvoke r21.<java.lang.String: int length()>()]"
    "$r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)"
    "r3 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.Object newGHASH(byte[])>($r2)"
    "$r4 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r20)"
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r4)"
    "$r5 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r21)"
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r5)"
    "$l9 = (long) i1"
    "$l8 = (long) i5"
    "$r6 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(long,long)>($l9, $l8)"
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r6)"
    "r7 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] digestGHASH(java.lang.Object)>(r3)"
    "r8 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.String hex(byte[])>(r7)"
    "$z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)"
    "if $z0 != 0 goto return"
    "$r10 = new java.lang.AssertionError"
    "$r11 = newarray (java.lang.Object)[3]"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"
    "$r11[0] = $r12"
    "$r11[1] = r9"
    "$r11[2] = r8"
    "$r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%d: expected %s, got %s\", $r11)"
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13)"
    "throw $r10"
    "return"
    "r0 := @this: com.sun.crypto.provider.Cipher.AES.TestGHASH"->"i10 := @parameter0: int";
    "i10 := @parameter0: int"->"r1 := @parameter1: java.lang.String";
    "r1 := @parameter1: java.lang.String"->"r20 := @parameter2: java.lang.String";
    "r20 := @parameter2: java.lang.String"->"r21 := @parameter3: java.lang.String";
    "r21 := @parameter3: java.lang.String"->"r9 := @parameter4: java.lang.String";
    "r9 := @parameter4: java.lang.String"->"$i0 = virtualinvoke r20.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke r20.<java.lang.String: int length()>()"->"i1 = $i0 * 4";
    "i1 = $i0 * 4"->"$i2 = virtualinvoke r20.<java.lang.String: int length()>()";
    "$i2 = virtualinvoke r20.<java.lang.String: int length()>()"->"$i3 = $i2 % 32";
    "$i3 = $i2 % 32"->"if $i3 == 0 goto $i4 = virtualinvoke r21.<java.lang.String: int length()>()";
    "if $i3 == 0 goto $i4 = virtualinvoke r21.<java.lang.String: int length()>()"->"$r17 = new java.lang.StringBuilder";
    "if $i3 == 0 goto $i4 = virtualinvoke r21.<java.lang.String: int length()>()"->"$i4 = virtualinvoke r21.<java.lang.String: int length()>()";
    "$r17 = new java.lang.StringBuilder"->"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)"->"r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()"->"goto [?= $i2 = virtualinvoke r20.<java.lang.String: int length()>()]";
    "goto [?= $i2 = virtualinvoke r20.<java.lang.String: int length()>()]"->"$i2 = virtualinvoke r20.<java.lang.String: int length()>()";
    "$i4 = virtualinvoke r21.<java.lang.String: int length()>()"->"i5 = $i4 * 4";
    "i5 = $i4 * 4"->"$i6 = virtualinvoke r21.<java.lang.String: int length()>()";
    "$i6 = virtualinvoke r21.<java.lang.String: int length()>()"->"$i7 = $i6 % 32";
    "$i7 = $i6 % 32"->"if $i7 == 0 goto $r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)";
    "if $i7 == 0 goto $r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)"->"$r14 = new java.lang.StringBuilder";
    "if $i7 == 0 goto $r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)"->"$r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)";
    "$r14 = new java.lang.StringBuilder"->"specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21)";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21)"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)"->"r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()"->"goto [?= $i6 = virtualinvoke r21.<java.lang.String: int length()>()]";
    "goto [?= $i6 = virtualinvoke r21.<java.lang.String: int length()>()]"->"$i6 = virtualinvoke r21.<java.lang.String: int length()>()";
    "$r2 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r1)"->"r3 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.Object newGHASH(byte[])>($r2)";
    "r3 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.Object newGHASH(byte[])>($r2)"->"$r4 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r20)";
    "$r4 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r20)"->"specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r4)";
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r4)"->"$r5 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r21)";
    "$r5 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(java.lang.String)>(r21)"->"specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r5)";
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r5)"->"$l9 = (long) i1";
    "$l9 = (long) i1"->"$l8 = (long) i5";
    "$l8 = (long) i5"->"$r6 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(long,long)>($l9, $l8)";
    "$r6 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] bytes(long,long)>($l9, $l8)"->"specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r6)";
    "specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: void updateGHASH(java.lang.Object,byte[])>(r3, $r6)"->"r7 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] digestGHASH(java.lang.Object)>(r3)";
    "r7 = specialinvoke r0.<com.sun.crypto.provider.Cipher.AES.TestGHASH: byte[] digestGHASH(java.lang.Object)>(r3)"->"r8 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.String hex(byte[])>(r7)";
    "r8 = staticinvoke <com.sun.crypto.provider.Cipher.AES.TestGHASH: java.lang.String hex(byte[])>(r7)"->"$z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)";
    "$z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)"->"if $z0 != 0 goto return";
    "if $z0 != 0 goto return"->"$r10 = new java.lang.AssertionError";
    "if $z0 != 0 goto return"->"return";
    "$r10 = new java.lang.AssertionError"->"$r11 = newarray (java.lang.Object)[3]";
    "$r11 = newarray (java.lang.Object)[3]"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r11[0] = $r12";
    "$r11[0] = $r12"->"$r11[1] = r9";
    "$r11[1] = r9"->"$r11[2] = r8";
    "$r11[2] = r8"->"$r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%d: expected %s, got %s\", $r11)";
    "$r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%d: expected %s, got %s\", $r11)"->"specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13)";
    "specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13)"->"throw $r10";
}
