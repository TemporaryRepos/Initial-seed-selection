digraph "unitGraph" {
    "r0 := @parameter0: java.security.Provider"
    "$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\")"
    "r17 = (java.lang.String) $r1"
    "$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>"
    "$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)"
    "if $z0 == 0 goto $r3 = new java.lang.Exception"
    "$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>()"
    "$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)"
    "if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")"
    "$r3 = new java.lang.Exception"
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\")"
    "throw $r3"
    "$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")"
    "r18 = (java.lang.String) $r5"
    "$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>"
    "$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)"
    "if $z2 == 0 goto $r7 = new java.lang.Exception"
    "$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>()"
    "$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)"
    "if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")"
    "$r7 = new java.lang.Exception"
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\")"
    "throw $r7"
    "$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")"
    "r19 = (java.lang.String) $r9"
    "$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"
    "$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()"
    "$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19)"
    "if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")"
    "$r16 = new java.lang.Exception"
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect className!\")"
    "throw $r16"
    "$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")"
    "$r13 = (java.lang.String) $r12"
    "d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13)"
    "$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>"
    "$b0 = $d1 cmpl d0"
    "if $b0 != 0 goto $r14 = new java.lang.Exception"
    "$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>()"
    "$b1 = $d2 cmpl d0"
    "if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"
    "$r14 = new java.lang.Exception"
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\")"
    "throw $r14"
    "$r15 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test Passed\")"
    "return"
    "r0 := @parameter0: java.security.Provider"->"$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\")";
    "$r1 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id name\")"->"r17 = (java.lang.String) $r1";
    "r17 = (java.lang.String) $r1"->"$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>";
    "$r2 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String NAME>"->"$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)";
    "$z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)"->"if $z0 == 0 goto $r3 = new java.lang.Exception";
    "if $z0 == 0 goto $r3 = new java.lang.Exception"->"$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>()";
    "if $z0 == 0 goto $r3 = new java.lang.Exception"->"$r3 = new java.lang.Exception";
    "$r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>()"->"$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)";
    "$z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17)"->"if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")";
    "if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")"->"$r3 = new java.lang.Exception";
    "if $z1 != 0 goto $r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")"->"$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")";
    "$r3 = new java.lang.Exception"->"specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\")";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect name!\")"->"throw $r3";
    "$r5 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id info\")"->"r18 = (java.lang.String) $r5";
    "r18 = (java.lang.String) $r5"->"$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>";
    "$r6 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: java.lang.String INFO>"->"$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)";
    "$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)"->"if $z2 == 0 goto $r7 = new java.lang.Exception";
    "if $z2 == 0 goto $r7 = new java.lang.Exception"->"$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>()";
    "if $z2 == 0 goto $r7 = new java.lang.Exception"->"$r7 = new java.lang.Exception";
    "$r8 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>()"->"$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)";
    "$z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18)"->"if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")";
    "if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")"->"$r7 = new java.lang.Exception";
    "if $z3 != 0 goto $r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")"->"$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")";
    "$r7 = new java.lang.Exception"->"specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\")";
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect info!\")"->"throw $r7";
    "$r9 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id className\")"->"r19 = (java.lang.String) $r9";
    "r19 = (java.lang.String) $r9"->"$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()";
    "$r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"->"$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()";
    "$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>()"->"$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19)";
    "$z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r19)"->"if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")";
    "if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")"->"$r16 = new java.lang.Exception";
    "if $z4 != 0 goto $r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")"->"$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")";
    "$r16 = new java.lang.Exception"->"specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect className!\")";
    "specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect className!\")"->"throw $r16";
    "$r12 = virtualinvoke r0.<java.security.Provider: java.lang.Object get(java.lang.Object)>(\"Provider.id version\")"->"$r13 = (java.lang.String) $r12";
    "$r13 = (java.lang.String) $r12"->"d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13)";
    "d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13)"->"$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>";
    "$d1 = <javaT.securityT.Provider.ProviderInfoCheck$SampleProvider: double VERSION>"->"$b0 = $d1 cmpl d0";
    "$b0 = $d1 cmpl d0"->"if $b0 != 0 goto $r14 = new java.lang.Exception";
    "if $b0 != 0 goto $r14 = new java.lang.Exception"->"$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>()";
    "if $b0 != 0 goto $r14 = new java.lang.Exception"->"$r14 = new java.lang.Exception";
    "$d2 = virtualinvoke r0.<java.security.Provider: double getVersion()>()"->"$b1 = $d2 cmpl d0";
    "$b1 = $d2 cmpl d0"->"if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>";
    "if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"->"$r14 = new java.lang.Exception";
    "if $b1 == 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"->"$r15 = <java.lang.System: java.io.PrintStream out>";
    "$r14 = new java.lang.Exception"->"specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\")";
    "specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>(\"Test Failed: incorrect version!\")"->"throw $r14";
    "$r15 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test Passed\")";
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test Passed\")"->"return";
}
