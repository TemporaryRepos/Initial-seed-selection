digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsNull()>()"
    "staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsEmptyAT()>()"
    "$i0 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int failed>"
    "if $i0 == 0 goto $i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>"
    "$r1 = new java.lang.RuntimeException"
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed, check log for details\")"
    "throw $r1"
    "$i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>"
    "if $i1 == 10 goto return"
    "$r0 = new java.lang.RuntimeException"
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Not all cases ran, failing\")"
    "throw $r0"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsNull()>()";
    "staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsNull()>()"->"staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsEmptyAT()>()";
    "staticinvoke <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: void testReturnsEmptyAT()>()"->"$i0 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int failed>";
    "$i0 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int failed>"->"if $i0 == 0 goto $i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>";
    "if $i0 == 0 goto $i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>"->"$r1 = new java.lang.RuntimeException";
    "if $i0 == 0 goto $i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>"->"$i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>";
    "$r1 = new java.lang.RuntimeException"->"specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed, check log for details\")";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed, check log for details\")"->"throw $r1";
    "$i1 = <javaT.lang.'annotation'.typeAnnotations.GetAnnotatedSuperclass: int tests>"->"if $i1 == 10 goto return";
    "if $i1 == 10 goto return"->"$r0 = new java.lang.RuntimeException";
    "if $i1 == 10 goto return"->"return";
    "$r0 = new java.lang.RuntimeException"->"specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Not all cases ran, failing\")";
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Not all cases ran, failing\")"->"throw $r0";
}
