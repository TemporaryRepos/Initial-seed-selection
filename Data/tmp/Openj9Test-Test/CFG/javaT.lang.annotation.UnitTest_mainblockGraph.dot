digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1659 := @parameter0: java.lang.String[];
$r1 = class \"LjavaT/lang/annotation/UnitTest;\";
$r0 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesMethod\", $r0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r2);
$r4 = class \"LjavaT/lang/annotation/UnitTest;\";
$r3 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultMethod\", $r3);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r5);
$r7 = class \"LjavaT/lang/annotation/UnitTest;\";
$r6 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultMethod\", $r6);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r8);
$r10 = class \"LjavaT/lang/annotation/UnitTest;\";
$r9 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesMethod\", $r9);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r11);
$r13 = class \"LjavaT/lang/annotation/UnitTest;\";
$r12 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesMethod\", $r12);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r14);
$r16 = class \"LjavaT/lang/annotation/UnitTest;\";
$r15 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r17 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesMethod\", $r15);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r17);
$r19 = class \"LjavaT/lang/annotation/UnitTest;\";
$r18 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r20 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultMethod\", $r18);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r20);
$r22 = class \"LjavaT/lang/annotation/UnitTest;\";
$r21 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r23 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultMethod\", $r21);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r23);
$r25 = class \"LjavaT/lang/annotation/UnitTest;\";
$r24 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerMethod\", $r24);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r26);
$r28 = class \"LjavaT/lang/annotation/UnitTest;\";
$r27 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r29 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByte\", $r27);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r29);
$r31 = class \"LjavaT/lang/annotation/UnitTest;\";
$r30 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r32 = virtualinvoke $r31.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShort\", $r30);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r32);
$r34 = class \"LjavaT/lang/annotation/UnitTest;\";
$r33 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberInt\", $r33);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r35);
$r37 = class \"LjavaT/lang/annotation/UnitTest;\";
$r36 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r38 = virtualinvoke $r37.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLong\", $r36);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r38);
$r40 = class \"LjavaT/lang/annotation/UnitTest;\";
$r39 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r41 = virtualinvoke $r40.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberChar\", $r39);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r41);
$r43 = class \"LjavaT/lang/annotation/UnitTest;\";
$r42 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r44 = virtualinvoke $r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloat\", $r42);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r44);
$r46 = class \"LjavaT/lang/annotation/UnitTest;\";
$r45 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r47 = virtualinvoke $r46.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDouble\", $r45);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r47);
$r49 = class \"LjavaT/lang/annotation/UnitTest;\";
$r48 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r50 = virtualinvoke $r49.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBoolean\", $r48);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r50);
$r52 = class \"LjavaT/lang/annotation/UnitTest;\";
$r51 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r53 = virtualinvoke $r52.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberString\", $r51);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r53);
$r55 = class \"LjavaT/lang/annotation/UnitTest;\";
$r54 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r56 = virtualinvoke $r55.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClass\", $r54);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r56);
$r58 = class \"LjavaT/lang/annotation/UnitTest;\";
$r57 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r59 = virtualinvoke $r58.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnum\", $r57);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r59);
$r61 = class \"LjavaT/lang/annotation/UnitTest;\";
$r60 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r62 = virtualinvoke $r61.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDef\", $r60);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r62);
$r64 = class \"LjavaT/lang/annotation/UnitTest;\";
$r63 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r65 = virtualinvoke $r64.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDef\", $r63);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r65);
$r67 = class \"LjavaT/lang/annotation/UnitTest;\";
$r66 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r68 = virtualinvoke $r67.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDef\", $r66);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r68);
$r70 = class \"LjavaT/lang/annotation/UnitTest;\";
$r69 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r71 = virtualinvoke $r70.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDef\", $r69);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r71);
$r73 = class \"LjavaT/lang/annotation/UnitTest;\";
$r72 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r74 = virtualinvoke $r73.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDef\", $r72);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r74);
$r76 = class \"LjavaT/lang/annotation/UnitTest;\";
$r75 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r77 = virtualinvoke $r76.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDef\", $r75);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r77);
$r79 = class \"LjavaT/lang/annotation/UnitTest;\";
$r78 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r80 = virtualinvoke $r79.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDef\", $r78);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r80);
$r82 = class \"LjavaT/lang/annotation/UnitTest;\";
$r81 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r83 = virtualinvoke $r82.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDef\", $r81);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r83);
$r85 = class \"LjavaT/lang/annotation/UnitTest;\";
$r84 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r86 = virtualinvoke $r85.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDef\", $r84);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r86);
$r88 = class \"LjavaT/lang/annotation/UnitTest;\";
$r87 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r89 = virtualinvoke $r88.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDef\", $r87);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r89);
$r91 = class \"LjavaT/lang/annotation/UnitTest;\";
$r90 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r92 = virtualinvoke $r91.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDef\", $r90);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r92);
$r94 = class \"LjavaT/lang/annotation/UnitTest;\";
$r93 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r95 = virtualinvoke $r94.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDef\", $r93);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r95);
$r97 = class \"LjavaT/lang/annotation/UnitTest;\";
$r96 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r98 = virtualinvoke $r97.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDef\", $r96);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r98);
$r100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r99 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r101 = virtualinvoke $r100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDef\", $r99);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r101);
$r103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r104 = virtualinvoke $r103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDef\", $r102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r104);
$r106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r107 = virtualinvoke $r106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDef\", $r105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r107);
$r109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r110 = virtualinvoke $r109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDef\", $r108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r110);
$r112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r113 = virtualinvoke $r112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDef\", $r111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r113);
$r115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r116 = virtualinvoke $r115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDef\", $r114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r116);
$r118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r119 = virtualinvoke $r118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDef\", $r117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r119);
$r121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r122 = virtualinvoke $r121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDef\", $r120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r122);
$r124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r125 = virtualinvoke $r124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDef\", $r123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r125);
$r127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r128 = virtualinvoke $r127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmpty\", $r126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r128);
$r130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r131 = virtualinvoke $r130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmpty\", $r129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r131);
$r133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r134 = virtualinvoke $r133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmpty\", $r132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r134);
$r136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r137 = virtualinvoke $r136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmpty\", $r135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r137);
$r139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r140 = virtualinvoke $r139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmpty\", $r138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r140);
$r142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r143 = virtualinvoke $r142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmpty\", $r141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r143);
$r145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r146 = virtualinvoke $r145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmpty\", $r144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r146);
$r148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r149 = virtualinvoke $r148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmpty\", $r147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r149);
$r151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r152 = virtualinvoke $r151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmpty\", $r150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r152);
$r154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r155 = virtualinvoke $r154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmpty\", $r153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r155);
$r157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r158 = virtualinvoke $r157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmpty\", $r156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r158);
$r160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r161 = virtualinvoke $r160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOne\", $r159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r161);
$r163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r164 = virtualinvoke $r163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOne\", $r162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r164);
$r166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r167 = virtualinvoke $r166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOne\", $r165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r167);
$r169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r170 = virtualinvoke $r169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOne\", $r168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r170);
$r172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r173 = virtualinvoke $r172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOne\", $r171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r173);
$r175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r176 = virtualinvoke $r175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOne\", $r174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r176);
$r178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r179 = virtualinvoke $r178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOne\", $r177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r179);
$r181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r182 = virtualinvoke $r181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOne\", $r180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r182);
$r184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r185 = virtualinvoke $r184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOne\", $r183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r185);
$r187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r188 = virtualinvoke $r187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOne\", $r186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r188);
$r190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r191 = virtualinvoke $r190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOne\", $r189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r191);
$r193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r194 = virtualinvoke $r193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwo\", $r192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r194);
$r196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r197 = virtualinvoke $r196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwo\", $r195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r197);
$r199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r200 = virtualinvoke $r199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwo\", $r198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r200);
$r202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r203 = virtualinvoke $r202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwo\", $r201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r203);
$r205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r206 = virtualinvoke $r205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwo\", $r204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r206);
$r208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r209 = virtualinvoke $r208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwo\", $r207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r209);
$r211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r212 = virtualinvoke $r211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwo\", $r210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r212);
$r214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r215 = virtualinvoke $r214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwo\", $r213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r215);
$r217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r218 = virtualinvoke $r217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwo\", $r216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r218);
$r220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r221 = virtualinvoke $r220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwo\", $r219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r221);
$r223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r224 = virtualinvoke $r223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwo\", $r222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r224);
$r226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r227 = virtualinvoke $r226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDef\", $r225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r227);
$r229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r230 = virtualinvoke $r229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDef\", $r228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r230);
$r232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r233 = virtualinvoke $r232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDef\", $r231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r233);
$r235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r236 = virtualinvoke $r235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDef\", $r234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r236);
$r238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r239 = virtualinvoke $r238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDef\", $r237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r239);
$r241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r242 = virtualinvoke $r241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDef\", $r240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r242);
$r244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r245 = virtualinvoke $r244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDef\", $r243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r245);
$r247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r248 = virtualinvoke $r247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDef\", $r246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r248);
$r250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r251 = virtualinvoke $r250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDef\", $r249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r251);
$r253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r254 = virtualinvoke $r253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDef\", $r252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r254);
$r256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r257 = virtualinvoke $r256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDef\", $r255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r257);
$r259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r260 = virtualinvoke $r259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDef\", $r258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r260);
$r262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r263 = virtualinvoke $r262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDef\", $r261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r263);
$r265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r266 = virtualinvoke $r265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDef\", $r264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r266);
$r268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r269 = virtualinvoke $r268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDef\", $r267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r269);
$r271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r272 = virtualinvoke $r271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDef\", $r270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r272);
$r274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r275 = virtualinvoke $r274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDef\", $r273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r275);
$r277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r278 = virtualinvoke $r277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDef\", $r276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r278);
$r280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r281 = virtualinvoke $r280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDef\", $r279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r281);
$r283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r284 = virtualinvoke $r283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDef\", $r282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r284);
$r286 = class \"LjavaT/lang/annotation/UnitTest;\";
$r285 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r287 = virtualinvoke $r286.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDef\", $r285);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r287);
$r289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r288 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r290 = virtualinvoke $r289.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDef\", $r288);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r290);
$r291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r292 = virtualinvoke $r291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r292);
$r293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r294 = virtualinvoke $r293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r294);
$r295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r296 = virtualinvoke $r295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r296);
$r297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r298 = virtualinvoke $r297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r298);
$r299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r300 = virtualinvoke $r299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r300);
$r301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r302 = virtualinvoke $r301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r302);
$r303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r304 = virtualinvoke $r303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r304);
$r305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r306 = virtualinvoke $r305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r306);
$r307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r308 = virtualinvoke $r307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r308);
$r309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r310 = virtualinvoke $r309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r310);
$r311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r312 = virtualinvoke $r311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r312);
$r313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r314 = virtualinvoke $r313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r314);
$r315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r316 = virtualinvoke $r315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r316);
$r317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r318 = virtualinvoke $r317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r318);
$r319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r320 = virtualinvoke $r319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r320);
$r321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r322 = virtualinvoke $r321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r322);
$r323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r324 = virtualinvoke $r323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r324);
$r325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r326 = virtualinvoke $r325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r326);
$r327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r328 = virtualinvoke $r327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r328);
$r329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r330 = virtualinvoke $r329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r330);
$r331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r332 = virtualinvoke $r331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r332);
$r333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r334 = virtualinvoke $r333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r334);
$r335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r336 = virtualinvoke $r335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r336);
$r337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r338 = virtualinvoke $r337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r338);
$r339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r340 = virtualinvoke $r339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r340);
$r341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r342 = virtualinvoke $r341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r342);
$r343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r344 = virtualinvoke $r343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r344);
$r345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r346 = virtualinvoke $r345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r346);
$r347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r348 = virtualinvoke $r347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r348);
$r349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r350 = virtualinvoke $r349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r350);
$r351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r352 = virtualinvoke $r351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r352);
$r353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r354 = virtualinvoke $r353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r354);
$r355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r356 = virtualinvoke $r355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r356);
$r357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r358 = virtualinvoke $r357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r358);
$r359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r360 = virtualinvoke $r359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r360);
$r361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r362 = virtualinvoke $r361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r362);
$r363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r364 = virtualinvoke $r363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r364);
$r365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r366 = virtualinvoke $r365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r366);
$r367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r368 = virtualinvoke $r367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r368);
$r369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r370 = virtualinvoke $r369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r370);
$r371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r372 = virtualinvoke $r371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r372);
$r373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r374 = virtualinvoke $r373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r374);
$r375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r376 = virtualinvoke $r375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r376);
$r377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r378 = virtualinvoke $r377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r378);
$r379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r380 = virtualinvoke $r379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r380);
$r381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r382 = virtualinvoke $r381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r382);
$r383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r384 = virtualinvoke $r383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r384);
$r385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r386 = virtualinvoke $r385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r386);
$r387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r388 = virtualinvoke $r387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r388);
$r389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r390 = virtualinvoke $r389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r390);
$r391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r392 = virtualinvoke $r391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r392);
$r393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r394 = virtualinvoke $r393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r394);
$r395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r396 = virtualinvoke $r395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r396);
$r397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r398 = virtualinvoke $r397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r398);
$r399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r400 = virtualinvoke $r399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r400);
$r401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r402 = virtualinvoke $r401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r402);
$r403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r404 = virtualinvoke $r403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r404);
$r405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r406 = virtualinvoke $r405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r406);
$r407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r408 = virtualinvoke $r407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r408);
$r409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r410 = virtualinvoke $r409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r410);
$r411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r412 = virtualinvoke $r411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r412);
$r413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r414 = virtualinvoke $r413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r414);
$r415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r416 = virtualinvoke $r415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r416);
$r417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r418 = virtualinvoke $r417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r418);
$r419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r420 = virtualinvoke $r419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r420);
$r421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r422 = virtualinvoke $r421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r422);
$r423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r424 = virtualinvoke $r423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r424);
$r425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r426 = virtualinvoke $r425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r426);
$r427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r428 = virtualinvoke $r427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r428);
$r429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r430 = virtualinvoke $r429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r430);
$r431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r432 = virtualinvoke $r431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r432);
$r433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r434 = virtualinvoke $r433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r434);
$r435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r436 = virtualinvoke $r435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r436);
$r437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r438 = virtualinvoke $r437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r438);
$r439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r440 = virtualinvoke $r439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r440);
$r441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r442 = virtualinvoke $r441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r442);
$r443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r444 = virtualinvoke $r443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r444);
$r445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r446 = virtualinvoke $r445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r446);
$r447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r448 = virtualinvoke $r447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r448);
$r449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r450 = virtualinvoke $r449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r450);
$r451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r452 = virtualinvoke $r451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r452);
$r453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r454 = virtualinvoke $r453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r454);
$r455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r456 = virtualinvoke $r455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r456);
$r457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r458 = virtualinvoke $r457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r458);
$r459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r460 = virtualinvoke $r459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r460);
$r461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r462 = virtualinvoke $r461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r462);
$r463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r464 = virtualinvoke $r463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r464);
$r465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r466 = virtualinvoke $r465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r466);
$r467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r468 = virtualinvoke $r467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r468);
$r469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r470 = virtualinvoke $r469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r470);
$r471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r472 = virtualinvoke $r471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r472);
$r473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r474 = virtualinvoke $r473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r474);
$r475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r476 = virtualinvoke $r475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r476);
$r477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r478 = virtualinvoke $r477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r478);
$r479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r480 = virtualinvoke $r479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r480);
$r481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r482 = virtualinvoke $r481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r482);
$r483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r484 = virtualinvoke $r483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r484);
$r485 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r486 = virtualinvoke $r485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r486);
$r487 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r488 = virtualinvoke $r487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r488);
$r489 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r490 = virtualinvoke $r489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r490);
$r491 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r492 = virtualinvoke $r491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r492);
$r493 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r494 = virtualinvoke $r493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r494);
$r495 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r496 = virtualinvoke $r495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r496);
$r497 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r498 = virtualinvoke $r497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r498);
$r499 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r500 = virtualinvoke $r499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r500);
$r501 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r502 = virtualinvoke $r501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"marker\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r502);
$r503 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r504 = virtualinvoke $r503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByte\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r504);
$r505 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r506 = virtualinvoke $r505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShort\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r506);
$r507 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r508 = virtualinvoke $r507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberInt\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r508);
$r509 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r510 = virtualinvoke $r509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLong\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r510);
$r511 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r512 = virtualinvoke $r511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberChar\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r512);
$r513 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r514 = virtualinvoke $r513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloat\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r514);
$r515 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r516 = virtualinvoke $r515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDouble\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r516);
$r517 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r518 = virtualinvoke $r517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBoolean\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r518);
$r519 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r520 = virtualinvoke $r519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberString\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r520);
$r521 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r522 = virtualinvoke $r521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClass\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r522);
$r523 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r524 = virtualinvoke $r523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnum\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r524);
$r525 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r526 = virtualinvoke $r525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r526);
$r527 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r528 = virtualinvoke $r527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r528);
$r529 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r530 = virtualinvoke $r529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r530);
$r531 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r532 = virtualinvoke $r531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r532);
$r533 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r534 = virtualinvoke $r533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r534);
$r535 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r536 = virtualinvoke $r535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r536);
$r537 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r538 = virtualinvoke $r537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r538);
$r539 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r540 = virtualinvoke $r539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r540);
$r541 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r542 = virtualinvoke $r541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r542);
$r543 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r544 = virtualinvoke $r543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r544);
$r545 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r546 = virtualinvoke $r545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r546);
$r547 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r548 = virtualinvoke $r547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r548);
$r549 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r550 = virtualinvoke $r549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r550);
$r551 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r552 = virtualinvoke $r551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r552);
$r553 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r554 = virtualinvoke $r553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r554);
$r555 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r556 = virtualinvoke $r555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r556);
$r557 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r558 = virtualinvoke $r557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r558);
$r559 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r560 = virtualinvoke $r559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r560);
$r561 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r562 = virtualinvoke $r561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r562);
$r563 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r564 = virtualinvoke $r563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r564);
$r565 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r566 = virtualinvoke $r565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r566);
$r567 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r568 = virtualinvoke $r567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r568);
$r569 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r570 = virtualinvoke $r569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r570);
$r571 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r572 = virtualinvoke $r571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r572);
$r573 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r574 = virtualinvoke $r573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r574);
$r575 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r576 = virtualinvoke $r575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r576);
$r577 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r578 = virtualinvoke $r577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r578);
$r579 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r580 = virtualinvoke $r579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r580);
$r581 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r582 = virtualinvoke $r581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r582);
$r583 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r584 = virtualinvoke $r583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r584);
$r585 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r586 = virtualinvoke $r585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r586);
$r587 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r588 = virtualinvoke $r587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r588);
$r589 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r590 = virtualinvoke $r589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r590);
$r591 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r592 = virtualinvoke $r591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r592);
$r593 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r594 = virtualinvoke $r593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r594);
$r595 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r596 = virtualinvoke $r595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r596);
$r597 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r598 = virtualinvoke $r597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r598);
$r599 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r600 = virtualinvoke $r599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r600);
$r601 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r602 = virtualinvoke $r601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r602);
$r603 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r604 = virtualinvoke $r603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r604);
$r605 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r606 = virtualinvoke $r605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r606);
$r607 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r608 = virtualinvoke $r607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r608);
$r609 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r610 = virtualinvoke $r609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r610);
$r611 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r612 = virtualinvoke $r611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r612);
$r613 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r614 = virtualinvoke $r613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r614);
$r615 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r616 = virtualinvoke $r615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r616);
$r617 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r618 = virtualinvoke $r617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r618);
$r619 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r620 = virtualinvoke $r619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r620);
$r621 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r622 = virtualinvoke $r621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r622);
$r623 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r624 = virtualinvoke $r623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r624);
$r625 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r626 = virtualinvoke $r625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r626);
$r627 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r628 = virtualinvoke $r627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r628);
$r629 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r630 = virtualinvoke $r629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r630);
$r631 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r632 = virtualinvoke $r631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r632);
$r633 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r634 = virtualinvoke $r633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r634);
$r635 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r636 = virtualinvoke $r635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r636);
$r637 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r638 = virtualinvoke $r637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r638);
$r639 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r640 = virtualinvoke $r639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r640);
$r641 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r642 = virtualinvoke $r641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r642);
$r643 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r644 = virtualinvoke $r643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r644);
$r645 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r646 = virtualinvoke $r645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r646);
$r647 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r648 = virtualinvoke $r647.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r648);
$r649 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r650 = virtualinvoke $r649.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r650);
$r651 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r652 = virtualinvoke $r651.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r652);
$r653 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r654 = virtualinvoke $r653.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r654);
$r655 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r656 = virtualinvoke $r655.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r656);
$r657 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r658 = virtualinvoke $r657.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r658);
$r659 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r660 = virtualinvoke $r659.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r660);
$r661 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r662 = virtualinvoke $r661.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r662);
$r663 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r664 = virtualinvoke $r663.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r664);
$r665 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r666 = virtualinvoke $r665.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r666);
$r667 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r668 = virtualinvoke $r667.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r668);
$r669 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r670 = virtualinvoke $r669.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r670);
$r671 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r672 = virtualinvoke $r671.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r672);
$r673 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r674 = virtualinvoke $r673.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r674);
$r675 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r676 = virtualinvoke $r675.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r676);
$r677 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r678 = virtualinvoke $r677.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r678);
$r680 = class \"LjavaT/lang/annotation/UnitTest;\";
$r679 = newarray (java.lang.Class)[1];
$r679[0] = class \"Ljava/util/Iterator;\";
$r681 = virtualinvoke $r680.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r679);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r681);
$r683 = class \"LjavaT/lang/annotation/UnitTest;\";
$r682 = newarray (java.lang.Class)[1];
$r682[0] = class \"Ljava/util/Map;\";
$r684 = virtualinvoke $r683.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r682);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r684);
$r686 = class \"LjavaT/lang/annotation/UnitTest;\";
$r685 = newarray (java.lang.Class)[1];
$r685[0] = class \"Ljava/util/Set;\";
$r687 = virtualinvoke $r686.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r685);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r687);
$r689 = class \"LjavaT/lang/annotation/UnitTest;\";
$r688 = newarray (java.lang.Class)[1];
$r688[0] = class \"Ljava/util/List;\";
$r690 = virtualinvoke $r689.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r688);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r690);
$r692 = class \"LjavaT/lang/annotation/UnitTest;\";
$r691 = newarray (java.lang.Class)[1];
$r691[0] = class \"Ljava/util/Collection;\";
$r693 = virtualinvoke $r692.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r691);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r693);
$r695 = class \"LjavaT/lang/annotation/UnitTest;\";
$r694 = newarray (java.lang.Class)[1];
$r694[0] = class \"Ljava/util/SortedSet;\";
$r696 = virtualinvoke $r695.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r694);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r696);
$r698 = class \"LjavaT/lang/annotation/UnitTest;\";
$r697 = newarray (java.lang.Class)[1];
$r697[0] = class \"Ljava/util/SortedMap;\";
$r699 = virtualinvoke $r698.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r697);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r699);
$r701 = class \"LjavaT/lang/annotation/UnitTest;\";
$r700 = newarray (java.lang.Class)[1];
$r700[0] = class \"Ljava/util/RandomAccess;\";
$r702 = virtualinvoke $r701.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r700);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r702);
$r704 = class \"LjavaT/lang/annotation/UnitTest;\";
$r703 = newarray (java.lang.Class)[0];
$r705 = virtualinvoke $r704.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r703);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r705);
$r708 = class \"LjavaT/lang/annotation/UnitTest;\";
$r706 = newarray (java.lang.Class)[1];
$r707 = <java.lang.Byte: java.lang.Class TYPE>;
$r706[0] = $r707;
$r709 = virtualinvoke $r708.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r706);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r709);
$r712 = class \"LjavaT/lang/annotation/UnitTest;\";
$r710 = newarray (java.lang.Class)[1];
$r711 = <java.lang.Short: java.lang.Class TYPE>;
$r710[0] = $r711;
$r713 = virtualinvoke $r712.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r710);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r713);
$r716 = class \"LjavaT/lang/annotation/UnitTest;\";
$r714 = newarray (java.lang.Class)[1];
$r715 = <java.lang.Integer: java.lang.Class TYPE>;
$r714[0] = $r715;
$r717 = virtualinvoke $r716.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r714);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r717);
$r720 = class \"LjavaT/lang/annotation/UnitTest;\";
$r718 = newarray (java.lang.Class)[1];
$r719 = <java.lang.Long: java.lang.Class TYPE>;
$r718[0] = $r719;
$r721 = virtualinvoke $r720.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r718);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r721);
$r724 = class \"LjavaT/lang/annotation/UnitTest;\";
$r722 = newarray (java.lang.Class)[1];
$r723 = <java.lang.Character: java.lang.Class TYPE>;
$r722[0] = $r723;
$r725 = virtualinvoke $r724.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r722);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r725);
$r728 = class \"LjavaT/lang/annotation/UnitTest;\";
$r726 = newarray (java.lang.Class)[1];
$r727 = <java.lang.Float: java.lang.Class TYPE>;
$r726[0] = $r727;
$r729 = virtualinvoke $r728.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r726);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r729);
$r732 = class \"LjavaT/lang/annotation/UnitTest;\";
$r730 = newarray (java.lang.Class)[1];
$r731 = <java.lang.Double: java.lang.Class TYPE>;
$r730[0] = $r731;
$r733 = virtualinvoke $r732.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r730);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r733);
$r736 = class \"LjavaT/lang/annotation/UnitTest;\";
$r734 = newarray (java.lang.Class)[1];
$r735 = <java.lang.Boolean: java.lang.Class TYPE>;
$r734[0] = $r735;
$r737 = virtualinvoke $r736.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r734);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r737);
$r739 = class \"LjavaT/lang/annotation/UnitTest;\";
$r738 = newarray (java.lang.Class)[1];
$r738[0] = class \"Ljava/lang/String;\";
$r740 = virtualinvoke $r739.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r738);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r740);
$r742 = class \"LjavaT/lang/annotation/UnitTest;\";
$r741 = newarray (java.lang.Class)[1];
$r741[0] = class \"Ljava/lang/Class;\";
$r743 = virtualinvoke $r742.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r741);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r743);
$r745 = class \"LjavaT/lang/annotation/UnitTest;\";
$r744 = newarray (java.lang.Class)[1];
$r744[0] = class \"Ljava/lang/Enum;\";
$r746 = virtualinvoke $r745.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r744);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r746);
$r749 = class \"LjavaT/lang/annotation/UnitTest;\";
$r747 = newarray (java.lang.Class)[2];
$r748 = <java.lang.Byte: java.lang.Class TYPE>;
$r747[0] = $r748;
$r747[1] = class \"Ljava/util/Set;\";
$r750 = virtualinvoke $r749.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r747);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r750);
$r753 = class \"LjavaT/lang/annotation/UnitTest;\";
$r751 = newarray (java.lang.Class)[2];
$r752 = <java.lang.Short: java.lang.Class TYPE>;
$r751[0] = $r752;
$r751[1] = class \"Ljava/util/Set;\";
$r754 = virtualinvoke $r753.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r751);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r754);
$r757 = class \"LjavaT/lang/annotation/UnitTest;\";
$r755 = newarray (java.lang.Class)[2];
$r756 = <java.lang.Integer: java.lang.Class TYPE>;
$r755[0] = $r756;
$r755[1] = class \"Ljava/util/Set;\";
$r758 = virtualinvoke $r757.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r755);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r758);
$r761 = class \"LjavaT/lang/annotation/UnitTest;\";
$r759 = newarray (java.lang.Class)[2];
$r760 = <java.lang.Long: java.lang.Class TYPE>;
$r759[0] = $r760;
$r759[1] = class \"Ljava/util/Set;\";
$r762 = virtualinvoke $r761.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r759);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r762);
$r765 = class \"LjavaT/lang/annotation/UnitTest;\";
$r763 = newarray (java.lang.Class)[2];
$r764 = <java.lang.Character: java.lang.Class TYPE>;
$r763[0] = $r764;
$r763[1] = class \"Ljava/util/Set;\";
$r766 = virtualinvoke $r765.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r763);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r766);
$r769 = class \"LjavaT/lang/annotation/UnitTest;\";
$r767 = newarray (java.lang.Class)[2];
$r768 = <java.lang.Float: java.lang.Class TYPE>;
$r767[0] = $r768;
$r767[1] = class \"Ljava/util/Set;\";
$r770 = virtualinvoke $r769.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r767);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r770);
$r773 = class \"LjavaT/lang/annotation/UnitTest;\";
$r771 = newarray (java.lang.Class)[2];
$r772 = <java.lang.Double: java.lang.Class TYPE>;
$r771[0] = $r772;
$r771[1] = class \"Ljava/util/Set;\";
$r774 = virtualinvoke $r773.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r771);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r774);
$r777 = class \"LjavaT/lang/annotation/UnitTest;\";
$r775 = newarray (java.lang.Class)[2];
$r776 = <java.lang.Boolean: java.lang.Class TYPE>;
$r775[0] = $r776;
$r775[1] = class \"Ljava/util/Set;\";
$r778 = virtualinvoke $r777.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r775);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r778);
$r780 = class \"LjavaT/lang/annotation/UnitTest;\";
$r779 = newarray (java.lang.Class)[2];
$r779[0] = class \"Ljava/lang/String;\";
$r779[1] = class \"Ljava/util/Set;\";
$r781 = virtualinvoke $r780.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r779);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r781);
$r783 = class \"LjavaT/lang/annotation/UnitTest;\";
$r782 = newarray (java.lang.Class)[2];
$r782[0] = class \"Ljava/lang/Class;\";
$r782[1] = class \"Ljava/util/Set;\";
$r784 = virtualinvoke $r783.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r782);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r784);
$r786 = class \"LjavaT/lang/annotation/UnitTest;\";
$r785 = newarray (java.lang.Class)[2];
$r785[0] = class \"Ljava/lang/Enum;\";
$r785[1] = class \"Ljava/util/Set;\";
$r787 = virtualinvoke $r786.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r785);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r787);
$r790 = class \"LjavaT/lang/annotation/UnitTest;\";
$r788 = newarray (java.lang.Class)[2];
$r789 = <java.lang.Byte: java.lang.Class TYPE>;
$r788[0] = $r789;
$r788[1] = class \"Ljava/util/Map;\";
$r791 = virtualinvoke $r790.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r788);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r791);
$r794 = class \"LjavaT/lang/annotation/UnitTest;\";
$r792 = newarray (java.lang.Class)[2];
$r793 = <java.lang.Short: java.lang.Class TYPE>;
$r792[0] = $r793;
$r792[1] = class \"Ljava/util/Map;\";
$r795 = virtualinvoke $r794.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r792);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r795);
$r798 = class \"LjavaT/lang/annotation/UnitTest;\";
$r796 = newarray (java.lang.Class)[2];
$r797 = <java.lang.Integer: java.lang.Class TYPE>;
$r796[0] = $r797;
$r796[1] = class \"Ljava/util/Map;\";
$r799 = virtualinvoke $r798.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r796);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r799);
$r802 = class \"LjavaT/lang/annotation/UnitTest;\";
$r800 = newarray (java.lang.Class)[2];
$r801 = <java.lang.Long: java.lang.Class TYPE>;
$r800[0] = $r801;
$r800[1] = class \"Ljava/util/Map;\";
$r803 = virtualinvoke $r802.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r800);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r803);
$r806 = class \"LjavaT/lang/annotation/UnitTest;\";
$r804 = newarray (java.lang.Class)[2];
$r805 = <java.lang.Character: java.lang.Class TYPE>;
$r804[0] = $r805;
$r804[1] = class \"Ljava/util/Map;\";
$r807 = virtualinvoke $r806.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r804);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r807);
$r810 = class \"LjavaT/lang/annotation/UnitTest;\";
$r808 = newarray (java.lang.Class)[2];
$r809 = <java.lang.Float: java.lang.Class TYPE>;
$r808[0] = $r809;
$r808[1] = class \"Ljava/util/Map;\";
$r811 = virtualinvoke $r810.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r808);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r811);
$r814 = class \"LjavaT/lang/annotation/UnitTest;\";
$r812 = newarray (java.lang.Class)[2];
$r813 = <java.lang.Double: java.lang.Class TYPE>;
$r812[0] = $r813;
$r812[1] = class \"Ljava/util/Map;\";
$r815 = virtualinvoke $r814.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r812);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r815);
$r818 = class \"LjavaT/lang/annotation/UnitTest;\";
$r816 = newarray (java.lang.Class)[2];
$r817 = <java.lang.Boolean: java.lang.Class TYPE>;
$r816[0] = $r817;
$r816[1] = class \"Ljava/util/Map;\";
$r819 = virtualinvoke $r818.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r816);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r819);
$r821 = class \"LjavaT/lang/annotation/UnitTest;\";
$r820 = newarray (java.lang.Class)[2];
$r820[0] = class \"Ljava/lang/String;\";
$r820[1] = class \"Ljava/util/Map;\";
$r822 = virtualinvoke $r821.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r820);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r822);
$r824 = class \"LjavaT/lang/annotation/UnitTest;\";
$r823 = newarray (java.lang.Class)[2];
$r823[0] = class \"Ljava/lang/Class;\";
$r823[1] = class \"Ljava/util/Map;\";
$r825 = virtualinvoke $r824.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r823);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r825);
$r827 = class \"LjavaT/lang/annotation/UnitTest;\";
$r826 = newarray (java.lang.Class)[2];
$r826[0] = class \"Ljava/lang/Enum;\";
$r826[1] = class \"Ljava/util/Map;\";
$r828 = virtualinvoke $r827.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r826);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r828);
$r830 = class \"LjavaT/lang/annotation/UnitTest;\";
$r829 = newarray (java.lang.Class)[1];
$r829[0] = class \"[B\";
$r831 = virtualinvoke $r830.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r829);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r831);
$r833 = class \"LjavaT/lang/annotation/UnitTest;\";
$r832 = newarray (java.lang.Class)[1];
$r832[0] = class \"[S\";
$r834 = virtualinvoke $r833.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r832);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r834);
$r836 = class \"LjavaT/lang/annotation/UnitTest;\";
$r835 = newarray (java.lang.Class)[1];
$r835[0] = class \"[I\";
$r837 = virtualinvoke $r836.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r835);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r837);
$r839 = class \"LjavaT/lang/annotation/UnitTest;\";
$r838 = newarray (java.lang.Class)[1];
$r838[0] = class \"[J\";
$r840 = virtualinvoke $r839.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r838);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r840);
$r842 = class \"LjavaT/lang/annotation/UnitTest;\";
$r841 = newarray (java.lang.Class)[1];
$r841[0] = class \"[C\";
$r843 = virtualinvoke $r842.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r841);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r843);
$r845 = class \"LjavaT/lang/annotation/UnitTest;\";
$r844 = newarray (java.lang.Class)[1];
$r844[0] = class \"[F\";
$r846 = virtualinvoke $r845.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r844);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r846);
$r848 = class \"LjavaT/lang/annotation/UnitTest;\";
$r847 = newarray (java.lang.Class)[1];
$r847[0] = class \"[D\";
$r849 = virtualinvoke $r848.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r847);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r849);
$r851 = class \"LjavaT/lang/annotation/UnitTest;\";
$r850 = newarray (java.lang.Class)[1];
$r850[0] = class \"[Z\";
$r852 = virtualinvoke $r851.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r850);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r852);
$r854 = class \"LjavaT/lang/annotation/UnitTest;\";
$r853 = newarray (java.lang.Class)[1];
$r853[0] = class \"[Ljava/lang/String;\";
$r855 = virtualinvoke $r854.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r853);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r855);
$r857 = class \"LjavaT/lang/annotation/UnitTest;\";
$r856 = newarray (java.lang.Class)[1];
$r856[0] = class \"[Ljava/lang/Class;\";
$r858 = virtualinvoke $r857.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r856);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r858);
$r860 = class \"LjavaT/lang/annotation/UnitTest;\";
$r859 = newarray (java.lang.Class)[1];
$r859[0] = class \"[Ljava/lang/Enum;\";
$r861 = virtualinvoke $r860.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r859);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r861);
$r863 = class \"LjavaT/lang/annotation/UnitTest;\";
$r862 = newarray (java.lang.Class)[2];
$r862[0] = class \"[B\";
$r862[1] = class \"Ljava/util/Set;\";
$r864 = virtualinvoke $r863.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r862);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r864);
$r866 = class \"LjavaT/lang/annotation/UnitTest;\";
$r865 = newarray (java.lang.Class)[2];
$r865[0] = class \"[S\";
$r865[1] = class \"Ljava/util/Set;\";
$r867 = virtualinvoke $r866.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r865);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r867);
$r869 = class \"LjavaT/lang/annotation/UnitTest;\";
$r868 = newarray (java.lang.Class)[2];
$r868[0] = class \"[I\";
$r868[1] = class \"Ljava/util/Set;\";
$r870 = virtualinvoke $r869.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r868);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r870);
$r872 = class \"LjavaT/lang/annotation/UnitTest;\";
$r871 = newarray (java.lang.Class)[2];
$r871[0] = class \"[J\";
$r871[1] = class \"Ljava/util/Set;\";
$r873 = virtualinvoke $r872.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r871);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r873);
$r875 = class \"LjavaT/lang/annotation/UnitTest;\";
$r874 = newarray (java.lang.Class)[2];
$r874[0] = class \"[C\";
$r874[1] = class \"Ljava/util/Set;\";
$r876 = virtualinvoke $r875.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r874);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r876);
$r878 = class \"LjavaT/lang/annotation/UnitTest;\";
$r877 = newarray (java.lang.Class)[2];
$r877[0] = class \"[F\";
$r877[1] = class \"Ljava/util/Set;\";
$r879 = virtualinvoke $r878.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r877);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r879);
$r881 = class \"LjavaT/lang/annotation/UnitTest;\";
$r880 = newarray (java.lang.Class)[2];
$r880[0] = class \"[D\";
$r880[1] = class \"Ljava/util/Set;\";
$r882 = virtualinvoke $r881.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r880);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r882);
$r884 = class \"LjavaT/lang/annotation/UnitTest;\";
$r883 = newarray (java.lang.Class)[2];
$r883[0] = class \"[Z\";
$r883[1] = class \"Ljava/util/Set;\";
$r885 = virtualinvoke $r884.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r883);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r885);
$r887 = class \"LjavaT/lang/annotation/UnitTest;\";
$r886 = newarray (java.lang.Class)[2];
$r886[0] = class \"[Ljava/lang/String;\";
$r886[1] = class \"Ljava/util/Set;\";
$r888 = virtualinvoke $r887.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r886);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r888);
$r890 = class \"LjavaT/lang/annotation/UnitTest;\";
$r889 = newarray (java.lang.Class)[2];
$r889[0] = class \"[Ljava/lang/Class;\";
$r889[1] = class \"Ljava/util/Set;\";
$r891 = virtualinvoke $r890.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r889);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r891);
$r893 = class \"LjavaT/lang/annotation/UnitTest;\";
$r892 = newarray (java.lang.Class)[2];
$r892[0] = class \"[Ljava/lang/Enum;\";
$r892[1] = class \"Ljava/util/Set;\";
$r894 = virtualinvoke $r893.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r892);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r894);
$r896 = class \"LjavaT/lang/annotation/UnitTest;\";
$r895 = newarray (java.lang.Class)[2];
$r895[0] = class \"[B\";
$r895[1] = class \"Ljava/util/Map;\";
$r897 = virtualinvoke $r896.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r895);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r897);
$r899 = class \"LjavaT/lang/annotation/UnitTest;\";
$r898 = newarray (java.lang.Class)[2];
$r898[0] = class \"[S\";
$r898[1] = class \"Ljava/util/Map;\";
$r900 = virtualinvoke $r899.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r898);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r900);
$r902 = class \"LjavaT/lang/annotation/UnitTest;\";
$r901 = newarray (java.lang.Class)[2];
$r901[0] = class \"[I\";
$r901[1] = class \"Ljava/util/Map;\";
$r903 = virtualinvoke $r902.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r901);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r903);
$r905 = class \"LjavaT/lang/annotation/UnitTest;\";
$r904 = newarray (java.lang.Class)[2];
$r904[0] = class \"[J\";
$r904[1] = class \"Ljava/util/Map;\";
$r906 = virtualinvoke $r905.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r904);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r906);
$r908 = class \"LjavaT/lang/annotation/UnitTest;\";
$r907 = newarray (java.lang.Class)[2];
$r907[0] = class \"[C\";
$r907[1] = class \"Ljava/util/Map;\";
$r909 = virtualinvoke $r908.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r907);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r909);
$r911 = class \"LjavaT/lang/annotation/UnitTest;\";
$r910 = newarray (java.lang.Class)[2];
$r910[0] = class \"[F\";
$r910[1] = class \"Ljava/util/Map;\";
$r912 = virtualinvoke $r911.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r910);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r912);
$r914 = class \"LjavaT/lang/annotation/UnitTest;\";
$r913 = newarray (java.lang.Class)[2];
$r913[0] = class \"[D\";
$r913[1] = class \"Ljava/util/Map;\";
$r915 = virtualinvoke $r914.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r913);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r915);
$r917 = class \"LjavaT/lang/annotation/UnitTest;\";
$r916 = newarray (java.lang.Class)[2];
$r916[0] = class \"[Z\";
$r916[1] = class \"Ljava/util/Map;\";
$r918 = virtualinvoke $r917.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r916);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r918);
$r920 = class \"LjavaT/lang/annotation/UnitTest;\";
$r919 = newarray (java.lang.Class)[2];
$r919[0] = class \"[Ljava/lang/String;\";
$r919[1] = class \"Ljava/util/Map;\";
$r921 = virtualinvoke $r920.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r919);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r921);
$r923 = class \"LjavaT/lang/annotation/UnitTest;\";
$r922 = newarray (java.lang.Class)[2];
$r922[0] = class \"[Ljava/lang/Class;\";
$r922[1] = class \"Ljava/util/Map;\";
$r924 = virtualinvoke $r923.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r922);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r924);
$r926 = class \"LjavaT/lang/annotation/UnitTest;\";
$r925 = newarray (java.lang.Class)[2];
$r925[0] = class \"[Ljava/lang/Enum;\";
$r925[1] = class \"Ljava/util/Map;\";
$r927 = virtualinvoke $r926.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r925);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r927);
$r929 = class \"LjavaT/lang/annotation/UnitTest;\";
$r928 = newarray (java.lang.Class)[2];
$r928[0] = class \"[B\";
$r928[1] = class \"Ljava/util/List;\";
$r930 = virtualinvoke $r929.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r928);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r930);
$r932 = class \"LjavaT/lang/annotation/UnitTest;\";
$r931 = newarray (java.lang.Class)[2];
$r931[0] = class \"[S\";
$r931[1] = class \"Ljava/util/List;\";
$r933 = virtualinvoke $r932.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r931);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r933);
$r935 = class \"LjavaT/lang/annotation/UnitTest;\";
$r934 = newarray (java.lang.Class)[2];
$r934[0] = class \"[I\";
$r934[1] = class \"Ljava/util/List;\";
$r936 = virtualinvoke $r935.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r934);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r936);
$r938 = class \"LjavaT/lang/annotation/UnitTest;\";
$r937 = newarray (java.lang.Class)[2];
$r937[0] = class \"[J\";
$r937[1] = class \"Ljava/util/List;\";
$r939 = virtualinvoke $r938.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r937);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r939);
$r941 = class \"LjavaT/lang/annotation/UnitTest;\";
$r940 = newarray (java.lang.Class)[2];
$r940[0] = class \"[C\";
$r940[1] = class \"Ljava/util/List;\";
$r942 = virtualinvoke $r941.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r940);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r942);
$r944 = class \"LjavaT/lang/annotation/UnitTest;\";
$r943 = newarray (java.lang.Class)[2];
$r943[0] = class \"[F\";
$r943[1] = class \"Ljava/util/List;\";
$r945 = virtualinvoke $r944.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r943);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r945);
$r947 = class \"LjavaT/lang/annotation/UnitTest;\";
$r946 = newarray (java.lang.Class)[2];
$r946[0] = class \"[D\";
$r946[1] = class \"Ljava/util/List;\";
$r948 = virtualinvoke $r947.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r946);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r948);
$r950 = class \"LjavaT/lang/annotation/UnitTest;\";
$r949 = newarray (java.lang.Class)[2];
$r949[0] = class \"[Z\";
$r949[1] = class \"Ljava/util/List;\";
$r951 = virtualinvoke $r950.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r949);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r951);
$r953 = class \"LjavaT/lang/annotation/UnitTest;\";
$r952 = newarray (java.lang.Class)[2];
$r952[0] = class \"[Ljava/lang/String;\";
$r952[1] = class \"Ljava/util/List;\";
$r954 = virtualinvoke $r953.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r952);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r954);
$r956 = class \"LjavaT/lang/annotation/UnitTest;\";
$r955 = newarray (java.lang.Class)[2];
$r955[0] = class \"[Ljava/lang/Class;\";
$r955[1] = class \"Ljava/util/List;\";
$r957 = virtualinvoke $r956.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r955);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r957);
$r959 = class \"LjavaT/lang/annotation/UnitTest;\";
$r958 = newarray (java.lang.Class)[2];
$r958[0] = class \"[Ljava/lang/Enum;\";
$r958[1] = class \"Ljava/util/List;\";
$r960 = virtualinvoke $r959.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r958);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r960);
$r962 = class \"LjavaT/lang/annotation/UnitTest;\";
$r961 = newarray (java.lang.Class)[2];
$r961[0] = class \"[B\";
$r961[1] = class \"Ljava/util/Collection;\";
$r963 = virtualinvoke $r962.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r961);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r963);
$r965 = class \"LjavaT/lang/annotation/UnitTest;\";
$r964 = newarray (java.lang.Class)[2];
$r964[0] = class \"[S\";
$r964[1] = class \"Ljava/util/Collection;\";
$r966 = virtualinvoke $r965.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r964);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r966);
$r968 = class \"LjavaT/lang/annotation/UnitTest;\";
$r967 = newarray (java.lang.Class)[2];
$r967[0] = class \"[I\";
$r967[1] = class \"Ljava/util/Collection;\";
$r969 = virtualinvoke $r968.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r967);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r969);
$r971 = class \"LjavaT/lang/annotation/UnitTest;\";
$r970 = newarray (java.lang.Class)[2];
$r970[0] = class \"[J\";
$r970[1] = class \"Ljava/util/Collection;\";
$r972 = virtualinvoke $r971.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r970);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r972);
$r974 = class \"LjavaT/lang/annotation/UnitTest;\";
$r973 = newarray (java.lang.Class)[2];
$r973[0] = class \"[C\";
$r973[1] = class \"Ljava/util/Collection;\";
$r975 = virtualinvoke $r974.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r973);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r975);
$r977 = class \"LjavaT/lang/annotation/UnitTest;\";
$r976 = newarray (java.lang.Class)[2];
$r976[0] = class \"[F\";
$r976[1] = class \"Ljava/util/Collection;\";
$r978 = virtualinvoke $r977.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r976);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r978);
$r980 = class \"LjavaT/lang/annotation/UnitTest;\";
$r979 = newarray (java.lang.Class)[2];
$r979[0] = class \"[D\";
$r979[1] = class \"Ljava/util/Collection;\";
$r981 = virtualinvoke $r980.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r979);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r981);
$r983 = class \"LjavaT/lang/annotation/UnitTest;\";
$r982 = newarray (java.lang.Class)[2];
$r982[0] = class \"[Z\";
$r982[1] = class \"Ljava/util/Collection;\";
$r984 = virtualinvoke $r983.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r982);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r984);
$r986 = class \"LjavaT/lang/annotation/UnitTest;\";
$r985 = newarray (java.lang.Class)[2];
$r985[0] = class \"[Ljava/lang/String;\";
$r985[1] = class \"Ljava/util/Collection;\";
$r987 = virtualinvoke $r986.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r985);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r987);
$r989 = class \"LjavaT/lang/annotation/UnitTest;\";
$r988 = newarray (java.lang.Class)[2];
$r988[0] = class \"[Ljava/lang/Class;\";
$r988[1] = class \"Ljava/util/Collection;\";
$r990 = virtualinvoke $r989.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r988);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r990);
$r992 = class \"LjavaT/lang/annotation/UnitTest;\";
$r991 = newarray (java.lang.Class)[2];
$r991[0] = class \"[Ljava/lang/Enum;\";
$r991[1] = class \"Ljava/util/Collection;\";
$r993 = virtualinvoke $r992.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r991);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r993);
$r995 = class \"LjavaT/lang/annotation/UnitTest;\";
$r994 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r996 = virtualinvoke $r995.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesParam\", $r994);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesParam(java.lang.reflect.Method)>($r996);
$r998 = class \"LjavaT/lang/annotation/UnitTest;\";
$r997 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r999 = virtualinvoke $r998.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultParam\", $r997);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefaultParam(java.lang.reflect.Method)>($r999);
$r1001 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1000 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1002 = virtualinvoke $r1001.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultParam\", $r1000);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1002);
$r1004 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1003 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1005 = virtualinvoke $r1004.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesParam\", $r1003);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0Param(java.lang.reflect.Method)>($r1005);
$r1007 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1006 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1008 = virtualinvoke $r1007.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesParam\", $r1006);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1Param(java.lang.reflect.Method)>($r1008);
$r1010 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1009 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1011 = virtualinvoke $r1010.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesParam\", $r1009);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2Param(java.lang.reflect.Method)>($r1011);
$r1013 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1012 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1014 = virtualinvoke $r1013.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultParam\", $r1012);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1014);
$r1016 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1015 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1017 = virtualinvoke $r1016.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultParam\", $r1015);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefaultParam(java.lang.reflect.Method)>($r1017);
$r1019 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1018 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1020 = virtualinvoke $r1019.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerParam\", $r1018);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarkerParam(java.lang.reflect.Method)>($r1020);
$r1022 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1021 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1023 = virtualinvoke $r1022.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteParam\", $r1021);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteParam(java.lang.reflect.Method)>($r1023);
$r1025 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1024 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1026 = virtualinvoke $r1025.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortParam\", $r1024);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortParam(java.lang.reflect.Method)>($r1026);
$r1028 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1027 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1029 = virtualinvoke $r1028.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntParam\", $r1027);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntParam(java.lang.reflect.Method)>($r1029);
$r1031 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1030 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1032 = virtualinvoke $r1031.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongParam\", $r1030);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongParam(java.lang.reflect.Method)>($r1032);
$r1034 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1033 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1035 = virtualinvoke $r1034.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharParam\", $r1033);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharParam(java.lang.reflect.Method)>($r1035);
$r1037 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1036 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1038 = virtualinvoke $r1037.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatParam\", $r1036);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatParam(java.lang.reflect.Method)>($r1038);
$r1040 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1039 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1041 = virtualinvoke $r1040.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleParam\", $r1039);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleParam(java.lang.reflect.Method)>($r1041);
$r1043 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1042 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1044 = virtualinvoke $r1043.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanParam\", $r1042);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanParam(java.lang.reflect.Method)>($r1044);
$r1046 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1045 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1047 = virtualinvoke $r1046.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringParam\", $r1045);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringParam(java.lang.reflect.Method)>($r1047);
$r1049 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1048 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1050 = virtualinvoke $r1049.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassParam\", $r1048);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassParam(java.lang.reflect.Method)>($r1050);
$r1052 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1051 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1053 = virtualinvoke $r1052.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumParam\", $r1051);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumParam(java.lang.reflect.Method)>($r1053);
$r1055 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1054 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1056 = virtualinvoke $r1055.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDefParam\", $r1054);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDefParam(java.lang.reflect.Method)>($r1056);
$r1058 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1057 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1059 = virtualinvoke $r1058.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDefParam\", $r1057);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDefParam(java.lang.reflect.Method)>($r1059);
$r1061 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1060 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1062 = virtualinvoke $r1061.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDefParam\", $r1060);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDefParam(java.lang.reflect.Method)>($r1062);
$r1064 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1063 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1065 = virtualinvoke $r1064.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDefParam\", $r1063);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDefParam(java.lang.reflect.Method)>($r1065);
$r1067 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1066 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1068 = virtualinvoke $r1067.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDefParam\", $r1066);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDefParam(java.lang.reflect.Method)>($r1068);
$r1070 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1069 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1071 = virtualinvoke $r1070.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDefParam\", $r1069);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDefParam(java.lang.reflect.Method)>($r1071);
$r1073 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1072 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1074 = virtualinvoke $r1073.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDefParam\", $r1072);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDefParam(java.lang.reflect.Method)>($r1074);
$r1076 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1075 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1077 = virtualinvoke $r1076.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDefParam\", $r1075);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDefParam(java.lang.reflect.Method)>($r1077);
$r1079 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1078 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1080 = virtualinvoke $r1079.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDefParam\", $r1078);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDefParam(java.lang.reflect.Method)>($r1080);
$r1082 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1081 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1083 = virtualinvoke $r1082.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDefParam\", $r1081);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDefParam(java.lang.reflect.Method)>($r1083);
$r1085 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1084 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1086 = virtualinvoke $r1085.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDefParam\", $r1084);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDefParam(java.lang.reflect.Method)>($r1086);
$r1088 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1087 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1089 = virtualinvoke $r1088.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDefParam\", $r1087);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDefParam(java.lang.reflect.Method)>($r1089);
$r1091 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1090 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1092 = virtualinvoke $r1091.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDefParam\", $r1090);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDefParam(java.lang.reflect.Method)>($r1092);
$r1094 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1093 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1095 = virtualinvoke $r1094.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDefParam\", $r1093);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDefParam(java.lang.reflect.Method)>($r1095);
$r1097 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1096 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1098 = virtualinvoke $r1097.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDefParam\", $r1096);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDefParam(java.lang.reflect.Method)>($r1098);
$r1100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1099 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1101 = virtualinvoke $r1100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDefParam\", $r1099);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDefParam(java.lang.reflect.Method)>($r1101);
$r1103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1104 = virtualinvoke $r1103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDefParam\", $r1102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDefParam(java.lang.reflect.Method)>($r1104);
$r1106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1107 = virtualinvoke $r1106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDefParam\", $r1105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDefParam(java.lang.reflect.Method)>($r1107);
$r1109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1110 = virtualinvoke $r1109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDefParam\", $r1108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDefParam(java.lang.reflect.Method)>($r1110);
$r1112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1113 = virtualinvoke $r1112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDefParam\", $r1111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDefParam(java.lang.reflect.Method)>($r1113);
$r1115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1116 = virtualinvoke $r1115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDefParam\", $r1114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDefParam(java.lang.reflect.Method)>($r1116);
$r1118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1119 = virtualinvoke $r1118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDefParam\", $r1117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDefParam(java.lang.reflect.Method)>($r1119);
$r1121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1122 = virtualinvoke $r1121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmptyParam\", $r1120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmptyParam(java.lang.reflect.Method)>($r1122);
$r1124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1125 = virtualinvoke $r1124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmptyParam\", $r1123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmptyParam(java.lang.reflect.Method)>($r1125);
$r1127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1128 = virtualinvoke $r1127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmptyParam\", $r1126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmptyParam(java.lang.reflect.Method)>($r1128);
$r1130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1131 = virtualinvoke $r1130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmptyParam\", $r1129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmptyParam(java.lang.reflect.Method)>($r1131);
$r1133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1134 = virtualinvoke $r1133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmptyParam\", $r1132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmptyParam(java.lang.reflect.Method)>($r1134);
$r1136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1137 = virtualinvoke $r1136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmptyParam\", $r1135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmptyParam(java.lang.reflect.Method)>($r1137);
$r1139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1140 = virtualinvoke $r1139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmptyParam\", $r1138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmptyParam(java.lang.reflect.Method)>($r1140);
$r1142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1143 = virtualinvoke $r1142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmptyParam\", $r1141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmptyParam(java.lang.reflect.Method)>($r1143);
$r1145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1146 = virtualinvoke $r1145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmptyParam\", $r1144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmptyParam(java.lang.reflect.Method)>($r1146);
$r1148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1149 = virtualinvoke $r1148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmptyParam\", $r1147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmptyParam(java.lang.reflect.Method)>($r1149);
$r1151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1152 = virtualinvoke $r1151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmptyParam\", $r1150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmptyParam(java.lang.reflect.Method)>($r1152);
$r1154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1155 = virtualinvoke $r1154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOneParam\", $r1153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOneParam(java.lang.reflect.Method)>($r1155);
$r1157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1158 = virtualinvoke $r1157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOneParam\", $r1156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOneParam(java.lang.reflect.Method)>($r1158);
$r1160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1161 = virtualinvoke $r1160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOneParam\", $r1159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOneParam(java.lang.reflect.Method)>($r1161);
$r1163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1164 = virtualinvoke $r1163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOneParam\", $r1162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOneParam(java.lang.reflect.Method)>($r1164);
$r1166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1167 = virtualinvoke $r1166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOneParam\", $r1165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOneParam(java.lang.reflect.Method)>($r1167);
$r1169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1170 = virtualinvoke $r1169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOneParam\", $r1168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOneParam(java.lang.reflect.Method)>($r1170);
$r1172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1173 = virtualinvoke $r1172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOneParam\", $r1171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOneParam(java.lang.reflect.Method)>($r1173);
$r1175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1176 = virtualinvoke $r1175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOneParam\", $r1174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOneParam(java.lang.reflect.Method)>($r1176);
$r1178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1179 = virtualinvoke $r1178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOneParam\", $r1177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOneParam(java.lang.reflect.Method)>($r1179);
$r1181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1182 = virtualinvoke $r1181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOneParam\", $r1180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOneParam(java.lang.reflect.Method)>($r1182);
$r1184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1185 = virtualinvoke $r1184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOneParam\", $r1183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOneParam(java.lang.reflect.Method)>($r1185);
$r1187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1188 = virtualinvoke $r1187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwoParam\", $r1186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwoParam(java.lang.reflect.Method)>($r1188);
$r1190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1191 = virtualinvoke $r1190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwoParam\", $r1189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwoParam(java.lang.reflect.Method)>($r1191);
$r1193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1194 = virtualinvoke $r1193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwoParam\", $r1192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwoParam(java.lang.reflect.Method)>($r1194);
$r1196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1197 = virtualinvoke $r1196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwoParam\", $r1195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwoParam(java.lang.reflect.Method)>($r1197);
$r1199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1200 = virtualinvoke $r1199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwoParam\", $r1198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwoParam(java.lang.reflect.Method)>($r1200);
$r1202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1203 = virtualinvoke $r1202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwoParam\", $r1201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwoParam(java.lang.reflect.Method)>($r1203);
$r1205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1206 = virtualinvoke $r1205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwoParam\", $r1204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwoParam(java.lang.reflect.Method)>($r1206);
$r1208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1209 = virtualinvoke $r1208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwoParam\", $r1207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwoParam(java.lang.reflect.Method)>($r1209);
$r1211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1212 = virtualinvoke $r1211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwoParam\", $r1210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwoParam(java.lang.reflect.Method)>($r1212);
$r1214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1215 = virtualinvoke $r1214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwoParam\", $r1213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwoParam(java.lang.reflect.Method)>($r1215);
$r1217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1218 = virtualinvoke $r1217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwoParam\", $r1216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwoParam(java.lang.reflect.Method)>($r1218);
$r1220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1221 = virtualinvoke $r1220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDefParam\", $r1219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDefParam(java.lang.reflect.Method)>($r1221);
$r1223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1224 = virtualinvoke $r1223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDefParam\", $r1222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDefParam(java.lang.reflect.Method)>($r1224);
$r1226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1227 = virtualinvoke $r1226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDefParam\", $r1225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDefParam(java.lang.reflect.Method)>($r1227);
$r1229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1230 = virtualinvoke $r1229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDefParam\", $r1228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDefParam(java.lang.reflect.Method)>($r1230);
$r1232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1233 = virtualinvoke $r1232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDefParam\", $r1231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDefParam(java.lang.reflect.Method)>($r1233);
$r1235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1236 = virtualinvoke $r1235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDefParam\", $r1234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDefParam(java.lang.reflect.Method)>($r1236);
$r1238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1239 = virtualinvoke $r1238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDefParam\", $r1237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDefParam(java.lang.reflect.Method)>($r1239);
$r1241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1242 = virtualinvoke $r1241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDefParam\", $r1240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDefParam(java.lang.reflect.Method)>($r1242);
$r1244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1245 = virtualinvoke $r1244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDefParam\", $r1243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDefParam(java.lang.reflect.Method)>($r1245);
$r1247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1248 = virtualinvoke $r1247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDefParam\", $r1246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDefParam(java.lang.reflect.Method)>($r1248);
$r1250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1251 = virtualinvoke $r1250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDefParam\", $r1249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDefParam(java.lang.reflect.Method)>($r1251);
$r1253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1254 = virtualinvoke $r1253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDefParam\", $r1252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDefParam(java.lang.reflect.Method)>($r1254);
$r1256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1257 = virtualinvoke $r1256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDefParam\", $r1255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDefParam(java.lang.reflect.Method)>($r1257);
$r1259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1260 = virtualinvoke $r1259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDefParam\", $r1258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDefParam(java.lang.reflect.Method)>($r1260);
$r1262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1263 = virtualinvoke $r1262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDefParam\", $r1261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDefParam(java.lang.reflect.Method)>($r1263);
$r1265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1266 = virtualinvoke $r1265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDefParam\", $r1264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDefParam(java.lang.reflect.Method)>($r1266);
$r1268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1269 = virtualinvoke $r1268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDefParam\", $r1267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDefParam(java.lang.reflect.Method)>($r1269);
$r1271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1272 = virtualinvoke $r1271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDefParam\", $r1270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDefParam(java.lang.reflect.Method)>($r1272);
$r1274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1275 = virtualinvoke $r1274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDefParam\", $r1273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDefParam(java.lang.reflect.Method)>($r1275);
$r1277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1278 = virtualinvoke $r1277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDefParam\", $r1276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDefParam(java.lang.reflect.Method)>($r1278);
$r1280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1281 = virtualinvoke $r1280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDefParam\", $r1279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDefParam(java.lang.reflect.Method)>($r1281);
$r1283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1284 = virtualinvoke $r1283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDefParam\", $r1282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDefParam(java.lang.reflect.Method)>($r1284);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/markerClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\");
$r1285 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1286 = virtualinvoke $r1285.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", $r1286, class \"LjavaT/lang/annotation/ScalarTypes;\");
$r1287 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1288 = virtualinvoke $r1287.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1288, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1290 = virtualinvoke $r1289.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1290, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1292 = virtualinvoke $r1291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1292, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1294 = virtualinvoke $r1293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1294, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1296 = virtualinvoke $r1295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1296, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1298 = virtualinvoke $r1297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1298, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1300 = virtualinvoke $r1299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1300, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1302 = virtualinvoke $r1301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", $r1302, class \"LjavaT/lang/annotation/Marker;\");
$r1303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1304 = virtualinvoke $r1303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", $r1304, class \"LjavaT/lang/annotation/SingleMemberByte;\");
$r1305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1306 = virtualinvoke $r1305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", $r1306, class \"LjavaT/lang/annotation/SingleMemberShort;\");
$r1307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1308 = virtualinvoke $r1307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", $r1308, class \"LjavaT/lang/annotation/SingleMemberInt;\");
$r1309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1310 = virtualinvoke $r1309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", $r1310, class \"LjavaT/lang/annotation/SingleMemberLong;\");
$r1311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1312 = virtualinvoke $r1311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", $r1312, class \"LjavaT/lang/annotation/SingleMemberChar;\");
$r1313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1314 = virtualinvoke $r1313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", $r1314, class \"LjavaT/lang/annotation/SingleMemberFloat;\");
$r1315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1316 = virtualinvoke $r1315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", $r1316, class \"LjavaT/lang/annotation/SingleMemberDouble;\");
$r1317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1318 = virtualinvoke $r1317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", $r1318, class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
$r1319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1320 = virtualinvoke $r1319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", $r1320, class \"LjavaT/lang/annotation/SingleMemberString;\");
$r1321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1322 = virtualinvoke $r1321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", $r1322, class \"LjavaT/lang/annotation/SingleMemberClass;\");
$r1323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1324 = virtualinvoke $r1323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", $r1324, class \"LjavaT/lang/annotation/SingleMemberEnum;\");
$r1325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1326 = virtualinvoke $r1325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1326, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1328 = virtualinvoke $r1327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1328, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1330 = virtualinvoke $r1329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1330, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1332 = virtualinvoke $r1331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1332, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1334 = virtualinvoke $r1333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1334, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1336 = virtualinvoke $r1335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1336, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1338 = virtualinvoke $r1337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1338, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1340 = virtualinvoke $r1339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1340, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1342 = virtualinvoke $r1341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1342, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1344 = virtualinvoke $r1343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1344, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1346 = virtualinvoke $r1345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1346, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1348 = virtualinvoke $r1347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1348, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1350 = virtualinvoke $r1349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1350, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1352 = virtualinvoke $r1351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1352, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1354 = virtualinvoke $r1353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1354, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1356 = virtualinvoke $r1355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1356, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1358 = virtualinvoke $r1357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1358, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1360 = virtualinvoke $r1359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1360, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1362 = virtualinvoke $r1361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1362, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1364 = virtualinvoke $r1363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1364, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1366 = virtualinvoke $r1365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1366, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1368 = virtualinvoke $r1367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1368, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1370 = virtualinvoke $r1369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1370, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1372 = virtualinvoke $r1371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1372, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1374 = virtualinvoke $r1373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1374, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1376 = virtualinvoke $r1375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1376, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1378 = virtualinvoke $r1377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1378, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1380 = virtualinvoke $r1379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1380, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1382 = virtualinvoke $r1381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1382, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1384 = virtualinvoke $r1383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1384, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1386 = virtualinvoke $r1385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1386, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1388 = virtualinvoke $r1387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1388, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1390 = virtualinvoke $r1389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1390, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1392 = virtualinvoke $r1391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1392, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1394 = virtualinvoke $r1393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1394, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1396 = virtualinvoke $r1395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1396, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1398 = virtualinvoke $r1397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1398, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1400 = virtualinvoke $r1399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1400, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1402 = virtualinvoke $r1401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1402, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1404 = virtualinvoke $r1403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1404, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1406 = virtualinvoke $r1405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1406, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1408 = virtualinvoke $r1407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1408, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1410 = virtualinvoke $r1409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1410, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1412 = virtualinvoke $r1411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1412, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1414 = virtualinvoke $r1413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1414, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1416 = virtualinvoke $r1415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1416, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1418 = virtualinvoke $r1417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1418, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1420 = virtualinvoke $r1419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1420, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1422 = virtualinvoke $r1421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1422, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1424 = virtualinvoke $r1423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1424, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1426 = virtualinvoke $r1425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1426, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1428 = virtualinvoke $r1427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1428, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1430 = virtualinvoke $r1429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1430, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1432 = virtualinvoke $r1431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1432, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1434 = virtualinvoke $r1433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1434, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1436 = virtualinvoke $r1435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1436, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1438 = virtualinvoke $r1437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1438, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1440 = virtualinvoke $r1439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1440, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1442 = virtualinvoke $r1441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1442, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1444 = virtualinvoke $r1443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1444, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1446 = virtualinvoke $r1445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1446, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1448 = virtualinvoke $r1447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1448, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1450 = virtualinvoke $r1449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1450, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1452 = virtualinvoke $r1451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1452, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1454 = virtualinvoke $r1453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1454, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1456 = virtualinvoke $r1455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1456, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1458 = virtualinvoke $r1457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1458, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1460 = virtualinvoke $r1459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1460, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1462 = virtualinvoke $r1461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1462, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1464 = virtualinvoke $r1463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1464, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1466 = virtualinvoke $r1465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1466, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1468 = virtualinvoke $r1467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1468, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1470 = virtualinvoke $r1469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1470, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1472 = virtualinvoke $r1471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1472, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1474 = virtualinvoke $r1473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1474, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1476 = virtualinvoke $r1475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1476, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1478 = virtualinvoke $r1477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1478, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1480 = virtualinvoke $r1479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1480, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1482 = virtualinvoke $r1481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1482, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1484 = virtualinvoke $r1483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1484, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1485 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1486 = virtualinvoke $r1485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1486, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1487 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1488 = virtualinvoke $r1487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1488, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1489 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1490 = virtualinvoke $r1489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1490, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1491 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1492 = virtualinvoke $r1491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1492, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1493 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1494 = virtualinvoke $r1493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1494, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1495 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1496 = virtualinvoke $r1495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1496, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1497 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1498 = virtualinvoke $r1497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1498, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1499 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1500 = virtualinvoke $r1499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1500, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1501 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1502 = virtualinvoke $r1501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1502, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1503 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1504 = virtualinvoke $r1503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1504, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1505 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1506 = virtualinvoke $r1505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1506, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1507 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1508 = virtualinvoke $r1507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1508, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1509 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1510 = virtualinvoke $r1509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1510, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1511 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1512 = virtualinvoke $r1511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1512, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1513 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1514 = virtualinvoke $r1513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1514, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1515 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1516 = virtualinvoke $r1515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1516, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1517 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1518 = virtualinvoke $r1517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1518, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1519 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1520 = virtualinvoke $r1519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1520, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1521 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1522 = virtualinvoke $r1521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1522, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1523 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1524 = virtualinvoke $r1523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1524, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1525 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1526 = virtualinvoke $r1525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1526, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1527 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1528 = virtualinvoke $r1527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1528, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1529 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1530 = virtualinvoke $r1529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1530, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1531 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1532 = virtualinvoke $r1531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1532, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1533 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1534 = virtualinvoke $r1533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1534, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1535 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1536 = virtualinvoke $r1535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1536, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1537 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1538 = virtualinvoke $r1537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1538, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1539 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1540 = virtualinvoke $r1539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1540, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1541 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1542 = virtualinvoke $r1541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1542, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1543 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1544 = virtualinvoke $r1543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1544, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1545 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1546 = virtualinvoke $r1545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1546, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1547 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1548 = virtualinvoke $r1547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1548, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1549 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1550 = virtualinvoke $r1549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1550, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1551 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1552 = virtualinvoke $r1551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1552, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1553 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1554 = virtualinvoke $r1553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1554, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1555 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1556 = virtualinvoke $r1555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1556, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1557 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1558 = virtualinvoke $r1557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1558, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1559 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1560 = virtualinvoke $r1559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1560, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1561 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1562 = virtualinvoke $r1561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1562, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1563 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1564 = virtualinvoke $r1563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1564, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1565 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1566 = virtualinvoke $r1565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1566, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1567 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1568 = virtualinvoke $r1567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1568, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1569 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1570 = virtualinvoke $r1569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1570, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1571 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1572 = virtualinvoke $r1571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1572, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1573 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1574 = virtualinvoke $r1573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1574, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1575 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1576 = virtualinvoke $r1575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1576, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1577 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1578 = virtualinvoke $r1577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1578, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1579 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1580 = virtualinvoke $r1579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1580, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1581 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1582 = virtualinvoke $r1581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1582, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1583 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1584 = virtualinvoke $r1583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1584, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1585 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1586 = virtualinvoke $r1585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1586, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1587 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1588 = virtualinvoke $r1587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1588, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1589 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1590 = virtualinvoke $r1589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1590, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1591 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1592 = virtualinvoke $r1591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1592, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1593 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1594 = virtualinvoke $r1593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1594, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1595 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1596 = virtualinvoke $r1595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1596, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1597 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1598 = virtualinvoke $r1597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1598, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1599 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1600 = virtualinvoke $r1599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1600, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1601 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1602 = virtualinvoke $r1601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1602, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1603 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1604 = virtualinvoke $r1603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1604, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1605 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1606 = virtualinvoke $r1605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1606, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1607 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1608 = virtualinvoke $r1607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1608, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1609 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1610 = virtualinvoke $r1609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1610, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1611 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1612 = virtualinvoke $r1611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1612, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1613 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1614 = virtualinvoke $r1613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1614, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1615 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1616 = virtualinvoke $r1615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1616, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1617 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1618 = virtualinvoke $r1617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1618, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1619 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1620 = virtualinvoke $r1619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1620, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1621 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1622 = virtualinvoke $r1621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1622, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1623 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1624 = virtualinvoke $r1623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1624, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1625 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1626 = virtualinvoke $r1625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1626, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1627 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1628 = virtualinvoke $r1627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1628, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1629 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1630 = virtualinvoke $r1629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1630, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1631 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1632 = virtualinvoke $r1631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1632, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1633 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1634 = virtualinvoke $r1633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1634, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1635 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1636 = virtualinvoke $r1635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1636, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1637 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1638 = virtualinvoke $r1637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1638, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1639 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1640 = virtualinvoke $r1639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1640, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1641 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1642 = virtualinvoke $r1641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1642, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1643 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1644 = virtualinvoke $r1643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1644, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1645 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1646 = virtualinvoke $r1645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1646, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", class \"LjavaT/lang/annotation/ScalarTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", class \"LjavaT/lang/annotation/Marker;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", class \"LjavaT/lang/annotation/SingleMemberByte;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", class \"LjavaT/lang/annotation/SingleMemberShort;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", class \"LjavaT/lang/annotation/SingleMemberInt;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", class \"LjavaT/lang/annotation/SingleMemberLong;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", class \"LjavaT/lang/annotation/SingleMemberChar;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", class \"LjavaT/lang/annotation/SingleMemberFloat;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", class \"LjavaT/lang/annotation/SingleMemberDouble;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", class \"LjavaT/lang/annotation/SingleMemberString;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", class \"LjavaT/lang/annotation/SingleMemberClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", class \"LjavaT/lang/annotation/SingleMemberEnum;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 1, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 0, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 0, 1);
$r1648 = <java.lang.System: java.io.PrintStream out>;
$r1647 = new java.lang.StringBuilder;
specialinvoke $r1647.<java.lang.StringBuilder: void <init>()>();
$r1649 = virtualinvoke $r1647.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$i0 = <javaT.lang.'annotation'.UnitTest: int numTests>;
$r1650 = virtualinvoke $r1649.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r1651 = virtualinvoke $r1650.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests completed\");
$r1652 = virtualinvoke $r1651.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1648.<java.io.PrintStream: void println(java.lang.String)>($r1652);
$i1 = <javaT.lang.'annotation'.UnitTest: int failCount>;
if $i1 == 0 goto $r1653 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r1654 = new java.lang.Exception;
$r1655 = new java.lang.StringBuilder;
specialinvoke $r1655.<java.lang.StringBuilder: void <init>()>();
$r1656 = virtualinvoke $r1655.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Failure count: \");
$i2 = <javaT.lang.'annotation'.UnitTest: int failCount>;
$r1657 = virtualinvoke $r1656.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r1658 = virtualinvoke $r1657.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1654.<java.lang.Exception: void <init>(java.lang.String)>($r1658);
throw $r1654;
"
    "Block 2:
[preds: 0 ] [succs: ]
$r1653 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r1653.<java.io.PrintStream: void println(java.lang.String)>(\"Success.\");
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1659 := @parameter0: java.lang.String[];
$r1 = class \"LjavaT/lang/annotation/UnitTest;\";
$r0 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesMethod\", $r0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r2);
$r4 = class \"LjavaT/lang/annotation/UnitTest;\";
$r3 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultMethod\", $r3);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r5);
$r7 = class \"LjavaT/lang/annotation/UnitTest;\";
$r6 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultMethod\", $r6);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r8);
$r10 = class \"LjavaT/lang/annotation/UnitTest;\";
$r9 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesMethod\", $r9);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r11);
$r13 = class \"LjavaT/lang/annotation/UnitTest;\";
$r12 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesMethod\", $r12);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r14);
$r16 = class \"LjavaT/lang/annotation/UnitTest;\";
$r15 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r17 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesMethod\", $r15);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r17);
$r19 = class \"LjavaT/lang/annotation/UnitTest;\";
$r18 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r20 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultMethod\", $r18);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r20);
$r22 = class \"LjavaT/lang/annotation/UnitTest;\";
$r21 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r23 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultMethod\", $r21);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r23);
$r25 = class \"LjavaT/lang/annotation/UnitTest;\";
$r24 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerMethod\", $r24);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r26);
$r28 = class \"LjavaT/lang/annotation/UnitTest;\";
$r27 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r29 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByte\", $r27);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r29);
$r31 = class \"LjavaT/lang/annotation/UnitTest;\";
$r30 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r32 = virtualinvoke $r31.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShort\", $r30);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r32);
$r34 = class \"LjavaT/lang/annotation/UnitTest;\";
$r33 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberInt\", $r33);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r35);
$r37 = class \"LjavaT/lang/annotation/UnitTest;\";
$r36 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r38 = virtualinvoke $r37.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLong\", $r36);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r38);
$r40 = class \"LjavaT/lang/annotation/UnitTest;\";
$r39 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r41 = virtualinvoke $r40.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberChar\", $r39);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r41);
$r43 = class \"LjavaT/lang/annotation/UnitTest;\";
$r42 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r44 = virtualinvoke $r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloat\", $r42);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r44);
$r46 = class \"LjavaT/lang/annotation/UnitTest;\";
$r45 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r47 = virtualinvoke $r46.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDouble\", $r45);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r47);
$r49 = class \"LjavaT/lang/annotation/UnitTest;\";
$r48 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r50 = virtualinvoke $r49.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBoolean\", $r48);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r50);
$r52 = class \"LjavaT/lang/annotation/UnitTest;\";
$r51 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r53 = virtualinvoke $r52.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberString\", $r51);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r53);
$r55 = class \"LjavaT/lang/annotation/UnitTest;\";
$r54 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r56 = virtualinvoke $r55.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClass\", $r54);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r56);
$r58 = class \"LjavaT/lang/annotation/UnitTest;\";
$r57 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r59 = virtualinvoke $r58.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnum\", $r57);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r59);
$r61 = class \"LjavaT/lang/annotation/UnitTest;\";
$r60 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r62 = virtualinvoke $r61.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDef\", $r60);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r62);
$r64 = class \"LjavaT/lang/annotation/UnitTest;\";
$r63 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r65 = virtualinvoke $r64.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDef\", $r63);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r65);
$r67 = class \"LjavaT/lang/annotation/UnitTest;\";
$r66 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r68 = virtualinvoke $r67.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDef\", $r66);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r68);
$r70 = class \"LjavaT/lang/annotation/UnitTest;\";
$r69 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r71 = virtualinvoke $r70.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDef\", $r69);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r71);
$r73 = class \"LjavaT/lang/annotation/UnitTest;\";
$r72 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r74 = virtualinvoke $r73.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDef\", $r72);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r74);
$r76 = class \"LjavaT/lang/annotation/UnitTest;\";
$r75 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r77 = virtualinvoke $r76.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDef\", $r75);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r77);
$r79 = class \"LjavaT/lang/annotation/UnitTest;\";
$r78 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r80 = virtualinvoke $r79.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDef\", $r78);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r80);
$r82 = class \"LjavaT/lang/annotation/UnitTest;\";
$r81 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r83 = virtualinvoke $r82.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDef\", $r81);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r83);
$r85 = class \"LjavaT/lang/annotation/UnitTest;\";
$r84 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r86 = virtualinvoke $r85.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDef\", $r84);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r86);
$r88 = class \"LjavaT/lang/annotation/UnitTest;\";
$r87 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r89 = virtualinvoke $r88.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDef\", $r87);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r89);
$r91 = class \"LjavaT/lang/annotation/UnitTest;\";
$r90 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r92 = virtualinvoke $r91.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDef\", $r90);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r92);
$r94 = class \"LjavaT/lang/annotation/UnitTest;\";
$r93 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r95 = virtualinvoke $r94.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDef\", $r93);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r95);
$r97 = class \"LjavaT/lang/annotation/UnitTest;\";
$r96 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r98 = virtualinvoke $r97.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDef\", $r96);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r98);
$r100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r99 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r101 = virtualinvoke $r100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDef\", $r99);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r101);
$r103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r104 = virtualinvoke $r103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDef\", $r102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r104);
$r106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r107 = virtualinvoke $r106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDef\", $r105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r107);
$r109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r110 = virtualinvoke $r109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDef\", $r108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r110);
$r112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r113 = virtualinvoke $r112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDef\", $r111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r113);
$r115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r116 = virtualinvoke $r115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDef\", $r114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r116);
$r118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r119 = virtualinvoke $r118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDef\", $r117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r119);
$r121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r122 = virtualinvoke $r121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDef\", $r120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r122);
$r124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r125 = virtualinvoke $r124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDef\", $r123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r125);
$r127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r128 = virtualinvoke $r127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmpty\", $r126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r128);
$r130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r131 = virtualinvoke $r130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmpty\", $r129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r131);
$r133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r134 = virtualinvoke $r133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmpty\", $r132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r134);
$r136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r137 = virtualinvoke $r136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmpty\", $r135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r137);
$r139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r140 = virtualinvoke $r139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmpty\", $r138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r140);
$r142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r143 = virtualinvoke $r142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmpty\", $r141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r143);
$r145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r146 = virtualinvoke $r145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmpty\", $r144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r146);
$r148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r149 = virtualinvoke $r148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmpty\", $r147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r149);
$r151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r152 = virtualinvoke $r151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmpty\", $r150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r152);
$r154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r155 = virtualinvoke $r154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmpty\", $r153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r155);
$r157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r158 = virtualinvoke $r157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmpty\", $r156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r158);
$r160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r161 = virtualinvoke $r160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOne\", $r159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r161);
$r163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r164 = virtualinvoke $r163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOne\", $r162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r164);
$r166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r167 = virtualinvoke $r166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOne\", $r165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r167);
$r169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r170 = virtualinvoke $r169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOne\", $r168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r170);
$r172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r173 = virtualinvoke $r172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOne\", $r171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r173);
$r175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r176 = virtualinvoke $r175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOne\", $r174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r176);
$r178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r179 = virtualinvoke $r178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOne\", $r177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r179);
$r181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r182 = virtualinvoke $r181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOne\", $r180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r182);
$r184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r185 = virtualinvoke $r184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOne\", $r183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r185);
$r187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r188 = virtualinvoke $r187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOne\", $r186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r188);
$r190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r191 = virtualinvoke $r190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOne\", $r189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r191);
$r193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r194 = virtualinvoke $r193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwo\", $r192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r194);
$r196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r197 = virtualinvoke $r196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwo\", $r195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r197);
$r199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r200 = virtualinvoke $r199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwo\", $r198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r200);
$r202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r203 = virtualinvoke $r202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwo\", $r201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r203);
$r205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r206 = virtualinvoke $r205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwo\", $r204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r206);
$r208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r209 = virtualinvoke $r208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwo\", $r207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r209);
$r211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r212 = virtualinvoke $r211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwo\", $r210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r212);
$r214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r215 = virtualinvoke $r214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwo\", $r213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r215);
$r217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r218 = virtualinvoke $r217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwo\", $r216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r218);
$r220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r221 = virtualinvoke $r220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwo\", $r219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r221);
$r223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r224 = virtualinvoke $r223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwo\", $r222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r224);
$r226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r227 = virtualinvoke $r226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDef\", $r225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r227);
$r229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r230 = virtualinvoke $r229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDef\", $r228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r230);
$r232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r233 = virtualinvoke $r232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDef\", $r231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r233);
$r235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r236 = virtualinvoke $r235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDef\", $r234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r236);
$r238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r239 = virtualinvoke $r238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDef\", $r237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r239);
$r241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r242 = virtualinvoke $r241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDef\", $r240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r242);
$r244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r245 = virtualinvoke $r244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDef\", $r243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r245);
$r247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r248 = virtualinvoke $r247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDef\", $r246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r248);
$r250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r251 = virtualinvoke $r250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDef\", $r249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r251);
$r253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r254 = virtualinvoke $r253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDef\", $r252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r254);
$r256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r257 = virtualinvoke $r256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDef\", $r255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r257);
$r259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r260 = virtualinvoke $r259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDef\", $r258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r260);
$r262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r263 = virtualinvoke $r262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDef\", $r261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r263);
$r265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r266 = virtualinvoke $r265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDef\", $r264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r266);
$r268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r269 = virtualinvoke $r268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDef\", $r267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r269);
$r271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r272 = virtualinvoke $r271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDef\", $r270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r272);
$r274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r275 = virtualinvoke $r274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDef\", $r273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r275);
$r277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r278 = virtualinvoke $r277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDef\", $r276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r278);
$r280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r281 = virtualinvoke $r280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDef\", $r279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r281);
$r283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r284 = virtualinvoke $r283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDef\", $r282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r284);
$r286 = class \"LjavaT/lang/annotation/UnitTest;\";
$r285 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r287 = virtualinvoke $r286.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDef\", $r285);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r287);
$r289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r288 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r290 = virtualinvoke $r289.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDef\", $r288);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r290);
$r291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r292 = virtualinvoke $r291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r292);
$r293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r294 = virtualinvoke $r293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r294);
$r295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r296 = virtualinvoke $r295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r296);
$r297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r298 = virtualinvoke $r297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r298);
$r299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r300 = virtualinvoke $r299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r300);
$r301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r302 = virtualinvoke $r301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r302);
$r303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r304 = virtualinvoke $r303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r304);
$r305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r306 = virtualinvoke $r305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r306);
$r307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r308 = virtualinvoke $r307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r308);
$r309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r310 = virtualinvoke $r309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r310);
$r311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r312 = virtualinvoke $r311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r312);
$r313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r314 = virtualinvoke $r313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r314);
$r315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r316 = virtualinvoke $r315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r316);
$r317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r318 = virtualinvoke $r317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r318);
$r319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r320 = virtualinvoke $r319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r320);
$r321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r322 = virtualinvoke $r321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r322);
$r323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r324 = virtualinvoke $r323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r324);
$r325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r326 = virtualinvoke $r325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r326);
$r327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r328 = virtualinvoke $r327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r328);
$r329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r330 = virtualinvoke $r329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r330);
$r331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r332 = virtualinvoke $r331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r332);
$r333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r334 = virtualinvoke $r333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r334);
$r335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r336 = virtualinvoke $r335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r336);
$r337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r338 = virtualinvoke $r337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r338);
$r339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r340 = virtualinvoke $r339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r340);
$r341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r342 = virtualinvoke $r341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r342);
$r343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r344 = virtualinvoke $r343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r344);
$r345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r346 = virtualinvoke $r345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r346);
$r347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r348 = virtualinvoke $r347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r348);
$r349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r350 = virtualinvoke $r349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r350);
$r351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r352 = virtualinvoke $r351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r352);
$r353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r354 = virtualinvoke $r353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r354);
$r355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r356 = virtualinvoke $r355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r356);
$r357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r358 = virtualinvoke $r357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r358);
$r359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r360 = virtualinvoke $r359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r360);
$r361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r362 = virtualinvoke $r361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r362);
$r363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r364 = virtualinvoke $r363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r364);
$r365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r366 = virtualinvoke $r365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r366);
$r367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r368 = virtualinvoke $r367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r368);
$r369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r370 = virtualinvoke $r369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r370);
$r371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r372 = virtualinvoke $r371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r372);
$r373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r374 = virtualinvoke $r373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r374);
$r375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r376 = virtualinvoke $r375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r376);
$r377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r378 = virtualinvoke $r377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r378);
$r379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r380 = virtualinvoke $r379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r380);
$r381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r382 = virtualinvoke $r381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r382);
$r383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r384 = virtualinvoke $r383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r384);
$r385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r386 = virtualinvoke $r385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r386);
$r387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r388 = virtualinvoke $r387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r388);
$r389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r390 = virtualinvoke $r389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r390);
$r391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r392 = virtualinvoke $r391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r392);
$r393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r394 = virtualinvoke $r393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r394);
$r395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r396 = virtualinvoke $r395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r396);
$r397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r398 = virtualinvoke $r397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r398);
$r399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r400 = virtualinvoke $r399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r400);
$r401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r402 = virtualinvoke $r401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r402);
$r403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r404 = virtualinvoke $r403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r404);
$r405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r406 = virtualinvoke $r405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r406);
$r407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r408 = virtualinvoke $r407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r408);
$r409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r410 = virtualinvoke $r409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r410);
$r411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r412 = virtualinvoke $r411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r412);
$r413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r414 = virtualinvoke $r413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r414);
$r415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r416 = virtualinvoke $r415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r416);
$r417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r418 = virtualinvoke $r417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r418);
$r419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r420 = virtualinvoke $r419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r420);
$r421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r422 = virtualinvoke $r421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r422);
$r423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r424 = virtualinvoke $r423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r424);
$r425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r426 = virtualinvoke $r425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r426);
$r427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r428 = virtualinvoke $r427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r428);
$r429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r430 = virtualinvoke $r429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r430);
$r431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r432 = virtualinvoke $r431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r432);
$r433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r434 = virtualinvoke $r433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r434);
$r435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r436 = virtualinvoke $r435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r436);
$r437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r438 = virtualinvoke $r437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r438);
$r439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r440 = virtualinvoke $r439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r440);
$r441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r442 = virtualinvoke $r441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r442);
$r443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r444 = virtualinvoke $r443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r444);
$r445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r446 = virtualinvoke $r445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r446);
$r447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r448 = virtualinvoke $r447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r448);
$r449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r450 = virtualinvoke $r449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r450);
$r451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r452 = virtualinvoke $r451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r452);
$r453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r454 = virtualinvoke $r453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r454);
$r455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r456 = virtualinvoke $r455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r456);
$r457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r458 = virtualinvoke $r457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r458);
$r459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r460 = virtualinvoke $r459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r460);
$r461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r462 = virtualinvoke $r461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r462);
$r463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r464 = virtualinvoke $r463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r464);
$r465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r466 = virtualinvoke $r465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r466);
$r467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r468 = virtualinvoke $r467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r468);
$r469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r470 = virtualinvoke $r469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r470);
$r471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r472 = virtualinvoke $r471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r472);
$r473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r474 = virtualinvoke $r473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r474);
$r475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r476 = virtualinvoke $r475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r476);
$r477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r478 = virtualinvoke $r477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r478);
$r479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r480 = virtualinvoke $r479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r480);
$r481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r482 = virtualinvoke $r481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r482);
$r483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r484 = virtualinvoke $r483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r484);
$r485 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r486 = virtualinvoke $r485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r486);
$r487 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r488 = virtualinvoke $r487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r488);
$r489 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r490 = virtualinvoke $r489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r490);
$r491 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r492 = virtualinvoke $r491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r492);
$r493 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r494 = virtualinvoke $r493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r494);
$r495 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r496 = virtualinvoke $r495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r496);
$r497 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r498 = virtualinvoke $r497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r498);
$r499 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r500 = virtualinvoke $r499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r500);
$r501 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r502 = virtualinvoke $r501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"marker\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r502);
$r503 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r504 = virtualinvoke $r503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByte\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r504);
$r505 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r506 = virtualinvoke $r505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShort\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r506);
$r507 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r508 = virtualinvoke $r507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberInt\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r508);
$r509 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r510 = virtualinvoke $r509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLong\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r510);
$r511 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r512 = virtualinvoke $r511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberChar\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r512);
$r513 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r514 = virtualinvoke $r513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloat\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r514);
$r515 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r516 = virtualinvoke $r515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDouble\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r516);
$r517 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r518 = virtualinvoke $r517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBoolean\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r518);
$r519 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r520 = virtualinvoke $r519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberString\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r520);
$r521 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r522 = virtualinvoke $r521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClass\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r522);
$r523 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r524 = virtualinvoke $r523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnum\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r524);
$r525 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r526 = virtualinvoke $r525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r526);
$r527 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r528 = virtualinvoke $r527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r528);
$r529 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r530 = virtualinvoke $r529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r530);
$r531 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r532 = virtualinvoke $r531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r532);
$r533 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r534 = virtualinvoke $r533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r534);
$r535 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r536 = virtualinvoke $r535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r536);
$r537 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r538 = virtualinvoke $r537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r538);
$r539 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r540 = virtualinvoke $r539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r540);
$r541 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r542 = virtualinvoke $r541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r542);
$r543 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r544 = virtualinvoke $r543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r544);
$r545 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r546 = virtualinvoke $r545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r546);
$r547 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r548 = virtualinvoke $r547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r548);
$r549 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r550 = virtualinvoke $r549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r550);
$r551 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r552 = virtualinvoke $r551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r552);
$r553 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r554 = virtualinvoke $r553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r554);
$r555 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r556 = virtualinvoke $r555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r556);
$r557 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r558 = virtualinvoke $r557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r558);
$r559 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r560 = virtualinvoke $r559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r560);
$r561 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r562 = virtualinvoke $r561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r562);
$r563 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r564 = virtualinvoke $r563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r564);
$r565 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r566 = virtualinvoke $r565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r566);
$r567 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r568 = virtualinvoke $r567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r568);
$r569 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r570 = virtualinvoke $r569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r570);
$r571 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r572 = virtualinvoke $r571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r572);
$r573 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r574 = virtualinvoke $r573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r574);
$r575 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r576 = virtualinvoke $r575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r576);
$r577 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r578 = virtualinvoke $r577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r578);
$r579 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r580 = virtualinvoke $r579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r580);
$r581 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r582 = virtualinvoke $r581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r582);
$r583 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r584 = virtualinvoke $r583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r584);
$r585 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r586 = virtualinvoke $r585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r586);
$r587 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r588 = virtualinvoke $r587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r588);
$r589 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r590 = virtualinvoke $r589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r590);
$r591 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r592 = virtualinvoke $r591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r592);
$r593 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r594 = virtualinvoke $r593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r594);
$r595 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r596 = virtualinvoke $r595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r596);
$r597 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r598 = virtualinvoke $r597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r598);
$r599 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r600 = virtualinvoke $r599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r600);
$r601 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r602 = virtualinvoke $r601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r602);
$r603 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r604 = virtualinvoke $r603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r604);
$r605 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r606 = virtualinvoke $r605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r606);
$r607 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r608 = virtualinvoke $r607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r608);
$r609 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r610 = virtualinvoke $r609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r610);
$r611 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r612 = virtualinvoke $r611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r612);
$r613 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r614 = virtualinvoke $r613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r614);
$r615 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r616 = virtualinvoke $r615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r616);
$r617 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r618 = virtualinvoke $r617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r618);
$r619 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r620 = virtualinvoke $r619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r620);
$r621 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r622 = virtualinvoke $r621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r622);
$r623 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r624 = virtualinvoke $r623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r624);
$r625 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r626 = virtualinvoke $r625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r626);
$r627 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r628 = virtualinvoke $r627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r628);
$r629 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r630 = virtualinvoke $r629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r630);
$r631 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r632 = virtualinvoke $r631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r632);
$r633 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r634 = virtualinvoke $r633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r634);
$r635 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r636 = virtualinvoke $r635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r636);
$r637 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r638 = virtualinvoke $r637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r638);
$r639 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r640 = virtualinvoke $r639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r640);
$r641 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r642 = virtualinvoke $r641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r642);
$r643 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r644 = virtualinvoke $r643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r644);
$r645 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r646 = virtualinvoke $r645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r646);
$r647 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r648 = virtualinvoke $r647.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r648);
$r649 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r650 = virtualinvoke $r649.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r650);
$r651 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r652 = virtualinvoke $r651.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r652);
$r653 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r654 = virtualinvoke $r653.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r654);
$r655 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r656 = virtualinvoke $r655.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r656);
$r657 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r658 = virtualinvoke $r657.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r658);
$r659 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r660 = virtualinvoke $r659.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r660);
$r661 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r662 = virtualinvoke $r661.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r662);
$r663 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r664 = virtualinvoke $r663.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r664);
$r665 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r666 = virtualinvoke $r665.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r666);
$r667 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r668 = virtualinvoke $r667.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r668);
$r669 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r670 = virtualinvoke $r669.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r670);
$r671 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r672 = virtualinvoke $r671.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r672);
$r673 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r674 = virtualinvoke $r673.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r674);
$r675 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r676 = virtualinvoke $r675.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r676);
$r677 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r678 = virtualinvoke $r677.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r678);
$r680 = class \"LjavaT/lang/annotation/UnitTest;\";
$r679 = newarray (java.lang.Class)[1];
$r679[0] = class \"Ljava/util/Iterator;\";
$r681 = virtualinvoke $r680.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r679);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r681);
$r683 = class \"LjavaT/lang/annotation/UnitTest;\";
$r682 = newarray (java.lang.Class)[1];
$r682[0] = class \"Ljava/util/Map;\";
$r684 = virtualinvoke $r683.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r682);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r684);
$r686 = class \"LjavaT/lang/annotation/UnitTest;\";
$r685 = newarray (java.lang.Class)[1];
$r685[0] = class \"Ljava/util/Set;\";
$r687 = virtualinvoke $r686.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r685);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r687);
$r689 = class \"LjavaT/lang/annotation/UnitTest;\";
$r688 = newarray (java.lang.Class)[1];
$r688[0] = class \"Ljava/util/List;\";
$r690 = virtualinvoke $r689.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r688);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r690);
$r692 = class \"LjavaT/lang/annotation/UnitTest;\";
$r691 = newarray (java.lang.Class)[1];
$r691[0] = class \"Ljava/util/Collection;\";
$r693 = virtualinvoke $r692.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r691);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r693);
$r695 = class \"LjavaT/lang/annotation/UnitTest;\";
$r694 = newarray (java.lang.Class)[1];
$r694[0] = class \"Ljava/util/SortedSet;\";
$r696 = virtualinvoke $r695.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r694);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r696);
$r698 = class \"LjavaT/lang/annotation/UnitTest;\";
$r697 = newarray (java.lang.Class)[1];
$r697[0] = class \"Ljava/util/SortedMap;\";
$r699 = virtualinvoke $r698.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r697);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r699);
$r701 = class \"LjavaT/lang/annotation/UnitTest;\";
$r700 = newarray (java.lang.Class)[1];
$r700[0] = class \"Ljava/util/RandomAccess;\";
$r702 = virtualinvoke $r701.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r700);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r702);
$r704 = class \"LjavaT/lang/annotation/UnitTest;\";
$r703 = newarray (java.lang.Class)[0];
$r705 = virtualinvoke $r704.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r703);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r705);
$r708 = class \"LjavaT/lang/annotation/UnitTest;\";
$r706 = newarray (java.lang.Class)[1];
$r707 = <java.lang.Byte: java.lang.Class TYPE>;
$r706[0] = $r707;
$r709 = virtualinvoke $r708.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r706);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r709);
$r712 = class \"LjavaT/lang/annotation/UnitTest;\";
$r710 = newarray (java.lang.Class)[1];
$r711 = <java.lang.Short: java.lang.Class TYPE>;
$r710[0] = $r711;
$r713 = virtualinvoke $r712.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r710);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r713);
$r716 = class \"LjavaT/lang/annotation/UnitTest;\";
$r714 = newarray (java.lang.Class)[1];
$r715 = <java.lang.Integer: java.lang.Class TYPE>;
$r714[0] = $r715;
$r717 = virtualinvoke $r716.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r714);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r717);
$r720 = class \"LjavaT/lang/annotation/UnitTest;\";
$r718 = newarray (java.lang.Class)[1];
$r719 = <java.lang.Long: java.lang.Class TYPE>;
$r718[0] = $r719;
$r721 = virtualinvoke $r720.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r718);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r721);
$r724 = class \"LjavaT/lang/annotation/UnitTest;\";
$r722 = newarray (java.lang.Class)[1];
$r723 = <java.lang.Character: java.lang.Class TYPE>;
$r722[0] = $r723;
$r725 = virtualinvoke $r724.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r722);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r725);
$r728 = class \"LjavaT/lang/annotation/UnitTest;\";
$r726 = newarray (java.lang.Class)[1];
$r727 = <java.lang.Float: java.lang.Class TYPE>;
$r726[0] = $r727;
$r729 = virtualinvoke $r728.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r726);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r729);
$r732 = class \"LjavaT/lang/annotation/UnitTest;\";
$r730 = newarray (java.lang.Class)[1];
$r731 = <java.lang.Double: java.lang.Class TYPE>;
$r730[0] = $r731;
$r733 = virtualinvoke $r732.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r730);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r733);
$r736 = class \"LjavaT/lang/annotation/UnitTest;\";
$r734 = newarray (java.lang.Class)[1];
$r735 = <java.lang.Boolean: java.lang.Class TYPE>;
$r734[0] = $r735;
$r737 = virtualinvoke $r736.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r734);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r737);
$r739 = class \"LjavaT/lang/annotation/UnitTest;\";
$r738 = newarray (java.lang.Class)[1];
$r738[0] = class \"Ljava/lang/String;\";
$r740 = virtualinvoke $r739.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r738);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r740);
$r742 = class \"LjavaT/lang/annotation/UnitTest;\";
$r741 = newarray (java.lang.Class)[1];
$r741[0] = class \"Ljava/lang/Class;\";
$r743 = virtualinvoke $r742.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r741);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r743);
$r745 = class \"LjavaT/lang/annotation/UnitTest;\";
$r744 = newarray (java.lang.Class)[1];
$r744[0] = class \"Ljava/lang/Enum;\";
$r746 = virtualinvoke $r745.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r744);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r746);
$r749 = class \"LjavaT/lang/annotation/UnitTest;\";
$r747 = newarray (java.lang.Class)[2];
$r748 = <java.lang.Byte: java.lang.Class TYPE>;
$r747[0] = $r748;
$r747[1] = class \"Ljava/util/Set;\";
$r750 = virtualinvoke $r749.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r747);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r750);
$r753 = class \"LjavaT/lang/annotation/UnitTest;\";
$r751 = newarray (java.lang.Class)[2];
$r752 = <java.lang.Short: java.lang.Class TYPE>;
$r751[0] = $r752;
$r751[1] = class \"Ljava/util/Set;\";
$r754 = virtualinvoke $r753.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r751);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r754);
$r757 = class \"LjavaT/lang/annotation/UnitTest;\";
$r755 = newarray (java.lang.Class)[2];
$r756 = <java.lang.Integer: java.lang.Class TYPE>;
$r755[0] = $r756;
$r755[1] = class \"Ljava/util/Set;\";
$r758 = virtualinvoke $r757.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r755);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r758);
$r761 = class \"LjavaT/lang/annotation/UnitTest;\";
$r759 = newarray (java.lang.Class)[2];
$r760 = <java.lang.Long: java.lang.Class TYPE>;
$r759[0] = $r760;
$r759[1] = class \"Ljava/util/Set;\";
$r762 = virtualinvoke $r761.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r759);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r762);
$r765 = class \"LjavaT/lang/annotation/UnitTest;\";
$r763 = newarray (java.lang.Class)[2];
$r764 = <java.lang.Character: java.lang.Class TYPE>;
$r763[0] = $r764;
$r763[1] = class \"Ljava/util/Set;\";
$r766 = virtualinvoke $r765.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r763);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r766);
$r769 = class \"LjavaT/lang/annotation/UnitTest;\";
$r767 = newarray (java.lang.Class)[2];
$r768 = <java.lang.Float: java.lang.Class TYPE>;
$r767[0] = $r768;
$r767[1] = class \"Ljava/util/Set;\";
$r770 = virtualinvoke $r769.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r767);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r770);
$r773 = class \"LjavaT/lang/annotation/UnitTest;\";
$r771 = newarray (java.lang.Class)[2];
$r772 = <java.lang.Double: java.lang.Class TYPE>;
$r771[0] = $r772;
$r771[1] = class \"Ljava/util/Set;\";
$r774 = virtualinvoke $r773.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r771);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r774);
$r777 = class \"LjavaT/lang/annotation/UnitTest;\";
$r775 = newarray (java.lang.Class)[2];
$r776 = <java.lang.Boolean: java.lang.Class TYPE>;
$r775[0] = $r776;
$r775[1] = class \"Ljava/util/Set;\";
$r778 = virtualinvoke $r777.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r775);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r778);
$r780 = class \"LjavaT/lang/annotation/UnitTest;\";
$r779 = newarray (java.lang.Class)[2];
$r779[0] = class \"Ljava/lang/String;\";
$r779[1] = class \"Ljava/util/Set;\";
$r781 = virtualinvoke $r780.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r779);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r781);
$r783 = class \"LjavaT/lang/annotation/UnitTest;\";
$r782 = newarray (java.lang.Class)[2];
$r782[0] = class \"Ljava/lang/Class;\";
$r782[1] = class \"Ljava/util/Set;\";
$r784 = virtualinvoke $r783.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r782);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r784);
$r786 = class \"LjavaT/lang/annotation/UnitTest;\";
$r785 = newarray (java.lang.Class)[2];
$r785[0] = class \"Ljava/lang/Enum;\";
$r785[1] = class \"Ljava/util/Set;\";
$r787 = virtualinvoke $r786.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r785);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r787);
$r790 = class \"LjavaT/lang/annotation/UnitTest;\";
$r788 = newarray (java.lang.Class)[2];
$r789 = <java.lang.Byte: java.lang.Class TYPE>;
$r788[0] = $r789;
$r788[1] = class \"Ljava/util/Map;\";
$r791 = virtualinvoke $r790.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r788);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r791);
$r794 = class \"LjavaT/lang/annotation/UnitTest;\";
$r792 = newarray (java.lang.Class)[2];
$r793 = <java.lang.Short: java.lang.Class TYPE>;
$r792[0] = $r793;
$r792[1] = class \"Ljava/util/Map;\";
$r795 = virtualinvoke $r794.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r792);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r795);
$r798 = class \"LjavaT/lang/annotation/UnitTest;\";
$r796 = newarray (java.lang.Class)[2];
$r797 = <java.lang.Integer: java.lang.Class TYPE>;
$r796[0] = $r797;
$r796[1] = class \"Ljava/util/Map;\";
$r799 = virtualinvoke $r798.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r796);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r799);
$r802 = class \"LjavaT/lang/annotation/UnitTest;\";
$r800 = newarray (java.lang.Class)[2];
$r801 = <java.lang.Long: java.lang.Class TYPE>;
$r800[0] = $r801;
$r800[1] = class \"Ljava/util/Map;\";
$r803 = virtualinvoke $r802.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r800);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r803);
$r806 = class \"LjavaT/lang/annotation/UnitTest;\";
$r804 = newarray (java.lang.Class)[2];
$r805 = <java.lang.Character: java.lang.Class TYPE>;
$r804[0] = $r805;
$r804[1] = class \"Ljava/util/Map;\";
$r807 = virtualinvoke $r806.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r804);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r807);
$r810 = class \"LjavaT/lang/annotation/UnitTest;\";
$r808 = newarray (java.lang.Class)[2];
$r809 = <java.lang.Float: java.lang.Class TYPE>;
$r808[0] = $r809;
$r808[1] = class \"Ljava/util/Map;\";
$r811 = virtualinvoke $r810.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r808);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r811);
$r814 = class \"LjavaT/lang/annotation/UnitTest;\";
$r812 = newarray (java.lang.Class)[2];
$r813 = <java.lang.Double: java.lang.Class TYPE>;
$r812[0] = $r813;
$r812[1] = class \"Ljava/util/Map;\";
$r815 = virtualinvoke $r814.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r812);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r815);
$r818 = class \"LjavaT/lang/annotation/UnitTest;\";
$r816 = newarray (java.lang.Class)[2];
$r817 = <java.lang.Boolean: java.lang.Class TYPE>;
$r816[0] = $r817;
$r816[1] = class \"Ljava/util/Map;\";
$r819 = virtualinvoke $r818.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r816);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r819);
$r821 = class \"LjavaT/lang/annotation/UnitTest;\";
$r820 = newarray (java.lang.Class)[2];
$r820[0] = class \"Ljava/lang/String;\";
$r820[1] = class \"Ljava/util/Map;\";
$r822 = virtualinvoke $r821.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r820);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r822);
$r824 = class \"LjavaT/lang/annotation/UnitTest;\";
$r823 = newarray (java.lang.Class)[2];
$r823[0] = class \"Ljava/lang/Class;\";
$r823[1] = class \"Ljava/util/Map;\";
$r825 = virtualinvoke $r824.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r823);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r825);
$r827 = class \"LjavaT/lang/annotation/UnitTest;\";
$r826 = newarray (java.lang.Class)[2];
$r826[0] = class \"Ljava/lang/Enum;\";
$r826[1] = class \"Ljava/util/Map;\";
$r828 = virtualinvoke $r827.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r826);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r828);
$r830 = class \"LjavaT/lang/annotation/UnitTest;\";
$r829 = newarray (java.lang.Class)[1];
$r829[0] = class \"[B\";
$r831 = virtualinvoke $r830.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r829);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r831);
$r833 = class \"LjavaT/lang/annotation/UnitTest;\";
$r832 = newarray (java.lang.Class)[1];
$r832[0] = class \"[S\";
$r834 = virtualinvoke $r833.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r832);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r834);
$r836 = class \"LjavaT/lang/annotation/UnitTest;\";
$r835 = newarray (java.lang.Class)[1];
$r835[0] = class \"[I\";
$r837 = virtualinvoke $r836.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r835);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r837);
$r839 = class \"LjavaT/lang/annotation/UnitTest;\";
$r838 = newarray (java.lang.Class)[1];
$r838[0] = class \"[J\";
$r840 = virtualinvoke $r839.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r838);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r840);
$r842 = class \"LjavaT/lang/annotation/UnitTest;\";
$r841 = newarray (java.lang.Class)[1];
$r841[0] = class \"[C\";
$r843 = virtualinvoke $r842.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r841);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r843);
$r845 = class \"LjavaT/lang/annotation/UnitTest;\";
$r844 = newarray (java.lang.Class)[1];
$r844[0] = class \"[F\";
$r846 = virtualinvoke $r845.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r844);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r846);
$r848 = class \"LjavaT/lang/annotation/UnitTest;\";
$r847 = newarray (java.lang.Class)[1];
$r847[0] = class \"[D\";
$r849 = virtualinvoke $r848.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r847);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r849);
$r851 = class \"LjavaT/lang/annotation/UnitTest;\";
$r850 = newarray (java.lang.Class)[1];
$r850[0] = class \"[Z\";
$r852 = virtualinvoke $r851.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r850);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r852);
$r854 = class \"LjavaT/lang/annotation/UnitTest;\";
$r853 = newarray (java.lang.Class)[1];
$r853[0] = class \"[Ljava/lang/String;\";
$r855 = virtualinvoke $r854.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r853);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r855);
$r857 = class \"LjavaT/lang/annotation/UnitTest;\";
$r856 = newarray (java.lang.Class)[1];
$r856[0] = class \"[Ljava/lang/Class;\";
$r858 = virtualinvoke $r857.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r856);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r858);
$r860 = class \"LjavaT/lang/annotation/UnitTest;\";
$r859 = newarray (java.lang.Class)[1];
$r859[0] = class \"[Ljava/lang/Enum;\";
$r861 = virtualinvoke $r860.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r859);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r861);
$r863 = class \"LjavaT/lang/annotation/UnitTest;\";
$r862 = newarray (java.lang.Class)[2];
$r862[0] = class \"[B\";
$r862[1] = class \"Ljava/util/Set;\";
$r864 = virtualinvoke $r863.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r862);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r864);
$r866 = class \"LjavaT/lang/annotation/UnitTest;\";
$r865 = newarray (java.lang.Class)[2];
$r865[0] = class \"[S\";
$r865[1] = class \"Ljava/util/Set;\";
$r867 = virtualinvoke $r866.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r865);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r867);
$r869 = class \"LjavaT/lang/annotation/UnitTest;\";
$r868 = newarray (java.lang.Class)[2];
$r868[0] = class \"[I\";
$r868[1] = class \"Ljava/util/Set;\";
$r870 = virtualinvoke $r869.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r868);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r870);
$r872 = class \"LjavaT/lang/annotation/UnitTest;\";
$r871 = newarray (java.lang.Class)[2];
$r871[0] = class \"[J\";
$r871[1] = class \"Ljava/util/Set;\";
$r873 = virtualinvoke $r872.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r871);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r873);
$r875 = class \"LjavaT/lang/annotation/UnitTest;\";
$r874 = newarray (java.lang.Class)[2];
$r874[0] = class \"[C\";
$r874[1] = class \"Ljava/util/Set;\";
$r876 = virtualinvoke $r875.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r874);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r876);
$r878 = class \"LjavaT/lang/annotation/UnitTest;\";
$r877 = newarray (java.lang.Class)[2];
$r877[0] = class \"[F\";
$r877[1] = class \"Ljava/util/Set;\";
$r879 = virtualinvoke $r878.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r877);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r879);
$r881 = class \"LjavaT/lang/annotation/UnitTest;\";
$r880 = newarray (java.lang.Class)[2];
$r880[0] = class \"[D\";
$r880[1] = class \"Ljava/util/Set;\";
$r882 = virtualinvoke $r881.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r880);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r882);
$r884 = class \"LjavaT/lang/annotation/UnitTest;\";
$r883 = newarray (java.lang.Class)[2];
$r883[0] = class \"[Z\";
$r883[1] = class \"Ljava/util/Set;\";
$r885 = virtualinvoke $r884.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r883);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r885);
$r887 = class \"LjavaT/lang/annotation/UnitTest;\";
$r886 = newarray (java.lang.Class)[2];
$r886[0] = class \"[Ljava/lang/String;\";
$r886[1] = class \"Ljava/util/Set;\";
$r888 = virtualinvoke $r887.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r886);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r888);
$r890 = class \"LjavaT/lang/annotation/UnitTest;\";
$r889 = newarray (java.lang.Class)[2];
$r889[0] = class \"[Ljava/lang/Class;\";
$r889[1] = class \"Ljava/util/Set;\";
$r891 = virtualinvoke $r890.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r889);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r891);
$r893 = class \"LjavaT/lang/annotation/UnitTest;\";
$r892 = newarray (java.lang.Class)[2];
$r892[0] = class \"[Ljava/lang/Enum;\";
$r892[1] = class \"Ljava/util/Set;\";
$r894 = virtualinvoke $r893.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r892);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r894);
$r896 = class \"LjavaT/lang/annotation/UnitTest;\";
$r895 = newarray (java.lang.Class)[2];
$r895[0] = class \"[B\";
$r895[1] = class \"Ljava/util/Map;\";
$r897 = virtualinvoke $r896.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r895);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r897);
$r899 = class \"LjavaT/lang/annotation/UnitTest;\";
$r898 = newarray (java.lang.Class)[2];
$r898[0] = class \"[S\";
$r898[1] = class \"Ljava/util/Map;\";
$r900 = virtualinvoke $r899.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r898);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r900);
$r902 = class \"LjavaT/lang/annotation/UnitTest;\";
$r901 = newarray (java.lang.Class)[2];
$r901[0] = class \"[I\";
$r901[1] = class \"Ljava/util/Map;\";
$r903 = virtualinvoke $r902.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r901);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r903);
$r905 = class \"LjavaT/lang/annotation/UnitTest;\";
$r904 = newarray (java.lang.Class)[2];
$r904[0] = class \"[J\";
$r904[1] = class \"Ljava/util/Map;\";
$r906 = virtualinvoke $r905.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r904);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r906);
$r908 = class \"LjavaT/lang/annotation/UnitTest;\";
$r907 = newarray (java.lang.Class)[2];
$r907[0] = class \"[C\";
$r907[1] = class \"Ljava/util/Map;\";
$r909 = virtualinvoke $r908.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r907);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r909);
$r911 = class \"LjavaT/lang/annotation/UnitTest;\";
$r910 = newarray (java.lang.Class)[2];
$r910[0] = class \"[F\";
$r910[1] = class \"Ljava/util/Map;\";
$r912 = virtualinvoke $r911.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r910);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r912);
$r914 = class \"LjavaT/lang/annotation/UnitTest;\";
$r913 = newarray (java.lang.Class)[2];
$r913[0] = class \"[D\";
$r913[1] = class \"Ljava/util/Map;\";
$r915 = virtualinvoke $r914.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r913);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r915);
$r917 = class \"LjavaT/lang/annotation/UnitTest;\";
$r916 = newarray (java.lang.Class)[2];
$r916[0] = class \"[Z\";
$r916[1] = class \"Ljava/util/Map;\";
$r918 = virtualinvoke $r917.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r916);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r918);
$r920 = class \"LjavaT/lang/annotation/UnitTest;\";
$r919 = newarray (java.lang.Class)[2];
$r919[0] = class \"[Ljava/lang/String;\";
$r919[1] = class \"Ljava/util/Map;\";
$r921 = virtualinvoke $r920.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r919);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r921);
$r923 = class \"LjavaT/lang/annotation/UnitTest;\";
$r922 = newarray (java.lang.Class)[2];
$r922[0] = class \"[Ljava/lang/Class;\";
$r922[1] = class \"Ljava/util/Map;\";
$r924 = virtualinvoke $r923.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r922);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r924);
$r926 = class \"LjavaT/lang/annotation/UnitTest;\";
$r925 = newarray (java.lang.Class)[2];
$r925[0] = class \"[Ljava/lang/Enum;\";
$r925[1] = class \"Ljava/util/Map;\";
$r927 = virtualinvoke $r926.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r925);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r927);
$r929 = class \"LjavaT/lang/annotation/UnitTest;\";
$r928 = newarray (java.lang.Class)[2];
$r928[0] = class \"[B\";
$r928[1] = class \"Ljava/util/List;\";
$r930 = virtualinvoke $r929.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r928);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r930);
$r932 = class \"LjavaT/lang/annotation/UnitTest;\";
$r931 = newarray (java.lang.Class)[2];
$r931[0] = class \"[S\";
$r931[1] = class \"Ljava/util/List;\";
$r933 = virtualinvoke $r932.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r931);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r933);
$r935 = class \"LjavaT/lang/annotation/UnitTest;\";
$r934 = newarray (java.lang.Class)[2];
$r934[0] = class \"[I\";
$r934[1] = class \"Ljava/util/List;\";
$r936 = virtualinvoke $r935.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r934);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r936);
$r938 = class \"LjavaT/lang/annotation/UnitTest;\";
$r937 = newarray (java.lang.Class)[2];
$r937[0] = class \"[J\";
$r937[1] = class \"Ljava/util/List;\";
$r939 = virtualinvoke $r938.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r937);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r939);
$r941 = class \"LjavaT/lang/annotation/UnitTest;\";
$r940 = newarray (java.lang.Class)[2];
$r940[0] = class \"[C\";
$r940[1] = class \"Ljava/util/List;\";
$r942 = virtualinvoke $r941.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r940);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r942);
$r944 = class \"LjavaT/lang/annotation/UnitTest;\";
$r943 = newarray (java.lang.Class)[2];
$r943[0] = class \"[F\";
$r943[1] = class \"Ljava/util/List;\";
$r945 = virtualinvoke $r944.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r943);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r945);
$r947 = class \"LjavaT/lang/annotation/UnitTest;\";
$r946 = newarray (java.lang.Class)[2];
$r946[0] = class \"[D\";
$r946[1] = class \"Ljava/util/List;\";
$r948 = virtualinvoke $r947.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r946);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r948);
$r950 = class \"LjavaT/lang/annotation/UnitTest;\";
$r949 = newarray (java.lang.Class)[2];
$r949[0] = class \"[Z\";
$r949[1] = class \"Ljava/util/List;\";
$r951 = virtualinvoke $r950.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r949);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r951);
$r953 = class \"LjavaT/lang/annotation/UnitTest;\";
$r952 = newarray (java.lang.Class)[2];
$r952[0] = class \"[Ljava/lang/String;\";
$r952[1] = class \"Ljava/util/List;\";
$r954 = virtualinvoke $r953.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r952);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r954);
$r956 = class \"LjavaT/lang/annotation/UnitTest;\";
$r955 = newarray (java.lang.Class)[2];
$r955[0] = class \"[Ljava/lang/Class;\";
$r955[1] = class \"Ljava/util/List;\";
$r957 = virtualinvoke $r956.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r955);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r957);
$r959 = class \"LjavaT/lang/annotation/UnitTest;\";
$r958 = newarray (java.lang.Class)[2];
$r958[0] = class \"[Ljava/lang/Enum;\";
$r958[1] = class \"Ljava/util/List;\";
$r960 = virtualinvoke $r959.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r958);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r960);
$r962 = class \"LjavaT/lang/annotation/UnitTest;\";
$r961 = newarray (java.lang.Class)[2];
$r961[0] = class \"[B\";
$r961[1] = class \"Ljava/util/Collection;\";
$r963 = virtualinvoke $r962.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r961);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r963);
$r965 = class \"LjavaT/lang/annotation/UnitTest;\";
$r964 = newarray (java.lang.Class)[2];
$r964[0] = class \"[S\";
$r964[1] = class \"Ljava/util/Collection;\";
$r966 = virtualinvoke $r965.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r964);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r966);
$r968 = class \"LjavaT/lang/annotation/UnitTest;\";
$r967 = newarray (java.lang.Class)[2];
$r967[0] = class \"[I\";
$r967[1] = class \"Ljava/util/Collection;\";
$r969 = virtualinvoke $r968.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r967);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r969);
$r971 = class \"LjavaT/lang/annotation/UnitTest;\";
$r970 = newarray (java.lang.Class)[2];
$r970[0] = class \"[J\";
$r970[1] = class \"Ljava/util/Collection;\";
$r972 = virtualinvoke $r971.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r970);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r972);
$r974 = class \"LjavaT/lang/annotation/UnitTest;\";
$r973 = newarray (java.lang.Class)[2];
$r973[0] = class \"[C\";
$r973[1] = class \"Ljava/util/Collection;\";
$r975 = virtualinvoke $r974.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r973);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r975);
$r977 = class \"LjavaT/lang/annotation/UnitTest;\";
$r976 = newarray (java.lang.Class)[2];
$r976[0] = class \"[F\";
$r976[1] = class \"Ljava/util/Collection;\";
$r978 = virtualinvoke $r977.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r976);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r978);
$r980 = class \"LjavaT/lang/annotation/UnitTest;\";
$r979 = newarray (java.lang.Class)[2];
$r979[0] = class \"[D\";
$r979[1] = class \"Ljava/util/Collection;\";
$r981 = virtualinvoke $r980.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r979);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r981);
$r983 = class \"LjavaT/lang/annotation/UnitTest;\";
$r982 = newarray (java.lang.Class)[2];
$r982[0] = class \"[Z\";
$r982[1] = class \"Ljava/util/Collection;\";
$r984 = virtualinvoke $r983.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r982);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r984);
$r986 = class \"LjavaT/lang/annotation/UnitTest;\";
$r985 = newarray (java.lang.Class)[2];
$r985[0] = class \"[Ljava/lang/String;\";
$r985[1] = class \"Ljava/util/Collection;\";
$r987 = virtualinvoke $r986.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r985);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r987);
$r989 = class \"LjavaT/lang/annotation/UnitTest;\";
$r988 = newarray (java.lang.Class)[2];
$r988[0] = class \"[Ljava/lang/Class;\";
$r988[1] = class \"Ljava/util/Collection;\";
$r990 = virtualinvoke $r989.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r988);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r990);
$r992 = class \"LjavaT/lang/annotation/UnitTest;\";
$r991 = newarray (java.lang.Class)[2];
$r991[0] = class \"[Ljava/lang/Enum;\";
$r991[1] = class \"Ljava/util/Collection;\";
$r993 = virtualinvoke $r992.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r991);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r993);
$r995 = class \"LjavaT/lang/annotation/UnitTest;\";
$r994 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r996 = virtualinvoke $r995.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesParam\", $r994);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesParam(java.lang.reflect.Method)>($r996);
$r998 = class \"LjavaT/lang/annotation/UnitTest;\";
$r997 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r999 = virtualinvoke $r998.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultParam\", $r997);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefaultParam(java.lang.reflect.Method)>($r999);
$r1001 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1000 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1002 = virtualinvoke $r1001.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultParam\", $r1000);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1002);
$r1004 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1003 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1005 = virtualinvoke $r1004.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesParam\", $r1003);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0Param(java.lang.reflect.Method)>($r1005);
$r1007 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1006 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1008 = virtualinvoke $r1007.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesParam\", $r1006);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1Param(java.lang.reflect.Method)>($r1008);
$r1010 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1009 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1011 = virtualinvoke $r1010.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesParam\", $r1009);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2Param(java.lang.reflect.Method)>($r1011);
$r1013 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1012 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1014 = virtualinvoke $r1013.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultParam\", $r1012);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1014);
$r1016 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1015 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1017 = virtualinvoke $r1016.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultParam\", $r1015);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefaultParam(java.lang.reflect.Method)>($r1017);
$r1019 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1018 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1020 = virtualinvoke $r1019.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerParam\", $r1018);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarkerParam(java.lang.reflect.Method)>($r1020);
$r1022 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1021 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1023 = virtualinvoke $r1022.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteParam\", $r1021);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteParam(java.lang.reflect.Method)>($r1023);
$r1025 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1024 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1026 = virtualinvoke $r1025.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortParam\", $r1024);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortParam(java.lang.reflect.Method)>($r1026);
$r1028 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1027 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1029 = virtualinvoke $r1028.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntParam\", $r1027);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntParam(java.lang.reflect.Method)>($r1029);
$r1031 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1030 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1032 = virtualinvoke $r1031.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongParam\", $r1030);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongParam(java.lang.reflect.Method)>($r1032);
$r1034 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1033 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1035 = virtualinvoke $r1034.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharParam\", $r1033);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharParam(java.lang.reflect.Method)>($r1035);
$r1037 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1036 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1038 = virtualinvoke $r1037.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatParam\", $r1036);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatParam(java.lang.reflect.Method)>($r1038);
$r1040 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1039 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1041 = virtualinvoke $r1040.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleParam\", $r1039);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleParam(java.lang.reflect.Method)>($r1041);
$r1043 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1042 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1044 = virtualinvoke $r1043.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanParam\", $r1042);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanParam(java.lang.reflect.Method)>($r1044);
$r1046 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1045 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1047 = virtualinvoke $r1046.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringParam\", $r1045);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringParam(java.lang.reflect.Method)>($r1047);
$r1049 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1048 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1050 = virtualinvoke $r1049.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassParam\", $r1048);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassParam(java.lang.reflect.Method)>($r1050);
$r1052 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1051 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1053 = virtualinvoke $r1052.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumParam\", $r1051);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumParam(java.lang.reflect.Method)>($r1053);
$r1055 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1054 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1056 = virtualinvoke $r1055.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDefParam\", $r1054);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDefParam(java.lang.reflect.Method)>($r1056);
$r1058 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1057 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1059 = virtualinvoke $r1058.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDefParam\", $r1057);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDefParam(java.lang.reflect.Method)>($r1059);
$r1061 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1060 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1062 = virtualinvoke $r1061.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDefParam\", $r1060);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDefParam(java.lang.reflect.Method)>($r1062);
$r1064 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1063 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1065 = virtualinvoke $r1064.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDefParam\", $r1063);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDefParam(java.lang.reflect.Method)>($r1065);
$r1067 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1066 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1068 = virtualinvoke $r1067.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDefParam\", $r1066);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDefParam(java.lang.reflect.Method)>($r1068);
$r1070 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1069 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1071 = virtualinvoke $r1070.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDefParam\", $r1069);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDefParam(java.lang.reflect.Method)>($r1071);
$r1073 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1072 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1074 = virtualinvoke $r1073.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDefParam\", $r1072);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDefParam(java.lang.reflect.Method)>($r1074);
$r1076 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1075 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1077 = virtualinvoke $r1076.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDefParam\", $r1075);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDefParam(java.lang.reflect.Method)>($r1077);
$r1079 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1078 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1080 = virtualinvoke $r1079.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDefParam\", $r1078);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDefParam(java.lang.reflect.Method)>($r1080);
$r1082 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1081 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1083 = virtualinvoke $r1082.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDefParam\", $r1081);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDefParam(java.lang.reflect.Method)>($r1083);
$r1085 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1084 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1086 = virtualinvoke $r1085.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDefParam\", $r1084);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDefParam(java.lang.reflect.Method)>($r1086);
$r1088 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1087 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1089 = virtualinvoke $r1088.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDefParam\", $r1087);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDefParam(java.lang.reflect.Method)>($r1089);
$r1091 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1090 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1092 = virtualinvoke $r1091.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDefParam\", $r1090);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDefParam(java.lang.reflect.Method)>($r1092);
$r1094 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1093 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1095 = virtualinvoke $r1094.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDefParam\", $r1093);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDefParam(java.lang.reflect.Method)>($r1095);
$r1097 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1096 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1098 = virtualinvoke $r1097.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDefParam\", $r1096);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDefParam(java.lang.reflect.Method)>($r1098);
$r1100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1099 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1101 = virtualinvoke $r1100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDefParam\", $r1099);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDefParam(java.lang.reflect.Method)>($r1101);
$r1103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1104 = virtualinvoke $r1103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDefParam\", $r1102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDefParam(java.lang.reflect.Method)>($r1104);
$r1106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1107 = virtualinvoke $r1106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDefParam\", $r1105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDefParam(java.lang.reflect.Method)>($r1107);
$r1109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1110 = virtualinvoke $r1109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDefParam\", $r1108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDefParam(java.lang.reflect.Method)>($r1110);
$r1112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1113 = virtualinvoke $r1112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDefParam\", $r1111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDefParam(java.lang.reflect.Method)>($r1113);
$r1115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1116 = virtualinvoke $r1115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDefParam\", $r1114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDefParam(java.lang.reflect.Method)>($r1116);
$r1118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1119 = virtualinvoke $r1118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDefParam\", $r1117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDefParam(java.lang.reflect.Method)>($r1119);
$r1121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1122 = virtualinvoke $r1121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmptyParam\", $r1120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmptyParam(java.lang.reflect.Method)>($r1122);
$r1124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1125 = virtualinvoke $r1124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmptyParam\", $r1123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmptyParam(java.lang.reflect.Method)>($r1125);
$r1127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1128 = virtualinvoke $r1127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmptyParam\", $r1126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmptyParam(java.lang.reflect.Method)>($r1128);
$r1130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1131 = virtualinvoke $r1130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmptyParam\", $r1129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmptyParam(java.lang.reflect.Method)>($r1131);
$r1133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1134 = virtualinvoke $r1133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmptyParam\", $r1132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmptyParam(java.lang.reflect.Method)>($r1134);
$r1136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1137 = virtualinvoke $r1136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmptyParam\", $r1135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmptyParam(java.lang.reflect.Method)>($r1137);
$r1139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1140 = virtualinvoke $r1139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmptyParam\", $r1138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmptyParam(java.lang.reflect.Method)>($r1140);
$r1142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1143 = virtualinvoke $r1142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmptyParam\", $r1141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmptyParam(java.lang.reflect.Method)>($r1143);
$r1145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1146 = virtualinvoke $r1145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmptyParam\", $r1144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmptyParam(java.lang.reflect.Method)>($r1146);
$r1148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1149 = virtualinvoke $r1148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmptyParam\", $r1147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmptyParam(java.lang.reflect.Method)>($r1149);
$r1151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1152 = virtualinvoke $r1151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmptyParam\", $r1150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmptyParam(java.lang.reflect.Method)>($r1152);
$r1154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1155 = virtualinvoke $r1154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOneParam\", $r1153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOneParam(java.lang.reflect.Method)>($r1155);
$r1157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1158 = virtualinvoke $r1157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOneParam\", $r1156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOneParam(java.lang.reflect.Method)>($r1158);
$r1160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1161 = virtualinvoke $r1160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOneParam\", $r1159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOneParam(java.lang.reflect.Method)>($r1161);
$r1163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1164 = virtualinvoke $r1163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOneParam\", $r1162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOneParam(java.lang.reflect.Method)>($r1164);
$r1166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1167 = virtualinvoke $r1166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOneParam\", $r1165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOneParam(java.lang.reflect.Method)>($r1167);
$r1169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1170 = virtualinvoke $r1169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOneParam\", $r1168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOneParam(java.lang.reflect.Method)>($r1170);
$r1172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1173 = virtualinvoke $r1172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOneParam\", $r1171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOneParam(java.lang.reflect.Method)>($r1173);
$r1175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1176 = virtualinvoke $r1175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOneParam\", $r1174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOneParam(java.lang.reflect.Method)>($r1176);
$r1178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1179 = virtualinvoke $r1178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOneParam\", $r1177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOneParam(java.lang.reflect.Method)>($r1179);
$r1181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1182 = virtualinvoke $r1181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOneParam\", $r1180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOneParam(java.lang.reflect.Method)>($r1182);
$r1184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1185 = virtualinvoke $r1184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOneParam\", $r1183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOneParam(java.lang.reflect.Method)>($r1185);
$r1187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1188 = virtualinvoke $r1187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwoParam\", $r1186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwoParam(java.lang.reflect.Method)>($r1188);
$r1190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1191 = virtualinvoke $r1190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwoParam\", $r1189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwoParam(java.lang.reflect.Method)>($r1191);
$r1193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1194 = virtualinvoke $r1193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwoParam\", $r1192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwoParam(java.lang.reflect.Method)>($r1194);
$r1196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1197 = virtualinvoke $r1196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwoParam\", $r1195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwoParam(java.lang.reflect.Method)>($r1197);
$r1199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1200 = virtualinvoke $r1199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwoParam\", $r1198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwoParam(java.lang.reflect.Method)>($r1200);
$r1202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1203 = virtualinvoke $r1202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwoParam\", $r1201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwoParam(java.lang.reflect.Method)>($r1203);
$r1205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1206 = virtualinvoke $r1205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwoParam\", $r1204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwoParam(java.lang.reflect.Method)>($r1206);
$r1208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1209 = virtualinvoke $r1208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwoParam\", $r1207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwoParam(java.lang.reflect.Method)>($r1209);
$r1211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1212 = virtualinvoke $r1211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwoParam\", $r1210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwoParam(java.lang.reflect.Method)>($r1212);
$r1214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1215 = virtualinvoke $r1214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwoParam\", $r1213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwoParam(java.lang.reflect.Method)>($r1215);
$r1217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1218 = virtualinvoke $r1217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwoParam\", $r1216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwoParam(java.lang.reflect.Method)>($r1218);
$r1220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1221 = virtualinvoke $r1220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDefParam\", $r1219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDefParam(java.lang.reflect.Method)>($r1221);
$r1223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1224 = virtualinvoke $r1223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDefParam\", $r1222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDefParam(java.lang.reflect.Method)>($r1224);
$r1226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1227 = virtualinvoke $r1226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDefParam\", $r1225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDefParam(java.lang.reflect.Method)>($r1227);
$r1229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1230 = virtualinvoke $r1229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDefParam\", $r1228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDefParam(java.lang.reflect.Method)>($r1230);
$r1232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1233 = virtualinvoke $r1232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDefParam\", $r1231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDefParam(java.lang.reflect.Method)>($r1233);
$r1235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1236 = virtualinvoke $r1235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDefParam\", $r1234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDefParam(java.lang.reflect.Method)>($r1236);
$r1238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1239 = virtualinvoke $r1238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDefParam\", $r1237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDefParam(java.lang.reflect.Method)>($r1239);
$r1241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1242 = virtualinvoke $r1241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDefParam\", $r1240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDefParam(java.lang.reflect.Method)>($r1242);
$r1244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1245 = virtualinvoke $r1244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDefParam\", $r1243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDefParam(java.lang.reflect.Method)>($r1245);
$r1247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1248 = virtualinvoke $r1247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDefParam\", $r1246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDefParam(java.lang.reflect.Method)>($r1248);
$r1250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1251 = virtualinvoke $r1250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDefParam\", $r1249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDefParam(java.lang.reflect.Method)>($r1251);
$r1253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1254 = virtualinvoke $r1253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDefParam\", $r1252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDefParam(java.lang.reflect.Method)>($r1254);
$r1256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1257 = virtualinvoke $r1256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDefParam\", $r1255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDefParam(java.lang.reflect.Method)>($r1257);
$r1259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1260 = virtualinvoke $r1259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDefParam\", $r1258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDefParam(java.lang.reflect.Method)>($r1260);
$r1262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1263 = virtualinvoke $r1262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDefParam\", $r1261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDefParam(java.lang.reflect.Method)>($r1263);
$r1265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1266 = virtualinvoke $r1265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDefParam\", $r1264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDefParam(java.lang.reflect.Method)>($r1266);
$r1268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1269 = virtualinvoke $r1268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDefParam\", $r1267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDefParam(java.lang.reflect.Method)>($r1269);
$r1271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1272 = virtualinvoke $r1271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDefParam\", $r1270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDefParam(java.lang.reflect.Method)>($r1272);
$r1274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1275 = virtualinvoke $r1274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDefParam\", $r1273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDefParam(java.lang.reflect.Method)>($r1275);
$r1277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1278 = virtualinvoke $r1277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDefParam\", $r1276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDefParam(java.lang.reflect.Method)>($r1278);
$r1280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1281 = virtualinvoke $r1280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDefParam\", $r1279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDefParam(java.lang.reflect.Method)>($r1281);
$r1283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1284 = virtualinvoke $r1283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDefParam\", $r1282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDefParam(java.lang.reflect.Method)>($r1284);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/markerClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\");
$r1285 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1286 = virtualinvoke $r1285.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", $r1286, class \"LjavaT/lang/annotation/ScalarTypes;\");
$r1287 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1288 = virtualinvoke $r1287.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1288, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1290 = virtualinvoke $r1289.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1290, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1292 = virtualinvoke $r1291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1292, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1294 = virtualinvoke $r1293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1294, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1296 = virtualinvoke $r1295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1296, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1298 = virtualinvoke $r1297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1298, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1300 = virtualinvoke $r1299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1300, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1302 = virtualinvoke $r1301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", $r1302, class \"LjavaT/lang/annotation/Marker;\");
$r1303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1304 = virtualinvoke $r1303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", $r1304, class \"LjavaT/lang/annotation/SingleMemberByte;\");
$r1305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1306 = virtualinvoke $r1305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", $r1306, class \"LjavaT/lang/annotation/SingleMemberShort;\");
$r1307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1308 = virtualinvoke $r1307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", $r1308, class \"LjavaT/lang/annotation/SingleMemberInt;\");
$r1309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1310 = virtualinvoke $r1309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", $r1310, class \"LjavaT/lang/annotation/SingleMemberLong;\");
$r1311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1312 = virtualinvoke $r1311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", $r1312, class \"LjavaT/lang/annotation/SingleMemberChar;\");
$r1313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1314 = virtualinvoke $r1313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", $r1314, class \"LjavaT/lang/annotation/SingleMemberFloat;\");
$r1315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1316 = virtualinvoke $r1315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", $r1316, class \"LjavaT/lang/annotation/SingleMemberDouble;\");
$r1317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1318 = virtualinvoke $r1317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", $r1318, class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
$r1319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1320 = virtualinvoke $r1319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", $r1320, class \"LjavaT/lang/annotation/SingleMemberString;\");
$r1321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1322 = virtualinvoke $r1321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", $r1322, class \"LjavaT/lang/annotation/SingleMemberClass;\");
$r1323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1324 = virtualinvoke $r1323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", $r1324, class \"LjavaT/lang/annotation/SingleMemberEnum;\");
$r1325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1326 = virtualinvoke $r1325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1326, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1328 = virtualinvoke $r1327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1328, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1330 = virtualinvoke $r1329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1330, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1332 = virtualinvoke $r1331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1332, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1334 = virtualinvoke $r1333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1334, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1336 = virtualinvoke $r1335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1336, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1338 = virtualinvoke $r1337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1338, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1340 = virtualinvoke $r1339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1340, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1342 = virtualinvoke $r1341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1342, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1344 = virtualinvoke $r1343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1344, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1346 = virtualinvoke $r1345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1346, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1348 = virtualinvoke $r1347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1348, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1350 = virtualinvoke $r1349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1350, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1352 = virtualinvoke $r1351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1352, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1354 = virtualinvoke $r1353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1354, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1356 = virtualinvoke $r1355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1356, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1358 = virtualinvoke $r1357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1358, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1360 = virtualinvoke $r1359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1360, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1362 = virtualinvoke $r1361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1362, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1364 = virtualinvoke $r1363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1364, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1366 = virtualinvoke $r1365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1366, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1368 = virtualinvoke $r1367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1368, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1370 = virtualinvoke $r1369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1370, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1372 = virtualinvoke $r1371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1372, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1374 = virtualinvoke $r1373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1374, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1376 = virtualinvoke $r1375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1376, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1378 = virtualinvoke $r1377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1378, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1380 = virtualinvoke $r1379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1380, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1382 = virtualinvoke $r1381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1382, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1384 = virtualinvoke $r1383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1384, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1386 = virtualinvoke $r1385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1386, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1388 = virtualinvoke $r1387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1388, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1390 = virtualinvoke $r1389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1390, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1392 = virtualinvoke $r1391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1392, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1394 = virtualinvoke $r1393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1394, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1396 = virtualinvoke $r1395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1396, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1398 = virtualinvoke $r1397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1398, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1400 = virtualinvoke $r1399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1400, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1402 = virtualinvoke $r1401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1402, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1404 = virtualinvoke $r1403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1404, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1406 = virtualinvoke $r1405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1406, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1408 = virtualinvoke $r1407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1408, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1410 = virtualinvoke $r1409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1410, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1412 = virtualinvoke $r1411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1412, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1414 = virtualinvoke $r1413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1414, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1416 = virtualinvoke $r1415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1416, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1418 = virtualinvoke $r1417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1418, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1420 = virtualinvoke $r1419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1420, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1422 = virtualinvoke $r1421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1422, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1424 = virtualinvoke $r1423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1424, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1426 = virtualinvoke $r1425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1426, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1428 = virtualinvoke $r1427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1428, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1430 = virtualinvoke $r1429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1430, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1432 = virtualinvoke $r1431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1432, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1434 = virtualinvoke $r1433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1434, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1436 = virtualinvoke $r1435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1436, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1438 = virtualinvoke $r1437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1438, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1440 = virtualinvoke $r1439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1440, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1442 = virtualinvoke $r1441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1442, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1444 = virtualinvoke $r1443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1444, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1446 = virtualinvoke $r1445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1446, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1448 = virtualinvoke $r1447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1448, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1450 = virtualinvoke $r1449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1450, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1452 = virtualinvoke $r1451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1452, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1454 = virtualinvoke $r1453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1454, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1456 = virtualinvoke $r1455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1456, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1458 = virtualinvoke $r1457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1458, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1460 = virtualinvoke $r1459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1460, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1462 = virtualinvoke $r1461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1462, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1464 = virtualinvoke $r1463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1464, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1466 = virtualinvoke $r1465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1466, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1468 = virtualinvoke $r1467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1468, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1470 = virtualinvoke $r1469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1470, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1472 = virtualinvoke $r1471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1472, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1474 = virtualinvoke $r1473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1474, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1476 = virtualinvoke $r1475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1476, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1478 = virtualinvoke $r1477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1478, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1480 = virtualinvoke $r1479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1480, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1482 = virtualinvoke $r1481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1482, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1484 = virtualinvoke $r1483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1484, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1485 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1486 = virtualinvoke $r1485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1486, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1487 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1488 = virtualinvoke $r1487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1488, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1489 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1490 = virtualinvoke $r1489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1490, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1491 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1492 = virtualinvoke $r1491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1492, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1493 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1494 = virtualinvoke $r1493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1494, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1495 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1496 = virtualinvoke $r1495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1496, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1497 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1498 = virtualinvoke $r1497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1498, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1499 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1500 = virtualinvoke $r1499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1500, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1501 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1502 = virtualinvoke $r1501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1502, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1503 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1504 = virtualinvoke $r1503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1504, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1505 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1506 = virtualinvoke $r1505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1506, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1507 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1508 = virtualinvoke $r1507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1508, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1509 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1510 = virtualinvoke $r1509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1510, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1511 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1512 = virtualinvoke $r1511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1512, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1513 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1514 = virtualinvoke $r1513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1514, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1515 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1516 = virtualinvoke $r1515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1516, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1517 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1518 = virtualinvoke $r1517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1518, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1519 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1520 = virtualinvoke $r1519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1520, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1521 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1522 = virtualinvoke $r1521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1522, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1523 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1524 = virtualinvoke $r1523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1524, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1525 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1526 = virtualinvoke $r1525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1526, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1527 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1528 = virtualinvoke $r1527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1528, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1529 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1530 = virtualinvoke $r1529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1530, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1531 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1532 = virtualinvoke $r1531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1532, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1533 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1534 = virtualinvoke $r1533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1534, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1535 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1536 = virtualinvoke $r1535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1536, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1537 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1538 = virtualinvoke $r1537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1538, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1539 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1540 = virtualinvoke $r1539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1540, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1541 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1542 = virtualinvoke $r1541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1542, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1543 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1544 = virtualinvoke $r1543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1544, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1545 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1546 = virtualinvoke $r1545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1546, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1547 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1548 = virtualinvoke $r1547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1548, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1549 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1550 = virtualinvoke $r1549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1550, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1551 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1552 = virtualinvoke $r1551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1552, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1553 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1554 = virtualinvoke $r1553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1554, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1555 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1556 = virtualinvoke $r1555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1556, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1557 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1558 = virtualinvoke $r1557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1558, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1559 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1560 = virtualinvoke $r1559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1560, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1561 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1562 = virtualinvoke $r1561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1562, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1563 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1564 = virtualinvoke $r1563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1564, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1565 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1566 = virtualinvoke $r1565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1566, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1567 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1568 = virtualinvoke $r1567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1568, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1569 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1570 = virtualinvoke $r1569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1570, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1571 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1572 = virtualinvoke $r1571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1572, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1573 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1574 = virtualinvoke $r1573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1574, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1575 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1576 = virtualinvoke $r1575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1576, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1577 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1578 = virtualinvoke $r1577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1578, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1579 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1580 = virtualinvoke $r1579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1580, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1581 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1582 = virtualinvoke $r1581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1582, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1583 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1584 = virtualinvoke $r1583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1584, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1585 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1586 = virtualinvoke $r1585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1586, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1587 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1588 = virtualinvoke $r1587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1588, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1589 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1590 = virtualinvoke $r1589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1590, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1591 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1592 = virtualinvoke $r1591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1592, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1593 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1594 = virtualinvoke $r1593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1594, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1595 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1596 = virtualinvoke $r1595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1596, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1597 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1598 = virtualinvoke $r1597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1598, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1599 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1600 = virtualinvoke $r1599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1600, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1601 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1602 = virtualinvoke $r1601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1602, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1603 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1604 = virtualinvoke $r1603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1604, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1605 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1606 = virtualinvoke $r1605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1606, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1607 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1608 = virtualinvoke $r1607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1608, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1609 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1610 = virtualinvoke $r1609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1610, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1611 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1612 = virtualinvoke $r1611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1612, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1613 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1614 = virtualinvoke $r1613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1614, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1615 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1616 = virtualinvoke $r1615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1616, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1617 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1618 = virtualinvoke $r1617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1618, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1619 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1620 = virtualinvoke $r1619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1620, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1621 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1622 = virtualinvoke $r1621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1622, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1623 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1624 = virtualinvoke $r1623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1624, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1625 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1626 = virtualinvoke $r1625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1626, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1627 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1628 = virtualinvoke $r1627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1628, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1629 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1630 = virtualinvoke $r1629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1630, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1631 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1632 = virtualinvoke $r1631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1632, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1633 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1634 = virtualinvoke $r1633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1634, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1635 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1636 = virtualinvoke $r1635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1636, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1637 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1638 = virtualinvoke $r1637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1638, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1639 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1640 = virtualinvoke $r1639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1640, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1641 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1642 = virtualinvoke $r1641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1642, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1643 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1644 = virtualinvoke $r1643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1644, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1645 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1646 = virtualinvoke $r1645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1646, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", class \"LjavaT/lang/annotation/ScalarTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", class \"LjavaT/lang/annotation/Marker;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", class \"LjavaT/lang/annotation/SingleMemberByte;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", class \"LjavaT/lang/annotation/SingleMemberShort;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", class \"LjavaT/lang/annotation/SingleMemberInt;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", class \"LjavaT/lang/annotation/SingleMemberLong;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", class \"LjavaT/lang/annotation/SingleMemberChar;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", class \"LjavaT/lang/annotation/SingleMemberFloat;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", class \"LjavaT/lang/annotation/SingleMemberDouble;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", class \"LjavaT/lang/annotation/SingleMemberString;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", class \"LjavaT/lang/annotation/SingleMemberClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", class \"LjavaT/lang/annotation/SingleMemberEnum;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 1, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 0, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 0, 1);
$r1648 = <java.lang.System: java.io.PrintStream out>;
$r1647 = new java.lang.StringBuilder;
specialinvoke $r1647.<java.lang.StringBuilder: void <init>()>();
$r1649 = virtualinvoke $r1647.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$i0 = <javaT.lang.'annotation'.UnitTest: int numTests>;
$r1650 = virtualinvoke $r1649.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r1651 = virtualinvoke $r1650.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests completed\");
$r1652 = virtualinvoke $r1651.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1648.<java.io.PrintStream: void println(java.lang.String)>($r1652);
$i1 = <javaT.lang.'annotation'.UnitTest: int failCount>;
if $i1 == 0 goto $r1653 = <java.lang.System: java.io.PrintStream out>;
"->"Block 1:
[preds: 0 ] [succs: ]
$r1654 = new java.lang.Exception;
$r1655 = new java.lang.StringBuilder;
specialinvoke $r1655.<java.lang.StringBuilder: void <init>()>();
$r1656 = virtualinvoke $r1655.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Failure count: \");
$i2 = <javaT.lang.'annotation'.UnitTest: int failCount>;
$r1657 = virtualinvoke $r1656.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r1658 = virtualinvoke $r1657.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1654.<java.lang.Exception: void <init>(java.lang.String)>($r1658);
throw $r1654;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1659 := @parameter0: java.lang.String[];
$r1 = class \"LjavaT/lang/annotation/UnitTest;\";
$r0 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesMethod\", $r0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r2);
$r4 = class \"LjavaT/lang/annotation/UnitTest;\";
$r3 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultMethod\", $r3);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r5);
$r7 = class \"LjavaT/lang/annotation/UnitTest;\";
$r6 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultMethod\", $r6);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r8);
$r10 = class \"LjavaT/lang/annotation/UnitTest;\";
$r9 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesMethod\", $r9);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r11);
$r13 = class \"LjavaT/lang/annotation/UnitTest;\";
$r12 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesMethod\", $r12);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r14);
$r16 = class \"LjavaT/lang/annotation/UnitTest;\";
$r15 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r17 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesMethod\", $r15);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r17);
$r19 = class \"LjavaT/lang/annotation/UnitTest;\";
$r18 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r20 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultMethod\", $r18);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r20);
$r22 = class \"LjavaT/lang/annotation/UnitTest;\";
$r21 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r23 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultMethod\", $r21);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r23);
$r25 = class \"LjavaT/lang/annotation/UnitTest;\";
$r24 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerMethod\", $r24);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r26);
$r28 = class \"LjavaT/lang/annotation/UnitTest;\";
$r27 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r29 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByte\", $r27);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r29);
$r31 = class \"LjavaT/lang/annotation/UnitTest;\";
$r30 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r32 = virtualinvoke $r31.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShort\", $r30);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r32);
$r34 = class \"LjavaT/lang/annotation/UnitTest;\";
$r33 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r35 = virtualinvoke $r34.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberInt\", $r33);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r35);
$r37 = class \"LjavaT/lang/annotation/UnitTest;\";
$r36 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r38 = virtualinvoke $r37.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLong\", $r36);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r38);
$r40 = class \"LjavaT/lang/annotation/UnitTest;\";
$r39 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r41 = virtualinvoke $r40.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberChar\", $r39);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r41);
$r43 = class \"LjavaT/lang/annotation/UnitTest;\";
$r42 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r44 = virtualinvoke $r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloat\", $r42);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r44);
$r46 = class \"LjavaT/lang/annotation/UnitTest;\";
$r45 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r47 = virtualinvoke $r46.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDouble\", $r45);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r47);
$r49 = class \"LjavaT/lang/annotation/UnitTest;\";
$r48 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r50 = virtualinvoke $r49.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBoolean\", $r48);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r50);
$r52 = class \"LjavaT/lang/annotation/UnitTest;\";
$r51 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r53 = virtualinvoke $r52.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberString\", $r51);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r53);
$r55 = class \"LjavaT/lang/annotation/UnitTest;\";
$r54 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r56 = virtualinvoke $r55.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClass\", $r54);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r56);
$r58 = class \"LjavaT/lang/annotation/UnitTest;\";
$r57 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r59 = virtualinvoke $r58.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnum\", $r57);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r59);
$r61 = class \"LjavaT/lang/annotation/UnitTest;\";
$r60 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r62 = virtualinvoke $r61.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDef\", $r60);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r62);
$r64 = class \"LjavaT/lang/annotation/UnitTest;\";
$r63 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r65 = virtualinvoke $r64.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDef\", $r63);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r65);
$r67 = class \"LjavaT/lang/annotation/UnitTest;\";
$r66 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r68 = virtualinvoke $r67.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDef\", $r66);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r68);
$r70 = class \"LjavaT/lang/annotation/UnitTest;\";
$r69 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r71 = virtualinvoke $r70.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDef\", $r69);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r71);
$r73 = class \"LjavaT/lang/annotation/UnitTest;\";
$r72 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r74 = virtualinvoke $r73.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDef\", $r72);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r74);
$r76 = class \"LjavaT/lang/annotation/UnitTest;\";
$r75 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r77 = virtualinvoke $r76.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDef\", $r75);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r77);
$r79 = class \"LjavaT/lang/annotation/UnitTest;\";
$r78 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r80 = virtualinvoke $r79.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDef\", $r78);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r80);
$r82 = class \"LjavaT/lang/annotation/UnitTest;\";
$r81 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r83 = virtualinvoke $r82.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDef\", $r81);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r83);
$r85 = class \"LjavaT/lang/annotation/UnitTest;\";
$r84 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r86 = virtualinvoke $r85.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDef\", $r84);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r86);
$r88 = class \"LjavaT/lang/annotation/UnitTest;\";
$r87 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r89 = virtualinvoke $r88.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDef\", $r87);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r89);
$r91 = class \"LjavaT/lang/annotation/UnitTest;\";
$r90 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r92 = virtualinvoke $r91.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDef\", $r90);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r92);
$r94 = class \"LjavaT/lang/annotation/UnitTest;\";
$r93 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r95 = virtualinvoke $r94.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDef\", $r93);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r95);
$r97 = class \"LjavaT/lang/annotation/UnitTest;\";
$r96 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r98 = virtualinvoke $r97.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDef\", $r96);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r98);
$r100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r99 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r101 = virtualinvoke $r100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDef\", $r99);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r101);
$r103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r104 = virtualinvoke $r103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDef\", $r102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r104);
$r106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r107 = virtualinvoke $r106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDef\", $r105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r107);
$r109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r110 = virtualinvoke $r109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDef\", $r108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r110);
$r112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r113 = virtualinvoke $r112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDef\", $r111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r113);
$r115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r116 = virtualinvoke $r115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDef\", $r114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r116);
$r118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r119 = virtualinvoke $r118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDef\", $r117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r119);
$r121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r122 = virtualinvoke $r121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDef\", $r120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r122);
$r124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r125 = virtualinvoke $r124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDef\", $r123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r125);
$r127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r128 = virtualinvoke $r127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmpty\", $r126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r128);
$r130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r131 = virtualinvoke $r130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmpty\", $r129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r131);
$r133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r134 = virtualinvoke $r133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmpty\", $r132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r134);
$r136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r137 = virtualinvoke $r136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmpty\", $r135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r137);
$r139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r140 = virtualinvoke $r139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmpty\", $r138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r140);
$r142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r143 = virtualinvoke $r142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmpty\", $r141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r143);
$r145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r146 = virtualinvoke $r145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmpty\", $r144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r146);
$r148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r149 = virtualinvoke $r148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmpty\", $r147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r149);
$r151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r152 = virtualinvoke $r151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmpty\", $r150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r152);
$r154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r155 = virtualinvoke $r154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmpty\", $r153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r155);
$r157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r158 = virtualinvoke $r157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmpty\", $r156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r158);
$r160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r161 = virtualinvoke $r160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOne\", $r159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r161);
$r163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r164 = virtualinvoke $r163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOne\", $r162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r164);
$r166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r167 = virtualinvoke $r166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOne\", $r165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r167);
$r169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r170 = virtualinvoke $r169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOne\", $r168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r170);
$r172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r173 = virtualinvoke $r172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOne\", $r171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r173);
$r175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r176 = virtualinvoke $r175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOne\", $r174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r176);
$r178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r179 = virtualinvoke $r178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOne\", $r177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r179);
$r181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r182 = virtualinvoke $r181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOne\", $r180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r182);
$r184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r185 = virtualinvoke $r184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOne\", $r183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r185);
$r187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r188 = virtualinvoke $r187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOne\", $r186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r188);
$r190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r191 = virtualinvoke $r190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOne\", $r189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r191);
$r193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r194 = virtualinvoke $r193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwo\", $r192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r194);
$r196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r197 = virtualinvoke $r196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwo\", $r195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r197);
$r199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r200 = virtualinvoke $r199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwo\", $r198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r200);
$r202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r203 = virtualinvoke $r202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwo\", $r201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r203);
$r205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r206 = virtualinvoke $r205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwo\", $r204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r206);
$r208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r209 = virtualinvoke $r208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwo\", $r207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r209);
$r211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r212 = virtualinvoke $r211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwo\", $r210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r212);
$r214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r215 = virtualinvoke $r214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwo\", $r213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r215);
$r217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r218 = virtualinvoke $r217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwo\", $r216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r218);
$r220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r221 = virtualinvoke $r220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwo\", $r219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r221);
$r223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r224 = virtualinvoke $r223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwo\", $r222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r224);
$r226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r227 = virtualinvoke $r226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDef\", $r225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r227);
$r229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r230 = virtualinvoke $r229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDef\", $r228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r230);
$r232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r233 = virtualinvoke $r232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDef\", $r231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r233);
$r235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r236 = virtualinvoke $r235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDef\", $r234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r236);
$r238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r239 = virtualinvoke $r238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDef\", $r237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r239);
$r241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r242 = virtualinvoke $r241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDef\", $r240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r242);
$r244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r245 = virtualinvoke $r244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDef\", $r243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r245);
$r247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r248 = virtualinvoke $r247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDef\", $r246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r248);
$r250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r251 = virtualinvoke $r250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDef\", $r249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r251);
$r253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r254 = virtualinvoke $r253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDef\", $r252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r254);
$r256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r257 = virtualinvoke $r256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDef\", $r255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r257);
$r259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r260 = virtualinvoke $r259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDef\", $r258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r260);
$r262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r263 = virtualinvoke $r262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDef\", $r261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r263);
$r265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r266 = virtualinvoke $r265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDef\", $r264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r266);
$r268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r269 = virtualinvoke $r268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDef\", $r267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r269);
$r271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r272 = virtualinvoke $r271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDef\", $r270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r272);
$r274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r275 = virtualinvoke $r274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDef\", $r273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r275);
$r277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r278 = virtualinvoke $r277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDef\", $r276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r278);
$r280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r281 = virtualinvoke $r280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDef\", $r279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r281);
$r283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r284 = virtualinvoke $r283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDef\", $r282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r284);
$r286 = class \"LjavaT/lang/annotation/UnitTest;\";
$r285 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r287 = virtualinvoke $r286.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDef\", $r285);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r287);
$r289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r288 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] X>;
$r290 = virtualinvoke $r289.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDef\", $r288);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r290);
$r291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r292 = virtualinvoke $r291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r292);
$r293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r294 = virtualinvoke $r293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r294);
$r295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r296 = virtualinvoke $r295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r296);
$r297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r298 = virtualinvoke $r297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r298);
$r299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r300 = virtualinvoke $r299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r300);
$r301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r302 = virtualinvoke $r301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r302);
$r303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r304 = virtualinvoke $r303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r304);
$r305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r306 = virtualinvoke $r305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r306);
$r307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r308 = virtualinvoke $r307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r308);
$r309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r310 = virtualinvoke $r309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r310);
$r311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r312 = virtualinvoke $r311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r312);
$r313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r314 = virtualinvoke $r313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r314);
$r315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r316 = virtualinvoke $r315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r316);
$r317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r318 = virtualinvoke $r317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r318);
$r319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r320 = virtualinvoke $r319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r320);
$r321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r322 = virtualinvoke $r321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r322);
$r323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r324 = virtualinvoke $r323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r324);
$r325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r326 = virtualinvoke $r325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r326);
$r327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r328 = virtualinvoke $r327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r328);
$r329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r330 = virtualinvoke $r329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r330);
$r331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r332 = virtualinvoke $r331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r332);
$r333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r334 = virtualinvoke $r333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r334);
$r335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r336 = virtualinvoke $r335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r336);
$r337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r338 = virtualinvoke $r337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r338);
$r339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r340 = virtualinvoke $r339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r340);
$r341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r342 = virtualinvoke $r341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r342);
$r343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r344 = virtualinvoke $r343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r344);
$r345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r346 = virtualinvoke $r345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r346);
$r347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r348 = virtualinvoke $r347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r348);
$r349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r350 = virtualinvoke $r349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r350);
$r351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r352 = virtualinvoke $r351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r352);
$r353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r354 = virtualinvoke $r353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r354);
$r355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r356 = virtualinvoke $r355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r356);
$r357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r358 = virtualinvoke $r357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r358);
$r359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r360 = virtualinvoke $r359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r360);
$r361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r362 = virtualinvoke $r361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r362);
$r363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r364 = virtualinvoke $r363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r364);
$r365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r366 = virtualinvoke $r365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r366);
$r367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r368 = virtualinvoke $r367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r368);
$r369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r370 = virtualinvoke $r369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r370);
$r371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r372 = virtualinvoke $r371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r372);
$r373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r374 = virtualinvoke $r373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r374);
$r375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r376 = virtualinvoke $r375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r376);
$r377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r378 = virtualinvoke $r377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r378);
$r379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r380 = virtualinvoke $r379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r380);
$r381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r382 = virtualinvoke $r381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r382);
$r383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r384 = virtualinvoke $r383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r384);
$r385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r386 = virtualinvoke $r385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r386);
$r387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r388 = virtualinvoke $r387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r388);
$r389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r390 = virtualinvoke $r389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r390);
$r391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r392 = virtualinvoke $r391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r392);
$r393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r394 = virtualinvoke $r393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r394);
$r395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r396 = virtualinvoke $r395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r396);
$r397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r398 = virtualinvoke $r397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r398);
$r399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r400 = virtualinvoke $r399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r400);
$r401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r402 = virtualinvoke $r401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r402);
$r403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r404 = virtualinvoke $r403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r404);
$r405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r406 = virtualinvoke $r405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r406);
$r407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r408 = virtualinvoke $r407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r408);
$r409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r410 = virtualinvoke $r409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r410);
$r411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r412 = virtualinvoke $r411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r412);
$r413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r414 = virtualinvoke $r413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r414);
$r415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r416 = virtualinvoke $r415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r416);
$r417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r418 = virtualinvoke $r417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r418);
$r419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r420 = virtualinvoke $r419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r420);
$r421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r422 = virtualinvoke $r421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r422);
$r423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r424 = virtualinvoke $r423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r424);
$r425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r426 = virtualinvoke $r425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r426);
$r427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r428 = virtualinvoke $r427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r428);
$r429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r430 = virtualinvoke $r429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r430);
$r431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r432 = virtualinvoke $r431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r432);
$r433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r434 = virtualinvoke $r433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r434);
$r435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r436 = virtualinvoke $r435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r436);
$r437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r438 = virtualinvoke $r437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r438);
$r439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r440 = virtualinvoke $r439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r440);
$r441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r442 = virtualinvoke $r441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r442);
$r443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r444 = virtualinvoke $r443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r444);
$r445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r446 = virtualinvoke $r445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r446);
$r447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r448 = virtualinvoke $r447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r448);
$r449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r450 = virtualinvoke $r449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r450);
$r451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r452 = virtualinvoke $r451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r452);
$r453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r454 = virtualinvoke $r453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r454);
$r455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r456 = virtualinvoke $r455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r456);
$r457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r458 = virtualinvoke $r457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r458);
$r459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r460 = virtualinvoke $r459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r460);
$r461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r462 = virtualinvoke $r461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r462);
$r463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r464 = virtualinvoke $r463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r464);
$r465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r466 = virtualinvoke $r465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r466);
$r467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r468 = virtualinvoke $r467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r468);
$r469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r470 = virtualinvoke $r469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r470);
$r471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r472 = virtualinvoke $r471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r472);
$r473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r474 = virtualinvoke $r473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r474);
$r475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r476 = virtualinvoke $r475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r476);
$r477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r478 = virtualinvoke $r477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r478);
$r479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r480 = virtualinvoke $r479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r480);
$r481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r482 = virtualinvoke $r481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r482);
$r483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r484 = virtualinvoke $r483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r484);
$r485 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r486 = virtualinvoke $r485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r486);
$r487 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r488 = virtualinvoke $r487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r488);
$r489 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r490 = virtualinvoke $r489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r490);
$r491 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r492 = virtualinvoke $r491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r492);
$r493 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r494 = virtualinvoke $r493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r494);
$r495 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r496 = virtualinvoke $r495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r496);
$r497 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r498 = virtualinvoke $r497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r498);
$r499 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r500 = virtualinvoke $r499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r500);
$r501 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r502 = virtualinvoke $r501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"marker\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r502);
$r503 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r504 = virtualinvoke $r503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByte\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r504);
$r505 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r506 = virtualinvoke $r505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShort\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r506);
$r507 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r508 = virtualinvoke $r507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberInt\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r508);
$r509 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r510 = virtualinvoke $r509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLong\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r510);
$r511 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r512 = virtualinvoke $r511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberChar\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r512);
$r513 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r514 = virtualinvoke $r513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloat\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r514);
$r515 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r516 = virtualinvoke $r515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDouble\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r516);
$r517 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r518 = virtualinvoke $r517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBoolean\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r518);
$r519 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r520 = virtualinvoke $r519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberString\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r520);
$r521 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r522 = virtualinvoke $r521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClass\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r522);
$r523 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r524 = virtualinvoke $r523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnum\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r524);
$r525 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r526 = virtualinvoke $r525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r526);
$r527 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r528 = virtualinvoke $r527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r528);
$r529 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r530 = virtualinvoke $r529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r530);
$r531 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r532 = virtualinvoke $r531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r532);
$r533 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r534 = virtualinvoke $r533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r534);
$r535 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r536 = virtualinvoke $r535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r536);
$r537 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r538 = virtualinvoke $r537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r538);
$r539 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r540 = virtualinvoke $r539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r540);
$r541 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r542 = virtualinvoke $r541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r542);
$r543 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r544 = virtualinvoke $r543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r544);
$r545 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r546 = virtualinvoke $r545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r546);
$r547 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r548 = virtualinvoke $r547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r548);
$r549 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r550 = virtualinvoke $r549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r550);
$r551 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r552 = virtualinvoke $r551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r552);
$r553 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r554 = virtualinvoke $r553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r554);
$r555 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r556 = virtualinvoke $r555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r556);
$r557 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r558 = virtualinvoke $r557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r558);
$r559 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r560 = virtualinvoke $r559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r560);
$r561 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r562 = virtualinvoke $r561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r562);
$r563 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r564 = virtualinvoke $r563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r564);
$r565 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r566 = virtualinvoke $r565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r566);
$r567 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r568 = virtualinvoke $r567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r568);
$r569 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r570 = virtualinvoke $r569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r570);
$r571 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r572 = virtualinvoke $r571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r572);
$r573 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r574 = virtualinvoke $r573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r574);
$r575 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r576 = virtualinvoke $r575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r576);
$r577 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r578 = virtualinvoke $r577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r578);
$r579 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r580 = virtualinvoke $r579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r580);
$r581 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r582 = virtualinvoke $r581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r582);
$r583 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r584 = virtualinvoke $r583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r584);
$r585 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r586 = virtualinvoke $r585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r586);
$r587 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r588 = virtualinvoke $r587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r588);
$r589 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r590 = virtualinvoke $r589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmpty\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r590);
$r591 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r592 = virtualinvoke $r591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r592);
$r593 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r594 = virtualinvoke $r593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r594);
$r595 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r596 = virtualinvoke $r595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r596);
$r597 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r598 = virtualinvoke $r597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r598);
$r599 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r600 = virtualinvoke $r599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r600);
$r601 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r602 = virtualinvoke $r601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r602);
$r603 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r604 = virtualinvoke $r603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r604);
$r605 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r606 = virtualinvoke $r605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r606);
$r607 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r608 = virtualinvoke $r607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r608);
$r609 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r610 = virtualinvoke $r609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r610);
$r611 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r612 = virtualinvoke $r611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOne\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r612);
$r613 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r614 = virtualinvoke $r613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r614);
$r615 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r616 = virtualinvoke $r615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r616);
$r617 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r618 = virtualinvoke $r617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r618);
$r619 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r620 = virtualinvoke $r619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r620);
$r621 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r622 = virtualinvoke $r621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r622);
$r623 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r624 = virtualinvoke $r623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r624);
$r625 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r626 = virtualinvoke $r625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r626);
$r627 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r628 = virtualinvoke $r627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r628);
$r629 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r630 = virtualinvoke $r629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r630);
$r631 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r632 = virtualinvoke $r631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r632);
$r633 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r634 = virtualinvoke $r633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwo\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r634);
$r635 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r636 = virtualinvoke $r635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r636);
$r637 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r638 = virtualinvoke $r637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r638);
$r639 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r640 = virtualinvoke $r639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r640);
$r641 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r642 = virtualinvoke $r641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r642);
$r643 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r644 = virtualinvoke $r643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r644);
$r645 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r646 = virtualinvoke $r645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r646);
$r647 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r648 = virtualinvoke $r647.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r648);
$r649 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r650 = virtualinvoke $r649.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r650);
$r651 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r652 = virtualinvoke $r651.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r652);
$r653 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r654 = virtualinvoke $r653.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r654);
$r655 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r656 = virtualinvoke $r655.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r656);
$r657 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r658 = virtualinvoke $r657.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r658);
$r659 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r660 = virtualinvoke $r659.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r660);
$r661 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r662 = virtualinvoke $r661.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r662);
$r663 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r664 = virtualinvoke $r663.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r664);
$r665 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r666 = virtualinvoke $r665.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r666);
$r667 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r668 = virtualinvoke $r667.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r668);
$r669 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r670 = virtualinvoke $r669.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r670);
$r671 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r672 = virtualinvoke $r671.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r672);
$r673 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r674 = virtualinvoke $r673.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r674);
$r675 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r676 = virtualinvoke $r675.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r676);
$r677 = class \"LjavaT/lang/annotation/UnitTest$TestType;\";
$r678 = virtualinvoke $r677.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDef\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r678);
$r680 = class \"LjavaT/lang/annotation/UnitTest;\";
$r679 = newarray (java.lang.Class)[1];
$r679[0] = class \"Ljava/util/Iterator;\";
$r681 = virtualinvoke $r680.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r679);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>($r681);
$r683 = class \"LjavaT/lang/annotation/UnitTest;\";
$r682 = newarray (java.lang.Class)[1];
$r682[0] = class \"Ljava/util/Map;\";
$r684 = virtualinvoke $r683.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r682);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r684);
$r686 = class \"LjavaT/lang/annotation/UnitTest;\";
$r685 = newarray (java.lang.Class)[1];
$r685[0] = class \"Ljava/util/Set;\";
$r687 = virtualinvoke $r686.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r685);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r687);
$r689 = class \"LjavaT/lang/annotation/UnitTest;\";
$r688 = newarray (java.lang.Class)[1];
$r688[0] = class \"Ljava/util/List;\";
$r690 = virtualinvoke $r689.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r688);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>($r690);
$r692 = class \"LjavaT/lang/annotation/UnitTest;\";
$r691 = newarray (java.lang.Class)[1];
$r691[0] = class \"Ljava/util/Collection;\";
$r693 = virtualinvoke $r692.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r691);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>($r693);
$r695 = class \"LjavaT/lang/annotation/UnitTest;\";
$r694 = newarray (java.lang.Class)[1];
$r694[0] = class \"Ljava/util/SortedSet;\";
$r696 = virtualinvoke $r695.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r694);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>($r696);
$r698 = class \"LjavaT/lang/annotation/UnitTest;\";
$r697 = newarray (java.lang.Class)[1];
$r697[0] = class \"Ljava/util/SortedMap;\";
$r699 = virtualinvoke $r698.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r697);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>($r699);
$r701 = class \"LjavaT/lang/annotation/UnitTest;\";
$r700 = newarray (java.lang.Class)[1];
$r700[0] = class \"Ljava/util/RandomAccess;\";
$r702 = virtualinvoke $r701.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r700);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>($r702);
$r704 = class \"LjavaT/lang/annotation/UnitTest;\";
$r703 = newarray (java.lang.Class)[0];
$r705 = virtualinvoke $r704.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r703);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>($r705);
$r708 = class \"LjavaT/lang/annotation/UnitTest;\";
$r706 = newarray (java.lang.Class)[1];
$r707 = <java.lang.Byte: java.lang.Class TYPE>;
$r706[0] = $r707;
$r709 = virtualinvoke $r708.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r706);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>($r709);
$r712 = class \"LjavaT/lang/annotation/UnitTest;\";
$r710 = newarray (java.lang.Class)[1];
$r711 = <java.lang.Short: java.lang.Class TYPE>;
$r710[0] = $r711;
$r713 = virtualinvoke $r712.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r710);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>($r713);
$r716 = class \"LjavaT/lang/annotation/UnitTest;\";
$r714 = newarray (java.lang.Class)[1];
$r715 = <java.lang.Integer: java.lang.Class TYPE>;
$r714[0] = $r715;
$r717 = virtualinvoke $r716.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r714);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>($r717);
$r720 = class \"LjavaT/lang/annotation/UnitTest;\";
$r718 = newarray (java.lang.Class)[1];
$r719 = <java.lang.Long: java.lang.Class TYPE>;
$r718[0] = $r719;
$r721 = virtualinvoke $r720.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r718);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>($r721);
$r724 = class \"LjavaT/lang/annotation/UnitTest;\";
$r722 = newarray (java.lang.Class)[1];
$r723 = <java.lang.Character: java.lang.Class TYPE>;
$r722[0] = $r723;
$r725 = virtualinvoke $r724.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r722);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>($r725);
$r728 = class \"LjavaT/lang/annotation/UnitTest;\";
$r726 = newarray (java.lang.Class)[1];
$r727 = <java.lang.Float: java.lang.Class TYPE>;
$r726[0] = $r727;
$r729 = virtualinvoke $r728.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r726);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>($r729);
$r732 = class \"LjavaT/lang/annotation/UnitTest;\";
$r730 = newarray (java.lang.Class)[1];
$r731 = <java.lang.Double: java.lang.Class TYPE>;
$r730[0] = $r731;
$r733 = virtualinvoke $r732.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r730);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>($r733);
$r736 = class \"LjavaT/lang/annotation/UnitTest;\";
$r734 = newarray (java.lang.Class)[1];
$r735 = <java.lang.Boolean: java.lang.Class TYPE>;
$r734[0] = $r735;
$r737 = virtualinvoke $r736.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r734);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>($r737);
$r739 = class \"LjavaT/lang/annotation/UnitTest;\";
$r738 = newarray (java.lang.Class)[1];
$r738[0] = class \"Ljava/lang/String;\";
$r740 = virtualinvoke $r739.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r738);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>($r740);
$r742 = class \"LjavaT/lang/annotation/UnitTest;\";
$r741 = newarray (java.lang.Class)[1];
$r741[0] = class \"Ljava/lang/Class;\";
$r743 = virtualinvoke $r742.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r741);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>($r743);
$r745 = class \"LjavaT/lang/annotation/UnitTest;\";
$r744 = newarray (java.lang.Class)[1];
$r744[0] = class \"Ljava/lang/Enum;\";
$r746 = virtualinvoke $r745.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r744);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>($r746);
$r749 = class \"LjavaT/lang/annotation/UnitTest;\";
$r747 = newarray (java.lang.Class)[2];
$r748 = <java.lang.Byte: java.lang.Class TYPE>;
$r747[0] = $r748;
$r747[1] = class \"Ljava/util/Set;\";
$r750 = virtualinvoke $r749.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r747);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>($r750);
$r753 = class \"LjavaT/lang/annotation/UnitTest;\";
$r751 = newarray (java.lang.Class)[2];
$r752 = <java.lang.Short: java.lang.Class TYPE>;
$r751[0] = $r752;
$r751[1] = class \"Ljava/util/Set;\";
$r754 = virtualinvoke $r753.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r751);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>($r754);
$r757 = class \"LjavaT/lang/annotation/UnitTest;\";
$r755 = newarray (java.lang.Class)[2];
$r756 = <java.lang.Integer: java.lang.Class TYPE>;
$r755[0] = $r756;
$r755[1] = class \"Ljava/util/Set;\";
$r758 = virtualinvoke $r757.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r755);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>($r758);
$r761 = class \"LjavaT/lang/annotation/UnitTest;\";
$r759 = newarray (java.lang.Class)[2];
$r760 = <java.lang.Long: java.lang.Class TYPE>;
$r759[0] = $r760;
$r759[1] = class \"Ljava/util/Set;\";
$r762 = virtualinvoke $r761.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r759);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>($r762);
$r765 = class \"LjavaT/lang/annotation/UnitTest;\";
$r763 = newarray (java.lang.Class)[2];
$r764 = <java.lang.Character: java.lang.Class TYPE>;
$r763[0] = $r764;
$r763[1] = class \"Ljava/util/Set;\";
$r766 = virtualinvoke $r765.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r763);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>($r766);
$r769 = class \"LjavaT/lang/annotation/UnitTest;\";
$r767 = newarray (java.lang.Class)[2];
$r768 = <java.lang.Float: java.lang.Class TYPE>;
$r767[0] = $r768;
$r767[1] = class \"Ljava/util/Set;\";
$r770 = virtualinvoke $r769.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r767);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>($r770);
$r773 = class \"LjavaT/lang/annotation/UnitTest;\";
$r771 = newarray (java.lang.Class)[2];
$r772 = <java.lang.Double: java.lang.Class TYPE>;
$r771[0] = $r772;
$r771[1] = class \"Ljava/util/Set;\";
$r774 = virtualinvoke $r773.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r771);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>($r774);
$r777 = class \"LjavaT/lang/annotation/UnitTest;\";
$r775 = newarray (java.lang.Class)[2];
$r776 = <java.lang.Boolean: java.lang.Class TYPE>;
$r775[0] = $r776;
$r775[1] = class \"Ljava/util/Set;\";
$r778 = virtualinvoke $r777.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r775);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>($r778);
$r780 = class \"LjavaT/lang/annotation/UnitTest;\";
$r779 = newarray (java.lang.Class)[2];
$r779[0] = class \"Ljava/lang/String;\";
$r779[1] = class \"Ljava/util/Set;\";
$r781 = virtualinvoke $r780.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r779);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>($r781);
$r783 = class \"LjavaT/lang/annotation/UnitTest;\";
$r782 = newarray (java.lang.Class)[2];
$r782[0] = class \"Ljava/lang/Class;\";
$r782[1] = class \"Ljava/util/Set;\";
$r784 = virtualinvoke $r783.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r782);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>($r784);
$r786 = class \"LjavaT/lang/annotation/UnitTest;\";
$r785 = newarray (java.lang.Class)[2];
$r785[0] = class \"Ljava/lang/Enum;\";
$r785[1] = class \"Ljava/util/Set;\";
$r787 = virtualinvoke $r786.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r785);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>($r787);
$r790 = class \"LjavaT/lang/annotation/UnitTest;\";
$r788 = newarray (java.lang.Class)[2];
$r789 = <java.lang.Byte: java.lang.Class TYPE>;
$r788[0] = $r789;
$r788[1] = class \"Ljava/util/Map;\";
$r791 = virtualinvoke $r790.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r788);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>($r791);
$r794 = class \"LjavaT/lang/annotation/UnitTest;\";
$r792 = newarray (java.lang.Class)[2];
$r793 = <java.lang.Short: java.lang.Class TYPE>;
$r792[0] = $r793;
$r792[1] = class \"Ljava/util/Map;\";
$r795 = virtualinvoke $r794.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r792);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>($r795);
$r798 = class \"LjavaT/lang/annotation/UnitTest;\";
$r796 = newarray (java.lang.Class)[2];
$r797 = <java.lang.Integer: java.lang.Class TYPE>;
$r796[0] = $r797;
$r796[1] = class \"Ljava/util/Map;\";
$r799 = virtualinvoke $r798.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r796);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>($r799);
$r802 = class \"LjavaT/lang/annotation/UnitTest;\";
$r800 = newarray (java.lang.Class)[2];
$r801 = <java.lang.Long: java.lang.Class TYPE>;
$r800[0] = $r801;
$r800[1] = class \"Ljava/util/Map;\";
$r803 = virtualinvoke $r802.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r800);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>($r803);
$r806 = class \"LjavaT/lang/annotation/UnitTest;\";
$r804 = newarray (java.lang.Class)[2];
$r805 = <java.lang.Character: java.lang.Class TYPE>;
$r804[0] = $r805;
$r804[1] = class \"Ljava/util/Map;\";
$r807 = virtualinvoke $r806.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r804);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>($r807);
$r810 = class \"LjavaT/lang/annotation/UnitTest;\";
$r808 = newarray (java.lang.Class)[2];
$r809 = <java.lang.Float: java.lang.Class TYPE>;
$r808[0] = $r809;
$r808[1] = class \"Ljava/util/Map;\";
$r811 = virtualinvoke $r810.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r808);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>($r811);
$r814 = class \"LjavaT/lang/annotation/UnitTest;\";
$r812 = newarray (java.lang.Class)[2];
$r813 = <java.lang.Double: java.lang.Class TYPE>;
$r812[0] = $r813;
$r812[1] = class \"Ljava/util/Map;\";
$r815 = virtualinvoke $r814.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r812);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>($r815);
$r818 = class \"LjavaT/lang/annotation/UnitTest;\";
$r816 = newarray (java.lang.Class)[2];
$r817 = <java.lang.Boolean: java.lang.Class TYPE>;
$r816[0] = $r817;
$r816[1] = class \"Ljava/util/Map;\";
$r819 = virtualinvoke $r818.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r816);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>($r819);
$r821 = class \"LjavaT/lang/annotation/UnitTest;\";
$r820 = newarray (java.lang.Class)[2];
$r820[0] = class \"Ljava/lang/String;\";
$r820[1] = class \"Ljava/util/Map;\";
$r822 = virtualinvoke $r821.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r820);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>($r822);
$r824 = class \"LjavaT/lang/annotation/UnitTest;\";
$r823 = newarray (java.lang.Class)[2];
$r823[0] = class \"Ljava/lang/Class;\";
$r823[1] = class \"Ljava/util/Map;\";
$r825 = virtualinvoke $r824.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r823);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>($r825);
$r827 = class \"LjavaT/lang/annotation/UnitTest;\";
$r826 = newarray (java.lang.Class)[2];
$r826[0] = class \"Ljava/lang/Enum;\";
$r826[1] = class \"Ljava/util/Map;\";
$r828 = virtualinvoke $r827.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r826);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>($r828);
$r830 = class \"LjavaT/lang/annotation/UnitTest;\";
$r829 = newarray (java.lang.Class)[1];
$r829[0] = class \"[B\";
$r831 = virtualinvoke $r830.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r829);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>($r831);
$r833 = class \"LjavaT/lang/annotation/UnitTest;\";
$r832 = newarray (java.lang.Class)[1];
$r832[0] = class \"[S\";
$r834 = virtualinvoke $r833.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r832);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>($r834);
$r836 = class \"LjavaT/lang/annotation/UnitTest;\";
$r835 = newarray (java.lang.Class)[1];
$r835[0] = class \"[I\";
$r837 = virtualinvoke $r836.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r835);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>($r837);
$r839 = class \"LjavaT/lang/annotation/UnitTest;\";
$r838 = newarray (java.lang.Class)[1];
$r838[0] = class \"[J\";
$r840 = virtualinvoke $r839.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r838);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>($r840);
$r842 = class \"LjavaT/lang/annotation/UnitTest;\";
$r841 = newarray (java.lang.Class)[1];
$r841[0] = class \"[C\";
$r843 = virtualinvoke $r842.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r841);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>($r843);
$r845 = class \"LjavaT/lang/annotation/UnitTest;\";
$r844 = newarray (java.lang.Class)[1];
$r844[0] = class \"[F\";
$r846 = virtualinvoke $r845.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r844);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>($r846);
$r848 = class \"LjavaT/lang/annotation/UnitTest;\";
$r847 = newarray (java.lang.Class)[1];
$r847[0] = class \"[D\";
$r849 = virtualinvoke $r848.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r847);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>($r849);
$r851 = class \"LjavaT/lang/annotation/UnitTest;\";
$r850 = newarray (java.lang.Class)[1];
$r850[0] = class \"[Z\";
$r852 = virtualinvoke $r851.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r850);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>($r852);
$r854 = class \"LjavaT/lang/annotation/UnitTest;\";
$r853 = newarray (java.lang.Class)[1];
$r853[0] = class \"[Ljava/lang/String;\";
$r855 = virtualinvoke $r854.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r853);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>($r855);
$r857 = class \"LjavaT/lang/annotation/UnitTest;\";
$r856 = newarray (java.lang.Class)[1];
$r856[0] = class \"[Ljava/lang/Class;\";
$r858 = virtualinvoke $r857.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r856);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>($r858);
$r860 = class \"LjavaT/lang/annotation/UnitTest;\";
$r859 = newarray (java.lang.Class)[1];
$r859[0] = class \"[Ljava/lang/Enum;\";
$r861 = virtualinvoke $r860.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r859);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>($r861);
$r863 = class \"LjavaT/lang/annotation/UnitTest;\";
$r862 = newarray (java.lang.Class)[2];
$r862[0] = class \"[B\";
$r862[1] = class \"Ljava/util/Set;\";
$r864 = virtualinvoke $r863.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r862);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>($r864);
$r866 = class \"LjavaT/lang/annotation/UnitTest;\";
$r865 = newarray (java.lang.Class)[2];
$r865[0] = class \"[S\";
$r865[1] = class \"Ljava/util/Set;\";
$r867 = virtualinvoke $r866.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r865);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>($r867);
$r869 = class \"LjavaT/lang/annotation/UnitTest;\";
$r868 = newarray (java.lang.Class)[2];
$r868[0] = class \"[I\";
$r868[1] = class \"Ljava/util/Set;\";
$r870 = virtualinvoke $r869.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r868);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>($r870);
$r872 = class \"LjavaT/lang/annotation/UnitTest;\";
$r871 = newarray (java.lang.Class)[2];
$r871[0] = class \"[J\";
$r871[1] = class \"Ljava/util/Set;\";
$r873 = virtualinvoke $r872.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r871);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>($r873);
$r875 = class \"LjavaT/lang/annotation/UnitTest;\";
$r874 = newarray (java.lang.Class)[2];
$r874[0] = class \"[C\";
$r874[1] = class \"Ljava/util/Set;\";
$r876 = virtualinvoke $r875.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r874);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>($r876);
$r878 = class \"LjavaT/lang/annotation/UnitTest;\";
$r877 = newarray (java.lang.Class)[2];
$r877[0] = class \"[F\";
$r877[1] = class \"Ljava/util/Set;\";
$r879 = virtualinvoke $r878.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r877);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>($r879);
$r881 = class \"LjavaT/lang/annotation/UnitTest;\";
$r880 = newarray (java.lang.Class)[2];
$r880[0] = class \"[D\";
$r880[1] = class \"Ljava/util/Set;\";
$r882 = virtualinvoke $r881.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r880);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>($r882);
$r884 = class \"LjavaT/lang/annotation/UnitTest;\";
$r883 = newarray (java.lang.Class)[2];
$r883[0] = class \"[Z\";
$r883[1] = class \"Ljava/util/Set;\";
$r885 = virtualinvoke $r884.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r883);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>($r885);
$r887 = class \"LjavaT/lang/annotation/UnitTest;\";
$r886 = newarray (java.lang.Class)[2];
$r886[0] = class \"[Ljava/lang/String;\";
$r886[1] = class \"Ljava/util/Set;\";
$r888 = virtualinvoke $r887.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r886);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>($r888);
$r890 = class \"LjavaT/lang/annotation/UnitTest;\";
$r889 = newarray (java.lang.Class)[2];
$r889[0] = class \"[Ljava/lang/Class;\";
$r889[1] = class \"Ljava/util/Set;\";
$r891 = virtualinvoke $r890.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r889);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>($r891);
$r893 = class \"LjavaT/lang/annotation/UnitTest;\";
$r892 = newarray (java.lang.Class)[2];
$r892[0] = class \"[Ljava/lang/Enum;\";
$r892[1] = class \"Ljava/util/Set;\";
$r894 = virtualinvoke $r893.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r892);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>($r894);
$r896 = class \"LjavaT/lang/annotation/UnitTest;\";
$r895 = newarray (java.lang.Class)[2];
$r895[0] = class \"[B\";
$r895[1] = class \"Ljava/util/Map;\";
$r897 = virtualinvoke $r896.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r895);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>($r897);
$r899 = class \"LjavaT/lang/annotation/UnitTest;\";
$r898 = newarray (java.lang.Class)[2];
$r898[0] = class \"[S\";
$r898[1] = class \"Ljava/util/Map;\";
$r900 = virtualinvoke $r899.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r898);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>($r900);
$r902 = class \"LjavaT/lang/annotation/UnitTest;\";
$r901 = newarray (java.lang.Class)[2];
$r901[0] = class \"[I\";
$r901[1] = class \"Ljava/util/Map;\";
$r903 = virtualinvoke $r902.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r901);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>($r903);
$r905 = class \"LjavaT/lang/annotation/UnitTest;\";
$r904 = newarray (java.lang.Class)[2];
$r904[0] = class \"[J\";
$r904[1] = class \"Ljava/util/Map;\";
$r906 = virtualinvoke $r905.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r904);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>($r906);
$r908 = class \"LjavaT/lang/annotation/UnitTest;\";
$r907 = newarray (java.lang.Class)[2];
$r907[0] = class \"[C\";
$r907[1] = class \"Ljava/util/Map;\";
$r909 = virtualinvoke $r908.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r907);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>($r909);
$r911 = class \"LjavaT/lang/annotation/UnitTest;\";
$r910 = newarray (java.lang.Class)[2];
$r910[0] = class \"[F\";
$r910[1] = class \"Ljava/util/Map;\";
$r912 = virtualinvoke $r911.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r910);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>($r912);
$r914 = class \"LjavaT/lang/annotation/UnitTest;\";
$r913 = newarray (java.lang.Class)[2];
$r913[0] = class \"[D\";
$r913[1] = class \"Ljava/util/Map;\";
$r915 = virtualinvoke $r914.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r913);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>($r915);
$r917 = class \"LjavaT/lang/annotation/UnitTest;\";
$r916 = newarray (java.lang.Class)[2];
$r916[0] = class \"[Z\";
$r916[1] = class \"Ljava/util/Map;\";
$r918 = virtualinvoke $r917.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r916);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>($r918);
$r920 = class \"LjavaT/lang/annotation/UnitTest;\";
$r919 = newarray (java.lang.Class)[2];
$r919[0] = class \"[Ljava/lang/String;\";
$r919[1] = class \"Ljava/util/Map;\";
$r921 = virtualinvoke $r920.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r919);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>($r921);
$r923 = class \"LjavaT/lang/annotation/UnitTest;\";
$r922 = newarray (java.lang.Class)[2];
$r922[0] = class \"[Ljava/lang/Class;\";
$r922[1] = class \"Ljava/util/Map;\";
$r924 = virtualinvoke $r923.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r922);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>($r924);
$r926 = class \"LjavaT/lang/annotation/UnitTest;\";
$r925 = newarray (java.lang.Class)[2];
$r925[0] = class \"[Ljava/lang/Enum;\";
$r925[1] = class \"Ljava/util/Map;\";
$r927 = virtualinvoke $r926.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r925);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>($r927);
$r929 = class \"LjavaT/lang/annotation/UnitTest;\";
$r928 = newarray (java.lang.Class)[2];
$r928[0] = class \"[B\";
$r928[1] = class \"Ljava/util/List;\";
$r930 = virtualinvoke $r929.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r928);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r930);
$r932 = class \"LjavaT/lang/annotation/UnitTest;\";
$r931 = newarray (java.lang.Class)[2];
$r931[0] = class \"[S\";
$r931[1] = class \"Ljava/util/List;\";
$r933 = virtualinvoke $r932.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r931);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r933);
$r935 = class \"LjavaT/lang/annotation/UnitTest;\";
$r934 = newarray (java.lang.Class)[2];
$r934[0] = class \"[I\";
$r934[1] = class \"Ljava/util/List;\";
$r936 = virtualinvoke $r935.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r934);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r936);
$r938 = class \"LjavaT/lang/annotation/UnitTest;\";
$r937 = newarray (java.lang.Class)[2];
$r937[0] = class \"[J\";
$r937[1] = class \"Ljava/util/List;\";
$r939 = virtualinvoke $r938.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r937);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r939);
$r941 = class \"LjavaT/lang/annotation/UnitTest;\";
$r940 = newarray (java.lang.Class)[2];
$r940[0] = class \"[C\";
$r940[1] = class \"Ljava/util/List;\";
$r942 = virtualinvoke $r941.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r940);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r942);
$r944 = class \"LjavaT/lang/annotation/UnitTest;\";
$r943 = newarray (java.lang.Class)[2];
$r943[0] = class \"[F\";
$r943[1] = class \"Ljava/util/List;\";
$r945 = virtualinvoke $r944.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r943);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r945);
$r947 = class \"LjavaT/lang/annotation/UnitTest;\";
$r946 = newarray (java.lang.Class)[2];
$r946[0] = class \"[D\";
$r946[1] = class \"Ljava/util/List;\";
$r948 = virtualinvoke $r947.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r946);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r948);
$r950 = class \"LjavaT/lang/annotation/UnitTest;\";
$r949 = newarray (java.lang.Class)[2];
$r949[0] = class \"[Z\";
$r949[1] = class \"Ljava/util/List;\";
$r951 = virtualinvoke $r950.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r949);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r951);
$r953 = class \"LjavaT/lang/annotation/UnitTest;\";
$r952 = newarray (java.lang.Class)[2];
$r952[0] = class \"[Ljava/lang/String;\";
$r952[1] = class \"Ljava/util/List;\";
$r954 = virtualinvoke $r953.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r952);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r954);
$r956 = class \"LjavaT/lang/annotation/UnitTest;\";
$r955 = newarray (java.lang.Class)[2];
$r955[0] = class \"[Ljava/lang/Class;\";
$r955[1] = class \"Ljava/util/List;\";
$r957 = virtualinvoke $r956.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r955);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r957);
$r959 = class \"LjavaT/lang/annotation/UnitTest;\";
$r958 = newarray (java.lang.Class)[2];
$r958[0] = class \"[Ljava/lang/Enum;\";
$r958[1] = class \"Ljava/util/List;\";
$r960 = virtualinvoke $r959.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r958);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>($r960);
$r962 = class \"LjavaT/lang/annotation/UnitTest;\";
$r961 = newarray (java.lang.Class)[2];
$r961[0] = class \"[B\";
$r961[1] = class \"Ljava/util/Collection;\";
$r963 = virtualinvoke $r962.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r961);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r963);
$r965 = class \"LjavaT/lang/annotation/UnitTest;\";
$r964 = newarray (java.lang.Class)[2];
$r964[0] = class \"[S\";
$r964[1] = class \"Ljava/util/Collection;\";
$r966 = virtualinvoke $r965.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r964);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r966);
$r968 = class \"LjavaT/lang/annotation/UnitTest;\";
$r967 = newarray (java.lang.Class)[2];
$r967[0] = class \"[I\";
$r967[1] = class \"Ljava/util/Collection;\";
$r969 = virtualinvoke $r968.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r967);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r969);
$r971 = class \"LjavaT/lang/annotation/UnitTest;\";
$r970 = newarray (java.lang.Class)[2];
$r970[0] = class \"[J\";
$r970[1] = class \"Ljava/util/Collection;\";
$r972 = virtualinvoke $r971.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r970);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r972);
$r974 = class \"LjavaT/lang/annotation/UnitTest;\";
$r973 = newarray (java.lang.Class)[2];
$r973[0] = class \"[C\";
$r973[1] = class \"Ljava/util/Collection;\";
$r975 = virtualinvoke $r974.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r973);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r975);
$r977 = class \"LjavaT/lang/annotation/UnitTest;\";
$r976 = newarray (java.lang.Class)[2];
$r976[0] = class \"[F\";
$r976[1] = class \"Ljava/util/Collection;\";
$r978 = virtualinvoke $r977.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r976);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r978);
$r980 = class \"LjavaT/lang/annotation/UnitTest;\";
$r979 = newarray (java.lang.Class)[2];
$r979[0] = class \"[D\";
$r979[1] = class \"Ljava/util/Collection;\";
$r981 = virtualinvoke $r980.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r979);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r981);
$r983 = class \"LjavaT/lang/annotation/UnitTest;\";
$r982 = newarray (java.lang.Class)[2];
$r982[0] = class \"[Z\";
$r982[1] = class \"Ljava/util/Collection;\";
$r984 = virtualinvoke $r983.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r982);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r984);
$r986 = class \"LjavaT/lang/annotation/UnitTest;\";
$r985 = newarray (java.lang.Class)[2];
$r985[0] = class \"[Ljava/lang/String;\";
$r985[1] = class \"Ljava/util/Collection;\";
$r987 = virtualinvoke $r986.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r985);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r987);
$r989 = class \"LjavaT/lang/annotation/UnitTest;\";
$r988 = newarray (java.lang.Class)[2];
$r988[0] = class \"[Ljava/lang/Class;\";
$r988[1] = class \"Ljava/util/Collection;\";
$r990 = virtualinvoke $r989.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r988);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r990);
$r992 = class \"LjavaT/lang/annotation/UnitTest;\";
$r991 = newarray (java.lang.Class)[2];
$r991[0] = class \"[Ljava/lang/Enum;\";
$r991[1] = class \"Ljava/util/Collection;\";
$r993 = virtualinvoke $r992.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r991);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>($r993);
$r995 = class \"LjavaT/lang/annotation/UnitTest;\";
$r994 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r996 = virtualinvoke $r995.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesParam\", $r994);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesParam(java.lang.reflect.Method)>($r996);
$r998 = class \"LjavaT/lang/annotation/UnitTest;\";
$r997 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r999 = virtualinvoke $r998.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesOverrideDefaultParam\", $r997);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefaultParam(java.lang.reflect.Method)>($r999);
$r1001 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1000 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1002 = virtualinvoke $r1001.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"scalarTypesAcceptDefaultParam\", $r1000);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1002);
$r1004 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1003 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1005 = virtualinvoke $r1004.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"emptyArrayTypesParam\", $r1003);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0Param(java.lang.reflect.Method)>($r1005);
$r1007 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1006 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1008 = virtualinvoke $r1007.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"singleElementArrayTypesParam\", $r1006);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1Param(java.lang.reflect.Method)>($r1008);
$r1010 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1009 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1011 = virtualinvoke $r1010.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"twoElementArrayTypesParam\", $r1009);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2Param(java.lang.reflect.Method)>($r1011);
$r1013 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1012 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1014 = virtualinvoke $r1013.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesAcceptDefaultParam\", $r1012);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefaultParam(java.lang.reflect.Method)>($r1014);
$r1016 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1015 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1017 = virtualinvoke $r1016.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"arrayTypesOverrideDefaultParam\", $r1015);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefaultParam(java.lang.reflect.Method)>($r1017);
$r1019 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1018 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1020 = virtualinvoke $r1019.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"markerParam\", $r1018);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarkerParam(java.lang.reflect.Method)>($r1020);
$r1022 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1021 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1023 = virtualinvoke $r1022.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteParam\", $r1021);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteParam(java.lang.reflect.Method)>($r1023);
$r1025 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1024 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1026 = virtualinvoke $r1025.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortParam\", $r1024);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortParam(java.lang.reflect.Method)>($r1026);
$r1028 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1027 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1029 = virtualinvoke $r1028.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntParam\", $r1027);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntParam(java.lang.reflect.Method)>($r1029);
$r1031 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1030 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1032 = virtualinvoke $r1031.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongParam\", $r1030);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongParam(java.lang.reflect.Method)>($r1032);
$r1034 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1033 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1035 = virtualinvoke $r1034.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharParam\", $r1033);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharParam(java.lang.reflect.Method)>($r1035);
$r1037 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1036 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1038 = virtualinvoke $r1037.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatParam\", $r1036);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatParam(java.lang.reflect.Method)>($r1038);
$r1040 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1039 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1041 = virtualinvoke $r1040.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleParam\", $r1039);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleParam(java.lang.reflect.Method)>($r1041);
$r1043 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1042 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1044 = virtualinvoke $r1043.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanParam\", $r1042);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanParam(java.lang.reflect.Method)>($r1044);
$r1046 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1045 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1047 = virtualinvoke $r1046.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringParam\", $r1045);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringParam(java.lang.reflect.Method)>($r1047);
$r1049 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1048 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1050 = virtualinvoke $r1049.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassParam\", $r1048);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassParam(java.lang.reflect.Method)>($r1050);
$r1052 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1051 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1053 = virtualinvoke $r1052.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumParam\", $r1051);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumParam(java.lang.reflect.Method)>($r1053);
$r1055 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1054 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1056 = virtualinvoke $r1055.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteOvrdDefParam\", $r1054);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDefParam(java.lang.reflect.Method)>($r1056);
$r1058 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1057 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1059 = virtualinvoke $r1058.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortOvrdDefParam\", $r1057);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDefParam(java.lang.reflect.Method)>($r1059);
$r1061 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1060 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1062 = virtualinvoke $r1061.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntOvrdDefParam\", $r1060);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDefParam(java.lang.reflect.Method)>($r1062);
$r1064 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1063 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1065 = virtualinvoke $r1064.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongOvrdDefParam\", $r1063);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDefParam(java.lang.reflect.Method)>($r1065);
$r1067 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1066 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1068 = virtualinvoke $r1067.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharOvrdDefParam\", $r1066);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDefParam(java.lang.reflect.Method)>($r1068);
$r1070 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1069 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1071 = virtualinvoke $r1070.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatOvrdDefParam\", $r1069);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDefParam(java.lang.reflect.Method)>($r1071);
$r1073 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1072 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1074 = virtualinvoke $r1073.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleOvrdDefParam\", $r1072);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDefParam(java.lang.reflect.Method)>($r1074);
$r1076 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1075 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1077 = virtualinvoke $r1076.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanOvrdDefParam\", $r1075);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDefParam(java.lang.reflect.Method)>($r1077);
$r1079 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1078 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1080 = virtualinvoke $r1079.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringOvrdDefParam\", $r1078);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDefParam(java.lang.reflect.Method)>($r1080);
$r1082 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1081 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1083 = virtualinvoke $r1082.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassOvrdDefParam\", $r1081);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDefParam(java.lang.reflect.Method)>($r1083);
$r1085 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1084 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1086 = virtualinvoke $r1085.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumOvrdDefParam\", $r1084);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDefParam(java.lang.reflect.Method)>($r1086);
$r1088 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1087 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1089 = virtualinvoke $r1088.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteAcceptDefParam\", $r1087);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDefParam(java.lang.reflect.Method)>($r1089);
$r1091 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1090 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1092 = virtualinvoke $r1091.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortAcceptDefParam\", $r1090);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDefParam(java.lang.reflect.Method)>($r1092);
$r1094 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1093 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1095 = virtualinvoke $r1094.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntAcceptDefParam\", $r1093);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDefParam(java.lang.reflect.Method)>($r1095);
$r1097 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1096 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1098 = virtualinvoke $r1097.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongAcceptDefParam\", $r1096);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDefParam(java.lang.reflect.Method)>($r1098);
$r1100 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1099 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1101 = virtualinvoke $r1100.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharAcceptDefParam\", $r1099);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDefParam(java.lang.reflect.Method)>($r1101);
$r1103 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1102 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1104 = virtualinvoke $r1103.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatAcceptDefParam\", $r1102);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDefParam(java.lang.reflect.Method)>($r1104);
$r1106 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1105 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1107 = virtualinvoke $r1106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleAcceptDefParam\", $r1105);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDefParam(java.lang.reflect.Method)>($r1107);
$r1109 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1108 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1110 = virtualinvoke $r1109.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanAcceptDefParam\", $r1108);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDefParam(java.lang.reflect.Method)>($r1110);
$r1112 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1111 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1113 = virtualinvoke $r1112.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringAcceptDefParam\", $r1111);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDefParam(java.lang.reflect.Method)>($r1113);
$r1115 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1114 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1116 = virtualinvoke $r1115.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassAcceptDefParam\", $r1114);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDefParam(java.lang.reflect.Method)>($r1116);
$r1118 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1117 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1119 = virtualinvoke $r1118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumAcceptDefParam\", $r1117);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDefParam(java.lang.reflect.Method)>($r1119);
$r1121 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1120 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1122 = virtualinvoke $r1121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrEmptyParam\", $r1120);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmptyParam(java.lang.reflect.Method)>($r1122);
$r1124 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1123 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1125 = virtualinvoke $r1124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrEmptyParam\", $r1123);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmptyParam(java.lang.reflect.Method)>($r1125);
$r1127 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1126 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1128 = virtualinvoke $r1127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrEmptyParam\", $r1126);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmptyParam(java.lang.reflect.Method)>($r1128);
$r1130 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1129 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1131 = virtualinvoke $r1130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrEmptyParam\", $r1129);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmptyParam(java.lang.reflect.Method)>($r1131);
$r1133 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1132 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1134 = virtualinvoke $r1133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrEmptyParam\", $r1132);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmptyParam(java.lang.reflect.Method)>($r1134);
$r1136 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1135 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1137 = virtualinvoke $r1136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrEmptyParam\", $r1135);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmptyParam(java.lang.reflect.Method)>($r1137);
$r1139 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1138 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1140 = virtualinvoke $r1139.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrEmptyParam\", $r1138);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmptyParam(java.lang.reflect.Method)>($r1140);
$r1142 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1141 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1143 = virtualinvoke $r1142.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrEmptyParam\", $r1141);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmptyParam(java.lang.reflect.Method)>($r1143);
$r1145 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1144 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1146 = virtualinvoke $r1145.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrEmptyParam\", $r1144);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmptyParam(java.lang.reflect.Method)>($r1146);
$r1148 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1147 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1149 = virtualinvoke $r1148.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrEmptyParam\", $r1147);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmptyParam(java.lang.reflect.Method)>($r1149);
$r1151 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1150 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1152 = virtualinvoke $r1151.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrEmptyParam\", $r1150);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmptyParam(java.lang.reflect.Method)>($r1152);
$r1154 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1153 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1155 = virtualinvoke $r1154.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOneParam\", $r1153);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOneParam(java.lang.reflect.Method)>($r1155);
$r1157 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1156 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1158 = virtualinvoke $r1157.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOneParam\", $r1156);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOneParam(java.lang.reflect.Method)>($r1158);
$r1160 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1159 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1161 = virtualinvoke $r1160.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOneParam\", $r1159);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOneParam(java.lang.reflect.Method)>($r1161);
$r1163 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1162 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1164 = virtualinvoke $r1163.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOneParam\", $r1162);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOneParam(java.lang.reflect.Method)>($r1164);
$r1166 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1165 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1167 = virtualinvoke $r1166.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOneParam\", $r1165);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOneParam(java.lang.reflect.Method)>($r1167);
$r1169 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1168 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1170 = virtualinvoke $r1169.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOneParam\", $r1168);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOneParam(java.lang.reflect.Method)>($r1170);
$r1172 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1171 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1173 = virtualinvoke $r1172.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOneParam\", $r1171);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOneParam(java.lang.reflect.Method)>($r1173);
$r1175 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1174 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1176 = virtualinvoke $r1175.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOneParam\", $r1174);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOneParam(java.lang.reflect.Method)>($r1176);
$r1178 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1177 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1179 = virtualinvoke $r1178.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOneParam\", $r1177);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOneParam(java.lang.reflect.Method)>($r1179);
$r1181 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1180 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1182 = virtualinvoke $r1181.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOneParam\", $r1180);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOneParam(java.lang.reflect.Method)>($r1182);
$r1184 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1183 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1185 = virtualinvoke $r1184.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOneParam\", $r1183);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOneParam(java.lang.reflect.Method)>($r1185);
$r1187 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1186 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1188 = virtualinvoke $r1187.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrTwoParam\", $r1186);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwoParam(java.lang.reflect.Method)>($r1188);
$r1190 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1189 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1191 = virtualinvoke $r1190.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrTwoParam\", $r1189);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwoParam(java.lang.reflect.Method)>($r1191);
$r1193 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1192 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1194 = virtualinvoke $r1193.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrTwoParam\", $r1192);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwoParam(java.lang.reflect.Method)>($r1194);
$r1196 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1195 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1197 = virtualinvoke $r1196.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrTwoParam\", $r1195);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwoParam(java.lang.reflect.Method)>($r1197);
$r1199 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1198 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1200 = virtualinvoke $r1199.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrTwoParam\", $r1198);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwoParam(java.lang.reflect.Method)>($r1200);
$r1202 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1201 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1203 = virtualinvoke $r1202.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrTwoParam\", $r1201);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwoParam(java.lang.reflect.Method)>($r1203);
$r1205 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1204 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1206 = virtualinvoke $r1205.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrTwoParam\", $r1204);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwoParam(java.lang.reflect.Method)>($r1206);
$r1208 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1207 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1209 = virtualinvoke $r1208.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrTwoParam\", $r1207);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwoParam(java.lang.reflect.Method)>($r1209);
$r1211 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1210 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1212 = virtualinvoke $r1211.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrTwoParam\", $r1210);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwoParam(java.lang.reflect.Method)>($r1212);
$r1214 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1213 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1215 = virtualinvoke $r1214.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrTwoParam\", $r1213);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwoParam(java.lang.reflect.Method)>($r1215);
$r1217 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1216 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1218 = virtualinvoke $r1217.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrTwoParam\", $r1216);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwoParam(java.lang.reflect.Method)>($r1218);
$r1220 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1219 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1221 = virtualinvoke $r1220.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrOvrdDefParam\", $r1219);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDefParam(java.lang.reflect.Method)>($r1221);
$r1223 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1222 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1224 = virtualinvoke $r1223.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrOvrdDefParam\", $r1222);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDefParam(java.lang.reflect.Method)>($r1224);
$r1226 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1225 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1227 = virtualinvoke $r1226.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrOvrdDefParam\", $r1225);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDefParam(java.lang.reflect.Method)>($r1227);
$r1229 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1228 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1230 = virtualinvoke $r1229.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrOvrdDefParam\", $r1228);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDefParam(java.lang.reflect.Method)>($r1230);
$r1232 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1231 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1233 = virtualinvoke $r1232.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrOvrdDefParam\", $r1231);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDefParam(java.lang.reflect.Method)>($r1233);
$r1235 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1234 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1236 = virtualinvoke $r1235.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrOvrdDefParam\", $r1234);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDefParam(java.lang.reflect.Method)>($r1236);
$r1238 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1237 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1239 = virtualinvoke $r1238.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrOvrdDefParam\", $r1237);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDefParam(java.lang.reflect.Method)>($r1239);
$r1241 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1240 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1242 = virtualinvoke $r1241.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrOvrdDefParam\", $r1240);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDefParam(java.lang.reflect.Method)>($r1242);
$r1244 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1243 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1245 = virtualinvoke $r1244.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrOvrdDefParam\", $r1243);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDefParam(java.lang.reflect.Method)>($r1245);
$r1247 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1246 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1248 = virtualinvoke $r1247.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrOvrdDefParam\", $r1246);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDefParam(java.lang.reflect.Method)>($r1248);
$r1250 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1249 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1251 = virtualinvoke $r1250.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrOvrdDefParam\", $r1249);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDefParam(java.lang.reflect.Method)>($r1251);
$r1253 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1252 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1254 = virtualinvoke $r1253.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberByteArrAcceptDefParam\", $r1252);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDefParam(java.lang.reflect.Method)>($r1254);
$r1256 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1255 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1257 = virtualinvoke $r1256.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberShortArrAcceptDefParam\", $r1255);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDefParam(java.lang.reflect.Method)>($r1257);
$r1259 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1258 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1260 = virtualinvoke $r1259.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberIntArrAcceptDefParam\", $r1258);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDefParam(java.lang.reflect.Method)>($r1260);
$r1262 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1261 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1263 = virtualinvoke $r1262.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberLongArrAcceptDefParam\", $r1261);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDefParam(java.lang.reflect.Method)>($r1263);
$r1265 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1264 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1266 = virtualinvoke $r1265.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberCharArrAcceptDefParam\", $r1264);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDefParam(java.lang.reflect.Method)>($r1266);
$r1268 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1267 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1269 = virtualinvoke $r1268.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberFloatArrAcceptDefParam\", $r1267);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDefParam(java.lang.reflect.Method)>($r1269);
$r1271 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1270 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1272 = virtualinvoke $r1271.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberDoubleArrAcceptDefParam\", $r1270);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDefParam(java.lang.reflect.Method)>($r1272);
$r1274 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1273 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1275 = virtualinvoke $r1274.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberBooleanArrAcceptDefParam\", $r1273);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDefParam(java.lang.reflect.Method)>($r1275);
$r1277 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1276 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1278 = virtualinvoke $r1277.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberStringArrAcceptDefParam\", $r1276);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDefParam(java.lang.reflect.Method)>($r1278);
$r1280 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1279 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1281 = virtualinvoke $r1280.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberClassArrAcceptDefParam\", $r1279);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDefParam(java.lang.reflect.Method)>($r1281);
$r1283 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1282 = <javaT.lang.'annotation'.UnitTest: java.lang.Class[] Y>;
$r1284 = virtualinvoke $r1283.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"SingleMemberEnumArrAcceptDefParam\", $r1282);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDefParam(java.lang.reflect.Method)>($r1284);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypes(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkScalarTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes0(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes1(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypes2(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesOverrideDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkArrayTypesAcceptDefault(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkMarker(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/markerClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByte(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShort(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberInt(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLong(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberChar(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloat(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDouble(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBoolean(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberString(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClass(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnum(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrEmpty(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOne(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrTwo(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrOvrdDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberByteArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberShortArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberIntArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberLongArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberCharArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberFloatArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberDoubleArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberBooleanArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberStringArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberClassArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSingleMemberEnumArrAcceptDef(java.lang.reflect.AnnotatedElement)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\");
$r1285 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1286 = virtualinvoke $r1285.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", $r1286, class \"LjavaT/lang/annotation/ScalarTypes;\");
$r1287 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1288 = virtualinvoke $r1287.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1288, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1289 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1290 = virtualinvoke $r1289.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1290, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1291 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1292 = virtualinvoke $r1291.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"emptyArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1292, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1293 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1294 = virtualinvoke $r1293.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1294, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1295 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1296 = virtualinvoke $r1295.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1296, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1297 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1298 = virtualinvoke $r1297.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1298, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1299 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1300 = virtualinvoke $r1299.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1300, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1301 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1302 = virtualinvoke $r1301.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"markerField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", $r1302, class \"LjavaT/lang/annotation/Marker;\");
$r1303 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1304 = virtualinvoke $r1303.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", $r1304, class \"LjavaT/lang/annotation/SingleMemberByte;\");
$r1305 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1306 = virtualinvoke $r1305.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", $r1306, class \"LjavaT/lang/annotation/SingleMemberShort;\");
$r1307 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1308 = virtualinvoke $r1307.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", $r1308, class \"LjavaT/lang/annotation/SingleMemberInt;\");
$r1309 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1310 = virtualinvoke $r1309.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", $r1310, class \"LjavaT/lang/annotation/SingleMemberLong;\");
$r1311 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1312 = virtualinvoke $r1311.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", $r1312, class \"LjavaT/lang/annotation/SingleMemberChar;\");
$r1313 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1314 = virtualinvoke $r1313.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", $r1314, class \"LjavaT/lang/annotation/SingleMemberFloat;\");
$r1315 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1316 = virtualinvoke $r1315.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", $r1316, class \"LjavaT/lang/annotation/SingleMemberDouble;\");
$r1317 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1318 = virtualinvoke $r1317.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", $r1318, class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
$r1319 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1320 = virtualinvoke $r1319.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", $r1320, class \"LjavaT/lang/annotation/SingleMemberString;\");
$r1321 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1322 = virtualinvoke $r1321.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", $r1322, class \"LjavaT/lang/annotation/SingleMemberClass;\");
$r1323 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1324 = virtualinvoke $r1323.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", $r1324, class \"LjavaT/lang/annotation/SingleMemberEnum;\");
$r1325 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1326 = virtualinvoke $r1325.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1326, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1327 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1328 = virtualinvoke $r1327.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1328, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1329 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1330 = virtualinvoke $r1329.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1330, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1331 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1332 = virtualinvoke $r1331.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1332, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1333 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1334 = virtualinvoke $r1333.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1334, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1335 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1336 = virtualinvoke $r1335.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1336, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1337 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1338 = virtualinvoke $r1337.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1338, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1339 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1340 = virtualinvoke $r1339.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1340, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1341 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1342 = virtualinvoke $r1341.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1342, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1343 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1344 = virtualinvoke $r1343.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1344, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1345 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1346 = virtualinvoke $r1345.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1346, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1347 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1348 = virtualinvoke $r1347.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1348, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1349 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1350 = virtualinvoke $r1349.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1350, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1351 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1352 = virtualinvoke $r1351.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1352, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1353 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1354 = virtualinvoke $r1353.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1354, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1355 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1356 = virtualinvoke $r1355.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1356, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1357 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1358 = virtualinvoke $r1357.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1358, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1359 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1360 = virtualinvoke $r1359.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1360, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1361 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1362 = virtualinvoke $r1361.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1362, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1363 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1364 = virtualinvoke $r1363.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1364, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1365 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1366 = virtualinvoke $r1365.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1366, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1367 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1368 = virtualinvoke $r1367.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1368, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1369 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1370 = virtualinvoke $r1369.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1370, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1371 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1372 = virtualinvoke $r1371.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1372, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1373 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1374 = virtualinvoke $r1373.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1374, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1375 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1376 = virtualinvoke $r1375.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1376, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1377 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1378 = virtualinvoke $r1377.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1378, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1379 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1380 = virtualinvoke $r1379.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1380, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1381 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1382 = virtualinvoke $r1381.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1382, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1383 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1384 = virtualinvoke $r1383.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1384, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1385 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1386 = virtualinvoke $r1385.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1386, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1387 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1388 = virtualinvoke $r1387.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1388, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1389 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1390 = virtualinvoke $r1389.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrEmptyField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1390, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1391 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1392 = virtualinvoke $r1391.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1392, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1393 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1394 = virtualinvoke $r1393.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1394, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1395 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1396 = virtualinvoke $r1395.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1396, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1397 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1398 = virtualinvoke $r1397.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1398, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1399 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1400 = virtualinvoke $r1399.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1400, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1401 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1402 = virtualinvoke $r1401.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1402, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1403 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1404 = virtualinvoke $r1403.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1404, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1405 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1406 = virtualinvoke $r1405.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1406, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1407 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1408 = virtualinvoke $r1407.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1408, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1409 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1410 = virtualinvoke $r1409.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1410, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1411 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1412 = virtualinvoke $r1411.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1412, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1413 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1414 = virtualinvoke $r1413.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1414, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1415 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1416 = virtualinvoke $r1415.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1416, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1417 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1418 = virtualinvoke $r1417.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1418, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1419 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1420 = virtualinvoke $r1419.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1420, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1421 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1422 = virtualinvoke $r1421.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1422, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1423 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1424 = virtualinvoke $r1423.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1424, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1425 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1426 = virtualinvoke $r1425.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1426, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1427 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1428 = virtualinvoke $r1427.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1428, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1429 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1430 = virtualinvoke $r1429.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1430, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1431 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1432 = virtualinvoke $r1431.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1432, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1433 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1434 = virtualinvoke $r1433.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1434, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1435 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1436 = virtualinvoke $r1435.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1436, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1437 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1438 = virtualinvoke $r1437.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1438, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1439 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1440 = virtualinvoke $r1439.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1440, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1441 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1442 = virtualinvoke $r1441.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1442, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1443 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1444 = virtualinvoke $r1443.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1444, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1445 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1446 = virtualinvoke $r1445.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1446, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1447 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1448 = virtualinvoke $r1447.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1448, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1449 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1450 = virtualinvoke $r1449.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1450, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1451 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1452 = virtualinvoke $r1451.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1452, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1453 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1454 = virtualinvoke $r1453.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1454, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1455 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1456 = virtualinvoke $r1455.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1456, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1457 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1458 = virtualinvoke $r1457.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1458, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1459 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1460 = virtualinvoke $r1459.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1460, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1461 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1462 = virtualinvoke $r1461.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1462, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1463 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1464 = virtualinvoke $r1463.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1464, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1465 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1466 = virtualinvoke $r1465.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1466, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1467 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1468 = virtualinvoke $r1467.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1468, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1469 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1470 = virtualinvoke $r1469.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1470, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1471 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1472 = virtualinvoke $r1471.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1472, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1473 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1474 = virtualinvoke $r1473.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1474, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1475 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1476 = virtualinvoke $r1475.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1476, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1477 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1478 = virtualinvoke $r1477.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkEquals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1478, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1479 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1480 = virtualinvoke $r1479.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", $r1480, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1481 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1482 = virtualinvoke $r1481.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"scalarTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", $r1482, class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
$r1483 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1484 = virtualinvoke $r1483.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", $r1484, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1485 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1486 = virtualinvoke $r1485.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"twoElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", $r1486, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1487 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1488 = virtualinvoke $r1487.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"singleElementArrayTypesField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", $r1488, class \"LjavaT/lang/annotation/ArrayTypes;\");
$r1489 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1490 = virtualinvoke $r1489.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesAcceptDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", $r1490, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1491 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1492 = virtualinvoke $r1491.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"arrayTypesOverrideDefaultField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", $r1492, class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
$r1493 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1494 = virtualinvoke $r1493.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", $r1494, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1495 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1496 = virtualinvoke $r1495.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", $r1496, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1497 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1498 = virtualinvoke $r1497.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", $r1498, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1499 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1500 = virtualinvoke $r1499.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", $r1500, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1501 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1502 = virtualinvoke $r1501.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", $r1502, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1503 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1504 = virtualinvoke $r1503.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", $r1504, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1505 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1506 = virtualinvoke $r1505.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", $r1506, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1507 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1508 = virtualinvoke $r1507.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", $r1508, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1509 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1510 = virtualinvoke $r1509.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", $r1510, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1511 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1512 = virtualinvoke $r1511.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", $r1512, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1513 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1514 = virtualinvoke $r1513.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", $r1514, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1515 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1516 = virtualinvoke $r1515.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", $r1516, class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
$r1517 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1518 = virtualinvoke $r1517.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", $r1518, class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
$r1519 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1520 = virtualinvoke $r1519.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", $r1520, class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
$r1521 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1522 = virtualinvoke $r1521.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", $r1522, class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
$r1523 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1524 = virtualinvoke $r1523.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", $r1524, class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
$r1525 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1526 = virtualinvoke $r1525.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", $r1526, class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
$r1527 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1528 = virtualinvoke $r1527.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", $r1528, class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
$r1529 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1530 = virtualinvoke $r1529.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", $r1530, class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
$r1531 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1532 = virtualinvoke $r1531.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", $r1532, class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
$r1533 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1534 = virtualinvoke $r1533.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", $r1534, class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
$r1535 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1536 = virtualinvoke $r1535.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", $r1536, class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
$r1537 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1538 = virtualinvoke $r1537.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", $r1538, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1539 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1540 = virtualinvoke $r1539.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", $r1540, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1541 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1542 = virtualinvoke $r1541.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", $r1542, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1543 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1544 = virtualinvoke $r1543.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", $r1544, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1545 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1546 = virtualinvoke $r1545.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", $r1546, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1547 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1548 = virtualinvoke $r1547.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", $r1548, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1549 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1550 = virtualinvoke $r1549.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", $r1550, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1551 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1552 = virtualinvoke $r1551.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", $r1552, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1553 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1554 = virtualinvoke $r1553.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", $r1554, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1555 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1556 = virtualinvoke $r1555.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", $r1556, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1557 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1558 = virtualinvoke $r1557.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", $r1558, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1559 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1560 = virtualinvoke $r1559.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", $r1560, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1561 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1562 = virtualinvoke $r1561.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", $r1562, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1563 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1564 = virtualinvoke $r1563.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", $r1564, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1565 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1566 = virtualinvoke $r1565.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", $r1566, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1567 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1568 = virtualinvoke $r1567.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", $r1568, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1569 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1570 = virtualinvoke $r1569.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", $r1570, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1571 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1572 = virtualinvoke $r1571.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", $r1572, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1573 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1574 = virtualinvoke $r1573.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", $r1574, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1575 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1576 = virtualinvoke $r1575.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", $r1576, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1577 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1578 = virtualinvoke $r1577.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", $r1578, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1579 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1580 = virtualinvoke $r1579.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrTwoField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", $r1580, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1581 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1582 = virtualinvoke $r1581.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", $r1582, class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
$r1583 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1584 = virtualinvoke $r1583.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", $r1584, class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
$r1585 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1586 = virtualinvoke $r1585.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", $r1586, class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
$r1587 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1588 = virtualinvoke $r1587.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", $r1588, class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
$r1589 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1590 = virtualinvoke $r1589.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", $r1590, class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
$r1591 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1592 = virtualinvoke $r1591.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", $r1592, class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
$r1593 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1594 = virtualinvoke $r1593.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", $r1594, class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
$r1595 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1596 = virtualinvoke $r1595.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", $r1596, class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
$r1597 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1598 = virtualinvoke $r1597.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", $r1598, class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
$r1599 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1600 = virtualinvoke $r1599.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", $r1600, class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
$r1601 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1602 = virtualinvoke $r1601.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOneField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", $r1602, class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
$r1603 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1604 = virtualinvoke $r1603.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", $r1604, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1605 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1606 = virtualinvoke $r1605.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", $r1606, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1607 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1608 = virtualinvoke $r1607.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", $r1608, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1609 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1610 = virtualinvoke $r1609.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", $r1610, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1611 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1612 = virtualinvoke $r1611.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", $r1612, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1613 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1614 = virtualinvoke $r1613.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", $r1614, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1615 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1616 = virtualinvoke $r1615.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", $r1616, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1617 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1618 = virtualinvoke $r1617.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", $r1618, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1619 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1620 = virtualinvoke $r1619.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", $r1620, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1621 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1622 = virtualinvoke $r1621.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", $r1622, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1623 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1624 = virtualinvoke $r1623.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrAcceptDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", $r1624, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
$r1625 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1626 = virtualinvoke $r1625.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberByteArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", $r1626, class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
$r1627 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1628 = virtualinvoke $r1627.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberShortArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", $r1628, class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
$r1629 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1630 = virtualinvoke $r1629.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberIntArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", $r1630, class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
$r1631 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1632 = virtualinvoke $r1631.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberLongArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", $r1632, class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
$r1633 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1634 = virtualinvoke $r1633.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberCharArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", $r1634, class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
$r1635 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1636 = virtualinvoke $r1635.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberFloatArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", $r1636, class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
$r1637 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1638 = virtualinvoke $r1637.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberDoubleArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", $r1638, class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
$r1639 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1640 = virtualinvoke $r1639.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberBooleanArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", $r1640, class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
$r1641 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1642 = virtualinvoke $r1641.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberStringArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", $r1642, class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
$r1643 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1644 = virtualinvoke $r1643.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberClassArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", $r1644, class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
$r1645 = class \"LjavaT/lang/annotation/UnitTest;\";
$r1646 = virtualinvoke $r1645.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"SingleMemberEnumArrOvrdDefField\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkUnequals(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", $r1646, class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesClass;\", class \"LjavaT/lang/annotation/ScalarTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/scalarTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ScalarTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/emptyArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/singleElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/twoElementArrayTypesClass;\", class \"LjavaT/lang/annotation/ArrayTypes;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesOverrideDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/arrayTypesAcceptDefaultClass;\", class \"LjavaT/lang/annotation/ArrayTypesWithDefault;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/markerClass;\", class \"LjavaT/lang/annotation/Marker;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteClass;\", class \"LjavaT/lang/annotation/SingleMemberByte;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortClass;\", class \"LjavaT/lang/annotation/SingleMemberShort;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntClass;\", class \"LjavaT/lang/annotation/SingleMemberInt;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongClass;\", class \"LjavaT/lang/annotation/SingleMemberLong;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharClass;\", class \"LjavaT/lang/annotation/SingleMemberChar;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatClass;\", class \"LjavaT/lang/annotation/SingleMemberFloat;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleClass;\", class \"LjavaT/lang/annotation/SingleMemberDouble;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanClass;\", class \"LjavaT/lang/annotation/SingleMemberBoolean;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringClass;\", class \"LjavaT/lang/annotation/SingleMemberString;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassClass;\", class \"LjavaT/lang/annotation/SingleMemberClass;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumClass;\", class \"LjavaT/lang/annotation/SingleMemberEnum;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumWithDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrEmptyClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOneClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrTwoClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArray;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrOvrdDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberByteArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberByteArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberShortArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberShortArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberIntArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberIntArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberLongArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberLongArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberCharArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberCharArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberFloatArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberFloatArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberDoubleArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberDoubleArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberBooleanArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberBooleanArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberStringArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberStringArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberClassArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberClassArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkSerialization(java.lang.reflect.AnnotatedElement,java.lang.Class)>(class \"LjavaT/lang/annotation/SingleMemberEnumArrAcceptDefClass;\", class \"LjavaT/lang/annotation/SingleMemberEnumArrayDef;\");
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 1, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkInheritence(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Grandpa;\", 1, 1);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Dad;\", 0, 0);
staticinvoke <javaT.lang.'annotation'.UnitTest: void checkDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean,boolean)>(class \"LjavaT/lang/annotation/Son;\", 0, 1);
$r1648 = <java.lang.System: java.io.PrintStream out>;
$r1647 = new java.lang.StringBuilder;
specialinvoke $r1647.<java.lang.StringBuilder: void <init>()>();
$r1649 = virtualinvoke $r1647.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$i0 = <javaT.lang.'annotation'.UnitTest: int numTests>;
$r1650 = virtualinvoke $r1649.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r1651 = virtualinvoke $r1650.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests completed\");
$r1652 = virtualinvoke $r1651.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1648.<java.io.PrintStream: void println(java.lang.String)>($r1652);
$i1 = <javaT.lang.'annotation'.UnitTest: int failCount>;
if $i1 == 0 goto $r1653 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 0 ] [succs: ]
$r1653 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r1653.<java.io.PrintStream: void println(java.lang.String)>(\"Success.\");
return;
";
}
