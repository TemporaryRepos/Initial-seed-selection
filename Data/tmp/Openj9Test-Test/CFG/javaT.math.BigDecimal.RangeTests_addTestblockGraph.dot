digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal;
r1 := @parameter1: java.math.BigDecimal;
r2 := @parameter2: java.math.BigDecimal;
i0 = 0;
r25 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);
$z0 = virtualinvoke r25.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z0 != 0 goto r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r24);
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
$z1 = virtualinvoke r26.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z1 != 0 goto return i0;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
i0 = i0 + 1;
"
    "Block 4:
[preds: 2 3 ] [succs: ]
return i0;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal;
r1 := @parameter1: java.math.BigDecimal;
r2 := @parameter2: java.math.BigDecimal;
i0 = 0;
r25 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);
$z0 = virtualinvoke r25.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z0 != 0 goto r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r24);
i0 = i0 + 1;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal;
r1 := @parameter1: java.math.BigDecimal;
r2 := @parameter2: java.math.BigDecimal;
i0 = 0;
r25 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);
$z0 = virtualinvoke r25.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z0 != 0 goto r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
$z1 = virtualinvoke r26.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z1 != 0 goto return i0;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r15 = <java.lang.System: java.io.PrintStream out>;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r24);
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
$z1 = virtualinvoke r26.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z1 != 0 goto return i0;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
$z1 = virtualinvoke r26.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z1 != 0 goto return i0;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
i0 = i0 + 1;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r26 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r0);
$z1 = virtualinvoke r26.<java.math.BigDecimal: boolean equals(java.lang.Object)>(r2);
if $z1 != 0 goto return i0;
"->"Block 4:
[preds: 2 3 ] [succs: ]
return i0;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sum:\");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" + \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" == \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"; expected  \");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);
i0 = i0 + 1;
"->"Block 4:
[preds: 2 3 ] [succs: ]
return i0;
";
}
