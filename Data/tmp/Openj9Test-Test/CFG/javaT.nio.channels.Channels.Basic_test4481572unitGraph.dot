digraph "unitGraph" {
    "r1 := @parameter0: java.io.File"
    "$r0 = new javaT.nio.channels.Channels.ExtendedFileInputStream"
    "specialinvoke $r0.<javaT.nio.channels.Channels.ExtendedFileInputStream: void <init>(java.io.File)>(r1)"
    "r2 = $r0"
    "r3 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r2)"
    "r4 = newarray (byte)[9000]"
    "r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4)"
    "i0 = 1"
    "i1 = 0"
    "if i0 <= 0 goto interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()"
    "i1 = i1 + i0"
    "i0 = interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r5)"
    "goto [?= (branch)]"
    "interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()"
    "virtualinvoke r2.<javaT.nio.channels.Channels.ExtendedFileInputStream: void close()>()"
    "return"
    "r1 := @parameter0: java.io.File"->"$r0 = new javaT.nio.channels.Channels.ExtendedFileInputStream";
    "$r0 = new javaT.nio.channels.Channels.ExtendedFileInputStream"->"specialinvoke $r0.<javaT.nio.channels.Channels.ExtendedFileInputStream: void <init>(java.io.File)>(r1)";
    "specialinvoke $r0.<javaT.nio.channels.Channels.ExtendedFileInputStream: void <init>(java.io.File)>(r1)"->"r2 = $r0";
    "r2 = $r0"->"r3 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r2)";
    "r3 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r2)"->"r4 = newarray (byte)[9000]";
    "r4 = newarray (byte)[9000]"->"r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4)";
    "r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4)"->"i0 = 1";
    "i0 = 1"->"i1 = 0";
    "i1 = 0"->"if i0 <= 0 goto interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()";
    "if i0 <= 0 goto interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()"->"i1 = i1 + i0";
    "if i0 <= 0 goto interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()"->"interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()";
    "i1 = i1 + i0"->"i0 = interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r5)";
    "i0 = interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r5)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 <= 0 goto interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()";
    "interfaceinvoke r3.<java.nio.channels.ReadableByteChannel: void close()>()"->"virtualinvoke r2.<javaT.nio.channels.Channels.ExtendedFileInputStream: void close()>()";
    "virtualinvoke r2.<javaT.nio.channels.Channels.ExtendedFileInputStream: void close()>()"->"return";
}
