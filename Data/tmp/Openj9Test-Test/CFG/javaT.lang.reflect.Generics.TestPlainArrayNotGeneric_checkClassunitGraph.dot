digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Class"
    "r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()"
    "r28 = r1"
    "i0 = lengthof r28"
    "i1 = 0"
    "if i1 >= i0 goto r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()"
    "r29 = r28[i1]"
    "$r13 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$r14 = new java.lang.StringBuilder"
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"return type of method \")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r13, $r17)"
    "$r18 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r19 = new java.lang.StringBuilder"
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r18, \"parameter\", $r22)"
    "$r23 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r24 = new java.lang.StringBuilder"
    "specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r23, \"type parameter\", $r27)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()"
    "r31 = r30"
    "i2 = lengthof r31"
    "i3 = 0"
    "if i3 >= i2 goto r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()"
    "r32 = r31[i3]"
    "$r3 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r3, \"parameter\", $r7)"
    "$r8 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r8, \"type parameter\", $r12)"
    "i3 = i3 + 1"
    "r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()"
    "r34 = r33"
    "i4 = lengthof r34"
    "i5 = 0"
    "if i5 >= i4 goto return"
    "r2 = r34[i5]"
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void checkClass(java.lang.Class)>(r2)"
    "i5 = i5 + 1"
    "return"
    "r0 := @parameter0: java.lang.Class"->"r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()";
    "r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()"->"r28 = r1";
    "r28 = r1"->"i0 = lengthof r28";
    "i0 = lengthof r28"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()";
    "if i1 >= i0 goto r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()"->"r29 = r28[i1]";
    "if i1 >= i0 goto r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()"->"r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()";
    "r29 = r28[i1]"->"$r13 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "$r13 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$r14 = new java.lang.StringBuilder";
    "$r14 = new java.lang.StringBuilder"->"specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"return type of method \")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"return type of method \")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r13, $r17)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type,java.lang.String)>($r13, $r17)"->"$r18 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r18 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r19 = new java.lang.StringBuilder";
    "$r19 = new java.lang.StringBuilder"->"specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r18, \"parameter\", $r22)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r18, \"parameter\", $r22)"->"$r23 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r23 = virtualinvoke r29.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r24 = new java.lang.StringBuilder";
    "$r24 = new java.lang.StringBuilder"->"specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"method \")"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29)"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r23, \"type parameter\", $r27)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r23, \"type parameter\", $r27)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()";
    "r30 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()"->"r31 = r30";
    "r31 = r30"->"i2 = lengthof r31";
    "i2 = lengthof r31"->"i3 = 0";
    "i3 = 0"->"if i3 >= i2 goto r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()";
    "if i3 >= i2 goto r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()"->"r32 = r31[i3]";
    "if i3 >= i2 goto r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()"->"r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()";
    "r32 = r31[i3]"->"$r3 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r3 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r3, \"parameter\", $r7)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r3, \"parameter\", $r7)"->"$r8 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r8 = virtualinvoke r32.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"constructor \")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r8, \"type parameter\", $r12)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void check(java.lang.reflect.Type[],java.lang.String,java.lang.String)>($r8, \"type parameter\", $r12)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i2 goto r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()";
    "r33 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>()"->"r34 = r33";
    "r34 = r33"->"i4 = lengthof r34";
    "i4 = lengthof r34"->"i5 = 0";
    "i5 = 0"->"if i5 >= i4 goto return";
    "if i5 >= i4 goto return"->"r2 = r34[i5]";
    "if i5 >= i4 goto return"->"return";
    "r2 = r34[i5]"->"staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void checkClass(java.lang.Class)>(r2)";
    "staticinvoke <javaT.lang.reflect.Generics.TestPlainArrayNotGeneric: void checkClass(java.lang.Class)>(r2)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i4 goto return";
}
