digraph "unitGraph" {
    "r0 := @this: javaT.text.Collator.IteratorTest"
    "r1 := @parameter0: java.text.CollationElementIterator"
    "r2 = specialinvoke r0.<javaT.text.Collator.IteratorTest: int[] getOrders(java.text.CollationElementIterator)>(r1)"
    "i5 = lengthof r2"
    "$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"
    "i6 = $i0"
    "if $i0 == -1 goto (branch)"
    "i5 = i5 + -1"
    "$i3 = r2[i5]"
    "if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"
    "$r17 = new java.lang.StringBuilder"
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \")"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"
    "$i4 = r2[i5]"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \")"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24)"
    "goto [?= (branch)]"
    "if i5 == 0 goto return"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6)"
    "virtualinvoke r1.<java.text.CollationElementIterator: void reset()>()"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \")"
    "$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()"
    "i7 = $i1"
    "if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"
    "$r12 = new java.lang.StringBuilder"
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7)"
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16)"
    "goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()]"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \")"
    "$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"
    "i8 = $i2"
    "if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8)"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11)"
    "goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()]"
    "return"
    "r0 := @this: javaT.text.Collator.IteratorTest"->"r1 := @parameter0: java.text.CollationElementIterator";
    "r1 := @parameter0: java.text.CollationElementIterator"->"r2 = specialinvoke r0.<javaT.text.Collator.IteratorTest: int[] getOrders(java.text.CollationElementIterator)>(r1)";
    "r2 = specialinvoke r0.<javaT.text.Collator.IteratorTest: int[] getOrders(java.text.CollationElementIterator)>(r1)"->"i5 = lengthof r2";
    "i5 = lengthof r2"->"$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()";
    "$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"->"i6 = $i0";
    "i6 = $i0"->"if $i0 == -1 goto (branch)";
    "if $i0 == -1 goto (branch)"->"i5 = i5 + -1";
    "if $i0 == -1 goto (branch)"->"if i5 == 0 goto return";
    "i5 = i5 + -1"->"$i3 = r2[i5]";
    "$i3 = r2[i5]"->"if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()";
    "if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"->"$r17 = new java.lang.StringBuilder";
    "if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"->"$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()";
    "$r17 = new java.lang.StringBuilder"->"specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \")"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"->"$i4 = r2[i5]";
    "$i4 = r2[i5]"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \")";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \")"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6)"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24)";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 == 0 goto return";
    "if i5 == 0 goto return"->"$r3 = new java.lang.StringBuilder";
    "if i5 == 0 goto return"->"return";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6)";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6)"->"virtualinvoke r1.<java.text.CollationElementIterator: void reset()>()";
    "virtualinvoke r1.<java.text.CollationElementIterator: void reset()>()"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \")";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \")"->"$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()";
    "$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()"->"i7 = $i1";
    "i7 = $i1"->"if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")";
    "if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"$r12 = new java.lang.StringBuilder";
    "if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")";
    "$r12 = new java.lang.StringBuilder"->"specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"->"$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7)"->"$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)";
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16)";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16)"->"goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()]";
    "goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()]"->"$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \")";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \")"->"$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()";
    "$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()"->"i8 = $i2";
    "i8 = $i2"->"if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")";
    "if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"$r7 = new java.lang.StringBuilder";
    "if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8)"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11)";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11)"->"goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()]";
    "goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()]"->"$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()";
    "virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\")"->"return";
}
