digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String"
    "r7 := @parameter1: javax.crypto.SecretKey"
    "r8 := @parameter2: java.security.spec.AlgorithmParameterSpec"
    "r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"
    "$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>()"
    "r23 = (javax.crypto.Mac) $r1"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>()"
    "$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>()"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4)"
    "$r5 = <java.lang.System: java.io.PrintStream out>"
    "$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>()"
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "z2 = 0"
    "virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18)"
    "goto [?= (branch)]"
    "$r21 := @caughtexception"
    "r24 = $r21"
    "z2 = 1"
    "if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"
    "$r32 = new java.lang.Exception"
    "specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>(\"Expected IllegalStateException not thrown\")"
    "throw $r32"
    "r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"
    "$r35 = (java.security.Key) r7"
    "virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8)"
    "$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()"
    "r26 = (javax.crypto.Mac) $r9"
    "$r10 = <java.lang.System: java.io.PrintStream out>"
    "$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>()"
    "$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>()"
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "$r13 = <java.lang.System: java.io.PrintStream out>"
    "$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>()"
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14)"
    "virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18)"
    "virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18)"
    "r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()"
    "r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>()"
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28)"
    "if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"
    "$r33 = new java.lang.Exception"
    "specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of init clone is different\")"
    "throw $r33"
    "$r15 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\")"
    "$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()"
    "r29 = (javax.crypto.Mac) $r16"
    "virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52)"
    "virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52)"
    "r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()"
    "r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>()"
    "$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31)"
    "if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>"
    "$r34 = new java.lang.Exception"
    "specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of updated clone is different\")"
    "throw $r34"
    "$r17 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#2 passed\")"
    "return"
    "r0 := @parameter0: java.lang.String"->"r7 := @parameter1: javax.crypto.SecretKey";
    "r7 := @parameter1: javax.crypto.SecretKey"->"r8 := @parameter2: java.security.spec.AlgorithmParameterSpec";
    "r8 := @parameter2: java.security.spec.AlgorithmParameterSpec"->"r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")";
    "r22 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"->"$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>()";
    "$r1 = virtualinvoke r22.<javax.crypto.Mac: java.lang.Object clone()>()"->"r23 = (javax.crypto.Mac) $r1";
    "r23 = (javax.crypto.Mac) $r1"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>()";
    "$r3 = virtualinvoke r23.<javax.crypto.Mac: java.security.Provider getProvider()>()"->"$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>()";
    "$r4 = virtualinvoke $r3.<java.security.Provider: java.lang.String toString()>()"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4)";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4)"->"$r5 = <java.lang.System: java.io.PrintStream out>";
    "$r5 = <java.lang.System: java.io.PrintStream out>"->"$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>()";
    "$r6 = virtualinvoke r23.<javax.crypto.Mac: java.lang.String getAlgorithm()>()"->"virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"z2 = 0";
    "z2 = 0"->"virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18)";
    "z2 = 0"->"$r21 := @caughtexception";
    "virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18)"->"goto [?= (branch)]";
    "virtualinvoke r23.<javax.crypto.Mac: void update(byte)>(18)"->"$r21 := @caughtexception";
    "goto [?= (branch)]"->"if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")";
    "$r21 := @caughtexception"->"r24 = $r21";
    "r24 = $r21"->"z2 = 1";
    "z2 = 1"->"if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")";
    "if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"->"$r32 = new java.lang.Exception";
    "if z2 != 0 goto r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"->"r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")";
    "$r32 = new java.lang.Exception"->"specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>(\"Expected IllegalStateException not thrown\")";
    "specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>(\"Expected IllegalStateException not thrown\")"->"throw $r32";
    "r25 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r0, \"SunJCE\")"->"$r35 = (java.security.Key) r7";
    "$r35 = (java.security.Key) r7"->"virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8)";
    "virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r35, r8)"->"$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()";
    "$r9 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()"->"r26 = (javax.crypto.Mac) $r9";
    "r26 = (javax.crypto.Mac) $r9"->"$r10 = <java.lang.System: java.io.PrintStream out>";
    "$r10 = <java.lang.System: java.io.PrintStream out>"->"$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>()";
    "$r11 = virtualinvoke r26.<javax.crypto.Mac: java.security.Provider getProvider()>()"->"$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.security.Provider: java.lang.String toString()>()"->"virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"$r13 = <java.lang.System: java.io.PrintStream out>";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>()";
    "$r14 = virtualinvoke r26.<javax.crypto.Mac: java.lang.String getAlgorithm()>()"->"virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14)";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14)"->"virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18)";
    "virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18)"->"virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18)";
    "virtualinvoke r26.<javax.crypto.Mac: void update(byte)>(18)"->"r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()";
    "r27 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()"->"r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>()";
    "r28 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>()"->"$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28)";
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r28)"->"if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>";
    "if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"->"$r33 = new java.lang.Exception";
    "if $z0 != 0 goto $r15 = <java.lang.System: java.io.PrintStream out>"->"$r15 = <java.lang.System: java.io.PrintStream out>";
    "$r33 = new java.lang.Exception"->"specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of init clone is different\")";
    "specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of init clone is different\")"->"throw $r33";
    "$r15 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\")";
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#1 passed\")"->"virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18)";
    "virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(18)"->"$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()";
    "$r16 = virtualinvoke r25.<javax.crypto.Mac: java.lang.Object clone()>()"->"r29 = (javax.crypto.Mac) $r16";
    "r29 = (javax.crypto.Mac) $r16"->"virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52)";
    "virtualinvoke r25.<javax.crypto.Mac: void update(byte)>(52)"->"virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52)";
    "virtualinvoke r29.<javax.crypto.Mac: void update(byte)>(52)"->"r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()";
    "r30 = virtualinvoke r25.<javax.crypto.Mac: byte[] doFinal()>()"->"r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>()";
    "r31 = virtualinvoke r29.<javax.crypto.Mac: byte[] doFinal()>()"->"$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31)";
    "$z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r30, r31)"->"if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>";
    "if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>"->"$r34 = new java.lang.Exception";
    "if $z1 != 0 goto $r17 = <java.lang.System: java.io.PrintStream out>"->"$r17 = <java.lang.System: java.io.PrintStream out>";
    "$r34 = new java.lang.Exception"->"specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of updated clone is different\")";
    "specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>(\"ERROR: MAC result of updated clone is different\")"->"throw $r34";
    "$r17 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#2 passed\")";
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"MAC check#2 passed\")"->"return";
}
