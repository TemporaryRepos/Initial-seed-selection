digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @parameter0: java.lang.String[];
$r0 = newarray (java.util.Map)[2];
$r1 = new java.util.HashMap;
specialinvoke $r1.<java.util.HashMap: void <init>()>();
$r0[0] = $r1;
$r2 = new java.util.TreeMap;
specialinvoke $r2.<java.util.TreeMap: void <init>()>();
$r0[1] = $r2;
r3 = $r0;
i1 = 0;
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$i0 = lengthof r3;
if i1 >= $i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = r3[i1];
interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"bananas\", null);
$r6 = r3[i1];
$r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();
$z0 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(\"bananas\");
if $z0 != 0 goto i1 = i1 + 1;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r8 = new java.lang.Exception;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Yes, we have no bananas: \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r12);
throw $r8;
"
    "Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= $i0 = lengthof r3];
"
    "Block 5:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @parameter0: java.lang.String[];
$r0 = newarray (java.util.Map)[2];
$r1 = new java.util.HashMap;
specialinvoke $r1.<java.util.HashMap: void <init>()>();
$r0[0] = $r1;
$r2 = new java.util.TreeMap;
specialinvoke $r2.<java.util.TreeMap: void <init>()>();
$r0[1] = $r2;
r3 = $r0;
i1 = 0;
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$i0 = lengthof r3;
if i1 >= $i0 goto return;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$i0 = lengthof r3;
if i1 >= $i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = r3[i1];
interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"bananas\", null);
$r6 = r3[i1];
$r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();
$z0 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(\"bananas\");
if $z0 != 0 goto i1 = i1 + 1;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$i0 = lengthof r3;
if i1 >= $i0 goto return;
"->"Block 5:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = r3[i1];
interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"bananas\", null);
$r6 = r3[i1];
$r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();
$z0 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(\"bananas\");
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 3:
[preds: 2 ] [succs: ]
$r8 = new java.lang.Exception;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Yes, we have no bananas: \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r12);
throw $r8;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = r3[i1];
interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"bananas\", null);
$r6 = r3[i1];
$r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();
$z0 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(\"bananas\");
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= $i0 = lengthof r3];
";
    "Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= $i0 = lengthof r3];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$i0 = lengthof r3;
if i1 >= $i0 goto return;
";
}
