digraph "unitGraph" {
    "r0 := @parameter0: java.util.zip.ZipOutputStream"
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void close()>()"
    "$r1 = new java.util.zip.ZipEntry"
    "specialinvoke $r1.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(\"\")"
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r1)"
    "$r2 = new java.lang.Exception"
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"write allowed after stream is closed\")"
    "throw $r2"
    "$r3 := @caughtexception"
    "r4 = $r3"
    "return"
    "r0 := @parameter0: java.util.zip.ZipOutputStream"->"virtualinvoke r0.<java.util.zip.ZipOutputStream: void close()>()";
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void close()>()"->"$r1 = new java.util.zip.ZipEntry";
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void close()>()"->"$r3 := @caughtexception";
    "$r1 = new java.util.zip.ZipEntry"->"specialinvoke $r1.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(\"\")";
    "$r1 = new java.util.zip.ZipEntry"->"$r3 := @caughtexception";
    "specialinvoke $r1.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(\"\")"->"virtualinvoke r0.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r1)";
    "specialinvoke $r1.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(\"\")"->"$r3 := @caughtexception";
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r1)"->"$r2 = new java.lang.Exception";
    "virtualinvoke r0.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r1)"->"$r3 := @caughtexception";
    "$r2 = new java.lang.Exception"->"specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"write allowed after stream is closed\")";
    "$r2 = new java.lang.Exception"->"$r3 := @caughtexception";
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"write allowed after stream is closed\")"->"throw $r2";
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"write allowed after stream is closed\")"->"$r3 := @caughtexception";
    "throw $r2"->"$r3 := @caughtexception";
    "$r3 := @caughtexception"->"r4 = $r3";
    "r4 = $r3"->"return";
}
