digraph "unitGraph" {
    "r1 := @parameter0: java.io.File"
    "$r0 = new java.io.FileOutputStream"
    "specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1)"
    "r2 = $r0"
    "r3 = virtualinvoke r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>()"
    "$r4 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>"
    "r5 = staticinvoke <java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.lang.String)>(r3, $r4)"
    "r6 = newarray (char)[40]"
    "$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "$r7 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "$i0 = virtualinvoke $r7.<java.lang.String: int length()>()"
    "virtualinvoke $r8.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r6, 0)"
    "i3 = 0"
    "$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"
    "if i3 >= $i1 goto virtualinvoke r5.<java.io.Writer: void flush()>()"
    "$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"
    "$i2 = virtualinvoke $r9.<java.lang.String: int length()>()"
    "virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>(r6, 0, $i2)"
    "i3 = i3 + 1"
    "goto [?= $i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]"
    "virtualinvoke r5.<java.io.Writer: void flush()>()"
    "virtualinvoke r5.<java.io.Writer: void close()>()"
    "virtualinvoke r2.<java.io.FileOutputStream: void close()>()"
    "return"
    "r1 := @parameter0: java.io.File"->"$r0 = new java.io.FileOutputStream";
    "$r0 = new java.io.FileOutputStream"->"specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1)";
    "specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1)"->"r2 = $r0";
    "r2 = $r0"->"r3 = virtualinvoke r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>()";
    "r3 = virtualinvoke r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>()"->"$r4 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>";
    "$r4 = <javaT.nio.channels.Channels.Basic: java.lang.String encoding>"->"r5 = staticinvoke <java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.lang.String)>(r3, $r4)";
    "r5 = staticinvoke <java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.lang.String)>(r3, $r4)"->"r6 = newarray (char)[40]";
    "r6 = newarray (char)[40]"->"$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "$r8 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"$r7 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "$r7 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"$i0 = virtualinvoke $r7.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke $r7.<java.lang.String: int length()>()"->"virtualinvoke $r8.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r6, 0)";
    "virtualinvoke $r8.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r6, 0)"->"i3 = 0";
    "i3 = 0"->"$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>";
    "$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>"->"if i3 >= $i1 goto virtualinvoke r5.<java.io.Writer: void flush()>()";
    "if i3 >= $i1 goto virtualinvoke r5.<java.io.Writer: void flush()>()"->"$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>";
    "if i3 >= $i1 goto virtualinvoke r5.<java.io.Writer: void flush()>()"->"virtualinvoke r5.<java.io.Writer: void flush()>()";
    "$r9 = <javaT.nio.channels.Channels.Basic: java.lang.String message>"->"$i2 = virtualinvoke $r9.<java.lang.String: int length()>()";
    "$i2 = virtualinvoke $r9.<java.lang.String: int length()>()"->"virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>(r6, 0, $i2)";
    "virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>(r6, 0, $i2)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= $i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]";
    "goto [?= $i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>]"->"$i1 = <javaT.nio.channels.Channels.Basic: int ITERATIONS>";
    "virtualinvoke r5.<java.io.Writer: void flush()>()"->"virtualinvoke r5.<java.io.Writer: void close()>()";
    "virtualinvoke r5.<java.io.Writer: void close()>()"->"virtualinvoke r2.<java.io.FileOutputStream: void close()>()";
    "virtualinvoke r2.<java.io.FileOutputStream: void close()>()"->"return";
}
