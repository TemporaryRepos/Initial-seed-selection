digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
$r0 = new javaT.util.PriorityQueue.RemoveContains$1;
specialinvoke $r0.<javaT.util.PriorityQueue.RemoveContains$1: void <init>()>();
r1 = $r0;
$r2 = new java.util.PriorityQueue;
specialinvoke $r2.<java.util.PriorityQueue: void <init>(java.util.Comparator)>(r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r2);
$r3 = new java.util.PriorityQueue;
specialinvoke $r3.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r3);
$r4 = new java.util.concurrent.PriorityBlockingQueue;
specialinvoke $r4.<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r4);
$r5 = new java.util.concurrent.ArrayBlockingQueue;
specialinvoke $r5.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r5);
$r6 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r6);
$r7 = new java.util.concurrent.LinkedBlockingDeque;
specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r7);
$r8 = new java.util.concurrent.LinkedTransferQueue;
specialinvoke $r8.<java.util.concurrent.LinkedTransferQueue: void <init>()>();
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r8);
$r9 = new java.util.ArrayDeque;
specialinvoke $r9.<java.util.ArrayDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r9);
$r11 = <java.lang.System: java.io.PrintStream out>;
$r10 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.PriorityQueue.RemoveContains: int passed>;
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r10[0] = $r12;
$i1 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r10[1] = $r13;
virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10);
$i2 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
if $i2 <= 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r15 = new java.lang.Error;
specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r15;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
$r0 = new javaT.util.PriorityQueue.RemoveContains$1;
specialinvoke $r0.<javaT.util.PriorityQueue.RemoveContains$1: void <init>()>();
r1 = $r0;
$r2 = new java.util.PriorityQueue;
specialinvoke $r2.<java.util.PriorityQueue: void <init>(java.util.Comparator)>(r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r2);
$r3 = new java.util.PriorityQueue;
specialinvoke $r3.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r3);
$r4 = new java.util.concurrent.PriorityBlockingQueue;
specialinvoke $r4.<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r4);
$r5 = new java.util.concurrent.ArrayBlockingQueue;
specialinvoke $r5.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r5);
$r6 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r6);
$r7 = new java.util.concurrent.LinkedBlockingDeque;
specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r7);
$r8 = new java.util.concurrent.LinkedTransferQueue;
specialinvoke $r8.<java.util.concurrent.LinkedTransferQueue: void <init>()>();
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r8);
$r9 = new java.util.ArrayDeque;
specialinvoke $r9.<java.util.ArrayDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r9);
$r11 = <java.lang.System: java.io.PrintStream out>;
$r10 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.PriorityQueue.RemoveContains: int passed>;
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r10[0] = $r12;
$i1 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r10[1] = $r13;
virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10);
$i2 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
if $i2 <= 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r15 = new java.lang.Error;
specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r15;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r16 := @parameter0: java.lang.String[];
$r0 = new javaT.util.PriorityQueue.RemoveContains$1;
specialinvoke $r0.<javaT.util.PriorityQueue.RemoveContains$1: void <init>()>();
r1 = $r0;
$r2 = new java.util.PriorityQueue;
specialinvoke $r2.<java.util.PriorityQueue: void <init>(java.util.Comparator)>(r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r2);
$r3 = new java.util.PriorityQueue;
specialinvoke $r3.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r3);
$r4 = new java.util.concurrent.PriorityBlockingQueue;
specialinvoke $r4.<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>(10, r1);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r4);
$r5 = new java.util.concurrent.ArrayBlockingQueue;
specialinvoke $r5.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r5);
$r6 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r6);
$r7 = new java.util.concurrent.LinkedBlockingDeque;
specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r7);
$r8 = new java.util.concurrent.LinkedTransferQueue;
specialinvoke $r8.<java.util.concurrent.LinkedTransferQueue: void <init>()>();
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r8);
$r9 = new java.util.ArrayDeque;
specialinvoke $r9.<java.util.ArrayDeque: void <init>(int)>(10);
staticinvoke <javaT.util.PriorityQueue.RemoveContains: void test(java.util.Queue)>($r9);
$r11 = <java.lang.System: java.io.PrintStream out>;
$r10 = newarray (java.lang.Object)[2];
$i0 = <javaT.util.PriorityQueue.RemoveContains: int passed>;
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r10[0] = $r12;
$i1 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r10[1] = $r13;
virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10);
$i2 = <javaT.util.PriorityQueue.RemoveContains: int failed>;
if $i2 <= 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
