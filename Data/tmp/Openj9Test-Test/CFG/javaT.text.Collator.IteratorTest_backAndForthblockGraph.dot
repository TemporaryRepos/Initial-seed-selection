digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @this: javaT.text.Collator.IteratorTest;
r1 := @parameter0: java.text.CollationElementIterator;
r2 = specialinvoke r0.<javaT.text.Collator.IteratorTest: int[] getOrders(java.text.CollationElementIterator)>(r1);
i5 = lengthof r2;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 4 ]
$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i6 = $i0;
if $i0 == -1 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 1 ]
i5 = i5 + -1;
$i3 = r2[i5];
if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \");
$i4 = r2[i5];
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24);
goto [?= (branch)];
"
    "Block 4:
[preds: 1 3 ] [succs: 5 12 ]
if i5 == 0 goto return;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6);
virtualinvoke r1.<java.text.CollationElementIterator: void reset()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \");
"
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>();
i7 = $i1;
if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7);
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16);
goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()];
"
    "Block 8:
[preds: 6 ] [succs: 9 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \");
"
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i8 = $i2;
if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"
    "Block 10:
[preds: 9 ] [succs: 9 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8);
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11);
goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()];
"
    "Block 11:
[preds: 9 ] [succs: 12 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"
    "Block 12:
[preds: 4 11 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @this: javaT.text.Collator.IteratorTest;
r1 := @parameter0: java.text.CollationElementIterator;
r2 = specialinvoke r0.<javaT.text.Collator.IteratorTest: int[] getOrders(java.text.CollationElementIterator)>(r1);
i5 = lengthof r2;
"->"Block 1:
[preds: 0 2 ] [succs: 2 4 ]
$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i6 = $i0;
if $i0 == -1 goto (branch);
";
    "Block 1:
[preds: 0 2 ] [succs: 2 4 ]
$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i6 = $i0;
if $i0 == -1 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 1 ]
i5 = i5 + -1;
$i3 = r2[i5];
if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
";
    "Block 1:
[preds: 0 2 ] [succs: 2 4 ]
$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i6 = $i0;
if $i0 == -1 goto (branch);
"->"Block 4:
[preds: 1 3 ] [succs: 5 12 ]
if i5 == 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 3 1 ]
i5 = i5 + -1;
$i3 = r2[i5];
if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \");
$i4 = r2[i5];
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24);
goto [?= (branch)];
";
    "Block 2:
[preds: 1 ] [succs: 3 1 ]
i5 = i5 + -1;
$i3 = r2[i5];
if i6 == $i3 goto $i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
"->"Block 1:
[preds: 0 2 ] [succs: 2 4 ]
$i0 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i6 = $i0;
if $i0 == -1 goto (branch);
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch at index \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \");
$i4 = r2[i5];
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" vs \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r24);
goto [?= (branch)];
"->"Block 4:
[preds: 1 3 ] [succs: 5 12 ]
if i5 == 0 goto return;
";
    "Block 4:
[preds: 1 3 ] [succs: 5 12 ]
if i5 == 0 goto return;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6);
virtualinvoke r1.<java.text.CollationElementIterator: void reset()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \");
";
    "Block 4:
[preds: 1 3 ] [succs: 5 12 ]
if i5 == 0 goto return;
"->"Block 12:
[preds: 4 11 ] [succs: ]
return;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Didn\'t get back to beginning - index is \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>($r6);
virtualinvoke r1.<java.text.CollationElementIterator: void reset()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"next: \");
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>();
i7 = $i1;
if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>();
i7 = $i1;
if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"->"Block 7:
[preds: 6 ] [succs: 6 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7);
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16);
goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()];
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>();
i7 = $i1;
if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"->"Block 8:
[preds: 6 ] [succs: 9 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \");
";
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7);
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r16);
goto [?= $i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>()];
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$i1 = virtualinvoke r1.<java.text.CollationElementIterator: int next()>();
i7 = $i1;
if $i1 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
";
    "Block 8:
[preds: 6 ] [succs: 9 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>(\"prev: \");
"->"Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i8 = $i2;
if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
";
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i8 = $i2;
if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"->"Block 10:
[preds: 9 ] [succs: 9 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8);
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11);
goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()];
";
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i8 = $i2;
if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"->"Block 11:
[preds: 9 ] [succs: 12 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
";
    "Block 10:
[preds: 9 ] [succs: 9 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8);
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void err(java.lang.String)>($r11);
goto [?= $i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>()];
"->"Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i2 = virtualinvoke r1.<java.text.CollationElementIterator: int previous()>();
i8 = $i2;
if $i2 == -1 goto virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
";
    "Block 11:
[preds: 9 ] [succs: 12 ]
virtualinvoke r0.<javaT.text.Collator.IteratorTest: void errln(java.lang.String)>(\"\");
"->"Block 12:
[preds: 4 11 ] [succs: ]
return;
";
}
