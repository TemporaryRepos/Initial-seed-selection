digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\");
$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\");
$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\");
$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\");
r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z17 = r7 instanceof java.lang.reflect.TypeVariable;
if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r43 = new java.lang.AssertionError;
specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.ft is a type variable\");
throw $r43;
"
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r44 = (java.lang.reflect.TypeVariable) r7;
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 5:
[preds: 4 ] [succs: ]
$r37 = new java.lang.AssertionError;
$r38 = new java.lang.StringBuilder;
specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type of ft is T, not \");
$r40 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42);
throw $r37;
"
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = lengthof r45;
if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 8:
[preds: 7 ] [succs: ]
$r35 = new java.lang.AssertionError;
specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of ft should have one bound\");
throw $r35;
"
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r33 = r45[0];
if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"
    "Block 11:
[preds: 10 ] [succs: ]
$r34 = new java.lang.AssertionError;
specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type of ft should be Object\");
throw $r34;
"
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$z15 = r8 instanceof java.lang.reflect.ParameterizedType;
if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"
    "Block 14:
[preds: 13 ] [succs: ]
$r32 = new java.lang.AssertionError;
specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.fc1t is a parameterized type\");
throw $r32;
"
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r9 = (java.lang.reflect.ParameterizedType) r8;
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 17:
[preds: 16 ] [succs: ]
$r31 = new java.lang.AssertionError;
specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is instantiation of C1\");
throw $r31;
"
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"
    "Block 20:
[preds: 19 ] [succs: ]
$r28 = new java.lang.AssertionError;
specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is has null owner\");
throw $r28;
"
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z7 != 0 goto r11 = r10[0];
"
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$i1 = lengthof r10;
if $i1 == 1 goto r11 = r10[0];
"
    "Block 23:
[preds: 22 ] [succs: ]
$r26 = new java.lang.AssertionError;
specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of fc1t has one type argument\");
throw $r26;
"
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
r11 = r10[0];
$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z14 = r11 instanceof java.lang.reflect.TypeVariable;
if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"
    "Block 26:
[preds: 25 ] [succs: ]
$r25 = new java.lang.AssertionError;
specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable\");
throw $r25;
"
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
r46 = (java.lang.reflect.TypeVariable) r11;
$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"
    "Block 29:
[preds: 28 ] [succs: ]
$r19 = new java.lang.AssertionError;
$r20 = new java.lang.StringBuilder;
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type arg of C1<T> is T, not \");
$r22 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);
throw $r19;
"
    "Block 30:
[preds: 27 28 ] [succs: 31 33 ]
r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 31:
[preds: 30 ] [succs: 32 33 ]
$i0 = lengthof r47;
if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"
    "Block 32:
[preds: 31 ] [succs: ]
$r17 = new java.lang.AssertionError;
specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type argument of C1<T>  should have one bound\");
throw $r17;
"
    "Block 33:
[preds: 30 31 ] [succs: 34 36 ]
$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r15 = r47[0];
if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"
    "Block 35:
[preds: 34 ] [succs: ]
$r16 = new java.lang.AssertionError;
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type arg of C1<T> should be Object\");
throw $r16;
"
    "Block 36:
[preds: 33 34 ] [succs: 37 39 ]
r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z12 != 0 goto return;
"
    "Block 37:
[preds: 36 ] [succs: 38 39 ]
$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if r12 == $r13 goto return;
"
    "Block 38:
[preds: 37 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\" Type of C1.fc1 should be C1\");
throw $r14;
"
    "Block 39:
[preds: 36 37 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\");
$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\");
$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\");
$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\");
r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$z17 = r7 instanceof java.lang.reflect.TypeVariable;
if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
";
    "Block 0:
[preds: ] [succs: 1 3 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing fields\");
$r1 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"ft\");
$r3 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1t\");
$r5 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(\"fc1\");
r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z0 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z0 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r44 = (java.lang.reflect.TypeVariable) r7;
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z17 = r7 instanceof java.lang.reflect.TypeVariable;
if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"->"Block 2:
[preds: 1 ] [succs: ]
$r43 = new java.lang.AssertionError;
specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.ft is a type variable\");
throw $r43;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z17 = r7 instanceof java.lang.reflect.TypeVariable;
if $z17 != 0 goto r44 = (java.lang.reflect.TypeVariable) r7;
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r44 = (java.lang.reflect.TypeVariable) r7;
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r44 = (java.lang.reflect.TypeVariable) r7;
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
r44 = (java.lang.reflect.TypeVariable) r7;
$z1 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z1 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 5:
[preds: 4 ] [succs: ]
$r37 = new java.lang.AssertionError;
$r38 = new java.lang.StringBuilder;
specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type of ft is T, not \");
$r40 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);
$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42);
throw $r37;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r36 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z16 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z16 != 0 goto r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = lengthof r45;
if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
r45 = interfaceinvoke r44.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z2 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = lengthof r45;
if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 8:
[preds: 7 ] [succs: ]
$r35 = new java.lang.AssertionError;
specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of ft should have one bound\");
throw $r35;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = lengthof r45;
if $i2 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
$r33 = r45[0];
if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$z3 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z3 != 0 goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r33 = r45[0];
if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 11:
[preds: 10 ] [succs: ]
$r34 = new java.lang.AssertionError;
specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type of ft should be Object\");
throw $r34;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r33 = r45[0];
if $r33 == class \"Ljava/lang/Object;\" goto r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
$z15 = r8 instanceof java.lang.reflect.ParameterizedType;
if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z4 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z4 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r9 = (java.lang.reflect.ParameterizedType) r8;
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$z15 = r8 instanceof java.lang.reflect.ParameterizedType;
if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"->"Block 14:
[preds: 13 ] [succs: ]
$r32 = new java.lang.AssertionError;
specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of C1.fc1t is a parameterized type\");
throw $r32;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$z15 = r8 instanceof java.lang.reflect.ParameterizedType;
if $z15 != 0 goto r9 = (java.lang.reflect.ParameterizedType) r8;
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r9 = (java.lang.reflect.ParameterizedType) r8;
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r9 = (java.lang.reflect.ParameterizedType) r8;
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 16:
[preds: 15 ] [succs: 17 18 ]
$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
r9 = (java.lang.reflect.ParameterizedType) r8;
$z5 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 17:
[preds: 16 ] [succs: ]
$r31 = new java.lang.AssertionError;
specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is instantiation of C1\");
throw $r31;
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$r29 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
$r30 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if $r29 == $r30 goto $z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"->"Block 19:
[preds: 18 ] [succs: 20 21 ]
$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z6 != 0 goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"->"Block 21:
[preds: 18 19 ] [succs: 22 24 ]
r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z7 != 0 goto r11 = r10[0];
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"->"Block 20:
[preds: 19 ] [succs: ]
$r28 = new java.lang.AssertionError;
specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of C1.fc1t is has null owner\");
throw $r28;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$r27 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
if $r27 == null goto r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
"->"Block 21:
[preds: 18 19 ] [succs: 22 24 ]
r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z7 != 0 goto r11 = r10[0];
";
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z7 != 0 goto r11 = r10[0];
"->"Block 22:
[preds: 21 ] [succs: 23 24 ]
$i1 = lengthof r10;
if $i1 == 1 goto r11 = r10[0];
";
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
r10 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
$z7 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z7 != 0 goto r11 = r10[0];
"->"Block 24:
[preds: 21 22 ] [succs: 25 27 ]
r11 = r10[0];
$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
";
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$i1 = lengthof r10;
if $i1 == 1 goto r11 = r10[0];
"->"Block 23:
[preds: 22 ] [succs: ]
$r26 = new java.lang.AssertionError;
specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of fc1t has one type argument\");
throw $r26;
";
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$i1 = lengthof r10;
if $i1 == 1 goto r11 = r10[0];
"->"Block 24:
[preds: 21 22 ] [succs: 25 27 ]
r11 = r10[0];
$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
";
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
r11 = r10[0];
$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"->"Block 25:
[preds: 24 ] [succs: 26 27 ]
$z14 = r11 instanceof java.lang.reflect.TypeVariable;
if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
";
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
r11 = r10[0];
$z8 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z8 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"->"Block 27:
[preds: 24 25 ] [succs: 28 30 ]
r46 = (java.lang.reflect.TypeVariable) r11;
$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z14 = r11 instanceof java.lang.reflect.TypeVariable;
if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"->"Block 26:
[preds: 25 ] [succs: ]
$r25 = new java.lang.AssertionError;
specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C1<T> is a type variable\");
throw $r25;
";
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z14 = r11 instanceof java.lang.reflect.TypeVariable;
if $z14 != 0 goto r46 = (java.lang.reflect.TypeVariable) r11;
"->"Block 27:
[preds: 24 25 ] [succs: 28 30 ]
r46 = (java.lang.reflect.TypeVariable) r11;
$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
r46 = (java.lang.reflect.TypeVariable) r11;
$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 28:
[preds: 27 ] [succs: 29 30 ]
$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
";
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
r46 = (java.lang.reflect.TypeVariable) r11;
$z9 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z9 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 30:
[preds: 27 28 ] [succs: 31 33 ]
r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 29:
[preds: 28 ] [succs: ]
$r19 = new java.lang.AssertionError;
$r20 = new java.lang.StringBuilder;
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type arg of C1<T> is T, not \");
$r22 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);
throw $r19;
";
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$r18 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
$z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(\"T\");
if $z13 != 0 goto r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
"->"Block 30:
[preds: 27 28 ] [succs: 31 33 ]
r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 30:
[preds: 27 28 ] [succs: 31 33 ]
r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 31:
[preds: 30 ] [succs: 32 33 ]
$i0 = lengthof r47;
if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
";
    "Block 30:
[preds: 27 28 ] [succs: 31 33 ]
r47 = interfaceinvoke r46.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
$z10 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 33:
[preds: 30 31 ] [succs: 34 36 ]
$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 31:
[preds: 30 ] [succs: 32 33 ]
$i0 = lengthof r47;
if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 32:
[preds: 31 ] [succs: ]
$r17 = new java.lang.AssertionError;
specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type argument of C1<T>  should have one bound\");
throw $r17;
";
    "Block 31:
[preds: 30 ] [succs: 32 33 ]
$i0 = lengthof r47;
if $i0 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
"->"Block 33:
[preds: 30 31 ] [succs: 34 36 ]
$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 33:
[preds: 30 31 ] [succs: 34 36 ]
$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 34:
[preds: 33 ] [succs: 35 36 ]
$r15 = r47[0];
if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
";
    "Block 33:
[preds: 30 31 ] [succs: 34 36 ]
$z11 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z11 != 0 goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 36:
[preds: 33 34 ] [succs: 37 39 ]
r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z12 != 0 goto return;
";
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r15 = r47[0];
if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 35:
[preds: 34 ] [succs: ]
$r16 = new java.lang.AssertionError;
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of the type arg of C1<T> should be Object\");
throw $r16;
";
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r15 = r47[0];
if $r15 == class \"Ljava/lang/Object;\" goto r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
"->"Block 36:
[preds: 33 34 ] [succs: 37 39 ]
r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z12 != 0 goto return;
";
    "Block 36:
[preds: 33 34 ] [succs: 37 39 ]
r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z12 != 0 goto return;
"->"Block 37:
[preds: 36 ] [succs: 38 39 ]
$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if r12 == $r13 goto return;
";
    "Block 36:
[preds: 33 34 ] [succs: 37 39 ]
r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
$z12 = <javaT.lang.reflect.Generics.TestC1: boolean $assertionsDisabled>;
if $z12 != 0 goto return;
"->"Block 39:
[preds: 36 37 ] [succs: ]
return;
";
    "Block 37:
[preds: 36 ] [succs: 38 39 ]
$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if r12 == $r13 goto return;
"->"Block 38:
[preds: 37 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\" Type of C1.fc1 should be C1\");
throw $r14;
";
    "Block 37:
[preds: 36 ] [succs: 38 39 ]
$r13 = <javaT.lang.reflect.Generics.TestC1: java.lang.Class 'cls'>;
if r12 == $r13 goto return;
"->"Block 39:
[preds: 36 37 ] [succs: ]
return;
";
}
