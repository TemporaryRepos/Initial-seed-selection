digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r16 := @parameter0: java.lang.String[];
i2 = 0;
$r0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List elementsToTest()>();
r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r8 = (java.lang.reflect.AnnotatedElement) $r7;
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8);
$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate;
specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8);
r11 = $r10;
$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11);
i2 = i2 + $i0;
$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>();
r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r15 = (java.lang.Class) $r14;
$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15);
i2 = i2 + $i1;
goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i2 <= 0 goto return;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream err>;
$r2 = newarray (java.lang.Object)[1];
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
$r2[0] = $r4;
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d failures%n\", $r2);
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();
throw $r6;
"
    "Block 8:
[preds: 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r16 := @parameter0: java.lang.String[];
i2 = 0;
$r0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List elementsToTest()>();
r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r8 = (java.lang.reflect.AnnotatedElement) $r7;
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8);
$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate;
specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8);
r11 = $r10;
$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11);
i2 = i2 + $i0;
$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>();
r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 6:
[preds: 1 ] [succs: 7 8 ]
if i2 <= 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r8 = (java.lang.reflect.AnnotatedElement) $r7;
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r8);
$r10 = new javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate;
specialinvoke $r10.<javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: void <init>(java.lang.reflect.AnnotatedElement)>(r8);
r11 = $r10;
$i0 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: int testNullHandling(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate)>(r11);
i2 = i2 + $i0;
$r12 = staticinvoke <javaT.lang.reflect.AnnotatedElement.TestAnnotatedElementDefaults: java.util.List annotationsToTest()>();
r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 3 ]
$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r15 = (java.lang.Class) $r14;
$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15);
i2 = i2 + $i1;
goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"->"Block 5:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
$r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r15 = (java.lang.Class) $r14;
$i1 = staticinvoke <javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate: int testDelegate(javaT.lang.reflect.AnnotatedElement.AnnotatedElementDelegate,java.lang.Class)>(r11, r15);
i2 = i2 + $i1;
goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i2 <= 0 goto return;
"->"Block 7:
[preds: 6 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream err>;
$r2 = newarray (java.lang.Object)[1];
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
$r2[0] = $r4;
virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d failures%n\", $r2);
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();
throw $r6;
";
    "Block 6:
[preds: 1 ] [succs: 7 8 ]
if i2 <= 0 goto return;
"->"Block 8:
[preds: 6 ] [succs: ]
return;
";
}
