digraph "unitGraph" {
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")"
    "r1 = newarray (java.lang.Class)[3]"
    "r1[0] = class \"Ljava/lang/Throwable;\""
    "r1[1] = class \"LjavaT/lang/reflect/Generics/C0;\""
    "r1[2] = class \"LjavaT/lang/reflect/Generics/C0;\""
    "r2 = newarray (java.lang.Class)[1]"
    "r2[0] = class \"Ljava/lang/Object;\""
    "r3 = newarray (java.lang.Class)[1]"
    "r3[0] = class \"LjavaT/lang/reflect/Generics/C0;\""
    "$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)"
    "$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", r2)"
    "$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"
    "r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r3)"
    "r10 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z0 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"
    "$z43 = r10 instanceof java.lang.reflect.ParameterizedType"
    "if $z43 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"
    "$r84 = new java.lang.AssertionError"
    "specialinvoke $r84.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The return type of mc1t should be a parameterized type\")"
    "throw $r84"
    "r85 = (java.lang.reflect.ParameterizedType) r10"
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z1 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r82 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"
    "if $r82 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r83 = new java.lang.AssertionError"
    "specialinvoke $r83.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The raw return type of mc1t should be C0\")"
    "throw $r83"
    "r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i13 = lengthof r86"
    "if $i13 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r81 = new java.lang.AssertionError"
    "specialinvoke $r81.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1t should have one type argument\")"
    "throw $r81"
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z3 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$r79 = r86[0]"
    "$z42 = $r79 instanceof java.lang.reflect.TypeVariable"
    "if $z42 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$r80 = new java.lang.AssertionError"
    "specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type argument of return type of mc1t is a type variable\")"
    "throw $r80"
    "r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z4 != 0 goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "if r11 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$r78 = new java.lang.AssertionError"
    "specialinvoke $r78.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1 is C0\")"
    "throw $r78"
    "r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z5 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z41 = r12 instanceof java.lang.reflect.TypeVariable"
    "if $z41 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r77 = new java.lang.AssertionError"
    "specialinvoke $r77.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mt is a type variable\")"
    "throw $r77"
    "r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z6 != 0 goto r14 = r13[0]"
    "$i12 = lengthof r13"
    "if $i12 == 3 goto r14 = r13[0]"
    "$r76 = new java.lang.AssertionError"
    "specialinvoke $r76.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C0.mc1t has three parameters\")"
    "throw $r76"
    "r14 = r13[0]"
    "$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if r14 != null goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r75 = new java.lang.AssertionError"
    "specialinvoke $r75.<java.lang.AssertionError: void <init>()>()"
    "throw $r75"
    "$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z8 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"
    "$z40 = r14 instanceof java.lang.reflect.TypeVariable"
    "if $z40 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"
    "$r74 = new java.lang.AssertionError"
    "specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")"
    "throw $r74"
    "r87 = (java.lang.reflect.TypeVariable) r14"
    "$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z9 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r67 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z39 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>(\"T3\")"
    "if $z39 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r68 = new java.lang.AssertionError"
    "$r69 = new java.lang.StringBuilder"
    "specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()"
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T3, not \")"
    "$r71 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71)"
    "$r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>($r73)"
    "throw $r68"
    "r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i11 = lengthof r88"
    "if $i11 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r66 = new java.lang.AssertionError"
    "specialinvoke $r66.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound (mc1t)\")"
    "throw $r66"
    "$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z11 != 0 goto r15 = r13[1]"
    "$r64 = r88[0]"
    "if $r64 == class \"Ljava/lang/Throwable;\" goto r15 = r13[1]"
    "$r65 = new java.lang.AssertionError"
    "specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable(mc1t)\")"
    "throw $r65"
    "r15 = r13[1]"
    "$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z12 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"
    "$z38 = r15 instanceof java.lang.reflect.ParameterizedType"
    "if $z38 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"
    "$r63 = new java.lang.AssertionError"
    "specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")"
    "throw $r63"
    "r89 = (java.lang.reflect.ParameterizedType) r15"
    "$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z13 != 0 goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r61 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"
    "if $r61 == class \"LjavaT/lang/reflect/Generics/C0;\" goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r62 = new java.lang.AssertionError"
    "specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C0\")"
    "throw $r62"
    "$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z14 != 0 goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r59 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"
    "if $r59 == null goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$r60 = new java.lang.AssertionError"
    "specialinvoke $r60.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")"
    "throw $r60"
    "r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"
    "$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z15 != 0 goto r16 = r90[0]"
    "$i10 = lengthof r90"
    "if $i10 == 1 goto r16 = r90[0]"
    "$r58 = new java.lang.AssertionError"
    "specialinvoke $r58.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")"
    "throw $r58"
    "r16 = r90[0]"
    "$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z16 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"
    "$z37 = r16 instanceof java.lang.reflect.TypeVariable"
    "if $z37 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"
    "$r57 = new java.lang.AssertionError"
    "specialinvoke $r57.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C0<T> is a type variable (mc1t)\")"
    "throw $r57"
    "r91 = (java.lang.reflect.TypeVariable) r16"
    "$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z17 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r50 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z36 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"
    "if $z36 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r51 = new java.lang.AssertionError"
    "$r52 = new java.lang.StringBuilder"
    "specialinvoke $r52.<java.lang.StringBuilder: void <init>()>()"
    "$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C0<T> is T, not \")"
    "$r54 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54)"
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>($r56)"
    "throw $r51"
    "r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z18 != 0 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i9 = lengthof r92"
    "if $i9 == 1 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r49 = new java.lang.AssertionError"
    "specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C0<T>  should have one bound\")"
    "throw $r49"
    "$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z19 != 0 goto r17 = r13[2]"
    "$r47 = r92[0]"
    "if $r47 == class \"Ljava/lang/Object;\" goto r17 = r13[2]"
    "$r48 = new java.lang.AssertionError"
    "specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C0<T> should be Object\")"
    "throw $r48"
    "r17 = r13[2]"
    "$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z20 != 0 goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "if r17 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r46 = new java.lang.AssertionError"
    "specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C0\")"
    "throw $r46"
    "r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z21 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z21 != 0 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$i8 = lengthof r18"
    "if $i8 == 1 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$r45 = new java.lang.AssertionError"
    "specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mc1 has one parameter\")"
    "throw $r45"
    "r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"
    "$z22 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z22 != 0 goto r20 = r19[0]"
    "$i7 = lengthof r19"
    "if $i7 == 1 goto r20 = r19[0]"
    "$r44 = new java.lang.AssertionError"
    "specialinvoke $r44.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mt has one parameter\")"
    "throw $r44"
    "r20 = r19[0]"
    "$z23 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z23 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"
    "$z35 = r20 instanceof java.lang.reflect.TypeVariable"
    "if $z35 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"
    "$r43 = new java.lang.AssertionError"
    "specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")"
    "throw $r43"
    "r93 = (java.lang.reflect.TypeVariable) r20"
    "$z24 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z24 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r36 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$z34 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")"
    "if $z34 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$r37 = new java.lang.AssertionError"
    "$r38 = new java.lang.StringBuilder"
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T2, not \")"
    "$r40 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"
    "$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)"
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)"
    "throw $r37"
    "r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"
    "$z25 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z25 != 0 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$i6 = lengthof r94"
    "if $i6 == 1 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "$r35 = new java.lang.AssertionError"
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")"
    "throw $r35"
    "$z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z26 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r33 = r94[0]"
    "$z33 = $r33 instanceof java.lang.reflect.ParameterizedType"
    "if $z33 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r34 = new java.lang.AssertionError"
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be parameterized type\")"
    "throw $r34"
    "r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z27 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z27 != 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i5 = lengthof r21"
    "if $i5 == 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r32 = new java.lang.AssertionError"
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1t should have no generic exception types\")"
    "throw $r32"
    "r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z28 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z28 != 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$i4 = lengthof r22"
    "if $i4 == 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$r31 = new java.lang.AssertionError"
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1 should have no generic exception types\")"
    "throw $r31"
    "r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"
    "$z29 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z29 != 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i3 = lengthof r23"
    "if $i3 == 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r30 = new java.lang.AssertionError"
    "specialinvoke $r30.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mt should have no generic exception types\")"
    "throw $r30"
    "r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z30 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z30 != 0 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i2 = lengthof r24"
    "if $i2 == 1 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r29 = new java.lang.AssertionError"
    "specialinvoke $r29.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1t should have one type parameter\")"
    "throw $r29"
    "r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z31 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z31 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$i1 = lengthof r25"
    "if $i1 == 2 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$r28 = new java.lang.AssertionError"
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1 should have two type parameters\")"
    "throw $r28"
    "r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"
    "$z32 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"
    "if $z32 != 0 goto return"
    "$i0 = lengthof r26"
    "if $i0 == 0 goto return"
    "$r27 = new java.lang.AssertionError"
    "specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mt should have no type parameters\")"
    "throw $r27"
    "return"
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"testing methods\")"->"r1 = newarray (java.lang.Class)[3]";
    "r1 = newarray (java.lang.Class)[3]"->"r1[0] = class \"Ljava/lang/Throwable;\"";
    "r1[0] = class \"Ljava/lang/Throwable;\""->"r1[1] = class \"LjavaT/lang/reflect/Generics/C0;\"";
    "r1[1] = class \"LjavaT/lang/reflect/Generics/C0;\""->"r1[2] = class \"LjavaT/lang/reflect/Generics/C0;\"";
    "r1[2] = class \"LjavaT/lang/reflect/Generics/C0;\""->"r2 = newarray (java.lang.Class)[1]";
    "r2 = newarray (java.lang.Class)[1]"->"r2[0] = class \"Ljava/lang/Object;\"";
    "r2[0] = class \"Ljava/lang/Object;\""->"r3 = newarray (java.lang.Class)[1]";
    "r3 = newarray (java.lang.Class)[1]"->"r3[0] = class \"LjavaT/lang/reflect/Generics/C0;\"";
    "r3[0] = class \"LjavaT/lang/reflect/Generics/C0;\""->"$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r4 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)";
    "r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1t\", r1)"->"$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r6 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", r2)";
    "r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mc1\", r2)"->"$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>";
    "$r8 = <javaT.lang.reflect.Generics.TestC2: java.lang.Class 'cls'>"->"r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r3)";
    "r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"mt\", r3)"->"r10 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "r10 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z0 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z0 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10";
    "if $z0 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"->"$z43 = r10 instanceof java.lang.reflect.ParameterizedType";
    "if $z0 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"->"r85 = (java.lang.reflect.ParameterizedType) r10";
    "$z43 = r10 instanceof java.lang.reflect.ParameterizedType"->"if $z43 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10";
    "if $z43 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"->"$r84 = new java.lang.AssertionError";
    "if $z43 != 0 goto r85 = (java.lang.reflect.ParameterizedType) r10"->"r85 = (java.lang.reflect.ParameterizedType) r10";
    "$r84 = new java.lang.AssertionError"->"specialinvoke $r84.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The return type of mc1t should be a parameterized type\")";
    "specialinvoke $r84.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The return type of mc1t should be a parameterized type\")"->"throw $r84";
    "r85 = (java.lang.reflect.ParameterizedType) r10"->"$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z1 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z1 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $z1 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r82 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()";
    "if $z1 != 0 goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r82 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"->"if $r82 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $r82 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r83 = new java.lang.AssertionError";
    "if $r82 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r83 = new java.lang.AssertionError"->"specialinvoke $r83.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The raw return type of mc1t should be C0\")";
    "specialinvoke $r83.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The raw return type of mc1t should be C0\")"->"throw $r83";
    "r86 = interfaceinvoke r85.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z2 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i13 = lengthof r86";
    "if $z2 != 0 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i13 = lengthof r86"->"if $i13 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i13 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r81 = new java.lang.AssertionError";
    "if $i13 == 1 goto $z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r81 = new java.lang.AssertionError"->"specialinvoke $r81.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1t should have one type argument\")";
    "specialinvoke $r81.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1t should have one type argument\")"->"throw $r81";
    "$z3 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z3 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "if $z3 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$r79 = r86[0]";
    "if $z3 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "$r79 = r86[0]"->"$z42 = $r79 instanceof java.lang.reflect.TypeVariable";
    "$z42 = $r79 instanceof java.lang.reflect.TypeVariable"->"if $z42 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "if $z42 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$r80 = new java.lang.AssertionError";
    "if $z42 != 0 goto r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "$r80 = new java.lang.AssertionError"->"specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type argument of return type of mc1t is a type variable\")";
    "specialinvoke $r80.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type argument of return type of mc1t is a type variable\")"->"throw $r80";
    "r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z4 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z4 != 0 goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "if $z4 != 0 goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"if r11 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "if $z4 != 0 goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "if r11 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$r78 = new java.lang.AssertionError";
    "if r11 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()";
    "$r78 = new java.lang.AssertionError"->"specialinvoke $r78.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1 is C0\")";
    "specialinvoke $r78.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mc1 is C0\")"->"throw $r78";
    "r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()"->"$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z5 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z5 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z5 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z41 = r12 instanceof java.lang.reflect.TypeVariable";
    "if $z5 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$z41 = r12 instanceof java.lang.reflect.TypeVariable"->"if $z41 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z41 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r77 = new java.lang.AssertionError";
    "if $z41 != 0 goto r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r77 = new java.lang.AssertionError"->"specialinvoke $r77.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mt is a type variable\")";
    "specialinvoke $r77.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Return type of mt is a type variable\")"->"throw $r77";
    "r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z6 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z6 != 0 goto r14 = r13[0]";
    "if $z6 != 0 goto r14 = r13[0]"->"$i12 = lengthof r13";
    "if $z6 != 0 goto r14 = r13[0]"->"r14 = r13[0]";
    "$i12 = lengthof r13"->"if $i12 == 3 goto r14 = r13[0]";
    "if $i12 == 3 goto r14 = r13[0]"->"$r76 = new java.lang.AssertionError";
    "if $i12 == 3 goto r14 = r13[0]"->"r14 = r13[0]";
    "$r76 = new java.lang.AssertionError"->"specialinvoke $r76.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C0.mc1t has three parameters\")";
    "specialinvoke $r76.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C0.mc1t has three parameters\")"->"throw $r76";
    "r14 = r13[0]"->"$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z7 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if r14 != null goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z7 != 0 goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if r14 != null goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r75 = new java.lang.AssertionError";
    "if r14 != null goto $z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r75 = new java.lang.AssertionError"->"specialinvoke $r75.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r75.<java.lang.AssertionError: void <init>()>()"->"throw $r75";
    "$z8 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z8 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14";
    "if $z8 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"->"$z40 = r14 instanceof java.lang.reflect.TypeVariable";
    "if $z8 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"->"r87 = (java.lang.reflect.TypeVariable) r14";
    "$z40 = r14 instanceof java.lang.reflect.TypeVariable"->"if $z40 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14";
    "if $z40 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"->"$r74 = new java.lang.AssertionError";
    "if $z40 != 0 goto r87 = (java.lang.reflect.TypeVariable) r14"->"r87 = (java.lang.reflect.TypeVariable) r14";
    "$r74 = new java.lang.AssertionError"->"specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")";
    "specialinvoke $r74.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Generic type of the 1st parameter of mc1t(T) is a type variable\")"->"throw $r74";
    "r87 = (java.lang.reflect.TypeVariable) r14"->"$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z9 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z9 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z9 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r67 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z9 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r67 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z39 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>(\"T3\")";
    "$z39 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>(\"T3\")"->"if $z39 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z39 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r68 = new java.lang.AssertionError";
    "if $z39 != 0 goto r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r68 = new java.lang.AssertionError"->"$r69 = new java.lang.StringBuilder";
    "$r69 = new java.lang.StringBuilder"->"specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()"->"$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T3, not \")";
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Name of 1st type parameter of mc1t is T3, not \")"->"$r71 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r71 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71)";
    "$r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71)"->"$r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>($r73)";
    "specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>($r73)"->"throw $r68";
    "r88 = interfaceinvoke r87.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z10 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i11 = lengthof r88";
    "if $z10 != 0 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i11 = lengthof r88"->"if $i11 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i11 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r66 = new java.lang.AssertionError";
    "if $i11 == 1 goto $z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r66 = new java.lang.AssertionError"->"specialinvoke $r66.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound (mc1t)\")";
    "specialinvoke $r66.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T3 should have one bound (mc1t)\")"->"throw $r66";
    "$z11 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z11 != 0 goto r15 = r13[1]";
    "if $z11 != 0 goto r15 = r13[1]"->"$r64 = r88[0]";
    "if $z11 != 0 goto r15 = r13[1]"->"r15 = r13[1]";
    "$r64 = r88[0]"->"if $r64 == class \"Ljava/lang/Throwable;\" goto r15 = r13[1]";
    "if $r64 == class \"Ljava/lang/Throwable;\" goto r15 = r13[1]"->"$r65 = new java.lang.AssertionError";
    "if $r64 == class \"Ljava/lang/Throwable;\" goto r15 = r13[1]"->"r15 = r13[1]";
    "$r65 = new java.lang.AssertionError"->"specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable(mc1t)\")";
    "specialinvoke $r65.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T3 should be Throwable(mc1t)\")"->"throw $r65";
    "r15 = r13[1]"->"$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z12 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z12 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15";
    "if $z12 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"->"$z38 = r15 instanceof java.lang.reflect.ParameterizedType";
    "if $z12 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"->"r89 = (java.lang.reflect.ParameterizedType) r15";
    "$z38 = r15 instanceof java.lang.reflect.ParameterizedType"->"if $z38 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15";
    "if $z38 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"->"$r63 = new java.lang.AssertionError";
    "if $z38 != 0 goto r89 = (java.lang.reflect.ParameterizedType) r15"->"r89 = (java.lang.reflect.ParameterizedType) r15";
    "$r63 = new java.lang.AssertionError"->"specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")";
    "specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t is a parameterized type\")"->"throw $r63";
    "r89 = (java.lang.reflect.ParameterizedType) r15"->"$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z13 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z13 != 0 goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z13 != 0 goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r61 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()";
    "if $z13 != 0 goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r61 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()"->"if $r61 == class \"LjavaT/lang/reflect/Generics/C0;\" goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $r61 == class \"LjavaT/lang/reflect/Generics/C0;\" goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r62 = new java.lang.AssertionError";
    "if $r61 == class \"LjavaT/lang/reflect/Generics/C0;\" goto $z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r62 = new java.lang.AssertionError"->"specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C0\")";
    "specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is instantiation of C0\")"->"throw $r62";
    "$z14 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z14 != 0 goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $z14 != 0 goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r59 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()";
    "if $z14 != 0 goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r59 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>()"->"if $r59 == null goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "if $r59 == null goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$r60 = new java.lang.AssertionError";
    "if $r59 == null goto r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()";
    "$r60 = new java.lang.AssertionError"->"specialinvoke $r60.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")";
    "specialinvoke $r60.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 2 of mc1t is has null owner\")"->"throw $r60";
    "r90 = interfaceinvoke r89.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()"->"$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z15 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z15 != 0 goto r16 = r90[0]";
    "if $z15 != 0 goto r16 = r90[0]"->"$i10 = lengthof r90";
    "if $z15 != 0 goto r16 = r90[0]"->"r16 = r90[0]";
    "$i10 = lengthof r90"->"if $i10 == 1 goto r16 = r90[0]";
    "if $i10 == 1 goto r16 = r90[0]"->"$r58 = new java.lang.AssertionError";
    "if $i10 == 1 goto r16 = r90[0]"->"r16 = r90[0]";
    "$r58 = new java.lang.AssertionError"->"specialinvoke $r58.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")";
    "specialinvoke $r58.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The type of parameter 2 of mc1t has one type argument\")"->"throw $r58";
    "r16 = r90[0]"->"$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z16 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z16 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16";
    "if $z16 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"->"$z37 = r16 instanceof java.lang.reflect.TypeVariable";
    "if $z16 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"->"r91 = (java.lang.reflect.TypeVariable) r16";
    "$z37 = r16 instanceof java.lang.reflect.TypeVariable"->"if $z37 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16";
    "if $z37 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"->"$r57 = new java.lang.AssertionError";
    "if $z37 != 0 goto r91 = (java.lang.reflect.TypeVariable) r16"->"r91 = (java.lang.reflect.TypeVariable) r16";
    "$r57 = new java.lang.AssertionError"->"specialinvoke $r57.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C0<T> is a type variable (mc1t)\")";
    "specialinvoke $r57.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The actual type arg of C0<T> is a type variable (mc1t)\")"->"throw $r57";
    "r91 = (java.lang.reflect.TypeVariable) r16"->"$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z17 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z17 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z17 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r50 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z17 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r50 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z36 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")";
    "$z36 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"T\")"->"if $z36 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z36 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r51 = new java.lang.AssertionError";
    "if $z36 != 0 goto r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r51 = new java.lang.AssertionError"->"$r52 = new java.lang.StringBuilder";
    "$r52 = new java.lang.StringBuilder"->"specialinvoke $r52.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r52.<java.lang.StringBuilder: void <init>()>()"->"$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C0<T> is T, not \")";
    "$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"mc1t: Name of the type arg of C0<T> is T, not \")"->"$r54 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r54 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54)";
    "$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54)"->"$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>($r56)";
    "specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>($r56)"->"throw $r51";
    "r92 = interfaceinvoke r91.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z18 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z18 != 0 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z18 != 0 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i9 = lengthof r92";
    "if $z18 != 0 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i9 = lengthof r92"->"if $i9 == 1 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i9 == 1 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r49 = new java.lang.AssertionError";
    "if $i9 == 1 goto $z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r49 = new java.lang.AssertionError"->"specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C0<T>  should have one bound\")";
    "specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The type argument of C0<T>  should have one bound\")"->"throw $r49";
    "$z19 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z19 != 0 goto r17 = r13[2]";
    "if $z19 != 0 goto r17 = r13[2]"->"$r47 = r92[0]";
    "if $z19 != 0 goto r17 = r13[2]"->"r17 = r13[2]";
    "$r47 = r92[0]"->"if $r47 == class \"Ljava/lang/Object;\" goto r17 = r13[2]";
    "if $r47 == class \"Ljava/lang/Object;\" goto r17 = r13[2]"->"$r48 = new java.lang.AssertionError";
    "if $r47 == class \"Ljava/lang/Object;\" goto r17 = r13[2]"->"r17 = r13[2]";
    "$r48 = new java.lang.AssertionError"->"specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C0<T> should be Object\")";
    "specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"mc1t: The bound of the type arg of C0<T> should be Object\")"->"throw $r48";
    "r17 = r13[2]"->"$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z20 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z20 != 0 goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z20 != 0 goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"if r17 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z20 != 0 goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if r17 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r46 = new java.lang.AssertionError";
    "if r17 == class \"LjavaT/lang/reflect/Generics/C0;\" goto r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r46 = new java.lang.AssertionError"->"specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C0\")";
    "specialinvoke $r46.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Type of parameter 3 of mc1t is C0\")"->"throw $r46";
    "r18 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z21 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z21 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z21 != 0 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $z21 != 0 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$i8 = lengthof r18";
    "if $z21 != 0 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$i8 = lengthof r18"->"if $i8 == 1 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "if $i8 == 1 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$r45 = new java.lang.AssertionError";
    "if $i8 == 1 goto r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()";
    "$r45 = new java.lang.AssertionError"->"specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mc1 has one parameter\")";
    "specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mc1 has one parameter\")"->"throw $r45";
    "r19 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>()"->"$z22 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z22 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z22 != 0 goto r20 = r19[0]";
    "if $z22 != 0 goto r20 = r19[0]"->"$i7 = lengthof r19";
    "if $z22 != 0 goto r20 = r19[0]"->"r20 = r19[0]";
    "$i7 = lengthof r19"->"if $i7 == 1 goto r20 = r19[0]";
    "if $i7 == 1 goto r20 = r19[0]"->"$r44 = new java.lang.AssertionError";
    "if $i7 == 1 goto r20 = r19[0]"->"r20 = r19[0]";
    "$r44 = new java.lang.AssertionError"->"specialinvoke $r44.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mt has one parameter\")";
    "specialinvoke $r44.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"C2.mt has one parameter\")"->"throw $r44";
    "r20 = r19[0]"->"$z23 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z23 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z23 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20";
    "if $z23 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"->"$z35 = r20 instanceof java.lang.reflect.TypeVariable";
    "if $z23 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"->"r93 = (java.lang.reflect.TypeVariable) r20";
    "$z35 = r20 instanceof java.lang.reflect.TypeVariable"->"if $z35 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20";
    "if $z35 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"->"$r43 = new java.lang.AssertionError";
    "if $z35 != 0 goto r93 = (java.lang.reflect.TypeVariable) r20"->"r93 = (java.lang.reflect.TypeVariable) r20";
    "$r43 = new java.lang.AssertionError"->"specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")";
    "specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The generic type of the parameter of mt(T) is a type variable\")"->"throw $r43";
    "r93 = (java.lang.reflect.TypeVariable) r20"->"$z24 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z24 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z24 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z24 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r36 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "if $z24 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r36 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$z34 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")";
    "$z34 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(\"T2\")"->"if $z34 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "if $z34 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$r37 = new java.lang.AssertionError";
    "if $z34 != 0 goto r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()";
    "$r37 = new java.lang.AssertionError"->"$r38 = new java.lang.StringBuilder";
    "$r38 = new java.lang.StringBuilder"->"specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T2, not \")";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"The name of the type parameter of mt is T2, not \")"->"$r40 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()";
    "$r40 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.String getName()>()"->"$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)";
    "$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)"->"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)";
    "specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42)"->"throw $r37";
    "r94 = interfaceinvoke r93.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>()"->"$z25 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z25 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z25 != 0 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $z25 != 0 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$i6 = lengthof r94";
    "if $z25 != 0 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$i6 = lengthof r94"->"if $i6 == 1 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "if $i6 == 1 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$r35 = new java.lang.AssertionError";
    "if $i6 == 1 goto $z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"$z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$r35 = new java.lang.AssertionError"->"specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")";
    "specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"T2 should have one bound\")"->"throw $r35";
    "$z26 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z26 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z26 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r33 = r94[0]";
    "if $z26 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r33 = r94[0]"->"$z33 = $r33 instanceof java.lang.reflect.ParameterizedType";
    "$z33 = $r33 instanceof java.lang.reflect.ParameterizedType"->"if $z33 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z33 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r34 = new java.lang.AssertionError";
    "if $z33 != 0 goto r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r34 = new java.lang.AssertionError"->"specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be parameterized type\")";
    "specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"The bound of T2 should be parameterized type\")"->"throw $r34";
    "r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z27 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z27 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z27 != 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z27 != 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i5 = lengthof r21";
    "if $z27 != 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i5 = lengthof r21"->"if $i5 == 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i5 == 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r32 = new java.lang.AssertionError";
    "if $i5 == 0 goto r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r32 = new java.lang.AssertionError"->"specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1t should have no generic exception types\")";
    "specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1t should have no generic exception types\")"->"throw $r32";
    "r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z28 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z28 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z28 != 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $z28 != 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$i4 = lengthof r22";
    "if $z28 != 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$i4 = lengthof r22"->"if $i4 == 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "if $i4 == 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$r31 = new java.lang.AssertionError";
    "if $i4 == 0 goto r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()";
    "$r31 = new java.lang.AssertionError"->"specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1 should have no generic exception types\")";
    "specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mc1 should have no generic exception types\")"->"throw $r31";
    "r23 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>()"->"$z29 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z29 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z29 != 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z29 != 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i3 = lengthof r23";
    "if $z29 != 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i3 = lengthof r23"->"if $i3 == 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i3 == 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r30 = new java.lang.AssertionError";
    "if $i3 == 0 goto r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r30 = new java.lang.AssertionError"->"specialinvoke $r30.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mt should have no generic exception types\")";
    "specialinvoke $r30.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C0.mt should have no generic exception types\")"->"throw $r30";
    "r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z30 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z30 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z30 != 0 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z30 != 0 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i2 = lengthof r24";
    "if $z30 != 0 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i2 = lengthof r24"->"if $i2 == 1 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i2 == 1 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r29 = new java.lang.AssertionError";
    "if $i2 == 1 goto r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r29 = new java.lang.AssertionError"->"specialinvoke $r29.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1t should have one type parameter\")";
    "specialinvoke $r29.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1t should have one type parameter\")"->"throw $r29";
    "r25 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z31 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z31 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z31 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $z31 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$i1 = lengthof r25";
    "if $z31 != 0 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$i1 = lengthof r25"->"if $i1 == 2 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "if $i1 == 2 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$r28 = new java.lang.AssertionError";
    "if $i1 == 2 goto r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()";
    "$r28 = new java.lang.AssertionError"->"specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1 should have two type parameters\")";
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mc1 should have two type parameters\")"->"throw $r28";
    "r26 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>()"->"$z32 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>";
    "$z32 = <javaT.lang.reflect.Generics.TestC2: boolean $assertionsDisabled>"->"if $z32 != 0 goto return";
    "if $z32 != 0 goto return"->"$i0 = lengthof r26";
    "if $z32 != 0 goto return"->"return";
    "$i0 = lengthof r26"->"if $i0 == 0 goto return";
    "if $i0 == 0 goto return"->"$r27 = new java.lang.AssertionError";
    "if $i0 == 0 goto return"->"return";
    "$r27 = new java.lang.AssertionError"->"specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mt should have no type parameters\")";
    "specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Method C2.mt should have no type parameters\")"->"throw $r27";
}
