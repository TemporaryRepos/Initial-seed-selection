digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r52 := @parameter0: java.lang.String[];
r0 = \"The original String\";
$r1 = new java.lang.StringBuffer;
specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);
r53 = $r1;
r54 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r54, r0);
r55 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r54, r55);
virtualinvoke r53.<java.lang.StringBuffer: void setLength(int)>(12);
r56 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r54, r56);
r57 = r56;
virtualinvoke r53.<java.lang.StringBuffer: void setCharAt(int,char)>(0, 88);
r58 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r57, r58);
r59 = r58;
$r2 = new java.lang.Character;
specialinvoke $r2.<java.lang.Character: void <init>(char)>(88);
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);
r60 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r59, r60);
r61 = r60;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"More text\");
r62 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r61, r62);
r63 = r62;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r53);
r64 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r63, r64);
r65 = r64;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Build\");
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r6);
r66 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r65, r66);
r67 = r66;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Build2\");
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>($r8, 0, 1);
r68 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r67, r68);
r69 = r68;
$r10 = newarray (char)[2];
$r10[0] = 97;
$r10[1] = 98;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r10);
r70 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r69, r70);
r71 = r70;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(1);
r72 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r71, r72);
r73 = r72;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(99);
r74 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r73, r74);
r75 = r74;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(23);
r76 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r75, r76);
r77 = r76;
$r15 = newarray (char)[1];
$r15[0] = 88;
$i0 = staticinvoke <java.lang.Character: int codePointAt(char[],int)>($r15, 0);
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>($i0);
r78 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r77, r78);
r79 = r78;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(1L);
r80 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r79, r80);
r81 = r80;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(1.0F);
r82 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r81, r82);
r83 = r82;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(1.0);
r84 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r83, r84);
r85 = r84;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, 5);
r86 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r85, r86);
r87 = r86;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(0);
r88 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r87, r88);
r89 = r88;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>(0, 2, \"123\");
r90 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r89, r90);
r91 = r90;
$r23 = newarray (char)[3];
$r23[0] = 97;
$r23[1] = 98;
$r23[2] = 99;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>(0, $r23, 0, 3);
r92 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r91, r92);
r93 = r92;
$r25 = new java.lang.Object;
specialinvoke $r25.<java.lang.Object: void <init>()>();
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>(0, $r25);
r94 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r93, r94);
r95 = r94;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, \"abc\");
r96 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r95, r96);
r97 = r96;
$r28 = newarray (char)[3];
$r28[0] = 97;
$r28[1] = 98;
$r28[2] = 99;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>(0, $r28);
r98 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r97, r98);
r99 = r98;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Build\");
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>(0, $r30);
r100 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r99, r100);
r101 = r100;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Build\");
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>(0, $r32, 0, 1);
r102 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r101, r102);
r103 = r102;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>(0, 0);
r104 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r103, r104);
r105 = r104;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(0, 88);
r106 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r105, r106);
r107 = r106;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>(0, 1);
r108 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r107, r108);
r109 = r108;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>(0, 1L);
r110 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r109, r110);
r111 = r110;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>(0, 1.0F);
r112 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r111, r112);
r113 = r112;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>(0, 1.0);
r114 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r113, r114);
r115 = r114;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();
r116 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r115, r116);
$r41 = (java.lang.String) null;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);
r117 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r115, r117);
r118 = r117;
$r43 = (java.lang.StringBuffer) null;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r43);
r119 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r118, r119);
r120 = r119;
$r45 = (java.lang.StringBuilder) null;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r45);
r121 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r120, r121);
r122 = r121;
$r47 = (java.lang.CharSequence) null;
virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r47);
r123 = virtualinvoke r53.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkUnequal(java.lang.String,java.lang.String)>(r122, r123);
r124 = r123;
$r49 = new java.lang.StringBuffer;
specialinvoke $r49.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);
r125 = $r49;
r126 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
r127 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r127);
virtualinvoke r125.<java.lang.StringBuffer: int length()>();
r128 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r128);
virtualinvoke r125.<java.lang.StringBuffer: int capacity()>();
r129 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r129);
virtualinvoke r125.<java.lang.StringBuffer: void ensureCapacity(int)>(100);
r130 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r130);
virtualinvoke r125.<java.lang.StringBuffer: void trimToSize()>();
r131 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r131);
virtualinvoke r125.<java.lang.StringBuffer: char charAt(int)>(1);
r132 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r132);
virtualinvoke r125.<java.lang.StringBuffer: int codePointAt(int)>(1);
r133 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r133);
virtualinvoke r125.<java.lang.StringBuffer: int codePointBefore(int)>(2);
r134 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r134);
virtualinvoke r125.<java.lang.StringBuffer: int codePointCount(int,int)>(0, 1);
r135 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r135);
virtualinvoke r125.<java.lang.StringBuffer: int offsetByCodePoints(int,int)>(0, 1);
r136 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r136);
$r50 = newarray (char)[2];
virtualinvoke r125.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(0, 1, $r50, 0);
r137 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r137);
virtualinvoke r125.<java.lang.StringBuffer: java.lang.String substring(int)>(0);
r139 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r139);
virtualinvoke r125.<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>(0, 1);
r140 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r140);
virtualinvoke r125.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, 3);
r142 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r142);
virtualinvoke r125.<java.lang.StringBuffer: int indexOf(java.lang.String)>(\"rig\");
r143 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r143);
virtualinvoke r125.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>(\"rig\", 2);
r144 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r144);
virtualinvoke r125.<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>(\"rig\");
r145 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r145);
virtualinvoke r125.<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>(\"rig\", 3);
r146 = virtualinvoke r125.<java.lang.StringBuffer: java.lang.String toString()>();
staticinvoke <javaT.lang.StringBuffer.ToStringCache: void checkEqual(java.lang.String,java.lang.String)>(r126, r146);
return;
"
}
