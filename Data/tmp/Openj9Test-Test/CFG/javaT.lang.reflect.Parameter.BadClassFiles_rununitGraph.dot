digraph "unitGraph" {
    "r0 := @this: javaT.lang.reflect.Parameter.BadClassFiles"
    "r1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: java.lang.Class[] classes>"
    "i0 = lengthof r1"
    "i3 = 0"
    "if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"
    "r7 = r1[i3]"
    "virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"
    "if $i1 == 0 goto return"
    "$r2 = new java.lang.RuntimeException"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$i2 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" errors in test\")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)"
    "throw $r2"
    "return"
    "r0 := @this: javaT.lang.reflect.Parameter.BadClassFiles"->"r1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: java.lang.Class[] classes>";
    "r1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: java.lang.Class[] classes>"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>";
    "if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"->"r7 = r1[i3]";
    "if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"->"$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>";
    "r7 = r1[i3]"->"virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7)";
    "virtualinvoke r0.<javaT.lang.reflect.Parameter.BadClassFiles: void assertBadParameters(java.lang.Class)>(r7)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto $i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>";
    "$i1 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"->"if $i1 == 0 goto return";
    "if $i1 == 0 goto return"->"$r2 = new java.lang.RuntimeException";
    "if $i1 == 0 goto return"->"return";
    "$r2 = new java.lang.RuntimeException"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$i2 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>";
    "$i2 = r0.<javaT.lang.reflect.Parameter.BadClassFiles: int errors>"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" errors in test\")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" errors in test\")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)";
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)"->"throw $r2";
}
