digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"
    "$r1 = new java.net.SocketException"
    "specialinvoke $r1.<java.net.SocketException: void <init>()>()"
    "r2 = $r1"
    "r3 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>()"
    "r4 = virtualinvoke r3.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>()"
    "r5 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>()"
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test1()>()"
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test2()>()"
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test3()>()"
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test4()>()"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()";
    "r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>()"->"$r1 = new java.net.SocketException";
    "$r1 = new java.net.SocketException"->"specialinvoke $r1.<java.net.SocketException: void <init>()>()";
    "specialinvoke $r1.<java.net.SocketException: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"r3 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>()";
    "r3 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>()"->"r4 = virtualinvoke r3.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>()";
    "r4 = virtualinvoke r3.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>()"->"r5 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>()";
    "r5 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>()"->"staticinvoke <javaT.nio.channels.SocketChannel.Open: void test1()>()";
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test1()>()"->"staticinvoke <javaT.nio.channels.SocketChannel.Open: void test2()>()";
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test2()>()"->"staticinvoke <javaT.nio.channels.SocketChannel.Open: void test3()>()";
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test3()>()"->"staticinvoke <javaT.nio.channels.SocketChannel.Open: void test4()>()";
    "staticinvoke <javaT.nio.channels.SocketChannel.Open: void test4()>()"->"return";
}
