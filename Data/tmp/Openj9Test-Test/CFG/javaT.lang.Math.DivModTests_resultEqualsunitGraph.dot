digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Object"
    "r2 := @parameter1: java.lang.Object"
    "$r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"
    "$r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()"
    "if $r1 == $r3 goto $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)"
    "$r4 = newarray (java.lang.Object)[2]"
    "$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"
    "$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>()"
    "$r4[0] = $r6"
    "$r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()"
    "$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>()"
    "$r4[1] = $r8"
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Result type mismatch, %s; expected: %s%n\", $r4)"
    "return 0"
    "$z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)"
    "if $z0 == 0 goto $z1 = r0 instanceof java.lang.ArithmeticException"
    "return 1"
    "$z1 = r0 instanceof java.lang.ArithmeticException"
    "if $z1 == 0 goto return 0"
    "$z2 = r2 instanceof java.lang.ArithmeticException"
    "if $z2 == 0 goto return 0"
    "r0 := @parameter0: java.lang.Object"->"r2 := @parameter1: java.lang.Object";
    "r2 := @parameter1: java.lang.Object"->"$r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()";
    "$r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"->"$r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()";
    "$r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()"->"if $r1 == $r3 goto $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)";
    "if $r1 == $r3 goto $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)"->"$r4 = newarray (java.lang.Object)[2]";
    "if $r1 == $r3 goto $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)"->"$z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)";
    "$r4 = newarray (java.lang.Object)[2]"->"$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()";
    "$r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()"->"$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>()";
    "$r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>()"->"$r4[0] = $r6";
    "$r4[0] = $r6"->"$r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()";
    "$r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()"->"$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>()";
    "$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>()"->"$r4[1] = $r8";
    "$r4[1] = $r8"->"staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Result type mismatch, %s; expected: %s%n\", $r4)";
    "staticinvoke <javaT.lang.Math.DivModTests: void fail(java.lang.String,java.lang.Object[])>(\"FAIL: Result type mismatch, %s; expected: %s%n\", $r4)"->"return 0";
    "$z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2)"->"if $z0 == 0 goto $z1 = r0 instanceof java.lang.ArithmeticException";
    "if $z0 == 0 goto $z1 = r0 instanceof java.lang.ArithmeticException"->"return 1";
    "if $z0 == 0 goto $z1 = r0 instanceof java.lang.ArithmeticException"->"$z1 = r0 instanceof java.lang.ArithmeticException";
    "$z1 = r0 instanceof java.lang.ArithmeticException"->"if $z1 == 0 goto return 0";
    "if $z1 == 0 goto return 0"->"$z2 = r2 instanceof java.lang.ArithmeticException";
    "if $z1 == 0 goto return 0"->"return 0";
    "$z2 = r2 instanceof java.lang.ArithmeticException"->"if $z2 == 0 goto return 0";
    "if $z2 == 0 goto return 0"->"return 1";
    "if $z2 == 0 goto return 0"->"return 0";
}
