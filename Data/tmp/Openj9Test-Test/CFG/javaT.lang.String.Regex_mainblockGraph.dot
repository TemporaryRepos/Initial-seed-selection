digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r13 := @parameter0: java.lang.String[];
r0 = \"boo:and:foo\";
$z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>(\"b+\");
staticinvoke <javaT.lang.String.Regex: void ck(boolean,boolean)>($z0, 0);
$z1 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>(\"o+\");
staticinvoke <javaT.lang.String.Regex: void ck(boolean,boolean)>($z1, 0);
$z2 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>(\"b..:and:f.*\");
staticinvoke <javaT.lang.String.Regex: void ck(boolean,boolean)>($z2, 1);
$r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"oo\", \"uu\");
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String,java.lang.String)>($r1, \"buu:and:fuu\");
$r2 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"o+\", \"<$0>\");
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String,java.lang.String)>($r2, \"b<oo>:and:f<oo>\");
$r3 = virtualinvoke r0.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>(\"oo\", \"uu\");
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String,java.lang.String)>($r3, \"buu:and:foo\");
$r4 = virtualinvoke r0.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>(\"o+\", \"<$0>\");
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String,java.lang.String)>($r4, \"b<oo>:and:foo\");
$r5 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(\":\");
$r6 = newarray (java.lang.String)[3];
$r6[0] = \"boo\";
$r6[1] = \"and\";
$r6[2] = \"foo\";
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String[],java.lang.String[])>($r5, $r6);
$r7 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"o\");
$r8 = newarray (java.lang.String)[3];
$r8[0] = \"b\";
$r8[1] = \"\";
$r8[2] = \":and:f\";
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String[],java.lang.String[])>($r7, $r8);
$r9 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(\":\", 2);
$r10 = newarray (java.lang.String)[2];
$r10[0] = \"boo\";
$r10[1] = \"and:foo\";
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String[],java.lang.String[])>($r9, $r10);
$r11 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(\"o\", -2);
$r12 = newarray (java.lang.String)[5];
$r12[0] = \"b\";
$r12[1] = \"\";
$r12[2] = \":and:f\";
$r12[3] = \"\";
$r12[4] = \"\";
staticinvoke <javaT.lang.String.Regex: void ck(java.lang.String[],java.lang.String[])>($r11, $r12);
staticinvoke <javaT.lang.String.Regex: void testLiteralReplacement()>();
return;
"
}
