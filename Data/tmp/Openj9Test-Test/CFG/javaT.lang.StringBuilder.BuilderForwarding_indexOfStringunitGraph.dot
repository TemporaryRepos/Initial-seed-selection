digraph "unitGraph" {
    "r10 := @this: javaT.lang.StringBuilder.BuilderForwarding"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"
    "r11 = $r0"
    "virtualinvoke r11.<java.lang.StringBuilder: int indexOf(java.lang.String)>(null)"
    "$r1 = new java.lang.RuntimeException"
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"
    "throw $r1"
    "$r8 := @caughtexception"
    "r12 = $r8"
    "goto [?= $r9 = new java.lang.StringBuilder]"
    "$r2 := @caughtexception"
    "r13 = $r2"
    "$r3 = new java.lang.RuntimeException"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test failed: should have thrown NPE. Instead threw \")"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"
    "throw $r3"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyz\")"
    "r14 = $r9"
    "$i1 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"y\")"
    "virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)"
    "$i2 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")"
    "virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, -1)"
    "return"
    "r10 := @this: javaT.lang.StringBuilder.BuilderForwarding"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"->"r11 = $r0";
    "r11 = $r0"->"$r8 := @caughtexception";
    "r11 = $r0"->"$r2 := @caughtexception";
    "r11 = $r0"->"virtualinvoke r11.<java.lang.StringBuilder: int indexOf(java.lang.String)>(null)";
    "virtualinvoke r11.<java.lang.StringBuilder: int indexOf(java.lang.String)>(null)"->"$r8 := @caughtexception";
    "virtualinvoke r11.<java.lang.StringBuilder: int indexOf(java.lang.String)>(null)"->"$r2 := @caughtexception";
    "virtualinvoke r11.<java.lang.StringBuilder: int indexOf(java.lang.String)>(null)"->"$r1 = new java.lang.RuntimeException";
    "$r1 = new java.lang.RuntimeException"->"$r8 := @caughtexception";
    "$r1 = new java.lang.RuntimeException"->"$r2 := @caughtexception";
    "$r1 = new java.lang.RuntimeException"->"specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"$r8 := @caughtexception";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"$r2 := @caughtexception";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: should have thrown NPE\")"->"throw $r1";
    "throw $r1"->"$r8 := @caughtexception";
    "throw $r1"->"$r2 := @caughtexception";
    "$r8 := @caughtexception"->"r12 = $r8";
    "r12 = $r8"->"goto [?= $r9 = new java.lang.StringBuilder]";
    "goto [?= $r9 = new java.lang.StringBuilder]"->"$r9 = new java.lang.StringBuilder";
    "$r2 := @caughtexception"->"r13 = $r2";
    "r13 = $r2"->"$r3 = new java.lang.RuntimeException";
    "$r3 = new java.lang.RuntimeException"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test failed: should have thrown NPE. Instead threw \")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Test failed: should have thrown NPE. Instead threw \")"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13)";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"->"throw $r3";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyz\")";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"xyz\")"->"r14 = $r9";
    "r14 = $r9"->"$i1 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"y\")";
    "$i1 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"y\")"->"virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)";
    "virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i1, 1)"->"$i2 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")";
    "$i2 = virtualinvoke r14.<java.lang.StringBuilder: int indexOf(java.lang.String)>(\"not found\")"->"virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, -1)";
    "virtualinvoke r10.<javaT.lang.StringBuilder.BuilderForwarding: void assertEquals(int,int)>($i2, -1)"->"return";
}
