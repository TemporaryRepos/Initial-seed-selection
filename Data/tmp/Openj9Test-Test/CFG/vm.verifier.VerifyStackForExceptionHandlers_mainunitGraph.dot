digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "$r0 = new vm.verifier.VerifyStackForExceptionHandlers"
    "specialinvoke $r0.<vm.verifier.VerifyStackForExceptionHandlers: void <init>()>()"
    "r1 = $r0"
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadGoodClass()>()"
    "goto [?= specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()]"
    "$r5 := @caughtexception"
    "r8 = $r5"
    "$r6 = new java.lang.Exception"
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be no VerifyError for class A\")"
    "throw $r6"
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()"
    "$r2 = new java.lang.Exception"
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be a VerifyError for class B\")"
    "throw $r2"
    "$r3 := @caughtexception"
    "r9 = $r3"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"PASS\")"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"$r0 = new vm.verifier.VerifyStackForExceptionHandlers";
    "$r0 = new vm.verifier.VerifyStackForExceptionHandlers"->"specialinvoke $r0.<vm.verifier.VerifyStackForExceptionHandlers: void <init>()>()";
    "specialinvoke $r0.<vm.verifier.VerifyStackForExceptionHandlers: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadGoodClass()>()";
    "r1 = $r0"->"$r5 := @caughtexception";
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadGoodClass()>()"->"goto [?= specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()]";
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadGoodClass()>()"->"$r5 := @caughtexception";
    "goto [?= specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()]"->"specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()";
    "goto [?= specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()]"->"$r3 := @caughtexception";
    "$r5 := @caughtexception"->"r8 = $r5";
    "r8 = $r5"->"$r6 = new java.lang.Exception";
    "$r6 = new java.lang.Exception"->"specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be no VerifyError for class A\")";
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be no VerifyError for class A\")"->"throw $r6";
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()"->"$r2 = new java.lang.Exception";
    "specialinvoke r1.<vm.verifier.VerifyStackForExceptionHandlers: void loadBadClass()>()"->"$r3 := @caughtexception";
    "$r2 = new java.lang.Exception"->"specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be a VerifyError for class B\")";
    "$r2 = new java.lang.Exception"->"$r3 := @caughtexception";
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be a VerifyError for class B\")"->"throw $r2";
    "specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>(\"FAIL: should be a VerifyError for class B\")"->"$r3 := @caughtexception";
    "throw $r2"->"$r3 := @caughtexception";
    "$r3 := @caughtexception"->"r9 = $r3";
    "r9 = $r3"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"PASS\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"PASS\")"->"return";
}
