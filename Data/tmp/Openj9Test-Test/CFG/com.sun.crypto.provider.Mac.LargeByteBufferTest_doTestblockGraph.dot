digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r27 := @this: com.sun.crypto.provider.Mac.LargeByteBufferTest;
r1 := @parameter0: java.lang.String;
r0 = staticinvoke <com.sun.crypto.provider.Mac.Utils: javax.crypto.spec.SecretKeySpec getSecretKeySpec()>();
r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r1, \"SunJCE\");
$r35 = (java.security.Key) r0;
virtualinvoke r2.<javax.crypto.Mac: void init(java.security.Key)>($r35);
r3 = newarray (byte)[65535];
i5 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= 65535 goto r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i3 = i5 % 256;
$b4 = (byte) $i3;
r3[i5] = $b4;
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
i0 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
virtualinvoke r2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>(r28);
virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>();
i1 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
i2 = virtualinvoke r28.<java.nio.ByteBuffer: int position()>();
if i1 == i0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r29 = new java.lang.StringBuilder;
specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit after = \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);
$r22 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit before = \");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);
$r31 = new java.lang.RuntimeException;
specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: limit of buffer has been chenged.\");
throw $r31;
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
if i2 == i1 goto return;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r6 = <java.lang.System: java.io.PrintStream out>;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"position after = \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);
$r11 = <java.lang.System: java.io.PrintStream out>;
$r33 = new java.lang.StringBuilder;
specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit after = \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);
$r34 = new java.lang.RuntimeException;
specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: position of buffer isn\'t equal to its limit\");
throw $r34;
"
    "Block 7:
[preds: 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r27 := @this: com.sun.crypto.provider.Mac.LargeByteBufferTest;
r1 := @parameter0: java.lang.String;
r0 = staticinvoke <com.sun.crypto.provider.Mac.Utils: javax.crypto.spec.SecretKeySpec getSecretKeySpec()>();
r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>(r1, \"SunJCE\");
$r35 = (java.security.Key) r0;
virtualinvoke r2.<javax.crypto.Mac: void init(java.security.Key)>($r35);
r3 = newarray (byte)[65535];
i5 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= 65535 goto r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= 65535 goto r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$i3 = i5 % 256;
$b4 = (byte) $i3;
r3[i5] = $b4;
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= 65535 goto r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
i0 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
virtualinvoke r2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>(r28);
virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>();
i1 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
i2 = virtualinvoke r28.<java.nio.ByteBuffer: int position()>();
if i1 == i0 goto (branch);
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i3 = i5 % 256;
$b4 = (byte) $i3;
r3[i5] = $b4;
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= 65535 goto r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
i0 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
virtualinvoke r2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>(r28);
virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>();
i1 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
i2 = virtualinvoke r28.<java.nio.ByteBuffer: int position()>();
if i1 == i0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r29 = new java.lang.StringBuilder;
specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit after = \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);
$r22 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit before = \");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);
$r31 = new java.lang.RuntimeException;
specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: limit of buffer has been chenged.\");
throw $r31;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
i0 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
virtualinvoke r2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>(r28);
virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>();
i1 = virtualinvoke r28.<java.nio.ByteBuffer: int limit()>();
i2 = virtualinvoke r28.<java.nio.ByteBuffer: int position()>();
if i1 == i0 goto (branch);
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
if i2 == i1 goto return;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
if i2 == i1 goto return;
"->"Block 6:
[preds: 5 ] [succs: ]
$r6 = <java.lang.System: java.io.PrintStream out>;
$r32 = new java.lang.StringBuilder;
specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"position after = \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);
$r11 = <java.lang.System: java.io.PrintStream out>;
$r33 = new java.lang.StringBuilder;
specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"limit after = \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);
$r34 = new java.lang.RuntimeException;
specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed: position of buffer isn\'t equal to its limit\");
throw $r34;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
if i2 == i1 goto return;
"->"Block 7:
[preds: 5 ] [succs: ]
return;
";
}
