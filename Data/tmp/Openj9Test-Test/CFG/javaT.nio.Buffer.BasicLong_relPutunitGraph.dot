digraph "unitGraph" {
    "r0 := @parameter0: java.nio.LongBuffer"
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer clear()>()"
    "i2 = 0"
    "if i2 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()"
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i2)"
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer put(long)>($l1)"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()"
    "return"
    "r0 := @parameter0: java.nio.LongBuffer"->"i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()";
    "i0 = virtualinvoke r0.<java.nio.LongBuffer: int capacity()>()"->"virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer clear()>()";
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer clear()>()"->"i2 = 0";
    "i2 = 0"->"if i2 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()";
    "if i2 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()"->"$l1 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i2)";
    "if i2 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()"->"virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()";
    "$l1 = staticinvoke <javaT.nio.Buffer.BasicLong: long ic(int)>(i2)"->"virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer put(long)>($l1)";
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.LongBuffer put(long)>($l1)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= i0 goto virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()";
    "virtualinvoke r0.<java.nio.LongBuffer: java.nio.Buffer flip()>()"->"return";
}
