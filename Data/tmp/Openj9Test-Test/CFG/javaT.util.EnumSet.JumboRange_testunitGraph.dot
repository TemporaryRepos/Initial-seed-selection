digraph "unitGraph" {
    "r9 := @parameter0: java.lang.Class"
    "r0 := @parameter1: java.lang.Enum"
    "r1 := @parameter2: java.lang.Enum"
    "r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1)"
    "$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>()"
    "$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()"
    "$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()"
    "$i3 = $i1 - $i2"
    "$i4 = $i3 + 1"
    "if $i0 == $i4 goto return"
    "$r3 = new java.lang.RuntimeException"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$i5 = virtualinvoke r2.<java.util.EnumSet: int size()>()"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$i6 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()"
    "$i7 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()"
    "$i8 = $i6 - $i7"
    "$i9 = $i8 + 1"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8)"
    "throw $r3"
    "return"
    "r9 := @parameter0: java.lang.Class"->"r0 := @parameter1: java.lang.Enum";
    "r0 := @parameter1: java.lang.Enum"->"r1 := @parameter2: java.lang.Enum";
    "r1 := @parameter2: java.lang.Enum"->"r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1)";
    "r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>(r0, r1)"->"$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>()";
    "$i0 = virtualinvoke r2.<java.util.EnumSet: int size()>()"->"$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()";
    "$i1 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()"->"$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()";
    "$i2 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()"->"$i3 = $i1 - $i2";
    "$i3 = $i1 - $i2"->"$i4 = $i3 + 1";
    "$i4 = $i3 + 1"->"if $i0 == $i4 goto return";
    "if $i0 == $i4 goto return"->"$r3 = new java.lang.RuntimeException";
    "if $i0 == $i4 goto return"->"return";
    "$r3 = new java.lang.RuntimeException"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$i5 = virtualinvoke r2.<java.util.EnumSet: int size()>()";
    "$i5 = virtualinvoke r2.<java.util.EnumSet: int size()>()"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$i6 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()";
    "$i6 = virtualinvoke r1.<java.lang.Enum: int ordinal()>()"->"$i7 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()";
    "$i7 = virtualinvoke r0.<java.lang.Enum: int ordinal()>()"->"$i8 = $i6 - $i7";
    "$i8 = $i6 - $i7"->"$i9 = $i8 + 1";
    "$i9 = $i8 + 1"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8)";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8)"->"throw $r3";
}
