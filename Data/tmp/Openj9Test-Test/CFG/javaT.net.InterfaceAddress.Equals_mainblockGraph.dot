digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
r7 = null;
r8 = null;
"
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.255.0\");
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.0.0\");
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= $r1 = (java.net.InetAddress) null];
"
    "Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$r4 := @caughtexception;
r5 = $r4;
virtualinvoke r5.<java.net.UnknownHostException: void printStackTrace()>();
"
    "Block 5:
[preds: 3 4 ] [succs: ]
$r1 = (java.net.InetAddress) null;
r9 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r1, 45);
$r2 = (java.net.InetAddress) null;
r10 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r2, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r10, 1);
r11 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r11, 0);
$r3 = (java.net.InetAddress) null;
r12 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>($r3, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r12, 0);
r13 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
r14 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r13, r14, 1);
virtualinvoke r13.<java.net.InterfaceAddress: boolean equals(java.lang.Object)>(null);
return;
"
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
r7 = null;
r8 = null;
"->"Block 1:
[preds: 0 ] [succs: 2 4 ]
r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.255.0\");
";
    "Block 0:
[preds: ] [succs: 1 4 ]
r6 := @parameter0: java.lang.String[];
r0 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
r7 = null;
r8 = null;
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$r4 := @caughtexception;
r5 = $r4;
virtualinvoke r5.<java.net.UnknownHostException: void printStackTrace()>();
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.255.0\");
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.0.0\");
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.255.0\");
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$r4 := @caughtexception;
r5 = $r4;
virtualinvoke r5.<java.net.UnknownHostException: void printStackTrace()>();
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.0.0\");
"->"Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= $r1 = (java.net.InetAddress) null];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(\"255.255.0.0\");
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$r4 := @caughtexception;
r5 = $r4;
virtualinvoke r5.<java.net.UnknownHostException: void printStackTrace()>();
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
goto [?= $r1 = (java.net.InetAddress) null];
"->"Block 5:
[preds: 3 4 ] [succs: ]
$r1 = (java.net.InetAddress) null;
r9 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r1, 45);
$r2 = (java.net.InetAddress) null;
r10 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r2, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r10, 1);
r11 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r11, 0);
$r3 = (java.net.InetAddress) null;
r12 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>($r3, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r12, 0);
r13 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
r14 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r13, r14, 1);
virtualinvoke r13.<java.net.InterfaceAddress: boolean equals(java.lang.Object)>(null);
return;
";
    "Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$r4 := @caughtexception;
r5 = $r4;
virtualinvoke r5.<java.net.UnknownHostException: void printStackTrace()>();
"->"Block 5:
[preds: 3 4 ] [succs: ]
$r1 = (java.net.InetAddress) null;
r9 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r1, 45);
$r2 = (java.net.InetAddress) null;
r10 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, $r2, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r10, 1);
r11 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r11, 0);
$r3 = (java.net.InetAddress) null;
r12 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>($r3, r7, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r9, r12, 0);
r13 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
r14 = staticinvoke <javaT.net.InterfaceAddress.Equals: java.net.InterfaceAddress createInterfaceAddress(java.net.InetAddress,java.net.InetAddress,short)>(r0, r8, 45);
staticinvoke <javaT.net.InterfaceAddress.Equals: void compare(java.net.InterfaceAddress,java.net.InterfaceAddress,boolean)>(r13, r14, 1);
virtualinvoke r13.<java.net.InterfaceAddress: boolean equals(java.lang.Object)>(null);
return;
";
}
