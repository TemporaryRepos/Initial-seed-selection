digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.zip.ZipInputStream"
    "$r1 = <java.lang.System: java.io.InputStream in>"
    "specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1)"
    "r2 = $r0"
    "virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L)"
    "$r3 = new java.lang.Exception"
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\")"
    "throw $r3"
    "$r4 := @caughtexception"
    "r5 = $r4"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"$r0 = new java.util.zip.ZipInputStream";
    "$r0 = new java.util.zip.ZipInputStream"->"$r1 = <java.lang.System: java.io.InputStream in>";
    "$r1 = <java.lang.System: java.io.InputStream in>"->"specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1)";
    "specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r1)"->"r2 = $r0";
    "r2 = $r0"->"virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L)";
    "r2 = $r0"->"$r4 := @caughtexception";
    "virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L)"->"$r3 = new java.lang.Exception";
    "virtualinvoke r2.<java.util.zip.ZipInputStream: long skip(long)>(-1L)"->"$r4 := @caughtexception";
    "$r3 = new java.lang.Exception"->"specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\")";
    "$r3 = new java.lang.Exception"->"$r4 := @caughtexception";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\")"->"throw $r3";
    "specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>(\"Skip allowed negative value\")"->"$r4 := @caughtexception";
    "throw $r3"->"$r4 := @caughtexception";
    "$r4 := @caughtexception"->"r5 = $r4";
    "r5 = $r4"->"return";
}
