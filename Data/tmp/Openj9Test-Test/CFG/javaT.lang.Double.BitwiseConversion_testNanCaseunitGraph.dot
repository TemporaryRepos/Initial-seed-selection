digraph "unitGraph" {
    "l0 := @parameter0: long"
    "i7 = 0"
    "l1 = l0 & 4503599627370495L"
    "$r0 = newarray (double)[2]"
    "$l2 = 9218868437227405312L | l1"
    "$d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2)"
    "$r0[0] = $d0"
    "$l3 = -4503599627370496L | l1"
    "$d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3)"
    "$r0[1] = $d1"
    "r1 = $r0"
    "r2 = r1"
    "i4 = lengthof r2"
    "i8 = 0"
    "if i8 >= i4 goto return i7"
    "d2 = r2[i8]"
    "$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2)"
    "if $z0 != 0 goto l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)"
    "$r7 = new java.lang.RuntimeException"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Invalid input \")"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"yielded non-NaN\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2)"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13)"
    "throw $r7"
    "l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)"
    "$b6 = l5 cmp 9221120237041090560L"
    "if $b6 == 0 goto i8 = i8 + 1"
    "i7 = i7 + 1"
    "$r4 = <java.lang.System: java.io.PrintStream err>"
    "$r3 = newarray (java.lang.Object)[1]"
    "$r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5)"
    "$r3[0] = $r5"
    "virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Non-canoncial NaN bits returned: %x%n\", $r3)"
    "i8 = i8 + 1"
    "goto [?= (branch)]"
    "return i7"
    "l0 := @parameter0: long"->"i7 = 0";
    "i7 = 0"->"l1 = l0 & 4503599627370495L";
    "l1 = l0 & 4503599627370495L"->"$r0 = newarray (double)[2]";
    "$r0 = newarray (double)[2]"->"$l2 = 9218868437227405312L | l1";
    "$l2 = 9218868437227405312L | l1"->"$d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2)";
    "$d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2)"->"$r0[0] = $d0";
    "$r0[0] = $d0"->"$l3 = -4503599627370496L | l1";
    "$l3 = -4503599627370496L | l1"->"$d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3)";
    "$d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3)"->"$r0[1] = $d1";
    "$r0[1] = $d1"->"r1 = $r0";
    "r1 = $r0"->"r2 = r1";
    "r2 = r1"->"i4 = lengthof r2";
    "i4 = lengthof r2"->"i8 = 0";
    "i8 = 0"->"if i8 >= i4 goto return i7";
    "if i8 >= i4 goto return i7"->"d2 = r2[i8]";
    "if i8 >= i4 goto return i7"->"return i7";
    "d2 = r2[i8]"->"$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2)";
    "$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2)"->"if $z0 != 0 goto l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)";
    "if $z0 != 0 goto l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)"->"$r7 = new java.lang.RuntimeException";
    "if $z0 != 0 goto l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)"->"l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)";
    "$r7 = new java.lang.RuntimeException"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Invalid input \")";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Invalid input \")"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"yielded non-NaN\")";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"yielded non-NaN\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2)";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2)"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13)";
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13)"->"throw $r7";
    "l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2)"->"$b6 = l5 cmp 9221120237041090560L";
    "$b6 = l5 cmp 9221120237041090560L"->"if $b6 == 0 goto i8 = i8 + 1";
    "if $b6 == 0 goto i8 = i8 + 1"->"i7 = i7 + 1";
    "if $b6 == 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "i7 = i7 + 1"->"$r4 = <java.lang.System: java.io.PrintStream err>";
    "$r4 = <java.lang.System: java.io.PrintStream err>"->"$r3 = newarray (java.lang.Object)[1]";
    "$r3 = newarray (java.lang.Object)[1]"->"$r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5)";
    "$r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5)"->"$r3[0] = $r5";
    "$r3[0] = $r5"->"virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Non-canoncial NaN bits returned: %x%n\", $r3)";
    "virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>(\"Non-canoncial NaN bits returned: %x%n\", $r3)"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i4 goto return i7";
}
