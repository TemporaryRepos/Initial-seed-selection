digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r6 := @parameter0: java.lang.String[];
$r0 = new java.lang.String;
specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>(\"-128\");
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>($r0, -128);
$r1 = new java.lang.String;
specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(\"127\");
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>($r1, 127);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"10\", 10);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"0x10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"0X10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"010\", 8);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"#10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"+10\", 10);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"+0x10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"+0X10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"+010\", 8);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"+#10\", 16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"-10\", -10);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"-0x10\", -16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"-0X10\", -16);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"-010\", -8);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>(\"-#10\", -16);
$r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-128);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>($r2, -128);
$r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(127);
staticinvoke <javaT.lang.Byte.Decode: void check(java.lang.String,byte)>($r3, 127);
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x-10\", \"Byte.decode allows negative sign in wrong position.\");
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"0x+10\", \"Byte.decode allows positive sign in wrong position.\");
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"+\", \"Raw plus sign allowed.\");
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"-\", \"Raw minus sign allowed.\");
$r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-129);
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>($r4, \"Out of range\");
$r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(128);
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>($r5, \"Out of range\");
staticinvoke <javaT.lang.Byte.Decode: void checkFailure(java.lang.String,java.lang.String)>(\"\", \"Empty String\");
return;
"
}
