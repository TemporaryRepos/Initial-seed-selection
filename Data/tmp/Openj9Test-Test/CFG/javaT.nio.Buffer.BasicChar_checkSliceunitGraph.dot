digraph "unitGraph" {
    "r1 := @parameter0: java.nio.CharBuffer"
    "r0 := @parameter1: java.nio.CharBuffer"
    "$i0 = virtualinvoke r0.<java.nio.CharBuffer: int position()>()"
    "$l1 = (long) $i0"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1)"
    "$i2 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()"
    "$l3 = (long) $i2"
    "$i4 = virtualinvoke r0.<java.nio.CharBuffer: int limit()>()"
    "$l5 = (long) $i4"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)"
    "$i6 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()"
    "$l7 = (long) $i6"
    "$i8 = virtualinvoke r0.<java.nio.CharBuffer: int capacity()>()"
    "$l9 = (long) $i8"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9)"
    "$z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean isDirect()>()"
    "$z1 = virtualinvoke r0.<java.nio.CharBuffer: boolean isDirect()>()"
    "if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0)"
    "$z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()"
    "$z3 = virtualinvoke r0.<java.nio.CharBuffer: boolean isReadOnly()>()"
    "if $z2 == $z3 goto return"
    "staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0)"
    "return"
    "r1 := @parameter0: java.nio.CharBuffer"->"r0 := @parameter1: java.nio.CharBuffer";
    "r0 := @parameter1: java.nio.CharBuffer"->"$i0 = virtualinvoke r0.<java.nio.CharBuffer: int position()>()";
    "$i0 = virtualinvoke r0.<java.nio.CharBuffer: int position()>()"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1)";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, 0L, $l1)"->"$i2 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()";
    "$i2 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()"->"$l3 = (long) $i2";
    "$l3 = (long) $i2"->"$i4 = virtualinvoke r0.<java.nio.CharBuffer: int limit()>()";
    "$i4 = virtualinvoke r0.<java.nio.CharBuffer: int limit()>()"->"$l5 = (long) $i4";
    "$l5 = (long) $i4"->"staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l3, $l5)"->"$i6 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()";
    "$i6 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>()"->"$l7 = (long) $i6";
    "$l7 = (long) $i6"->"$i8 = virtualinvoke r0.<java.nio.CharBuffer: int capacity()>()";
    "$i8 = virtualinvoke r0.<java.nio.CharBuffer: int capacity()>()"->"$l9 = (long) $i8";
    "$l9 = (long) $i8"->"staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9)";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void ck(java.nio.Buffer,long,long)>(r0, $l7, $l9)"->"$z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean isDirect()>()";
    "$z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean isDirect()>()"->"$z1 = virtualinvoke r0.<java.nio.CharBuffer: boolean isDirect()>()";
    "$z1 = virtualinvoke r0.<java.nio.CharBuffer: boolean isDirect()>()"->"if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()";
    "if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()"->"staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0)";
    "if $z0 == $z1 goto $z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()"->"$z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost direction\", r0)"->"$z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()";
    "$z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean isReadOnly()>()"->"$z3 = virtualinvoke r0.<java.nio.CharBuffer: boolean isReadOnly()>()";
    "$z3 = virtualinvoke r0.<java.nio.CharBuffer: boolean isReadOnly()>()"->"if $z2 == $z3 goto return";
    "if $z2 == $z3 goto return"->"staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0)";
    "if $z2 == $z3 goto return"->"return";
    "staticinvoke <javaT.nio.Buffer.BasicChar: void fail(java.lang.String,java.nio.Buffer)>(\"Lost read-only\", r0)"->"return";
}
