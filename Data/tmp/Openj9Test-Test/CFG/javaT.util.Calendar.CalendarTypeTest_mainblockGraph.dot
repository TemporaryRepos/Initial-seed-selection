digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r26 := @parameter0: java.lang.String[];
i3 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$i0 = lengthof $r0;
if i3 >= $i0 goto $r1 = new java.util.GregorianCalendar;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r22 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$r23 = $r22[i3];
r27 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r23);
r28 = virtualinvoke r27.<java.util.Calendar: java.lang.String getCalendarType()>();
$r24 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
$i2 = i3 / 2;
$r25 = $r24[$i2];
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad calendar type\", r28, $r25);
i3 = i3 + 1;
goto [?= $r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>];
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new java.util.GregorianCalendar;
specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();
r29 = $r1;
$r2 = virtualinvoke r29.<java.util.GregorianCalendar: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar type\", $r2, \"gregory\");
$r3 = new javaT.util.Calendar.CalendarTypeTest$Gregorian;
specialinvoke $r3.<javaT.util.Calendar.CalendarTypeTest$Gregorian: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r30 = $r3;
$r4 = virtualinvoke r30.<javaT.util.Calendar.CalendarTypeTest$Gregorian: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar subclass type\", $r4, \"gregory\");
$r5 = new javaT.util.Calendar.CalendarTypeTest$Koyomi;
specialinvoke $r5.<javaT.util.Calendar.CalendarTypeTest$Koyomi: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r31 = $r5;
$r6 = virtualinvoke r31.<java.util.Calendar: java.lang.String getCalendarType()>();
$r7 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad class name\", $r6, $r8);
r9 = staticinvoke <java.util.Calendar: java.util.Set getAvailableCalendarTypes()>();
$i1 = interfaceinvoke r9.<java.util.Set: int size()>();
if $i1 == 3 goto r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r21 = new java.lang.RuntimeException;
specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"size != 3\");
throw $r21;
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
i4 = lengthof r32;
i5 = 0;
"
    "Block 6:
[preds: 5 9 ] [succs: 7 10 ]
if i5 >= i4 goto r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
r33 = r32[i5];
$z1 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r33);
if $z1 != 0 goto i5 = i5 + 1;
"
    "Block 8:
[preds: 7 ] [succs: ]
$r16 = new java.lang.RuntimeException;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not contained\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);
throw $r16;
"
    "Block 9:
[preds: 7 ] [succs: 6 ]
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 10:
[preds: 6 ] [succs: 11 ]
r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
i6 = lengthof r34;
i7 = 0;
"
    "Block 11:
[preds: 10 14 ] [succs: 12 15 ]
if i7 >= i6 goto return;
"
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
r35 = r34[i7];
$z0 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r35);
if $z0 == 0 goto i7 = i7 + 1;
"
    "Block 13:
[preds: 12 ] [succs: ]
$r10 = new java.lang.RuntimeException;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"alias \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" contained\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);
throw $r10;
"
    "Block 14:
[preds: 12 ] [succs: 11 ]
i7 = i7 + 1;
goto [?= (branch)];
"
    "Block 15:
[preds: 11 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r26 := @parameter0: java.lang.String[];
i3 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$i0 = lengthof $r0;
if i3 >= $i0 goto $r1 = new java.util.GregorianCalendar;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$i0 = lengthof $r0;
if i3 >= $i0 goto $r1 = new java.util.GregorianCalendar;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r22 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$r23 = $r22[i3];
r27 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r23);
r28 = virtualinvoke r27.<java.util.Calendar: java.lang.String getCalendarType()>();
$r24 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
$i2 = i3 / 2;
$r25 = $r24[$i2];
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad calendar type\", r28, $r25);
i3 = i3 + 1;
goto [?= $r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$i0 = lengthof $r0;
if i3 >= $i0 goto $r1 = new java.util.GregorianCalendar;
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new java.util.GregorianCalendar;
specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();
r29 = $r1;
$r2 = virtualinvoke r29.<java.util.GregorianCalendar: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar type\", $r2, \"gregory\");
$r3 = new javaT.util.Calendar.CalendarTypeTest$Gregorian;
specialinvoke $r3.<javaT.util.Calendar.CalendarTypeTest$Gregorian: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r30 = $r3;
$r4 = virtualinvoke r30.<javaT.util.Calendar.CalendarTypeTest$Gregorian: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar subclass type\", $r4, \"gregory\");
$r5 = new javaT.util.Calendar.CalendarTypeTest$Koyomi;
specialinvoke $r5.<javaT.util.Calendar.CalendarTypeTest$Koyomi: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r31 = $r5;
$r6 = virtualinvoke r31.<java.util.Calendar: java.lang.String getCalendarType()>();
$r7 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad class name\", $r6, $r8);
r9 = staticinvoke <java.util.Calendar: java.util.Set getAvailableCalendarTypes()>();
$i1 = interfaceinvoke r9.<java.util.Set: int size()>();
if $i1 == 3 goto r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r22 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$r23 = $r22[i3];
r27 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r23);
r28 = virtualinvoke r27.<java.util.Calendar: java.lang.String getCalendarType()>();
$r24 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
$i2 = i3 / 2;
$r25 = $r24[$i2];
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad calendar type\", r28, $r25);
i3 = i3 + 1;
goto [?= $r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r0 = <javaT.util.Calendar.CalendarTypeTest: java.util.Locale[] locales>;
$i0 = lengthof $r0;
if i3 >= $i0 goto $r1 = new java.util.GregorianCalendar;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new java.util.GregorianCalendar;
specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();
r29 = $r1;
$r2 = virtualinvoke r29.<java.util.GregorianCalendar: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar type\", $r2, \"gregory\");
$r3 = new javaT.util.Calendar.CalendarTypeTest$Gregorian;
specialinvoke $r3.<javaT.util.Calendar.CalendarTypeTest$Gregorian: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r30 = $r3;
$r4 = virtualinvoke r30.<javaT.util.Calendar.CalendarTypeTest$Gregorian: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar subclass type\", $r4, \"gregory\");
$r5 = new javaT.util.Calendar.CalendarTypeTest$Koyomi;
specialinvoke $r5.<javaT.util.Calendar.CalendarTypeTest$Koyomi: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r31 = $r5;
$r6 = virtualinvoke r31.<java.util.Calendar: java.lang.String getCalendarType()>();
$r7 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad class name\", $r6, $r8);
r9 = staticinvoke <java.util.Calendar: java.util.Set getAvailableCalendarTypes()>();
$i1 = interfaceinvoke r9.<java.util.Set: int size()>();
if $i1 == 3 goto r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
"->"Block 4:
[preds: 3 ] [succs: ]
$r21 = new java.lang.RuntimeException;
specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"size != 3\");
throw $r21;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new java.util.GregorianCalendar;
specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();
r29 = $r1;
$r2 = virtualinvoke r29.<java.util.GregorianCalendar: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar type\", $r2, \"gregory\");
$r3 = new javaT.util.Calendar.CalendarTypeTest$Gregorian;
specialinvoke $r3.<javaT.util.Calendar.CalendarTypeTest$Gregorian: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r30 = $r3;
$r4 = virtualinvoke r30.<javaT.util.Calendar.CalendarTypeTest$Gregorian: java.lang.String getCalendarType()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad GregorianCalendar subclass type\", $r4, \"gregory\");
$r5 = new javaT.util.Calendar.CalendarTypeTest$Koyomi;
specialinvoke $r5.<javaT.util.Calendar.CalendarTypeTest$Koyomi: void <init>(javaT.util.Calendar.CalendarTypeTest$1)>(null);
r31 = $r5;
$r6 = virtualinvoke r31.<java.util.Calendar: java.lang.String getCalendarType()>();
$r7 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();
$r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
staticinvoke <javaT.util.Calendar.CalendarTypeTest: void checkValue(java.lang.String,java.lang.String,java.lang.String)>(\"bad class name\", $r6, $r8);
r9 = staticinvoke <java.util.Calendar: java.util.Set getAvailableCalendarTypes()>();
$i1 = interfaceinvoke r9.<java.util.Set: int size()>();
if $i1 == 3 goto r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
"->"Block 5:
[preds: 3 ] [succs: 6 ]
r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
i4 = lengthof r32;
i5 = 0;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
r32 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] TYPES>;
i4 = lengthof r32;
i5 = 0;
"->"Block 6:
[preds: 5 9 ] [succs: 7 10 ]
if i5 >= i4 goto r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 ]
if i5 >= i4 goto r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
r33 = r32[i5];
$z1 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r33);
if $z1 != 0 goto i5 = i5 + 1;
";
    "Block 6:
[preds: 5 9 ] [succs: 7 10 ]
if i5 >= i4 goto r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
"->"Block 10:
[preds: 6 ] [succs: 11 ]
r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
i6 = lengthof r34;
i7 = 0;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
r33 = r32[i5];
$z1 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r33);
if $z1 != 0 goto i5 = i5 + 1;
"->"Block 8:
[preds: 7 ] [succs: ]
$r16 = new java.lang.RuntimeException;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not contained\");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);
throw $r16;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
r33 = r32[i5];
$z1 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r33);
if $z1 != 0 goto i5 = i5 + 1;
"->"Block 9:
[preds: 7 ] [succs: 6 ]
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 9:
[preds: 7 ] [succs: 6 ]
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 6:
[preds: 5 9 ] [succs: 7 10 ]
if i5 >= i4 goto r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
";
    "Block 10:
[preds: 6 ] [succs: 11 ]
r34 = <javaT.util.Calendar.CalendarTypeTest: java.lang.String[] ALIASES>;
i6 = lengthof r34;
i7 = 0;
"->"Block 11:
[preds: 10 14 ] [succs: 12 15 ]
if i7 >= i6 goto return;
";
    "Block 11:
[preds: 10 14 ] [succs: 12 15 ]
if i7 >= i6 goto return;
"->"Block 12:
[preds: 11 ] [succs: 13 14 ]
r35 = r34[i7];
$z0 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r35);
if $z0 == 0 goto i7 = i7 + 1;
";
    "Block 11:
[preds: 10 14 ] [succs: 12 15 ]
if i7 >= i6 goto return;
"->"Block 15:
[preds: 11 ] [succs: ]
return;
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
r35 = r34[i7];
$z0 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r35);
if $z0 == 0 goto i7 = i7 + 1;
"->"Block 13:
[preds: 12 ] [succs: ]
$r10 = new java.lang.RuntimeException;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"alias \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" contained\");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);
throw $r10;
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
r35 = r34[i7];
$z0 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r35);
if $z0 == 0 goto i7 = i7 + 1;
"->"Block 14:
[preds: 12 ] [succs: 11 ]
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 14:
[preds: 12 ] [succs: 11 ]
i7 = i7 + 1;
goto [?= (branch)];
"->"Block 11:
[preds: 10 14 ] [succs: 12 15 ]
if i7 >= i6 goto return;
";
}
