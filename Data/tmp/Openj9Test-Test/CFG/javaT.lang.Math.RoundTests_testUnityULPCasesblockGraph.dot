digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
i4 = 0;
$r0 = newarray (float)[2];
$r0[0] = -1.0F;
$r0[1] = 1.0F;
r6 = $r0;
i5 = lengthof r6;
i6 = 0;
"
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i6 >= i5 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
f3 = r6[i6];
$r4 = newarray (float)[2];
$r4[0] = 8388608.0F;
$r4[1] = 1.6777216E7F;
r5 = $r4;
i7 = lengthof r5;
i8 = 0;
"
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i8 >= i7 goto i6 = i6 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
f4 = r5[i8];
i9 = -5;
"
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i9 > 5 goto i8 = i8 + 1;
"
    "Block 6:
[preds: 5 ] [succs: 5 ]
$f0 = (float) i9;
$f1 = f4 + $f0;
f2 = $f1 * f3;
$i2 = staticinvoke <java.lang.Math: int round(float)>(f2);
f5 = (float) $i2;
$i3 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,float,float,float)>(\"Math.round\", f2, f5, f2);
i4 = i4 + $i3;
i9 = i9 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 5 ] [succs: 3 ]
i8 = i8 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 1 ] [succs: 10 11 ]
if i4 == 0 goto $r1 = newarray (double)[2];
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println()>();
"
    "Block 11:
[preds: 9 10 ] [succs: 12 ]
$r1 = newarray (double)[2];
$r1[0] = -1.0;
$r1[1] = 1.0;
r7 = $r1;
i10 = lengthof r7;
i11 = 0;
"
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 >= i10 goto return i4;
"
    "Block 13:
[preds: 12 ] [succs: 14 ]
d4 = r7[i11];
$r2 = newarray (double)[2];
$r2[0] = 4.503599627370496E15;
$r2[1] = 9.007199254740992E15;
r8 = $r2;
i12 = lengthof r8;
i13 = 0;
"
    "Block 14:
[preds: 13 18 ] [succs: 15 19 ]
if i13 >= i12 goto i11 = i11 + 1;
"
    "Block 15:
[preds: 14 ] [succs: 16 ]
d5 = r8[i13];
i14 = -5;
"
    "Block 16:
[preds: 15 17 ] [succs: 17 18 ]
if i14 > 5 goto i13 = i13 + 1;
"
    "Block 17:
[preds: 16 ] [succs: 16 ]
$d0 = (double) i14;
$d1 = d5 + $d0;
d2 = $d1 * d4;
$l0 = staticinvoke <java.lang.Math: long round(double)>(d2);
d3 = (double) $l0;
$i1 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,double,double,double)>(\"Math.round\", d2, d3, d2);
i4 = i4 + $i1;
i14 = i14 + 1;
goto [?= (branch)];
"
    "Block 18:
[preds: 16 ] [succs: 14 ]
i13 = i13 + 1;
goto [?= (branch)];
"
    "Block 19:
[preds: 14 ] [succs: 12 ]
i11 = i11 + 1;
goto [?= (branch)];
"
    "Block 20:
[preds: 12 ] [succs: ]
return i4;
"
    "Block 0:
[preds: ] [succs: 1 ]
i4 = 0;
$r0 = newarray (float)[2];
$r0[0] = -1.0F;
$r0[1] = 1.0F;
r6 = $r0;
i5 = lengthof r6;
i6 = 0;
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i6 >= i5 goto (branch);
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i6 >= i5 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 ]
f3 = r6[i6];
$r4 = newarray (float)[2];
$r4[0] = 8388608.0F;
$r4[1] = 1.6777216E7F;
r5 = $r4;
i7 = lengthof r5;
i8 = 0;
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i6 >= i5 goto (branch);
"->"Block 9:
[preds: 1 ] [succs: 10 11 ]
if i4 == 0 goto $r1 = newarray (double)[2];
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
f3 = r6[i6];
$r4 = newarray (float)[2];
$r4[0] = 8388608.0F;
$r4[1] = 1.6777216E7F;
r5 = $r4;
i7 = lengthof r5;
i8 = 0;
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i8 >= i7 goto i6 = i6 + 1;
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i8 >= i7 goto i6 = i6 + 1;
"->"Block 4:
[preds: 3 ] [succs: 5 ]
f4 = r5[i8];
i9 = -5;
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i8 >= i7 goto i6 = i6 + 1;
"->"Block 8:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
f4 = r5[i8];
i9 = -5;
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i9 > 5 goto i8 = i8 + 1;
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i9 > 5 goto i8 = i8 + 1;
"->"Block 6:
[preds: 5 ] [succs: 5 ]
$f0 = (float) i9;
$f1 = f4 + $f0;
f2 = $f1 * f3;
$i2 = staticinvoke <java.lang.Math: int round(float)>(f2);
f5 = (float) $i2;
$i3 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,float,float,float)>(\"Math.round\", f2, f5, f2);
i4 = i4 + $i3;
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i9 > 5 goto i8 = i8 + 1;
"->"Block 7:
[preds: 5 ] [succs: 3 ]
i8 = i8 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 5 ]
$f0 = (float) i9;
$f1 = f4 + $f0;
f2 = $f1 * f3;
$i2 = staticinvoke <java.lang.Math: int round(float)>(f2);
f5 = (float) $i2;
$i3 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,float,float,float)>(\"Math.round\", f2, f5, f2);
i4 = i4 + $i3;
i9 = i9 + 1;
goto [?= (branch)];
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i9 > 5 goto i8 = i8 + 1;
";
    "Block 7:
[preds: 5 ] [succs: 3 ]
i8 = i8 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
if i8 >= i7 goto i6 = i6 + 1;
";
    "Block 8:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i6 >= i5 goto (branch);
";
    "Block 9:
[preds: 1 ] [succs: 10 11 ]
if i4 == 0 goto $r1 = newarray (double)[2];
"->"Block 10:
[preds: 9 ] [succs: 11 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println()>();
";
    "Block 9:
[preds: 1 ] [succs: 10 11 ]
if i4 == 0 goto $r1 = newarray (double)[2];
"->"Block 11:
[preds: 9 10 ] [succs: 12 ]
$r1 = newarray (double)[2];
$r1[0] = -1.0;
$r1[1] = 1.0;
r7 = $r1;
i10 = lengthof r7;
i11 = 0;
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println()>();
"->"Block 11:
[preds: 9 10 ] [succs: 12 ]
$r1 = newarray (double)[2];
$r1[0] = -1.0;
$r1[1] = 1.0;
r7 = $r1;
i10 = lengthof r7;
i11 = 0;
";
    "Block 11:
[preds: 9 10 ] [succs: 12 ]
$r1 = newarray (double)[2];
$r1[0] = -1.0;
$r1[1] = 1.0;
r7 = $r1;
i10 = lengthof r7;
i11 = 0;
"->"Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 >= i10 goto return i4;
";
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 >= i10 goto return i4;
"->"Block 13:
[preds: 12 ] [succs: 14 ]
d4 = r7[i11];
$r2 = newarray (double)[2];
$r2[0] = 4.503599627370496E15;
$r2[1] = 9.007199254740992E15;
r8 = $r2;
i12 = lengthof r8;
i13 = 0;
";
    "Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 >= i10 goto return i4;
"->"Block 20:
[preds: 12 ] [succs: ]
return i4;
";
    "Block 13:
[preds: 12 ] [succs: 14 ]
d4 = r7[i11];
$r2 = newarray (double)[2];
$r2[0] = 4.503599627370496E15;
$r2[1] = 9.007199254740992E15;
r8 = $r2;
i12 = lengthof r8;
i13 = 0;
"->"Block 14:
[preds: 13 18 ] [succs: 15 19 ]
if i13 >= i12 goto i11 = i11 + 1;
";
    "Block 14:
[preds: 13 18 ] [succs: 15 19 ]
if i13 >= i12 goto i11 = i11 + 1;
"->"Block 15:
[preds: 14 ] [succs: 16 ]
d5 = r8[i13];
i14 = -5;
";
    "Block 14:
[preds: 13 18 ] [succs: 15 19 ]
if i13 >= i12 goto i11 = i11 + 1;
"->"Block 19:
[preds: 14 ] [succs: 12 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 15:
[preds: 14 ] [succs: 16 ]
d5 = r8[i13];
i14 = -5;
"->"Block 16:
[preds: 15 17 ] [succs: 17 18 ]
if i14 > 5 goto i13 = i13 + 1;
";
    "Block 16:
[preds: 15 17 ] [succs: 17 18 ]
if i14 > 5 goto i13 = i13 + 1;
"->"Block 17:
[preds: 16 ] [succs: 16 ]
$d0 = (double) i14;
$d1 = d5 + $d0;
d2 = $d1 * d4;
$l0 = staticinvoke <java.lang.Math: long round(double)>(d2);
d3 = (double) $l0;
$i1 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,double,double,double)>(\"Math.round\", d2, d3, d2);
i4 = i4 + $i1;
i14 = i14 + 1;
goto [?= (branch)];
";
    "Block 16:
[preds: 15 17 ] [succs: 17 18 ]
if i14 > 5 goto i13 = i13 + 1;
"->"Block 18:
[preds: 16 ] [succs: 14 ]
i13 = i13 + 1;
goto [?= (branch)];
";
    "Block 17:
[preds: 16 ] [succs: 16 ]
$d0 = (double) i14;
$d1 = d5 + $d0;
d2 = $d1 * d4;
$l0 = staticinvoke <java.lang.Math: long round(double)>(d2);
d3 = (double) $l0;
$i1 = staticinvoke <javaT.lang.Math.Tests: int test(java.lang.String,double,double,double)>(\"Math.round\", d2, d3, d2);
i4 = i4 + $i1;
i14 = i14 + 1;
goto [?= (branch)];
"->"Block 16:
[preds: 15 17 ] [succs: 17 18 ]
if i14 > 5 goto i13 = i13 + 1;
";
    "Block 18:
[preds: 16 ] [succs: 14 ]
i13 = i13 + 1;
goto [?= (branch)];
"->"Block 14:
[preds: 13 18 ] [succs: 15 19 ]
if i13 >= i12 goto i11 = i11 + 1;
";
    "Block 19:
[preds: 14 ] [succs: 12 ]
i11 = i11 + 1;
goto [?= (branch)];
"->"Block 12:
[preds: 11 19 ] [succs: 13 20 ]
if i11 >= i10 goto return i4;
";
}
