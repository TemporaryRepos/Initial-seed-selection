digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.nio.IntBuffer;
i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>();
virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer clear()>();
$i1 = i0 + 7;
r2 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>($i1);
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer position(int)>(7);
i4 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i4 >= i0 goto virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$l2 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i4);
$i3 = (int) $l2;
virtualinvoke r2.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i3);
i4 = i4 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer position(int)>(7);
virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>(r2);
virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>();
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.nio.IntBuffer;
i0 = virtualinvoke r0.<java.nio.IntBuffer: int capacity()>();
virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer clear()>();
$i1 = i0 + 7;
r2 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>($i1);
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer position(int)>(7);
i4 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i4 >= i0 goto virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i4 >= i0 goto virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$l2 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i4);
$i3 = (int) $l2;
virtualinvoke r2.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i3);
i4 = i4 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i4 >= i0 goto virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
"->"Block 3:
[preds: 1 ] [succs: ]
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer position(int)>(7);
virtualinvoke r0.<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>(r2);
virtualinvoke r0.<java.nio.IntBuffer: java.nio.Buffer flip()>();
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$l2 = staticinvoke <javaT.nio.Buffer.BasicInt: long ic(int)>(i4);
$i3 = (int) $l2;
virtualinvoke r2.<java.nio.IntBuffer: java.nio.IntBuffer put(int)>($i3);
i4 = i4 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i4 >= i0 goto virtualinvoke r2.<java.nio.IntBuffer: java.nio.Buffer flip()>();
";
}
