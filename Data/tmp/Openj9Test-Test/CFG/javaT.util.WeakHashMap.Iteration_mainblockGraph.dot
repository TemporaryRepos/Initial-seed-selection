digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
r0 = \"iatrogenic\";
$r1 = new java.util.WeakHashMap;
specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();
r2 = $r1;
interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, \"cucumber\");
$r4 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();
r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == $z1 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"hasNext advances iterator\");
throw $r6;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
r0 = \"iatrogenic\";
$r1 = new java.util.WeakHashMap;
specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();
r2 = $r1;
interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, \"cucumber\");
$r4 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();
r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == $z1 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"hasNext advances iterator\");
throw $r6;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @parameter0: java.lang.String[];
r0 = \"iatrogenic\";
$r1 = new java.util.WeakHashMap;
specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();
r2 = $r1;
interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, \"cucumber\");
$r4 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();
r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
$z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == $z1 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
