digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "z1 := @parameter1: boolean"
    "r0 = \"(\\p{Digit}+)\""
    "r1 = \"(\\p{XDigit}+)\""
    "r2 = \"[eE][+-]?(\\p{Digit}+)\""
    "r3 = \"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\""
    "r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(\"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\")"
    "i1 = 0"
    "$i0 = lengthof r5"
    "if i1 >= $i0 goto return"
    "$r6 = r5[i1]"
    "r7 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6)"
    "$z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean matches()>()"
    "if z1 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= (branch)]"
    "$z2 = 0"
    "if $z0 == $z2 goto i1 = i1 + 1"
    "$r8 = new java.lang.RuntimeException"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Regular expression \")"
    "if z1 == 0 goto $r17 = \"rejected good\""
    "$r17 = \"accepted bad\""
    "goto [?= $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)]"
    "$r17 = \"rejected good\""
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" string `\")"
    "$r13 = r5[i1]"
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'.\")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16)"
    "throw $r8"
    "i1 = i1 + 1"
    "goto [?= $i0 = lengthof r5]"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"z1 := @parameter1: boolean";
    "z1 := @parameter1: boolean"->"r0 = \"(\\p{Digit}+)\"";
    "r0 = \"(\\p{Digit}+)\""->"r1 = \"(\\p{XDigit}+)\"";
    "r1 = \"(\\p{XDigit}+)\""->"r2 = \"[eE][+-]?(\\p{Digit}+)\"";
    "r2 = \"[eE][+-]?(\\p{Digit}+)\""->"r3 = \"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\"";
    "r3 = \"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\""->"r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(\"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\")";
    "r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(\"[\\x00-\\x20]*[+-]?(NaN|Infinity|(((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?))|(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*\")"->"i1 = 0";
    "i1 = 0"->"$i0 = lengthof r5";
    "$i0 = lengthof r5"->"if i1 >= $i0 goto return";
    "if i1 >= $i0 goto return"->"$r6 = r5[i1]";
    "if i1 >= $i0 goto return"->"return";
    "$r6 = r5[i1]"->"r7 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6)";
    "r7 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6)"->"$z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean matches()>()";
    "$z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean matches()>()"->"if z1 != 0 goto $z2 = 0";
    "if z1 != 0 goto $z2 = 0"->"$z2 = 1";
    "if z1 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if $z0 == $z2 goto i1 = i1 + 1";
    "$z2 = 0"->"if $z0 == $z2 goto i1 = i1 + 1";
    "if $z0 == $z2 goto i1 = i1 + 1"->"$r8 = new java.lang.RuntimeException";
    "if $z0 == $z2 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r8 = new java.lang.RuntimeException"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Regular expression \")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Regular expression \")"->"if z1 == 0 goto $r17 = \"rejected good\"";
    "if z1 == 0 goto $r17 = \"rejected good\""->"$r17 = \"accepted bad\"";
    "if z1 == 0 goto $r17 = \"rejected good\""->"$r17 = \"rejected good\"";
    "$r17 = \"accepted bad\""->"goto [?= $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)]";
    "goto [?= $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)]"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)";
    "$r17 = \"rejected good\""->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" string `\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" string `\")"->"$r13 = r5[i1]";
    "$r13 = r5[i1]"->"$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)";
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'.\")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'.\")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16)";
    "specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16)"->"throw $r8";
    "i1 = i1 + 1"->"goto [?= $i0 = lengthof r5]";
    "goto [?= $i0 = lengthof r5]"->"$i0 = lengthof r5";
}
