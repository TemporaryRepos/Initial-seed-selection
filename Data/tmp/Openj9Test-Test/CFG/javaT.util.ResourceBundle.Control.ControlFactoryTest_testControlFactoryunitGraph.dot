digraph "unitGraph" {
    "r0 := @parameter0: javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory"
    "r1 := @parameter1: java.util.Locale"
    "$r3 = <java.util.ResourceBundle$Control: java.util.List FORMAT_DEFAULT>"
    "$r2 = newarray (java.lang.String)[2]"
    "$r2[0] = \"java.class\""
    "$r2[1] = \"java.properties\""
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r3, $r2)"
    "$r5 = <java.util.ResourceBundle$Control: java.util.List FORMAT_CLASS>"
    "$r4 = newarray (java.lang.String)[1]"
    "$r4[0] = \"java.class\""
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r5, $r4)"
    "$r7 = <java.util.ResourceBundle$Control: java.util.List FORMAT_PROPERTIES>"
    "$r6 = newarray (java.lang.String)[1]"
    "$r6[0] = \"java.properties\""
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r7, $r6)"
    "$r8 = newarray (java.lang.String[])[6]"
    "$r9 = newarray (java.lang.String)[3]"
    "$r9[0] = \"java.class\""
    "$r9[1] = \"java.properties\""
    "$r9[2] = \"java.xml\""
    "$r8[0] = $r9"
    "$r10 = newarray (java.lang.String)[2]"
    "$r10[0] = \"java.class\""
    "$r10[1] = \"java.props\""
    "$r8[1] = $r10"
    "$r11 = newarray (java.lang.String)[2]"
    "$r11[0] = \"java.properties\""
    "$r11[1] = \"java.class\""
    "$r8[2] = $r11"
    "$r12 = newarray (java.lang.String)[2]"
    "$r12[0] = \"java.foo\""
    "$r12[1] = \"java.properties\""
    "$r8[3] = $r12"
    "$r13 = newarray (java.lang.String)[1]"
    "$r13[0] = \"java.foo\""
    "$r8[4] = $r13"
    "$r14 = newarray (java.lang.String)[1]"
    "$r14[0] = null"
    "$r8[5] = $r14"
    "r15 = $r8"
    "r23 = r15"
    "i0 = lengthof r23"
    "i1 = 0"
    "if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"
    "r18 = r23[i1]"
    "r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r18)"
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(r24)"
    "$r20 = newarray (java.lang.Object)[1]"
    "$r20[0] = r24"
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"getControl: %s%n\", $r20)"
    "goto [?= i1 = i1 + 1]"
    "$r22 := @caughtexception"
    "r25 = $r22"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"
    "$r16 = newarray (java.lang.Object)[1]"
    "$r17 = interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.lang.String name()>()"
    "$r16[0] = $r17"
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"%s: doesn\'t throw NPE.%n\", $r16)"
    "goto [?= return]"
    "$r21 := @caughtexception"
    "r27 = $r21"
    "return"
    "r0 := @parameter0: javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory"->"r1 := @parameter1: java.util.Locale";
    "r1 := @parameter1: java.util.Locale"->"$r3 = <java.util.ResourceBundle$Control: java.util.List FORMAT_DEFAULT>";
    "$r3 = <java.util.ResourceBundle$Control: java.util.List FORMAT_DEFAULT>"->"$r2 = newarray (java.lang.String)[2]";
    "$r2 = newarray (java.lang.String)[2]"->"$r2[0] = \"java.class\"";
    "$r2[0] = \"java.class\""->"$r2[1] = \"java.properties\"";
    "$r2[1] = \"java.properties\""->"staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r3, $r2)";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r3, $r2)"->"$r5 = <java.util.ResourceBundle$Control: java.util.List FORMAT_CLASS>";
    "$r5 = <java.util.ResourceBundle$Control: java.util.List FORMAT_CLASS>"->"$r4 = newarray (java.lang.String)[1]";
    "$r4 = newarray (java.lang.String)[1]"->"$r4[0] = \"java.class\"";
    "$r4[0] = \"java.class\""->"staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r5, $r4)";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r5, $r4)"->"$r7 = <java.util.ResourceBundle$Control: java.util.List FORMAT_PROPERTIES>";
    "$r7 = <java.util.ResourceBundle$Control: java.util.List FORMAT_PROPERTIES>"->"$r6 = newarray (java.lang.String)[1]";
    "$r6 = newarray (java.lang.String)[1]"->"$r6[0] = \"java.properties\"";
    "$r6[0] = \"java.properties\""->"staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r7, $r6)";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void testGetControl(javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory,java.util.Locale,java.util.List,java.lang.String[])>(r0, r1, $r7, $r6)"->"$r8 = newarray (java.lang.String[])[6]";
    "$r8 = newarray (java.lang.String[])[6]"->"$r9 = newarray (java.lang.String)[3]";
    "$r9 = newarray (java.lang.String)[3]"->"$r9[0] = \"java.class\"";
    "$r9[0] = \"java.class\""->"$r9[1] = \"java.properties\"";
    "$r9[1] = \"java.properties\""->"$r9[2] = \"java.xml\"";
    "$r9[2] = \"java.xml\""->"$r8[0] = $r9";
    "$r8[0] = $r9"->"$r10 = newarray (java.lang.String)[2]";
    "$r10 = newarray (java.lang.String)[2]"->"$r10[0] = \"java.class\"";
    "$r10[0] = \"java.class\""->"$r10[1] = \"java.props\"";
    "$r10[1] = \"java.props\""->"$r8[1] = $r10";
    "$r8[1] = $r10"->"$r11 = newarray (java.lang.String)[2]";
    "$r11 = newarray (java.lang.String)[2]"->"$r11[0] = \"java.properties\"";
    "$r11[0] = \"java.properties\""->"$r11[1] = \"java.class\"";
    "$r11[1] = \"java.class\""->"$r8[2] = $r11";
    "$r8[2] = $r11"->"$r12 = newarray (java.lang.String)[2]";
    "$r12 = newarray (java.lang.String)[2]"->"$r12[0] = \"java.foo\"";
    "$r12[0] = \"java.foo\""->"$r12[1] = \"java.properties\"";
    "$r12[1] = \"java.properties\""->"$r8[3] = $r12";
    "$r8[3] = $r12"->"$r13 = newarray (java.lang.String)[1]";
    "$r13 = newarray (java.lang.String)[1]"->"$r13[0] = \"java.foo\"";
    "$r13[0] = \"java.foo\""->"$r8[4] = $r13";
    "$r8[4] = $r13"->"$r14 = newarray (java.lang.String)[1]";
    "$r14 = newarray (java.lang.String)[1]"->"$r14[0] = null";
    "$r14[0] = null"->"$r8[5] = $r14";
    "$r8[5] = $r14"->"r15 = $r8";
    "r15 = $r8"->"r23 = r15";
    "r23 = r15"->"i0 = lengthof r23";
    "i0 = lengthof r23"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)";
    "if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"->"r18 = r23[i1]";
    "if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"->"interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)";
    "if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"->"$r21 := @caughtexception";
    "r18 = r23[i1]"->"r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r18)";
    "r18 = r23[i1]"->"$r22 := @caughtexception";
    "r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r18)"->"interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(r24)";
    "r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r18)"->"$r22 := @caughtexception";
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(r24)"->"$r20 = newarray (java.lang.Object)[1]";
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(r24)"->"$r22 := @caughtexception";
    "$r20 = newarray (java.lang.Object)[1]"->"$r20[0] = r24";
    "$r20 = newarray (java.lang.Object)[1]"->"$r22 := @caughtexception";
    "$r20[0] = r24"->"staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"getControl: %s%n\", $r20)";
    "$r20[0] = r24"->"$r22 := @caughtexception";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"getControl: %s%n\", $r20)"->"goto [?= i1 = i1 + 1]";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"getControl: %s%n\", $r20)"->"$r22 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r22 := @caughtexception"->"r25 = $r22";
    "r25 = $r22"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)";
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"->"$r16 = newarray (java.lang.Object)[1]";
    "interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.util.ResourceBundle$Control getControl(java.util.List)>(null)"->"$r21 := @caughtexception";
    "$r16 = newarray (java.lang.Object)[1]"->"$r17 = interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.lang.String name()>()";
    "$r16 = newarray (java.lang.Object)[1]"->"$r21 := @caughtexception";
    "$r17 = interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.lang.String name()>()"->"$r16[0] = $r17";
    "$r17 = interfaceinvoke r0.<javaT.util.ResourceBundle.Control.ControlFactoryTest$Factory: java.lang.String name()>()"->"$r21 := @caughtexception";
    "$r16[0] = $r17"->"staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"%s: doesn\'t throw NPE.%n\", $r16)";
    "$r16[0] = $r17"->"$r21 := @caughtexception";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"%s: doesn\'t throw NPE.%n\", $r16)"->"goto [?= return]";
    "staticinvoke <javaT.util.ResourceBundle.Control.ControlFactoryTest: void error(java.lang.String,java.lang.Object[])>(\"%s: doesn\'t throw NPE.%n\", $r16)"->"$r21 := @caughtexception";
    "goto [?= return]"->"return";
    "$r21 := @caughtexception"->"r27 = $r21";
    "r27 = $r21"->"return";
}
