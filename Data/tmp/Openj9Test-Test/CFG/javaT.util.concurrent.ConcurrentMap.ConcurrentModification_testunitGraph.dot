digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.ConcurrentMap"
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()"
    "$z0 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z0)"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2)"
    "$r4 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"
    "r33 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto (branch)"
    "$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r24)"
    "$r26 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>()"
    "r34 = (java.util.Map$Entry) $r26"
    "$z5 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z5)"
    "$r27 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "$r28 = (java.lang.Integer) $r27"
    "$i4 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()"
    "if $i4 != 1 goto $z6 = 0"
    "$z6 = 1"
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)]"
    "$z6 = 0"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)"
    "$r29 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r30 = (java.lang.Integer) $r29"
    "$i5 = virtualinvoke $r30.<java.lang.Integer: int intValue()>()"
    "if $i5 != 2 goto $z7 = 0"
    "$z7 = 1"
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)]"
    "$z7 = 0"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)"
    "goto [?= interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()]"
    "$r32 := @caughtexception"
    "r35 = $r32"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r35)"
    "$z2 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z2)"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6)"
    "$r8 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"
    "r36 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()"
    "$z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()"
    "if $z3 == 0 goto (branch)"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"
    "$r12 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()"
    "r37 = (java.util.Map$Entry) $r12"
    "$r13 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "$r14 = (java.lang.Integer) $r13"
    "$i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()"
    "if $i0 != 1 goto $z8 = 0"
    "$z8 = 1"
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)]"
    "$z8 = 0"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)"
    "$r15 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r16 = (java.lang.Integer) $r15"
    "$i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>()"
    "if $i1 == 2 goto $z9 = 1"
    "$r22 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r23 = (java.lang.Integer) $r22"
    "$i3 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()"
    "if $i3 != 3 goto $z9 = 0"
    "$z9 = 1"
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)]"
    "$z9 = 0"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)"
    "$z4 = r0 instanceof java.util.concurrent.ConcurrentHashMap"
    "if $z4 == 0 goto (branch)"
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"
    "interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r17)"
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r20 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r19)"
    "$r21 = (java.lang.Integer) $r20"
    "$i2 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()"
    "if $i2 != 4 goto $z10 = 0"
    "$z10 = 1"
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)]"
    "$z10 = 0"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)"
    "goto [?= return]"
    "$r31 := @caughtexception"
    "r38 = $r31"
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r38)"
    "return"
    "r0 := @parameter0: java.util.concurrent.ConcurrentMap"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()";
    "r0 := @parameter0: java.util.concurrent.ConcurrentMap"->"$r32 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()"->"$z0 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()"->"$r32 := @caughtexception";
    "$z0 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z0)";
    "$z0 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"$r32 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z0)"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z0)"->"$r32 := @caughtexception";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r32 := @caughtexception";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"->"$r32 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2)"->"$r4 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2)"->"$r32 := @caughtexception";
    "$r4 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"->"r33 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()";
    "$r4 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"->"$r32 := @caughtexception";
    "r33 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()";
    "r33 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()"->"$r32 := @caughtexception";
    "$z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto (branch)";
    "$z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()"->"$r32 := @caughtexception";
    "if $z1 == 0 goto (branch)"->"$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "if $z1 == 0 goto (branch)"->"goto [?= interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()]";
    "if $z1 == 0 goto (branch)"->"$r32 := @caughtexception";
    "$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r24)";
    "$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r32 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r24)"->"$r26 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r24)"->"$r32 := @caughtexception";
    "$r26 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>()"->"r34 = (java.util.Map$Entry) $r26";
    "$r26 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>()"->"$r32 := @caughtexception";
    "r34 = (java.util.Map$Entry) $r26"->"$z5 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()";
    "r34 = (java.util.Map$Entry) $r26"->"$r32 := @caughtexception";
    "$z5 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z5)";
    "$z5 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"$r32 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z5)"->"$r27 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z5)"->"$r32 := @caughtexception";
    "$r27 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r28 = (java.lang.Integer) $r27";
    "$r27 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r32 := @caughtexception";
    "$r28 = (java.lang.Integer) $r27"->"$i4 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()";
    "$r28 = (java.lang.Integer) $r27"->"$r32 := @caughtexception";
    "$i4 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()"->"if $i4 != 1 goto $z6 = 0";
    "$i4 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()"->"$r32 := @caughtexception";
    "if $i4 != 1 goto $z6 = 0"->"$z6 = 1";
    "if $i4 != 1 goto $z6 = 0"->"$z6 = 0";
    "if $i4 != 1 goto $z6 = 0"->"$r32 := @caughtexception";
    "$z6 = 1"->"goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)]";
    "$z6 = 1"->"$r32 := @caughtexception";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)]"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)]"->"$r32 := @caughtexception";
    "$z6 = 0"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)";
    "$z6 = 0"->"$r32 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)"->"$r29 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z6)"->"$r32 := @caughtexception";
    "$r29 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r30 = (java.lang.Integer) $r29";
    "$r29 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r32 := @caughtexception";
    "$r30 = (java.lang.Integer) $r29"->"$i5 = virtualinvoke $r30.<java.lang.Integer: int intValue()>()";
    "$r30 = (java.lang.Integer) $r29"->"$r32 := @caughtexception";
    "$i5 = virtualinvoke $r30.<java.lang.Integer: int intValue()>()"->"if $i5 != 2 goto $z7 = 0";
    "$i5 = virtualinvoke $r30.<java.lang.Integer: int intValue()>()"->"$r32 := @caughtexception";
    "if $i5 != 2 goto $z7 = 0"->"$z7 = 1";
    "if $i5 != 2 goto $z7 = 0"->"$z7 = 0";
    "if $i5 != 2 goto $z7 = 0"->"$r32 := @caughtexception";
    "$z7 = 1"->"goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)]";
    "$z7 = 1"->"$r32 := @caughtexception";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)]"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)]"->"$r32 := @caughtexception";
    "$z7 = 0"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)";
    "$z7 = 0"->"$r32 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)"->"goto [?= interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()]";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z7)"->"$r32 := @caughtexception";
    "goto [?= interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()]"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()";
    "goto [?= interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()]"->"$r31 := @caughtexception";
    "$r32 := @caughtexception"->"r35 = $r32";
    "r35 = $r32"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r35)";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r35)"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r35)"->"$r31 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()"->"$z2 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: void clear()>()"->"$r31 := @caughtexception";
    "$z2 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z2)";
    "$z2 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>()"->"$r31 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z2)"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z2)"->"$r31 := @caughtexception";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r31 := @caughtexception";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6)";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)"->"$r31 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6)"->"$r8 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6)"->"$r31 := @caughtexception";
    "$r8 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"->"r36 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()";
    "$r8 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()"->"$r31 := @caughtexception";
    "r36 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()"->"$z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()";
    "r36 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()"->"$r31 := @caughtexception";
    "$z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()"->"if $z3 == 0 goto (branch)";
    "$z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()"->"$r31 := @caughtexception";
    "if $z3 == 0 goto (branch)"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "if $z3 == 0 goto (branch)"->"goto [?= return]";
    "if $z3 == 0 goto (branch)"->"$r31 := @caughtexception";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r31 := @caughtexception";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r31 := @caughtexception";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$r12 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()";
    "interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$r31 := @caughtexception";
    "$r12 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()"->"r37 = (java.util.Map$Entry) $r12";
    "$r12 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()"->"$r31 := @caughtexception";
    "r37 = (java.util.Map$Entry) $r12"->"$r13 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "r37 = (java.util.Map$Entry) $r12"->"$r31 := @caughtexception";
    "$r13 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r14 = (java.lang.Integer) $r13";
    "$r13 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r31 := @caughtexception";
    "$r14 = (java.lang.Integer) $r13"->"$i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()";
    "$r14 = (java.lang.Integer) $r13"->"$r31 := @caughtexception";
    "$i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()"->"if $i0 != 1 goto $z8 = 0";
    "$i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()"->"$r31 := @caughtexception";
    "if $i0 != 1 goto $z8 = 0"->"$z8 = 1";
    "if $i0 != 1 goto $z8 = 0"->"$z8 = 0";
    "if $i0 != 1 goto $z8 = 0"->"$r31 := @caughtexception";
    "$z8 = 1"->"goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)]";
    "$z8 = 1"->"$r31 := @caughtexception";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)]"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)]"->"$r31 := @caughtexception";
    "$z8 = 0"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)";
    "$z8 = 0"->"$r31 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)"->"$r15 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z8)"->"$r31 := @caughtexception";
    "$r15 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r16 = (java.lang.Integer) $r15";
    "$r15 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r31 := @caughtexception";
    "$r16 = (java.lang.Integer) $r15"->"$i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>()";
    "$r16 = (java.lang.Integer) $r15"->"$r31 := @caughtexception";
    "$i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>()"->"if $i1 == 2 goto $z9 = 1";
    "$i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>()"->"$r31 := @caughtexception";
    "if $i1 == 2 goto $z9 = 1"->"$r22 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "if $i1 == 2 goto $z9 = 1"->"$z9 = 1";
    "if $i1 == 2 goto $z9 = 1"->"$r31 := @caughtexception";
    "$r22 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r23 = (java.lang.Integer) $r22";
    "$r22 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r31 := @caughtexception";
    "$r23 = (java.lang.Integer) $r22"->"$i3 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()";
    "$r23 = (java.lang.Integer) $r22"->"$r31 := @caughtexception";
    "$i3 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()"->"if $i3 != 3 goto $z9 = 0";
    "$i3 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()"->"$r31 := @caughtexception";
    "if $i3 != 3 goto $z9 = 0"->"$z9 = 1";
    "if $i3 != 3 goto $z9 = 0"->"$z9 = 0";
    "if $i3 != 3 goto $z9 = 0"->"$r31 := @caughtexception";
    "$z9 = 1"->"goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)]";
    "$z9 = 1"->"$r31 := @caughtexception";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)]"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)]"->"$r31 := @caughtexception";
    "$z9 = 0"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)";
    "$z9 = 0"->"$r31 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)"->"$z4 = r0 instanceof java.util.concurrent.ConcurrentHashMap";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z9)"->"$r31 := @caughtexception";
    "$z4 = r0 instanceof java.util.concurrent.ConcurrentHashMap"->"if $z4 == 0 goto (branch)";
    "$z4 = r0 instanceof java.util.concurrent.ConcurrentHashMap"->"$r31 := @caughtexception";
    "if $z4 == 0 goto (branch)"->"$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)";
    "if $z4 == 0 goto (branch)"->"goto [?= return]";
    "if $z4 == 0 goto (branch)"->"$r31 := @caughtexception";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r17)";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"$r31 := @caughtexception";
    "interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r17)"->"$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r17)"->"$r31 := @caughtexception";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r20 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r19)";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r31 := @caughtexception";
    "$r20 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r19)"->"$r21 = (java.lang.Integer) $r20";
    "$r20 = interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r19)"->"$r31 := @caughtexception";
    "$r21 = (java.lang.Integer) $r20"->"$i2 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()";
    "$r21 = (java.lang.Integer) $r20"->"$r31 := @caughtexception";
    "$i2 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()"->"if $i2 != 4 goto $z10 = 0";
    "$i2 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()"->"$r31 := @caughtexception";
    "if $i2 != 4 goto $z10 = 0"->"$z10 = 1";
    "if $i2 != 4 goto $z10 = 0"->"$z10 = 0";
    "if $i2 != 4 goto $z10 = 0"->"$r31 := @caughtexception";
    "$z10 = 1"->"goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)]";
    "$z10 = 1"->"$r31 := @caughtexception";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)]"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)";
    "goto [?= staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)]"->"$r31 := @caughtexception";
    "$z10 = 0"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)";
    "$z10 = 0"->"$r31 := @caughtexception";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)"->"goto [?= return]";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void check(boolean)>($z10)"->"$r31 := @caughtexception";
    "goto [?= return]"->"return";
    "$r31 := @caughtexception"->"r38 = $r31";
    "r38 = $r31"->"staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r38)";
    "staticinvoke <javaT.util.concurrent.ConcurrentMap.ConcurrentModification: void unexpected(java.lang.Throwable)>(r38)"->"return";
}
