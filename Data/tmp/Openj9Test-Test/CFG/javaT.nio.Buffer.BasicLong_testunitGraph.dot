digraph "unitGraph" {
    "staticinvoke <javaT.nio.Buffer.BasicLong: void testAllocate()>()"
    "$r0 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(7168)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r0, 0)"
    "$r1 = newarray (long)[7168]"
    "$r2 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>($r1, 0, 7168)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r2, 0)"
    "$r3 = newarray (long)[1024]"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(long[])>($r3)"
    "$r4 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(10)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void callReset(java.nio.LongBuffer)>($r4)"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void putBuffer()>()"
    "return"
    "staticinvoke <javaT.nio.Buffer.BasicLong: void testAllocate()>()"->"$r0 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(7168)";
    "$r0 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(7168)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r0, 0)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r0, 0)"->"$r1 = newarray (long)[7168]";
    "$r1 = newarray (long)[7168]"->"$r2 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>($r1, 0, 7168)";
    "$r2 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>($r1, 0, 7168)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r2, 0)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(int,java.nio.LongBuffer,boolean)>(0, $r2, 0)"->"$r3 = newarray (long)[1024]";
    "$r3 = newarray (long)[1024]"->"staticinvoke <javaT.nio.Buffer.BasicLong: void test(long[])>($r3)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void test(long[])>($r3)"->"$r4 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(10)";
    "$r4 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(10)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void callReset(java.nio.LongBuffer)>($r4)";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void callReset(java.nio.LongBuffer)>($r4)"->"staticinvoke <javaT.nio.Buffer.BasicLong: void putBuffer()>()";
    "staticinvoke <javaT.nio.Buffer.BasicLong: void putBuffer()>()"->"return";
}
