digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "b4 = 0"
    "$i0 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testLongValueExact()>()"
    "i5 = b4 + $i0"
    "$i1 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testIntValueExact()>()"
    "i6 = i5 + $i1"
    "$i2 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testShortValueExact()>()"
    "i7 = i6 + $i2"
    "$i3 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testByteValueExact()>()"
    "i8 = i7 + $i3"
    "if i8 <= 0 goto return"
    "$r0 = new java.lang.RuntimeException"
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>()>()"
    "throw $r0"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"b4 = 0";
    "b4 = 0"->"$i0 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testLongValueExact()>()";
    "$i0 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testLongValueExact()>()"->"i5 = b4 + $i0";
    "i5 = b4 + $i0"->"$i1 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testIntValueExact()>()";
    "$i1 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testIntValueExact()>()"->"i6 = i5 + $i1";
    "i6 = i5 + $i1"->"$i2 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testShortValueExact()>()";
    "$i2 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testShortValueExact()>()"->"i7 = i6 + $i2";
    "i7 = i6 + $i2"->"$i3 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testByteValueExact()>()";
    "$i3 = staticinvoke <javaT.math.BigInteger.TestValueExact: int testByteValueExact()>()"->"i8 = i7 + $i3";
    "i8 = i7 + $i3"->"if i8 <= 0 goto return";
    "if i8 <= 0 goto return"->"$r0 = new java.lang.RuntimeException";
    "if i8 <= 0 goto return"->"return";
    "$r0 = new java.lang.RuntimeException"->"specialinvoke $r0.<java.lang.RuntimeException: void <init>()>()";
    "specialinvoke $r0.<java.lang.RuntimeException: void <init>()>()"->"throw $r0";
}
