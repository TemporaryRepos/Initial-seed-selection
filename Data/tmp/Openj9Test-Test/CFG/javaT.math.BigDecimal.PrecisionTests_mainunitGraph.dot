digraph "unitGraph" {
    "r34 := @parameter0: java.lang.String[]"
    "b6 = 0"
    "$r0 = newarray (java.math.BigDecimal)[2]"
    "$r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L)"
    "$r0[0] = $r1"
    "$r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9L)"
    "$r0[1] = $r2"
    "r3 = $r0"
    "$r4 = new java.math.BigDecimal"
    "specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0)"
    "$i0 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r4, 1)"
    "i7 = b6 + $i0"
    "i8 = 1"
    "if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10]"
    "r35 = r3"
    "i9 = lengthof r35"
    "i10 = 0"
    "if i10 >= i9 goto $r25 = r3[0]"
    "r32 = r35[i10]"
    "$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8)"
    "i11 = i7 + $i4"
    "$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>()"
    "$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8)"
    "i7 = i11 + $i5"
    "i10 = i10 + 1"
    "goto [?= (branch)]"
    "$r25 = r3[0]"
    "$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>"
    "$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24)"
    "r3[0] = $r26"
    "$r28 = r3[1]"
    "$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>"
    "$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27)"
    "$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>"
    "$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30)"
    "r3[1] = $r31"
    "i8 = i8 + 1"
    "$r5 = newarray (java.math.BigDecimal)[10]"
    "$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L)"
    "$r5[0] = $r6"
    "$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L)"
    "$r5[1] = $r7"
    "$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L)"
    "$r5[2] = $r8"
    "$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L)"
    "$r5[3] = $r9"
    "$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L)"
    "$r5[4] = $r10"
    "$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L)"
    "$r5[5] = $r11"
    "$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L)"
    "$r5[6] = $r12"
    "$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L)"
    "$r5[7] = $r13"
    "$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L)"
    "$r5[8] = $r14"
    "$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L)"
    "$r5[9] = $r15"
    "r36 = $r5"
    "$r16 = newarray (int)[10]"
    "$r16[0] = 10"
    "$r16[1] = 10"
    "$r16[2] = 11"
    "$r16[3] = 13"
    "$r16[4] = 15"
    "$r16[5] = 15"
    "$r16[6] = 16"
    "$r16[7] = 17"
    "$r16[8] = 19"
    "$r16[9] = 19"
    "r37 = $r16"
    "i12 = 0"
    "$i1 = lengthof r36"
    "if i12 >= $i1 goto (branch)"
    "$r23 = r36[i12]"
    "$i2 = r37[i12]"
    "$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2)"
    "i7 = i7 + $i3"
    "i12 = i12 + 1"
    "goto [?= $i1 = lengthof r36]"
    "if i7 <= 0 goto return"
    "$r17 = new java.lang.RuntimeException"
    "$r18 = new java.lang.StringBuilder"
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")"
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing precision.\")"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22)"
    "throw $r17"
    "return"
    "r34 := @parameter0: java.lang.String[]"->"b6 = 0";
    "b6 = 0"->"$r0 = newarray (java.math.BigDecimal)[2]";
    "$r0 = newarray (java.math.BigDecimal)[2]"->"$r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L)";
    "$r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L)"->"$r0[0] = $r1";
    "$r0[0] = $r1"->"$r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9L)";
    "$r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9L)"->"$r0[1] = $r2";
    "$r0[1] = $r2"->"r3 = $r0";
    "r3 = $r0"->"$r4 = new java.math.BigDecimal";
    "$r4 = new java.math.BigDecimal"->"specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0)";
    "specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0)"->"$i0 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r4, 1)";
    "$i0 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r4, 1)"->"i7 = b6 + $i0";
    "i7 = b6 + $i0"->"i8 = 1";
    "i8 = 1"->"if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10]";
    "if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10]"->"r35 = r3";
    "if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10]"->"$r5 = newarray (java.math.BigDecimal)[10]";
    "r35 = r3"->"i9 = lengthof r35";
    "i9 = lengthof r35"->"i10 = 0";
    "i10 = 0"->"if i10 >= i9 goto $r25 = r3[0]";
    "if i10 >= i9 goto $r25 = r3[0]"->"r32 = r35[i10]";
    "if i10 >= i9 goto $r25 = r3[0]"->"$r25 = r3[0]";
    "r32 = r35[i10]"->"$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8)";
    "$i4 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>(r32, i8)"->"i11 = i7 + $i4";
    "i11 = i7 + $i4"->"$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>()";
    "$r33 = virtualinvoke r32.<java.math.BigDecimal: java.math.BigDecimal negate()>()"->"$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8)";
    "$i5 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r33, i8)"->"i7 = i11 + $i5";
    "i7 = i11 + $i5"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i9 goto $r25 = r3[0]";
    "$r25 = r3[0]"->"$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>";
    "$r24 = <java.math.BigDecimal: java.math.BigDecimal TEN>"->"$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24)";
    "$r26 = virtualinvoke $r25.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r24)"->"r3[0] = $r26";
    "r3[0] = $r26"->"$r28 = r3[1]";
    "$r28 = r3[1]"->"$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>";
    "$r27 = <java.math.BigDecimal: java.math.BigDecimal TEN>"->"$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27)";
    "$r29 = virtualinvoke $r28.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r27)"->"$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>";
    "$r30 = <javaT.math.BigDecimal.PrecisionTests: java.math.BigDecimal NINE>"->"$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30)";
    "$r31 = virtualinvoke $r29.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r30)"->"r3[1] = $r31";
    "r3[1] = $r31"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= 100 goto $r5 = newarray (java.math.BigDecimal)[10]";
    "$r5 = newarray (java.math.BigDecimal)[10]"->"$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L)";
    "$r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483648L)"->"$r5[0] = $r6";
    "$r5[0] = $r6"->"$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L)";
    "$r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-2147483648L)"->"$r5[1] = $r7";
    "$r5[1] = $r7"->"$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L)";
    "$r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(98893745455L)"->"$r5[2] = $r8";
    "$r5[2] = $r8"->"$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L)";
    "$r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(3455436789887L)"->"$r5[3] = $r9";
    "$r5[3] = $r9"->"$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L)";
    "$r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(140737488355328L)"->"$r5[4] = $r10";
    "$r5[4] = $r10"->"$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L)";
    "$r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-140737488355328L)"->"$r5[5] = $r11";
    "$r5[5] = $r11"->"$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L)";
    "$r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(7564232235739573L)"->"$r5[6] = $r12";
    "$r5[6] = $r12"->"$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L)";
    "$r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(25335434990002322L)"->"$r5[7] = $r13";
    "$r5[7] = $r13"->"$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L)";
    "$r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L)"->"$r5[8] = $r14";
    "$r5[8] = $r14"->"$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L)";
    "$r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-9223372036854775807L)"->"$r5[9] = $r15";
    "$r5[9] = $r15"->"r36 = $r5";
    "r36 = $r5"->"$r16 = newarray (int)[10]";
    "$r16 = newarray (int)[10]"->"$r16[0] = 10";
    "$r16[0] = 10"->"$r16[1] = 10";
    "$r16[1] = 10"->"$r16[2] = 11";
    "$r16[2] = 11"->"$r16[3] = 13";
    "$r16[3] = 13"->"$r16[4] = 15";
    "$r16[4] = 15"->"$r16[5] = 15";
    "$r16[5] = 15"->"$r16[6] = 16";
    "$r16[6] = 16"->"$r16[7] = 17";
    "$r16[7] = 17"->"$r16[8] = 19";
    "$r16[8] = 19"->"$r16[9] = 19";
    "$r16[9] = 19"->"r37 = $r16";
    "r37 = $r16"->"i12 = 0";
    "i12 = 0"->"$i1 = lengthof r36";
    "$i1 = lengthof r36"->"if i12 >= $i1 goto (branch)";
    "if i12 >= $i1 goto (branch)"->"$r23 = r36[i12]";
    "if i12 >= $i1 goto (branch)"->"if i7 <= 0 goto return";
    "$r23 = r36[i12]"->"$i2 = r37[i12]";
    "$i2 = r37[i12]"->"$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2)";
    "$i3 = staticinvoke <javaT.math.BigDecimal.PrecisionTests: int testPrecision(java.math.BigDecimal,int)>($r23, $i2)"->"i7 = i7 + $i3";
    "i7 = i7 + $i3"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"goto [?= $i1 = lengthof r36]";
    "goto [?= $i1 = lengthof r36]"->"$i1 = lengthof r36";
    "if i7 <= 0 goto return"->"$r17 = new java.lang.RuntimeException";
    "if i7 <= 0 goto return"->"return";
    "$r17 = new java.lang.RuntimeException"->"$r18 = new java.lang.StringBuilder";
    "$r18 = new java.lang.StringBuilder"->"specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Incurred \")"->"$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)";
    "$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing precision.\")";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" failures while testing precision.\")"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22)";
    "specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22)"->"throw $r17";
}
