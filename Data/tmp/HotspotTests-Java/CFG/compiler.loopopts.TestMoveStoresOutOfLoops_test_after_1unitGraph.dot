digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i2 = 0"
    "goto [?= (branch)]"
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$l1 = (long) i2"
    "$r0[i0] = $l1"
    "i2 = i2 + 1"
    "if i2 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "return"
    "i0 := @parameter0: int"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$l1 = (long) i2";
    "$l1 = (long) i2"->"$r0[i0] = $l1";
    "$r0[i0] = $l1"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "if i2 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"return";
    "if i2 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
}
