digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "b0 = 96"
    "i2 = 0"
    "goto [?= (branch)]"
    "$i1 = b0 - i2"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i1, 123, -123)"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, 123, -103)"
    "i2 = i2 + 1"
    "if i2 < 97 goto $i1 = b0 - i2"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"b0 = 96";
    "b0 = 96"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 97 goto $i1 = b0 - i2";
    "$i1 = b0 - i2"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i1, 123, -123)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i1, 123, -123)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, 123, -103)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, 123, -103)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 97 goto $i1 = b0 - i2";
    "if i2 < 97 goto $i1 = b0 - i2"->"return";
    "if i2 < 97 goto $i1 = b0 - i2"->"$i1 = b0 - i2";
}
