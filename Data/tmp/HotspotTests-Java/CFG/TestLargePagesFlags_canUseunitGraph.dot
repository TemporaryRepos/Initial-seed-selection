digraph "unitGraph" {
    "r2 := @parameter0: TestLargePagesFlags$Flag"
    "$r0 = new TestLargePagesFlags$FlagTester"
    "specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null)"
    "$r1 = newarray (TestLargePagesFlags$Flag)[1]"
    "$r1[0] = r2"
    "$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1)"
    "$r4 = newarray (TestLargePagesFlags$Flag)[1]"
    "$r4[0] = r2"
    "virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4)"
    "goto [?= return 1]"
    "$r5 := @caughtexception"
    "return 0"
    "return 1"
    "r2 := @parameter0: TestLargePagesFlags$Flag"->"$r0 = new TestLargePagesFlags$FlagTester";
    "r2 := @parameter0: TestLargePagesFlags$Flag"->"$r5 := @caughtexception";
    "$r0 = new TestLargePagesFlags$FlagTester"->"specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null)";
    "$r0 = new TestLargePagesFlags$FlagTester"->"$r5 := @caughtexception";
    "specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null)"->"$r1 = newarray (TestLargePagesFlags$Flag)[1]";
    "specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null)"->"$r5 := @caughtexception";
    "$r1 = newarray (TestLargePagesFlags$Flag)[1]"->"$r1[0] = r2";
    "$r1 = newarray (TestLargePagesFlags$Flag)[1]"->"$r5 := @caughtexception";
    "$r1[0] = r2"->"$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1)";
    "$r1[0] = r2"->"$r5 := @caughtexception";
    "$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1)"->"$r4 = newarray (TestLargePagesFlags$Flag)[1]";
    "$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1)"->"$r5 := @caughtexception";
    "$r4 = newarray (TestLargePagesFlags$Flag)[1]"->"$r4[0] = r2";
    "$r4 = newarray (TestLargePagesFlags$Flag)[1]"->"$r5 := @caughtexception";
    "$r4[0] = r2"->"virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4)";
    "$r4[0] = r2"->"$r5 := @caughtexception";
    "virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4)"->"goto [?= return 1]";
    "virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4)"->"$r5 := @caughtexception";
    "goto [?= return 1]"->"return 1";
    "$r5 := @caughtexception"->"return 0";
}
