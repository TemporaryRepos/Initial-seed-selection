digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.codegen.BitTests"
    "specialinvoke $r0.<compiler.codegen.BitTests: void <init>()>()"
    "r1 = $r0"
    "l3 = 0L"
    "i4 = 0"
    "goto [?= (branch)]"
    "$i0 = (int) l3"
    "$l1 = (long) $i0"
    "l3 = specialinvoke r1.<compiler.codegen.BitTests: long step(long)>($l1)"
    "i4 = i4 + 1"
    "if i4 < 10000000 goto $i0 = (int) l3"
    "$b2 = l3 cmp 50001495L"
    "if $b2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"
    "$r4 = <java.lang.System: java.io.PrintStream err>"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"FAILED: counter = \")"
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", should be 50001495.\")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)"
    "staticinvoke <java.lang.System: void exit(int)>(97)"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"PASSED\")"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"$r0 = new compiler.codegen.BitTests";
    "$r0 = new compiler.codegen.BitTests"->"specialinvoke $r0.<compiler.codegen.BitTests: void <init>()>()";
    "specialinvoke $r0.<compiler.codegen.BitTests: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"l3 = 0L";
    "l3 = 0L"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 10000000 goto $i0 = (int) l3";
    "$i0 = (int) l3"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"l3 = specialinvoke r1.<compiler.codegen.BitTests: long step(long)>($l1)";
    "l3 = specialinvoke r1.<compiler.codegen.BitTests: long step(long)>($l1)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 10000000 goto $i0 = (int) l3";
    "if i4 < 10000000 goto $i0 = (int) l3"->"$b2 = l3 cmp 50001495L";
    "if i4 < 10000000 goto $i0 = (int) l3"->"$i0 = (int) l3";
    "$b2 = l3 cmp 50001495L"->"if $b2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>";
    "if $b2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"->"$r4 = <java.lang.System: java.io.PrintStream err>";
    "if $b2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream err>"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"FAILED: counter = \")";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"FAILED: counter = \")"->"$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3)";
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", should be 50001495.\")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", should be 50001495.\")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)"->"staticinvoke <java.lang.System: void exit(int)>(97)";
    "staticinvoke <java.lang.System: void exit(int)>(97)"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"PASSED\")";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"PASSED\")"->"return";
}
