digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "z0 = 1"
    "z1 = 0"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)"
    "if z0 == 0 goto $z2 = 1"
    "$z2 = 0"
    "goto [?= z0 = $z2]"
    "$z2 = 1"
    "z0 = $z2"
    "if z1 == 0 goto $z3 = 1"
    "$z3 = 0"
    "goto [?= z1 = $z3]"
    "$z3 = 1"
    "z1 = $z3"
    "i0 = i0 + 1"
    "if i0 < 20 goto staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"z0 = 1";
    "z0 = 1"->"z1 = 0";
    "z1 = 0"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20 goto staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)";
    "staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)"->"if z0 == 0 goto $z2 = 1";
    "if z0 == 0 goto $z2 = 1"->"$z2 = 0";
    "if z0 == 0 goto $z2 = 1"->"$z2 = 1";
    "$z2 = 0"->"goto [?= z0 = $z2]";
    "goto [?= z0 = $z2]"->"z0 = $z2";
    "$z2 = 1"->"z0 = $z2";
    "z0 = $z2"->"if z1 == 0 goto $z3 = 1";
    "if z1 == 0 goto $z3 = 1"->"$z3 = 0";
    "if z1 == 0 goto $z3 = 1"->"$z3 = 1";
    "$z3 = 0"->"goto [?= z1 = $z3]";
    "goto [?= z1 = $z3]"->"z1 = $z3";
    "$z3 = 1"->"z1 = $z3";
    "z1 = $z3"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 20 goto staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)";
    "if i0 < 20 goto staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)"->"return";
    "if i0 < 20 goto staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)"->"staticinvoke <compiler.jsr292.PollutedTrapCounts$Test: void test(boolean,boolean)>(z0, z1)";
}
