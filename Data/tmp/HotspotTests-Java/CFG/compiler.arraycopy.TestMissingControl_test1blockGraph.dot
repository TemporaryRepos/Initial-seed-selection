digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r0 = newarray (int)[10];
r1 = newarray (int)[5];
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"
    "Block 3:
[preds: 2 ] [succs: 8 ]
i1 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 8 ] [succs: 5 6 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= i1 = i1 + 1];
"
    "Block 6:
[preds: 8 4 ] [succs: 7 ]
$r7 := @caughtexception;
"
    "Block 7:
[preds: 5 6 ] [succs: 8 ]
i1 = i1 + 1;
"
    "Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"
    "Block 9:
[preds: 8 ] [succs: 11 ]
i2 = 0;
goto [?= (branch)];
"
    "Block 10:
[preds: 11 ] [succs: 11 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i2 = i2 + 1;
"
    "Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null);
"
    "Block 13:
[preds: 12 ] [succs: 15 ]
goto [?= return];
"
    "Block 14:
[preds: 11 12 ] [succs: 15 ]
$r6 := @caughtexception;
"
    "Block 15:
[preds: 13 14 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r0 = newarray (int)[10];
r1 = newarray (int)[5];
i0 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"->"Block 3:
[preds: 2 ] [succs: 8 ]
i1 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i0 = i0 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 8 ]
i1 = 0;
goto [?= (branch)];
"->"Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
";
    "Block 4:
[preds: 8 ] [succs: 5 6 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"->"Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= i1 = i1 + 1];
";
    "Block 4:
[preds: 8 ] [succs: 5 6 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"->"Block 6:
[preds: 8 4 ] [succs: 7 ]
$r7 := @caughtexception;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= i1 = i1 + 1];
"->"Block 7:
[preds: 5 6 ] [succs: 8 ]
i1 = i1 + 1;
";
    "Block 6:
[preds: 8 4 ] [succs: 7 ]
$r7 := @caughtexception;
"->"Block 7:
[preds: 5 6 ] [succs: 8 ]
i1 = i1 + 1;
";
    "Block 7:
[preds: 5 6 ] [succs: 8 ]
i1 = i1 + 1;
"->"Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
";
    "Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"->"Block 9:
[preds: 8 ] [succs: 11 ]
i2 = 0;
goto [?= (branch)];
";
    "Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"->"Block 4:
[preds: 8 ] [succs: 5 6 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
";
    "Block 8:
[preds: 3 7 ] [succs: 9 4 6 ]
if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1);
"->"Block 6:
[preds: 8 4 ] [succs: 7 ]
$r7 := @caughtexception;
";
    "Block 9:
[preds: 8 ] [succs: 11 ]
i2 = 0;
goto [?= (branch)];
"->"Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
";
    "Block 10:
[preds: 11 ] [succs: 11 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i2 = i2 + 1;
"->"Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
";
    "Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"->"Block 12:
[preds: 11 ] [succs: 13 14 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null);
";
    "Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"->"Block 10:
[preds: 11 ] [succs: 11 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
i2 = i2 + 1;
";
    "Block 11:
[preds: 9 10 ] [succs: 12 10 14 ]
if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0);
"->"Block 14:
[preds: 11 12 ] [succs: 15 ]
$r6 := @caughtexception;
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null);
"->"Block 13:
[preds: 12 ] [succs: 15 ]
goto [?= return];
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null);
"->"Block 14:
[preds: 11 12 ] [succs: 15 ]
$r6 := @caughtexception;
";
    "Block 13:
[preds: 12 ] [succs: 15 ]
goto [?= return];
"->"Block 15:
[preds: 13 14 ] [succs: ]
return;
";
    "Block 14:
[preds: 11 12 ] [succs: 15 ]
$r6 := @caughtexception;
"->"Block 15:
[preds: 13 14 ] [succs: ]
return;
";
}
