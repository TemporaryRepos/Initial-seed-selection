digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 8 ]
i3 := @parameter0: int;
i4 := @parameter1: int;
r0 := @parameter2: TestSplitIfPinnedCMove$A;
r1 := @parameter3: TestSplitIfPinnedCMove$A;
i7 = 0;
i8 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 8 ] [succs: 6 ]
i9 = 0;
goto [?= (branch)];
"
    "Block 2:
[preds: 6 ] [succs: 4 ]
i10 = 0;
goto [?= (branch)];
"
    "Block 3:
[preds: 4 ] [succs: 4 ]
i7 = i7 + 1;
i10 = i10 + 1;
"
    "Block 4:
[preds: 2 3 ] [succs: 5 3 ]
if i10 < 2 goto i7 = i7 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i9 = i9 + 1;
"
    "Block 6:
[preds: 1 5 ] [succs: 7 2 ]
if i9 < 2 goto i10 = 0;
"
    "Block 7:
[preds: 6 ] [succs: 8 ]
i8 = i8 + 1;
"
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i8 < 2 goto i9 = 0;
"
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i1 = r0.<TestSplitIfPinnedCMove$A: int f>;
$i0 = r1.<TestSplitIfPinnedCMove$A: int f>;
$i2 = $i1 + $i0;
i11 = i7 + $i2;
z0 = 0;
if i3 <= 0 goto (branch);
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
z0 = 1;
"
    "Block 11:
[preds: 9 10 ] [succs: 12 13 ]
if i4 <= 0 goto $r2 = r1;
"
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r2 = r0;
goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r2 = r1;
"
    "Block 14:
[preds: 12 13 ] [succs: 15 16 ]
$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>;
i12 = i11 + $i5;
if z0 == 0 goto (branch);
"
    "Block 15:
[preds: 14 ] [succs: 16 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
i12 = i12 + 42;
"
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
if i4 <= 0 goto return i12;
"
    "Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
"
    "Block 18:
[preds: 16 17 ] [succs: ]
return i12;
"
    "Block 0:
[preds: ] [succs: 8 ]
i3 := @parameter0: int;
i4 := @parameter1: int;
r0 := @parameter2: TestSplitIfPinnedCMove$A;
r1 := @parameter3: TestSplitIfPinnedCMove$A;
i7 = 0;
i8 = 0;
goto [?= (branch)];
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i8 < 2 goto i9 = 0;
";
    "Block 1:
[preds: 8 ] [succs: 6 ]
i9 = 0;
goto [?= (branch)];
"->"Block 6:
[preds: 1 5 ] [succs: 7 2 ]
if i9 < 2 goto i10 = 0;
";
    "Block 2:
[preds: 6 ] [succs: 4 ]
i10 = 0;
goto [?= (branch)];
"->"Block 4:
[preds: 2 3 ] [succs: 5 3 ]
if i10 < 2 goto i7 = i7 + 1;
";
    "Block 3:
[preds: 4 ] [succs: 4 ]
i7 = i7 + 1;
i10 = i10 + 1;
"->"Block 4:
[preds: 2 3 ] [succs: 5 3 ]
if i10 < 2 goto i7 = i7 + 1;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 3 ]
if i10 < 2 goto i7 = i7 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i9 = i9 + 1;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 3 ]
if i10 < 2 goto i7 = i7 + 1;
"->"Block 3:
[preds: 4 ] [succs: 4 ]
i7 = i7 + 1;
i10 = i10 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i9 = i9 + 1;
"->"Block 6:
[preds: 1 5 ] [succs: 7 2 ]
if i9 < 2 goto i10 = 0;
";
    "Block 6:
[preds: 1 5 ] [succs: 7 2 ]
if i9 < 2 goto i10 = 0;
"->"Block 7:
[preds: 6 ] [succs: 8 ]
i8 = i8 + 1;
";
    "Block 6:
[preds: 1 5 ] [succs: 7 2 ]
if i9 < 2 goto i10 = 0;
"->"Block 2:
[preds: 6 ] [succs: 4 ]
i10 = 0;
goto [?= (branch)];
";
    "Block 7:
[preds: 6 ] [succs: 8 ]
i8 = i8 + 1;
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i8 < 2 goto i9 = 0;
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i8 < 2 goto i9 = 0;
"->"Block 9:
[preds: 8 ] [succs: 10 11 ]
$i1 = r0.<TestSplitIfPinnedCMove$A: int f>;
$i0 = r1.<TestSplitIfPinnedCMove$A: int f>;
$i2 = $i1 + $i0;
i11 = i7 + $i2;
z0 = 0;
if i3 <= 0 goto (branch);
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i8 < 2 goto i9 = 0;
"->"Block 1:
[preds: 8 ] [succs: 6 ]
i9 = 0;
goto [?= (branch)];
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i1 = r0.<TestSplitIfPinnedCMove$A: int f>;
$i0 = r1.<TestSplitIfPinnedCMove$A: int f>;
$i2 = $i1 + $i0;
i11 = i7 + $i2;
z0 = 0;
if i3 <= 0 goto (branch);
"->"Block 10:
[preds: 9 ] [succs: 11 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
z0 = 1;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
$i1 = r0.<TestSplitIfPinnedCMove$A: int f>;
$i0 = r1.<TestSplitIfPinnedCMove$A: int f>;
$i2 = $i1 + $i0;
i11 = i7 + $i2;
z0 = 0;
if i3 <= 0 goto (branch);
"->"Block 11:
[preds: 9 10 ] [succs: 12 13 ]
if i4 <= 0 goto $r2 = r1;
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
z0 = 1;
"->"Block 11:
[preds: 9 10 ] [succs: 12 13 ]
if i4 <= 0 goto $r2 = r1;
";
    "Block 11:
[preds: 9 10 ] [succs: 12 13 ]
if i4 <= 0 goto $r2 = r1;
"->"Block 12:
[preds: 11 ] [succs: 14 ]
$r2 = r0;
goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>];
";
    "Block 11:
[preds: 9 10 ] [succs: 12 13 ]
if i4 <= 0 goto $r2 = r1;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$r2 = r1;
";
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r2 = r0;
goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>];
"->"Block 14:
[preds: 12 13 ] [succs: 15 16 ]
$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>;
i12 = i11 + $i5;
if z0 == 0 goto (branch);
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r2 = r1;
"->"Block 14:
[preds: 12 13 ] [succs: 15 16 ]
$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>;
i12 = i11 + $i5;
if z0 == 0 goto (branch);
";
    "Block 14:
[preds: 12 13 ] [succs: 15 16 ]
$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>;
i12 = i11 + $i5;
if z0 == 0 goto (branch);
"->"Block 15:
[preds: 14 ] [succs: 16 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
i12 = i12 + 42;
";
    "Block 14:
[preds: 12 13 ] [succs: 15 16 ]
$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>;
i12 = i11 + $i5;
if z0 == 0 goto (branch);
"->"Block 16:
[preds: 14 15 ] [succs: 17 18 ]
if i4 <= 0 goto return i12;
";
    "Block 15:
[preds: 14 ] [succs: 16 ]
staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>();
i12 = i12 + 42;
"->"Block 16:
[preds: 14 15 ] [succs: 17 18 ]
if i4 <= 0 goto return i12;
";
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
if i4 <= 0 goto return i12;
"->"Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
";
    "Block 16:
[preds: 14 15 ] [succs: 17 18 ]
if i4 <= 0 goto return i12;
"->"Block 18:
[preds: 16 17 ] [succs: ]
return i12;
";
    "Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
"->"Block 18:
[preds: 16 17 ] [succs: ]
return i12;
";
}
