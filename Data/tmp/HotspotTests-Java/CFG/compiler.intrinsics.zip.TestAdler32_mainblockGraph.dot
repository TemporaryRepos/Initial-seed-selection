digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 6 ]
r2 := @parameter0: java.lang.String[];
$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0);
i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512);
i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();
z3 = 0;
i4 = 20000;
i5 = 20000;
$i2 = lengthof r2;
if $i2 <= 0 goto (branch);
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r31 = r2[0];
$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\");
if $z2 == 0 goto $r32 = r2[0];
"
    "Block 2:
[preds: 1 ] [succs: 4 ]
z3 = 1;
goto [?= $i3 = lengthof r2];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r32 = r2[0];
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32);
i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();
"
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$i3 = lengthof r2;
if $i3 <= 1 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r34 = r2[1];
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34);
i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();
"
    "Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 7:
[preds: 6 ] [succs: ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void test_multi(int)>(i5);
return;
"
    "Block 8:
[preds: 6 ] [succs: 10 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);
$r8 = <java.lang.System: java.io.PrintStream out>;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \");
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \");
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0);
$r17 = new java.util.zip.Adler32;
specialinvoke $r17.<java.util.zip.Adler32: void <init>()>();
r18 = $r17;
$r19 = new java.util.zip.Adler32;
specialinvoke $r19.<java.util.zip.Adler32: void <init>()>();
r20 = $r19;
$r21 = new java.util.zip.Adler32;
specialinvoke $r21.<java.util.zip.Adler32: void <init>()>();
r22 = $r21;
virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$r23 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
i6 = 0;
goto [?= (branch)];
"
    "Block 9:
[preds: 10 ] [succs: 10 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i6 = i6 + 1;
"
    "Block 10:
[preds: 8 9 ] [succs: 11 9 ]
if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"
    "Block 11:
[preds: 10 ] [succs: 13 ]
i7 = 0;
goto [?= (branch)];
"
    "Block 12:
[preds: 13 ] [succs: 13 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i7 = i7 + 1;
"
    "Block 13:
[preds: 11 12 ] [succs: 14 12 ]
if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"
    "Block 14:
[preds: 13 ] [succs: 18 ]
i8 = 0;
goto [?= (branch)];
"
    "Block 15:
[preds: 18 ] [succs: 16 17 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20);
if $z0 != 0 goto i8 = i8 + 1;
"
    "Block 16:
[preds: 15 ] [succs: 19 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
"
    "Block 17:
[preds: 15 ] [succs: 18 ]
i8 = i8 + 1;
"
    "Block 18:
[preds: 14 17 ] [succs: 19 15 ]
if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"
    "Block 19:
[preds: 16 18 ] [succs: 21 ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r24 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
i9 = 0;
goto [?= (branch)];
"
    "Block 20:
[preds: 21 ] [succs: 21 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i9 = i9 + 1;
"
    "Block 21:
[preds: 19 20 ] [succs: 22 20 ]
if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"
    "Block 22:
[preds: 21 ] [succs: 24 ]
i10 = 0;
goto [?= (branch)];
"
    "Block 23:
[preds: 24 ] [succs: 24 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i10 = i10 + 1;
"
    "Block 24:
[preds: 22 23 ] [succs: 25 23 ]
if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"
    "Block 25:
[preds: 24 ] [succs: 29 ]
i11 = 0;
goto [?= (branch)];
"
    "Block 26:
[preds: 29 ] [succs: 27 28 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22);
if $z1 != 0 goto i11 = i11 + 1;
"
    "Block 27:
[preds: 26 ] [succs: 30 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
"
    "Block 28:
[preds: 26 ] [succs: 29 ]
i11 = i11 + 1;
"
    "Block 29:
[preds: 25 28 ] [succs: 30 26 ]
if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"
    "Block 30:
[preds: 27 29 ] [succs: ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r30 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
return;
"
    "Block 0:
[preds: ] [succs: 1 6 ]
r2 := @parameter0: java.lang.String[];
$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0);
i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512);
i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();
z3 = 0;
i4 = 20000;
i5 = 20000;
$i2 = lengthof r2;
if $i2 <= 0 goto (branch);
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$r31 = r2[0];
$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\");
if $z2 == 0 goto $r32 = r2[0];
";
    "Block 0:
[preds: ] [succs: 1 6 ]
r2 := @parameter0: java.lang.String[];
$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0);
i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512);
i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();
z3 = 0;
i4 = 20000;
i5 = 20000;
$i2 = lengthof r2;
if $i2 <= 0 goto (branch);
"->"Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r31 = r2[0];
$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\");
if $z2 == 0 goto $r32 = r2[0];
"->"Block 2:
[preds: 1 ] [succs: 4 ]
z3 = 1;
goto [?= $i3 = lengthof r2];
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r31 = r2[0];
$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\");
if $z2 == 0 goto $r32 = r2[0];
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$r32 = r2[0];
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32);
i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();
";
    "Block 2:
[preds: 1 ] [succs: 4 ]
z3 = 1;
goto [?= $i3 = lengthof r2];
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$i3 = lengthof r2;
if $i3 <= 1 goto (branch);
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r32 = r2[0];
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32);
i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$i3 = lengthof r2;
if $i3 <= 1 goto (branch);
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$i3 = lengthof r2;
if $i3 <= 1 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r34 = r2[1];
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34);
i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$i3 = lengthof r2;
if $i3 <= 1 goto (branch);
"->"Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r34 = r2[1];
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34);
i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();
"->"Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 6 ] [succs: ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void test_multi(int)>(i5);
return;
";
    "Block 6:
[preds: 0 4 5 ] [succs: 7 8 ]
if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"->"Block 8:
[preds: 6 ] [succs: 10 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);
$r8 = <java.lang.System: java.io.PrintStream out>;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \");
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \");
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0);
$r17 = new java.util.zip.Adler32;
specialinvoke $r17.<java.util.zip.Adler32: void <init>()>();
r18 = $r17;
$r19 = new java.util.zip.Adler32;
specialinvoke $r19.<java.util.zip.Adler32: void <init>()>();
r20 = $r19;
$r21 = new java.util.zip.Adler32;
specialinvoke $r21.<java.util.zip.Adler32: void <init>()>();
r22 = $r21;
virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$r23 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
i6 = 0;
goto [?= (branch)];
";
    "Block 8:
[preds: 6 ] [succs: 10 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \");
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);
$r8 = <java.lang.System: java.io.PrintStream out>;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \");
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);
$r13 = <java.lang.System: java.io.PrintStream out>;
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \");
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15);
r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0);
$r17 = new java.util.zip.Adler32;
specialinvoke $r17.<java.util.zip.Adler32: void <init>()>();
r18 = $r17;
$r19 = new java.util.zip.Adler32;
specialinvoke $r19.<java.util.zip.Adler32: void <init>()>();
r20 = $r19;
$r21 = new java.util.zip.Adler32;
specialinvoke $r21.<java.util.zip.Adler32: void <init>()>();
r22 = $r21;
virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$r23 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
i6 = 0;
goto [?= (branch)];
"->"Block 10:
[preds: 8 9 ] [succs: 11 9 ]
if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 9:
[preds: 10 ] [succs: 10 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i6 = i6 + 1;
"->"Block 10:
[preds: 8 9 ] [succs: 11 9 ]
if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 10:
[preds: 8 9 ] [succs: 11 9 ]
if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 11:
[preds: 10 ] [succs: 13 ]
i7 = 0;
goto [?= (branch)];
";
    "Block 10:
[preds: 8 9 ] [succs: 11 9 ]
if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 9:
[preds: 10 ] [succs: 10 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i6 = i6 + 1;
";
    "Block 11:
[preds: 10 ] [succs: 13 ]
i7 = 0;
goto [?= (branch)];
"->"Block 13:
[preds: 11 12 ] [succs: 14 12 ]
if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 12:
[preds: 13 ] [succs: 13 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i7 = i7 + 1;
"->"Block 13:
[preds: 11 12 ] [succs: 14 12 ]
if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 13:
[preds: 11 12 ] [succs: 14 12 ]
if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 14:
[preds: 13 ] [succs: 18 ]
i8 = 0;
goto [?= (branch)];
";
    "Block 13:
[preds: 11 12 ] [succs: 14 12 ]
if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 12:
[preds: 13 ] [succs: 13 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
i7 = i7 + 1;
";
    "Block 14:
[preds: 13 ] [succs: 18 ]
i8 = 0;
goto [?= (branch)];
"->"Block 18:
[preds: 14 17 ] [succs: 19 15 ]
if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 15:
[preds: 18 ] [succs: 16 17 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20);
if $z0 != 0 goto i8 = i8 + 1;
"->"Block 16:
[preds: 15 ] [succs: 19 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
";
    "Block 15:
[preds: 18 ] [succs: 16 17 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20);
if $z0 != 0 goto i8 = i8 + 1;
"->"Block 17:
[preds: 15 ] [succs: 18 ]
i8 = i8 + 1;
";
    "Block 16:
[preds: 15 ] [succs: 19 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
"->"Block 19:
[preds: 16 18 ] [succs: 21 ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r24 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
i9 = 0;
goto [?= (branch)];
";
    "Block 17:
[preds: 15 ] [succs: 18 ]
i8 = i8 + 1;
"->"Block 18:
[preds: 14 17 ] [succs: 19 15 ]
if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
";
    "Block 18:
[preds: 14 17 ] [succs: 19 15 ]
if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 19:
[preds: 16 18 ] [succs: 21 ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r24 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
i9 = 0;
goto [?= (branch)];
";
    "Block 18:
[preds: 14 17 ] [succs: 19 15 ]
if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
"->"Block 15:
[preds: 18 ] [succs: 16 17 ]
virtualinvoke r20.<java.util.zip.Adler32: void reset()>();
virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1);
$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20);
if $z0 != 0 goto i8 = i8 + 1;
";
    "Block 19:
[preds: 16 18 ] [succs: 21 ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r24 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
i9 = 0;
goto [?= (branch)];
"->"Block 21:
[preds: 19 20 ] [succs: 22 20 ]
if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 20:
[preds: 21 ] [succs: 21 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i9 = i9 + 1;
"->"Block 21:
[preds: 19 20 ] [succs: 22 20 ]
if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 21:
[preds: 19 20 ] [succs: 22 20 ]
if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 22:
[preds: 21 ] [succs: 24 ]
i10 = 0;
goto [?= (branch)];
";
    "Block 21:
[preds: 19 20 ] [succs: 22 20 ]
if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 20:
[preds: 21 ] [succs: 21 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i9 = i9 + 1;
";
    "Block 22:
[preds: 21 ] [succs: 24 ]
i10 = 0;
goto [?= (branch)];
"->"Block 24:
[preds: 22 23 ] [succs: 25 23 ]
if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 23:
[preds: 24 ] [succs: 24 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i10 = i10 + 1;
"->"Block 24:
[preds: 22 23 ] [succs: 25 23 ]
if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 24:
[preds: 22 23 ] [succs: 25 23 ]
if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 25:
[preds: 24 ] [succs: 29 ]
i11 = 0;
goto [?= (branch)];
";
    "Block 24:
[preds: 22 23 ] [succs: 25 23 ]
if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 23:
[preds: 24 ] [succs: 24 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
i10 = i10 + 1;
";
    "Block 25:
[preds: 24 ] [succs: 29 ]
i11 = 0;
goto [?= (branch)];
"->"Block 29:
[preds: 25 28 ] [succs: 30 26 ]
if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 26:
[preds: 29 ] [succs: 27 28 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22);
if $z1 != 0 goto i11 = i11 + 1;
"->"Block 27:
[preds: 26 ] [succs: 30 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
";
    "Block 26:
[preds: 29 ] [succs: 27 28 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22);
if $z1 != 0 goto i11 = i11 + 1;
"->"Block 28:
[preds: 26 ] [succs: 29 ]
i11 = i11 + 1;
";
    "Block 27:
[preds: 26 ] [succs: 30 ]
goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)];
"->"Block 30:
[preds: 27 29 ] [succs: ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r30 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
return;
";
    "Block 28:
[preds: 26 ] [succs: 29 ]
i11 = i11 + 1;
"->"Block 29:
[preds: 25 28 ] [succs: 30 26 ]
if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
";
    "Block 29:
[preds: 25 28 ] [succs: 30 26 ]
if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 30:
[preds: 27 29 ] [succs: ]
staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20);
$r30 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\");
return;
";
    "Block 29:
[preds: 25 28 ] [succs: 30 26 ]
if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
"->"Block 26:
[preds: 29 ] [succs: 27 28 ]
virtualinvoke r22.<java.util.zip.Adler32: void reset()>();
virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36);
virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22);
if $z1 != 0 goto i11 = i11 + 1;
";
}
