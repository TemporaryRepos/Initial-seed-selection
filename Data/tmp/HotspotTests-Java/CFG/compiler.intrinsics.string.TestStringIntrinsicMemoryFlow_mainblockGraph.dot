digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r11 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0 = \"MyString\";
$r1 = newarray (char)[1];
$r1[0] = 77;
r2 = $r1;
c2 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate1(java.lang.String)>(r0);
$r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r3, $r4, \"testInflate1 failed\");
c3 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate2(java.lang.String)>(r0);
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r5, $r6, \"testInflate2 failed\");
c4 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testCompress1(char[])>(r2);
$r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4);
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r7, $r8, \"testCompress1 failed\");
b0 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: byte testCompress2(char[])>(r2);
$r9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);
$r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r9, $r10, \"testCompress2 failed\");
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 100000 goto r0 = \"MyString\";
"
    "Block 3:
[preds: 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r11 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 100000 goto r0 = \"MyString\";
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0 = \"MyString\";
$r1 = newarray (char)[1];
$r1[0] = 77;
r2 = $r1;
c2 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate1(java.lang.String)>(r0);
$r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r3, $r4, \"testInflate1 failed\");
c3 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate2(java.lang.String)>(r0);
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r5, $r6, \"testInflate2 failed\");
c4 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testCompress1(char[])>(r2);
$r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4);
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r7, $r8, \"testCompress1 failed\");
b0 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: byte testCompress2(char[])>(r2);
$r9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);
$r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r9, $r10, \"testCompress2 failed\");
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 100000 goto r0 = \"MyString\";
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 100000 goto r0 = \"MyString\";
"->"Block 3:
[preds: 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 100000 goto r0 = \"MyString\";
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r0 = \"MyString\";
$r1 = newarray (char)[1];
$r1[0] = 77;
r2 = $r1;
c2 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate1(java.lang.String)>(r0);
$r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r3, $r4, \"testInflate1 failed\");
c3 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testInflate2(java.lang.String)>(r0);
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r5, $r6, \"testInflate2 failed\");
c4 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: char testCompress1(char[])>(r2);
$r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4);
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r7, $r8, \"testCompress1 failed\");
b0 = staticinvoke <compiler.intrinsics.string.TestStringIntrinsicMemoryFlow: byte testCompress2(char[])>(r2);
$r9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);
$r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(42);
staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r9, $r10, \"testCompress2 failed\");
i1 = i1 + 1;
";
}
