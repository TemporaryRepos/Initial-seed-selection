digraph "unitGraph" {
    "r0 := @this: compiler.loopopts.TestMoveStoresOutOfLoops"
    "r1 := @parameter0: java.lang.String"
    "r5 := @parameter1: java.lang.Runnable"
    "r9 := @parameter2: java.util.function.Function"
    "$r2 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: java.util.HashMap tests>"
    "$r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)"
    "r4 = (java.lang.reflect.Method) $r3"
    "i0 = 0"
    "goto [?= (branch)]"
    "interfaceinvoke r5.<java.lang.Runnable: void run()>()"
    "$r6 = newarray (java.lang.Object)[1]"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "$r6[0] = $r7"
    "virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6)"
    "$z0 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>"
    "if $z0 == 0 goto $z2 = 0"
    "$r10 = interfaceinvoke r9.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1)"
    "$r11 = (java.lang.Boolean) $r10"
    "$z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>()"
    "if $z1 == 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2]"
    "$z2 = 0"
    "r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2"
    "$z3 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>"
    "if $z3 != 0 goto i0 = i0 + 1"
    "goto [?= return]"
    "i0 = i0 + 1"
    "if i0 < 20000 goto interfaceinvoke r5.<java.lang.Runnable: void run()>()"
    "return"
    "r0 := @this: compiler.loopopts.TestMoveStoresOutOfLoops"->"r1 := @parameter0: java.lang.String";
    "r1 := @parameter0: java.lang.String"->"r5 := @parameter1: java.lang.Runnable";
    "r5 := @parameter1: java.lang.Runnable"->"r9 := @parameter2: java.util.function.Function";
    "r9 := @parameter2: java.util.function.Function"->"$r2 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: java.util.HashMap tests>";
    "$r2 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: java.util.HashMap tests>"->"$r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)";
    "$r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)"->"r4 = (java.lang.reflect.Method) $r3";
    "r4 = (java.lang.reflect.Method) $r3"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto interfaceinvoke r5.<java.lang.Runnable: void run()>()";
    "interfaceinvoke r5.<java.lang.Runnable: void run()>()"->"$r6 = newarray (java.lang.Object)[1]";
    "$r6 = newarray (java.lang.Object)[1]"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r6[0] = $r7";
    "$r6[0] = $r7"->"virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6)";
    "virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6)"->"$z0 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>";
    "$z0 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>"->"if $z0 == 0 goto $z2 = 0";
    "if $z0 == 0 goto $z2 = 0"->"$r10 = interfaceinvoke r9.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1)";
    "if $z0 == 0 goto $z2 = 0"->"$z2 = 0";
    "$r10 = interfaceinvoke r9.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1)"->"$r11 = (java.lang.Boolean) $r10";
    "$r11 = (java.lang.Boolean) $r10"->"$z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>()";
    "$z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>()"->"if $z1 == 0 goto $z2 = 0";
    "if $z1 == 0 goto $z2 = 0"->"$z2 = 1";
    "if $z1 == 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2]";
    "goto [?= r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2]"->"r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2";
    "$z2 = 0"->"r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2";
    "r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success> = $z2"->"$z3 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>";
    "$z3 = r0.<compiler.loopopts.TestMoveStoresOutOfLoops: boolean success>"->"if $z3 != 0 goto i0 = i0 + 1";
    "if $z3 != 0 goto i0 = i0 + 1"->"goto [?= return]";
    "if $z3 != 0 goto i0 = i0 + 1"->"i0 = i0 + 1";
    "goto [?= return]"->"return";
    "i0 = i0 + 1"->"if i0 < 20000 goto interfaceinvoke r5.<java.lang.Runnable: void run()>()";
    "if i0 < 20000 goto interfaceinvoke r5.<java.lang.Runnable: void run()>()"->"return";
    "if i0 < 20000 goto interfaceinvoke r5.<java.lang.Runnable: void run()>()"->"interfaceinvoke r5.<java.lang.Runnable: void run()>()";
}
