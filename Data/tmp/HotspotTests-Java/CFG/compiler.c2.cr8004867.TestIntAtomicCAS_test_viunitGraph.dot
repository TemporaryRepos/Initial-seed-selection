digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "i1 := @parameter1: int"
    "i0 := @parameter2: int"
    "i2 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)"
    "i2 = i2 + 1"
    "if i2 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)";
    "if i2 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)"->"return";
    "if i2 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i2, i0, i1)";
}
