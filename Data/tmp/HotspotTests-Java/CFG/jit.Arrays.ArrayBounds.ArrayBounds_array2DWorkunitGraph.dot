digraph "unitGraph" {
    "r0 := @parameter0: int[][]"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "i6 = 0"
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = 0"
    "i7 = 0"
    "goto [?= (branch)]"
    "i8 = 0"
    "$i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"
    "$i3 = $i2 + 1"
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = $i3"
    "$r1 = r0[i7]"
    "$i4 = $r1[i8]"
    "i6 = i6 + $i4"
    "if i7 != 0 goto i8 = i8 + 1"
    "if i8 != 0 goto i8 = i8 + 1"
    "$r2 = new jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator"
    "$i5 = i1 / 2"
    "specialinvoke $r2.<jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator: void <init>(int[][],int)>(r0, $i5)"
    "r3 = $r2"
    "virtualinvoke r3.<java.lang.Thread: void start()>()"
    "virtualinvoke r3.<java.lang.Thread: void join()>()"
    "goto [?= i8 = i8 + 1]"
    "$r5 := @caughtexception"
    "i8 = i8 + 1"
    "if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"
    "i7 = i7 + 1"
    "if i7 < i0 goto i8 = 0"
    "goto [?= return i6]"
    "$r4 := @caughtexception"
    "return i6"
    "r0 := @parameter0: int[][]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i6 = 0";
    "i6 = 0"->"<jit.Arrays.ArrayBounds.ArrayBounds: int global> = 0";
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = 0"->"i7 = 0";
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = 0"->"$r4 := @caughtexception";
    "i7 = 0"->"goto [?= (branch)]";
    "i7 = 0"->"$r4 := @caughtexception";
    "goto [?= (branch)]"->"if i7 < i0 goto i8 = 0";
    "goto [?= (branch)]"->"$r4 := @caughtexception";
    "i8 = 0"->"goto [?= (branch)]";
    "i8 = 0"->"$r4 := @caughtexception";
    "goto [?= (branch)]"->"if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>";
    "goto [?= (branch)]"->"$r4 := @caughtexception";
    "$i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"->"$i3 = $i2 + 1";
    "$i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"->"$r4 := @caughtexception";
    "$i3 = $i2 + 1"->"<jit.Arrays.ArrayBounds.ArrayBounds: int global> = $i3";
    "$i3 = $i2 + 1"->"$r4 := @caughtexception";
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = $i3"->"$r1 = r0[i7]";
    "<jit.Arrays.ArrayBounds.ArrayBounds: int global> = $i3"->"$r4 := @caughtexception";
    "$r1 = r0[i7]"->"$i4 = $r1[i8]";
    "$r1 = r0[i7]"->"$r4 := @caughtexception";
    "$i4 = $r1[i8]"->"i6 = i6 + $i4";
    "$i4 = $r1[i8]"->"$r4 := @caughtexception";
    "i6 = i6 + $i4"->"if i7 != 0 goto i8 = i8 + 1";
    "i6 = i6 + $i4"->"$r4 := @caughtexception";
    "if i7 != 0 goto i8 = i8 + 1"->"if i8 != 0 goto i8 = i8 + 1";
    "if i7 != 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "if i7 != 0 goto i8 = i8 + 1"->"$r4 := @caughtexception";
    "if i8 != 0 goto i8 = i8 + 1"->"$r2 = new jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator";
    "if i8 != 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "if i8 != 0 goto i8 = i8 + 1"->"$r4 := @caughtexception";
    "$r2 = new jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator"->"$i5 = i1 / 2";
    "$r2 = new jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator"->"$r4 := @caughtexception";
    "$i5 = i1 / 2"->"specialinvoke $r2.<jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator: void <init>(int[][],int)>(r0, $i5)";
    "$i5 = i1 / 2"->"$r4 := @caughtexception";
    "specialinvoke $r2.<jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator: void <init>(int[][],int)>(r0, $i5)"->"r3 = $r2";
    "specialinvoke $r2.<jit.Arrays.ArrayBounds.ArrayBounds$ArrayMutator: void <init>(int[][],int)>(r0, $i5)"->"$r4 := @caughtexception";
    "r3 = $r2"->"$r5 := @caughtexception";
    "r3 = $r2"->"$r4 := @caughtexception";
    "r3 = $r2"->"virtualinvoke r3.<java.lang.Thread: void start()>()";
    "virtualinvoke r3.<java.lang.Thread: void start()>()"->"$r5 := @caughtexception";
    "virtualinvoke r3.<java.lang.Thread: void start()>()"->"$r4 := @caughtexception";
    "virtualinvoke r3.<java.lang.Thread: void start()>()"->"virtualinvoke r3.<java.lang.Thread: void join()>()";
    "virtualinvoke r3.<java.lang.Thread: void join()>()"->"$r5 := @caughtexception";
    "virtualinvoke r3.<java.lang.Thread: void join()>()"->"$r4 := @caughtexception";
    "virtualinvoke r3.<java.lang.Thread: void join()>()"->"goto [?= i8 = i8 + 1]";
    "goto [?= i8 = i8 + 1]"->"i8 = i8 + 1";
    "goto [?= i8 = i8 + 1]"->"$r4 := @caughtexception";
    "$r5 := @caughtexception"->"i8 = i8 + 1";
    "$r5 := @caughtexception"->"$r4 := @caughtexception";
    "i8 = i8 + 1"->"if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>";
    "i8 = i8 + 1"->"$r4 := @caughtexception";
    "if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"->"i7 = i7 + 1";
    "if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"->"$i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>";
    "if i8 < i1 goto $i2 = <jit.Arrays.ArrayBounds.ArrayBounds: int global>"->"$r4 := @caughtexception";
    "i7 = i7 + 1"->"if i7 < i0 goto i8 = 0";
    "i7 = i7 + 1"->"$r4 := @caughtexception";
    "if i7 < i0 goto i8 = 0"->"goto [?= return i6]";
    "if i7 < i0 goto i8 = 0"->"i8 = 0";
    "if i7 < i0 goto i8 = 0"->"$r4 := @caughtexception";
    "goto [?= return i6]"->"return i6";
    "$r4 := @caughtexception"->"return i6";
}
