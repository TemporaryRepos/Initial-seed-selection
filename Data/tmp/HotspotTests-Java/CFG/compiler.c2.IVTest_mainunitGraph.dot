digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "s0 = 1024"
    "i1 = 500000"
    "i9 = 0"
    "goto [?= (branch)]"
    "$i2 = i9 % s0"
    "<compiler.c2.IVTest: int paddedSize> = $i2"
    "$i3 = <compiler.c2.IVTest: int paddedSize>"
    "$r0 = newarray (byte)[$i3]"
    "staticinvoke <compiler.c2.IVTest: void padV15(byte[])>($r0)"
    "i9 = i9 + 1"
    "if i9 < i1 goto $i2 = i9 % s0"
    "i10 = 0"
    "$i4 = i10 % s0"
    "<compiler.c2.IVTest: int paddedSize> = $i4"
    "$i5 = <compiler.c2.IVTest: int paddedSize>"
    "staticinvoke <compiler.c2.IVTest: void padV15_2(int)>($i5)"
    "i10 = i10 + 1"
    "if i10 < i1 goto $i4 = i10 % s0"
    "i11 = 0"
    "$i6 = i11 % s0"
    "<compiler.c2.IVTest: int paddedSize> = $i6"
    "staticinvoke <compiler.c2.IVTest: void padV15_3()>()"
    "i11 = i11 + 1"
    "if i11 < i1 goto $i6 = i11 % s0"
    "i12 = 0"
    "$i7 = i12 % s0"
    "<compiler.c2.IVTest: int paddedSize> = $i7"
    "staticinvoke <compiler.c2.IVTest: void padV15_4()>()"
    "i12 = i12 + 1"
    "if i12 < i1 goto $i7 = i12 % s0"
    "i13 = 0"
    "$i8 = i13 % s0"
    "<compiler.c2.IVTest: int paddedSize> = $i8"
    "staticinvoke <compiler.c2.IVTest: void padV15_5()>()"
    "i13 = i13 + 1"
    "if i13 < i1 goto $i8 = i13 % s0"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"s0 = 1024";
    "s0 = 1024"->"i1 = 500000";
    "i1 = 500000"->"i9 = 0";
    "i9 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < i1 goto $i2 = i9 % s0";
    "$i2 = i9 % s0"->"<compiler.c2.IVTest: int paddedSize> = $i2";
    "<compiler.c2.IVTest: int paddedSize> = $i2"->"$i3 = <compiler.c2.IVTest: int paddedSize>";
    "$i3 = <compiler.c2.IVTest: int paddedSize>"->"$r0 = newarray (byte)[$i3]";
    "$r0 = newarray (byte)[$i3]"->"staticinvoke <compiler.c2.IVTest: void padV15(byte[])>($r0)";
    "staticinvoke <compiler.c2.IVTest: void padV15(byte[])>($r0)"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"if i9 < i1 goto $i2 = i9 % s0";
    "if i9 < i1 goto $i2 = i9 % s0"->"i10 = 0";
    "if i9 < i1 goto $i2 = i9 % s0"->"$i2 = i9 % s0";
    "i10 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < i1 goto $i4 = i10 % s0";
    "$i4 = i10 % s0"->"<compiler.c2.IVTest: int paddedSize> = $i4";
    "<compiler.c2.IVTest: int paddedSize> = $i4"->"$i5 = <compiler.c2.IVTest: int paddedSize>";
    "$i5 = <compiler.c2.IVTest: int paddedSize>"->"staticinvoke <compiler.c2.IVTest: void padV15_2(int)>($i5)";
    "staticinvoke <compiler.c2.IVTest: void padV15_2(int)>($i5)"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"if i10 < i1 goto $i4 = i10 % s0";
    "if i10 < i1 goto $i4 = i10 % s0"->"i11 = 0";
    "if i10 < i1 goto $i4 = i10 % s0"->"$i4 = i10 % s0";
    "i11 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 < i1 goto $i6 = i11 % s0";
    "$i6 = i11 % s0"->"<compiler.c2.IVTest: int paddedSize> = $i6";
    "<compiler.c2.IVTest: int paddedSize> = $i6"->"staticinvoke <compiler.c2.IVTest: void padV15_3()>()";
    "staticinvoke <compiler.c2.IVTest: void padV15_3()>()"->"i11 = i11 + 1";
    "i11 = i11 + 1"->"if i11 < i1 goto $i6 = i11 % s0";
    "if i11 < i1 goto $i6 = i11 % s0"->"i12 = 0";
    "if i11 < i1 goto $i6 = i11 % s0"->"$i6 = i11 % s0";
    "i12 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 < i1 goto $i7 = i12 % s0";
    "$i7 = i12 % s0"->"<compiler.c2.IVTest: int paddedSize> = $i7";
    "<compiler.c2.IVTest: int paddedSize> = $i7"->"staticinvoke <compiler.c2.IVTest: void padV15_4()>()";
    "staticinvoke <compiler.c2.IVTest: void padV15_4()>()"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"if i12 < i1 goto $i7 = i12 % s0";
    "if i12 < i1 goto $i7 = i12 % s0"->"i13 = 0";
    "if i12 < i1 goto $i7 = i12 % s0"->"$i7 = i12 % s0";
    "i13 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i13 < i1 goto $i8 = i13 % s0";
    "$i8 = i13 % s0"->"<compiler.c2.IVTest: int paddedSize> = $i8";
    "<compiler.c2.IVTest: int paddedSize> = $i8"->"staticinvoke <compiler.c2.IVTest: void padV15_5()>()";
    "staticinvoke <compiler.c2.IVTest: void padV15_5()>()"->"i13 = i13 + 1";
    "i13 = i13 + 1"->"if i13 < i1 goto $i8 = i13 % s0";
    "if i13 < i1 goto $i8 = i13 % s0"->"return";
    "if i13 < i1 goto $i8 = i13 % s0"->"$i8 = i13 % s0";
}
