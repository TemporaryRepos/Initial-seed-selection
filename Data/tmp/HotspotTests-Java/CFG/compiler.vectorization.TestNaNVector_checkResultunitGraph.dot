digraph "unitGraph" {
    "r0 := @this: compiler.vectorization.TestNaNVector"
    "i0 := @parameter0: int"
    "i3 = 0"
    "goto [?= (branch)]"
    "$r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>"
    "$c1 = $r1[i3]"
    "if $c1 == i0 goto i3 = i3 + 1"
    "$r2 = new java.lang.RuntimeException"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Invalid result: array[\")"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"
    "$r6 = r0.<compiler.vectorization.TestNaNVector: char[] array>"
    "$c2 = $r6[i3]"
    "$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($c2)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10)"
    "throw $r2"
    "i3 = i3 + 1"
    "if i3 < 1024 goto $r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>"
    "return"
    "r0 := @this: compiler.vectorization.TestNaNVector"->"i0 := @parameter0: int";
    "i0 := @parameter0: int"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 1024 goto $r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>";
    "$r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>"->"$c1 = $r1[i3]";
    "$c1 = $r1[i3]"->"if $c1 == i0 goto i3 = i3 + 1";
    "if $c1 == i0 goto i3 = i3 + 1"->"$r2 = new java.lang.RuntimeException";
    "if $c1 == i0 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "$r2 = new java.lang.RuntimeException"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Invalid result: array[\")";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Invalid result: array[\")"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"->"$r6 = r0.<compiler.vectorization.TestNaNVector: char[] array>";
    "$r6 = r0.<compiler.vectorization.TestNaNVector: char[] array>"->"$c2 = $r6[i3]";
    "$c2 = $r6[i3]"->"$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($c2)";
    "$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($c2)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10)";
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10)"->"throw $r2";
    "i3 = i3 + 1"->"if i3 < 1024 goto $r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>";
    "if i3 < 1024 goto $r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>"->"return";
    "if i3 < 1024 goto $r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>"->"$r1 = r0.<compiler.vectorization.TestNaNVector: char[] array>";
}
