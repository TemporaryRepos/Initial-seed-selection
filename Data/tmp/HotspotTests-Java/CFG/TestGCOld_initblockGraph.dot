digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
$i0 = <TestGCOld: int size>;
$i1 = $i0 * 1000000;
$l3 = (long) $i1;
$l2 = <TestGCOld: long treeSize>;
$l4 = $l3 / $l2;
i5 = (int) $l4;
$r0 = newarray (TreeNode)[i5];
<TestGCOld: TreeNode[] trees> = $r0;
$r2 = <java.lang.System: java.io.PrintStream err>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Allocating \");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" trees.\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r7 = <java.lang.System: java.io.PrintStream err>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  (\");
$l7 = (long) i5;
$l6 = <TestGCOld: long treeSize>;
$l8 = $l7 * $l6;
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes)\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);
i10 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r11 = <TestGCOld: TreeNode[] trees>;
$r12 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r11[i10] = $r12;
i10 = i10 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i10 < i5 goto $r11 = <TestGCOld: TreeNode[] trees>;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r14 = <java.lang.System: java.io.PrintStream err>;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  (\");
$l9 = <TestGCOld: long nodes>;
$r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" nodes)\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r17);
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
$i0 = <TestGCOld: int size>;
$i1 = $i0 * 1000000;
$l3 = (long) $i1;
$l2 = <TestGCOld: long treeSize>;
$l4 = $l3 / $l2;
i5 = (int) $l4;
$r0 = newarray (TreeNode)[i5];
<TestGCOld: TreeNode[] trees> = $r0;
$r2 = <java.lang.System: java.io.PrintStream err>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Allocating \");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" trees.\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
$r7 = <java.lang.System: java.io.PrintStream err>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  (\");
$l7 = (long) i5;
$l6 = <TestGCOld: long treeSize>;
$l8 = $l7 * $l6;
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes)\");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);
i10 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i10 < i5 goto $r11 = <TestGCOld: TreeNode[] trees>;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r11 = <TestGCOld: TreeNode[] trees>;
$r12 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r11[i10] = $r12;
i10 = i10 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i10 < i5 goto $r11 = <TestGCOld: TreeNode[] trees>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i10 < i5 goto $r11 = <TestGCOld: TreeNode[] trees>;
"->"Block 3:
[preds: 2 ] [succs: ]
$r14 = <java.lang.System: java.io.PrintStream err>;
$r13 = new java.lang.StringBuilder;
specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  (\");
$l9 = <TestGCOld: long nodes>;
$r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" nodes)\");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r17);
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i10 < i5 goto $r11 = <TestGCOld: TreeNode[] trees>;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r11 = <TestGCOld: TreeNode[] trees>;
$r12 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r11[i10] = $r12;
i10 = i10 + 1;
";
}
