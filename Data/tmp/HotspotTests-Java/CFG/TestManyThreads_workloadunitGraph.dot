digraph "unitGraph" {
    "$r0 = new java.lang.Object"
    "specialinvoke $r0.<java.lang.Object: void <init>()>()"
    "<TestManyThreads: java.lang.Object sink> = $r0"
    "$r1 = <TestManyThreads: java.util.concurrent.atomic.AtomicInteger allocated>"
    "virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()"
    "staticinvoke <java.lang.Thread: void sleep(long)>(3600000L)"
    "goto [?= return]"
    "$r2 := @caughtexception"
    "r3 = $r2"
    "<TestManyThreads: java.lang.Throwable failed> = r3"
    "return"
    "$r0 = new java.lang.Object"->"specialinvoke $r0.<java.lang.Object: void <init>()>()";
    "$r0 = new java.lang.Object"->"$r2 := @caughtexception";
    "specialinvoke $r0.<java.lang.Object: void <init>()>()"->"<TestManyThreads: java.lang.Object sink> = $r0";
    "specialinvoke $r0.<java.lang.Object: void <init>()>()"->"$r2 := @caughtexception";
    "<TestManyThreads: java.lang.Object sink> = $r0"->"$r1 = <TestManyThreads: java.util.concurrent.atomic.AtomicInteger allocated>";
    "<TestManyThreads: java.lang.Object sink> = $r0"->"$r2 := @caughtexception";
    "$r1 = <TestManyThreads: java.util.concurrent.atomic.AtomicInteger allocated>"->"virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()";
    "$r1 = <TestManyThreads: java.util.concurrent.atomic.AtomicInteger allocated>"->"$r2 := @caughtexception";
    "virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()"->"staticinvoke <java.lang.Thread: void sleep(long)>(3600000L)";
    "virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()"->"$r2 := @caughtexception";
    "staticinvoke <java.lang.Thread: void sleep(long)>(3600000L)"->"goto [?= return]";
    "staticinvoke <java.lang.Thread: void sleep(long)>(3600000L)"->"$r2 := @caughtexception";
    "goto [?= return]"->"return";
    "$r2 := @caughtexception"->"r3 = $r2";
    "r3 = $r2"->"<TestManyThreads: java.lang.Throwable failed> = r3";
    "<TestManyThreads: java.lang.Throwable failed> = r3"->"return";
}
