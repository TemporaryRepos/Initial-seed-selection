digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
$d0 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>(1.0);
r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
$d2 = $d1 + 1.0;
$d3 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d2);
r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
"
    "Block 3:
[preds: 2 ] [succs: ]
staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: void dummy()>();
$d4 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
return $d4;
"
    "Block 0:
[preds: ] [succs: 2 ]
$d0 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>(1.0);
r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
i0 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
$d2 = $d1 + 1.0;
$d3 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d2);
r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
"->"Block 3:
[preds: 2 ] [succs: ]
staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: void dummy()>();
$d4 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
return $d4;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$d1 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();
$d2 = $d1 + 1.0;
$d3 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d2);
r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
i0 = i0 + 1;
";
}
