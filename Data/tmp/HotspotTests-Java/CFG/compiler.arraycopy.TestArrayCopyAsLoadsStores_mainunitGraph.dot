digraph "unitGraph" {
    "r20 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.arraycopy.TestArrayCopyAsLoadsStores"
    "specialinvoke $r0.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void <init>()>()"
    "r1 = $r0"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m1\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m2\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m3\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m4\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m5\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m6\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m7\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m8\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m9\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m10\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m11\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m12\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m13\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m14\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m15\")"
    "i1 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)"
    "i1 = i1 + 1"
    "if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m16\")"
    "$r3 = new compiler.arraycopy.TestArrayCopyUtils$B"
    "specialinvoke $r3.<compiler.arraycopy.TestArrayCopyUtils$B: void <init>()>()"
    "i2 = 0"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)"
    "i2 = i2 + 1"
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m17\")"
    "i3 = 0"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)"
    "i3 = i3 + 1"
    "if i3 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m18\")"
    "i4 = 0"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)"
    "i4 = i4 + 1"
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)"
    "i5 = 0"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)"
    "i5 = i5 + 1"
    "if i5 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)"
    "z1 = 0"
    "i6 = 0"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"
    "goto [?= i6 = i6 + 1]"
    "$r19 := @caughtexception"
    "z1 = 1"
    "i6 = i6 + 1"
    "if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"
    "if z1 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")"
    "$r16 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"Test m19: exception wasn\'t thrown\")"
    "r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success> = 0"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m20\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m21\")"
    "$r9 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"
    "$i0 = lengthof $r9"
    "r21 = newarray (int)[$i0]"
    "i7 = 0"
    "$r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r10, r21, 0)"
    "i7 = i7 + 1"
    "if i7 < 20000 goto $r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"
    "i8 = 0"
    "$r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r11, r21, 5)"
    "goto [?= i8 = i8 + 1]"
    "$r18 := @caughtexception"
    "i8 = i8 + 1"
    "if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m22\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m23\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m24\")"
    "z2 = 0"
    "$r12 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] small_object_src>"
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m24(java.lang.Object[])>($r12)"
    "$r17 := @caughtexception"
    "z2 = 1"
    "if z2 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")"
    "$r15 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test m24: exception wasn\'t thrown\")"
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")"
    "$z0 = r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success>"
    "if $z0 != 0 goto return"
    "$r14 = new java.lang.RuntimeException"
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\")"
    "throw $r14"
    "return"
    "r20 := @parameter0: java.lang.String[]"->"$r0 = new compiler.arraycopy.TestArrayCopyAsLoadsStores";
    "$r0 = new compiler.arraycopy.TestArrayCopyAsLoadsStores"->"specialinvoke $r0.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void <init>()>()";
    "specialinvoke $r0.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m1\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m1\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m2\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m2\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m3\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m3\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m4\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m4\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m5\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m5\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m6\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m6\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m7\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m7\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m8\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m8\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m9\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m9\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m10\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m10\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m11\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m11\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m12\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m12\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m13\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m13\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m14\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m14\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m15\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m15\")"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)";
    "if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m16\")";
    "if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper16(int)>(i1)";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m16\")"->"$r3 = new compiler.arraycopy.TestArrayCopyUtils$B";
    "$r3 = new compiler.arraycopy.TestArrayCopyUtils$B"->"specialinvoke $r3.<compiler.arraycopy.TestArrayCopyUtils$B: void <init>()>()";
    "specialinvoke $r3.<compiler.arraycopy.TestArrayCopyUtils$B: void <init>()>()"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)";
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m17\")";
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper17_1(int)>(i2)";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m17\")"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)";
    "if i3 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m18\")";
    "if i3 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper18_1(int)>(i3)";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m18\")"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)";
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)"->"i5 = 0";
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] helper19(int)>(i4)";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)";
    "if i5 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)"->"z1 = 0";
    "if i5 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 0)";
    "z1 = 0"->"i6 = 0";
    "i6 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"->"goto [?= i6 = i6 + 1]";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"->"$r19 := @caughtexception";
    "goto [?= i6 = i6 + 1]"->"i6 = i6 + 1";
    "$r19 := @caughtexception"->"z1 = 1";
    "z1 = 1"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)";
    "if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"->"if z1 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")";
    "if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)";
    "if i6 < 10 goto staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m19(compiler.arraycopy.TestArrayCopyUtils$A[],int)>(null, 1)"->"$r19 := @caughtexception";
    "if z1 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")"->"$r16 = <java.lang.System: java.io.PrintStream out>";
    "if z1 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")";
    "$r16 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"Test m19: exception wasn\'t thrown\")";
    "virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"Test m19: exception wasn\'t thrown\")"->"r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success> = 0";
    "r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success> = 0"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m19\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m20\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m20\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m21\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m21\")"->"$r9 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "$r9 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"$i0 = lengthof $r9";
    "$i0 = lengthof $r9"->"r21 = newarray (int)[$i0]";
    "r21 = newarray (int)[$i0]"->"i7 = 0";
    "i7 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < 20000 goto $r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "$r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r10, r21, 0)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r10, r21, 0)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < 20000 goto $r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "if i7 < 20000 goto $r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"i8 = 0";
    "if i7 < 20000 goto $r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"$r10 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "$r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r11, r21, 5)";
    "$r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"$r18 := @caughtexception";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r11, r21, 5)"->"goto [?= i8 = i8 + 1]";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: void m22(int[],int[],int)>($r11, r21, 5)"->"$r18 := @caughtexception";
    "goto [?= i8 = i8 + 1]"->"i8 = i8 + 1";
    "$r18 := @caughtexception"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m22\")";
    "if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"$r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>";
    "if i8 < 10 goto $r11 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: int[] small_int_src>"->"$r18 := @caughtexception";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m22\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m23\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m23\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m24\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m24\")"->"z2 = 0";
    "z2 = 0"->"$r12 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] small_object_src>";
    "z2 = 0"->"$r17 := @caughtexception";
    "$r12 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] small_object_src>"->"staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m24(java.lang.Object[])>($r12)";
    "$r12 = <compiler.arraycopy.TestArrayCopyAsLoadsStores: java.lang.Object[] small_object_src>"->"$r17 := @caughtexception";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m24(java.lang.Object[])>($r12)"->"goto [?= (branch)]";
    "staticinvoke <compiler.arraycopy.TestArrayCopyAsLoadsStores: compiler.arraycopy.TestArrayCopyUtils$A[] m24(java.lang.Object[])>($r12)"->"$r17 := @caughtexception";
    "goto [?= (branch)]"->"if z2 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")";
    "$r17 := @caughtexception"->"z2 = 1";
    "z2 = 1"->"if z2 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")";
    "if z2 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")"->"$r15 = <java.lang.System: java.io.PrintStream out>";
    "if z2 != 0 goto virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")";
    "$r15 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test m24: exception wasn\'t thrown\")";
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Test m24: exception wasn\'t thrown\")"->"r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success> = 0";
    "r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success> = 0"->"virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")";
    "virtualinvoke r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: void doTest(java.lang.String)>(\"m25\")"->"$z0 = r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success>";
    "$z0 = r1.<compiler.arraycopy.TestArrayCopyAsLoadsStores: boolean success>"->"if $z0 != 0 goto return";
    "if $z0 != 0 goto return"->"$r14 = new java.lang.RuntimeException";
    "if $z0 != 0 goto return"->"return";
    "$r14 = new java.lang.RuntimeException"->"specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\")";
    "specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\")"->"throw $r14";
}
