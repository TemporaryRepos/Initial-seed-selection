digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 5 ]
r7 := @parameter0: java.lang.String[];
b0 = 8;
d0 = 1.0;
r0 = newmultiarray (double)[b0][b0];
$r1 = new jit.FloatingPoint.gen_math.Loops07.Loops07;
specialinvoke $r1.<jit.FloatingPoint.gen_math.Loops07.Loops07: void <init>()>();
i6 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 5 ] [succs: 3 ]
i7 = 0;
goto [?= (branch)];
"
    "Block 2:
[preds: 3 ] [succs: 3 ]
$i2 = i6 * i6;
$i1 = i7 * i7;
$i3 = $i2 + $i1;
d1 = (double) $i3;
d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);
d3 = 1.0 / d2;
$i4 = i6 + i7;
d4 = (double) $i4;
d5 = d4 / d3;
$r2 = r0[i6];
$r2[i7] = d5;
i7 = i7 + 1;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
if i7 < b0 goto $i2 = i6 * i6;
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i6 + 1;
"
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i6 < b0 goto i7 = 0;
"
    "Block 6:
[preds: 5 ] [succs: 26 ]
d19 = 0.0;
i8 = 0;
goto [?= (branch)];
"
    "Block 7:
[preds: 26 ] [succs: 24 ]
i9 = 0;
goto [?= (branch)];
"
    "Block 8:
[preds: 24 ] [succs: 22 ]
$r3 = r0[i8];
$d6 = $r3[i9];
$d7 = 0.5 * $d6;
d19 = d19 - $d7;
i10 = 0;
goto [?= (branch)];
"
    "Block 9:
[preds: 22 ] [succs: 20 ]
i11 = 0;
goto [?= (branch)];
"
    "Block 10:
[preds: 20 ] [succs: 18 ]
$r4 = r0[i10];
$d8 = $r4[i11];
d19 = d19 + $d8;
i12 = 0;
goto [?= (branch)];
"
    "Block 11:
[preds: 18 ] [succs: 16 ]
i13 = 0;
goto [?= (branch)];
"
    "Block 12:
[preds: 16 ] [succs: 14 ]
i14 = 0;
goto [?= (branch)];
"
    "Block 13:
[preds: 14 ] [succs: 14 ]
$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
$d10 = 4.0 - $d9;
$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);
$d12 = 3.0 + $d11;
$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);
$d14 = 2.0 + $d13;
$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14);
$d16 = 1.0 + $d15;
staticinvoke <java.lang.Math: double abs(double)>($d16);
i14 = i14 + 1;
"
    "Block 14:
[preds: 12 13 ] [succs: 15 13 ]
if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
"
    "Block 15:
[preds: 14 ] [succs: 16 ]
i13 = i13 + 1;
"
    "Block 16:
[preds: 11 15 ] [succs: 17 12 ]
if i13 < b0 goto i14 = 0;
"
    "Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
"
    "Block 18:
[preds: 10 17 ] [succs: 19 11 ]
if i12 < b0 goto i13 = 0;
"
    "Block 19:
[preds: 18 ] [succs: 20 ]
i11 = i11 + 1;
"
    "Block 20:
[preds: 9 19 ] [succs: 21 10 ]
if i11 < b0 goto $r4 = r0[i10];
"
    "Block 21:
[preds: 20 ] [succs: 22 ]
i10 = i10 + 1;
"
    "Block 22:
[preds: 8 21 ] [succs: 23 9 ]
if i10 < b0 goto i11 = 0;
"
    "Block 23:
[preds: 22 ] [succs: 24 ]
i9 = i9 + 1;
"
    "Block 24:
[preds: 7 23 ] [succs: 25 8 ]
if i9 < b0 goto $r3 = r0[i8];
"
    "Block 25:
[preds: 24 ] [succs: 26 ]
i8 = i8 + 1;
"
    "Block 26:
[preds: 6 25 ] [succs: 27 7 ]
if i8 < b0 goto i9 = 0;
"
    "Block 27:
[preds: 26 ] [succs: 28 29 ]
$d18 = 184401.0 - d19;
d20 = staticinvoke <java.lang.Math: double abs(double)>($d18);
$b5 = d20 cmpg d0;
if $b5 >= 0 goto $r5 = new nsk.share.TestFailure;
"
    "Block 28:
[preds: 27 ] [succs: 30 ]
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
"
    "Block 29:
[preds: 27 ] [succs: ]
$r5 = new nsk.share.TestFailure;
specialinvoke $r5.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\");
throw $r5;
"
    "Block 30:
[preds: 28 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 5 ]
r7 := @parameter0: java.lang.String[];
b0 = 8;
d0 = 1.0;
r0 = newmultiarray (double)[b0][b0];
$r1 = new jit.FloatingPoint.gen_math.Loops07.Loops07;
specialinvoke $r1.<jit.FloatingPoint.gen_math.Loops07.Loops07: void <init>()>();
i6 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i6 < b0 goto i7 = 0;
";
    "Block 1:
[preds: 5 ] [succs: 3 ]
i7 = 0;
goto [?= (branch)];
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
if i7 < b0 goto $i2 = i6 * i6;
";
    "Block 2:
[preds: 3 ] [succs: 3 ]
$i2 = i6 * i6;
$i1 = i7 * i7;
$i3 = $i2 + $i1;
d1 = (double) $i3;
d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);
d3 = 1.0 / d2;
$i4 = i6 + i7;
d4 = (double) $i4;
d5 = d4 / d3;
$r2 = r0[i6];
$r2[i7] = d5;
i7 = i7 + 1;
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
if i7 < b0 goto $i2 = i6 * i6;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
if i7 < b0 goto $i2 = i6 * i6;
"->"Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i6 + 1;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
if i7 < b0 goto $i2 = i6 * i6;
"->"Block 2:
[preds: 3 ] [succs: 3 ]
$i2 = i6 * i6;
$i1 = i7 * i7;
$i3 = $i2 + $i1;
d1 = (double) $i3;
d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);
d3 = 1.0 / d2;
$i4 = i6 + i7;
d4 = (double) $i4;
d5 = d4 / d3;
$r2 = r0[i6];
$r2[i7] = d5;
i7 = i7 + 1;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i6 + 1;
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i6 < b0 goto i7 = 0;
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i6 < b0 goto i7 = 0;
"->"Block 6:
[preds: 5 ] [succs: 26 ]
d19 = 0.0;
i8 = 0;
goto [?= (branch)];
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i6 < b0 goto i7 = 0;
"->"Block 1:
[preds: 5 ] [succs: 3 ]
i7 = 0;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 26 ]
d19 = 0.0;
i8 = 0;
goto [?= (branch)];
"->"Block 26:
[preds: 6 25 ] [succs: 27 7 ]
if i8 < b0 goto i9 = 0;
";
    "Block 7:
[preds: 26 ] [succs: 24 ]
i9 = 0;
goto [?= (branch)];
"->"Block 24:
[preds: 7 23 ] [succs: 25 8 ]
if i9 < b0 goto $r3 = r0[i8];
";
    "Block 8:
[preds: 24 ] [succs: 22 ]
$r3 = r0[i8];
$d6 = $r3[i9];
$d7 = 0.5 * $d6;
d19 = d19 - $d7;
i10 = 0;
goto [?= (branch)];
"->"Block 22:
[preds: 8 21 ] [succs: 23 9 ]
if i10 < b0 goto i11 = 0;
";
    "Block 9:
[preds: 22 ] [succs: 20 ]
i11 = 0;
goto [?= (branch)];
"->"Block 20:
[preds: 9 19 ] [succs: 21 10 ]
if i11 < b0 goto $r4 = r0[i10];
";
    "Block 10:
[preds: 20 ] [succs: 18 ]
$r4 = r0[i10];
$d8 = $r4[i11];
d19 = d19 + $d8;
i12 = 0;
goto [?= (branch)];
"->"Block 18:
[preds: 10 17 ] [succs: 19 11 ]
if i12 < b0 goto i13 = 0;
";
    "Block 11:
[preds: 18 ] [succs: 16 ]
i13 = 0;
goto [?= (branch)];
"->"Block 16:
[preds: 11 15 ] [succs: 17 12 ]
if i13 < b0 goto i14 = 0;
";
    "Block 12:
[preds: 16 ] [succs: 14 ]
i14 = 0;
goto [?= (branch)];
"->"Block 14:
[preds: 12 13 ] [succs: 15 13 ]
if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
";
    "Block 13:
[preds: 14 ] [succs: 14 ]
$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
$d10 = 4.0 - $d9;
$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);
$d12 = 3.0 + $d11;
$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);
$d14 = 2.0 + $d13;
$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14);
$d16 = 1.0 + $d15;
staticinvoke <java.lang.Math: double abs(double)>($d16);
i14 = i14 + 1;
"->"Block 14:
[preds: 12 13 ] [succs: 15 13 ]
if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
";
    "Block 14:
[preds: 12 13 ] [succs: 15 13 ]
if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
"->"Block 15:
[preds: 14 ] [succs: 16 ]
i13 = i13 + 1;
";
    "Block 14:
[preds: 12 13 ] [succs: 15 13 ]
if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
"->"Block 13:
[preds: 14 ] [succs: 14 ]
$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0);
$d10 = 4.0 - $d9;
$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);
$d12 = 3.0 + $d11;
$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);
$d14 = 2.0 + $d13;
$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14);
$d16 = 1.0 + $d15;
staticinvoke <java.lang.Math: double abs(double)>($d16);
i14 = i14 + 1;
";
    "Block 15:
[preds: 14 ] [succs: 16 ]
i13 = i13 + 1;
"->"Block 16:
[preds: 11 15 ] [succs: 17 12 ]
if i13 < b0 goto i14 = 0;
";
    "Block 16:
[preds: 11 15 ] [succs: 17 12 ]
if i13 < b0 goto i14 = 0;
"->"Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
";
    "Block 16:
[preds: 11 15 ] [succs: 17 12 ]
if i13 < b0 goto i14 = 0;
"->"Block 12:
[preds: 16 ] [succs: 14 ]
i14 = 0;
goto [?= (branch)];
";
    "Block 17:
[preds: 16 ] [succs: 18 ]
i12 = i12 + 1;
"->"Block 18:
[preds: 10 17 ] [succs: 19 11 ]
if i12 < b0 goto i13 = 0;
";
    "Block 18:
[preds: 10 17 ] [succs: 19 11 ]
if i12 < b0 goto i13 = 0;
"->"Block 19:
[preds: 18 ] [succs: 20 ]
i11 = i11 + 1;
";
    "Block 18:
[preds: 10 17 ] [succs: 19 11 ]
if i12 < b0 goto i13 = 0;
"->"Block 11:
[preds: 18 ] [succs: 16 ]
i13 = 0;
goto [?= (branch)];
";
    "Block 19:
[preds: 18 ] [succs: 20 ]
i11 = i11 + 1;
"->"Block 20:
[preds: 9 19 ] [succs: 21 10 ]
if i11 < b0 goto $r4 = r0[i10];
";
    "Block 20:
[preds: 9 19 ] [succs: 21 10 ]
if i11 < b0 goto $r4 = r0[i10];
"->"Block 21:
[preds: 20 ] [succs: 22 ]
i10 = i10 + 1;
";
    "Block 20:
[preds: 9 19 ] [succs: 21 10 ]
if i11 < b0 goto $r4 = r0[i10];
"->"Block 10:
[preds: 20 ] [succs: 18 ]
$r4 = r0[i10];
$d8 = $r4[i11];
d19 = d19 + $d8;
i12 = 0;
goto [?= (branch)];
";
    "Block 21:
[preds: 20 ] [succs: 22 ]
i10 = i10 + 1;
"->"Block 22:
[preds: 8 21 ] [succs: 23 9 ]
if i10 < b0 goto i11 = 0;
";
    "Block 22:
[preds: 8 21 ] [succs: 23 9 ]
if i10 < b0 goto i11 = 0;
"->"Block 23:
[preds: 22 ] [succs: 24 ]
i9 = i9 + 1;
";
    "Block 22:
[preds: 8 21 ] [succs: 23 9 ]
if i10 < b0 goto i11 = 0;
"->"Block 9:
[preds: 22 ] [succs: 20 ]
i11 = 0;
goto [?= (branch)];
";
    "Block 23:
[preds: 22 ] [succs: 24 ]
i9 = i9 + 1;
"->"Block 24:
[preds: 7 23 ] [succs: 25 8 ]
if i9 < b0 goto $r3 = r0[i8];
";
    "Block 24:
[preds: 7 23 ] [succs: 25 8 ]
if i9 < b0 goto $r3 = r0[i8];
"->"Block 25:
[preds: 24 ] [succs: 26 ]
i8 = i8 + 1;
";
    "Block 24:
[preds: 7 23 ] [succs: 25 8 ]
if i9 < b0 goto $r3 = r0[i8];
"->"Block 8:
[preds: 24 ] [succs: 22 ]
$r3 = r0[i8];
$d6 = $r3[i9];
$d7 = 0.5 * $d6;
d19 = d19 - $d7;
i10 = 0;
goto [?= (branch)];
";
    "Block 25:
[preds: 24 ] [succs: 26 ]
i8 = i8 + 1;
"->"Block 26:
[preds: 6 25 ] [succs: 27 7 ]
if i8 < b0 goto i9 = 0;
";
    "Block 26:
[preds: 6 25 ] [succs: 27 7 ]
if i8 < b0 goto i9 = 0;
"->"Block 27:
[preds: 26 ] [succs: 28 29 ]
$d18 = 184401.0 - d19;
d20 = staticinvoke <java.lang.Math: double abs(double)>($d18);
$b5 = d20 cmpg d0;
if $b5 >= 0 goto $r5 = new nsk.share.TestFailure;
";
    "Block 26:
[preds: 6 25 ] [succs: 27 7 ]
if i8 < b0 goto i9 = 0;
"->"Block 7:
[preds: 26 ] [succs: 24 ]
i9 = 0;
goto [?= (branch)];
";
    "Block 27:
[preds: 26 ] [succs: 28 29 ]
$d18 = 184401.0 - d19;
d20 = staticinvoke <java.lang.Math: double abs(double)>($d18);
$b5 = d20 cmpg d0;
if $b5 >= 0 goto $r5 = new nsk.share.TestFailure;
"->"Block 28:
[preds: 27 ] [succs: 30 ]
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
";
    "Block 27:
[preds: 26 ] [succs: 28 29 ]
$d18 = 184401.0 - d19;
d20 = staticinvoke <java.lang.Math: double abs(double)>($d18);
$b5 = d20 cmpg d0;
if $b5 >= 0 goto $r5 = new nsk.share.TestFailure;
"->"Block 29:
[preds: 27 ] [succs: ]
$r5 = new nsk.share.TestFailure;
specialinvoke $r5.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\");
throw $r5;
";
    "Block 28:
[preds: 27 ] [succs: 30 ]
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
"->"Block 30:
[preds: 28 ] [succs: ]
return;
";
}
