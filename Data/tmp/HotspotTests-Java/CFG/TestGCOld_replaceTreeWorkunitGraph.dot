digraph "unitGraph" {
    "r0 := @parameter0: TreeNode"
    "r2 := @parameter1: TreeNode"
    "z2 := @parameter2: boolean"
    "$r1 = r0.<TreeNode: TreeNode left>"
    "if $r1 == null goto $z3 = 0"
    "$r8 = r0.<TreeNode: TreeNode left>"
    "$i3 = $r8.<TreeNode: int val>"
    "$i2 = r2.<TreeNode: int val>"
    "if $i3 <= $i2 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= z0 = $z3]"
    "$z3 = 0"
    "z0 = $z3"
    "$r9 = r0.<TreeNode: TreeNode right>"
    "if $r9 == null goto $z4 = 0"
    "$r7 = r0.<TreeNode: TreeNode right>"
    "$i1 = $r7.<TreeNode: int val>"
    "$i0 = r2.<TreeNode: int val>"
    "if $i1 <= $i0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= z1 = $z4]"
    "$z4 = 0"
    "z1 = $z4"
    "if z0 == 0 goto (branch)"
    "if z1 == 0 goto (branch)"
    "if z2 == 0 goto $r3 = r0.<TreeNode: TreeNode right>"
    "$r5 = r0.<TreeNode: TreeNode left>"
    "if z2 == 0 goto $z5 = 1"
    "$z5 = 0"
    "goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)]"
    "$z5 = 1"
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)"
    "goto [?= return]"
    "$r3 = r0.<TreeNode: TreeNode right>"
    "if z2 == 0 goto $z6 = 1"
    "$z6 = 0"
    "goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)]"
    "$z6 = 1"
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)"
    "if z0 != 0 goto (branch)"
    "if z1 != 0 goto (branch)"
    "if z2 == 0 goto r0.<TreeNode: TreeNode right> = r2"
    "r0.<TreeNode: TreeNode left> = r2"
    "r0.<TreeNode: TreeNode right> = r2"
    "if z0 != 0 goto r0.<TreeNode: TreeNode right> = r2"
    "return"
    "r0 := @parameter0: TreeNode"->"r2 := @parameter1: TreeNode";
    "r2 := @parameter1: TreeNode"->"z2 := @parameter2: boolean";
    "z2 := @parameter2: boolean"->"$r1 = r0.<TreeNode: TreeNode left>";
    "$r1 = r0.<TreeNode: TreeNode left>"->"if $r1 == null goto $z3 = 0";
    "if $r1 == null goto $z3 = 0"->"$r8 = r0.<TreeNode: TreeNode left>";
    "if $r1 == null goto $z3 = 0"->"$z3 = 0";
    "$r8 = r0.<TreeNode: TreeNode left>"->"$i3 = $r8.<TreeNode: int val>";
    "$i3 = $r8.<TreeNode: int val>"->"$i2 = r2.<TreeNode: int val>";
    "$i2 = r2.<TreeNode: int val>"->"if $i3 <= $i2 goto $z3 = 0";
    "if $i3 <= $i2 goto $z3 = 0"->"$z3 = 1";
    "if $i3 <= $i2 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= z0 = $z3]";
    "goto [?= z0 = $z3]"->"z0 = $z3";
    "$z3 = 0"->"z0 = $z3";
    "z0 = $z3"->"$r9 = r0.<TreeNode: TreeNode right>";
    "$r9 = r0.<TreeNode: TreeNode right>"->"if $r9 == null goto $z4 = 0";
    "if $r9 == null goto $z4 = 0"->"$r7 = r0.<TreeNode: TreeNode right>";
    "if $r9 == null goto $z4 = 0"->"$z4 = 0";
    "$r7 = r0.<TreeNode: TreeNode right>"->"$i1 = $r7.<TreeNode: int val>";
    "$i1 = $r7.<TreeNode: int val>"->"$i0 = r2.<TreeNode: int val>";
    "$i0 = r2.<TreeNode: int val>"->"if $i1 <= $i0 goto $z4 = 0";
    "if $i1 <= $i0 goto $z4 = 0"->"$z4 = 1";
    "if $i1 <= $i0 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= z1 = $z4]";
    "goto [?= z1 = $z4]"->"z1 = $z4";
    "$z4 = 0"->"z1 = $z4";
    "z1 = $z4"->"if z0 == 0 goto (branch)";
    "if z0 == 0 goto (branch)"->"if z1 == 0 goto (branch)";
    "if z0 == 0 goto (branch)"->"if z0 != 0 goto (branch)";
    "if z1 == 0 goto (branch)"->"if z2 == 0 goto $r3 = r0.<TreeNode: TreeNode right>";
    "if z1 == 0 goto (branch)"->"if z0 != 0 goto (branch)";
    "if z2 == 0 goto $r3 = r0.<TreeNode: TreeNode right>"->"$r5 = r0.<TreeNode: TreeNode left>";
    "if z2 == 0 goto $r3 = r0.<TreeNode: TreeNode right>"->"$r3 = r0.<TreeNode: TreeNode right>";
    "$r5 = r0.<TreeNode: TreeNode left>"->"if z2 == 0 goto $z5 = 1";
    "if z2 == 0 goto $z5 = 1"->"$z5 = 0";
    "if z2 == 0 goto $z5 = 1"->"$z5 = 1";
    "$z5 = 0"->"goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)]";
    "goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)]"->"staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)";
    "$z5 = 1"->"staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)";
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r5, r2, $z5)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r3 = r0.<TreeNode: TreeNode right>"->"if z2 == 0 goto $z6 = 1";
    "if z2 == 0 goto $z6 = 1"->"$z6 = 0";
    "if z2 == 0 goto $z6 = 1"->"$z6 = 1";
    "$z6 = 0"->"goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)]";
    "goto [?= staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)]"->"staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)";
    "$z6 = 1"->"staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)";
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>($r3, r2, $z6)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "if z0 != 0 goto (branch)"->"if z1 != 0 goto (branch)";
    "if z0 != 0 goto (branch)"->"if z0 != 0 goto r0.<TreeNode: TreeNode right> = r2";
    "if z1 != 0 goto (branch)"->"if z2 == 0 goto r0.<TreeNode: TreeNode right> = r2";
    "if z1 != 0 goto (branch)"->"if z0 != 0 goto r0.<TreeNode: TreeNode right> = r2";
    "if z2 == 0 goto r0.<TreeNode: TreeNode right> = r2"->"r0.<TreeNode: TreeNode left> = r2";
    "if z2 == 0 goto r0.<TreeNode: TreeNode right> = r2"->"r0.<TreeNode: TreeNode right> = r2";
    "r0.<TreeNode: TreeNode left> = r2"->"goto [?= return]";
    "goto [?= return]"->"return";
    "r0.<TreeNode: TreeNode right> = r2"->"goto [?= return]";
    "goto [?= return]"->"return";
    "if z0 != 0 goto r0.<TreeNode: TreeNode right> = r2"->"r0.<TreeNode: TreeNode left> = r2";
    "if z0 != 0 goto r0.<TreeNode: TreeNode right> = r2"->"r0.<TreeNode: TreeNode right> = r2";
    "r0.<TreeNode: TreeNode left> = r2"->"goto [?= return]";
    "goto [?= return]"->"return";
    "r0.<TreeNode: TreeNode right> = r2"->"return";
}
