digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 10 ]
r2 := @parameter0: TestLargePagesFlags$Flag;
"
    "Block 1:
[preds: 0 ] [succs: 2 10 ]
$r0 = new TestLargePagesFlags$FlagTester;
"
    "Block 2:
[preds: 1 ] [succs: 3 10 ]
specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null);
"
    "Block 3:
[preds: 2 ] [succs: 4 10 ]
$r1 = newarray (TestLargePagesFlags$Flag)[1];
"
    "Block 4:
[preds: 3 ] [succs: 5 10 ]
$r1[0] = r2;
"
    "Block 5:
[preds: 4 ] [succs: 6 10 ]
$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1);
"
    "Block 6:
[preds: 5 ] [succs: 7 10 ]
$r4 = newarray (TestLargePagesFlags$Flag)[1];
"
    "Block 7:
[preds: 6 ] [succs: 8 10 ]
$r4[0] = r2;
"
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4);
"
    "Block 9:
[preds: 8 ] [succs: 11 ]
goto [?= return 1];
"
    "Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
"
    "Block 11:
[preds: 9 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 1 10 ]
r2 := @parameter0: TestLargePagesFlags$Flag;
"->"Block 1:
[preds: 0 ] [succs: 2 10 ]
$r0 = new TestLargePagesFlags$FlagTester;
";
    "Block 0:
[preds: ] [succs: 1 10 ]
r2 := @parameter0: TestLargePagesFlags$Flag;
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 10 ]
$r0 = new TestLargePagesFlags$FlagTester;
"->"Block 2:
[preds: 1 ] [succs: 3 10 ]
specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null);
";
    "Block 1:
[preds: 0 ] [succs: 2 10 ]
$r0 = new TestLargePagesFlags$FlagTester;
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 10 ]
specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null);
"->"Block 3:
[preds: 2 ] [succs: 4 10 ]
$r1 = newarray (TestLargePagesFlags$Flag)[1];
";
    "Block 2:
[preds: 1 ] [succs: 3 10 ]
specialinvoke $r0.<TestLargePagesFlags$FlagTester: void <init>(TestLargePagesFlags$FlagTester)>(null);
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 3:
[preds: 2 ] [succs: 4 10 ]
$r1 = newarray (TestLargePagesFlags$Flag)[1];
"->"Block 4:
[preds: 3 ] [succs: 5 10 ]
$r1[0] = r2;
";
    "Block 3:
[preds: 2 ] [succs: 4 10 ]
$r1 = newarray (TestLargePagesFlags$Flag)[1];
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 4:
[preds: 3 ] [succs: 5 10 ]
$r1[0] = r2;
"->"Block 5:
[preds: 4 ] [succs: 6 10 ]
$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1);
";
    "Block 4:
[preds: 3 ] [succs: 5 10 ]
$r1[0] = r2;
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 5:
[preds: 4 ] [succs: 6 10 ]
$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1);
"->"Block 6:
[preds: 5 ] [succs: 7 10 ]
$r4 = newarray (TestLargePagesFlags$Flag)[1];
";
    "Block 5:
[preds: 4 ] [succs: 6 10 ]
$r3 = virtualinvoke $r0.<TestLargePagesFlags$FlagTester: TestLargePagesFlags$FlagTester use(TestLargePagesFlags$Flag[])>($r1);
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 6:
[preds: 5 ] [succs: 7 10 ]
$r4 = newarray (TestLargePagesFlags$Flag)[1];
"->"Block 7:
[preds: 6 ] [succs: 8 10 ]
$r4[0] = r2;
";
    "Block 6:
[preds: 5 ] [succs: 7 10 ]
$r4 = newarray (TestLargePagesFlags$Flag)[1];
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 7:
[preds: 6 ] [succs: 8 10 ]
$r4[0] = r2;
"->"Block 8:
[preds: 7 ] [succs: 9 10 ]
virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4);
";
    "Block 7:
[preds: 6 ] [succs: 8 10 ]
$r4[0] = r2;
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4);
"->"Block 9:
[preds: 8 ] [succs: 11 ]
goto [?= return 1];
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
virtualinvoke $r3.<TestLargePagesFlags$FlagTester: void expect(TestLargePagesFlags$Flag[])>($r4);
"->"Block 10:
[preds: 0 1 2 3 4 5 6 7 8 ] [succs: ]
$r5 := @caughtexception;
return 0;
";
    "Block 9:
[preds: 8 ] [succs: 11 ]
goto [?= return 1];
"->"Block 11:
[preds: 9 ] [succs: ]
return 1;
";
}
