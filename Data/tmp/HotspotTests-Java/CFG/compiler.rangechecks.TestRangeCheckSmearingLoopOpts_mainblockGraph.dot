digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
$r0 = newarray (int)[11];
$r0[1] = 1;
$r0[2] = 2;
$r0[3] = -3;
$r0[4] = 4;
$r0[5] = 5;
$r0[6] = -2;
$r0[7] = 7;
$r0[8] = 8;
$r0[9] = 9;
$r0[10] = -1;
r1 = $r0;
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
i2 = i2 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
r1[0] = -1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= return];
"
    "Block 6:
[preds: 3 4 ] [succs: 7 ]
$r2 := @caughtexception;
"
    "Block 7:
[preds: 5 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
$r0 = newarray (int)[11];
$r0[1] = 1;
$r0[2] = 2;
$r0[3] = -3;
$r0[4] = 4;
$r0[5] = 5;
$r0[6] = -2;
$r0[7] = 7;
$r0[8] = 8;
$r0[9] = 9;
$r0[10] = -1;
r1 = $r0;
i2 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
i2 = i2 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"->"Block 3:
[preds: 2 ] [succs: 4 6 ]
r1[0] = -1;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
i2 = i2 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
r1[0] = -1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
";
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
r1[0] = -1;
"->"Block 6:
[preds: 3 4 ] [succs: 7 ]
$r2 := @caughtexception;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"->"Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= return];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
staticinvoke <compiler.rangechecks.TestRangeCheckSmearingLoopOpts: int m1(int[],int)>(r1, 0);
"->"Block 6:
[preds: 3 4 ] [succs: 7 ]
$r2 := @caughtexception;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
goto [?= return];
"->"Block 7:
[preds: 5 6 ] [succs: ]
return;
";
    "Block 6:
[preds: 3 4 ] [succs: 7 ]
$r2 := @caughtexception;
"->"Block 7:
[preds: 5 6 ] [succs: ]
return;
";
}
