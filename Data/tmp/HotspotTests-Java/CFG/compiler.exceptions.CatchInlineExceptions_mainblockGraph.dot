digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 5 ]
r21 := @parameter0: java.lang.String[];
i10 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= i10 = i10 + 1];
"
    "Block 3:
[preds: 5 1 ] [succs: 4 ]
$r20 := @caughtexception;
"
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
i10 = i10 + 1;
"
    "Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i0 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
if $i0 == 0 goto $i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r15 = new java.lang.RuntimeException;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter1(\");
$i9 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != 0\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);
throw $r15;
"
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i1 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
if $i2 == $i1 goto $i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"
    "Block 9:
[preds: 8 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter2(\");
$i7 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != counter0(\");
$i8 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);
throw $r8;
"
    "Block 10:
[preds: 8 ] [succs: 11 12 ]
$i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i3 = <compiler.exceptions.CatchInlineExceptions: int counter>;
if $i4 == $i3 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 11:
[preds: 10 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter2(\");
$i5 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != counter(\");
$i6 = <compiler.exceptions.CatchInlineExceptions: int counter>;
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r1;
"
    "Block 12:
[preds: 10 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\");
return;
"
    "Block 0:
[preds: ] [succs: 5 ]
r21 := @parameter0: java.lang.String[];
i10 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
";
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"->"Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= i10 = i10 + 1];
";
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"->"Block 3:
[preds: 5 1 ] [succs: 4 ]
$r20 := @caughtexception;
";
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= i10 = i10 + 1];
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
i10 = i10 + 1;
";
    "Block 3:
[preds: 5 1 ] [succs: 4 ]
$r20 := @caughtexception;
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
i10 = i10 + 1;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
i10 = i10 + 1;
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"->"Block 6:
[preds: 5 ] [succs: 7 8 ]
$i0 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
if $i0 == 0 goto $i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"->"Block 1:
[preds: 5 ] [succs: 2 3 ]
staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 3 ]
if i10 < 15000 goto staticinvoke <compiler.exceptions.CatchInlineExceptions: void test(int)>(i10);
"->"Block 3:
[preds: 5 1 ] [succs: 4 ]
$r20 := @caughtexception;
";
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i0 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
if $i0 == 0 goto $i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"->"Block 7:
[preds: 6 ] [succs: ]
$r15 = new java.lang.RuntimeException;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter1(\");
$i9 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != 0\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);
throw $r15;
";
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i0 = <compiler.exceptions.CatchInlineExceptions: int counter1>;
if $i0 == 0 goto $i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"->"Block 8:
[preds: 6 ] [succs: 9 10 ]
$i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i1 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
if $i2 == $i1 goto $i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i1 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
if $i2 == $i1 goto $i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"->"Block 9:
[preds: 8 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter2(\");
$i7 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != counter0(\");
$i8 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);
throw $r8;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i2 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i1 = <compiler.exceptions.CatchInlineExceptions: int counter0>;
if $i2 == $i1 goto $i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
"->"Block 10:
[preds: 8 ] [succs: 11 12 ]
$i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i3 = <compiler.exceptions.CatchInlineExceptions: int counter>;
if $i4 == $i3 goto $r0 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 10:
[preds: 8 ] [succs: 11 12 ]
$i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i3 = <compiler.exceptions.CatchInlineExceptions: int counter>;
if $i4 == $i3 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 11:
[preds: 10 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed: counter2(\");
$i5 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") != counter(\");
$i6 = <compiler.exceptions.CatchInlineExceptions: int counter>;
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r1;
";
    "Block 10:
[preds: 8 ] [succs: 11 12 ]
$i4 = <compiler.exceptions.CatchInlineExceptions: int counter2>;
$i3 = <compiler.exceptions.CatchInlineExceptions: int counter>;
if $i4 == $i3 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 12:
[preds: 10 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\");
return;
";
}
