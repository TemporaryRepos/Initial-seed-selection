digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "$r0 = new TestSplitIfPinnedCMove$A"
    "specialinvoke $r0.<TestSplitIfPinnedCMove$A: void <init>(int)>(42)"
    "r1 = $r0"
    "i3 = 0"
    "goto [?= (branch)]"
    "$i0 = i3 % 2"
    "if $i0 != 0 goto $b4 = 1"
    "$b4 = 0"
    "goto [?= $i1 = i3 % 2]"
    "$b4 = 1"
    "$i1 = i3 % 2"
    "if $i1 != 0 goto $b5 = 1"
    "$b5 = 0"
    "goto [?= staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)]"
    "$b5 = 1"
    "staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)"
    "i3 = i3 + 1"
    "if i3 < 20000 goto $i0 = i3 % 2"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"$r0 = new TestSplitIfPinnedCMove$A";
    "$r0 = new TestSplitIfPinnedCMove$A"->"specialinvoke $r0.<TestSplitIfPinnedCMove$A: void <init>(int)>(42)";
    "specialinvoke $r0.<TestSplitIfPinnedCMove$A: void <init>(int)>(42)"->"r1 = $r0";
    "r1 = $r0"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 20000 goto $i0 = i3 % 2";
    "$i0 = i3 % 2"->"if $i0 != 0 goto $b4 = 1";
    "if $i0 != 0 goto $b4 = 1"->"$b4 = 0";
    "if $i0 != 0 goto $b4 = 1"->"$b4 = 1";
    "$b4 = 0"->"goto [?= $i1 = i3 % 2]";
    "goto [?= $i1 = i3 % 2]"->"$i1 = i3 % 2";
    "$b4 = 1"->"$i1 = i3 % 2";
    "$i1 = i3 % 2"->"if $i1 != 0 goto $b5 = 1";
    "if $i1 != 0 goto $b5 = 1"->"$b5 = 0";
    "if $i1 != 0 goto $b5 = 1"->"$b5 = 1";
    "$b5 = 0"->"goto [?= staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)]";
    "goto [?= staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)]"->"staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)";
    "$b5 = 1"->"staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)";
    "staticinvoke <TestSplitIfPinnedCMove: int test(int,int,TestSplitIfPinnedCMove$A,TestSplitIfPinnedCMove$A)>($b4, $b5, r1, r1)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 20000 goto $i0 = i3 % 2";
    "if i3 < 20000 goto $i0 = i3 % 2"->"return";
    "if i3 < 20000 goto $i0 = i3 % 2"->"$i0 = i3 % 2";
}
