digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Creating garbage\");
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r1 = new TestNewSizeThreadIncrease$GCTest$TestThread;
specialinvoke $r1.<TestNewSizeThreadIncrease$GCTest$TestThread: void <init>(TestNewSizeThreadIncrease$GCTest$TestThread)>(null);
$r2[i0] = $r1;
$r3 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r4 = $r3[i0];
virtualinvoke $r4.<TestNewSizeThreadIncrease$GCTest$TestThread: void start()>();
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 4 goto $r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
staticinvoke <java.lang.System: void gc()>();
i1 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
$r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r6 = $r5[i1];
virtualinvoke $r6.<TestNewSizeThreadIncrease$GCTest$TestThread: void stopRunning()>();
i1 = i1 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 4 goto $r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r7 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"Done\");
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Creating garbage\");
i0 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 4 goto $r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r1 = new TestNewSizeThreadIncrease$GCTest$TestThread;
specialinvoke $r1.<TestNewSizeThreadIncrease$GCTest$TestThread: void <init>(TestNewSizeThreadIncrease$GCTest$TestThread)>(null);
$r2[i0] = $r1;
$r3 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r4 = $r3[i0];
virtualinvoke $r4.<TestNewSizeThreadIncrease$GCTest$TestThread: void start()>();
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 4 goto $r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 4 goto $r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
staticinvoke <java.lang.System: void gc()>();
i1 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 4 goto $r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r1 = new TestNewSizeThreadIncrease$GCTest$TestThread;
specialinvoke $r1.<TestNewSizeThreadIncrease$GCTest$TestThread: void <init>(TestNewSizeThreadIncrease$GCTest$TestThread)>(null);
$r2[i0] = $r1;
$r3 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r4 = $r3[i0];
virtualinvoke $r4.<TestNewSizeThreadIncrease$GCTest$TestThread: void start()>();
i0 = i0 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
staticinvoke <java.lang.System: void gc()>();
i1 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 4 goto $r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
$r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r6 = $r5[i1];
virtualinvoke $r6.<TestNewSizeThreadIncrease$GCTest$TestThread: void stopRunning()>();
i1 = i1 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 4 goto $r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 4 goto $r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"->"Block 6:
[preds: 5 ] [succs: ]
$r7 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>(\"Done\");
return;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 4 goto $r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
"->"Block 4:
[preds: 5 ] [succs: 5 ]
$r5 = <TestNewSizeThreadIncrease$GCTest: TestNewSizeThreadIncrease$GCTest$TestThread[] threads>;
$r6 = $r5[i1];
virtualinvoke $r6.<TestNewSizeThreadIncrease$GCTest$TestThread: void stopRunning()>();
i1 = i1 + 1;
";
}
