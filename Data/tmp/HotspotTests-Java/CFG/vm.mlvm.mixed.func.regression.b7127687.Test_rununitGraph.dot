digraph "unitGraph" {
    "r18 := @this: vm.mlvm.mixed.func.regression.b7127687.Test"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "i0 = 0"
    "goto [?= (branch)]"
    "$r2 = new java.lang.StringBuilder"
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4)"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5)"
    "i0 = i0 + 1"
    "if i0 < 1000 goto $r2 = new java.lang.StringBuilder"
    "r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"
    "goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]"
    "$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()"
    "r19 = (java.lang.Class) $r7"
    "r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"
    "goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"
    "$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"
    "r10 = (java.lang.Class) $r9"
    "$r11 = new java.lang.StringBuilder"
    "specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19)"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16)"
    "staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10)"
    "$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"
    "$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()"
    "return 1"
    "r18 := @this: vm.mlvm.mixed.func.regression.b7127687.Test"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 1000 goto $r2 = new java.lang.StringBuilder";
    "$r2 = new java.lang.StringBuilder"->"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\")";
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4)";
    "$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 1000 goto $r2 = new java.lang.StringBuilder";
    "if i0 < 1000 goto $r2 = new java.lang.StringBuilder"->"r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()";
    "if i0 < 1000 goto $r2 = new java.lang.StringBuilder"->"$r2 = new java.lang.StringBuilder";
    "r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"->"goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()";
    "$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()"->"r19 = (java.lang.Class) $r7";
    "r19 = (java.lang.Class) $r7"->"r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()";
    "r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()"->"goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"r10 = (java.lang.Class) $r9";
    "r10 = (java.lang.Class) $r9"->"$r11 = new java.lang.StringBuilder";
    "$r11 = new java.lang.StringBuilder"->"specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\")";
    "specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19)";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19)"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16)";
    "staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16)"->"staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10)";
    "staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10)"->"$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"->"if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()";
    "if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()";
    "$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()"->"if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()"->"return 1";
    "if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()"->"$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()";
}
