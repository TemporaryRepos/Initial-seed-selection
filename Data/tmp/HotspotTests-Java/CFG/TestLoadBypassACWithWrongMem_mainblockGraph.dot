digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 8 ]
r19 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0);
if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"
    "Block 2:
[preds: 1 ] [succs: ]
$r13 = new java.lang.RuntimeException;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);
throw $r13;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0);
if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"
    "Block 4:
[preds: 3 ] [succs: ]
$r7 = new java.lang.RuntimeException;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r7;
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0;
i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>();
if i3 == 66 goto i0 = i0 + 1;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r1;
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
"
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"
    "Block 9:
[preds: 8 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 8 ]
r19 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
i0 = 0;
goto [?= (branch)];
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
";
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0);
if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 2:
[preds: 1 ] [succs: ]
$r13 = new java.lang.RuntimeException;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);
throw $r13;
";
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0);
if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0);
if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0);
if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 4:
[preds: 3 ] [succs: ]
$r7 = new java.lang.RuntimeException;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);
throw $r7;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0);
if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0;
i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>();
if i3 == 66 goto i0 = i0 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0;
i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>();
if i3 == 66 goto i0 = i0 + 1;
"->"Block 6:
[preds: 5 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
throw $r1;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0;
i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>();
if i3 == 66 goto i0 = i0 + 1;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 9:
[preds: 8 ] [succs: ]
return;
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
"->"Block 1:
[preds: 8 ] [succs: 2 3 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0);
if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0);
";
}
