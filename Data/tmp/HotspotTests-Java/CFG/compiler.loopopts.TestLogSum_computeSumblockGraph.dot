digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 5 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
$r0 = newarray (java.lang.Integer)[2];
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r0[0] = $r1;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r0[1] = $r2;
r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r8 = new compiler.loopopts.TestLogSum$LogSumArray;
specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0);
r9 = $r8;
i5 = 1;
goto [?= $i2 = i0 + 1];
"
    "Block 2:
[preds: 3 ] [succs: 3 ]
$i3 = i5 + i0;
$i4 = $i3 + i1;
$d1 = (double) $i4;
d2 = staticinvoke <java.lang.Math: double log(double)>($d1);
virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2);
i5 = i5 + 1;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i2 = i0 + 1;
if i5 < $i2 goto $i3 = i5 + i0;
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>();
$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);
"
    "Block 5:
[preds: 0 4 ] [succs: ]
$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
$r7 = (java.lang.Double) $r6;
$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();
return $d0;
"
    "Block 0:
[preds: ] [succs: 1 5 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
$r0 = newarray (java.lang.Integer)[2];
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r0[0] = $r1;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r0[1] = $r2;
r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$r8 = new compiler.loopopts.TestLogSum$LogSumArray;
specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0);
r9 = $r8;
i5 = 1;
goto [?= $i2 = i0 + 1];
";
    "Block 0:
[preds: ] [succs: 1 5 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
$r0 = newarray (java.lang.Integer)[2];
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r0[0] = $r1;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r0[1] = $r2;
r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
"->"Block 5:
[preds: 0 4 ] [succs: ]
$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
$r7 = (java.lang.Double) $r6;
$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();
return $d0;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r8 = new compiler.loopopts.TestLogSum$LogSumArray;
specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0);
r9 = $r8;
i5 = 1;
goto [?= $i2 = i0 + 1];
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i2 = i0 + 1;
if i5 < $i2 goto $i3 = i5 + i0;
";
    "Block 2:
[preds: 3 ] [succs: 3 ]
$i3 = i5 + i0;
$i4 = $i3 + i1;
$d1 = (double) $i4;
d2 = staticinvoke <java.lang.Math: double log(double)>($d1);
virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2);
i5 = i5 + 1;
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i2 = i0 + 1;
if i5 < $i2 goto $i3 = i5 + i0;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i2 = i0 + 1;
if i5 < $i2 goto $i3 = i5 + i0;
"->"Block 4:
[preds: 3 ] [succs: 5 ]
$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>();
$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i2 = i0 + 1;
if i5 < $i2 goto $i3 = i5 + i0;
"->"Block 2:
[preds: 3 ] [succs: 3 ]
$i3 = i5 + i0;
$i4 = $i3 + i1;
$d1 = (double) $i4;
d2 = staticinvoke <java.lang.Math: double log(double)>($d1);
virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2);
i5 = i5 + 1;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>();
$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);
interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);
"->"Block 5:
[preds: 0 4 ] [succs: ]
$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>;
$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
$r7 = (java.lang.Double) $r6;
$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();
return $d0;
";
}
