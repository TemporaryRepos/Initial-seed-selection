digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\")"
    "b5 = 1"
    "z0 = 0"
    "i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10)"
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6)"
    "if i6 != 3 goto $b7 = 0"
    "$b7 = 1"
    "goto [?= i8 = b5 & $b7]"
    "$b7 = 0"
    "i8 = b5 & $b7"
    "i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L)"
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9)"
    "if i9 != 3 goto $b10 = 0"
    "$b10 = 1"
    "goto [?= i11 = i8 & $b10]"
    "$b10 = 0"
    "i11 = i8 & $b10"
    "i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F)"
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12)"
    "if i12 != 3 goto $b13 = 0"
    "$b13 = 1"
    "goto [?= i14 = i11 & $b13]"
    "$b13 = 0"
    "i14 = i11 & $b13"
    "i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0)"
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15)"
    "if i15 != 3 goto $b16 = 0"
    "$b16 = 1"
    "goto [?= i17 = i14 & $b16]"
    "$b16 = 0"
    "i17 = i14 & $b16"
    "i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10)"
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18)"
    "if i18 != 10 goto $b19 = 0"
    "$b19 = 1"
    "goto [?= i20 = i17 & $b19]"
    "$b19 = 0"
    "i20 = i17 & $b19"
    "if i20 == 0 goto $r1 = new nsk.share.TestFailure"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\")"
    "goto [?= return]"
    "$r1 = new nsk.share.TestFailure"
    "specialinvoke $r1.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"ERRROR in conditional expressions\")"
    "throw $r1"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\")"->"b5 = 1";
    "b5 = 1"->"z0 = 0";
    "z0 = 0"->"i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10)";
    "i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10)"->"staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6)";
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6)"->"if i6 != 3 goto $b7 = 0";
    "if i6 != 3 goto $b7 = 0"->"$b7 = 1";
    "if i6 != 3 goto $b7 = 0"->"$b7 = 0";
    "$b7 = 1"->"goto [?= i8 = b5 & $b7]";
    "goto [?= i8 = b5 & $b7]"->"i8 = b5 & $b7";
    "$b7 = 0"->"i8 = b5 & $b7";
    "i8 = b5 & $b7"->"i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L)";
    "i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L)"->"staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9)";
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9)"->"if i9 != 3 goto $b10 = 0";
    "if i9 != 3 goto $b10 = 0"->"$b10 = 1";
    "if i9 != 3 goto $b10 = 0"->"$b10 = 0";
    "$b10 = 1"->"goto [?= i11 = i8 & $b10]";
    "goto [?= i11 = i8 & $b10]"->"i11 = i8 & $b10";
    "$b10 = 0"->"i11 = i8 & $b10";
    "i11 = i8 & $b10"->"i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F)";
    "i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F)"->"staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12)";
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12)"->"if i12 != 3 goto $b13 = 0";
    "if i12 != 3 goto $b13 = 0"->"$b13 = 1";
    "if i12 != 3 goto $b13 = 0"->"$b13 = 0";
    "$b13 = 1"->"goto [?= i14 = i11 & $b13]";
    "goto [?= i14 = i11 & $b13]"->"i14 = i11 & $b13";
    "$b13 = 0"->"i14 = i11 & $b13";
    "i14 = i11 & $b13"->"i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0)";
    "i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0)"->"staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15)";
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15)"->"if i15 != 3 goto $b16 = 0";
    "if i15 != 3 goto $b16 = 0"->"$b16 = 1";
    "if i15 != 3 goto $b16 = 0"->"$b16 = 0";
    "$b16 = 1"->"goto [?= i17 = i14 & $b16]";
    "goto [?= i17 = i14 & $b16]"->"i17 = i14 & $b16";
    "$b16 = 0"->"i17 = i14 & $b16";
    "i17 = i14 & $b16"->"i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10)";
    "i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10)"->"staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18)";
    "staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18)"->"if i18 != 10 goto $b19 = 0";
    "if i18 != 10 goto $b19 = 0"->"$b19 = 1";
    "if i18 != 10 goto $b19 = 0"->"$b19 = 0";
    "$b19 = 1"->"goto [?= i20 = i17 & $b19]";
    "goto [?= i20 = i17 & $b19]"->"i20 = i17 & $b19";
    "$b19 = 0"->"i20 = i17 & $b19";
    "i20 = i17 & $b19"->"if i20 == 0 goto $r1 = new nsk.share.TestFailure";
    "if i20 == 0 goto $r1 = new nsk.share.TestFailure"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "if i20 == 0 goto $r1 = new nsk.share.TestFailure"->"$r1 = new nsk.share.TestFailure";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\")";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\")"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r1 = new nsk.share.TestFailure"->"specialinvoke $r1.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"ERRROR in conditional expressions\")";
    "specialinvoke $r1.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"ERRROR in conditional expressions\")"->"throw $r1";
}
