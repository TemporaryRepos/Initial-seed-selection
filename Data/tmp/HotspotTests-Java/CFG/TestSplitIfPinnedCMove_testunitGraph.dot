digraph "unitGraph" {
    "i3 := @parameter0: int"
    "i4 := @parameter1: int"
    "r0 := @parameter2: TestSplitIfPinnedCMove$A"
    "r1 := @parameter3: TestSplitIfPinnedCMove$A"
    "i7 = 0"
    "i8 = 0"
    "goto [?= (branch)]"
    "i9 = 0"
    "i10 = 0"
    "i7 = i7 + 1"
    "i10 = i10 + 1"
    "if i10 < 2 goto i7 = i7 + 1"
    "i9 = i9 + 1"
    "if i9 < 2 goto i10 = 0"
    "i8 = i8 + 1"
    "if i8 < 2 goto i9 = 0"
    "$i1 = r0.<TestSplitIfPinnedCMove$A: int f>"
    "$i0 = r1.<TestSplitIfPinnedCMove$A: int f>"
    "$i2 = $i1 + $i0"
    "i11 = i7 + $i2"
    "z0 = 0"
    "if i3 <= 0 goto (branch)"
    "staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>()"
    "z0 = 1"
    "if i4 <= 0 goto $r2 = r1"
    "$r2 = r0"
    "goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>]"
    "$r2 = r1"
    "$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>"
    "i12 = i11 + $i5"
    "if z0 == 0 goto (branch)"
    "i12 = i12 + 42"
    "if i4 <= 0 goto return i12"
    "i12 = i12 + 1"
    "return i12"
    "i3 := @parameter0: int"->"i4 := @parameter1: int";
    "i4 := @parameter1: int"->"r0 := @parameter2: TestSplitIfPinnedCMove$A";
    "r0 := @parameter2: TestSplitIfPinnedCMove$A"->"r1 := @parameter3: TestSplitIfPinnedCMove$A";
    "r1 := @parameter3: TestSplitIfPinnedCMove$A"->"i7 = 0";
    "i7 = 0"->"i8 = 0";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < 2 goto i9 = 0";
    "i9 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < 2 goto i10 = 0";
    "i10 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < 2 goto i7 = i7 + 1";
    "i7 = i7 + 1"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"if i10 < 2 goto i7 = i7 + 1";
    "if i10 < 2 goto i7 = i7 + 1"->"i9 = i9 + 1";
    "if i10 < 2 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "i9 = i9 + 1"->"if i9 < 2 goto i10 = 0";
    "if i9 < 2 goto i10 = 0"->"i8 = i8 + 1";
    "if i9 < 2 goto i10 = 0"->"i10 = 0";
    "i8 = i8 + 1"->"if i8 < 2 goto i9 = 0";
    "if i8 < 2 goto i9 = 0"->"$i1 = r0.<TestSplitIfPinnedCMove$A: int f>";
    "if i8 < 2 goto i9 = 0"->"i9 = 0";
    "$i1 = r0.<TestSplitIfPinnedCMove$A: int f>"->"$i0 = r1.<TestSplitIfPinnedCMove$A: int f>";
    "$i0 = r1.<TestSplitIfPinnedCMove$A: int f>"->"$i2 = $i1 + $i0";
    "$i2 = $i1 + $i0"->"i11 = i7 + $i2";
    "i11 = i7 + $i2"->"z0 = 0";
    "z0 = 0"->"if i3 <= 0 goto (branch)";
    "if i3 <= 0 goto (branch)"->"staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>()";
    "if i3 <= 0 goto (branch)"->"if i4 <= 0 goto $r2 = r1";
    "staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>()"->"z0 = 1";
    "z0 = 1"->"if i4 <= 0 goto $r2 = r1";
    "if i4 <= 0 goto $r2 = r1"->"$r2 = r0";
    "if i4 <= 0 goto $r2 = r1"->"$r2 = r1";
    "$r2 = r0"->"goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>]";
    "goto [?= $i5 = $r2.<TestSplitIfPinnedCMove$A: int f>]"->"$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>";
    "$r2 = r1"->"$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>";
    "$i5 = $r2.<TestSplitIfPinnedCMove$A: int f>"->"i12 = i11 + $i5";
    "i12 = i11 + $i5"->"if z0 == 0 goto (branch)";
    "if z0 == 0 goto (branch)"->"staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>()";
    "if z0 == 0 goto (branch)"->"if i4 <= 0 goto return i12";
    "staticinvoke <TestSplitIfPinnedCMove: void not_inlined()>()"->"i12 = i12 + 42";
    "i12 = i12 + 42"->"if i4 <= 0 goto return i12";
    "if i4 <= 0 goto return i12"->"i12 = i12 + 1";
    "if i4 <= 0 goto return i12"->"return i12";
    "i12 = i12 + 1"->"return i12";
}
