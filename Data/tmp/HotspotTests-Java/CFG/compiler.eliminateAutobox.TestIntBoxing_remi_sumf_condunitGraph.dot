digraph "unitGraph" {
    "r0 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer foob(int)>(1)"
    "i4 = 0"
    "goto [?= (branch)]"
    "$i0 = i4 & 1"
    "if $i0 != 0 goto i4 = i4 + 1"
    "$i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>()"
    "$i2 = $i1 + 1"
    "r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "i4 = i4 + 1"
    "if i4 < 1000 goto $i0 = i4 & 1"
    "$i3 = virtualinvoke r0.<java.lang.Integer: int intValue()>()"
    "return $i3"
    "r0 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer foob(int)>(1)"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 1000 goto $i0 = i4 & 1";
    "$i0 = i4 & 1"->"if $i0 != 0 goto i4 = i4 + 1";
    "if $i0 != 0 goto i4 = i4 + 1"->"$i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>()";
    "if $i0 != 0 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "$i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>()"->"$i2 = $i1 + 1";
    "$i2 = $i1 + 1"->"r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 1000 goto $i0 = i4 & 1";
    "if i4 < 1000 goto $i0 = i4 & 1"->"$i3 = virtualinvoke r0.<java.lang.Integer: int intValue()>()";
    "if i4 < 1000 goto $i0 = i4 & 1"->"$i0 = i4 & 1";
    "$i3 = virtualinvoke r0.<java.lang.Integer: int intValue()>()"->"return $i3";
}
