digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.vectorization.TestPopCountVector"
    "specialinvoke $r0.<compiler.vectorization.TestPopCountVector: void <init>()>()"
    "r1 = $r0"
    "i0 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"
    "i0 = i0 + 1"
    "if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")"
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void checkResult()>()"
    "i1 = 0"
    "i1 = i1 + 1"
    "if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")"
    "return"
    "r4 := @parameter0: java.lang.String[]"->"$r0 = new compiler.vectorization.TestPopCountVector";
    "$r0 = new compiler.vectorization.TestPopCountVector"->"specialinvoke $r0.<compiler.vectorization.TestPopCountVector: void <init>()>()";
    "specialinvoke $r0.<compiler.vectorization.TestPopCountVector: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")"->"virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void checkResult()>()";
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void checkResult()>()"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()"->"virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void vectorizeBitCount()>()";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Checking popcount result\")"->"virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void checkResult()>()";
    "virtualinvoke r1.<compiler.vectorization.TestPopCountVector: void checkResult()>()"->"return";
}
