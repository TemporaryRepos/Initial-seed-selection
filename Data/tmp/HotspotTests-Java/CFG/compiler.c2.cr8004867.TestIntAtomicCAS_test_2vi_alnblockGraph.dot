digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray;
r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray;
i0 := @parameter2: int;
i2 := @parameter3: int;
i5 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
$i3 = i5 + 8;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2);
i5 = i5 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
"
    "Block 3:
[preds: 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray;
r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray;
i0 := @parameter2: int;
i2 := @parameter3: int;
i5 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
$i3 = i5 + 8;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2);
i5 = i5 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
"->"Block 3:
[preds: 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0);
$i3 = i5 + 8;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2);
i5 = i5 + 1;
";
}
