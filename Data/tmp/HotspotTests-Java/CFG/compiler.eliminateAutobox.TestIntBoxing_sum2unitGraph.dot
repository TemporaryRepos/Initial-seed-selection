digraph "unitGraph" {
    "r0 := @parameter0: int[]"
    "i6 = 1"
    "i7 = 1"
    "r1 = r0"
    "i0 = lengthof r0"
    "i8 = 0"
    "goto [?= (branch)]"
    "$i1 = r1[i8]"
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"
    "i6 = i6 + $i2"
    "$i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"
    "$i4 = $i3 + 1"
    "i7 = i7 + $i4"
    "i8 = i8 + 1"
    "if i8 < i0 goto $i1 = r1[i8]"
    "$i5 = i6 + i7"
    "return $i5"
    "r0 := @parameter0: int[]"->"i6 = 1";
    "i6 = 1"->"i7 = 1";
    "i7 = 1"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i8 = 0";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < i0 goto $i1 = r1[i8]";
    "$i1 = r1[i8]"->"r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>()";
    "$i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"i6 = i6 + $i2";
    "i6 = i6 + $i2"->"$i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>()";
    "$i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"$i4 = $i3 + 1";
    "$i4 = $i3 + 1"->"i7 = i7 + $i4";
    "i7 = i7 + $i4"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"if i8 < i0 goto $i1 = r1[i8]";
    "if i8 < i0 goto $i1 = r1[i8]"->"$i5 = i6 + i7";
    "if i8 < i0 goto $i1 = r1[i8]"->"$i1 = r1[i8]";
    "$i5 = i6 + i7"->"return $i5";
}
