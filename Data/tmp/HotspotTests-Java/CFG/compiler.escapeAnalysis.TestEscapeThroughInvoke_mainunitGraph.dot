digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.escapeAnalysis.TestEscapeThroughInvoke"
    "specialinvoke $r0.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void <init>()>()"
    "r1 = $r0"
    "$r2 = new compiler.escapeAnalysis.TestEscapeThroughInvoke$A"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42)"
    "specialinvoke $r2.<compiler.escapeAnalysis.TestEscapeThroughInvoke$A: void <init>(java.lang.Integer)>($r3)"
    "r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: compiler.escapeAnalysis.TestEscapeThroughInvoke$A a> = $r2"
    "i0 = 0"
    "goto [?= (branch)]"
    "specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()"
    "i0 = i0 + 1"
    "if i0 < 100000 goto specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()"
    "return"
    "r4 := @parameter0: java.lang.String[]"->"$r0 = new compiler.escapeAnalysis.TestEscapeThroughInvoke";
    "$r0 = new compiler.escapeAnalysis.TestEscapeThroughInvoke"->"specialinvoke $r0.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void <init>()>()";
    "specialinvoke $r0.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new compiler.escapeAnalysis.TestEscapeThroughInvoke$A";
    "$r2 = new compiler.escapeAnalysis.TestEscapeThroughInvoke$A"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42)"->"specialinvoke $r2.<compiler.escapeAnalysis.TestEscapeThroughInvoke$A: void <init>(java.lang.Integer)>($r3)";
    "specialinvoke $r2.<compiler.escapeAnalysis.TestEscapeThroughInvoke$A: void <init>(java.lang.Integer)>($r3)"->"r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: compiler.escapeAnalysis.TestEscapeThroughInvoke$A a> = $r2";
    "r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: compiler.escapeAnalysis.TestEscapeThroughInvoke$A a> = $r2"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 100000 goto specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()";
    "specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 100000 goto specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()";
    "if i0 < 100000 goto specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()"->"return";
    "if i0 < 100000 goto specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()"->"specialinvoke r1.<compiler.escapeAnalysis.TestEscapeThroughInvoke: void run()>()";
}
