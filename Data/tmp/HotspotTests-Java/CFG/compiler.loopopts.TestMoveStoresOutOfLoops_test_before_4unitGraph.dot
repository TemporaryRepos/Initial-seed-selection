digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i3 = 0"
    "goto [?= (branch)]"
    "$i1 = i3 + 1"
    "$i2 = i0 / $i1"
    "if $i2 <= 0 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "return"
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$r0[i0] = 999L"
    "i3 = i3 + 1"
    "if i3 < 1000 goto $i1 = i3 + 1"
    "i0 := @parameter0: int"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 1000 goto $i1 = i3 + 1";
    "$i1 = i3 + 1"->"$i2 = i0 / $i1";
    "$i2 = i0 / $i1"->"if $i2 <= 0 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "if $i2 <= 0 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"return";
    "if $i2 <= 0 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0[i0] = 999L";
    "$r0[i0] = 999L"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 1000 goto $i1 = i3 + 1";
    "if i3 < 1000 goto $i1 = i3 + 1"->"return";
    "if i3 < 1000 goto $i1 = i3 + 1"->"$i1 = i3 + 1";
}
