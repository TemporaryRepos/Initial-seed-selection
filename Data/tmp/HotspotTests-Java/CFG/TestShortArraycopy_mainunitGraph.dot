digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "goto [?= $r0 = <TestShortArraycopy: short[] a1>]"
    "$r1 = <TestShortArraycopy: short[] a1>"
    "$r1[i1] = -1"
    "$r2 = <TestShortArraycopy: short[] a2>"
    "$r2[i1] = -1"
    "$r3 = <TestShortArraycopy: short[] a3>"
    "$r3[i1] = 0"
    "i1 = i1 + 1"
    "$r0 = <TestShortArraycopy: short[] a1>"
    "$i0 = lengthof $r0"
    "if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>"
    "$r4 = new TestShortArraycopy$1"
    "specialinvoke $r4.<TestShortArraycopy$1: void <init>()>()"
    "r8 = $r4"
    "$r5 = new TestShortArraycopy$2"
    "specialinvoke $r5.<TestShortArraycopy$2: void <init>()>()"
    "r6 = $r5"
    "<TestShortArraycopy: boolean keepRunning> = 1"
    "virtualinvoke r8.<java.lang.Thread: void start()>()"
    "virtualinvoke r6.<java.lang.Thread: void start()>()"
    "virtualinvoke r6.<java.lang.Thread: void join()>()"
    "<TestShortArraycopy: boolean keepRunning> = 0"
    "virtualinvoke r8.<java.lang.Thread: void join()>()"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"goto [?= $r0 = <TestShortArraycopy: short[] a1>]";
    "goto [?= $r0 = <TestShortArraycopy: short[] a1>]"->"$r0 = <TestShortArraycopy: short[] a1>";
    "$r1 = <TestShortArraycopy: short[] a1>"->"$r1[i1] = -1";
    "$r1[i1] = -1"->"$r2 = <TestShortArraycopy: short[] a2>";
    "$r2 = <TestShortArraycopy: short[] a2>"->"$r2[i1] = -1";
    "$r2[i1] = -1"->"$r3 = <TestShortArraycopy: short[] a3>";
    "$r3 = <TestShortArraycopy: short[] a3>"->"$r3[i1] = 0";
    "$r3[i1] = 0"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"$r0 = <TestShortArraycopy: short[] a1>";
    "$r0 = <TestShortArraycopy: short[] a1>"->"$i0 = lengthof $r0";
    "$i0 = lengthof $r0"->"if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>";
    "if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>"->"$r4 = new TestShortArraycopy$1";
    "if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>"->"$r1 = <TestShortArraycopy: short[] a1>";
    "$r4 = new TestShortArraycopy$1"->"specialinvoke $r4.<TestShortArraycopy$1: void <init>()>()";
    "specialinvoke $r4.<TestShortArraycopy$1: void <init>()>()"->"r8 = $r4";
    "r8 = $r4"->"$r5 = new TestShortArraycopy$2";
    "$r5 = new TestShortArraycopy$2"->"specialinvoke $r5.<TestShortArraycopy$2: void <init>()>()";
    "specialinvoke $r5.<TestShortArraycopy$2: void <init>()>()"->"r6 = $r5";
    "r6 = $r5"->"<TestShortArraycopy: boolean keepRunning> = 1";
    "<TestShortArraycopy: boolean keepRunning> = 1"->"virtualinvoke r8.<java.lang.Thread: void start()>()";
    "virtualinvoke r8.<java.lang.Thread: void start()>()"->"virtualinvoke r6.<java.lang.Thread: void start()>()";
    "virtualinvoke r6.<java.lang.Thread: void start()>()"->"virtualinvoke r6.<java.lang.Thread: void join()>()";
    "virtualinvoke r6.<java.lang.Thread: void join()>()"->"<TestShortArraycopy: boolean keepRunning> = 0";
    "<TestShortArraycopy: boolean keepRunning> = 0"->"virtualinvoke r8.<java.lang.Thread: void join()>()";
    "virtualinvoke r8.<java.lang.Thread: void join()>()"->"return";
}
