digraph "unitGraph" {
    "r16 := @parameter0: java.lang.String[]"
    "$r0 = newarray (int)[7]"
    "$r0[0] = -10"
    "$r0[1] = -5"
    "$r0[3] = 5"
    "$r0[4] = 8"
    "$r0[5] = 16"
    "$r0[6] = 100"
    "r1 = $r0"
    "$r2 = newarray (int)[3]"
    "$r2[0] = 16"
    "$r2[1] = 10"
    "r3 = $r2"
    "$i1 = lengthof r1"
    "$i0 = lengthof r3"
    "r4 = newmultiarray (boolean)[$i1][$i0]"
    "i18 = 0"
    "goto [?= $i2 = lengthof r1]"
    "i19 = 0"
    "goto [?= $i3 = lengthof r3]"
    "$r5 = r4[i18]"
    "$r5[i19] = 1"
    "i19 = i19 + 1"
    "$i3 = lengthof r3"
    "if i19 < $i3 goto $r5 = r4[i18]"
    "i18 = i18 + 1"
    "$i2 = lengthof r1"
    "if i18 < $i2 goto i19 = 0"
    "$i5 = lengthof r1"
    "$i4 = lengthof r3"
    "r17 = newmultiarray (boolean)[$i5][$i4]"
    "i20 = 0"
    "goto [?= $i6 = lengthof r1]"
    "i21 = 0"
    "goto [?= $i22 = lengthof r3]"
    "$r6 = r17[i20]"
    "$i8 = i21"
    "$i7 = r3[i21]"
    "if $i7 <= 0 goto $z0 = 0"
    "$z0 = 1"
    "goto [?= $r6[$i8] = $z0]"
    "$z0 = 0"
    "$r6[$i8] = $z0"
    "i21 = i21 + 1"
    "$i22 = lengthof r3"
    "if i21 < $i22 goto $r6 = r17[i20]"
    "i20 = i20 + 1"
    "$i6 = lengthof r1"
    "if i20 < $i6 goto i21 = 0"
    "$i9 = lengthof r3"
    "r18 = newarray (boolean)[$i9]"
    "i23 = 0"
    "goto [?= $i24 = lengthof r3]"
    "$i11 = i23"
    "$i10 = r3[i23]"
    "if $i10 <= 0 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= r18[$i11] = $z1]"
    "$z1 = 0"
    "r18[$i11] = $z1"
    "i23 = i23 + 1"
    "$i24 = lengthof r3"
    "if i23 < $i24 goto $i11 = i23"
    "$i12 = lengthof r3"
    "r19 = newarray (boolean)[$i12]"
    "i25 = 0"
    "goto [?= $i26 = lengthof r3]"
    "$i14 = i25"
    "$i13 = r3[i25]"
    "if $i13 == 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= r19[$i14] = $z2]"
    "$z2 = 0"
    "r19[$i14] = $z2"
    "i25 = i25 + 1"
    "$i26 = lengthof r3"
    "if i25 < $i26 goto $i14 = i25"
    "$i15 = lengthof r3"
    "r20 = newarray (boolean)[$i15]"
    "i27 = 0"
    "goto [?= $i28 = lengthof r3]"
    "$i17 = i27"
    "$i16 = r3[i27]"
    "if $i16 != 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= r20[$i17] = $z3]"
    "$z3 = 0"
    "r20[$i17] = $z3"
    "i27 = i27 + 1"
    "$i28 = lengthof r3"
    "if i27 < $i28 goto $i17 = i27"
    "i29 = 0"
    "goto [?= (branch)]"
    "$r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test1\", $r10, r1, r3, r4)"
    "$r11 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test2__63: java.util.function.BiFunction bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test2\", $r11, r1, r3, r17)"
    "$r12 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test3__64: java.util.function.BiFunction bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test3\", $r12, r1, r3, r17)"
    "$r13 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test4__65: java.util.function.Function bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test4\", $r13, r3, r18)"
    "$r14 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test5__66: java.util.function.Function bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test5\", $r14, r3, r19)"
    "$r15 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test6__67: java.util.function.Function bootstrap$()>()"
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test6\", $r15, r3, r20)"
    "i29 = i29 + 1"
    "if i29 < 20000 goto $r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()"
    "return"
    "r16 := @parameter0: java.lang.String[]"->"$r0 = newarray (int)[7]";
    "$r0 = newarray (int)[7]"->"$r0[0] = -10";
    "$r0[0] = -10"->"$r0[1] = -5";
    "$r0[1] = -5"->"$r0[3] = 5";
    "$r0[3] = 5"->"$r0[4] = 8";
    "$r0[4] = 8"->"$r0[5] = 16";
    "$r0[5] = 16"->"$r0[6] = 100";
    "$r0[6] = 100"->"r1 = $r0";
    "r1 = $r0"->"$r2 = newarray (int)[3]";
    "$r2 = newarray (int)[3]"->"$r2[0] = 16";
    "$r2[0] = 16"->"$r2[1] = 10";
    "$r2[1] = 10"->"r3 = $r2";
    "r3 = $r2"->"$i1 = lengthof r1";
    "$i1 = lengthof r1"->"$i0 = lengthof r3";
    "$i0 = lengthof r3"->"r4 = newmultiarray (boolean)[$i1][$i0]";
    "r4 = newmultiarray (boolean)[$i1][$i0]"->"i18 = 0";
    "i18 = 0"->"goto [?= $i2 = lengthof r1]";
    "goto [?= $i2 = lengthof r1]"->"$i2 = lengthof r1";
    "i19 = 0"->"goto [?= $i3 = lengthof r3]";
    "goto [?= $i3 = lengthof r3]"->"$i3 = lengthof r3";
    "$r5 = r4[i18]"->"$r5[i19] = 1";
    "$r5[i19] = 1"->"i19 = i19 + 1";
    "i19 = i19 + 1"->"$i3 = lengthof r3";
    "$i3 = lengthof r3"->"if i19 < $i3 goto $r5 = r4[i18]";
    "if i19 < $i3 goto $r5 = r4[i18]"->"i18 = i18 + 1";
    "if i19 < $i3 goto $r5 = r4[i18]"->"$r5 = r4[i18]";
    "i18 = i18 + 1"->"$i2 = lengthof r1";
    "$i2 = lengthof r1"->"if i18 < $i2 goto i19 = 0";
    "if i18 < $i2 goto i19 = 0"->"$i5 = lengthof r1";
    "if i18 < $i2 goto i19 = 0"->"i19 = 0";
    "$i5 = lengthof r1"->"$i4 = lengthof r3";
    "$i4 = lengthof r3"->"r17 = newmultiarray (boolean)[$i5][$i4]";
    "r17 = newmultiarray (boolean)[$i5][$i4]"->"i20 = 0";
    "i20 = 0"->"goto [?= $i6 = lengthof r1]";
    "goto [?= $i6 = lengthof r1]"->"$i6 = lengthof r1";
    "i21 = 0"->"goto [?= $i22 = lengthof r3]";
    "goto [?= $i22 = lengthof r3]"->"$i22 = lengthof r3";
    "$r6 = r17[i20]"->"$i8 = i21";
    "$i8 = i21"->"$i7 = r3[i21]";
    "$i7 = r3[i21]"->"if $i7 <= 0 goto $z0 = 0";
    "if $i7 <= 0 goto $z0 = 0"->"$z0 = 1";
    "if $i7 <= 0 goto $z0 = 0"->"$z0 = 0";
    "$z0 = 1"->"goto [?= $r6[$i8] = $z0]";
    "goto [?= $r6[$i8] = $z0]"->"$r6[$i8] = $z0";
    "$z0 = 0"->"$r6[$i8] = $z0";
    "$r6[$i8] = $z0"->"i21 = i21 + 1";
    "i21 = i21 + 1"->"$i22 = lengthof r3";
    "$i22 = lengthof r3"->"if i21 < $i22 goto $r6 = r17[i20]";
    "if i21 < $i22 goto $r6 = r17[i20]"->"i20 = i20 + 1";
    "if i21 < $i22 goto $r6 = r17[i20]"->"$r6 = r17[i20]";
    "i20 = i20 + 1"->"$i6 = lengthof r1";
    "$i6 = lengthof r1"->"if i20 < $i6 goto i21 = 0";
    "if i20 < $i6 goto i21 = 0"->"$i9 = lengthof r3";
    "if i20 < $i6 goto i21 = 0"->"i21 = 0";
    "$i9 = lengthof r3"->"r18 = newarray (boolean)[$i9]";
    "r18 = newarray (boolean)[$i9]"->"i23 = 0";
    "i23 = 0"->"goto [?= $i24 = lengthof r3]";
    "goto [?= $i24 = lengthof r3]"->"$i24 = lengthof r3";
    "$i11 = i23"->"$i10 = r3[i23]";
    "$i10 = r3[i23]"->"if $i10 <= 0 goto $z1 = 0";
    "if $i10 <= 0 goto $z1 = 0"->"$z1 = 1";
    "if $i10 <= 0 goto $z1 = 0"->"$z1 = 0";
    "$z1 = 1"->"goto [?= r18[$i11] = $z1]";
    "goto [?= r18[$i11] = $z1]"->"r18[$i11] = $z1";
    "$z1 = 0"->"r18[$i11] = $z1";
    "r18[$i11] = $z1"->"i23 = i23 + 1";
    "i23 = i23 + 1"->"$i24 = lengthof r3";
    "$i24 = lengthof r3"->"if i23 < $i24 goto $i11 = i23";
    "if i23 < $i24 goto $i11 = i23"->"$i12 = lengthof r3";
    "if i23 < $i24 goto $i11 = i23"->"$i11 = i23";
    "$i12 = lengthof r3"->"r19 = newarray (boolean)[$i12]";
    "r19 = newarray (boolean)[$i12]"->"i25 = 0";
    "i25 = 0"->"goto [?= $i26 = lengthof r3]";
    "goto [?= $i26 = lengthof r3]"->"$i26 = lengthof r3";
    "$i14 = i25"->"$i13 = r3[i25]";
    "$i13 = r3[i25]"->"if $i13 == 0 goto $z2 = 0";
    "if $i13 == 0 goto $z2 = 0"->"$z2 = 1";
    "if $i13 == 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= r19[$i14] = $z2]";
    "goto [?= r19[$i14] = $z2]"->"r19[$i14] = $z2";
    "$z2 = 0"->"r19[$i14] = $z2";
    "r19[$i14] = $z2"->"i25 = i25 + 1";
    "i25 = i25 + 1"->"$i26 = lengthof r3";
    "$i26 = lengthof r3"->"if i25 < $i26 goto $i14 = i25";
    "if i25 < $i26 goto $i14 = i25"->"$i15 = lengthof r3";
    "if i25 < $i26 goto $i14 = i25"->"$i14 = i25";
    "$i15 = lengthof r3"->"r20 = newarray (boolean)[$i15]";
    "r20 = newarray (boolean)[$i15]"->"i27 = 0";
    "i27 = 0"->"goto [?= $i28 = lengthof r3]";
    "goto [?= $i28 = lengthof r3]"->"$i28 = lengthof r3";
    "$i17 = i27"->"$i16 = r3[i27]";
    "$i16 = r3[i27]"->"if $i16 != 0 goto $z3 = 0";
    "if $i16 != 0 goto $z3 = 0"->"$z3 = 1";
    "if $i16 != 0 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= r20[$i17] = $z3]";
    "goto [?= r20[$i17] = $z3]"->"r20[$i17] = $z3";
    "$z3 = 0"->"r20[$i17] = $z3";
    "r20[$i17] = $z3"->"i27 = i27 + 1";
    "i27 = i27 + 1"->"$i28 = lengthof r3";
    "$i28 = lengthof r3"->"if i27 < $i28 goto $i17 = i27";
    "if i27 < $i28 goto $i17 = i27"->"i29 = 0";
    "if i27 < $i28 goto $i17 = i27"->"$i17 = i27";
    "i29 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i29 < 20000 goto $r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()";
    "$r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test1\", $r10, r1, r3, r4)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test1\", $r10, r1, r3, r4)"->"$r11 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test2__63: java.util.function.BiFunction bootstrap$()>()";
    "$r11 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test2__63: java.util.function.BiFunction bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test2\", $r11, r1, r3, r17)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test2\", $r11, r1, r3, r17)"->"$r12 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test3__64: java.util.function.BiFunction bootstrap$()>()";
    "$r12 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test3__64: java.util.function.BiFunction bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test3\", $r12, r1, r3, r17)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper(java.lang.String,java.util.function.BiFunction,int[],int[],boolean[][])>(\"test3\", $r12, r1, r3, r17)"->"$r13 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test4__65: java.util.function.Function bootstrap$()>()";
    "$r13 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test4__65: java.util.function.Function bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test4\", $r13, r3, r18)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test4\", $r13, r3, r18)"->"$r14 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test5__66: java.util.function.Function bootstrap$()>()";
    "$r14 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test5__66: java.util.function.Function bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test5\", $r14, r3, r19)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test5\", $r14, r3, r19)"->"$r15 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test6__67: java.util.function.Function bootstrap$()>()";
    "$r15 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test6__67: java.util.function.Function bootstrap$()>()"->"staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test6\", $r15, r3, r20)";
    "staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks: void helper2(java.lang.String,java.util.function.Function,int[],boolean[])>(\"test6\", $r15, r3, r20)"->"i29 = i29 + 1";
    "i29 = i29 + 1"->"if i29 < 20000 goto $r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()";
    "if i29 < 20000 goto $r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()"->"return";
    "if i29 < 20000 goto $r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()"->"$r10 = staticinvoke <compiler.rangechecks.PowerOf2SizedArraysChecks$test1__62: java.util.function.BiFunction bootstrap$()>()";
}
