digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "r0 = newarray (int)[1000]"
    "r1 = newarray (byte)[1000]"
    "i4 = 0"
    "goto [?= (branch)]"
    "$i0 = lengthof r0"
    "$i1 = $i0 - 250"
    "staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test1(int[],int[],int)>(r0, r0, $i1)"
    "$i2 = lengthof r1"
    "$i3 = $i2 - 250"
    "staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test2(byte[],byte[],int)>(r1, r1, $i3)"
    "i4 = i4 + 1"
    "if i4 < 20000 goto $i0 = lengthof r0"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"r0 = newarray (int)[1000]";
    "r0 = newarray (int)[1000]"->"r1 = newarray (byte)[1000]";
    "r1 = newarray (byte)[1000]"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 20000 goto $i0 = lengthof r0";
    "$i0 = lengthof r0"->"$i1 = $i0 - 250";
    "$i1 = $i0 - 250"->"staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test1(int[],int[],int)>(r0, r0, $i1)";
    "staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test1(int[],int[],int)>(r0, r0, $i1)"->"$i2 = lengthof r1";
    "$i2 = lengthof r1"->"$i3 = $i2 - 250";
    "$i3 = $i2 - 250"->"staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test2(byte[],byte[],int)>(r1, r1, $i3)";
    "staticinvoke <compiler.vectorization.TestVectorUnalignedOffset: void test2(byte[],byte[],int)>(r1, r1, $i3)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 20000 goto $i0 = lengthof r0";
    "if i4 < 20000 goto $i0 = lengthof r0"->"return";
    "if i4 < 20000 goto $i0 = lengthof r0"->"$i0 = lengthof r0";
}
