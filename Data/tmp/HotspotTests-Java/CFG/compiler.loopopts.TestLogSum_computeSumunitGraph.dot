digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "$r0 = newarray (java.lang.Integer)[2]"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "$r0[0] = $r1"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r0[1] = $r2"
    "r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0)"
    "$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>"
    "$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)"
    "if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>"
    "$r8 = new compiler.loopopts.TestLogSum$LogSumArray"
    "specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0)"
    "r9 = $r8"
    "i5 = 1"
    "goto [?= $i2 = i0 + 1]"
    "$i3 = i5 + i0"
    "$i4 = $i3 + i1"
    "$d1 = (double) $i4"
    "d2 = staticinvoke <java.lang.Math: double log(double)>($d1)"
    "virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2)"
    "i5 = i5 + 1"
    "$i2 = i0 + 1"
    "if i5 < $i2 goto $i3 = i5 + i0"
    "$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>"
    "$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>()"
    "$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)"
    "interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11)"
    "$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>"
    "$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)"
    "$r7 = (java.lang.Double) $r6"
    "$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()"
    "return $d0"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"$r0 = newarray (java.lang.Integer)[2]";
    "$r0 = newarray (java.lang.Integer)[2]"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"$r0[0] = $r1";
    "$r0[0] = $r1"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r0[1] = $r2";
    "$r0[1] = $r2"->"r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0)";
    "r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0)"->"$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>";
    "$r4 = <compiler.loopopts.TestLogSum: java.util.Map cache>"->"$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)";
    "$z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)"->"if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>";
    "if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>"->"$r8 = new compiler.loopopts.TestLogSum$LogSumArray";
    "if $z0 != 0 goto $r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>"->"$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>";
    "$r8 = new compiler.loopopts.TestLogSum$LogSumArray"->"specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0)";
    "specialinvoke $r8.<compiler.loopopts.TestLogSum$LogSumArray: void <init>(int)>(i0)"->"r9 = $r8";
    "r9 = $r8"->"i5 = 1";
    "i5 = 1"->"goto [?= $i2 = i0 + 1]";
    "goto [?= $i2 = i0 + 1]"->"$i2 = i0 + 1";
    "$i3 = i5 + i0"->"$i4 = $i3 + i1";
    "$i4 = $i3 + i1"->"$d1 = (double) $i4";
    "$d1 = (double) $i4"->"d2 = staticinvoke <java.lang.Math: double log(double)>($d1)";
    "d2 = staticinvoke <java.lang.Math: double log(double)>($d1)"->"virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2)";
    "virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: void addLogSummand(double)>(d2)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"$i2 = i0 + 1";
    "$i2 = i0 + 1"->"if i5 < $i2 goto $i3 = i5 + i0";
    "if i5 < $i2 goto $i3 = i5 + i0"->"$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>";
    "if i5 < $i2 goto $i3 = i5 + i0"->"$i3 = i5 + i0";
    "$r10 = <compiler.loopopts.TestLogSum: java.util.Map cache>"->"$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>()";
    "$d3 = virtualinvoke r9.<compiler.loopopts.TestLogSum$LogSumArray: double retrieveLogSum()>()"->"$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)";
    "$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)"->"interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11)";
    "interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11)"->"$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>";
    "$r5 = <compiler.loopopts.TestLogSum: java.util.Map cache>"->"$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)";
    "$r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)"->"$r7 = (java.lang.Double) $r6";
    "$r7 = (java.lang.Double) $r6"->"$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()";
    "$d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()"->"return $d0";
}
