digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "i2 = 0"
    "goto [?= (branch)]"
    "r0 = newarray (int)[2]"
    "i0 = <compiler.loopopts.TestArraysFillDeadControl: int i>"
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 1)"
    "$i1 = 1 + i0"
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, $i1)"
    "staticinvoke <compiler.loopopts.TestArraysFillDeadControl: void dont_inline()>()"
    "i2 = i2 + 1"
    "if i2 < 200000 goto r0 = newarray (int)[2]"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 200000 goto r0 = newarray (int)[2]";
    "r0 = newarray (int)[2]"->"i0 = <compiler.loopopts.TestArraysFillDeadControl: int i>";
    "i0 = <compiler.loopopts.TestArraysFillDeadControl: int i>"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 1)";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 1)"->"$i1 = 1 + i0";
    "$i1 = 1 + i0"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, $i1)";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, $i1)"->"staticinvoke <compiler.loopopts.TestArraysFillDeadControl: void dont_inline()>()";
    "staticinvoke <compiler.loopopts.TestArraysFillDeadControl: void dont_inline()>()"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 200000 goto r0 = newarray (int)[2]";
    "if i2 < 200000 goto r0 = newarray (int)[2]"->"return";
    "if i2 < 200000 goto r0 = newarray (int)[2]"->"r0 = newarray (int)[2]";
}
