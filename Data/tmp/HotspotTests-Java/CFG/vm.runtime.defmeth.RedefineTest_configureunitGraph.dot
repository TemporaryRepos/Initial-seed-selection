digraph "unitGraph" {
    "r0 := @this: vm.runtime.defmeth.RedefineTest"
    "$r1 = r0.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>"
    "r2 = virtualinvoke $r1.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: java.lang.String getExecutionMode()>()"
    "$r3 = \"REFLECTION\""
    "$z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)"
    "if $z0 != 0 goto $r4 = new nsk.share.TestFailure"
    "$r5 = \"INVOKE_WITH_ARGS\""
    "$z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2)"
    "if $z1 == 0 goto return"
    "$r4 = new nsk.share.TestFailure"
    "specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"RedefineTest isn\'t applicable to reflection-based execution scenario (REDEFINE & INVOKE_WITH_ARGS).\")"
    "throw $r4"
    "return"
    "r0 := @this: vm.runtime.defmeth.RedefineTest"->"$r1 = r0.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>";
    "$r1 = r0.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>"->"r2 = virtualinvoke $r1.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: java.lang.String getExecutionMode()>()";
    "r2 = virtualinvoke $r1.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: java.lang.String getExecutionMode()>()"->"$r3 = \"REFLECTION\"";
    "$r3 = \"REFLECTION\""->"$z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)";
    "$z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)"->"if $z0 != 0 goto $r4 = new nsk.share.TestFailure";
    "if $z0 != 0 goto $r4 = new nsk.share.TestFailure"->"$r5 = \"INVOKE_WITH_ARGS\"";
    "if $z0 != 0 goto $r4 = new nsk.share.TestFailure"->"$r4 = new nsk.share.TestFailure";
    "$r5 = \"INVOKE_WITH_ARGS\""->"$z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2)";
    "$z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2)"->"if $z1 == 0 goto return";
    "if $z1 == 0 goto return"->"$r4 = new nsk.share.TestFailure";
    "if $z1 == 0 goto return"->"return";
    "$r4 = new nsk.share.TestFailure"->"specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"RedefineTest isn\'t applicable to reflection-based execution scenario (REDEFINE & INVOKE_WITH_ARGS).\")";
    "specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"RedefineTest isn\'t applicable to reflection-based execution scenario (REDEFINE & INVOKE_WITH_ARGS).\")"->"throw $r4";
}
