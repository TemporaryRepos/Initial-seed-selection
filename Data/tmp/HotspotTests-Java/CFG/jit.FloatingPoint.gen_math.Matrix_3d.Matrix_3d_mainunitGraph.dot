digraph "unitGraph" {
    "r17 := @parameter0: java.lang.String[]"
    "b0 = 50"
    "d0 = 0.001"
    "r0 = newmultiarray (double)[b0][b0][b0]"
    "r1 = newmultiarray (double)[b0][b0][b0]"
    "r2 = newmultiarray (double)[b0][b0][b0]"
    "$r3 = new jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d"
    "specialinvoke $r3.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: void <init>()>()"
    "r4 = $r3"
    "i2 = 0"
    "goto [?= (branch)]"
    "i3 = 0"
    "i4 = 0"
    "d1 = (double) i2"
    "d2 = staticinvoke <java.lang.Math: double sin(double)>(d1)"
    "d3 = (double) i3"
    "d4 = staticinvoke <java.lang.Math: double cos(double)>(d3)"
    "d5 = (double) i4"
    "d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d5)"
    "$r5 = r0[i2]"
    "$r6 = $r5[i3]"
    "$d8 = d2 * d2"
    "$d7 = d4 * d4"
    "$d9 = $d8 + $d7"
    "$d10 = d6 * $d9"
    "$r6[i4] = $d10"
    "i4 = i4 + 1"
    "if i4 < b0 goto d1 = (double) i2"
    "i3 = i3 + 1"
    "if i3 < b0 goto i4 = 0"
    "i2 = i2 + 1"
    "if i2 < b0 goto i3 = 0"
    "i5 = 0"
    "i6 = 0"
    "i7 = 0"
    "$r7 = r1[i5]"
    "$r10 = $r7[i6]"
    "$r8 = r0[i7]"
    "$r9 = $r8[i6]"
    "$d11 = $r9[i5]"
    "$r10[i7] = $d11"
    "$r11 = r2[i5]"
    "$r14 = $r11[i6]"
    "$r12 = r0[i7]"
    "$r13 = $r12[i5]"
    "$d12 = $r13[i6]"
    "$r14[i7] = $d12"
    "i7 = i7 + 1"
    "if i7 < b0 goto $r7 = r1[i5]"
    "i6 = i6 + 1"
    "if i6 < b0 goto i7 = 0"
    "i5 = i5 + 1"
    "if i5 < b0 goto i6 = 0"
    "d18 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r0)"
    "d19 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r1)"
    "d13 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r2)"
    "$d14 = d18 + d19"
    "d15 = $d14 + d13"
    "$d16 = 105.0 - d15"
    "d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)"
    "$b1 = d17 cmpg d0"
    "if $b1 >= 0 goto $r15 = new nsk.share.TestFailure"
    "$r16 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")"
    "goto [?= return]"
    "$r15 = new nsk.share.TestFailure"
    "specialinvoke $r15.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")"
    "throw $r15"
    "return"
    "r17 := @parameter0: java.lang.String[]"->"b0 = 50";
    "b0 = 50"->"d0 = 0.001";
    "d0 = 0.001"->"r0 = newmultiarray (double)[b0][b0][b0]";
    "r0 = newmultiarray (double)[b0][b0][b0]"->"r1 = newmultiarray (double)[b0][b0][b0]";
    "r1 = newmultiarray (double)[b0][b0][b0]"->"r2 = newmultiarray (double)[b0][b0][b0]";
    "r2 = newmultiarray (double)[b0][b0][b0]"->"$r3 = new jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d";
    "$r3 = new jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d"->"specialinvoke $r3.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: void <init>()>()";
    "specialinvoke $r3.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: void <init>()>()"->"r4 = $r3";
    "r4 = $r3"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < b0 goto i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < b0 goto i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < b0 goto d1 = (double) i2";
    "d1 = (double) i2"->"d2 = staticinvoke <java.lang.Math: double sin(double)>(d1)";
    "d2 = staticinvoke <java.lang.Math: double sin(double)>(d1)"->"d3 = (double) i3";
    "d3 = (double) i3"->"d4 = staticinvoke <java.lang.Math: double cos(double)>(d3)";
    "d4 = staticinvoke <java.lang.Math: double cos(double)>(d3)"->"d5 = (double) i4";
    "d5 = (double) i4"->"d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d5)";
    "d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d5)"->"$r5 = r0[i2]";
    "$r5 = r0[i2]"->"$r6 = $r5[i3]";
    "$r6 = $r5[i3]"->"$d8 = d2 * d2";
    "$d8 = d2 * d2"->"$d7 = d4 * d4";
    "$d7 = d4 * d4"->"$d9 = $d8 + $d7";
    "$d9 = $d8 + $d7"->"$d10 = d6 * $d9";
    "$d10 = d6 * $d9"->"$r6[i4] = $d10";
    "$r6[i4] = $d10"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < b0 goto d1 = (double) i2";
    "if i4 < b0 goto d1 = (double) i2"->"i3 = i3 + 1";
    "if i4 < b0 goto d1 = (double) i2"->"d1 = (double) i2";
    "i3 = i3 + 1"->"if i3 < b0 goto i4 = 0";
    "if i3 < b0 goto i4 = 0"->"i2 = i2 + 1";
    "if i3 < b0 goto i4 = 0"->"i4 = 0";
    "i2 = i2 + 1"->"if i2 < b0 goto i3 = 0";
    "if i2 < b0 goto i3 = 0"->"i5 = 0";
    "if i2 < b0 goto i3 = 0"->"i3 = 0";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < b0 goto i6 = 0";
    "i6 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < b0 goto i7 = 0";
    "i7 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < b0 goto $r7 = r1[i5]";
    "$r7 = r1[i5]"->"$r10 = $r7[i6]";
    "$r10 = $r7[i6]"->"$r8 = r0[i7]";
    "$r8 = r0[i7]"->"$r9 = $r8[i6]";
    "$r9 = $r8[i6]"->"$d11 = $r9[i5]";
    "$d11 = $r9[i5]"->"$r10[i7] = $d11";
    "$r10[i7] = $d11"->"$r11 = r2[i5]";
    "$r11 = r2[i5]"->"$r14 = $r11[i6]";
    "$r14 = $r11[i6]"->"$r12 = r0[i7]";
    "$r12 = r0[i7]"->"$r13 = $r12[i5]";
    "$r13 = $r12[i5]"->"$d12 = $r13[i6]";
    "$d12 = $r13[i6]"->"$r14[i7] = $d12";
    "$r14[i7] = $d12"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < b0 goto $r7 = r1[i5]";
    "if i7 < b0 goto $r7 = r1[i5]"->"i6 = i6 + 1";
    "if i7 < b0 goto $r7 = r1[i5]"->"$r7 = r1[i5]";
    "i6 = i6 + 1"->"if i6 < b0 goto i7 = 0";
    "if i6 < b0 goto i7 = 0"->"i5 = i5 + 1";
    "if i6 < b0 goto i7 = 0"->"i7 = 0";
    "i5 = i5 + 1"->"if i5 < b0 goto i6 = 0";
    "if i5 < b0 goto i6 = 0"->"d18 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r0)";
    "if i5 < b0 goto i6 = 0"->"i6 = 0";
    "d18 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r0)"->"d19 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r1)";
    "d19 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r1)"->"d13 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r2)";
    "d13 = virtualinvoke r4.<jit.FloatingPoint.gen_math.Matrix_3d.Matrix_3d: double trace_matrix(int,double[][][])>(b0, r2)"->"$d14 = d18 + d19";
    "$d14 = d18 + d19"->"d15 = $d14 + d13";
    "d15 = $d14 + d13"->"$d16 = 105.0 - d15";
    "$d16 = 105.0 - d15"->"d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)";
    "d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)"->"$b1 = d17 cmpg d0";
    "$b1 = d17 cmpg d0"->"if $b1 >= 0 goto $r15 = new nsk.share.TestFailure";
    "if $b1 >= 0 goto $r15 = new nsk.share.TestFailure"->"$r16 = <java.lang.System: java.io.PrintStream out>";
    "if $b1 >= 0 goto $r15 = new nsk.share.TestFailure"->"$r15 = new nsk.share.TestFailure";
    "$r16 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")";
    "virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r15 = new nsk.share.TestFailure"->"specialinvoke $r15.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")";
    "specialinvoke $r15.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")"->"throw $r15";
}
