digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "s0 = 10000"
    "staticinvoke <compiler.floatingpoint.ModNaN: void testWithPrint()>()"
    "i1 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"
    "i1 = i1 + 1"
    "if i1 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"
    "i2 = 0"
    "staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"
    "i2 = i2 + 1"
    "if i2 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"
    "staticinvoke <java.lang.Thread: void sleep(long)>(1000L)"
    "i3 = 0"
    "i3 = i3 + 1"
    "if i3 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"
    "i4 = 0"
    "i4 = i4 + 1"
    "if i4 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"s0 = 10000";
    "s0 = 10000"->"staticinvoke <compiler.floatingpoint.ModNaN: void testWithPrint()>()";
    "staticinvoke <compiler.floatingpoint.ModNaN: void testWithPrint()>()"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "if i1 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"i2 = 0";
    "if i1 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
    "staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
    "if i2 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"staticinvoke <java.lang.Thread: void sleep(long)>(1000L)";
    "if i2 < s0 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
    "staticinvoke <java.lang.Thread: void sleep(long)>(1000L)"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "if i3 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"i4 = 0";
    "if i3 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()"->"staticinvoke <compiler.floatingpoint.ModNaN: void testStrict()>()";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
    "staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
    "if i4 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"return";
    "if i4 < 10 goto staticinvoke <compiler.floatingpoint.ModNaN: void test()>()"->"staticinvoke <compiler.floatingpoint.ModNaN: void test()>()";
}
