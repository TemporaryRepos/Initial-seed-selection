digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @parameter0: java.lang.String[];
$r0 = new compiler.arraycopy.TestEliminateArrayCopy$CloneTests;
specialinvoke $r0.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void <init>()>();
r1 = $r0;
$r2 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r2, \"m1\");
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>(null, \"m2\");
$r3 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r3, \"m3\");
$r4 = new compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests;
specialinvoke $r4.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void <init>()>();
r5 = $r4;
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m1\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m2\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m3\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m4\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m5\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m6\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m7\");
$z0 = r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: boolean success>;
if $z0 == 0 goto $r6 = new java.lang.RuntimeException;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: boolean success>;
if $z1 != 0 goto i0 = 0;
"
    "Block 2:
[preds: 0 1 ] [succs: ]
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\");
throw $r6;
"
    "Block 3:
[preds: 1 ] [succs: 5 ]
i0 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i0 = i0 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i0 < 7000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
$r8 = <compiler.arraycopy.TestEliminateArrayCopy: java.lang.Object[] m1_array>;
$r7 = new java.lang.Object;
specialinvoke $r7.<java.lang.Object: void <init>()>();
$r8[0] = $r7;
i1 = 0;
goto [?= (branch)];
"
    "Block 7:
[preds: 8 ] [succs: 8 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i1 = i1 + 1;
"
    "Block 8:
[preds: 6 7 ] [succs: 9 7 ]
if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
<compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element> = 0;
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
$z2 = <compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element>;
if $z2 == 0 goto return;
"
    "Block 10:
[preds: 9 ] [succs: ]
$r9 = new java.lang.RuntimeException;
specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"OptimizePtrCompare test failed\");
throw $r9;
"
    "Block 11:
[preds: 9 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @parameter0: java.lang.String[];
$r0 = new compiler.arraycopy.TestEliminateArrayCopy$CloneTests;
specialinvoke $r0.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void <init>()>();
r1 = $r0;
$r2 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r2, \"m1\");
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>(null, \"m2\");
$r3 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r3, \"m3\");
$r4 = new compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests;
specialinvoke $r4.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void <init>()>();
r5 = $r4;
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m1\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m2\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m3\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m4\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m5\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m6\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m7\");
$z0 = r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: boolean success>;
if $z0 == 0 goto $r6 = new java.lang.RuntimeException;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: boolean success>;
if $z1 != 0 goto i0 = 0;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @parameter0: java.lang.String[];
$r0 = new compiler.arraycopy.TestEliminateArrayCopy$CloneTests;
specialinvoke $r0.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void <init>()>();
r1 = $r0;
$r2 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r2, \"m1\");
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>(null, \"m2\");
$r3 = <compiler.arraycopy.TestEliminateArrayCopy$CloneTests: compiler.arraycopy.TestInstanceCloneUtils$E e>;
virtualinvoke r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: void doTest(compiler.arraycopy.TestInstanceCloneUtils$Base,java.lang.String)>($r3, \"m3\");
$r4 = new compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests;
specialinvoke $r4.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void <init>()>();
r5 = $r4;
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m1\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m2\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m3\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m4\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m5\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m6\");
virtualinvoke r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: void doTest(java.lang.String)>(\"m7\");
$z0 = r1.<compiler.arraycopy.TestEliminateArrayCopy$CloneTests: boolean success>;
if $z0 == 0 goto $r6 = new java.lang.RuntimeException;
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\");
throw $r6;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: boolean success>;
if $z1 != 0 goto i0 = 0;
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r6 = new java.lang.RuntimeException;
specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"some tests failed\");
throw $r6;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = r5.<compiler.arraycopy.TestEliminateArrayCopy$ArrayCopyTests: boolean success>;
if $z1 != 0 goto i0 = 0;
"->"Block 3:
[preds: 1 ] [succs: 5 ]
i0 = 0;
goto [?= (branch)];
";
    "Block 3:
[preds: 1 ] [succs: 5 ]
i0 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i0 < 7000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i0 = i0 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i0 < 7000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i0 < 7000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"->"Block 6:
[preds: 5 ] [succs: 8 ]
$r8 = <compiler.arraycopy.TestEliminateArrayCopy: java.lang.Object[] m1_array>;
$r7 = new java.lang.Object;
specialinvoke $r7.<java.lang.Object: void <init>()>();
$r8[0] = $r7;
i1 = 0;
goto [?= (branch)];
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i0 < 7000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"->"Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i0 = i0 + 1;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
$r8 = <compiler.arraycopy.TestEliminateArrayCopy: java.lang.Object[] m1_array>;
$r7 = new java.lang.Object;
specialinvoke $r7.<java.lang.Object: void <init>()>();
$r8[0] = $r7;
i1 = 0;
goto [?= (branch)];
"->"Block 8:
[preds: 6 7 ] [succs: 9 7 ]
if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
";
    "Block 7:
[preds: 8 ] [succs: 8 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i1 = i1 + 1;
"->"Block 8:
[preds: 6 7 ] [succs: 9 7 ]
if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
";
    "Block 8:
[preds: 6 7 ] [succs: 9 7 ]
if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"->"Block 9:
[preds: 8 ] [succs: 10 11 ]
<compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element> = 0;
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
$z2 = <compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element>;
if $z2 == 0 goto return;
";
    "Block 8:
[preds: 6 7 ] [succs: 9 7 ]
if i1 < 20000 goto staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
"->"Block 7:
[preds: 8 ] [succs: 8 ]
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
i1 = i1 + 1;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
<compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element> = 0;
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
$z2 = <compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element>;
if $z2 == 0 goto return;
"->"Block 10:
[preds: 9 ] [succs: ]
$r9 = new java.lang.RuntimeException;
specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"OptimizePtrCompare test failed\");
throw $r9;
";
    "Block 9:
[preds: 8 ] [succs: 10 11 ]
<compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element> = 0;
staticinvoke <compiler.arraycopy.TestEliminateArrayCopy: void m1(int)>(0);
$z2 = <compiler.arraycopy.TestEliminateArrayCopy: boolean m1_array_null_element>;
if $z2 == 0 goto return;
"->"Block 11:
[preds: 9 ] [succs: ]
return;
";
}
