digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
b0 = 2;
r0 = newarray (boolean)[b0];
$i1 = b0 - 1;
r0[$i1] = 1;
r1 = newarray (boolean)[b0];
r1[0] = 1;
r2 = newarray (boolean)[100];
staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r2, 1);
r2[0] = 0;
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
i2 = i2 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
i3 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
i3 = i3 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
"
    "Block 6:
[preds: 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
b0 = 2;
r0 = newarray (boolean)[b0];
$i1 = b0 - 1;
r0[$i1] = 1;
r1 = newarray (boolean)[b0];
r1[0] = 1;
r2 = newarray (boolean)[100];
staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r2, 1);
r2[0] = 0;
i2 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
i2 = i2 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
"->"Block 3:
[preds: 2 ] [succs: 5 ]
i3 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r0, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
staticinvoke <CountedLoopPeelingProfilePredicates: void test_helper(int,boolean[],boolean)>(b0, r1, 0);
i2 = i2 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
i3 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
i3 = i3 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
"->"Block 6:
[preds: 5 ] [succs: ]
return;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < 20000 goto staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
"->"Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r0, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
staticinvoke <CountedLoopPeelingProfilePredicates: void test(int,boolean[],boolean,boolean[],int)>(b0, r1, 0, r2, 1);
i3 = i3 + 1;
";
}
