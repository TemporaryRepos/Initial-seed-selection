digraph "unitGraph" {
    "$r0 = <compiler.floatingpoint.ModNaN: double[][] bad>"
    "r2 = $r0"
    "i0 = lengthof $r0"
    "i1 = 0"
    "goto [?= (branch)]"
    "r3 = r2[i1]"
    "d0 = r3[0]"
    "d1 = r3[1]"
    "d2 = d0 % d1"
    "staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d2)"
    "i1 = i1 + 1"
    "if i1 < i0 goto r3 = r2[i1]"
    "$r1 = <compiler.floatingpoint.ModNaN: double[][] good>"
    "r4 = $r1"
    "i2 = lengthof $r1"
    "i3 = 0"
    "r5 = r4[i3]"
    "d3 = r5[0]"
    "d4 = r5[1]"
    "d5 = d3 % d4"
    "staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d5)"
    "i3 = i3 + 1"
    "if i3 < i2 goto r5 = r4[i3]"
    "return"
    "$r0 = <compiler.floatingpoint.ModNaN: double[][] bad>"->"r2 = $r0";
    "r2 = $r0"->"i0 = lengthof $r0";
    "i0 = lengthof $r0"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < i0 goto r3 = r2[i1]";
    "r3 = r2[i1]"->"d0 = r3[0]";
    "d0 = r3[0]"->"d1 = r3[1]";
    "d1 = r3[1]"->"d2 = d0 % d1";
    "d2 = d0 % d1"->"staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d2)";
    "staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d2)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < i0 goto r3 = r2[i1]";
    "if i1 < i0 goto r3 = r2[i1]"->"$r1 = <compiler.floatingpoint.ModNaN: double[][] good>";
    "if i1 < i0 goto r3 = r2[i1]"->"r3 = r2[i1]";
    "$r1 = <compiler.floatingpoint.ModNaN: double[][] good>"->"r4 = $r1";
    "r4 = $r1"->"i2 = lengthof $r1";
    "i2 = lengthof $r1"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < i2 goto r5 = r4[i3]";
    "r5 = r4[i3]"->"d3 = r5[0]";
    "d3 = r5[0]"->"d4 = r5[1]";
    "d4 = r5[1]"->"d5 = d3 % d4";
    "d5 = d3 % d4"->"staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d5)";
    "staticinvoke <compiler.floatingpoint.ModNaN: void check(double)>(d5)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < i2 goto r5 = r4[i3]";
    "if i3 < i2 goto r5 = r4[i3]"->"return";
    "if i3 < i2 goto r5 = r4[i3]"->"r5 = r4[i3]";
}
