digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "r0 = newarray (int)[10]"
    "i4 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)"
    "i4 = i4 + 1"
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)"
    "i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"
    "staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1)"
    "$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"
    "$i1 = $i0 - i5"
    "if $i1 == 1 goto return"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Bad increment: \")"
    "$i2 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"
    "$i3 = $i2 - i5"
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "$r7 = new java.lang.RuntimeException"
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")"
    "throw $r7"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"r0 = newarray (int)[10]";
    "r0 = newarray (int)[10]"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)";
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)"->"i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>";
    "if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)"->"staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10)";
    "i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"->"staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1)";
    "staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1)"->"$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>";
    "$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"->"$i1 = $i0 - i5";
    "$i1 = $i0 - i5"->"if $i1 == 1 goto return";
    "if $i1 == 1 goto return"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "if $i1 == 1 goto return"->"return";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Bad increment: \")";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Bad increment: \")"->"$i2 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>";
    "$i2 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>"->"$i3 = $i2 - i5";
    "$i3 = $i2 - i5"->"$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)";
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"$r7 = new java.lang.RuntimeException";
    "$r7 = new java.lang.RuntimeException"->"specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")";
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\")"->"throw $r7";
}
