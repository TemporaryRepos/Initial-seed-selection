digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
$r0 = <compiler.floatingpoint.ModNaN: double[][] bad>;
r38 = $r0;
i0 = lengthof $r0;
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r39 = r38[i1];
d0 = r39[0];
d1 = r39[1];
d2 = d0 % d1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r5 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d0);
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r10 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d1);
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r15 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d2);
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r18);
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r39 = r38[i1];
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r19 = <compiler.floatingpoint.ModNaN: double[][] good>;
r40 = $r19;
i2 = lengthof $r19;
i3 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
r41 = r40[i3];
d3 = r41[0];
d4 = r41[1];
d5 = d3 % d4;
$r21 = <java.lang.System: java.io.PrintStream out>;
$r20 = new java.lang.StringBuilder;
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d3);
$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r29 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d4);
$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d5);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r34 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d5);
$r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r37);
i3 = i3 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < i2 goto r41 = r40[i3];
"
    "Block 6:
[preds: 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
$r0 = <compiler.floatingpoint.ModNaN: double[][] bad>;
r38 = $r0;
i0 = lengthof $r0;
i1 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r39 = r38[i1];
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r39 = r38[i1];
d0 = r39[0];
d1 = r39[1];
d2 = d0 % d1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r5 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d0);
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r10 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d1);
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r15 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d2);
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r18);
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r39 = r38[i1];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r39 = r38[i1];
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$r19 = <compiler.floatingpoint.ModNaN: double[][] good>;
r40 = $r19;
i2 = lengthof $r19;
i3 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r39 = r38[i1];
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r39 = r38[i1];
d0 = r39[0];
d1 = r39[1];
d2 = d0 % d1;
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r5 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d0);
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r10 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d1);
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r15 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d2);
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r18);
i1 = i1 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r19 = <compiler.floatingpoint.ModNaN: double[][] good>;
r40 = $r19;
i2 = lengthof $r19;
i3 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < i2 goto r41 = r40[i3];
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
r41 = r40[i3];
d3 = r41[0];
d4 = r41[1];
d5 = d3 % d4;
$r21 = <java.lang.System: java.io.PrintStream out>;
$r20 = new java.lang.StringBuilder;
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d3);
$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r29 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d4);
$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d5);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r34 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d5);
$r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r37);
i3 = i3 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < i2 goto r41 = r40[i3];
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < i2 goto r41 = r40[i3];
"->"Block 6:
[preds: 5 ] [succs: ]
return;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 < i2 goto r41 = r40[i3];
"->"Block 4:
[preds: 5 ] [succs: 5 ]
r41 = r40[i3];
d3 = r41[0];
d4 = r41[1];
d5 = d3 % d4;
$r21 = <java.lang.System: java.io.PrintStream out>;
$r20 = new java.lang.StringBuilder;
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r24 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d3);
$r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") mod \");
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r29 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d4);
$r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
$r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\") yields \");
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d5);
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r34 = staticinvoke <compiler.floatingpoint.ModNaN: java.lang.String toHexRep(double)>(d5);
$r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);
$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r37);
i3 = i3 + 1;
";
}
