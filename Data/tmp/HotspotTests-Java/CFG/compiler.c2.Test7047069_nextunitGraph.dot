digraph "unitGraph" {
    "r0 := @this: compiler.c2.Test7047069"
    "$i1 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$i0 = r0.<compiler.c2.Test7047069: int holdEnd>"
    "if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>"
    "return 0"
    "$r1 = r0.<compiler.c2.Test7047069: int[] levels>"
    "$i2 = r0.<compiler.c2.Test7047069: int levelIndex>"
    "i20 = $r1[$i2]"
    "goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>]"
    "$r2 = r0.<compiler.c2.Test7047069: float[] hold>"
    "$i4 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4)"
    "$f0 = r0.<compiler.c2.Test7047069: float squareflat>"
    "$d1 = (double) $f0"
    "$b5 = $d0 cmpg $d1"
    "if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)"
    "goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>]"
    "virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)"
    "$r5 = r0.<compiler.c2.Test7047069: float[] hold>"
    "$i9 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$r4 = r0.<compiler.c2.Test7047069: float[] hold>"
    "$i6 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$i8 = $i6 - 4"
    "$r3 = r0.<compiler.c2.Test7047069: float[] hold>"
    "$i7 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7)"
    "$i10 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$i11 = $i10 - 4"
    "r0.<compiler.c2.Test7047069: int holdIndex> = $i11"
    "i20 = i20 + 1"
    "$r6 = r0.<compiler.c2.Test7047069: int[] levels>"
    "$i12 = r0.<compiler.c2.Test7047069: int levelIndex>"
    "$r6[$i12] = i20"
    "$i13 = r0.<compiler.c2.Test7047069: int levelIndex>"
    "$i14 = $i13 + 1"
    "r0.<compiler.c2.Test7047069: int levelIndex> = $i14"
    "$r7 = r0.<compiler.c2.Test7047069: int[] levels>"
    "$i15 = r0.<compiler.c2.Test7047069: int levelIndex>"
    "$r7[$i15] = i20"
    "$i3 = r0.<compiler.c2.Test7047069: int limit>"
    "if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>"
    "$i16 = r0.<compiler.c2.Test7047069: int holdIndex>"
    "$i17 = $i16 + 4"
    "r0.<compiler.c2.Test7047069: int holdIndex> = $i17"
    "$i18 = r0.<compiler.c2.Test7047069: int levelIndex>"
    "$i19 = $i18 - 1"
    "r0.<compiler.c2.Test7047069: int levelIndex> = $i19"
    "return 1"
    "r0 := @this: compiler.c2.Test7047069"->"$i1 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i1 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$i0 = r0.<compiler.c2.Test7047069: int holdEnd>";
    "$i0 = r0.<compiler.c2.Test7047069: int holdEnd>"->"if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>";
    "if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>"->"return 0";
    "if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>"->"$r1 = r0.<compiler.c2.Test7047069: int[] levels>";
    "$r1 = r0.<compiler.c2.Test7047069: int[] levels>"->"$i2 = r0.<compiler.c2.Test7047069: int levelIndex>";
    "$i2 = r0.<compiler.c2.Test7047069: int levelIndex>"->"i20 = $r1[$i2]";
    "i20 = $r1[$i2]"->"goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>]";
    "goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>]"->"$i3 = r0.<compiler.c2.Test7047069: int limit>";
    "$r2 = r0.<compiler.c2.Test7047069: float[] hold>"->"$i4 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i4 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4)";
    "$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4)"->"$f0 = r0.<compiler.c2.Test7047069: float squareflat>";
    "$f0 = r0.<compiler.c2.Test7047069: float squareflat>"->"$d1 = (double) $f0";
    "$d1 = (double) $f0"->"$b5 = $d0 cmpg $d1";
    "$b5 = $d0 cmpg $d1"->"if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)";
    "if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)"->"goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>]";
    "if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)"->"virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)";
    "goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>]"->"$i16 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4)"->"$r5 = r0.<compiler.c2.Test7047069: float[] hold>";
    "$r5 = r0.<compiler.c2.Test7047069: float[] hold>"->"$i9 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i9 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$r4 = r0.<compiler.c2.Test7047069: float[] hold>";
    "$r4 = r0.<compiler.c2.Test7047069: float[] hold>"->"$i6 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i6 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$i8 = $i6 - 4";
    "$i8 = $i6 - 4"->"$r3 = r0.<compiler.c2.Test7047069: float[] hold>";
    "$r3 = r0.<compiler.c2.Test7047069: float[] hold>"->"$i7 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i7 = r0.<compiler.c2.Test7047069: int holdIndex>"->"staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7)";
    "staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7)"->"$i10 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "$i10 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$i11 = $i10 - 4";
    "$i11 = $i10 - 4"->"r0.<compiler.c2.Test7047069: int holdIndex> = $i11";
    "r0.<compiler.c2.Test7047069: int holdIndex> = $i11"->"i20 = i20 + 1";
    "i20 = i20 + 1"->"$r6 = r0.<compiler.c2.Test7047069: int[] levels>";
    "$r6 = r0.<compiler.c2.Test7047069: int[] levels>"->"$i12 = r0.<compiler.c2.Test7047069: int levelIndex>";
    "$i12 = r0.<compiler.c2.Test7047069: int levelIndex>"->"$r6[$i12] = i20";
    "$r6[$i12] = i20"->"$i13 = r0.<compiler.c2.Test7047069: int levelIndex>";
    "$i13 = r0.<compiler.c2.Test7047069: int levelIndex>"->"$i14 = $i13 + 1";
    "$i14 = $i13 + 1"->"r0.<compiler.c2.Test7047069: int levelIndex> = $i14";
    "r0.<compiler.c2.Test7047069: int levelIndex> = $i14"->"$r7 = r0.<compiler.c2.Test7047069: int[] levels>";
    "$r7 = r0.<compiler.c2.Test7047069: int[] levels>"->"$i15 = r0.<compiler.c2.Test7047069: int levelIndex>";
    "$i15 = r0.<compiler.c2.Test7047069: int levelIndex>"->"$r7[$i15] = i20";
    "$r7[$i15] = i20"->"$i3 = r0.<compiler.c2.Test7047069: int limit>";
    "$i3 = r0.<compiler.c2.Test7047069: int limit>"->"if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>";
    "if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>"->"$i16 = r0.<compiler.c2.Test7047069: int holdIndex>";
    "if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>"->"$r2 = r0.<compiler.c2.Test7047069: float[] hold>";
    "$i16 = r0.<compiler.c2.Test7047069: int holdIndex>"->"$i17 = $i16 + 4";
    "$i17 = $i16 + 4"->"r0.<compiler.c2.Test7047069: int holdIndex> = $i17";
    "r0.<compiler.c2.Test7047069: int holdIndex> = $i17"->"$i18 = r0.<compiler.c2.Test7047069: int levelIndex>";
    "$i18 = r0.<compiler.c2.Test7047069: int levelIndex>"->"$i19 = $i18 - 1";
    "$i19 = $i18 - 1"->"r0.<compiler.c2.Test7047069: int levelIndex> = $i19";
    "r0.<compiler.c2.Test7047069: int levelIndex> = $i19"->"return 1";
}
