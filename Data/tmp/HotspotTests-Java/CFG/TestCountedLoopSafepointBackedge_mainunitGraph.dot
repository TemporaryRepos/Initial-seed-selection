digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "r0 = newarray (int)[100]"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)"
    "i0 = i0 + 1"
    "if i0 < 20000 goto staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"r0 = newarray (int)[100]";
    "r0 = newarray (int)[100]"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)";
    "staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 20000 goto staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)";
    "if i0 < 20000 goto staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)"->"return";
    "if i0 < 20000 goto staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)"->"staticinvoke <TestCountedLoopSafepointBackedge: void test(int[],int)>(r0, 1)";
}
