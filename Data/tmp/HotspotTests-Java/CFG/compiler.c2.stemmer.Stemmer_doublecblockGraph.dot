digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.stemmer.Stemmer;
i0 := @parameter0: int;
if i0 >= 1 goto $r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
"
    "Block 1:
[preds: 0 ] [succs: ]
return 0;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$c3 = $r1[i0];
$r2 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$i1 = i0 - 1;
$c2 = $r2[$i1];
if $c3 == $c2 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
"
    "Block 3:
[preds: 2 ] [succs: ]
return 0;
"
    "Block 4:
[preds: 2 ] [succs: ]
$z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
return $z0;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.stemmer.Stemmer;
i0 := @parameter0: int;
if i0 >= 1 goto $r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
"->"Block 1:
[preds: 0 ] [succs: ]
return 0;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.stemmer.Stemmer;
i0 := @parameter0: int;
if i0 >= 1 goto $r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$c3 = $r1[i0];
$r2 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$i1 = i0 - 1;
$c2 = $r2[$i1];
if $c3 == $c2 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$c3 = $r1[i0];
$r2 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$i1 = i0 - 1;
$c2 = $r2[$i1];
if $c3 == $c2 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
"->"Block 3:
[preds: 2 ] [succs: ]
return 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$c3 = $r1[i0];
$r2 = r0.<compiler.c2.stemmer.Stemmer: char[] b>;
$i1 = i0 - 1;
$c2 = $r2[$i1];
if $c3 == $c2 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
"->"Block 4:
[preds: 2 ] [succs: ]
$z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i0);
return $z0;
";
}
