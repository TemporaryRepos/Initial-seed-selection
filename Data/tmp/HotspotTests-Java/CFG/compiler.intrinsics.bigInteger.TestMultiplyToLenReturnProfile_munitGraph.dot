digraph "unitGraph" {
    "r1 := @parameter0: java.math.BigInteger"
    "r2 := @parameter1: java.math.BigInteger"
    "r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L)"
    "i0 = 0"
    "goto [?= (branch)]"
    "$r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)"
    "virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3)"
    "i0 = i0 + 1"
    "if i0 < 100 goto $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)"
    "return r0"
    "r1 := @parameter0: java.math.BigInteger"->"r2 := @parameter1: java.math.BigInteger";
    "r2 := @parameter1: java.math.BigInteger"->"r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L)";
    "r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L)"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 100 goto $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)";
    "$r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)"->"virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3)";
    "virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 100 goto $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)";
    "if i0 < 100 goto $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)"->"return r0";
    "if i0 < 100 goto $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)"->"$r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2)";
}
