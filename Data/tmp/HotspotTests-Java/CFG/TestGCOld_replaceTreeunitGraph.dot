digraph "unitGraph" {
    "r1 := @parameter0: TreeNode"
    "r0 := @parameter1: TreeNode"
    "$i0 = r0.<TreeNode: int val>"
    "$i1 = $i0 % 2"
    "if $i1 != 0 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= z0 = $z1]"
    "$z1 = 0"
    "z0 = $z1"
    "$l2 = <TestGCOld: long actuallyMut>"
    "$l3 = $l2 + 1L"
    "<TestGCOld: long actuallyMut> = $l3"
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>(r1, r0, z0)"
    "return"
    "r1 := @parameter0: TreeNode"->"r0 := @parameter1: TreeNode";
    "r0 := @parameter1: TreeNode"->"$i0 = r0.<TreeNode: int val>";
    "$i0 = r0.<TreeNode: int val>"->"$i1 = $i0 % 2";
    "$i1 = $i0 % 2"->"if $i1 != 0 goto $z1 = 0";
    "if $i1 != 0 goto $z1 = 0"->"$z1 = 1";
    "if $i1 != 0 goto $z1 = 0"->"$z1 = 0";
    "$z1 = 1"->"goto [?= z0 = $z1]";
    "goto [?= z0 = $z1]"->"z0 = $z1";
    "$z1 = 0"->"z0 = $z1";
    "z0 = $z1"->"$l2 = <TestGCOld: long actuallyMut>";
    "$l2 = <TestGCOld: long actuallyMut>"->"$l3 = $l2 + 1L";
    "$l3 = $l2 + 1L"->"<TestGCOld: long actuallyMut> = $l3";
    "<TestGCOld: long actuallyMut> = $l3"->"staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>(r1, r0, z0)";
    "staticinvoke <TestGCOld: void replaceTreeWork(TreeNode,TreeNode,boolean)>(r1, r0, z0)"->"return";
}
