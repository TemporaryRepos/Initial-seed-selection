digraph "unitGraph" {
    "r0 := @this: compiler.intrinsics.string.TestStringEqualsBadLength"
    "r2 := @parameter0: char[]"
    "$i1 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2>"
    "$i0 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1>"
    "i2 = $i1 - $i0"
    "r1 = newarray (char)[i2]"
    "r1[0] = 97"
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r1, r2)"
    "return $z0"
    "r0 := @this: compiler.intrinsics.string.TestStringEqualsBadLength"->"r2 := @parameter0: char[]";
    "r2 := @parameter0: char[]"->"$i1 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2>";
    "$i1 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2>"->"$i0 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1>";
    "$i0 = r0.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1>"->"i2 = $i1 - $i0";
    "i2 = $i1 - $i0"->"r1 = newarray (char)[i2]";
    "r1 = newarray (char)[i2]"->"r1[0] = 97";
    "r1[0] = 97"->"$z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r1, r2)";
    "$z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r1, r2)"->"return $z0";
}
