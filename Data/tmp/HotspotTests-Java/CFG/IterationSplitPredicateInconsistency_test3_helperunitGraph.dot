digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "r0 := @parameter2: double[]"
    "r1 := @parameter3: double[]"
    "i6 := @parameter4: int"
    "i7 = i0"
    "goto [?= (branch)]"
    "$i2 = i1 - i7"
    "$i5 = $i2 - 1"
    "$i3 = i1 - i7"
    "$i4 = $i3 - 1"
    "$d0 = r1[$i4]"
    "r0[$i5] = $d0"
    "if i7 != i6 goto <IterationSplitPredicateInconsistency: int barrier> = 66"
    "return 1"
    "<IterationSplitPredicateInconsistency: int barrier> = 66"
    "i7 = i7 + 1"
    "if i7 < i1 goto $i2 = i1 - i7"
    "return 0"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"r0 := @parameter2: double[]";
    "r0 := @parameter2: double[]"->"r1 := @parameter3: double[]";
    "r1 := @parameter3: double[]"->"i6 := @parameter4: int";
    "i6 := @parameter4: int"->"i7 = i0";
    "i7 = i0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < i1 goto $i2 = i1 - i7";
    "$i2 = i1 - i7"->"$i5 = $i2 - 1";
    "$i5 = $i2 - 1"->"$i3 = i1 - i7";
    "$i3 = i1 - i7"->"$i4 = $i3 - 1";
    "$i4 = $i3 - 1"->"$d0 = r1[$i4]";
    "$d0 = r1[$i4]"->"r0[$i5] = $d0";
    "r0[$i5] = $d0"->"if i7 != i6 goto <IterationSplitPredicateInconsistency: int barrier> = 66";
    "if i7 != i6 goto <IterationSplitPredicateInconsistency: int barrier> = 66"->"return 1";
    "if i7 != i6 goto <IterationSplitPredicateInconsistency: int barrier> = 66"->"<IterationSplitPredicateInconsistency: int barrier> = 66";
    "<IterationSplitPredicateInconsistency: int barrier> = 66"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < i1 goto $i2 = i1 - i7";
    "if i7 < i1 goto $i2 = i1 - i7"->"return 0";
    "if i7 < i1 goto $i2 = i1 - i7"->"$i2 = i1 - i7";
}
