digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 11 ]
r0 := @parameter0: double[];
r1 := @parameter1: double[];
z1 := @parameter2: boolean;
d4 = 0.0;
goto [?= $z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>()];
"
    "Block 1:
[preds: 11 ] [succs: 3 ]
i1 = 0;
goto [?= $i0 = lengthof r0];
"
    "Block 2:
[preds: 3 ] [succs: 3 ]
$d0 = r0[i1];
$d1 = $d0 + d4;
r1[i1] = $d1;
i1 = i1 + 1;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i0 = lengthof r0;
if i1 < $i0 goto $d0 = r0[i1];
"
    "Block 4:
[preds: 3 ] [succs: 9 ]
i2 = 0;
goto [?= $i3 = lengthof r0];
"
    "Block 5:
[preds: 9 ] [succs: 6 7 ]
if z1 == 0 goto d5 = 0.0;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
d5 = d4;
goto [?= $d2 = r0[i2]];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
d5 = 0.0;
"
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
$d2 = r0[i2];
$d3 = $d2 + d5;
r1[i2] = $d3;
i2 = i2 + 1;
"
    "Block 9:
[preds: 4 8 ] [succs: 10 5 ]
$i3 = lengthof r0;
if i2 < $i3 goto (branch);
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
d4 = d4 + 1.0;
"
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
$z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>();
if $z0 != 0 goto i1 = 0;
"
    "Block 12:
[preds: 11 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 11 ]
r0 := @parameter0: double[];
r1 := @parameter1: double[];
z1 := @parameter2: boolean;
d4 = 0.0;
goto [?= $z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>()];
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
$z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>();
if $z0 != 0 goto i1 = 0;
";
    "Block 1:
[preds: 11 ] [succs: 3 ]
i1 = 0;
goto [?= $i0 = lengthof r0];
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i0 = lengthof r0;
if i1 < $i0 goto $d0 = r0[i1];
";
    "Block 2:
[preds: 3 ] [succs: 3 ]
$d0 = r0[i1];
$d1 = $d0 + d4;
r1[i1] = $d1;
i1 = i1 + 1;
"->"Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i0 = lengthof r0;
if i1 < $i0 goto $d0 = r0[i1];
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i0 = lengthof r0;
if i1 < $i0 goto $d0 = r0[i1];
"->"Block 4:
[preds: 3 ] [succs: 9 ]
i2 = 0;
goto [?= $i3 = lengthof r0];
";
    "Block 3:
[preds: 1 2 ] [succs: 4 2 ]
$i0 = lengthof r0;
if i1 < $i0 goto $d0 = r0[i1];
"->"Block 2:
[preds: 3 ] [succs: 3 ]
$d0 = r0[i1];
$d1 = $d0 + d4;
r1[i1] = $d1;
i1 = i1 + 1;
";
    "Block 4:
[preds: 3 ] [succs: 9 ]
i2 = 0;
goto [?= $i3 = lengthof r0];
"->"Block 9:
[preds: 4 8 ] [succs: 10 5 ]
$i3 = lengthof r0;
if i2 < $i3 goto (branch);
";
    "Block 5:
[preds: 9 ] [succs: 6 7 ]
if z1 == 0 goto d5 = 0.0;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
d5 = d4;
goto [?= $d2 = r0[i2]];
";
    "Block 5:
[preds: 9 ] [succs: 6 7 ]
if z1 == 0 goto d5 = 0.0;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
d5 = 0.0;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
d5 = d4;
goto [?= $d2 = r0[i2]];
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
$d2 = r0[i2];
$d3 = $d2 + d5;
r1[i2] = $d3;
i2 = i2 + 1;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
d5 = 0.0;
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
$d2 = r0[i2];
$d3 = $d2 + d5;
r1[i2] = $d3;
i2 = i2 + 1;
";
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
$d2 = r0[i2];
$d3 = $d2 + d5;
r1[i2] = $d3;
i2 = i2 + 1;
"->"Block 9:
[preds: 4 8 ] [succs: 10 5 ]
$i3 = lengthof r0;
if i2 < $i3 goto (branch);
";
    "Block 9:
[preds: 4 8 ] [succs: 10 5 ]
$i3 = lengthof r0;
if i2 < $i3 goto (branch);
"->"Block 10:
[preds: 9 ] [succs: 11 ]
d4 = d4 + 1.0;
";
    "Block 9:
[preds: 4 8 ] [succs: 10 5 ]
$i3 = lengthof r0;
if i2 < $i3 goto (branch);
"->"Block 5:
[preds: 9 ] [succs: 6 7 ]
if z1 == 0 goto d5 = 0.0;
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
d4 = d4 + 1.0;
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
$z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>();
if $z0 != 0 goto i1 = 0;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
$z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>();
if $z0 != 0 goto i1 = 0;
"->"Block 12:
[preds: 11 ] [succs: ]
return;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
$z0 = staticinvoke <compiler.regalloc.TestVectorRegAlloc: boolean test_helper()>();
if $z0 != 0 goto i1 = 0;
"->"Block 1:
[preds: 11 ] [succs: 3 ]
i1 = 0;
goto [?= $i0 = lengthof r0];
";
}
