digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i1 := @parameter2: int"
    "i3 := @parameter3: int"
    "i5 = 0"
    "goto [?= $i0 = i5 * 2]"
    "$i2 = i5 * 2"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i2, -123, i1)"
    "$i4 = i5 * 2"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i4, -103, i3)"
    "i5 = i5 + 1"
    "$i0 = i5 * 2"
    "if $i0 < 97 goto $i2 = i5 * 2"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i3 := @parameter3: int";
    "i3 := @parameter3: int"->"i5 = 0";
    "i5 = 0"->"goto [?= $i0 = i5 * 2]";
    "goto [?= $i0 = i5 * 2]"->"$i0 = i5 * 2";
    "$i2 = i5 * 2"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i2, -123, i1)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i2, -123, i1)"->"$i4 = i5 * 2";
    "$i4 = i5 * 2"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i4, -103, i3)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i4, -103, i3)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"$i0 = i5 * 2";
    "$i0 = i5 * 2"->"if $i0 < 97 goto $i2 = i5 * 2";
    "if $i0 < 97 goto $i2 = i5 * 2"->"return";
    "if $i0 < 97 goto $i2 = i5 * 2"->"$i2 = i5 * 2";
}
