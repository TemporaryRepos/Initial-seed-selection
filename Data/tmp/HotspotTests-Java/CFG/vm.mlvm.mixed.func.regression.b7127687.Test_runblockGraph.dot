digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r18 := @this: vm.mlvm.mixed.func.regression.b7127687.Test;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4);
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $r2 = new java.lang.StringBuilder;
"
    "Block 3:
[preds: 2 ] [succs: 7 ]
r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 4:
[preds: 7 ] [succs: 6 ]
$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
r19 = (java.lang.Class) $r7;
r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 5:
[preds: 6 ] [succs: 6 ]
$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.Class) $r9;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16);
staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10);
"
    "Block 6:
[preds: 4 5 ] [succs: 7 5 ]
$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
"
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
"
    "Block 8:
[preds: 7 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 2 ]
r18 := @this: vm.mlvm.mixed.func.regression.b7127687.Test;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
i0 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $r2 = new java.lang.StringBuilder;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4);
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $r2 = new java.lang.StringBuilder;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $r2 = new java.lang.StringBuilder;
"->"Block 3:
[preds: 2 ] [succs: 7 ]
r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 1000 goto $r2 = new java.lang.StringBuilder;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Class\");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
$r5 = staticinvoke <vm.mlvm.mixed.func.regression.b7127687.Test: java.lang.Class generateClass(java.lang.String)>($r4);
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);
i0 = i0 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 7 ]
r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()];
"->"Block 7:
[preds: 3 6 ] [succs: 8 4 ]
$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
";
    "Block 4:
[preds: 7 ] [succs: 6 ]
$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
r19 = (java.lang.Class) $r7;
r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()];
"->"Block 6:
[preds: 4 5 ] [succs: 7 5 ]
$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
";
    "Block 5:
[preds: 6 ] [succs: 6 ]
$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.Class) $r9;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16);
staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10);
"->"Block 6:
[preds: 4 5 ] [succs: 7 5 ]
$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
";
    "Block 6:
[preds: 4 5 ] [succs: 7 5 ]
$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
"->"Block 7:
[preds: 3 6 ] [succs: 8 4 ]
$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
";
    "Block 6:
[preds: 4 5 ] [succs: 7 5 ]
$z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
if $z2 != 0 goto $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
"->"Block 5:
[preds: 6 ] [succs: 6 ]
$r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
r10 = (java.lang.Class) $r9;
$r11 = new java.lang.StringBuilder;
specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Perform call MethodType.methodType(\");
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <vm.mlvm.share.Env: void traceNormal(java.lang.String)>($r16);
staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>(r19, r10);
";
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
"->"Block 8:
[preds: 7 ] [succs: ]
return 1;
";
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
$z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
if $z1 != 0 goto $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
"->"Block 4:
[preds: 7 ] [succs: 6 ]
$r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
r19 = (java.lang.Class) $r7;
r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()];
";
}
