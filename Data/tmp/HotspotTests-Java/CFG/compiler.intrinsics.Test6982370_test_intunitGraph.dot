digraph "unitGraph" {
    "r0 = newarray (int)[16]"
    "i8 = 0"
    "goto [?= (branch)]"
    "i0 = i8 & 7"
    "$i1 = i8 >> 4"
    "$i2 = $i1 & 7"
    "i3 = i0 + $i2"
    "i9 = i8"
    "$i4 = i8 & 1"
    "if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)"
    "i9 = neg i9"
    "staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)"
    "z0 = 0"
    "i10 = i0"
    "$i5 = r0[i10]"
    "if $i5 == i9 goto i10 = i10 + 1"
    "$r2 = <java.lang.System: java.io.PrintStream err>"
    "$r1 = new java.lang.StringBuilder"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\")"
    "$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"
    "$i6 = r0[i10]"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \")"
    "$i7 = lengthof r0"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10)"
    "z0 = 1"
    "i10 = i10 + 1"
    "if i10 < i3 goto $i5 = r0[i10]"
    "if z0 == 0 goto i8 = i8 + 1"
    "$r11 = new java.lang.InternalError"
    "specialinvoke $r11.<java.lang.InternalError: void <init>()>()"
    "throw $r11"
    "i8 = i8 + 1"
    "if i8 < 200000 goto i0 = i8 & 7"
    "return"
    "r0 = newarray (int)[16]"->"i8 = 0";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < 200000 goto i0 = i8 & 7";
    "i0 = i8 & 7"->"$i1 = i8 >> 4";
    "$i1 = i8 >> 4"->"$i2 = $i1 & 7";
    "$i2 = $i1 & 7"->"i3 = i0 + $i2";
    "i3 = i0 + $i2"->"i9 = i8";
    "i9 = i8"->"$i4 = i8 & 1";
    "$i4 = i8 & 1"->"if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)";
    "if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)"->"i9 = neg i9";
    "if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)"->"staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)";
    "i9 = neg i9"->"staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)";
    "staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, i3, i9)"->"z0 = 0";
    "z0 = 0"->"i10 = i0";
    "i10 = i0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < i3 goto $i5 = r0[i10]";
    "$i5 = r0[i10]"->"if $i5 == i9 goto i10 = i10 + 1";
    "if $i5 == i9 goto i10 = i10 + 1"->"$r2 = <java.lang.System: java.io.PrintStream err>";
    "if $i5 == i9 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "$r2 = <java.lang.System: java.io.PrintStream err>"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\")";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\")"->"$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)";
    "$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"->"$i6 = r0[i10]";
    "$i6 = r0[i10]"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \")";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \")"->"$i7 = lengthof r0";
    "$i7 = lengthof r0"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10)";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10)"->"z0 = 1";
    "z0 = 1"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"if i10 < i3 goto $i5 = r0[i10]";
    "if i10 < i3 goto $i5 = r0[i10]"->"if z0 == 0 goto i8 = i8 + 1";
    "if i10 < i3 goto $i5 = r0[i10]"->"$i5 = r0[i10]";
    "if z0 == 0 goto i8 = i8 + 1"->"$r11 = new java.lang.InternalError";
    "if z0 == 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r11 = new java.lang.InternalError"->"specialinvoke $r11.<java.lang.InternalError: void <init>()>()";
    "specialinvoke $r11.<java.lang.InternalError: void <init>()>()"->"throw $r11";
    "i8 = i8 + 1"->"if i8 < 200000 goto i0 = i8 & 7";
    "if i8 < 200000 goto i0 = i8 & 7"->"return";
    "if i8 < 200000 goto i0 = i8 & 7"->"i0 = i8 & 7";
}
