digraph "unitGraph" {
    "i138 := @parameter0: int"
    "b0 = 8"
    "b1 = 32"
    "s2 = 4096"
    "$i3 = s2 * 16"
    "r0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>($i3, 0)"
    "$r1 = newarray (int)[15]"
    "$r1[1] = 1"
    "$r1[2] = 2"
    "$r1[3] = 3"
    "$r1[4] = 4"
    "$r1[5] = 5"
    "$r1[6] = 6"
    "$r1[7] = 7"
    "$r1[8] = 8"
    "$r1[9] = 16"
    "$r1[10] = 32"
    "$r1[11] = 64"
    "$r1[12] = 128"
    "$r1[13] = 256"
    "$r1[14] = 512"
    "r2 = $r1"
    "$r3 = newarray (int)[70]"
    "$r3[1] = 1"
    "$r3[2] = 2"
    "$r3[3] = 3"
    "$r3[4] = 4"
    "$r3[5] = 5"
    "$r3[6] = 6"
    "$r3[7] = 7"
    "$r3[8] = b0"
    "$i4 = b0 + 1"
    "$r3[9] = $i4"
    "$i5 = b0 + 2"
    "$r3[10] = $i5"
    "$i6 = b0 + 3"
    "$r3[11] = $i6"
    "$i7 = b0 + 4"
    "$r3[12] = $i7"
    "$i8 = b0 + 5"
    "$r3[13] = $i8"
    "$i9 = b0 + 6"
    "$r3[14] = $i9"
    "$i10 = b0 + 7"
    "$r3[15] = $i10"
    "$i11 = b0 * 2"
    "$r3[16] = $i11"
    "$i12 = b0 * 2"
    "$i13 = $i12 + 1"
    "$r3[17] = $i13"
    "$i14 = b0 * 2"
    "$i15 = $i14 + 3"
    "$r3[18] = $i15"
    "$i16 = b0 * 2"
    "$i17 = $i16 + 5"
    "$r3[19] = $i17"
    "$i18 = b0 * 2"
    "$i19 = $i18 + 7"
    "$r3[20] = $i19"
    "$r3[21] = b1"
    "$i20 = b1 + 1"
    "$r3[22] = $i20"
    "$i21 = b1 + 3"
    "$r3[23] = $i21"
    "$i22 = b1 + 5"
    "$r3[24] = $i22"
    "$i23 = b1 + 7"
    "$r3[25] = $i23"
    "$i24 = b1 * 2"
    "$r3[26] = $i24"
    "$i25 = b1 * 4"
    "$r3[27] = $i25"
    "$i26 = b1 * 8"
    "$r3[28] = $i26"
    "$i27 = b1 * 16"
    "$r3[29] = $i27"
    "$i28 = b1 * 32"
    "$r3[30] = $i28"
    "$i29 = b1 * 64"
    "$r3[31] = $i29"
    "$r3[32] = s2"
    "$i30 = s2 + 1"
    "$r3[33] = $i30"
    "$i31 = s2 + 3"
    "$r3[34] = $i31"
    "$i32 = s2 + 5"
    "$r3[35] = $i32"
    "$i33 = s2 + 7"
    "$r3[36] = $i33"
    "$i34 = s2 * 2"
    "$r3[37] = $i34"
    "$i35 = s2 * 4"
    "$r3[38] = $i35"
    "$i36 = s2 * 8"
    "$r3[39] = $i36"
    "$i37 = b0 + b1"
    "$r3[40] = $i37"
    "$i38 = b0 + b1"
    "$i39 = $i38 + 1"
    "$r3[41] = $i39"
    "$i40 = b0 + b1"
    "$i41 = $i40 + 3"
    "$r3[42] = $i41"
    "$i42 = b0 + b1"
    "$i43 = $i42 + 5"
    "$r3[43] = $i43"
    "$i44 = b0 + b1"
    "$i45 = $i44 + 7"
    "$r3[44] = $i45"
    "$i46 = b0 + s2"
    "$r3[45] = $i46"
    "$i47 = b0 + s2"
    "$i48 = $i47 + 1"
    "$r3[46] = $i48"
    "$i49 = b0 + s2"
    "$i50 = $i49 + 3"
    "$r3[47] = $i50"
    "$i51 = b0 + s2"
    "$i52 = $i51 + 5"
    "$r3[48] = $i52"
    "$i53 = b0 + s2"
    "$i54 = $i53 + 7"
    "$r3[49] = $i54"
    "$i55 = b1 + s2"
    "$r3[50] = $i55"
    "$i56 = b1 + s2"
    "$i57 = $i56 + 1"
    "$r3[51] = $i57"
    "$i58 = b1 + s2"
    "$i59 = $i58 + 3"
    "$r3[52] = $i59"
    "$i60 = b1 + s2"
    "$i61 = $i60 + 5"
    "$r3[53] = $i61"
    "$i62 = b1 + s2"
    "$i63 = $i62 + 7"
    "$r3[54] = $i63"
    "$i64 = b0 + b1"
    "$i65 = $i64 + s2"
    "$r3[55] = $i65"
    "$i66 = b0 + b1"
    "$i67 = $i66 + s2"
    "$i68 = $i67 + 1"
    "$r3[56] = $i68"
    "$i69 = b0 + b1"
    "$i70 = $i69 + s2"
    "$i71 = $i70 + 3"
    "$r3[57] = $i71"
    "$i72 = b0 + b1"
    "$i73 = $i72 + s2"
    "$i74 = $i73 + 5"
    "$r3[58] = $i74"
    "$i75 = b0 + b1"
    "$i76 = $i75 + s2"
    "$i77 = $i76 + 7"
    "$r3[59] = $i77"
    "$i78 = b0 + b1"
    "$i79 = $i78 + s2"
    "$i80 = $i79 * 2"
    "$r3[60] = $i80"
    "$i81 = b0 + b1"
    "$i82 = $i81 + s2"
    "$i83 = $i82 * 2"
    "$i84 = $i83 + 1"
    "$r3[61] = $i84"
    "$i85 = b0 + b1"
    "$i86 = $i85 + s2"
    "$i87 = $i86 * 2"
    "$i88 = $i87 + 3"
    "$r3[62] = $i88"
    "$i89 = b0 + b1"
    "$i90 = $i89 + s2"
    "$i91 = $i90 * 2"
    "$i92 = $i91 + 5"
    "$r3[63] = $i92"
    "$i93 = b0 + b1"
    "$i94 = $i93 + s2"
    "$i95 = $i94 * 2"
    "$i96 = $i95 + 7"
    "$r3[64] = $i96"
    "$i97 = b0 + b1"
    "$i98 = $i97 + s2"
    "$i99 = $i98 * 3"
    "$r3[65] = $i99"
    "$i100 = b0 + b1"
    "$i101 = $i100 + s2"
    "$i102 = $i101 * 3"
    "$i103 = $i102 - 1"
    "$r3[66] = $i103"
    "$i104 = b0 + b1"
    "$i105 = $i104 + s2"
    "$i106 = $i105 * 3"
    "$i107 = $i106 - 3"
    "$r3[67] = $i107"
    "$i108 = b0 + b1"
    "$i109 = $i108 + s2"
    "$i110 = $i109 * 3"
    "$i111 = $i110 - 5"
    "$r3[68] = $i111"
    "$i112 = b0 + b1"
    "$i113 = $i112 + s2"
    "$i114 = $i113 * 3"
    "$i115 = $i114 - 7"
    "$r3[69] = $i115"
    "r4 = $r3"
    "$i117 = lengthof r2"
    "$i116 = lengthof r4"
    "$i118 = $i117 * $i116"
    "r5 = newarray (java.util.zip.Adler32)[$i118]"
    "$i120 = lengthof r2"
    "$i119 = lengthof r4"
    "$i121 = $i120 * $i119"
    "r6 = newarray (java.util.zip.Adler32)[$i121]"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "$r7 = newarray (java.lang.Object)[1]"
    "$i123 = lengthof r2"
    "$i122 = lengthof r4"
    "$i124 = $i123 * $i122"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i124)"
    "$r7[0] = $r9"
    "virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"testing %d cases ...\n\", $r7)"
    "i158 = 0"
    "goto [?= $i125 = lengthof r2]"
    "i159 = 0"
    "goto [?= $i126 = lengthof r4]"
    "$i127 = lengthof r4"
    "$i128 = i158 * $i127"
    "$i129 = $i128 + i159"
    "$r11 = new java.util.zip.Adler32"
    "specialinvoke $r11.<java.util.zip.Adler32: void <init>()>()"
    "r5[$i129] = $r11"
    "$i130 = lengthof r4"
    "$i131 = i158 * $i130"
    "$i132 = $i131 + i159"
    "$r12 = new java.util.zip.Adler32"
    "specialinvoke $r12.<java.util.zip.Adler32: void <init>()>()"
    "r6[$i132] = $r12"
    "$i133 = lengthof r4"
    "$i134 = i158 * $i133"
    "$i135 = $i134 + i159"
    "$r13 = r5[$i135]"
    "$i137 = r2[i158]"
    "$i136 = r4[i159]"
    "virtualinvoke $r13.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i137, $i136)"
    "i159 = i159 + 1"
    "$i126 = lengthof r4"
    "if i159 < $i126 goto $i127 = lengthof r4"
    "i158 = i158 + 1"
    "$i125 = lengthof r2"
    "if i158 < $i125 goto i159 = 0"
    "i160 = 0"
    "goto [?= (branch)]"
    "i161 = 0"
    "goto [?= $i139 = lengthof r2]"
    "i162 = 0"
    "goto [?= $i140 = lengthof r4]"
    "$i141 = lengthof r4"
    "$i142 = i161 * $i141"
    "$i143 = $i142 + i162"
    "$r14 = r6[$i143]"
    "virtualinvoke $r14.<java.util.zip.Adler32: void reset()>()"
    "$i144 = lengthof r4"
    "$i145 = i161 * $i144"
    "$i146 = $i145 + i162"
    "$r15 = r6[$i146]"
    "$i148 = r2[i161]"
    "$i147 = r4[i162]"
    "virtualinvoke $r15.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i148, $i147)"
    "i162 = i162 + 1"
    "$i140 = lengthof r4"
    "if i162 < $i140 goto $i141 = lengthof r4"
    "i161 = i161 + 1"
    "$i139 = lengthof r2"
    "if i161 < $i139 goto i162 = 0"
    "i160 = i160 + 1"
    "if i160 < i138 goto i161 = 0"
    "i163 = 0"
    "goto [?= $i149 = lengthof r2]"
    "i164 = 0"
    "goto [?= $i165 = lengthof r4]"
    "$i150 = lengthof r4"
    "$i151 = i163 * $i150"
    "$i152 = $i151 + i164"
    "$r17 = r5[$i152]"
    "$i153 = lengthof r4"
    "$i154 = i163 * $i153"
    "$i155 = $i154 + i164"
    "$r16 = r6[$i155]"
    "$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>($r17, $r16)"
    "if $z0 != 0 goto i164 = i164 + 1"
    "$r19 = <java.lang.System: java.io.PrintStream out>"
    "$r18 = newarray (java.lang.Object)[2]"
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i163)"
    "$r18[0] = $r20"
    "$i156 = r2[i163]"
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i156)"
    "$r18[1] = $r21"
    "virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"offsets[%d] = %d\", $r18)"
    "$r24 = <java.lang.System: java.io.PrintStream out>"
    "$r23 = newarray (java.lang.Object)[2]"
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i164)"
    "$r23[0] = $r25"
    "$i157 = r4[i164]"
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i157)"
    "$r23[1] = $r26"
    "virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"\tsizes[%d] = %d\n\", $r23)"
    "i164 = i164 + 1"
    "$i165 = lengthof r4"
    "if i164 < $i165 goto $i150 = lengthof r4"
    "i163 = i163 + 1"
    "$i149 = lengthof r2"
    "if i163 < $i149 goto i164 = 0"
    "return"
    "i138 := @parameter0: int"->"b0 = 8";
    "b0 = 8"->"b1 = 32";
    "b1 = 32"->"s2 = 4096";
    "s2 = 4096"->"$i3 = s2 * 16";
    "$i3 = s2 * 16"->"r0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>($i3, 0)";
    "r0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>($i3, 0)"->"$r1 = newarray (int)[15]";
    "$r1 = newarray (int)[15]"->"$r1[1] = 1";
    "$r1[1] = 1"->"$r1[2] = 2";
    "$r1[2] = 2"->"$r1[3] = 3";
    "$r1[3] = 3"->"$r1[4] = 4";
    "$r1[4] = 4"->"$r1[5] = 5";
    "$r1[5] = 5"->"$r1[6] = 6";
    "$r1[6] = 6"->"$r1[7] = 7";
    "$r1[7] = 7"->"$r1[8] = 8";
    "$r1[8] = 8"->"$r1[9] = 16";
    "$r1[9] = 16"->"$r1[10] = 32";
    "$r1[10] = 32"->"$r1[11] = 64";
    "$r1[11] = 64"->"$r1[12] = 128";
    "$r1[12] = 128"->"$r1[13] = 256";
    "$r1[13] = 256"->"$r1[14] = 512";
    "$r1[14] = 512"->"r2 = $r1";
    "r2 = $r1"->"$r3 = newarray (int)[70]";
    "$r3 = newarray (int)[70]"->"$r3[1] = 1";
    "$r3[1] = 1"->"$r3[2] = 2";
    "$r3[2] = 2"->"$r3[3] = 3";
    "$r3[3] = 3"->"$r3[4] = 4";
    "$r3[4] = 4"->"$r3[5] = 5";
    "$r3[5] = 5"->"$r3[6] = 6";
    "$r3[6] = 6"->"$r3[7] = 7";
    "$r3[7] = 7"->"$r3[8] = b0";
    "$r3[8] = b0"->"$i4 = b0 + 1";
    "$i4 = b0 + 1"->"$r3[9] = $i4";
    "$r3[9] = $i4"->"$i5 = b0 + 2";
    "$i5 = b0 + 2"->"$r3[10] = $i5";
    "$r3[10] = $i5"->"$i6 = b0 + 3";
    "$i6 = b0 + 3"->"$r3[11] = $i6";
    "$r3[11] = $i6"->"$i7 = b0 + 4";
    "$i7 = b0 + 4"->"$r3[12] = $i7";
    "$r3[12] = $i7"->"$i8 = b0 + 5";
    "$i8 = b0 + 5"->"$r3[13] = $i8";
    "$r3[13] = $i8"->"$i9 = b0 + 6";
    "$i9 = b0 + 6"->"$r3[14] = $i9";
    "$r3[14] = $i9"->"$i10 = b0 + 7";
    "$i10 = b0 + 7"->"$r3[15] = $i10";
    "$r3[15] = $i10"->"$i11 = b0 * 2";
    "$i11 = b0 * 2"->"$r3[16] = $i11";
    "$r3[16] = $i11"->"$i12 = b0 * 2";
    "$i12 = b0 * 2"->"$i13 = $i12 + 1";
    "$i13 = $i12 + 1"->"$r3[17] = $i13";
    "$r3[17] = $i13"->"$i14 = b0 * 2";
    "$i14 = b0 * 2"->"$i15 = $i14 + 3";
    "$i15 = $i14 + 3"->"$r3[18] = $i15";
    "$r3[18] = $i15"->"$i16 = b0 * 2";
    "$i16 = b0 * 2"->"$i17 = $i16 + 5";
    "$i17 = $i16 + 5"->"$r3[19] = $i17";
    "$r3[19] = $i17"->"$i18 = b0 * 2";
    "$i18 = b0 * 2"->"$i19 = $i18 + 7";
    "$i19 = $i18 + 7"->"$r3[20] = $i19";
    "$r3[20] = $i19"->"$r3[21] = b1";
    "$r3[21] = b1"->"$i20 = b1 + 1";
    "$i20 = b1 + 1"->"$r3[22] = $i20";
    "$r3[22] = $i20"->"$i21 = b1 + 3";
    "$i21 = b1 + 3"->"$r3[23] = $i21";
    "$r3[23] = $i21"->"$i22 = b1 + 5";
    "$i22 = b1 + 5"->"$r3[24] = $i22";
    "$r3[24] = $i22"->"$i23 = b1 + 7";
    "$i23 = b1 + 7"->"$r3[25] = $i23";
    "$r3[25] = $i23"->"$i24 = b1 * 2";
    "$i24 = b1 * 2"->"$r3[26] = $i24";
    "$r3[26] = $i24"->"$i25 = b1 * 4";
    "$i25 = b1 * 4"->"$r3[27] = $i25";
    "$r3[27] = $i25"->"$i26 = b1 * 8";
    "$i26 = b1 * 8"->"$r3[28] = $i26";
    "$r3[28] = $i26"->"$i27 = b1 * 16";
    "$i27 = b1 * 16"->"$r3[29] = $i27";
    "$r3[29] = $i27"->"$i28 = b1 * 32";
    "$i28 = b1 * 32"->"$r3[30] = $i28";
    "$r3[30] = $i28"->"$i29 = b1 * 64";
    "$i29 = b1 * 64"->"$r3[31] = $i29";
    "$r3[31] = $i29"->"$r3[32] = s2";
    "$r3[32] = s2"->"$i30 = s2 + 1";
    "$i30 = s2 + 1"->"$r3[33] = $i30";
    "$r3[33] = $i30"->"$i31 = s2 + 3";
    "$i31 = s2 + 3"->"$r3[34] = $i31";
    "$r3[34] = $i31"->"$i32 = s2 + 5";
    "$i32 = s2 + 5"->"$r3[35] = $i32";
    "$r3[35] = $i32"->"$i33 = s2 + 7";
    "$i33 = s2 + 7"->"$r3[36] = $i33";
    "$r3[36] = $i33"->"$i34 = s2 * 2";
    "$i34 = s2 * 2"->"$r3[37] = $i34";
    "$r3[37] = $i34"->"$i35 = s2 * 4";
    "$i35 = s2 * 4"->"$r3[38] = $i35";
    "$r3[38] = $i35"->"$i36 = s2 * 8";
    "$i36 = s2 * 8"->"$r3[39] = $i36";
    "$r3[39] = $i36"->"$i37 = b0 + b1";
    "$i37 = b0 + b1"->"$r3[40] = $i37";
    "$r3[40] = $i37"->"$i38 = b0 + b1";
    "$i38 = b0 + b1"->"$i39 = $i38 + 1";
    "$i39 = $i38 + 1"->"$r3[41] = $i39";
    "$r3[41] = $i39"->"$i40 = b0 + b1";
    "$i40 = b0 + b1"->"$i41 = $i40 + 3";
    "$i41 = $i40 + 3"->"$r3[42] = $i41";
    "$r3[42] = $i41"->"$i42 = b0 + b1";
    "$i42 = b0 + b1"->"$i43 = $i42 + 5";
    "$i43 = $i42 + 5"->"$r3[43] = $i43";
    "$r3[43] = $i43"->"$i44 = b0 + b1";
    "$i44 = b0 + b1"->"$i45 = $i44 + 7";
    "$i45 = $i44 + 7"->"$r3[44] = $i45";
    "$r3[44] = $i45"->"$i46 = b0 + s2";
    "$i46 = b0 + s2"->"$r3[45] = $i46";
    "$r3[45] = $i46"->"$i47 = b0 + s2";
    "$i47 = b0 + s2"->"$i48 = $i47 + 1";
    "$i48 = $i47 + 1"->"$r3[46] = $i48";
    "$r3[46] = $i48"->"$i49 = b0 + s2";
    "$i49 = b0 + s2"->"$i50 = $i49 + 3";
    "$i50 = $i49 + 3"->"$r3[47] = $i50";
    "$r3[47] = $i50"->"$i51 = b0 + s2";
    "$i51 = b0 + s2"->"$i52 = $i51 + 5";
    "$i52 = $i51 + 5"->"$r3[48] = $i52";
    "$r3[48] = $i52"->"$i53 = b0 + s2";
    "$i53 = b0 + s2"->"$i54 = $i53 + 7";
    "$i54 = $i53 + 7"->"$r3[49] = $i54";
    "$r3[49] = $i54"->"$i55 = b1 + s2";
    "$i55 = b1 + s2"->"$r3[50] = $i55";
    "$r3[50] = $i55"->"$i56 = b1 + s2";
    "$i56 = b1 + s2"->"$i57 = $i56 + 1";
    "$i57 = $i56 + 1"->"$r3[51] = $i57";
    "$r3[51] = $i57"->"$i58 = b1 + s2";
    "$i58 = b1 + s2"->"$i59 = $i58 + 3";
    "$i59 = $i58 + 3"->"$r3[52] = $i59";
    "$r3[52] = $i59"->"$i60 = b1 + s2";
    "$i60 = b1 + s2"->"$i61 = $i60 + 5";
    "$i61 = $i60 + 5"->"$r3[53] = $i61";
    "$r3[53] = $i61"->"$i62 = b1 + s2";
    "$i62 = b1 + s2"->"$i63 = $i62 + 7";
    "$i63 = $i62 + 7"->"$r3[54] = $i63";
    "$r3[54] = $i63"->"$i64 = b0 + b1";
    "$i64 = b0 + b1"->"$i65 = $i64 + s2";
    "$i65 = $i64 + s2"->"$r3[55] = $i65";
    "$r3[55] = $i65"->"$i66 = b0 + b1";
    "$i66 = b0 + b1"->"$i67 = $i66 + s2";
    "$i67 = $i66 + s2"->"$i68 = $i67 + 1";
    "$i68 = $i67 + 1"->"$r3[56] = $i68";
    "$r3[56] = $i68"->"$i69 = b0 + b1";
    "$i69 = b0 + b1"->"$i70 = $i69 + s2";
    "$i70 = $i69 + s2"->"$i71 = $i70 + 3";
    "$i71 = $i70 + 3"->"$r3[57] = $i71";
    "$r3[57] = $i71"->"$i72 = b0 + b1";
    "$i72 = b0 + b1"->"$i73 = $i72 + s2";
    "$i73 = $i72 + s2"->"$i74 = $i73 + 5";
    "$i74 = $i73 + 5"->"$r3[58] = $i74";
    "$r3[58] = $i74"->"$i75 = b0 + b1";
    "$i75 = b0 + b1"->"$i76 = $i75 + s2";
    "$i76 = $i75 + s2"->"$i77 = $i76 + 7";
    "$i77 = $i76 + 7"->"$r3[59] = $i77";
    "$r3[59] = $i77"->"$i78 = b0 + b1";
    "$i78 = b0 + b1"->"$i79 = $i78 + s2";
    "$i79 = $i78 + s2"->"$i80 = $i79 * 2";
    "$i80 = $i79 * 2"->"$r3[60] = $i80";
    "$r3[60] = $i80"->"$i81 = b0 + b1";
    "$i81 = b0 + b1"->"$i82 = $i81 + s2";
    "$i82 = $i81 + s2"->"$i83 = $i82 * 2";
    "$i83 = $i82 * 2"->"$i84 = $i83 + 1";
    "$i84 = $i83 + 1"->"$r3[61] = $i84";
    "$r3[61] = $i84"->"$i85 = b0 + b1";
    "$i85 = b0 + b1"->"$i86 = $i85 + s2";
    "$i86 = $i85 + s2"->"$i87 = $i86 * 2";
    "$i87 = $i86 * 2"->"$i88 = $i87 + 3";
    "$i88 = $i87 + 3"->"$r3[62] = $i88";
    "$r3[62] = $i88"->"$i89 = b0 + b1";
    "$i89 = b0 + b1"->"$i90 = $i89 + s2";
    "$i90 = $i89 + s2"->"$i91 = $i90 * 2";
    "$i91 = $i90 * 2"->"$i92 = $i91 + 5";
    "$i92 = $i91 + 5"->"$r3[63] = $i92";
    "$r3[63] = $i92"->"$i93 = b0 + b1";
    "$i93 = b0 + b1"->"$i94 = $i93 + s2";
    "$i94 = $i93 + s2"->"$i95 = $i94 * 2";
    "$i95 = $i94 * 2"->"$i96 = $i95 + 7";
    "$i96 = $i95 + 7"->"$r3[64] = $i96";
    "$r3[64] = $i96"->"$i97 = b0 + b1";
    "$i97 = b0 + b1"->"$i98 = $i97 + s2";
    "$i98 = $i97 + s2"->"$i99 = $i98 * 3";
    "$i99 = $i98 * 3"->"$r3[65] = $i99";
    "$r3[65] = $i99"->"$i100 = b0 + b1";
    "$i100 = b0 + b1"->"$i101 = $i100 + s2";
    "$i101 = $i100 + s2"->"$i102 = $i101 * 3";
    "$i102 = $i101 * 3"->"$i103 = $i102 - 1";
    "$i103 = $i102 - 1"->"$r3[66] = $i103";
    "$r3[66] = $i103"->"$i104 = b0 + b1";
    "$i104 = b0 + b1"->"$i105 = $i104 + s2";
    "$i105 = $i104 + s2"->"$i106 = $i105 * 3";
    "$i106 = $i105 * 3"->"$i107 = $i106 - 3";
    "$i107 = $i106 - 3"->"$r3[67] = $i107";
    "$r3[67] = $i107"->"$i108 = b0 + b1";
    "$i108 = b0 + b1"->"$i109 = $i108 + s2";
    "$i109 = $i108 + s2"->"$i110 = $i109 * 3";
    "$i110 = $i109 * 3"->"$i111 = $i110 - 5";
    "$i111 = $i110 - 5"->"$r3[68] = $i111";
    "$r3[68] = $i111"->"$i112 = b0 + b1";
    "$i112 = b0 + b1"->"$i113 = $i112 + s2";
    "$i113 = $i112 + s2"->"$i114 = $i113 * 3";
    "$i114 = $i113 * 3"->"$i115 = $i114 - 7";
    "$i115 = $i114 - 7"->"$r3[69] = $i115";
    "$r3[69] = $i115"->"r4 = $r3";
    "r4 = $r3"->"$i117 = lengthof r2";
    "$i117 = lengthof r2"->"$i116 = lengthof r4";
    "$i116 = lengthof r4"->"$i118 = $i117 * $i116";
    "$i118 = $i117 * $i116"->"r5 = newarray (java.util.zip.Adler32)[$i118]";
    "r5 = newarray (java.util.zip.Adler32)[$i118]"->"$i120 = lengthof r2";
    "$i120 = lengthof r2"->"$i119 = lengthof r4";
    "$i119 = lengthof r4"->"$i121 = $i120 * $i119";
    "$i121 = $i120 * $i119"->"r6 = newarray (java.util.zip.Adler32)[$i121]";
    "r6 = newarray (java.util.zip.Adler32)[$i121]"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"$r7 = newarray (java.lang.Object)[1]";
    "$r7 = newarray (java.lang.Object)[1]"->"$i123 = lengthof r2";
    "$i123 = lengthof r2"->"$i122 = lengthof r4";
    "$i122 = lengthof r4"->"$i124 = $i123 * $i122";
    "$i124 = $i123 * $i122"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i124)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i124)"->"$r7[0] = $r9";
    "$r7[0] = $r9"->"virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"testing %d cases ...\n\", $r7)";
    "virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"testing %d cases ...\n\", $r7)"->"i158 = 0";
    "i158 = 0"->"goto [?= $i125 = lengthof r2]";
    "goto [?= $i125 = lengthof r2]"->"$i125 = lengthof r2";
    "i159 = 0"->"goto [?= $i126 = lengthof r4]";
    "goto [?= $i126 = lengthof r4]"->"$i126 = lengthof r4";
    "$i127 = lengthof r4"->"$i128 = i158 * $i127";
    "$i128 = i158 * $i127"->"$i129 = $i128 + i159";
    "$i129 = $i128 + i159"->"$r11 = new java.util.zip.Adler32";
    "$r11 = new java.util.zip.Adler32"->"specialinvoke $r11.<java.util.zip.Adler32: void <init>()>()";
    "specialinvoke $r11.<java.util.zip.Adler32: void <init>()>()"->"r5[$i129] = $r11";
    "r5[$i129] = $r11"->"$i130 = lengthof r4";
    "$i130 = lengthof r4"->"$i131 = i158 * $i130";
    "$i131 = i158 * $i130"->"$i132 = $i131 + i159";
    "$i132 = $i131 + i159"->"$r12 = new java.util.zip.Adler32";
    "$r12 = new java.util.zip.Adler32"->"specialinvoke $r12.<java.util.zip.Adler32: void <init>()>()";
    "specialinvoke $r12.<java.util.zip.Adler32: void <init>()>()"->"r6[$i132] = $r12";
    "r6[$i132] = $r12"->"$i133 = lengthof r4";
    "$i133 = lengthof r4"->"$i134 = i158 * $i133";
    "$i134 = i158 * $i133"->"$i135 = $i134 + i159";
    "$i135 = $i134 + i159"->"$r13 = r5[$i135]";
    "$r13 = r5[$i135]"->"$i137 = r2[i158]";
    "$i137 = r2[i158]"->"$i136 = r4[i159]";
    "$i136 = r4[i159]"->"virtualinvoke $r13.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i137, $i136)";
    "virtualinvoke $r13.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i137, $i136)"->"i159 = i159 + 1";
    "i159 = i159 + 1"->"$i126 = lengthof r4";
    "$i126 = lengthof r4"->"if i159 < $i126 goto $i127 = lengthof r4";
    "if i159 < $i126 goto $i127 = lengthof r4"->"i158 = i158 + 1";
    "if i159 < $i126 goto $i127 = lengthof r4"->"$i127 = lengthof r4";
    "i158 = i158 + 1"->"$i125 = lengthof r2";
    "$i125 = lengthof r2"->"if i158 < $i125 goto i159 = 0";
    "if i158 < $i125 goto i159 = 0"->"i160 = 0";
    "if i158 < $i125 goto i159 = 0"->"i159 = 0";
    "i160 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i160 < i138 goto i161 = 0";
    "i161 = 0"->"goto [?= $i139 = lengthof r2]";
    "goto [?= $i139 = lengthof r2]"->"$i139 = lengthof r2";
    "i162 = 0"->"goto [?= $i140 = lengthof r4]";
    "goto [?= $i140 = lengthof r4]"->"$i140 = lengthof r4";
    "$i141 = lengthof r4"->"$i142 = i161 * $i141";
    "$i142 = i161 * $i141"->"$i143 = $i142 + i162";
    "$i143 = $i142 + i162"->"$r14 = r6[$i143]";
    "$r14 = r6[$i143]"->"virtualinvoke $r14.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke $r14.<java.util.zip.Adler32: void reset()>()"->"$i144 = lengthof r4";
    "$i144 = lengthof r4"->"$i145 = i161 * $i144";
    "$i145 = i161 * $i144"->"$i146 = $i145 + i162";
    "$i146 = $i145 + i162"->"$r15 = r6[$i146]";
    "$r15 = r6[$i146]"->"$i148 = r2[i161]";
    "$i148 = r2[i161]"->"$i147 = r4[i162]";
    "$i147 = r4[i162]"->"virtualinvoke $r15.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i148, $i147)";
    "virtualinvoke $r15.<java.util.zip.Adler32: void update(byte[],int,int)>(r0, $i148, $i147)"->"i162 = i162 + 1";
    "i162 = i162 + 1"->"$i140 = lengthof r4";
    "$i140 = lengthof r4"->"if i162 < $i140 goto $i141 = lengthof r4";
    "if i162 < $i140 goto $i141 = lengthof r4"->"i161 = i161 + 1";
    "if i162 < $i140 goto $i141 = lengthof r4"->"$i141 = lengthof r4";
    "i161 = i161 + 1"->"$i139 = lengthof r2";
    "$i139 = lengthof r2"->"if i161 < $i139 goto i162 = 0";
    "if i161 < $i139 goto i162 = 0"->"i160 = i160 + 1";
    "if i161 < $i139 goto i162 = 0"->"i162 = 0";
    "i160 = i160 + 1"->"if i160 < i138 goto i161 = 0";
    "if i160 < i138 goto i161 = 0"->"i163 = 0";
    "if i160 < i138 goto i161 = 0"->"i161 = 0";
    "i163 = 0"->"goto [?= $i149 = lengthof r2]";
    "goto [?= $i149 = lengthof r2]"->"$i149 = lengthof r2";
    "i164 = 0"->"goto [?= $i165 = lengthof r4]";
    "goto [?= $i165 = lengthof r4]"->"$i165 = lengthof r4";
    "$i150 = lengthof r4"->"$i151 = i163 * $i150";
    "$i151 = i163 * $i150"->"$i152 = $i151 + i164";
    "$i152 = $i151 + i164"->"$r17 = r5[$i152]";
    "$r17 = r5[$i152]"->"$i153 = lengthof r4";
    "$i153 = lengthof r4"->"$i154 = i163 * $i153";
    "$i154 = i163 * $i153"->"$i155 = $i154 + i164";
    "$i155 = $i154 + i164"->"$r16 = r6[$i155]";
    "$r16 = r6[$i155]"->"$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>($r17, $r16)";
    "$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>($r17, $r16)"->"if $z0 != 0 goto i164 = i164 + 1";
    "if $z0 != 0 goto i164 = i164 + 1"->"$r19 = <java.lang.System: java.io.PrintStream out>";
    "if $z0 != 0 goto i164 = i164 + 1"->"i164 = i164 + 1";
    "$r19 = <java.lang.System: java.io.PrintStream out>"->"$r18 = newarray (java.lang.Object)[2]";
    "$r18 = newarray (java.lang.Object)[2]"->"$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i163)";
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i163)"->"$r18[0] = $r20";
    "$r18[0] = $r20"->"$i156 = r2[i163]";
    "$i156 = r2[i163]"->"$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i156)";
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i156)"->"$r18[1] = $r21";
    "$r18[1] = $r21"->"virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"offsets[%d] = %d\", $r18)";
    "virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"offsets[%d] = %d\", $r18)"->"$r24 = <java.lang.System: java.io.PrintStream out>";
    "$r24 = <java.lang.System: java.io.PrintStream out>"->"$r23 = newarray (java.lang.Object)[2]";
    "$r23 = newarray (java.lang.Object)[2]"->"$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i164)";
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i164)"->"$r23[0] = $r25";
    "$r23[0] = $r25"->"$i157 = r4[i164]";
    "$i157 = r4[i164]"->"$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i157)";
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i157)"->"$r23[1] = $r26";
    "$r23[1] = $r26"->"virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"\tsizes[%d] = %d\n\", $r23)";
    "virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"\tsizes[%d] = %d\n\", $r23)"->"i164 = i164 + 1";
    "i164 = i164 + 1"->"$i165 = lengthof r4";
    "$i165 = lengthof r4"->"if i164 < $i165 goto $i150 = lengthof r4";
    "if i164 < $i165 goto $i150 = lengthof r4"->"i163 = i163 + 1";
    "if i164 < $i165 goto $i150 = lengthof r4"->"$i150 = lengthof r4";
    "i163 = i163 + 1"->"$i149 = lengthof r2";
    "$i149 = lengthof r2"->"if i163 < $i149 goto i164 = 0";
    "if i163 < $i149 goto i164 = 0"->"return";
    "if i163 < $i149 goto i164 = 0"->"i164 = 0";
}
