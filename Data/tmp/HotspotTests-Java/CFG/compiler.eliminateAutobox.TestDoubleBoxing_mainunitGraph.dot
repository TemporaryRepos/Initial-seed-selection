digraph "unitGraph" {
    "r35 := @parameter0: java.lang.String[]"
    "$r0 = newarray (java.lang.String)[70]"
    "$r0[0] = \"simple\""
    "$r0[1] = \"simpleb\""
    "$r0[2] = \"simplec\""
    "$r0[3] = \"simplef\""
    "$r0[4] = \"simplep\""
    "$r0[5] = \"simple2\""
    "$r0[6] = \"simpleb2\""
    "$r0[7] = \"simplec2\""
    "$r0[8] = \"simplem2\""
    "$r0[9] = \"simplep2\""
    "$r0[10] = \"simple_deop\""
    "$r0[11] = \"simpleb_deop\""
    "$r0[12] = \"simplec_deop\""
    "$r0[13] = \"simplef_deop\""
    "$r0[14] = \"simplep_deop\""
    "$r0[15] = \"test\""
    "$r0[16] = \"testb\""
    "$r0[17] = \"testc\""
    "$r0[18] = \"testm\""
    "$r0[19] = \"testp\""
    "$r0[20] = \"test2\""
    "$r0[21] = \"testb2\""
    "$r0[22] = \"testc2\""
    "$r0[23] = \"testm2\""
    "$r0[24] = \"testp2\""
    "$r0[25] = \"test_deop\""
    "$r0[26] = \"testb_deop\""
    "$r0[27] = \"testc_deop\""
    "$r0[28] = \"testf_deop\""
    "$r0[29] = \"testp_deop\""
    "$r0[30] = \"sum\""
    "$r0[31] = \"sumb\""
    "$r0[32] = \"sumc\""
    "$r0[33] = \"sumf\""
    "$r0[34] = \"sump\""
    "$r0[35] = \"sum2\""
    "$r0[36] = \"sumb2\""
    "$r0[37] = \"sumc2\""
    "$r0[38] = \"summ2\""
    "$r0[39] = \"sump2\""
    "$r0[40] = \"sum_deop\""
    "$r0[41] = \"sumb_deop\""
    "$r0[42] = \"sumc_deop\""
    "$r0[43] = \"sumf_deop\""
    "$r0[44] = \"sump_deop\""
    "$r0[45] = \"remi_sum\""
    "$r0[46] = \"remi_sumb\""
    "$r0[47] = \"remi_sumc\""
    "$r0[48] = \"remi_sumf\""
    "$r0[49] = \"remi_sump\""
    "$r0[50] = \"remi_sum2\""
    "$r0[51] = \"remi_sumb2\""
    "$r0[52] = \"remi_sumc2\""
    "$r0[53] = \"remi_summ2\""
    "$r0[54] = \"remi_sump2\""
    "$r0[55] = \"remi_sum_deop\""
    "$r0[56] = \"remi_sumb_deop\""
    "$r0[57] = \"remi_sumc_deop\""
    "$r0[58] = \"remi_sumf_deop\""
    "$r0[59] = \"remi_sump_deop\""
    "$r0[60] = \"remi_sum_cond\""
    "$r0[61] = \"remi_sumb_cond\""
    "$r0[62] = \"remi_sumc_cond\""
    "$r0[63] = \"remi_sumf_cond\""
    "$r0[64] = \"remi_sump_cond\""
    "$r0[65] = \"remi_sum2_cond\""
    "$r0[66] = \"remi_sumb2_cond\""
    "$r0[67] = \"remi_sumc2_cond\""
    "$r0[68] = \"remi_summ2_cond\""
    "$r0[69] = \"remi_sump2_cond\""
    "r1 = $r0"
    "$r2 = newarray (double)[70]"
    "$r2[0] = 7.1994E7"
    "$r2[1] = 7.1994E7"
    "$r2[2] = 12000.0"
    "$r2[3] = 7.1994E7"
    "$r2[4] = 7.1994E7"
    "$r2[5] = 1.44E8"
    "$r2[6] = 1.44E8"
    "$r2[7] = 7.2018E7"
    "$r2[8] = 1.44E8"
    "$r2[9] = 1.44E8"
    "$r2[10] = 7.1994E7"
    "$r2[11] = 7.1994E7"
    "$r2[12] = 12000.0"
    "$r2[13] = 7.1994E7"
    "$r2[14] = 7.1994E7"
    "$r2[15] = 7.2E7"
    "$r2[16] = 7.2E7"
    "$r2[17] = 3.6006E7"
    "$r2[18] = 7.2E7"
    "$r2[19] = 7.2E7"
    "$r2[20] = 1.44012E8"
    "$r2[21] = 1.44012E8"
    "$r2[22] = 7.203E7"
    "$r2[23] = 1.44012E8"
    "$r2[24] = 1.44012E8"
    "$r2[25] = 7.2E7"
    "$r2[26] = 7.2E7"
    "$r2[27] = 3.6006E7"
    "$r2[28] = 7.2E7"
    "$r2[29] = 7.2E7"
    "$r2[30] = 499501.0"
    "$r2[31] = 499501.0"
    "$r2[32] = 499501.0"
    "$r2[33] = 499501.0"
    "$r2[34] = 499501.0"
    "$r2[35] = 1000002.0"
    "$r2[36] = 1000002.0"
    "$r2[37] = 1000002.0"
    "$r2[38] = 1000002.0"
    "$r2[39] = 1000002.0"
    "$r2[40] = 499501.0"
    "$r2[41] = 499501.0"
    "$r2[42] = 499501.0"
    "$r2[43] = 499501.0"
    "$r2[44] = 499501.0"
    "$r2[45] = 1001.0"
    "$r2[46] = 1001.0"
    "$r2[47] = 1001.0"
    "$r2[48] = 1001.0"
    "$r2[49] = 1001.0"
    "$r2[50] = 3002.0"
    "$r2[51] = 3002.0"
    "$r2[52] = 3002.0"
    "$r2[53] = 3002.0"
    "$r2[54] = 3002.0"
    "$r2[55] = 1001.0"
    "$r2[56] = 1001.0"
    "$r2[57] = 1001.0"
    "$r2[58] = 1001.0"
    "$r2[59] = 1001.0"
    "$r2[60] = 501.0"
    "$r2[61] = 501.0"
    "$r2[62] = 501.0"
    "$r2[63] = 501.0"
    "$r2[64] = 501.0"
    "$r2[65] = 1502.0"
    "$r2[66] = 1502.0"
    "$r2[67] = 1502.0"
    "$r2[68] = 1502.0"
    "$r2[69] = 1502.0"
    "r3 = $r2"
    "r4 = newarray (double)[70]"
    "i31 = 0"
    "goto [?= (branch)]"
    "r4[i31] = 0.0"
    "i31 = i31 + 1"
    "if i31 < 70 goto r4[i31] = 0.0"
    "i32 = 0"
    "$d1 = r4[0]"
    "$d0 = (double) i32"
    "$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple(double)>($d0)"
    "$d3 = $d1 + $d2"
    "r4[0] = $d3"
    "$d5 = r4[1]"
    "$d4 = (double) i32"
    "$d6 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb(double)>($d4)"
    "$d7 = $d5 + $d6"
    "r4[1] = $d7"
    "$d8 = r4[2]"
    "$d9 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec()>()"
    "$d10 = $d8 + $d9"
    "r4[2] = $d10"
    "$d12 = r4[3]"
    "$d11 = (double) i32"
    "$d13 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef(double)>($d11)"
    "$d14 = $d12 + $d13"
    "r4[3] = $d14"
    "$d16 = r4[4]"
    "$d15 = (double) i32"
    "$r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15)"
    "$d17 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep(java.lang.Double)>($r5)"
    "$d18 = $d16 + $d17"
    "r4[4] = $d18"
    "$d20 = r4[5]"
    "$d19 = (double) i32"
    "$d21 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple2(double)>($d19)"
    "$d22 = $d20 + $d21"
    "r4[5] = $d22"
    "$d24 = r4[6]"
    "$d23 = (double) i32"
    "$d25 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb2(double)>($d23)"
    "$d26 = $d24 + $d25"
    "r4[6] = $d26"
    "$d28 = r4[7]"
    "$d27 = (double) i32"
    "$d29 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec2(double)>($d27)"
    "$d30 = $d28 + $d29"
    "r4[7] = $d30"
    "$d32 = r4[8]"
    "$d31 = (double) i32"
    "$d33 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplem2(double)>($d31)"
    "$d34 = $d32 + $d33"
    "r4[8] = $d34"
    "$d36 = r4[9]"
    "$d37 = (double) i32"
    "$d35 = (double) i32"
    "$r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d35)"
    "$d38 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep2(double,java.lang.Double)>($d37, $r6)"
    "$d39 = $d36 + $d38"
    "r4[9] = $d39"
    "$d41 = r4[10]"
    "$d40 = (double) i32"
    "$d42 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple_deop(double)>($d40)"
    "$d43 = $d41 + $d42"
    "r4[10] = $d43"
    "$d45 = r4[11]"
    "$d44 = (double) i32"
    "$d46 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb_deop(double)>($d44)"
    "$d47 = $d45 + $d46"
    "r4[11] = $d47"
    "$d49 = r4[12]"
    "$d48 = (double) i32"
    "$d50 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec_deop(double)>($d48)"
    "$d51 = $d49 + $d50"
    "r4[12] = $d51"
    "$d53 = r4[13]"
    "$d52 = (double) i32"
    "$d54 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef_deop(double)>($d52)"
    "$d55 = $d53 + $d54"
    "r4[13] = $d55"
    "$d57 = r4[14]"
    "$d56 = (double) i32"
    "$r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d56)"
    "$d58 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep_deop(java.lang.Double)>($r7)"
    "$d59 = $d57 + $d58"
    "r4[14] = $d59"
    "$d61 = r4[15]"
    "$d60 = (double) i32"
    "$d62 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test(double,int)>($d60, i32)"
    "$d63 = $d61 + $d62"
    "r4[15] = $d63"
    "$d65 = r4[16]"
    "$d64 = (double) i32"
    "$d66 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb(double,int)>($d64, i32)"
    "$d67 = $d65 + $d66"
    "r4[16] = $d67"
    "$d69 = r4[17]"
    "$d68 = (double) i32"
    "$d70 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc(double,int)>($d68, i32)"
    "$d71 = $d69 + $d70"
    "r4[17] = $d71"
    "$d73 = r4[18]"
    "$d72 = (double) i32"
    "$d74 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm(double,int)>($d72, i32)"
    "$d75 = $d73 + $d74"
    "r4[18] = $d75"
    "$d77 = r4[19]"
    "$d78 = (double) i32"
    "$d76 = (double) i32"
    "$r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d76)"
    "$d79 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp(double,int,java.lang.Double)>($d78, i32, $r8)"
    "$d80 = $d77 + $d79"
    "r4[19] = $d80"
    "$d82 = r4[20]"
    "$d81 = (double) i32"
    "$d83 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test2(double,int)>($d81, i32)"
    "$d84 = $d82 + $d83"
    "r4[20] = $d84"
    "$d86 = r4[21]"
    "$d85 = (double) i32"
    "$d87 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb2(double,int)>($d85, i32)"
    "$d88 = $d86 + $d87"
    "r4[21] = $d88"
    "$d90 = r4[22]"
    "$d89 = (double) i32"
    "$d91 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc2(double,int)>($d89, i32)"
    "$d92 = $d90 + $d91"
    "r4[22] = $d92"
    "$d94 = r4[23]"
    "$d93 = (double) i32"
    "$d95 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm2(double,int)>($d93, i32)"
    "$d96 = $d94 + $d95"
    "r4[23] = $d96"
    "$d98 = r4[24]"
    "$d99 = (double) i32"
    "$d97 = (double) i32"
    "$r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d97)"
    "$d100 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp2(double,int,java.lang.Double)>($d99, i32, $r9)"
    "$d101 = $d98 + $d100"
    "r4[24] = $d101"
    "$d103 = r4[25]"
    "$d102 = (double) i32"
    "$d104 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test_deop(double,int)>($d102, i32)"
    "$d105 = $d103 + $d104"
    "r4[25] = $d105"
    "$d107 = r4[26]"
    "$d106 = (double) i32"
    "$d108 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb_deop(double,int)>($d106, i32)"
    "$d109 = $d107 + $d108"
    "r4[26] = $d109"
    "$d111 = r4[27]"
    "$d110 = (double) i32"
    "$d112 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc_deop(double,int)>($d110, i32)"
    "$d113 = $d111 + $d112"
    "r4[27] = $d113"
    "$d115 = r4[28]"
    "$d114 = (double) i32"
    "$d116 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testf_deop(double,int)>($d114, i32)"
    "$d117 = $d115 + $d116"
    "r4[28] = $d117"
    "$d119 = r4[29]"
    "$d120 = (double) i32"
    "$d118 = (double) i32"
    "$r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d118)"
    "$d121 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp_deop(double,int,java.lang.Double)>($d120, i32, $r10)"
    "$d122 = $d119 + $d121"
    "r4[29] = $d122"
    "i32 = i32 + 1"
    "if i32 < 12000 goto $d1 = r4[0]"
    "r36 = newarray (double)[1000]"
    "i33 = 0"
    "$d123 = (double) i33"
    "r36[i33] = $d123"
    "i33 = i33 + 1"
    "if i33 < 1000 goto $d123 = (double) i33"
    "i34 = 0"
    "$d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)"
    "r4[30] = $d124"
    "$d125 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb(double[])>(r36)"
    "r4[31] = $d125"
    "$d126 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc(double[])>(r36)"
    "r4[32] = $d126"
    "$d127 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf(double[])>(r36)"
    "r4[33] = $d127"
    "$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d128 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump(double[],java.lang.Double)>(r36, $r11)"
    "r4[34] = $d128"
    "$d129 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum2(double[])>(r36)"
    "r4[35] = $d129"
    "$d130 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb2(double[])>(r36)"
    "r4[36] = $d130"
    "$d131 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc2(double[])>(r36)"
    "r4[37] = $d131"
    "$d132 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double summ2(double[])>(r36)"
    "r4[38] = $d132"
    "$r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d133 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump2(double[],java.lang.Double)>(r36, $r12)"
    "r4[39] = $d133"
    "$d134 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum_deop(double[])>(r36)"
    "r4[40] = $d134"
    "$d135 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb_deop(double[])>(r36)"
    "r4[41] = $d135"
    "$d136 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc_deop(double[])>(r36)"
    "r4[42] = $d136"
    "$d137 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf_deop(double[])>(r36)"
    "r4[43] = $d137"
    "$r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d138 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump_deop(double[],java.lang.Double)>(r36, $r13)"
    "r4[44] = $d138"
    "$d139 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum()>()"
    "r4[45] = $d139"
    "$d140 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb()>()"
    "r4[46] = $d140"
    "$d141 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc()>()"
    "r4[47] = $d141"
    "$d142 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf()>()"
    "r4[48] = $d142"
    "$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d143 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump(java.lang.Double)>($r14)"
    "r4[49] = $d143"
    "$d144 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2()>()"
    "r4[50] = $d144"
    "$d145 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2()>()"
    "r4[51] = $d145"
    "$d146 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2()>()"
    "r4[52] = $d146"
    "$d147 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2()>()"
    "r4[53] = $d147"
    "$r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d148 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2(java.lang.Double)>($r15)"
    "r4[54] = $d148"
    "$d149 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_deop()>()"
    "r4[55] = $d149"
    "$d150 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_deop()>()"
    "r4[56] = $d150"
    "$d151 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_deop()>()"
    "r4[57] = $d151"
    "$d152 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_deop()>()"
    "r4[58] = $d152"
    "$r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d153 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_deop(java.lang.Double)>($r16)"
    "r4[59] = $d153"
    "$d154 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_cond()>()"
    "r4[60] = $d154"
    "$d155 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_cond()>()"
    "r4[61] = $d155"
    "$d156 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_cond()>()"
    "r4[62] = $d156"
    "$d157 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_cond()>()"
    "r4[63] = $d157"
    "$r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d158 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_cond(java.lang.Double)>($r17)"
    "r4[64] = $d158"
    "$d159 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2_cond()>()"
    "r4[65] = $d159"
    "$d160 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2_cond()>()"
    "r4[66] = $d160"
    "$d161 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2_cond()>()"
    "r4[67] = $d161"
    "$d162 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2_cond()>()"
    "r4[68] = $d162"
    "$r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "$d163 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2_cond(java.lang.Double)>($r18)"
    "r4[69] = $d163"
    "i34 = i34 + 1"
    "if i34 < 100 goto $d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)"
    "i35 = 0"
    "i36 = 0"
    "$d165 = r4[i36]"
    "$d164 = r3[i36]"
    "$b30 = $d165 cmpl $d164"
    "if $b30 == 0 goto i36 = i36 + 1"
    "$r21 = <java.lang.System: java.io.PrintStream err>"
    "$r19 = new java.lang.StringBuilder"
    "$r20 = r1[i36]"
    "$r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20)"
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r22)"
    "$r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"
    "$d166 = r4[i36]"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d166)"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$d167 = r3[i36]"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d167)"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r27)"
    "i35 = i35 + 1"
    "i36 = i36 + 1"
    "if i36 < 70 goto $d165 = r4[i36]"
    "if i35 <= 0 goto $r28 = <java.lang.System: java.io.PrintStream out>"
    "$r30 = <java.lang.System: java.io.PrintStream err>"
    "$r29 = new java.lang.StringBuilder"
    "specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed \")"
    "$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35)"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests.\")"
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r33)"
    "$r34 = new java.lang.InternalError"
    "specialinvoke $r34.<java.lang.InternalError: void <init>()>()"
    "throw $r34"
    "$r28 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>(\"Passed.\")"
    "return"
    "r35 := @parameter0: java.lang.String[]"->"$r0 = newarray (java.lang.String)[70]";
    "$r0 = newarray (java.lang.String)[70]"->"$r0[0] = \"simple\"";
    "$r0[0] = \"simple\""->"$r0[1] = \"simpleb\"";
    "$r0[1] = \"simpleb\""->"$r0[2] = \"simplec\"";
    "$r0[2] = \"simplec\""->"$r0[3] = \"simplef\"";
    "$r0[3] = \"simplef\""->"$r0[4] = \"simplep\"";
    "$r0[4] = \"simplep\""->"$r0[5] = \"simple2\"";
    "$r0[5] = \"simple2\""->"$r0[6] = \"simpleb2\"";
    "$r0[6] = \"simpleb2\""->"$r0[7] = \"simplec2\"";
    "$r0[7] = \"simplec2\""->"$r0[8] = \"simplem2\"";
    "$r0[8] = \"simplem2\""->"$r0[9] = \"simplep2\"";
    "$r0[9] = \"simplep2\""->"$r0[10] = \"simple_deop\"";
    "$r0[10] = \"simple_deop\""->"$r0[11] = \"simpleb_deop\"";
    "$r0[11] = \"simpleb_deop\""->"$r0[12] = \"simplec_deop\"";
    "$r0[12] = \"simplec_deop\""->"$r0[13] = \"simplef_deop\"";
    "$r0[13] = \"simplef_deop\""->"$r0[14] = \"simplep_deop\"";
    "$r0[14] = \"simplep_deop\""->"$r0[15] = \"test\"";
    "$r0[15] = \"test\""->"$r0[16] = \"testb\"";
    "$r0[16] = \"testb\""->"$r0[17] = \"testc\"";
    "$r0[17] = \"testc\""->"$r0[18] = \"testm\"";
    "$r0[18] = \"testm\""->"$r0[19] = \"testp\"";
    "$r0[19] = \"testp\""->"$r0[20] = \"test2\"";
    "$r0[20] = \"test2\""->"$r0[21] = \"testb2\"";
    "$r0[21] = \"testb2\""->"$r0[22] = \"testc2\"";
    "$r0[22] = \"testc2\""->"$r0[23] = \"testm2\"";
    "$r0[23] = \"testm2\""->"$r0[24] = \"testp2\"";
    "$r0[24] = \"testp2\""->"$r0[25] = \"test_deop\"";
    "$r0[25] = \"test_deop\""->"$r0[26] = \"testb_deop\"";
    "$r0[26] = \"testb_deop\""->"$r0[27] = \"testc_deop\"";
    "$r0[27] = \"testc_deop\""->"$r0[28] = \"testf_deop\"";
    "$r0[28] = \"testf_deop\""->"$r0[29] = \"testp_deop\"";
    "$r0[29] = \"testp_deop\""->"$r0[30] = \"sum\"";
    "$r0[30] = \"sum\""->"$r0[31] = \"sumb\"";
    "$r0[31] = \"sumb\""->"$r0[32] = \"sumc\"";
    "$r0[32] = \"sumc\""->"$r0[33] = \"sumf\"";
    "$r0[33] = \"sumf\""->"$r0[34] = \"sump\"";
    "$r0[34] = \"sump\""->"$r0[35] = \"sum2\"";
    "$r0[35] = \"sum2\""->"$r0[36] = \"sumb2\"";
    "$r0[36] = \"sumb2\""->"$r0[37] = \"sumc2\"";
    "$r0[37] = \"sumc2\""->"$r0[38] = \"summ2\"";
    "$r0[38] = \"summ2\""->"$r0[39] = \"sump2\"";
    "$r0[39] = \"sump2\""->"$r0[40] = \"sum_deop\"";
    "$r0[40] = \"sum_deop\""->"$r0[41] = \"sumb_deop\"";
    "$r0[41] = \"sumb_deop\""->"$r0[42] = \"sumc_deop\"";
    "$r0[42] = \"sumc_deop\""->"$r0[43] = \"sumf_deop\"";
    "$r0[43] = \"sumf_deop\""->"$r0[44] = \"sump_deop\"";
    "$r0[44] = \"sump_deop\""->"$r0[45] = \"remi_sum\"";
    "$r0[45] = \"remi_sum\""->"$r0[46] = \"remi_sumb\"";
    "$r0[46] = \"remi_sumb\""->"$r0[47] = \"remi_sumc\"";
    "$r0[47] = \"remi_sumc\""->"$r0[48] = \"remi_sumf\"";
    "$r0[48] = \"remi_sumf\""->"$r0[49] = \"remi_sump\"";
    "$r0[49] = \"remi_sump\""->"$r0[50] = \"remi_sum2\"";
    "$r0[50] = \"remi_sum2\""->"$r0[51] = \"remi_sumb2\"";
    "$r0[51] = \"remi_sumb2\""->"$r0[52] = \"remi_sumc2\"";
    "$r0[52] = \"remi_sumc2\""->"$r0[53] = \"remi_summ2\"";
    "$r0[53] = \"remi_summ2\""->"$r0[54] = \"remi_sump2\"";
    "$r0[54] = \"remi_sump2\""->"$r0[55] = \"remi_sum_deop\"";
    "$r0[55] = \"remi_sum_deop\""->"$r0[56] = \"remi_sumb_deop\"";
    "$r0[56] = \"remi_sumb_deop\""->"$r0[57] = \"remi_sumc_deop\"";
    "$r0[57] = \"remi_sumc_deop\""->"$r0[58] = \"remi_sumf_deop\"";
    "$r0[58] = \"remi_sumf_deop\""->"$r0[59] = \"remi_sump_deop\"";
    "$r0[59] = \"remi_sump_deop\""->"$r0[60] = \"remi_sum_cond\"";
    "$r0[60] = \"remi_sum_cond\""->"$r0[61] = \"remi_sumb_cond\"";
    "$r0[61] = \"remi_sumb_cond\""->"$r0[62] = \"remi_sumc_cond\"";
    "$r0[62] = \"remi_sumc_cond\""->"$r0[63] = \"remi_sumf_cond\"";
    "$r0[63] = \"remi_sumf_cond\""->"$r0[64] = \"remi_sump_cond\"";
    "$r0[64] = \"remi_sump_cond\""->"$r0[65] = \"remi_sum2_cond\"";
    "$r0[65] = \"remi_sum2_cond\""->"$r0[66] = \"remi_sumb2_cond\"";
    "$r0[66] = \"remi_sumb2_cond\""->"$r0[67] = \"remi_sumc2_cond\"";
    "$r0[67] = \"remi_sumc2_cond\""->"$r0[68] = \"remi_summ2_cond\"";
    "$r0[68] = \"remi_summ2_cond\""->"$r0[69] = \"remi_sump2_cond\"";
    "$r0[69] = \"remi_sump2_cond\""->"r1 = $r0";
    "r1 = $r0"->"$r2 = newarray (double)[70]";
    "$r2 = newarray (double)[70]"->"$r2[0] = 7.1994E7";
    "$r2[0] = 7.1994E7"->"$r2[1] = 7.1994E7";
    "$r2[1] = 7.1994E7"->"$r2[2] = 12000.0";
    "$r2[2] = 12000.0"->"$r2[3] = 7.1994E7";
    "$r2[3] = 7.1994E7"->"$r2[4] = 7.1994E7";
    "$r2[4] = 7.1994E7"->"$r2[5] = 1.44E8";
    "$r2[5] = 1.44E8"->"$r2[6] = 1.44E8";
    "$r2[6] = 1.44E8"->"$r2[7] = 7.2018E7";
    "$r2[7] = 7.2018E7"->"$r2[8] = 1.44E8";
    "$r2[8] = 1.44E8"->"$r2[9] = 1.44E8";
    "$r2[9] = 1.44E8"->"$r2[10] = 7.1994E7";
    "$r2[10] = 7.1994E7"->"$r2[11] = 7.1994E7";
    "$r2[11] = 7.1994E7"->"$r2[12] = 12000.0";
    "$r2[12] = 12000.0"->"$r2[13] = 7.1994E7";
    "$r2[13] = 7.1994E7"->"$r2[14] = 7.1994E7";
    "$r2[14] = 7.1994E7"->"$r2[15] = 7.2E7";
    "$r2[15] = 7.2E7"->"$r2[16] = 7.2E7";
    "$r2[16] = 7.2E7"->"$r2[17] = 3.6006E7";
    "$r2[17] = 3.6006E7"->"$r2[18] = 7.2E7";
    "$r2[18] = 7.2E7"->"$r2[19] = 7.2E7";
    "$r2[19] = 7.2E7"->"$r2[20] = 1.44012E8";
    "$r2[20] = 1.44012E8"->"$r2[21] = 1.44012E8";
    "$r2[21] = 1.44012E8"->"$r2[22] = 7.203E7";
    "$r2[22] = 7.203E7"->"$r2[23] = 1.44012E8";
    "$r2[23] = 1.44012E8"->"$r2[24] = 1.44012E8";
    "$r2[24] = 1.44012E8"->"$r2[25] = 7.2E7";
    "$r2[25] = 7.2E7"->"$r2[26] = 7.2E7";
    "$r2[26] = 7.2E7"->"$r2[27] = 3.6006E7";
    "$r2[27] = 3.6006E7"->"$r2[28] = 7.2E7";
    "$r2[28] = 7.2E7"->"$r2[29] = 7.2E7";
    "$r2[29] = 7.2E7"->"$r2[30] = 499501.0";
    "$r2[30] = 499501.0"->"$r2[31] = 499501.0";
    "$r2[31] = 499501.0"->"$r2[32] = 499501.0";
    "$r2[32] = 499501.0"->"$r2[33] = 499501.0";
    "$r2[33] = 499501.0"->"$r2[34] = 499501.0";
    "$r2[34] = 499501.0"->"$r2[35] = 1000002.0";
    "$r2[35] = 1000002.0"->"$r2[36] = 1000002.0";
    "$r2[36] = 1000002.0"->"$r2[37] = 1000002.0";
    "$r2[37] = 1000002.0"->"$r2[38] = 1000002.0";
    "$r2[38] = 1000002.0"->"$r2[39] = 1000002.0";
    "$r2[39] = 1000002.0"->"$r2[40] = 499501.0";
    "$r2[40] = 499501.0"->"$r2[41] = 499501.0";
    "$r2[41] = 499501.0"->"$r2[42] = 499501.0";
    "$r2[42] = 499501.0"->"$r2[43] = 499501.0";
    "$r2[43] = 499501.0"->"$r2[44] = 499501.0";
    "$r2[44] = 499501.0"->"$r2[45] = 1001.0";
    "$r2[45] = 1001.0"->"$r2[46] = 1001.0";
    "$r2[46] = 1001.0"->"$r2[47] = 1001.0";
    "$r2[47] = 1001.0"->"$r2[48] = 1001.0";
    "$r2[48] = 1001.0"->"$r2[49] = 1001.0";
    "$r2[49] = 1001.0"->"$r2[50] = 3002.0";
    "$r2[50] = 3002.0"->"$r2[51] = 3002.0";
    "$r2[51] = 3002.0"->"$r2[52] = 3002.0";
    "$r2[52] = 3002.0"->"$r2[53] = 3002.0";
    "$r2[53] = 3002.0"->"$r2[54] = 3002.0";
    "$r2[54] = 3002.0"->"$r2[55] = 1001.0";
    "$r2[55] = 1001.0"->"$r2[56] = 1001.0";
    "$r2[56] = 1001.0"->"$r2[57] = 1001.0";
    "$r2[57] = 1001.0"->"$r2[58] = 1001.0";
    "$r2[58] = 1001.0"->"$r2[59] = 1001.0";
    "$r2[59] = 1001.0"->"$r2[60] = 501.0";
    "$r2[60] = 501.0"->"$r2[61] = 501.0";
    "$r2[61] = 501.0"->"$r2[62] = 501.0";
    "$r2[62] = 501.0"->"$r2[63] = 501.0";
    "$r2[63] = 501.0"->"$r2[64] = 501.0";
    "$r2[64] = 501.0"->"$r2[65] = 1502.0";
    "$r2[65] = 1502.0"->"$r2[66] = 1502.0";
    "$r2[66] = 1502.0"->"$r2[67] = 1502.0";
    "$r2[67] = 1502.0"->"$r2[68] = 1502.0";
    "$r2[68] = 1502.0"->"$r2[69] = 1502.0";
    "$r2[69] = 1502.0"->"r3 = $r2";
    "r3 = $r2"->"r4 = newarray (double)[70]";
    "r4 = newarray (double)[70]"->"i31 = 0";
    "i31 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i31 < 70 goto r4[i31] = 0.0";
    "r4[i31] = 0.0"->"i31 = i31 + 1";
    "i31 = i31 + 1"->"if i31 < 70 goto r4[i31] = 0.0";
    "if i31 < 70 goto r4[i31] = 0.0"->"i32 = 0";
    "if i31 < 70 goto r4[i31] = 0.0"->"r4[i31] = 0.0";
    "i32 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i32 < 12000 goto $d1 = r4[0]";
    "$d1 = r4[0]"->"$d0 = (double) i32";
    "$d0 = (double) i32"->"$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple(double)>($d0)";
    "$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple(double)>($d0)"->"$d3 = $d1 + $d2";
    "$d3 = $d1 + $d2"->"r4[0] = $d3";
    "r4[0] = $d3"->"$d5 = r4[1]";
    "$d5 = r4[1]"->"$d4 = (double) i32";
    "$d4 = (double) i32"->"$d6 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb(double)>($d4)";
    "$d6 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb(double)>($d4)"->"$d7 = $d5 + $d6";
    "$d7 = $d5 + $d6"->"r4[1] = $d7";
    "r4[1] = $d7"->"$d8 = r4[2]";
    "$d8 = r4[2]"->"$d9 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec()>()";
    "$d9 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec()>()"->"$d10 = $d8 + $d9";
    "$d10 = $d8 + $d9"->"r4[2] = $d10";
    "r4[2] = $d10"->"$d12 = r4[3]";
    "$d12 = r4[3]"->"$d11 = (double) i32";
    "$d11 = (double) i32"->"$d13 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef(double)>($d11)";
    "$d13 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef(double)>($d11)"->"$d14 = $d12 + $d13";
    "$d14 = $d12 + $d13"->"r4[3] = $d14";
    "r4[3] = $d14"->"$d16 = r4[4]";
    "$d16 = r4[4]"->"$d15 = (double) i32";
    "$d15 = (double) i32"->"$r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15)";
    "$r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15)"->"$d17 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep(java.lang.Double)>($r5)";
    "$d17 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep(java.lang.Double)>($r5)"->"$d18 = $d16 + $d17";
    "$d18 = $d16 + $d17"->"r4[4] = $d18";
    "r4[4] = $d18"->"$d20 = r4[5]";
    "$d20 = r4[5]"->"$d19 = (double) i32";
    "$d19 = (double) i32"->"$d21 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple2(double)>($d19)";
    "$d21 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple2(double)>($d19)"->"$d22 = $d20 + $d21";
    "$d22 = $d20 + $d21"->"r4[5] = $d22";
    "r4[5] = $d22"->"$d24 = r4[6]";
    "$d24 = r4[6]"->"$d23 = (double) i32";
    "$d23 = (double) i32"->"$d25 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb2(double)>($d23)";
    "$d25 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb2(double)>($d23)"->"$d26 = $d24 + $d25";
    "$d26 = $d24 + $d25"->"r4[6] = $d26";
    "r4[6] = $d26"->"$d28 = r4[7]";
    "$d28 = r4[7]"->"$d27 = (double) i32";
    "$d27 = (double) i32"->"$d29 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec2(double)>($d27)";
    "$d29 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec2(double)>($d27)"->"$d30 = $d28 + $d29";
    "$d30 = $d28 + $d29"->"r4[7] = $d30";
    "r4[7] = $d30"->"$d32 = r4[8]";
    "$d32 = r4[8]"->"$d31 = (double) i32";
    "$d31 = (double) i32"->"$d33 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplem2(double)>($d31)";
    "$d33 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplem2(double)>($d31)"->"$d34 = $d32 + $d33";
    "$d34 = $d32 + $d33"->"r4[8] = $d34";
    "r4[8] = $d34"->"$d36 = r4[9]";
    "$d36 = r4[9]"->"$d37 = (double) i32";
    "$d37 = (double) i32"->"$d35 = (double) i32";
    "$d35 = (double) i32"->"$r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d35)";
    "$r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d35)"->"$d38 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep2(double,java.lang.Double)>($d37, $r6)";
    "$d38 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep2(double,java.lang.Double)>($d37, $r6)"->"$d39 = $d36 + $d38";
    "$d39 = $d36 + $d38"->"r4[9] = $d39";
    "r4[9] = $d39"->"$d41 = r4[10]";
    "$d41 = r4[10]"->"$d40 = (double) i32";
    "$d40 = (double) i32"->"$d42 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple_deop(double)>($d40)";
    "$d42 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simple_deop(double)>($d40)"->"$d43 = $d41 + $d42";
    "$d43 = $d41 + $d42"->"r4[10] = $d43";
    "r4[10] = $d43"->"$d45 = r4[11]";
    "$d45 = r4[11]"->"$d44 = (double) i32";
    "$d44 = (double) i32"->"$d46 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb_deop(double)>($d44)";
    "$d46 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simpleb_deop(double)>($d44)"->"$d47 = $d45 + $d46";
    "$d47 = $d45 + $d46"->"r4[11] = $d47";
    "r4[11] = $d47"->"$d49 = r4[12]";
    "$d49 = r4[12]"->"$d48 = (double) i32";
    "$d48 = (double) i32"->"$d50 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec_deop(double)>($d48)";
    "$d50 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplec_deop(double)>($d48)"->"$d51 = $d49 + $d50";
    "$d51 = $d49 + $d50"->"r4[12] = $d51";
    "r4[12] = $d51"->"$d53 = r4[13]";
    "$d53 = r4[13]"->"$d52 = (double) i32";
    "$d52 = (double) i32"->"$d54 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef_deop(double)>($d52)";
    "$d54 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplef_deop(double)>($d52)"->"$d55 = $d53 + $d54";
    "$d55 = $d53 + $d54"->"r4[13] = $d55";
    "r4[13] = $d55"->"$d57 = r4[14]";
    "$d57 = r4[14]"->"$d56 = (double) i32";
    "$d56 = (double) i32"->"$r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d56)";
    "$r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d56)"->"$d58 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep_deop(java.lang.Double)>($r7)";
    "$d58 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double simplep_deop(java.lang.Double)>($r7)"->"$d59 = $d57 + $d58";
    "$d59 = $d57 + $d58"->"r4[14] = $d59";
    "r4[14] = $d59"->"$d61 = r4[15]";
    "$d61 = r4[15]"->"$d60 = (double) i32";
    "$d60 = (double) i32"->"$d62 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test(double,int)>($d60, i32)";
    "$d62 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test(double,int)>($d60, i32)"->"$d63 = $d61 + $d62";
    "$d63 = $d61 + $d62"->"r4[15] = $d63";
    "r4[15] = $d63"->"$d65 = r4[16]";
    "$d65 = r4[16]"->"$d64 = (double) i32";
    "$d64 = (double) i32"->"$d66 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb(double,int)>($d64, i32)";
    "$d66 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb(double,int)>($d64, i32)"->"$d67 = $d65 + $d66";
    "$d67 = $d65 + $d66"->"r4[16] = $d67";
    "r4[16] = $d67"->"$d69 = r4[17]";
    "$d69 = r4[17]"->"$d68 = (double) i32";
    "$d68 = (double) i32"->"$d70 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc(double,int)>($d68, i32)";
    "$d70 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc(double,int)>($d68, i32)"->"$d71 = $d69 + $d70";
    "$d71 = $d69 + $d70"->"r4[17] = $d71";
    "r4[17] = $d71"->"$d73 = r4[18]";
    "$d73 = r4[18]"->"$d72 = (double) i32";
    "$d72 = (double) i32"->"$d74 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm(double,int)>($d72, i32)";
    "$d74 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm(double,int)>($d72, i32)"->"$d75 = $d73 + $d74";
    "$d75 = $d73 + $d74"->"r4[18] = $d75";
    "r4[18] = $d75"->"$d77 = r4[19]";
    "$d77 = r4[19]"->"$d78 = (double) i32";
    "$d78 = (double) i32"->"$d76 = (double) i32";
    "$d76 = (double) i32"->"$r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d76)";
    "$r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d76)"->"$d79 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp(double,int,java.lang.Double)>($d78, i32, $r8)";
    "$d79 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp(double,int,java.lang.Double)>($d78, i32, $r8)"->"$d80 = $d77 + $d79";
    "$d80 = $d77 + $d79"->"r4[19] = $d80";
    "r4[19] = $d80"->"$d82 = r4[20]";
    "$d82 = r4[20]"->"$d81 = (double) i32";
    "$d81 = (double) i32"->"$d83 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test2(double,int)>($d81, i32)";
    "$d83 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test2(double,int)>($d81, i32)"->"$d84 = $d82 + $d83";
    "$d84 = $d82 + $d83"->"r4[20] = $d84";
    "r4[20] = $d84"->"$d86 = r4[21]";
    "$d86 = r4[21]"->"$d85 = (double) i32";
    "$d85 = (double) i32"->"$d87 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb2(double,int)>($d85, i32)";
    "$d87 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb2(double,int)>($d85, i32)"->"$d88 = $d86 + $d87";
    "$d88 = $d86 + $d87"->"r4[21] = $d88";
    "r4[21] = $d88"->"$d90 = r4[22]";
    "$d90 = r4[22]"->"$d89 = (double) i32";
    "$d89 = (double) i32"->"$d91 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc2(double,int)>($d89, i32)";
    "$d91 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc2(double,int)>($d89, i32)"->"$d92 = $d90 + $d91";
    "$d92 = $d90 + $d91"->"r4[22] = $d92";
    "r4[22] = $d92"->"$d94 = r4[23]";
    "$d94 = r4[23]"->"$d93 = (double) i32";
    "$d93 = (double) i32"->"$d95 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm2(double,int)>($d93, i32)";
    "$d95 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testm2(double,int)>($d93, i32)"->"$d96 = $d94 + $d95";
    "$d96 = $d94 + $d95"->"r4[23] = $d96";
    "r4[23] = $d96"->"$d98 = r4[24]";
    "$d98 = r4[24]"->"$d99 = (double) i32";
    "$d99 = (double) i32"->"$d97 = (double) i32";
    "$d97 = (double) i32"->"$r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d97)";
    "$r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d97)"->"$d100 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp2(double,int,java.lang.Double)>($d99, i32, $r9)";
    "$d100 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp2(double,int,java.lang.Double)>($d99, i32, $r9)"->"$d101 = $d98 + $d100";
    "$d101 = $d98 + $d100"->"r4[24] = $d101";
    "r4[24] = $d101"->"$d103 = r4[25]";
    "$d103 = r4[25]"->"$d102 = (double) i32";
    "$d102 = (double) i32"->"$d104 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test_deop(double,int)>($d102, i32)";
    "$d104 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double test_deop(double,int)>($d102, i32)"->"$d105 = $d103 + $d104";
    "$d105 = $d103 + $d104"->"r4[25] = $d105";
    "r4[25] = $d105"->"$d107 = r4[26]";
    "$d107 = r4[26]"->"$d106 = (double) i32";
    "$d106 = (double) i32"->"$d108 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb_deop(double,int)>($d106, i32)";
    "$d108 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testb_deop(double,int)>($d106, i32)"->"$d109 = $d107 + $d108";
    "$d109 = $d107 + $d108"->"r4[26] = $d109";
    "r4[26] = $d109"->"$d111 = r4[27]";
    "$d111 = r4[27]"->"$d110 = (double) i32";
    "$d110 = (double) i32"->"$d112 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc_deop(double,int)>($d110, i32)";
    "$d112 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testc_deop(double,int)>($d110, i32)"->"$d113 = $d111 + $d112";
    "$d113 = $d111 + $d112"->"r4[27] = $d113";
    "r4[27] = $d113"->"$d115 = r4[28]";
    "$d115 = r4[28]"->"$d114 = (double) i32";
    "$d114 = (double) i32"->"$d116 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testf_deop(double,int)>($d114, i32)";
    "$d116 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testf_deop(double,int)>($d114, i32)"->"$d117 = $d115 + $d116";
    "$d117 = $d115 + $d116"->"r4[28] = $d117";
    "r4[28] = $d117"->"$d119 = r4[29]";
    "$d119 = r4[29]"->"$d120 = (double) i32";
    "$d120 = (double) i32"->"$d118 = (double) i32";
    "$d118 = (double) i32"->"$r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d118)";
    "$r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d118)"->"$d121 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp_deop(double,int,java.lang.Double)>($d120, i32, $r10)";
    "$d121 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double testp_deop(double,int,java.lang.Double)>($d120, i32, $r10)"->"$d122 = $d119 + $d121";
    "$d122 = $d119 + $d121"->"r4[29] = $d122";
    "r4[29] = $d122"->"i32 = i32 + 1";
    "i32 = i32 + 1"->"if i32 < 12000 goto $d1 = r4[0]";
    "if i32 < 12000 goto $d1 = r4[0]"->"r36 = newarray (double)[1000]";
    "if i32 < 12000 goto $d1 = r4[0]"->"$d1 = r4[0]";
    "r36 = newarray (double)[1000]"->"i33 = 0";
    "i33 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i33 < 1000 goto $d123 = (double) i33";
    "$d123 = (double) i33"->"r36[i33] = $d123";
    "r36[i33] = $d123"->"i33 = i33 + 1";
    "i33 = i33 + 1"->"if i33 < 1000 goto $d123 = (double) i33";
    "if i33 < 1000 goto $d123 = (double) i33"->"i34 = 0";
    "if i33 < 1000 goto $d123 = (double) i33"->"$d123 = (double) i33";
    "i34 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i34 < 100 goto $d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)";
    "$d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)"->"r4[30] = $d124";
    "r4[30] = $d124"->"$d125 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb(double[])>(r36)";
    "$d125 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb(double[])>(r36)"->"r4[31] = $d125";
    "r4[31] = $d125"->"$d126 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc(double[])>(r36)";
    "$d126 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc(double[])>(r36)"->"r4[32] = $d126";
    "r4[32] = $d126"->"$d127 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf(double[])>(r36)";
    "$d127 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf(double[])>(r36)"->"r4[33] = $d127";
    "r4[33] = $d127"->"$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d128 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump(double[],java.lang.Double)>(r36, $r11)";
    "$d128 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump(double[],java.lang.Double)>(r36, $r11)"->"r4[34] = $d128";
    "r4[34] = $d128"->"$d129 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum2(double[])>(r36)";
    "$d129 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum2(double[])>(r36)"->"r4[35] = $d129";
    "r4[35] = $d129"->"$d130 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb2(double[])>(r36)";
    "$d130 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb2(double[])>(r36)"->"r4[36] = $d130";
    "r4[36] = $d130"->"$d131 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc2(double[])>(r36)";
    "$d131 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc2(double[])>(r36)"->"r4[37] = $d131";
    "r4[37] = $d131"->"$d132 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double summ2(double[])>(r36)";
    "$d132 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double summ2(double[])>(r36)"->"r4[38] = $d132";
    "r4[38] = $d132"->"$r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d133 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump2(double[],java.lang.Double)>(r36, $r12)";
    "$d133 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump2(double[],java.lang.Double)>(r36, $r12)"->"r4[39] = $d133";
    "r4[39] = $d133"->"$d134 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum_deop(double[])>(r36)";
    "$d134 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum_deop(double[])>(r36)"->"r4[40] = $d134";
    "r4[40] = $d134"->"$d135 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb_deop(double[])>(r36)";
    "$d135 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumb_deop(double[])>(r36)"->"r4[41] = $d135";
    "r4[41] = $d135"->"$d136 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc_deop(double[])>(r36)";
    "$d136 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumc_deop(double[])>(r36)"->"r4[42] = $d136";
    "r4[42] = $d136"->"$d137 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf_deop(double[])>(r36)";
    "$d137 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sumf_deop(double[])>(r36)"->"r4[43] = $d137";
    "r4[43] = $d137"->"$r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d138 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump_deop(double[],java.lang.Double)>(r36, $r13)";
    "$d138 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sump_deop(double[],java.lang.Double)>(r36, $r13)"->"r4[44] = $d138";
    "r4[44] = $d138"->"$d139 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum()>()";
    "$d139 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum()>()"->"r4[45] = $d139";
    "r4[45] = $d139"->"$d140 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb()>()";
    "$d140 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb()>()"->"r4[46] = $d140";
    "r4[46] = $d140"->"$d141 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc()>()";
    "$d141 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc()>()"->"r4[47] = $d141";
    "r4[47] = $d141"->"$d142 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf()>()";
    "$d142 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf()>()"->"r4[48] = $d142";
    "r4[48] = $d142"->"$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d143 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump(java.lang.Double)>($r14)";
    "$d143 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump(java.lang.Double)>($r14)"->"r4[49] = $d143";
    "r4[49] = $d143"->"$d144 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2()>()";
    "$d144 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2()>()"->"r4[50] = $d144";
    "r4[50] = $d144"->"$d145 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2()>()";
    "$d145 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2()>()"->"r4[51] = $d145";
    "r4[51] = $d145"->"$d146 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2()>()";
    "$d146 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2()>()"->"r4[52] = $d146";
    "r4[52] = $d146"->"$d147 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2()>()";
    "$d147 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2()>()"->"r4[53] = $d147";
    "r4[53] = $d147"->"$r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d148 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2(java.lang.Double)>($r15)";
    "$d148 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2(java.lang.Double)>($r15)"->"r4[54] = $d148";
    "r4[54] = $d148"->"$d149 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_deop()>()";
    "$d149 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_deop()>()"->"r4[55] = $d149";
    "r4[55] = $d149"->"$d150 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_deop()>()";
    "$d150 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_deop()>()"->"r4[56] = $d150";
    "r4[56] = $d150"->"$d151 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_deop()>()";
    "$d151 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_deop()>()"->"r4[57] = $d151";
    "r4[57] = $d151"->"$d152 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_deop()>()";
    "$d152 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_deop()>()"->"r4[58] = $d152";
    "r4[58] = $d152"->"$r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d153 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_deop(java.lang.Double)>($r16)";
    "$d153 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_deop(java.lang.Double)>($r16)"->"r4[59] = $d153";
    "r4[59] = $d153"->"$d154 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_cond()>()";
    "$d154 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum_cond()>()"->"r4[60] = $d154";
    "r4[60] = $d154"->"$d155 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_cond()>()";
    "$d155 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb_cond()>()"->"r4[61] = $d155";
    "r4[61] = $d155"->"$d156 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_cond()>()";
    "$d156 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc_cond()>()"->"r4[62] = $d156";
    "r4[62] = $d156"->"$d157 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_cond()>()";
    "$d157 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumf_cond()>()"->"r4[63] = $d157";
    "r4[63] = $d157"->"$r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d158 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_cond(java.lang.Double)>($r17)";
    "$d158 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump_cond(java.lang.Double)>($r17)"->"r4[64] = $d158";
    "r4[64] = $d158"->"$d159 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2_cond()>()";
    "$d159 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sum2_cond()>()"->"r4[65] = $d159";
    "r4[65] = $d159"->"$d160 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2_cond()>()";
    "$d160 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumb2_cond()>()"->"r4[66] = $d160";
    "r4[66] = $d160"->"$d161 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2_cond()>()";
    "$d161 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sumc2_cond()>()"->"r4[67] = $d161";
    "r4[67] = $d161"->"$d162 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2_cond()>()";
    "$d162 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_summ2_cond()>()"->"r4[68] = $d162";
    "r4[68] = $d162"->"$r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"$d163 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2_cond(java.lang.Double)>($r18)";
    "$d163 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double remi_sump2_cond(java.lang.Double)>($r18)"->"r4[69] = $d163";
    "r4[69] = $d163"->"i34 = i34 + 1";
    "i34 = i34 + 1"->"if i34 < 100 goto $d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)";
    "if i34 < 100 goto $d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)"->"i35 = 0";
    "if i34 < 100 goto $d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)"->"$d124 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double sum(double[])>(r36)";
    "i35 = 0"->"i36 = 0";
    "i36 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i36 < 70 goto $d165 = r4[i36]";
    "$d165 = r4[i36]"->"$d164 = r3[i36]";
    "$d164 = r3[i36]"->"$b30 = $d165 cmpl $d164";
    "$b30 = $d165 cmpl $d164"->"if $b30 == 0 goto i36 = i36 + 1";
    "if $b30 == 0 goto i36 = i36 + 1"->"$r21 = <java.lang.System: java.io.PrintStream err>";
    "if $b30 == 0 goto i36 = i36 + 1"->"i36 = i36 + 1";
    "$r21 = <java.lang.System: java.io.PrintStream err>"->"$r19 = new java.lang.StringBuilder";
    "$r19 = new java.lang.StringBuilder"->"$r20 = r1[i36]";
    "$r20 = r1[i36]"->"$r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20)";
    "$r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20)"->"specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r22)";
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r22)"->"$r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")";
    "$r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"->"$d166 = r4[i36]";
    "$d166 = r4[i36]"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d166)";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d166)"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$d167 = r3[i36]";
    "$d167 = r3[i36]"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d167)";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d167)"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r27)";
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r27)"->"i35 = i35 + 1";
    "i35 = i35 + 1"->"i36 = i36 + 1";
    "i36 = i36 + 1"->"if i36 < 70 goto $d165 = r4[i36]";
    "if i36 < 70 goto $d165 = r4[i36]"->"if i35 <= 0 goto $r28 = <java.lang.System: java.io.PrintStream out>";
    "if i36 < 70 goto $d165 = r4[i36]"->"$d165 = r4[i36]";
    "if i35 <= 0 goto $r28 = <java.lang.System: java.io.PrintStream out>"->"$r30 = <java.lang.System: java.io.PrintStream err>";
    "if i35 <= 0 goto $r28 = <java.lang.System: java.io.PrintStream out>"->"$r28 = <java.lang.System: java.io.PrintStream out>";
    "$r30 = <java.lang.System: java.io.PrintStream err>"->"$r29 = new java.lang.StringBuilder";
    "$r29 = new java.lang.StringBuilder"->"specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed \")";
    "specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Failed \")"->"$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35)";
    "$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35)"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests.\")";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" tests.\")"->"$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r33)";
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r33)"->"$r34 = new java.lang.InternalError";
    "$r34 = new java.lang.InternalError"->"specialinvoke $r34.<java.lang.InternalError: void <init>()>()";
    "specialinvoke $r34.<java.lang.InternalError: void <init>()>()"->"throw $r34";
    "$r28 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>(\"Passed.\")";
    "virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>(\"Passed.\")"->"return";
}
