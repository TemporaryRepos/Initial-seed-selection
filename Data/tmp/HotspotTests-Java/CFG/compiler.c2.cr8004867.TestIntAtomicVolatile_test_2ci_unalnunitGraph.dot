digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 + 5"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i0, -123)"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, -103)"
    "i1 = i1 + 1"
    "if i1 < 92 goto $i0 = i1 + 5"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 92 goto $i0 = i1 + 5";
    "$i0 = i1 + 5"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i0, -123)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i0, -123)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, -103)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, -103)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 92 goto $i0 = i1 + 5";
    "if i1 < 92 goto $i0 = i1 + 5"->"return";
    "if i1 < 92 goto $i0 = i1 + 5"->"$i0 = i1 + 5";
}
