digraph "unitGraph" {
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 & 1"
    "if $i0 != 0 goto $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"
    "$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"
    "$d3 = $d2 + 1.0"
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)"
    "goto [?= i1 = i1 + 1]"
    "$d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"
    "$d1 = $d0 + 2.0"
    "r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)"
    "i1 = i1 + 1"
    "if i1 < 1000 goto $i0 = i1 & 1"
    "$d4 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"
    "$d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"
    "$d6 = $d4 + $d5"
    "return $d6"
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000 goto $i0 = i1 & 1";
    "$i0 = i1 & 1"->"if $i0 != 0 goto $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()";
    "if $i0 != 0 goto $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"->"$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()";
    "if $i0 != 0 goto $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"->"$d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()";
    "$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"->"$d3 = $d2 + 1.0";
    "$d3 = $d2 + 1.0"->"r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)";
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3)"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"->"$d1 = $d0 + 2.0";
    "$d1 = $d0 + 2.0"->"r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)";
    "r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 1000 goto $i0 = i1 & 1";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$d4 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$i0 = i1 & 1";
    "$d4 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"->"$d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()";
    "$d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>()"->"$d6 = $d4 + $d5";
    "$d6 = $d4 + $d5"->"return $d6";
}
