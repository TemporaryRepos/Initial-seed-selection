digraph "unitGraph" {
    "r25 := @parameter0: java.lang.String[]"
    "l0 = <compiler.c1.TestUnalignedLoad: long l1v>"
    "d0 = <compiler.c1.TestUnalignedLoad: double d1v>"
    "l1 = <compiler.c1.TestUnalignedLoad: long l2v>"
    "d1 = <compiler.c1.TestUnalignedLoad: double d2v>"
    "i10 = 0"
    "goto [?= (branch)]"
    "i10 = i10 + 1"
    "if i10 < 10000000 goto i10 = i10 + 1"
    "z0 = 0"
    "$l2 = <compiler.c1.TestUnalignedLoad: long l1v>"
    "$b3 = l0 cmp $l2"
    "if $b3 == 0 goto $l4 = <compiler.c1.TestUnalignedLoad: long l2v>"
    "$r20 = <java.lang.System: java.io.PrintStream out>"
    "$r19 = new java.lang.StringBuilder"
    "$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0)"
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21)"
    "$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$l9 = <compiler.c1.TestUnalignedLoad: long l1v>"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9)"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24)"
    "z0 = 1"
    "$l4 = <compiler.c1.TestUnalignedLoad: long l2v>"
    "$b5 = l1 cmp $l4"
    "if $b5 == 0 goto $d2 = <compiler.c1.TestUnalignedLoad: double d1v>"
    "$r14 = <java.lang.System: java.io.PrintStream out>"
    "$r13 = new java.lang.StringBuilder"
    "$r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1)"
    "specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15)"
    "$r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$l8 = <compiler.c1.TestUnalignedLoad: long l2v>"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18)"
    "$d2 = <compiler.c1.TestUnalignedLoad: double d1v>"
    "$b6 = d0 cmpl $d2"
    "if $b6 == 0 goto $d3 = <compiler.c1.TestUnalignedLoad: double d2v>"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "$r7 = new java.lang.StringBuilder"
    "$r9 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0)"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9)"
    "$r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$d5 = <compiler.c1.TestUnalignedLoad: double d1v>"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "$d3 = <compiler.c1.TestUnalignedLoad: double d2v>"
    "$b7 = d1 cmpl $d3"
    "if $b7 == 0 goto (branch)"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "$r1 = new java.lang.StringBuilder"
    "$r3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d1)"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)"
    "$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$d4 = <compiler.c1.TestUnalignedLoad: double d2v>"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "if z0 == 0 goto return"
    "$r0 = new java.lang.InternalError"
    "specialinvoke $r0.<java.lang.InternalError: void <init>()>()"
    "throw $r0"
    "return"
    "r25 := @parameter0: java.lang.String[]"->"l0 = <compiler.c1.TestUnalignedLoad: long l1v>";
    "l0 = <compiler.c1.TestUnalignedLoad: long l1v>"->"d0 = <compiler.c1.TestUnalignedLoad: double d1v>";
    "d0 = <compiler.c1.TestUnalignedLoad: double d1v>"->"l1 = <compiler.c1.TestUnalignedLoad: long l2v>";
    "l1 = <compiler.c1.TestUnalignedLoad: long l2v>"->"d1 = <compiler.c1.TestUnalignedLoad: double d2v>";
    "d1 = <compiler.c1.TestUnalignedLoad: double d2v>"->"i10 = 0";
    "i10 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < 10000000 goto i10 = i10 + 1";
    "i10 = i10 + 1"->"if i10 < 10000000 goto i10 = i10 + 1";
    "if i10 < 10000000 goto i10 = i10 + 1"->"z0 = 0";
    "if i10 < 10000000 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "z0 = 0"->"$l2 = <compiler.c1.TestUnalignedLoad: long l1v>";
    "$l2 = <compiler.c1.TestUnalignedLoad: long l1v>"->"$b3 = l0 cmp $l2";
    "$b3 = l0 cmp $l2"->"if $b3 == 0 goto $l4 = <compiler.c1.TestUnalignedLoad: long l2v>";
    "if $b3 == 0 goto $l4 = <compiler.c1.TestUnalignedLoad: long l2v>"->"$r20 = <java.lang.System: java.io.PrintStream out>";
    "if $b3 == 0 goto $l4 = <compiler.c1.TestUnalignedLoad: long l2v>"->"$l4 = <compiler.c1.TestUnalignedLoad: long l2v>";
    "$r20 = <java.lang.System: java.io.PrintStream out>"->"$r19 = new java.lang.StringBuilder";
    "$r19 = new java.lang.StringBuilder"->"$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0)";
    "$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0)"->"specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21)";
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21)"->"$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$l9 = <compiler.c1.TestUnalignedLoad: long l1v>";
    "$l9 = <compiler.c1.TestUnalignedLoad: long l1v>"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9)";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9)"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24)";
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24)"->"z0 = 1";
    "z0 = 1"->"$l4 = <compiler.c1.TestUnalignedLoad: long l2v>";
    "$l4 = <compiler.c1.TestUnalignedLoad: long l2v>"->"$b5 = l1 cmp $l4";
    "$b5 = l1 cmp $l4"->"if $b5 == 0 goto $d2 = <compiler.c1.TestUnalignedLoad: double d1v>";
    "if $b5 == 0 goto $d2 = <compiler.c1.TestUnalignedLoad: double d1v>"->"$r14 = <java.lang.System: java.io.PrintStream out>";
    "if $b5 == 0 goto $d2 = <compiler.c1.TestUnalignedLoad: double d1v>"->"$d2 = <compiler.c1.TestUnalignedLoad: double d1v>";
    "$r14 = <java.lang.System: java.io.PrintStream out>"->"$r13 = new java.lang.StringBuilder";
    "$r13 = new java.lang.StringBuilder"->"$r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1)";
    "$r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1)"->"specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15)";
    "specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15)"->"$r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$l8 = <compiler.c1.TestUnalignedLoad: long l2v>";
    "$l8 = <compiler.c1.TestUnalignedLoad: long l2v>"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18)";
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18)"->"z0 = 1";
    "z0 = 1"->"$d2 = <compiler.c1.TestUnalignedLoad: double d1v>";
    "$d2 = <compiler.c1.TestUnalignedLoad: double d1v>"->"$b6 = d0 cmpl $d2";
    "$b6 = d0 cmpl $d2"->"if $b6 == 0 goto $d3 = <compiler.c1.TestUnalignedLoad: double d2v>";
    "if $b6 == 0 goto $d3 = <compiler.c1.TestUnalignedLoad: double d2v>"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "if $b6 == 0 goto $d3 = <compiler.c1.TestUnalignedLoad: double d2v>"->"$d3 = <compiler.c1.TestUnalignedLoad: double d2v>";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"$r9 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0)";
    "$r9 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0)"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9)";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9)"->"$r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$d5 = <compiler.c1.TestUnalignedLoad: double d1v>";
    "$d5 = <compiler.c1.TestUnalignedLoad: double d1v>"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"z0 = 1";
    "z0 = 1"->"$d3 = <compiler.c1.TestUnalignedLoad: double d2v>";
    "$d3 = <compiler.c1.TestUnalignedLoad: double d2v>"->"$b7 = d1 cmpl $d3";
    "$b7 = d1 cmpl $d3"->"if $b7 == 0 goto (branch)";
    "if $b7 == 0 goto (branch)"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "if $b7 == 0 goto (branch)"->"if z0 == 0 goto return";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"$r3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d1)";
    "$r3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d1)"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)"->"$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$d4 = <compiler.c1.TestUnalignedLoad: double d2v>";
    "$d4 = <compiler.c1.TestUnalignedLoad: double d2v>"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"z0 = 1";
    "z0 = 1"->"if z0 == 0 goto return";
    "if z0 == 0 goto return"->"$r0 = new java.lang.InternalError";
    "if z0 == 0 goto return"->"return";
    "$r0 = new java.lang.InternalError"->"specialinvoke $r0.<java.lang.InternalError: void <init>()>()";
    "specialinvoke $r0.<java.lang.InternalError: void <init>()>()"->"throw $r0";
}
