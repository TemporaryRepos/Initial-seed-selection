digraph "unitGraph" {
    "r1 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"
    "i5 = 0"
    "goto [?= (branch)]"
    "$i0 = i5 & 1"
    "if $i0 != 0 goto i5 = i5 + 1"
    "$i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"
    "$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"
    "$i2 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"
    "$i3 = $i1 + $i2"
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"
    "i5 = i5 + 1"
    "if i5 < 1000 goto $i0 = i5 & 1"
    "$i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"
    "return $i4"
    "r1 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"->"i5 = 0";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < 1000 goto $i0 = i5 & 1";
    "$i0 = i5 & 1"->"if $i0 != 0 goto i5 = i5 + 1";
    "if $i0 != 0 goto i5 = i5 + 1"->"$i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>()";
    "if $i0 != 0 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "$i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"->"$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>";
    "$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"->"$i2 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()";
    "$i2 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"->"$i3 = $i1 + $i2";
    "$i3 = $i1 + $i2"->"r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)";
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < 1000 goto $i0 = i5 & 1";
    "if i5 < 1000 goto $i0 = i5 & 1"->"$i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>()";
    "if i5 < 1000 goto $i0 = i5 & 1"->"$i0 = i5 & 1";
    "$i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"->"return $i4";
}
