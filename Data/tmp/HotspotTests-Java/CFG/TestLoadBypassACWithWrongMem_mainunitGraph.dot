digraph "unitGraph" {
    "r19 := @parameter0: java.lang.String[]"
    "r0 = newarray (int)[10]"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"
    "i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0)"
    "if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"
    "$r13 = new java.lang.RuntimeException"
    "$r14 = new java.lang.StringBuilder"
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18)"
    "throw $r13"
    "i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0)"
    "if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"
    "$r7 = new java.lang.RuntimeException"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)"
    "throw $r7"
    "<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0"
    "i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>()"
    "if i3 == 66 goto i0 = i0 + 1"
    "$r1 = new java.lang.RuntimeException"
    "$r2 = new java.lang.StringBuilder"
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)"
    "throw $r1"
    "i0 = i0 + 1"
    "if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"
    "return"
    "r19 := @parameter0: java.lang.String[]"->"r0 = newarray (int)[10]";
    "r0 = newarray (int)[10]"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0)";
    "i1 = staticinvoke <TestLoadBypassACWithWrongMem: int test1(int[])>(r0)"->"if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"$r13 = new java.lang.RuntimeException";
    "if i1 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "$r13 = new java.lang.RuntimeException"->"$r14 = new java.lang.StringBuilder";
    "$r14 = new java.lang.StringBuilder"->"specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")";
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18)";
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18)"->"throw $r13";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0)";
    "i2 = staticinvoke <TestLoadBypassACWithWrongMem: int test2(int[])>(r0)"->"if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"$r7 = new java.lang.RuntimeException";
    "if i2 == 0 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "$r7 = new java.lang.RuntimeException"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)";
    "specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12)"->"throw $r7";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0";
    "<TestLoadBypassACWithWrongMem: java.lang.Object test5_src> = r0"->"i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>()";
    "i3 = staticinvoke <TestLoadBypassACWithWrongMem: int test3()>()"->"if i3 == 66 goto i0 = i0 + 1";
    "if i3 == 66 goto i0 = i0 + 1"->"$r1 = new java.lang.RuntimeException";
    "if i3 == 66 goto i0 = i0 + 1"->"i0 = i0 + 1";
    "$r1 = new java.lang.RuntimeException"->"$r2 = new java.lang.StringBuilder";
    "$r2 = new java.lang.StringBuilder"->"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")";
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"bad result: \")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6)"->"throw $r1";
    "i0 = i0 + 1"->"if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
    "if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"return";
    "if i0 < 20000 goto staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, 0)";
}
