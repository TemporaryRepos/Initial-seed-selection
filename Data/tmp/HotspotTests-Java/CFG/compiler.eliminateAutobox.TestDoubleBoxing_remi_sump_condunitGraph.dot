digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Double"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 & 1"
    "if $i0 != 0 goto i1 = i1 + 1"
    "$d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"
    "$d1 = $d0 + 1.0"
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)"
    "i1 = i1 + 1"
    "if i1 < 1000 goto $i0 = i1 & 1"
    "$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"
    "return $d2"
    "r0 := @parameter0: java.lang.Double"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000 goto $i0 = i1 & 1";
    "$i0 = i1 & 1"->"if $i0 != 0 goto i1 = i1 + 1";
    "if $i0 != 0 goto i1 = i1 + 1"->"$d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()";
    "if $i0 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"->"$d1 = $d0 + 1.0";
    "$d1 = $d0 + 1.0"->"r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)";
    "r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 1000 goto $i0 = i1 & 1";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$i0 = i1 & 1";
    "$d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>()"->"return $d2";
}
