digraph "unitGraph" {
    "i1 := @parameter0: int"
    "i2 = 0"
    "i3 = 0"
    "goto [?= (branch)]"
    "$i0 = i3 % 2"
    "if $i0 != 1 goto i2 = i2 + 1"
    "i2 = i2 * 2"
    "goto [?= $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>]"
    "i2 = i2 + 1"
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$r0[i1] = 999L"
    "i3 = i3 + 1"
    "if i3 < 1000 goto $i0 = i3 % 2"
    "return i2"
    "i1 := @parameter0: int"->"i2 = 0";
    "i2 = 0"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 1000 goto $i0 = i3 % 2";
    "$i0 = i3 % 2"->"if $i0 != 1 goto i2 = i2 + 1";
    "if $i0 != 1 goto i2 = i2 + 1"->"i2 = i2 * 2";
    "if $i0 != 1 goto i2 = i2 + 1"->"i2 = i2 + 1";
    "i2 = i2 * 2"->"goto [?= $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>]";
    "goto [?= $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>]"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "i2 = i2 + 1"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0[i1] = 999L";
    "$r0[i1] = 999L"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 1000 goto $i0 = i3 % 2";
    "if i3 < 1000 goto $i0 = i3 % 2"->"return i2";
    "if i3 < 1000 goto $i0 = i3 % 2"->"$i0 = i3 % 2";
}
