digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.types.TestPhiElimination"
    "specialinvoke $r0.<compiler.types.TestPhiElimination: void <init>()>()"
    "r1 = $r0"
    "$r2 = new compiler.types.TestPhiElimination$B"
    "specialinvoke $r2.<compiler.types.TestPhiElimination$B: void <init>()>()"
    "r3 = $r2"
    "i1 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)"
    "i1 = i1 + 1"
    "if i1 < 1000 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)"
    "$r5 = new compiler.types.TestPhiElimination$A"
    "specialinvoke $r5.<compiler.types.TestPhiElimination$A: void <init>()>()"
    "r8 = $r5"
    "i2 = 0"
    "$i0 = i2 % 2"
    "if $i0 != 0 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)"
    "r8.<compiler.types.TestPhiElimination$A: java.lang.Object f> = null"
    "virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)"
    "i2 = i2 + 1"
    "if i2 < 20000 goto $i0 = i2 % 2"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"$r0 = new compiler.types.TestPhiElimination";
    "$r0 = new compiler.types.TestPhiElimination"->"specialinvoke $r0.<compiler.types.TestPhiElimination: void <init>()>()";
    "specialinvoke $r0.<compiler.types.TestPhiElimination: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new compiler.types.TestPhiElimination$B";
    "$r2 = new compiler.types.TestPhiElimination$B"->"specialinvoke $r2.<compiler.types.TestPhiElimination$B: void <init>()>()";
    "specialinvoke $r2.<compiler.types.TestPhiElimination$B: void <init>()>()"->"r3 = $r2";
    "r3 = $r2"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)";
    "virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 1000 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)";
    "if i1 < 1000 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)"->"$r5 = new compiler.types.TestPhiElimination$A";
    "if i1 < 1000 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)"->"virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r3)";
    "$r5 = new compiler.types.TestPhiElimination$A"->"specialinvoke $r5.<compiler.types.TestPhiElimination$A: void <init>()>()";
    "specialinvoke $r5.<compiler.types.TestPhiElimination$A: void <init>()>()"->"r8 = $r5";
    "r8 = $r5"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 20000 goto $i0 = i2 % 2";
    "$i0 = i2 % 2"->"if $i0 != 0 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)";
    "if $i0 != 0 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)"->"r8.<compiler.types.TestPhiElimination$A: java.lang.Object f> = null";
    "if $i0 != 0 goto virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)"->"virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)";
    "r8.<compiler.types.TestPhiElimination$A: java.lang.Object f> = null"->"virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)";
    "virtualinvoke r1.<compiler.types.TestPhiElimination: java.lang.Object test(compiler.types.TestPhiElimination)>(r8)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 20000 goto $i0 = i2 % 2";
    "if i2 < 20000 goto $i0 = i2 % 2"->"return";
    "if i2 < 20000 goto $i0 = i2 % 2"->"$i0 = i2 % 2";
}
