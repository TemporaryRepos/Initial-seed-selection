digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.c2.Test6695810"
    "specialinvoke $r0.<compiler.c2.Test6695810: void <init>()>()"
    "r1 = $r0"
    "i0 = 0"
    "goto [?= (branch)]"
    "i1 = 0"
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"
    "i1 = i1 + 1"
    "if i1 < 100 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, null)"
    "i0 = i0 + 1"
    "if i0 < 50 goto i1 = 0"
    "i2 = 0"
    "i2 = i2 + 1"
    "if i2 < 10000 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"$r0 = new compiler.c2.Test6695810";
    "$r0 = new compiler.c2.Test6695810"->"specialinvoke $r0.<compiler.c2.Test6695810: void <init>()>()";
    "specialinvoke $r0.<compiler.c2.Test6695810: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 50 goto i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 100 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 100 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "if i1 < 100 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, null)";
    "if i1 < 100 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, null)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 50 goto i1 = 0";
    "if i0 < 50 goto i1 = 0"->"i2 = 0";
    "if i0 < 50 goto i1 = 0"->"i1 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 10000 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 10000 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "if i2 < 10000 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, null)";
    "if i2 < 10000 goto staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)"->"staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, r1)";
    "staticinvoke <compiler.c2.Test6695810: void test(compiler.c2.Test6695810,compiler.c2.Test6695810)>(r1, null)"->"return";
}
