digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r9 := @parameter0: java.lang.String[];
r0 = newarray (int)[20];
i1 = 0;
goto [?= $i0 = lengthof r0];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0[i1] = i1;
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i1 < $i0 goto r0[i1] = i1;
"
    "Block 3:
[preds: 2 ] [succs: 9 ]
i2 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 9 ] [succs: 5 6 ]
i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
if i3 == 155 goto i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
"
    "Block 5:
[preds: 4 ] [succs: ]
$r5 = new java.lang.RuntimeException;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Incorrect result \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);
throw $r5;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
if i4 == 41 goto i2 = i2 + 1;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Incorrect result \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);
throw $r1;
"
    "Block 8:
[preds: 6 ] [succs: 9 ]
i2 = i2 + 1;
"
    "Block 9:
[preds: 3 8 ] [succs: 10 4 ]
if i2 < 20000 goto i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
"
    "Block 10:
[preds: 9 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r9 := @parameter0: java.lang.String[];
r0 = newarray (int)[20];
i1 = 0;
goto [?= $i0 = lengthof r0];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i1 < $i0 goto r0[i1] = i1;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0[i1] = i1;
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i1 < $i0 goto r0[i1] = i1;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i1 < $i0 goto r0[i1] = i1;
"->"Block 3:
[preds: 2 ] [succs: 9 ]
i2 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i1 < $i0 goto r0[i1] = i1;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r0[i1] = i1;
i1 = i1 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 9 ]
i2 = 0;
goto [?= (branch)];
"->"Block 9:
[preds: 3 8 ] [succs: 10 4 ]
if i2 < 20000 goto i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
";
    "Block 4:
[preds: 9 ] [succs: 5 6 ]
i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
if i3 == 155 goto i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
"->"Block 5:
[preds: 4 ] [succs: ]
$r5 = new java.lang.RuntimeException;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Incorrect result \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);
throw $r5;
";
    "Block 4:
[preds: 9 ] [succs: 5 6 ]
i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
if i3 == 155 goto i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
if i4 == 41 goto i2 = i2 + 1;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
if i4 == 41 goto i2 = i2 + 1;
"->"Block 7:
[preds: 6 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Incorrect result \");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);
throw $r1;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
if i4 == 41 goto i2 = i2 + 1;
"->"Block 8:
[preds: 6 ] [succs: 9 ]
i2 = i2 + 1;
";
    "Block 8:
[preds: 6 ] [succs: 9 ]
i2 = i2 + 1;
"->"Block 9:
[preds: 3 8 ] [succs: 10 4 ]
if i2 < 20000 goto i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
";
    "Block 9:
[preds: 3 8 ] [succs: 10 4 ]
if i2 < 20000 goto i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
"->"Block 10:
[preds: 9 ] [succs: ]
return;
";
    "Block 9:
[preds: 3 8 ] [succs: 10 4 ]
if i2 < 20000 goto i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
"->"Block 4:
[preds: 9 ] [succs: 5 6 ]
i3 = staticinvoke <TestCountedLoopBadIVRange: int test1(int[])>(r0);
if i3 == 155 goto i4 = staticinvoke <TestCountedLoopBadIVRange: int test2(int[])>(r0);
";
}
