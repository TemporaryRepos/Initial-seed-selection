digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
$r0 = new java.lang.Integer;
$i0 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>(1);
specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);
r2 = $r0;
i5 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = new java.lang.Integer;
$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
$i2 = $i1 + 1;
$i3 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i2);
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i3);
r2 = $r1;
i5 = i5 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 1000 goto $r1 = new java.lang.Integer;
"
    "Block 3:
[preds: 2 ] [succs: ]
staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>();
$i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
return $i4;
"
    "Block 0:
[preds: ] [succs: 2 ]
$r0 = new java.lang.Integer;
$i0 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>(1);
specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);
r2 = $r0;
i5 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 1000 goto $r1 = new java.lang.Integer;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = new java.lang.Integer;
$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
$i2 = $i1 + 1;
$i3 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i2);
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i3);
r2 = $r1;
i5 = i5 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 1000 goto $r1 = new java.lang.Integer;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 1000 goto $r1 = new java.lang.Integer;
"->"Block 3:
[preds: 2 ] [succs: ]
staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>();
$i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
return $i4;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i5 < 1000 goto $r1 = new java.lang.Integer;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = new java.lang.Integer;
$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
$i2 = $i1 + 1;
$i3 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i2);
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i3);
r2 = $r1;
i5 = i5 + 1;
";
}
