digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "goto [?= (branch)]"
    "$d0 = <compiler.interpreter.Test6539464: double log_value>"
    "d1 = staticinvoke <java.lang.Math: double log(double)>($d0)"
    "$d2 = <compiler.interpreter.Test6539464: double log_result>"
    "$b0 = d1 cmpl $d2"
    "if $b0 == 0 goto i1 = i1 + 1"
    "$r0 = new java.lang.InternalError"
    "$r1 = new java.lang.StringBuilder"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Math.log produces inconsistent results: \")"
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"
    "$d3 = <compiler.interpreter.Test6539464: double log_result>"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3)"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r5)"
    "throw $r0"
    "i1 = i1 + 1"
    "if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>";
    "$d0 = <compiler.interpreter.Test6539464: double log_value>"->"d1 = staticinvoke <java.lang.Math: double log(double)>($d0)";
    "d1 = staticinvoke <java.lang.Math: double log(double)>($d0)"->"$d2 = <compiler.interpreter.Test6539464: double log_result>";
    "$d2 = <compiler.interpreter.Test6539464: double log_result>"->"$b0 = d1 cmpl $d2";
    "$b0 = d1 cmpl $d2"->"if $b0 == 0 goto i1 = i1 + 1";
    "if $b0 == 0 goto i1 = i1 + 1"->"$r0 = new java.lang.InternalError";
    "if $b0 == 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r0 = new java.lang.InternalError"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Math.log produces inconsistent results: \")";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Math.log produces inconsistent results: \")"->"$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)";
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \")"->"$d3 = <compiler.interpreter.Test6539464: double log_result>";
    "$d3 = <compiler.interpreter.Test6539464: double log_result>"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3)";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3)"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r5)";
    "specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r5)"->"throw $r0";
    "i1 = i1 + 1"->"if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>";
    "if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>"->"return";
    "if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>"->"$d0 = <compiler.interpreter.Test6539464: double log_value>";
}
