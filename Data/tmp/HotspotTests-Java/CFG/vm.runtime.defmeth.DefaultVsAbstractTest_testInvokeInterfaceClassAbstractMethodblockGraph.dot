digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 := @this: vm.runtime.defmeth.DefaultVsAbstractTest;
$r1 = r0.<vm.runtime.defmeth.DefaultVsAbstractTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
r2 = virtualinvoke $r1.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: vm.runtime.defmeth.shared.builder.TestBuilder getBuilder()>();
$r3 = virtualinvoke r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.InterfaceBuilder intf(java.lang.String)>(\"I\");
$r4 = virtualinvoke $r3.<vm.runtime.defmeth.shared.builder.InterfaceBuilder: vm.runtime.defmeth.shared.builder.ClassMethodBuilder abstractMethod(java.lang.String,java.lang.String)>(\"m\", \"()I\");
$r5 = virtualinvoke $r4.<vm.runtime.defmeth.shared.builder.ClassMethodBuilder: java.lang.Object build()>();
$r6 = (vm.runtime.defmeth.shared.builder.InterfaceBuilder) $r5;
r7 = virtualinvoke $r6.<vm.runtime.defmeth.shared.builder.InterfaceBuilder: vm.runtime.defmeth.shared.data.Interface build()>();
$r8 = virtualinvoke r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.InterfaceBuilder intf(java.lang.String)>(\"J\");
$r9 = virtualinvoke $r8.<vm.runtime.defmeth.shared.builder.InterfaceBuilder: vm.runtime.defmeth.shared.builder.ClassMethodBuilder abstractMethod(java.lang.String,java.lang.String)>(\"m\", \"()I\");
$r10 = virtualinvoke $r9.<vm.runtime.defmeth.shared.builder.ClassMethodBuilder: java.lang.Object build()>();
$r11 = (vm.runtime.defmeth.shared.builder.InterfaceBuilder) $r10;
r12 = virtualinvoke $r11.<vm.runtime.defmeth.shared.builder.InterfaceBuilder: vm.runtime.defmeth.shared.data.Interface build()>();
$r13 = virtualinvoke r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder clazz(java.lang.String)>(\"A\");
$r14 = newarray (vm.runtime.defmeth.shared.data.Interface)[1];
$r14[0] = r7;
$r15 = virtualinvoke $r13.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder implement(vm.runtime.defmeth.shared.data.Interface[])>($r14);
r16 = virtualinvoke $r15.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.data.ConcreteClass build()>();
$r17 = virtualinvoke r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder clazz(java.lang.String)>(\"B\");
$r18 = virtualinvoke $r17.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder extend(vm.runtime.defmeth.shared.data.ConcreteClass)>(r16);
$r19 = newarray (vm.runtime.defmeth.shared.data.Interface)[1];
$r19[0] = r12;
$r20 = virtualinvoke $r18.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder implement(vm.runtime.defmeth.shared.data.Interface[])>($r19);
r21 = virtualinvoke $r20.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.data.ConcreteClass build()>();
$r22 = r0.<vm.runtime.defmeth.DefaultVsAbstractTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
virtualinvoke $r22.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: java.lang.String getExecutionMode()>();
r24 = class \"Ljava/lang/IncompatibleClassChangeError;\";
$r25 = virtualinvoke r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.TesterBuilder test()>();
$r26 = virtualinvoke $r25.<vm.runtime.defmeth.shared.builder.TesterBuilder: vm.runtime.defmeth.shared.builder.TesterBuilder interfaceCallSite(vm.runtime.defmeth.shared.data.Clazz,vm.runtime.defmeth.shared.data.ConcreteClass,java.lang.String,java.lang.String)>(r16, r21, \"m\", \"()I\");
$r27 = virtualinvoke $r26.<vm.runtime.defmeth.shared.builder.TesterBuilder: vm.runtime.defmeth.shared.builder.TesterBuilder throws_(java.lang.Class)>(r24);
$r28 = virtualinvoke $r27.<vm.runtime.defmeth.shared.builder.TesterBuilder: vm.runtime.defmeth.shared.builder.TestBuilder done()>();
virtualinvoke $r28.<vm.runtime.defmeth.shared.builder.TestBuilder: void run()>();
return;
"
}
