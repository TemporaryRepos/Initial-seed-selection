digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
r0 = newarray (float)[100];
i3 = 0;
goto [?= $i0 = lengthof r0];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0[i3] = 0.0F;
i3 = i3 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i3 < $i0 goto r0[i3] = 0.0F;
"
    "Block 3:
[preds: 2 ] [succs: 10 ]
i4 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 10 ] [succs: 8 ]
staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
i5 = 0;
goto [?= $i1 = lengthof r0];
"
    "Block 5:
[preds: 8 ] [succs: 6 7 ]
$f0 = r0[i5];
$b2 = $f0 cmpl 10000.0F;
if $b2 == 0 goto r0[i5] = 0.0F;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Test failed: array[\");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$f1 = r0[i5];
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" but should be 10.000\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r1;
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
r0[i5] = 0.0F;
i5 = i5 + 1;
"
    "Block 8:
[preds: 4 7 ] [succs: 9 5 ]
$i1 = lengthof r0;
if i5 < $i1 goto $f0 = r0[i5];
"
    "Block 9:
[preds: 8 ] [succs: 10 ]
i4 = i4 + 1;
"
    "Block 10:
[preds: 3 9 ] [succs: 11 4 ]
if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
"
    "Block 11:
[preds: 10 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
r0 = newarray (float)[100];
i3 = 0;
goto [?= $i0 = lengthof r0];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i3 < $i0 goto r0[i3] = 0.0F;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r0[i3] = 0.0F;
i3 = i3 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i3 < $i0 goto r0[i3] = 0.0F;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i3 < $i0 goto r0[i3] = 0.0F;
"->"Block 3:
[preds: 2 ] [succs: 10 ]
i4 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$i0 = lengthof r0;
if i3 < $i0 goto r0[i3] = 0.0F;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r0[i3] = 0.0F;
i3 = i3 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 10 ]
i4 = 0;
goto [?= (branch)];
"->"Block 10:
[preds: 3 9 ] [succs: 11 4 ]
if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
";
    "Block 4:
[preds: 10 ] [succs: 8 ]
staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
i5 = 0;
goto [?= $i1 = lengthof r0];
"->"Block 8:
[preds: 4 7 ] [succs: 9 5 ]
$i1 = lengthof r0;
if i5 < $i1 goto $f0 = r0[i5];
";
    "Block 5:
[preds: 8 ] [succs: 6 7 ]
$f0 = r0[i5];
$b2 = $f0 cmpl 10000.0F;
if $b2 == 0 goto r0[i5] = 0.0F;
"->"Block 6:
[preds: 5 ] [succs: ]
$r1 = new java.lang.RuntimeException;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Test failed: array[\");
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$f1 = r0[i5];
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" but should be 10.000\");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);
throw $r1;
";
    "Block 5:
[preds: 8 ] [succs: 6 7 ]
$f0 = r0[i5];
$b2 = $f0 cmpl 10000.0F;
if $b2 == 0 goto r0[i5] = 0.0F;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
r0[i5] = 0.0F;
i5 = i5 + 1;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
r0[i5] = 0.0F;
i5 = i5 + 1;
"->"Block 8:
[preds: 4 7 ] [succs: 9 5 ]
$i1 = lengthof r0;
if i5 < $i1 goto $f0 = r0[i5];
";
    "Block 8:
[preds: 4 7 ] [succs: 9 5 ]
$i1 = lengthof r0;
if i5 < $i1 goto $f0 = r0[i5];
"->"Block 9:
[preds: 8 ] [succs: 10 ]
i4 = i4 + 1;
";
    "Block 8:
[preds: 4 7 ] [succs: 9 5 ]
$i1 = lengthof r0;
if i5 < $i1 goto $f0 = r0[i5];
"->"Block 5:
[preds: 8 ] [succs: 6 7 ]
$f0 = r0[i5];
$b2 = $f0 cmpl 10000.0F;
if $b2 == 0 goto r0[i5] = 0.0F;
";
    "Block 9:
[preds: 8 ] [succs: 10 ]
i4 = i4 + 1;
"->"Block 10:
[preds: 3 9 ] [succs: 11 4 ]
if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
";
    "Block 10:
[preds: 3 9 ] [succs: 11 4 ]
if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
"->"Block 11:
[preds: 10 ] [succs: ]
return;
";
    "Block 10:
[preds: 3 9 ] [succs: 11 4 ]
if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
"->"Block 4:
[preds: 10 ] [succs: 8 ]
staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0);
i5 = 0;
goto [?= $i1 = lengthof r0];
";
}
