digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
$z0 = staticinvoke <jdk.test.lib.Platform: boolean is32bit()>();
if $z0 == 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();
l0 = virtualinvoke r0.<sun.hotspot.WhiteBox: long metaspaceCapacityUntilGC()>();
$l1 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
l2 = virtualinvoke r0.<sun.hotspot.WhiteBox: long incMetaspaceCapacityUntilGC(long)>($l1);
$r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause wrap around: \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" < \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r1, $r2, $r7);
$r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$l3 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause value larger than MAX_UINT:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertLTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r8, $r9, $r12);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
$z0 = staticinvoke <jdk.test.lib.Platform: boolean is32bit()>();
if $z0 == 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();
l0 = virtualinvoke r0.<sun.hotspot.WhiteBox: long metaspaceCapacityUntilGC()>();
$l1 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
l2 = virtualinvoke r0.<sun.hotspot.WhiteBox: long incMetaspaceCapacityUntilGC(long)>($l1);
$r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause wrap around: \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" < \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r1, $r2, $r7);
$r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$l3 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause value larger than MAX_UINT:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertLTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r8, $r9, $r12);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r13 := @parameter0: java.lang.String[];
$z0 = staticinvoke <jdk.test.lib.Platform: boolean is32bit()>();
if $z0 == 0 goto return;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();
l0 = virtualinvoke r0.<sun.hotspot.WhiteBox: long metaspaceCapacityUntilGC()>();
$l1 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
l2 = virtualinvoke r0.<sun.hotspot.WhiteBox: long incMetaspaceCapacityUntilGC(long)>($l1);
$r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause wrap around: \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" < \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r1, $r2, $r7);
$r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);
$l3 = <TestCapacityUntilGCWrapAround: long MAX_UINT>;
$r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Increasing with MAX_UINT should not cause value larger than MAX_UINT:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <jdk.test.lib.Asserts: void assertLTE(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r8, $r9, $r12);
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
}
