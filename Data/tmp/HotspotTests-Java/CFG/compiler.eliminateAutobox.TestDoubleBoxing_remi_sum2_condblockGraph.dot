digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 5 ]
$r0 = new java.lang.Double;
specialinvoke $r0.<java.lang.Double: void <init>(double)>(1.0);
r4 = $r0;
$r1 = new java.lang.Double;
specialinvoke $r1.<java.lang.Double: void <init>(double)>(1.0);
r5 = $r1;
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
$i0 = i1 & 1;
if $i0 != 0 goto $r2 = new java.lang.Double;
"
    "Block 2:
[preds: 1 ] [succs: 4 ]
$r3 = new java.lang.Double;
$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();
$d3 = $d2 + 1.0;
specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3);
r4 = $r3;
goto [?= i1 = i1 + 1];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Double;
$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();
$d1 = $d0 + 2.0;
specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1);
r5 = $r2;
"
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
i1 = i1 + 1;
"
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i1 < 1000 goto $i0 = i1 & 1;
"
    "Block 6:
[preds: 5 ] [succs: ]
$d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();
$d5 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();
$d6 = $d4 + $d5;
return $d6;
"
    "Block 0:
[preds: ] [succs: 5 ]
$r0 = new java.lang.Double;
specialinvoke $r0.<java.lang.Double: void <init>(double)>(1.0);
r4 = $r0;
$r1 = new java.lang.Double;
specialinvoke $r1.<java.lang.Double: void <init>(double)>(1.0);
r5 = $r1;
i1 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i1 < 1000 goto $i0 = i1 & 1;
";
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
$i0 = i1 & 1;
if $i0 != 0 goto $r2 = new java.lang.Double;
"->"Block 2:
[preds: 1 ] [succs: 4 ]
$r3 = new java.lang.Double;
$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();
$d3 = $d2 + 1.0;
specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3);
r4 = $r3;
goto [?= i1 = i1 + 1];
";
    "Block 1:
[preds: 5 ] [succs: 2 3 ]
$i0 = i1 & 1;
if $i0 != 0 goto $r2 = new java.lang.Double;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Double;
$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();
$d1 = $d0 + 2.0;
specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1);
r5 = $r2;
";
    "Block 2:
[preds: 1 ] [succs: 4 ]
$r3 = new java.lang.Double;
$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();
$d3 = $d2 + 1.0;
specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3);
r4 = $r3;
goto [?= i1 = i1 + 1];
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
i1 = i1 + 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Double;
$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();
$d1 = $d0 + 2.0;
specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1);
r5 = $r2;
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
i1 = i1 + 1;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
i1 = i1 + 1;
"->"Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i1 < 1000 goto $i0 = i1 & 1;
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i1 < 1000 goto $i0 = i1 & 1;
"->"Block 6:
[preds: 5 ] [succs: ]
$d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();
$d5 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();
$d6 = $d4 + $d5;
return $d6;
";
    "Block 5:
[preds: 0 4 ] [succs: 6 1 ]
if i1 < 1000 goto $i0 = i1 & 1;
"->"Block 1:
[preds: 5 ] [succs: 2 3 ]
$i0 = i1 & 1;
if $i0 != 0 goto $r2 = new java.lang.Double;
";
}
