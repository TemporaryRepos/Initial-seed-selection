digraph "unitGraph" {
    "r1 := @this: compiler.osr.TestOSRWithNonEmptyStack"
    "r0 = staticinvoke <compiler.osr.TestOSRWithNonEmptyStack: byte[] generateTestClass()>()"
    "$i0 = lengthof r0"
    "r12 = virtualinvoke r1.<compiler.osr.TestOSRWithNonEmptyStack: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestCase\", r0, 0, $i0)"
    "$r2 = newarray (java.lang.Class)[0]"
    "r3 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2)"
    "$r4 = newarray (java.lang.Class)[0]"
    "r5 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"test\", $r4)"
    "$r6 = newarray (java.lang.Object)[0]"
    "r7 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)"
    "$r8 = newarray (java.lang.Object)[0]"
    "virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8)"
    "goto [?= return]"
    "$r10 := @caughtexception"
    "r13 = $r10"
    "$r11 = new java.lang.RuntimeException"
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Test bug: generated class should be valid.\", r13)"
    "throw $r11"
    "return"
    "r1 := @this: compiler.osr.TestOSRWithNonEmptyStack"->"r0 = staticinvoke <compiler.osr.TestOSRWithNonEmptyStack: byte[] generateTestClass()>()";
    "r0 = staticinvoke <compiler.osr.TestOSRWithNonEmptyStack: byte[] generateTestClass()>()"->"$i0 = lengthof r0";
    "r0 = staticinvoke <compiler.osr.TestOSRWithNonEmptyStack: byte[] generateTestClass()>()"->"$r10 := @caughtexception";
    "$i0 = lengthof r0"->"r12 = virtualinvoke r1.<compiler.osr.TestOSRWithNonEmptyStack: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestCase\", r0, 0, $i0)";
    "$i0 = lengthof r0"->"$r10 := @caughtexception";
    "r12 = virtualinvoke r1.<compiler.osr.TestOSRWithNonEmptyStack: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestCase\", r0, 0, $i0)"->"$r2 = newarray (java.lang.Class)[0]";
    "r12 = virtualinvoke r1.<compiler.osr.TestOSRWithNonEmptyStack: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestCase\", r0, 0, $i0)"->"$r10 := @caughtexception";
    "$r2 = newarray (java.lang.Class)[0]"->"r3 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2)";
    "$r2 = newarray (java.lang.Class)[0]"->"$r10 := @caughtexception";
    "r3 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2)"->"$r4 = newarray (java.lang.Class)[0]";
    "r3 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2)"->"$r10 := @caughtexception";
    "$r4 = newarray (java.lang.Class)[0]"->"r5 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"test\", $r4)";
    "$r4 = newarray (java.lang.Class)[0]"->"$r10 := @caughtexception";
    "r5 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"test\", $r4)"->"$r6 = newarray (java.lang.Object)[0]";
    "r5 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"test\", $r4)"->"$r10 := @caughtexception";
    "$r6 = newarray (java.lang.Object)[0]"->"r7 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)";
    "$r6 = newarray (java.lang.Object)[0]"->"$r10 := @caughtexception";
    "r7 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)"->"$r8 = newarray (java.lang.Object)[0]";
    "r7 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)"->"$r10 := @caughtexception";
    "$r8 = newarray (java.lang.Object)[0]"->"virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8)";
    "$r8 = newarray (java.lang.Object)[0]"->"$r10 := @caughtexception";
    "virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8)"->"goto [?= return]";
    "virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8)"->"$r10 := @caughtexception";
    "goto [?= return]"->"return";
    "$r10 := @caughtexception"->"r13 = $r10";
    "r13 = $r10"->"$r11 = new java.lang.RuntimeException";
    "$r11 = new java.lang.RuntimeException"->"specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Test bug: generated class should be valid.\", r13)";
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Test bug: generated class should be valid.\", r13)"->"throw $r11";
}
