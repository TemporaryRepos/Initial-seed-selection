digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "b0 = 8"
    "d0 = 1.0"
    "r0 = newmultiarray (double)[b0][b0]"
    "$r1 = new jit.FloatingPoint.gen_math.Loops07.Loops07"
    "specialinvoke $r1.<jit.FloatingPoint.gen_math.Loops07.Loops07: void <init>()>()"
    "i6 = 0"
    "goto [?= (branch)]"
    "i7 = 0"
    "$i2 = i6 * i6"
    "$i1 = i7 * i7"
    "$i3 = $i2 + $i1"
    "d1 = (double) $i3"
    "d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1)"
    "d3 = 1.0 / d2"
    "$i4 = i6 + i7"
    "d4 = (double) $i4"
    "d5 = d4 / d3"
    "$r2 = r0[i6]"
    "$r2[i7] = d5"
    "i7 = i7 + 1"
    "if i7 < b0 goto $i2 = i6 * i6"
    "i6 = i6 + 1"
    "if i6 < b0 goto i7 = 0"
    "d19 = 0.0"
    "i8 = 0"
    "i9 = 0"
    "$r3 = r0[i8]"
    "$d6 = $r3[i9]"
    "$d7 = 0.5 * $d6"
    "d19 = d19 - $d7"
    "i10 = 0"
    "i11 = 0"
    "$r4 = r0[i10]"
    "$d8 = $r4[i11]"
    "d19 = d19 + $d8"
    "i12 = 0"
    "i13 = 0"
    "i14 = 0"
    "$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)"
    "$d10 = 4.0 - $d9"
    "$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10)"
    "$d12 = 3.0 + $d11"
    "$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12)"
    "$d14 = 2.0 + $d13"
    "$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14)"
    "$d16 = 1.0 + $d15"
    "staticinvoke <java.lang.Math: double abs(double)>($d16)"
    "i14 = i14 + 1"
    "if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)"
    "i13 = i13 + 1"
    "if i13 < b0 goto i14 = 0"
    "i12 = i12 + 1"
    "if i12 < b0 goto i13 = 0"
    "i11 = i11 + 1"
    "if i11 < b0 goto $r4 = r0[i10]"
    "i10 = i10 + 1"
    "if i10 < b0 goto i11 = 0"
    "i9 = i9 + 1"
    "if i9 < b0 goto $r3 = r0[i8]"
    "i8 = i8 + 1"
    "if i8 < b0 goto i9 = 0"
    "$d18 = 184401.0 - d19"
    "d20 = staticinvoke <java.lang.Math: double abs(double)>($d18)"
    "$b5 = d20 cmpg d0"
    "if $b5 >= 0 goto $r5 = new nsk.share.TestFailure"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")"
    "goto [?= return]"
    "$r5 = new nsk.share.TestFailure"
    "specialinvoke $r5.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")"
    "throw $r5"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"b0 = 8";
    "b0 = 8"->"d0 = 1.0";
    "d0 = 1.0"->"r0 = newmultiarray (double)[b0][b0]";
    "r0 = newmultiarray (double)[b0][b0]"->"$r1 = new jit.FloatingPoint.gen_math.Loops07.Loops07";
    "$r1 = new jit.FloatingPoint.gen_math.Loops07.Loops07"->"specialinvoke $r1.<jit.FloatingPoint.gen_math.Loops07.Loops07: void <init>()>()";
    "specialinvoke $r1.<jit.FloatingPoint.gen_math.Loops07.Loops07: void <init>()>()"->"i6 = 0";
    "i6 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < b0 goto i7 = 0";
    "i7 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < b0 goto $i2 = i6 * i6";
    "$i2 = i6 * i6"->"$i1 = i7 * i7";
    "$i1 = i7 * i7"->"$i3 = $i2 + $i1";
    "$i3 = $i2 + $i1"->"d1 = (double) $i3";
    "d1 = (double) $i3"->"d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1)";
    "d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1)"->"d3 = 1.0 / d2";
    "d3 = 1.0 / d2"->"$i4 = i6 + i7";
    "$i4 = i6 + i7"->"d4 = (double) $i4";
    "d4 = (double) $i4"->"d5 = d4 / d3";
    "d5 = d4 / d3"->"$r2 = r0[i6]";
    "$r2 = r0[i6]"->"$r2[i7] = d5";
    "$r2[i7] = d5"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < b0 goto $i2 = i6 * i6";
    "if i7 < b0 goto $i2 = i6 * i6"->"i6 = i6 + 1";
    "if i7 < b0 goto $i2 = i6 * i6"->"$i2 = i6 * i6";
    "i6 = i6 + 1"->"if i6 < b0 goto i7 = 0";
    "if i6 < b0 goto i7 = 0"->"d19 = 0.0";
    "if i6 < b0 goto i7 = 0"->"i7 = 0";
    "d19 = 0.0"->"i8 = 0";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < b0 goto i9 = 0";
    "i9 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < b0 goto $r3 = r0[i8]";
    "$r3 = r0[i8]"->"$d6 = $r3[i9]";
    "$d6 = $r3[i9]"->"$d7 = 0.5 * $d6";
    "$d7 = 0.5 * $d6"->"d19 = d19 - $d7";
    "d19 = d19 - $d7"->"i10 = 0";
    "i10 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < b0 goto i11 = 0";
    "i11 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 < b0 goto $r4 = r0[i10]";
    "$r4 = r0[i10]"->"$d8 = $r4[i11]";
    "$d8 = $r4[i11]"->"d19 = d19 + $d8";
    "d19 = d19 + $d8"->"i12 = 0";
    "i12 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 < b0 goto i13 = 0";
    "i13 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i13 < b0 goto i14 = 0";
    "i14 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)";
    "$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)"->"$d10 = 4.0 - $d9";
    "$d10 = 4.0 - $d9"->"$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10)";
    "$d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10)"->"$d12 = 3.0 + $d11";
    "$d12 = 3.0 + $d11"->"$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12)";
    "$d13 = staticinvoke <java.lang.Math: double cos(double)>($d12)"->"$d14 = 2.0 + $d13";
    "$d14 = 2.0 + $d13"->"$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14)";
    "$d15 = staticinvoke <java.lang.Math: double sin(double)>($d14)"->"$d16 = 1.0 + $d15";
    "$d16 = 1.0 + $d15"->"staticinvoke <java.lang.Math: double abs(double)>($d16)";
    "staticinvoke <java.lang.Math: double abs(double)>($d16)"->"i14 = i14 + 1";
    "i14 = i14 + 1"->"if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)";
    "if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)"->"i13 = i13 + 1";
    "if i14 < b0 goto $d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)"->"$d9 = staticinvoke <java.lang.Math: double cos(double)>(5.0)";
    "i13 = i13 + 1"->"if i13 < b0 goto i14 = 0";
    "if i13 < b0 goto i14 = 0"->"i12 = i12 + 1";
    "if i13 < b0 goto i14 = 0"->"i14 = 0";
    "i12 = i12 + 1"->"if i12 < b0 goto i13 = 0";
    "if i12 < b0 goto i13 = 0"->"i11 = i11 + 1";
    "if i12 < b0 goto i13 = 0"->"i13 = 0";
    "i11 = i11 + 1"->"if i11 < b0 goto $r4 = r0[i10]";
    "if i11 < b0 goto $r4 = r0[i10]"->"i10 = i10 + 1";
    "if i11 < b0 goto $r4 = r0[i10]"->"$r4 = r0[i10]";
    "i10 = i10 + 1"->"if i10 < b0 goto i11 = 0";
    "if i10 < b0 goto i11 = 0"->"i9 = i9 + 1";
    "if i10 < b0 goto i11 = 0"->"i11 = 0";
    "i9 = i9 + 1"->"if i9 < b0 goto $r3 = r0[i8]";
    "if i9 < b0 goto $r3 = r0[i8]"->"i8 = i8 + 1";
    "if i9 < b0 goto $r3 = r0[i8]"->"$r3 = r0[i8]";
    "i8 = i8 + 1"->"if i8 < b0 goto i9 = 0";
    "if i8 < b0 goto i9 = 0"->"$d18 = 184401.0 - d19";
    "if i8 < b0 goto i9 = 0"->"i9 = 0";
    "$d18 = 184401.0 - d19"->"d20 = staticinvoke <java.lang.Math: double abs(double)>($d18)";
    "d20 = staticinvoke <java.lang.Math: double abs(double)>($d18)"->"$b5 = d20 cmpg d0";
    "$b5 = d20 cmpg d0"->"if $b5 >= 0 goto $r5 = new nsk.share.TestFailure";
    "if $b5 >= 0 goto $r5 = new nsk.share.TestFailure"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "if $b5 >= 0 goto $r5 = new nsk.share.TestFailure"->"$r5 = new nsk.share.TestFailure";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\")"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r5 = new nsk.share.TestFailure"->"specialinvoke $r5.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")";
    "specialinvoke $r5.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\")"->"throw $r5";
}
