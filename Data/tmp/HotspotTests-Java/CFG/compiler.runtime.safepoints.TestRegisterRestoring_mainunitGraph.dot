digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "r0 = newarray (float)[100]"
    "i3 = 0"
    "goto [?= $i0 = lengthof r0]"
    "r0[i3] = 0.0F"
    "i3 = i3 + 1"
    "$i0 = lengthof r0"
    "if i3 < $i0 goto r0[i3] = 0.0F"
    "i4 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)"
    "i5 = 0"
    "goto [?= $i1 = lengthof r0]"
    "$f0 = r0[i5]"
    "$b2 = $f0 cmpl 10000.0F"
    "if $b2 == 0 goto r0[i5] = 0.0F"
    "$r1 = new java.lang.RuntimeException"
    "$r2 = new java.lang.StringBuilder"
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Test failed: array[\")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"
    "$f1 = r0[i5]"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" but should be 10.000\")"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"
    "throw $r1"
    "r0[i5] = 0.0F"
    "i5 = i5 + 1"
    "$i1 = lengthof r0"
    "if i5 < $i1 goto $f0 = r0[i5]"
    "i4 = i4 + 1"
    "if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"r0 = newarray (float)[100]";
    "r0 = newarray (float)[100]"->"i3 = 0";
    "i3 = 0"->"goto [?= $i0 = lengthof r0]";
    "goto [?= $i0 = lengthof r0]"->"$i0 = lengthof r0";
    "r0[i3] = 0.0F"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if i3 < $i0 goto r0[i3] = 0.0F";
    "if i3 < $i0 goto r0[i3] = 0.0F"->"i4 = 0";
    "if i3 < $i0 goto r0[i3] = 0.0F"->"r0[i3] = 0.0F";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)";
    "staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)"->"i5 = 0";
    "i5 = 0"->"goto [?= $i1 = lengthof r0]";
    "goto [?= $i1 = lengthof r0]"->"$i1 = lengthof r0";
    "$f0 = r0[i5]"->"$b2 = $f0 cmpl 10000.0F";
    "$b2 = $f0 cmpl 10000.0F"->"if $b2 == 0 goto r0[i5] = 0.0F";
    "if $b2 == 0 goto r0[i5] = 0.0F"->"$r1 = new java.lang.RuntimeException";
    "if $b2 == 0 goto r0[i5] = 0.0F"->"r0[i5] = 0.0F";
    "$r1 = new java.lang.RuntimeException"->"$r2 = new java.lang.StringBuilder";
    "$r2 = new java.lang.StringBuilder"->"specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Test failed: array[\")";
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Test failed: array[\")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \")"->"$f1 = r0[i5]";
    "$f1 = r0[i5]"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1)";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" but should be 10.000\")";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" but should be 10.000\")"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)";
    "specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7)"->"throw $r1";
    "r0[i5] = 0.0F"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"if i5 < $i1 goto $f0 = r0[i5]";
    "if i5 < $i1 goto $f0 = r0[i5]"->"i4 = i4 + 1";
    "if i5 < $i1 goto $f0 = r0[i5]"->"$f0 = r0[i5]";
    "i4 = i4 + 1"->"if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)";
    "if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)"->"return";
    "if i4 < 20000 goto staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)"->"staticinvoke <compiler.runtime.safepoints.TestRegisterRestoring: void increment(float[])>(r0)";
}
