digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.c2.aarch64.TestVolatileLoad"
    "specialinvoke $r0.<compiler.c2.aarch64.TestVolatileLoad: void <init>()>()"
    "r1 = $r0"
    "i0 = 0"
    "goto [?= (branch)]"
    "r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0"
    "i1 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testInt()>()"
    "if i1 == i0 goto i0 = i0 + 1"
    "$r2 = new java.lang.RuntimeException"
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")"
    "throw $r2"
    "i0 = i0 + 1"
    "if i0 < 100000 goto r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0"
    "i2 = 0"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "r1.<compiler.c2.aarch64.TestVolatileLoad: java.lang.Integer f_obj> = $r3"
    "i3 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testObj()>()"
    "if i3 == i2 goto i2 = i2 + 1"
    "$r4 = new java.lang.RuntimeException"
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")"
    "throw $r4"
    "i2 = i2 + 1"
    "if i2 < 100000 goto $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"$r0 = new compiler.c2.aarch64.TestVolatileLoad";
    "$r0 = new compiler.c2.aarch64.TestVolatileLoad"->"specialinvoke $r0.<compiler.c2.aarch64.TestVolatileLoad: void <init>()>()";
    "specialinvoke $r0.<compiler.c2.aarch64.TestVolatileLoad: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 100000 goto r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0";
    "r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0"->"i1 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testInt()>()";
    "i1 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testInt()>()"->"if i1 == i0 goto i0 = i0 + 1";
    "if i1 == i0 goto i0 = i0 + 1"->"$r2 = new java.lang.RuntimeException";
    "if i1 == i0 goto i0 = i0 + 1"->"i0 = i0 + 1";
    "$r2 = new java.lang.RuntimeException"->"specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")";
    "specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")"->"throw $r2";
    "i0 = i0 + 1"->"if i0 < 100000 goto r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0";
    "if i0 < 100000 goto r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0"->"i2 = 0";
    "if i0 < 100000 goto r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0"->"r1.<compiler.c2.aarch64.TestVolatileLoad: int f_int> = i0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 100000 goto $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"r1.<compiler.c2.aarch64.TestVolatileLoad: java.lang.Integer f_obj> = $r3";
    "r1.<compiler.c2.aarch64.TestVolatileLoad: java.lang.Integer f_obj> = $r3"->"i3 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testObj()>()";
    "i3 = virtualinvoke r1.<compiler.c2.aarch64.TestVolatileLoad: int testObj()>()"->"if i3 == i2 goto i2 = i2 + 1";
    "if i3 == i2 goto i2 = i2 + 1"->"$r4 = new java.lang.RuntimeException";
    "if i3 == i2 goto i2 = i2 + 1"->"i2 = i2 + 1";
    "$r4 = new java.lang.RuntimeException"->"specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")";
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad result!\")"->"throw $r4";
    "i2 = i2 + 1"->"if i2 < 100000 goto $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "if i2 < 100000 goto $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"return";
    "if i2 < 100000 goto $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
}
