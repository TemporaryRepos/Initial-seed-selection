digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @parameter0: java.lang.String[];
i3 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <java.lang.Math: long round(double)>(#NaN);
i3 = i3 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN);
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0);
$b2 = $l1 cmp 1L;
if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r1 = new java.lang.AssertionError;
specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"TEST FAILED\");
throw $r1;
"
    "Block 5:
[preds: 3 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Test passed.\");
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @parameter0: java.lang.String[];
i3 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <java.lang.Math: long round(double)>(#NaN);
i3 = i3 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN);
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0);
$b2 = $l1 cmp 1L;
if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <java.lang.Math: long round(double)>(#NaN);
i3 = i3 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0);
$b2 = $l1 cmp 1L;
if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 4:
[preds: 3 ] [succs: ]
$r1 = new java.lang.AssertionError;
specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"TEST FAILED\");
throw $r1;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0);
$b2 = $l1 cmp 1L;
if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 5:
[preds: 3 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Test passed.\");
return;
";
}
