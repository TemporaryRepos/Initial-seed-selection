digraph "unitGraph" {
    "r1 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "i9 = 0"
    "goto [?= (branch)]"
    "$i0 = i9 & 1"
    "if $i0 != 0 goto $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"
    "$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"
    "$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"
    "$i4 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"
    "$i5 = $i3 + $i4"
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"
    "goto [?= i9 = i9 + 1]"
    "$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"
    "$i2 = $i1 + 2"
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "i9 = i9 + 1"
    "if i9 < 1000 goto $i0 = i9 & 1"
    "$i6 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"
    "$i7 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"
    "$i8 = $i6 + $i7"
    "return $i8"
    "r1 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"->"r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"i9 = 0";
    "i9 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < 1000 goto $i0 = i9 & 1";
    "$i0 = i9 & 1"->"if $i0 != 0 goto $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()";
    "if $i0 != 0 goto $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()";
    "if $i0 != 0 goto $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()";
    "$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"->"$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>";
    "$r0 = <compiler.eliminateAutobox.TestIntBoxing: java.lang.Integer ibc>"->"$i4 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()";
    "$i4 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"->"$i5 = $i3 + $i4";
    "$i5 = $i3 + $i4"->"r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)";
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"->"goto [?= i9 = i9 + 1]";
    "goto [?= i9 = i9 + 1]"->"i9 = i9 + 1";
    "$i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"$i2 = $i1 + 2";
    "$i2 = $i1 + 2"->"r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"if i9 < 1000 goto $i0 = i9 & 1";
    "if i9 < 1000 goto $i0 = i9 & 1"->"$i6 = virtualinvoke r1.<java.lang.Integer: int intValue()>()";
    "if i9 < 1000 goto $i0 = i9 & 1"->"$i0 = i9 & 1";
    "$i6 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"->"$i7 = virtualinvoke r2.<java.lang.Integer: int intValue()>()";
    "$i7 = virtualinvoke r2.<java.lang.Integer: int intValue()>()"->"$i8 = $i6 + $i7";
    "$i8 = $i6 + $i7"->"return $i8";
}
