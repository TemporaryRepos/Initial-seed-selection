digraph "unitGraph" {
    "i0 := @parameter0: int"
    "if i0 != 0 goto $r0 = new TreeNode"
    "return null"
    "$r0 = new TreeNode"
    "specialinvoke $r0.<TreeNode: void <init>()>()"
    "r1 = $r0"
    "$l1 = <TestGCOld: long nodes>"
    "$l2 = $l1 + 1L"
    "<TestGCOld: long nodes> = $l2"
    "$i3 = i0 - 1"
    "$r2 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i3)"
    "r1.<TreeNode: TreeNode left> = $r2"
    "$i4 = i0 - 1"
    "$r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i4)"
    "r1.<TreeNode: TreeNode right> = $r3"
    "r1.<TreeNode: int val> = i0"
    "return r1"
    "i0 := @parameter0: int"->"if i0 != 0 goto $r0 = new TreeNode";
    "if i0 != 0 goto $r0 = new TreeNode"->"return null";
    "if i0 != 0 goto $r0 = new TreeNode"->"$r0 = new TreeNode";
    "$r0 = new TreeNode"->"specialinvoke $r0.<TreeNode: void <init>()>()";
    "specialinvoke $r0.<TreeNode: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$l1 = <TestGCOld: long nodes>";
    "$l1 = <TestGCOld: long nodes>"->"$l2 = $l1 + 1L";
    "$l2 = $l1 + 1L"->"<TestGCOld: long nodes> = $l2";
    "<TestGCOld: long nodes> = $l2"->"$i3 = i0 - 1";
    "$i3 = i0 - 1"->"$r2 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i3)";
    "$r2 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i3)"->"r1.<TreeNode: TreeNode left> = $r2";
    "r1.<TreeNode: TreeNode left> = $r2"->"$i4 = i0 - 1";
    "$i4 = i0 - 1"->"$r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i4)";
    "$r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>($i4)"->"r1.<TreeNode: TreeNode right> = $r3";
    "r1.<TreeNode: TreeNode right> = $r3"->"r1.<TreeNode: int val> = i0";
    "r1.<TreeNode: int val> = i0"->"return r1";
}
