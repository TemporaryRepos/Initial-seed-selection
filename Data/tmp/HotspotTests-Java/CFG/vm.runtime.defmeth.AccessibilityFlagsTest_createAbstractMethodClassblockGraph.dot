digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 := @this: vm.runtime.defmeth.AccessibilityFlagsTest;
i0 := @parameter0: int;
$r1 = r0.<vm.runtime.defmeth.AccessibilityFlagsTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
$r2 = virtualinvoke $r1.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: vm.runtime.defmeth.shared.builder.TestBuilder getBuilder()>();
$r3 = virtualinvoke $r2.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.builder.ConcreteClassBuilder clazz(java.lang.String)>(\"I\");
$r4 = virtualinvoke $r3.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.builder.ClassMethodBuilder abstractMethod(java.lang.String,java.lang.String)>(\"m\", \"()V\");
$r5 = virtualinvoke $r4.<vm.runtime.defmeth.shared.builder.ClassMethodBuilder: vm.runtime.defmeth.shared.builder.ClassMethodBuilder flags(int)>(i0);
$r6 = virtualinvoke $r5.<vm.runtime.defmeth.shared.builder.ClassMethodBuilder: java.lang.Object build()>();
$r7 = (vm.runtime.defmeth.shared.builder.ConcreteClassBuilder) $r6;
$r8 = virtualinvoke $r7.<vm.runtime.defmeth.shared.builder.ConcreteClassBuilder: vm.runtime.defmeth.shared.data.ConcreteClass build()>();
return $r8;
"
}
