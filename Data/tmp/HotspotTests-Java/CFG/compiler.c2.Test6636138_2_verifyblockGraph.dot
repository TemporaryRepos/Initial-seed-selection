digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 4 ]
r0 := @parameter0: int[];
i7 = 0;
goto [?= $i8 = lengthof r0];
"
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$i1 = i7 - 1;
$i0 = lengthof r0;
$i3 = $i1 + $i0;
$i2 = lengthof r0;
i4 = $i3 % $i2;
$i5 = r0[i7];
if $i5 == i4 goto i7 = i7 + 1;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Error: src[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] should be \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" instead of \");
$i6 = r0[i7];
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);
staticinvoke <java.lang.System: void exit(int)>(97);
"
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
i7 = i7 + 1;
"
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
$i8 = lengthof r0;
if i7 < $i8 goto $i1 = i7 - 1;
"
    "Block 5:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 4 ]
r0 := @parameter0: int[];
i7 = 0;
goto [?= $i8 = lengthof r0];
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
$i8 = lengthof r0;
if i7 < $i8 goto $i1 = i7 - 1;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$i1 = i7 - 1;
$i0 = lengthof r0;
$i3 = $i1 + $i0;
$i2 = lengthof r0;
i4 = $i3 % $i2;
$i5 = r0[i7];
if $i5 == i4 goto i7 = i7 + 1;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Error: src[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] should be \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" instead of \");
$i6 = r0[i7];
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);
staticinvoke <java.lang.System: void exit(int)>(97);
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$i1 = i7 - 1;
$i0 = lengthof r0;
$i3 = $i1 + $i0;
$i2 = lengthof r0;
i4 = $i3 % $i2;
$i5 = r0[i7];
if $i5 == i4 goto i7 = i7 + 1;
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
i7 = i7 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Error: src[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] should be \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" instead of \");
$i6 = r0[i7];
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);
staticinvoke <java.lang.System: void exit(int)>(97);
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
i7 = i7 + 1;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
i7 = i7 + 1;
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
$i8 = lengthof r0;
if i7 < $i8 goto $i1 = i7 - 1;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
$i8 = lengthof r0;
if i7 < $i8 goto $i1 = i7 - 1;
"->"Block 5:
[preds: 4 ] [succs: ]
return;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
$i8 = lengthof r0;
if i7 < $i8 goto $i1 = i7 - 1;
"->"Block 1:
[preds: 4 ] [succs: 2 3 ]
$i1 = i7 - 1;
$i0 = lengthof r0;
$i3 = $i1 + $i0;
$i2 = lengthof r0;
i4 = $i3 % $i2;
$i5 = r0[i7];
if $i5 == i4 goto i7 = i7 + 1;
";
}
