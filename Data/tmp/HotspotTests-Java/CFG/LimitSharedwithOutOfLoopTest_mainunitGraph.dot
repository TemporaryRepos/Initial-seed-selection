digraph "unitGraph" {
    "r6 := @parameter0: java.lang.String[]"
    "r0 = newarray (boolean)[2001]"
    "r1 = newarray (boolean)[2001]"
    "r2 = newarray (boolean)[2001]"
    "r1[1000] = 1"
    "r2[2000] = 1"
    "i0 = 0"
    "goto [?= (branch)]"
    "$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)"
    "if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)"
    "$r5 = new java.lang.RuntimeException"
    "specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"
    "throw $r5"
    "$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)"
    "if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)"
    "$r4 = new java.lang.RuntimeException"
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"
    "throw $r4"
    "$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)"
    "if $z2 == 0 goto i0 = i0 + 1"
    "$r3 = new java.lang.RuntimeException"
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"
    "throw $r3"
    "i0 = i0 + 1"
    "if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)"
    "return"
    "r6 := @parameter0: java.lang.String[]"->"r0 = newarray (boolean)[2001]";
    "r0 = newarray (boolean)[2001]"->"r1 = newarray (boolean)[2001]";
    "r1 = newarray (boolean)[2001]"->"r2 = newarray (boolean)[2001]";
    "r2 = newarray (boolean)[2001]"->"r1[1000] = 1";
    "r1[1000] = 1"->"r2[2000] = 1";
    "r2[2000] = 1"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)";
    "$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)"->"if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)";
    "if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)"->"$r5 = new java.lang.RuntimeException";
    "if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)"->"$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)";
    "$r5 = new java.lang.RuntimeException"->"specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")";
    "specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"->"throw $r5";
    "$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1)"->"if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)";
    "if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)"->"$r4 = new java.lang.RuntimeException";
    "if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)"->"$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)";
    "$r4 = new java.lang.RuntimeException"->"specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")";
    "specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"->"throw $r4";
    "$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2)"->"if $z2 == 0 goto i0 = i0 + 1";
    "if $z2 == 0 goto i0 = i0 + 1"->"$r3 = new java.lang.RuntimeException";
    "if $z2 == 0 goto i0 = i0 + 1"->"i0 = i0 + 1";
    "$r3 = new java.lang.RuntimeException"->"specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")";
    "specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\")"->"throw $r3";
    "i0 = i0 + 1"->"if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)";
    "if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)"->"return";
    "if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)"->"$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0)";
}
