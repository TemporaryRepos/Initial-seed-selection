digraph "unitGraph" {
    "r1 := @parameter0: int[]"
    "i0 := @parameter1: int"
    "z1 := @parameter2: boolean"
    "r0 = newarray (int)[10]"
    "i1 = 0"
    "goto [?= $z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()]"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"
    "i1 = r0[0]"
    "$z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()"
    "if $z0 != 0 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"
    "return i1"
    "r1 := @parameter0: int[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"z1 := @parameter2: boolean";
    "z1 := @parameter2: boolean"->"r0 = newarray (int)[10]";
    "r0 = newarray (int)[10]"->"i1 = 0";
    "i1 = 0"->"goto [?= $z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()]";
    "goto [?= $z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()]"->"$z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"->"i1 = r0[0]";
    "i1 = r0[0]"->"$z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()";
    "$z0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: boolean test_helper()>()"->"if $z0 != 0 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)";
    "if $z0 != 0 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"->"return i1";
    "if $z0 != 0 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)";
}
