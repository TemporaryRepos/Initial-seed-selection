digraph "unitGraph" {
    "i0 := @parameter0: int"
    "staticinvoke <compiler.exceptions.CatchInlineExceptions: void foo(int)>(i0)"
    "goto [?= return]"
    "$r0 := @caughtexception"
    "r1 = $r0"
    "$z0 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception1"
    "if $z0 == 0 goto $z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2"
    "$i3 = <compiler.exceptions.CatchInlineExceptions: int counter1>"
    "$i4 = $i3 + 1"
    "<compiler.exceptions.CatchInlineExceptions: int counter1> = $i4"
    "goto [?= $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>]"
    "$z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2"
    "if $z1 == 0 goto $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>"
    "$i1 = <compiler.exceptions.CatchInlineExceptions: int counter2>"
    "$i2 = $i1 + 1"
    "<compiler.exceptions.CatchInlineExceptions: int counter2> = $i2"
    "$i5 = <compiler.exceptions.CatchInlineExceptions: int counter>"
    "$i6 = $i5 + 1"
    "<compiler.exceptions.CatchInlineExceptions: int counter> = $i6"
    "throw r1"
    "return"
    "i0 := @parameter0: int"->"staticinvoke <compiler.exceptions.CatchInlineExceptions: void foo(int)>(i0)";
    "i0 := @parameter0: int"->"$r0 := @caughtexception";
    "staticinvoke <compiler.exceptions.CatchInlineExceptions: void foo(int)>(i0)"->"goto [?= return]";
    "staticinvoke <compiler.exceptions.CatchInlineExceptions: void foo(int)>(i0)"->"$r0 := @caughtexception";
    "goto [?= return]"->"return";
    "$r0 := @caughtexception"->"r1 = $r0";
    "r1 = $r0"->"$z0 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception1";
    "$z0 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception1"->"if $z0 == 0 goto $z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2";
    "if $z0 == 0 goto $z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2"->"$i3 = <compiler.exceptions.CatchInlineExceptions: int counter1>";
    "if $z0 == 0 goto $z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2"->"$z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2";
    "$i3 = <compiler.exceptions.CatchInlineExceptions: int counter1>"->"$i4 = $i3 + 1";
    "$i4 = $i3 + 1"->"<compiler.exceptions.CatchInlineExceptions: int counter1> = $i4";
    "<compiler.exceptions.CatchInlineExceptions: int counter1> = $i4"->"goto [?= $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>]";
    "goto [?= $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>]"->"$i5 = <compiler.exceptions.CatchInlineExceptions: int counter>";
    "$z1 = r1 instanceof compiler.exceptions.CatchInlineExceptions$Exception2"->"if $z1 == 0 goto $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>";
    "if $z1 == 0 goto $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>"->"$i1 = <compiler.exceptions.CatchInlineExceptions: int counter2>";
    "if $z1 == 0 goto $i5 = <compiler.exceptions.CatchInlineExceptions: int counter>"->"$i5 = <compiler.exceptions.CatchInlineExceptions: int counter>";
    "$i1 = <compiler.exceptions.CatchInlineExceptions: int counter2>"->"$i2 = $i1 + 1";
    "$i2 = $i1 + 1"->"<compiler.exceptions.CatchInlineExceptions: int counter2> = $i2";
    "<compiler.exceptions.CatchInlineExceptions: int counter2> = $i2"->"$i5 = <compiler.exceptions.CatchInlineExceptions: int counter>";
    "$i5 = <compiler.exceptions.CatchInlineExceptions: int counter>"->"$i6 = $i5 + 1";
    "$i6 = $i5 + 1"->"<compiler.exceptions.CatchInlineExceptions: int counter> = $i6";
    "<compiler.exceptions.CatchInlineExceptions: int counter> = $i6"->"throw r1";
}
