digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 % 2"
    "if $i0 != 0 goto $b2 = -1"
    "$b2 = 0"
    "goto [?= staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)]"
    "$b2 = -1"
    "staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)"
    "i1 = i1 + 1"
    "if i1 < 20000 goto $i0 = i1 % 2"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 20000 goto $i0 = i1 % 2";
    "$i0 = i1 % 2"->"if $i0 != 0 goto $b2 = -1";
    "if $i0 != 0 goto $b2 = -1"->"$b2 = 0";
    "if $i0 != 0 goto $b2 = -1"->"$b2 = -1";
    "$b2 = 0"->"goto [?= staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)]";
    "goto [?= staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)]"->"staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)";
    "$b2 = -1"->"staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)";
    "staticinvoke <compiler.arraycopy.TestDeadArrayCopyOnMemChain: void test(int,boolean)>($b2, 0)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 20000 goto $i0 = i1 % 2";
    "if i1 < 20000 goto $i0 = i1 % 2"->"return";
    "if i1 < 20000 goto $i0 = i1 % 2"->"$i0 = i1 % 2";
}
