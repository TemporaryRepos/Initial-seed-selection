digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i2 = 0"
    "goto [?= (branch)]"
    "$i0 = i2 + 3"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i0, -123)"
    "$i1 = i2 + 3"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i1, -103)"
    "i2 = i2 + 1"
    "if i2 < 94 goto $i0 = i2 + 3"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 94 goto $i0 = i2 + 3";
    "$i0 = i2 + 3"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i0, -123)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i0, -123)"->"$i1 = i2 + 3";
    "$i1 = i2 + 3"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i1, -103)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i1, -103)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 94 goto $i0 = i2 + 3";
    "if i2 < 94 goto $i0 = i2 + 3"->"return";
    "if i2 < 94 goto $i0 = i2 + 3"->"$i0 = i2 + 3";
}
