digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "$r0 = new java.io.File"
    "$r2 = r1[0]"
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2)"
    "r22 = $r0"
    "$r3 = r1[1]"
    "l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)"
    "staticinvoke <TestInheritFD: void fakeLeakyJVM(boolean)>(0)"
    "$z0 = staticinvoke <jdk.test.lib.Platform: boolean isWindows()>()"
    "if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"
    "staticinvoke <TestInheritFD: void windows(java.io.File,long)>(r22, l0)"
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"
    "r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "$r5 = new java.lang.StringBuilder"
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"(Third VM) Open file descriptors:\n\")"
    "$r7 = interfaceinvoke r4.<java.util.Collection: java.util.stream.Stream stream()>()"
    "$r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\"\n\")"
    "$r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)"
    "$r10 = (java.lang.String) $r9"
    "$r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "$r13 = <java.lang.System: java.io.PrintStream out>"
    "$z1 = staticinvoke <TestInheritFD: boolean findOpenLogFile(java.util.Collection)>(r4)"
    "if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\""
    "$r23 = \"VM RESULT => LEAKS FD\""
    "goto [?= virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)]"
    "$r23 = \"VM RESULT => RETAINS FD\""
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)"
    "$r18 := @caughtexception"
    "r24 = $r18"
    "$r19 = <java.lang.System: java.io.PrintStream out>"
    "$r20 = virtualinvoke r24.<java.lang.Exception: java.lang.String toString()>()"
    "virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20)"
    "$r21 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"
    "goto [?= return]"
    "$r15 := @caughtexception"
    "r16 = $r15"
    "$r17 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"
    "throw r16"
    "$r14 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"$r18 := @caughtexception";
    "r1 := @parameter0: java.lang.String[]"->"$r15 := @caughtexception";
    "r1 := @parameter0: java.lang.String[]"->"$r0 = new java.io.File";
    "$r0 = new java.io.File"->"$r18 := @caughtexception";
    "$r0 = new java.io.File"->"$r15 := @caughtexception";
    "$r0 = new java.io.File"->"$r2 = r1[0]";
    "$r2 = r1[0]"->"$r18 := @caughtexception";
    "$r2 = r1[0]"->"$r15 := @caughtexception";
    "$r2 = r1[0]"->"specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2)";
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2)"->"$r18 := @caughtexception";
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2)"->"$r15 := @caughtexception";
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2)"->"r22 = $r0";
    "r22 = $r0"->"$r18 := @caughtexception";
    "r22 = $r0"->"$r15 := @caughtexception";
    "r22 = $r0"->"$r3 = r1[1]";
    "$r3 = r1[1]"->"$r18 := @caughtexception";
    "$r3 = r1[1]"->"$r15 := @caughtexception";
    "$r3 = r1[1]"->"l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)";
    "l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)"->"$r18 := @caughtexception";
    "l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)"->"$r15 := @caughtexception";
    "l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)"->"staticinvoke <TestInheritFD: void fakeLeakyJVM(boolean)>(0)";
    "staticinvoke <TestInheritFD: void fakeLeakyJVM(boolean)>(0)"->"$r18 := @caughtexception";
    "staticinvoke <TestInheritFD: void fakeLeakyJVM(boolean)>(0)"->"$r15 := @caughtexception";
    "staticinvoke <TestInheritFD: void fakeLeakyJVM(boolean)>(0)"->"$z0 = staticinvoke <jdk.test.lib.Platform: boolean isWindows()>()";
    "$z0 = staticinvoke <jdk.test.lib.Platform: boolean isWindows()>()"->"$r18 := @caughtexception";
    "$z0 = staticinvoke <jdk.test.lib.Platform: boolean isWindows()>()"->"$r15 := @caughtexception";
    "$z0 = staticinvoke <jdk.test.lib.Platform: boolean isWindows()>()"->"if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()";
    "if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"staticinvoke <TestInheritFD: void windows(java.io.File,long)>(r22, l0)";
    "if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()";
    "if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"$r18 := @caughtexception";
    "if $z0 == 0 goto r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"$r15 := @caughtexception";
    "staticinvoke <TestInheritFD: void windows(java.io.File,long)>(r22, l0)"->"$r18 := @caughtexception";
    "staticinvoke <TestInheritFD: void windows(java.io.File,long)>(r22, l0)"->"$r15 := @caughtexception";
    "staticinvoke <TestInheritFD: void windows(java.io.File,long)>(r22, l0)"->"goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]";
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"->"$r18 := @caughtexception";
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"->"$r15 := @caughtexception";
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"->"$r14 = <java.lang.System: java.io.PrintStream out>";
    "r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"$r18 := @caughtexception";
    "r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"$r15 := @caughtexception";
    "r4 = staticinvoke <TestInheritFD: java.util.Collection outputContainingFilenames()>()"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r18 := @caughtexception";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r15 := @caughtexception";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"$r5 = new java.lang.StringBuilder";
    "$r5 = new java.lang.StringBuilder"->"$r18 := @caughtexception";
    "$r5 = new java.lang.StringBuilder"->"$r15 := @caughtexception";
    "$r5 = new java.lang.StringBuilder"->"specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"(Third VM) Open file descriptors:\n\")";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"(Third VM) Open file descriptors:\n\")"->"$r18 := @caughtexception";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"(Third VM) Open file descriptors:\n\")"->"$r15 := @caughtexception";
    "specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"(Third VM) Open file descriptors:\n\")"->"$r7 = interfaceinvoke r4.<java.util.Collection: java.util.stream.Stream stream()>()";
    "$r7 = interfaceinvoke r4.<java.util.Collection: java.util.stream.Stream stream()>()"->"$r18 := @caughtexception";
    "$r7 = interfaceinvoke r4.<java.util.Collection: java.util.stream.Stream stream()>()"->"$r15 := @caughtexception";
    "$r7 = interfaceinvoke r4.<java.util.Collection: java.util.stream.Stream stream()>()"->"$r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\"\n\")";
    "$r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\"\n\")"->"$r18 := @caughtexception";
    "$r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\"\n\")"->"$r15 := @caughtexception";
    "$r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\"\n\")"->"$r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)";
    "$r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)"->"$r18 := @caughtexception";
    "$r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)"->"$r15 := @caughtexception";
    "$r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)"->"$r10 = (java.lang.String) $r9";
    "$r10 = (java.lang.String) $r9"->"$r18 := @caughtexception";
    "$r10 = (java.lang.String) $r9"->"$r15 := @caughtexception";
    "$r10 = (java.lang.String) $r9"->"$r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)";
    "$r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"->"$r18 := @caughtexception";
    "$r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"->"$r15 := @caughtexception";
    "$r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r18 := @caughtexception";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r15 := @caughtexception";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"$r18 := @caughtexception";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"$r15 := @caughtexception";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"$r13 = <java.lang.System: java.io.PrintStream out>";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"$r18 := @caughtexception";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"$r15 := @caughtexception";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"$z1 = staticinvoke <TestInheritFD: boolean findOpenLogFile(java.util.Collection)>(r4)";
    "$z1 = staticinvoke <TestInheritFD: boolean findOpenLogFile(java.util.Collection)>(r4)"->"$r18 := @caughtexception";
    "$z1 = staticinvoke <TestInheritFD: boolean findOpenLogFile(java.util.Collection)>(r4)"->"$r15 := @caughtexception";
    "$z1 = staticinvoke <TestInheritFD: boolean findOpenLogFile(java.util.Collection)>(r4)"->"if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\"";
    "if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\""->"$r23 = \"VM RESULT => LEAKS FD\"";
    "if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\""->"$r23 = \"VM RESULT => RETAINS FD\"";
    "if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\""->"$r18 := @caughtexception";
    "if $z1 == 0 goto $r23 = \"VM RESULT => RETAINS FD\""->"$r15 := @caughtexception";
    "$r23 = \"VM RESULT => LEAKS FD\""->"$r18 := @caughtexception";
    "$r23 = \"VM RESULT => LEAKS FD\""->"$r15 := @caughtexception";
    "$r23 = \"VM RESULT => LEAKS FD\""->"goto [?= virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)]";
    "goto [?= virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)]"->"$r18 := @caughtexception";
    "goto [?= virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)]"->"$r15 := @caughtexception";
    "goto [?= virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)]"->"virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)";
    "$r23 = \"VM RESULT => RETAINS FD\""->"$r18 := @caughtexception";
    "$r23 = \"VM RESULT => RETAINS FD\""->"$r15 := @caughtexception";
    "$r23 = \"VM RESULT => RETAINS FD\""->"virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)"->"$r18 := @caughtexception";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)"->"$r15 := @caughtexception";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23)"->"goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]";
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"->"$r14 = <java.lang.System: java.io.PrintStream out>";
    "goto [?= $r14 = <java.lang.System: java.io.PrintStream out>]"->"$r15 := @caughtexception";
    "$r18 := @caughtexception"->"r24 = $r18";
    "$r18 := @caughtexception"->"$r15 := @caughtexception";
    "r24 = $r18"->"$r19 = <java.lang.System: java.io.PrintStream out>";
    "r24 = $r18"->"$r15 := @caughtexception";
    "$r19 = <java.lang.System: java.io.PrintStream out>"->"$r20 = virtualinvoke r24.<java.lang.Exception: java.lang.String toString()>()";
    "$r19 = <java.lang.System: java.io.PrintStream out>"->"$r15 := @caughtexception";
    "$r20 = virtualinvoke r24.<java.lang.Exception: java.lang.String toString()>()"->"virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20)";
    "$r20 = virtualinvoke r24.<java.lang.Exception: java.lang.String toString()>()"->"$r15 := @caughtexception";
    "virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20)"->"$r21 = <java.lang.System: java.io.PrintStream out>";
    "virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20)"->"$r15 := @caughtexception";
    "$r21 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")";
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r15 := @caughtexception"->"r16 = $r15";
    "r16 = $r15"->"$r17 = <java.lang.System: java.io.PrintStream out>";
    "$r17 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")";
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"->"throw r16";
    "$r14 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")";
    "virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"VM RESULT => VM EXIT\")"->"return";
}
