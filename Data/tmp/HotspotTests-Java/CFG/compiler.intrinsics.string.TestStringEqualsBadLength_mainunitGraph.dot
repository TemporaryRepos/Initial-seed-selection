digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.intrinsics.string.TestStringEqualsBadLength"
    "specialinvoke $r0.<compiler.intrinsics.string.TestStringEqualsBadLength: void <init>()>()"
    "r1 = $r0"
    "r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1> = -1"
    "r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2> = 0"
    "r2 = newarray (char)[1]"
    "r2[0] = 97"
    "i1 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")"
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int m2(java.lang.String)>(\"ab\")"
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m3(char[])>(r2)"
    "i1 = i1 + 1"
    "if i1 < 20000 goto virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")"
    "return"
    "r4 := @parameter0: java.lang.String[]"->"$r0 = new compiler.intrinsics.string.TestStringEqualsBadLength";
    "$r0 = new compiler.intrinsics.string.TestStringEqualsBadLength"->"specialinvoke $r0.<compiler.intrinsics.string.TestStringEqualsBadLength: void <init>()>()";
    "specialinvoke $r0.<compiler.intrinsics.string.TestStringEqualsBadLength: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1> = -1";
    "r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v1> = -1"->"r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2> = 0";
    "r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int v2> = 0"->"r2 = newarray (char)[1]";
    "r2 = newarray (char)[1]"->"r2[0] = 97";
    "r2[0] = 97"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 20000 goto virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")";
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")"->"virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int m2(java.lang.String)>(\"ab\")";
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: int m2(java.lang.String)>(\"ab\")"->"virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m3(char[])>(r2)";
    "virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m3(char[])>(r2)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 20000 goto virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")";
    "if i1 < 20000 goto virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "if i1 < 20000 goto virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")"->"virtualinvoke r1.<compiler.intrinsics.string.TestStringEqualsBadLength: boolean m(java.lang.String)>(\"a\")";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")"->"return";
}
