digraph "unitGraph" {
    "i0 := @parameter0: int"
    "r0 = newarray (java.lang.Thread)[i0]"
    "$r1 = new java.util.concurrent.atomic.AtomicLong"
    "specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>()"
    "r2 = $r1"
    "i3 = 0"
    "goto [?= (branch)]"
    "$r3 = new compiler.codegen.Test7009231$RunnerThread"
    "$i1 = 8 * i3"
    "$l2 = 1L << $i1"
    "specialinvoke $r3.<compiler.codegen.Test7009231$RunnerThread: void <init>(java.util.concurrent.atomic.AtomicLong,long)>(r2, $l2)"
    "r0[i3] = $r3"
    "i3 = i3 + 1"
    "if i3 < i0 goto $r3 = new compiler.codegen.Test7009231$RunnerThread"
    "i4 = 0"
    "$r4 = r0[i4]"
    "virtualinvoke $r4.<java.lang.Thread: void start()>()"
    "i4 = i4 + 1"
    "if i4 < i0 goto $r4 = r0[i4]"
    "i5 = 0"
    "$r5 = r0[i5]"
    "virtualinvoke $r5.<java.lang.Thread: void join()>()"
    "i5 = i5 + 1"
    "if i5 < i0 goto $r5 = r0[i5]"
    "return"
    "i0 := @parameter0: int"->"r0 = newarray (java.lang.Thread)[i0]";
    "r0 = newarray (java.lang.Thread)[i0]"->"$r1 = new java.util.concurrent.atomic.AtomicLong";
    "$r1 = new java.util.concurrent.atomic.AtomicLong"->"specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>()";
    "specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < i0 goto $r3 = new compiler.codegen.Test7009231$RunnerThread";
    "$r3 = new compiler.codegen.Test7009231$RunnerThread"->"$i1 = 8 * i3";
    "$i1 = 8 * i3"->"$l2 = 1L << $i1";
    "$l2 = 1L << $i1"->"specialinvoke $r3.<compiler.codegen.Test7009231$RunnerThread: void <init>(java.util.concurrent.atomic.AtomicLong,long)>(r2, $l2)";
    "specialinvoke $r3.<compiler.codegen.Test7009231$RunnerThread: void <init>(java.util.concurrent.atomic.AtomicLong,long)>(r2, $l2)"->"r0[i3] = $r3";
    "r0[i3] = $r3"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < i0 goto $r3 = new compiler.codegen.Test7009231$RunnerThread";
    "if i3 < i0 goto $r3 = new compiler.codegen.Test7009231$RunnerThread"->"i4 = 0";
    "if i3 < i0 goto $r3 = new compiler.codegen.Test7009231$RunnerThread"->"$r3 = new compiler.codegen.Test7009231$RunnerThread";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < i0 goto $r4 = r0[i4]";
    "$r4 = r0[i4]"->"virtualinvoke $r4.<java.lang.Thread: void start()>()";
    "virtualinvoke $r4.<java.lang.Thread: void start()>()"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < i0 goto $r4 = r0[i4]";
    "if i4 < i0 goto $r4 = r0[i4]"->"i5 = 0";
    "if i4 < i0 goto $r4 = r0[i4]"->"$r4 = r0[i4]";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < i0 goto $r5 = r0[i5]";
    "$r5 = r0[i5]"->"virtualinvoke $r5.<java.lang.Thread: void join()>()";
    "virtualinvoke $r5.<java.lang.Thread: void join()>()"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < i0 goto $r5 = r0[i5]";
    "if i5 < i0 goto $r5 = r0[i5]"->"return";
    "if i5 < i0 goto $r5 = r0[i5]"->"$r5 = r0[i5]";
}
