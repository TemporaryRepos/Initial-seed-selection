digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r4 := @parameter0: java.lang.String[];
$r0 = new compiler.c2.Test8007722;
specialinvoke $r0.<compiler.c2.Test8007722: void <init>()>();
r1 = $r0;
$r2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);
<compiler.c2.Test8007722: java.util.concurrent.atomic.AtomicReference ref> = $r2;
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 20000 goto staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
"
    "Block 3:
[preds: 2 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"PASSED\");
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r4 := @parameter0: java.lang.String[];
$r0 = new compiler.c2.Test8007722;
specialinvoke $r0.<compiler.c2.Test8007722: void <init>()>();
r1 = $r0;
$r2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);
<compiler.c2.Test8007722: java.util.concurrent.atomic.AtomicReference ref> = $r2;
i1 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 20000 goto staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 20000 goto staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 20000 goto staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
"->"Block 3:
[preds: 2 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"PASSED\");
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < 20000 goto staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.c2.Test8007722: int test(compiler.c2.Test8007722)>(r1);
i1 = i1 + 1;
";
}
