digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 6 ]
r10 := @parameter0: java.lang.String[];
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 6 ] [succs: 2 3 ]
$r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
specialinvoke $r0.<compiler.inlining.DefaultAndConcreteMethodsCHA$C: void <init>()>();
i0 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r0);
if i0 == 0 goto $r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r6 = new java.lang.Error;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"C.m didn\'t invoke I.m: id \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r9);
throw $r6;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
specialinvoke $r1.<compiler.inlining.DefaultAndConcreteMethodsCHA$D: void <init>()>();
i1 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r1);
if i1 == 1 goto i2 = i2 + 1;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.Error;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"D.m didn\'t invoke D.m: id \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>($r5);
throw $r2;
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
i2 = i2 + 1;
"
    "Block 6:
[preds: 0 5 ] [succs: 7 1 ]
if i2 < 10000 goto $r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
"
    "Block 7:
[preds: 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 6 ]
r10 := @parameter0: java.lang.String[];
i2 = 0;
goto [?= (branch)];
"->"Block 6:
[preds: 0 5 ] [succs: 7 1 ]
if i2 < 10000 goto $r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
";
    "Block 1:
[preds: 6 ] [succs: 2 3 ]
$r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
specialinvoke $r0.<compiler.inlining.DefaultAndConcreteMethodsCHA$C: void <init>()>();
i0 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r0);
if i0 == 0 goto $r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
"->"Block 2:
[preds: 1 ] [succs: ]
$r6 = new java.lang.Error;
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"C.m didn\'t invoke I.m: id \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r9);
throw $r6;
";
    "Block 1:
[preds: 6 ] [succs: 2 3 ]
$r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
specialinvoke $r0.<compiler.inlining.DefaultAndConcreteMethodsCHA$C: void <init>()>();
i0 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r0);
if i0 == 0 goto $r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
specialinvoke $r1.<compiler.inlining.DefaultAndConcreteMethodsCHA$D: void <init>()>();
i1 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r1);
if i1 == 1 goto i2 = i2 + 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
specialinvoke $r1.<compiler.inlining.DefaultAndConcreteMethodsCHA$D: void <init>()>();
i1 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r1);
if i1 == 1 goto i2 = i2 + 1;
"->"Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.Error;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"D.m didn\'t invoke D.m: id \");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>($r5);
throw $r2;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
specialinvoke $r1.<compiler.inlining.DefaultAndConcreteMethodsCHA$D: void <init>()>();
i1 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r1);
if i1 == 1 goto i2 = i2 + 1;
"->"Block 5:
[preds: 3 ] [succs: 6 ]
i2 = i2 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
i2 = i2 + 1;
"->"Block 6:
[preds: 0 5 ] [succs: 7 1 ]
if i2 < 10000 goto $r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
";
    "Block 6:
[preds: 0 5 ] [succs: 7 1 ]
if i2 < 10000 goto $r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
"->"Block 7:
[preds: 6 ] [succs: ]
return;
";
    "Block 6:
[preds: 0 5 ] [succs: 7 1 ]
if i2 < 10000 goto $r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
"->"Block 1:
[preds: 6 ] [succs: 2 3 ]
$r0 = new compiler.inlining.DefaultAndConcreteMethodsCHA$C;
specialinvoke $r0.<compiler.inlining.DefaultAndConcreteMethodsCHA$C: void <init>()>();
i0 = staticinvoke <compiler.inlining.DefaultAndConcreteMethodsCHA: int test(compiler.inlining.DefaultAndConcreteMethodsCHA$A)>($r0);
if i0 == 0 goto $r1 = new compiler.inlining.DefaultAndConcreteMethodsCHA$D;
";
}
