digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "i0 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)"
    "i0 = i0 + 1"
    "if i0 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)";
    "if i0 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)"->"return";
    "if i0 < 97 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>(i0, -1, -123)";
}
