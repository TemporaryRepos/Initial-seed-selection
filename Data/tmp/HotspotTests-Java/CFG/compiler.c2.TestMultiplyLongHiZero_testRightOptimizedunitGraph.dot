digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "l6 := @parameter2: long"
    "$l9 = (long) i0"
    "$l2 = (long) i1"
    "$l8 = $l2 & 4294967295L"
    "$l5 = (long) i0"
    "$l3 = (long) i1"
    "$l4 = $l3 & 4294967295L"
    "$l7 = $l5 * $l4"
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l9, $l8, $l7, l6)"
    "return"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"l6 := @parameter2: long";
    "l6 := @parameter2: long"->"$l9 = (long) i0";
    "$l9 = (long) i0"->"$l2 = (long) i1";
    "$l2 = (long) i1"->"$l8 = $l2 & 4294967295L";
    "$l8 = $l2 & 4294967295L"->"$l5 = (long) i0";
    "$l5 = (long) i0"->"$l3 = (long) i1";
    "$l3 = (long) i1"->"$l4 = $l3 & 4294967295L";
    "$l4 = $l3 & 4294967295L"->"$l7 = $l5 * $l4";
    "$l7 = $l5 * $l4"->"staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l9, $l8, $l7, l6)";
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l9, $l8, $l7, l6)"->"return";
}
