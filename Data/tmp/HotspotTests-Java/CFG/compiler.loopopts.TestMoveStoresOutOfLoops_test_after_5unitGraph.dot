digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i12 = 0"
    "goto [?= (branch)]"
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$l1 = (long) i12"
    "$r0[i0] = $l1"
    "$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$i3 = i0 + 1"
    "$l2 = (long) i12"
    "$r1[$i3] = $l2"
    "$r2 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$i5 = i0 + 2"
    "$l4 = (long) i12"
    "$r2[$i5] = $l4"
    "$r3 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$i7 = i0 + 3"
    "$l6 = (long) i12"
    "$r3[$i7] = $l6"
    "$r4 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$i9 = i0 + 4"
    "$l8 = (long) i12"
    "$r4[$i9] = $l8"
    "$r5 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$i11 = i0 + 5"
    "$l10 = (long) i12"
    "$r5[$i11] = $l10"
    "i12 = i12 + 1"
    "if i12 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "return"
    "i0 := @parameter0: int"->"i12 = 0";
    "i12 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$l1 = (long) i12";
    "$l1 = (long) i12"->"$r0[i0] = $l1";
    "$r0[i0] = $l1"->"$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$i3 = i0 + 1";
    "$i3 = i0 + 1"->"$l2 = (long) i12";
    "$l2 = (long) i12"->"$r1[$i3] = $l2";
    "$r1[$i3] = $l2"->"$r2 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r2 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$i5 = i0 + 2";
    "$i5 = i0 + 2"->"$l4 = (long) i12";
    "$l4 = (long) i12"->"$r2[$i5] = $l4";
    "$r2[$i5] = $l4"->"$r3 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r3 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$i7 = i0 + 3";
    "$i7 = i0 + 3"->"$l6 = (long) i12";
    "$l6 = (long) i12"->"$r3[$i7] = $l6";
    "$r3[$i7] = $l6"->"$r4 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r4 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$i9 = i0 + 4";
    "$i9 = i0 + 4"->"$l8 = (long) i12";
    "$l8 = (long) i12"->"$r4[$i9] = $l8";
    "$r4[$i9] = $l8"->"$r5 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r5 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$i11 = i0 + 5";
    "$i11 = i0 + 5"->"$l10 = (long) i12";
    "$l10 = (long) i12"->"$r5[$i11] = $l10";
    "$r5[$i11] = $l10"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"if i12 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "if i12 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"return";
    "if i12 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
}
