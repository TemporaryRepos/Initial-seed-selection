digraph "unitGraph" {
    "r0 := @parameter0: double[]"
    "d3 = 1.0"
    "r1 = r0"
    "i0 = lengthof r0"
    "i1 = 0"
    "goto [?= (branch)]"
    "$d0 = r1[i1]"
    "r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)"
    "$d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>()"
    "$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d1)"
    "d3 = d3 + $d2"
    "i1 = i1 + 1"
    "if i1 < i0 goto $d0 = r1[i1]"
    "staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: void dummy()>()"
    "return d3"
    "r0 := @parameter0: double[]"->"d3 = 1.0";
    "d3 = 1.0"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < i0 goto $d0 = r1[i1]";
    "$d0 = r1[i1]"->"r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)";
    "r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)"->"$d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>()";
    "$d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>()"->"$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d1)";
    "$d2 = staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: double foo(double)>($d1)"->"d3 = d3 + $d2";
    "d3 = d3 + $d2"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < i0 goto $d0 = r1[i1]";
    "if i1 < i0 goto $d0 = r1[i1]"->"staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: void dummy()>()";
    "if i1 < i0 goto $d0 = r1[i1]"->"$d0 = r1[i1]";
    "staticinvoke <compiler.eliminateAutobox.TestDoubleBoxing: void dummy()>()"->"return d3";
}
