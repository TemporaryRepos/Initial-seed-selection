digraph "unitGraph" {
    "i0 := @parameter0: int"
    "$r0 = new java.lang.Integer"
    "$i1 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>(i0)"
    "specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i1)"
    "r1 = $r0"
    "$i2 = i0 & 1"
    "if $i2 != 0 goto staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()"
    "$i4 = i0 + 1"
    "$i5 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i4)"
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"
    "staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()"
    "$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"
    "return $i3"
    "i0 := @parameter0: int"->"$r0 = new java.lang.Integer";
    "$r0 = new java.lang.Integer"->"$i1 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>(i0)";
    "$i1 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>(i0)"->"specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i1)";
    "specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i1)"->"r1 = $r0";
    "r1 = $r0"->"$i2 = i0 & 1";
    "$i2 = i0 & 1"->"if $i2 != 0 goto staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()";
    "if $i2 != 0 goto staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()"->"$i4 = i0 + 1";
    "if $i2 != 0 goto staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()"->"staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()";
    "$i4 = i0 + 1"->"$i5 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i4)";
    "$i5 = staticinvoke <compiler.eliminateAutobox.TestIntBoxing: int foo(int)>($i4)"->"r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)";
    "r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"->"staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()";
    "staticinvoke <compiler.eliminateAutobox.TestIntBoxing: void dummy()>()"->"$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()";
    "$i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()"->"return $i3";
}
