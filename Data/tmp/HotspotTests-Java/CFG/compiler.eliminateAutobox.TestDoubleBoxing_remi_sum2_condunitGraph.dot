digraph "unitGraph" {
    "$r0 = new java.lang.Double"
    "specialinvoke $r0.<java.lang.Double: void <init>(double)>(1.0)"
    "r4 = $r0"
    "$r1 = new java.lang.Double"
    "specialinvoke $r1.<java.lang.Double: void <init>(double)>(1.0)"
    "r5 = $r1"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 & 1"
    "if $i0 != 0 goto $r2 = new java.lang.Double"
    "$r3 = new java.lang.Double"
    "$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()"
    "$d3 = $d2 + 1.0"
    "specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3)"
    "r4 = $r3"
    "goto [?= i1 = i1 + 1]"
    "$r2 = new java.lang.Double"
    "$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()"
    "$d1 = $d0 + 2.0"
    "specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1)"
    "r5 = $r2"
    "i1 = i1 + 1"
    "if i1 < 1000 goto $i0 = i1 & 1"
    "$d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()"
    "$d5 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()"
    "$d6 = $d4 + $d5"
    "return $d6"
    "$r0 = new java.lang.Double"->"specialinvoke $r0.<java.lang.Double: void <init>(double)>(1.0)";
    "specialinvoke $r0.<java.lang.Double: void <init>(double)>(1.0)"->"r4 = $r0";
    "r4 = $r0"->"$r1 = new java.lang.Double";
    "$r1 = new java.lang.Double"->"specialinvoke $r1.<java.lang.Double: void <init>(double)>(1.0)";
    "specialinvoke $r1.<java.lang.Double: void <init>(double)>(1.0)"->"r5 = $r1";
    "r5 = $r1"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000 goto $i0 = i1 & 1";
    "$i0 = i1 & 1"->"if $i0 != 0 goto $r2 = new java.lang.Double";
    "if $i0 != 0 goto $r2 = new java.lang.Double"->"$r3 = new java.lang.Double";
    "if $i0 != 0 goto $r2 = new java.lang.Double"->"$r2 = new java.lang.Double";
    "$r3 = new java.lang.Double"->"$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()";
    "$d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()"->"$d3 = $d2 + 1.0";
    "$d3 = $d2 + 1.0"->"specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3)";
    "specialinvoke $r3.<java.lang.Double: void <init>(double)>($d3)"->"r4 = $r3";
    "r4 = $r3"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r2 = new java.lang.Double"->"$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()";
    "$d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()"->"$d1 = $d0 + 2.0";
    "$d1 = $d0 + 2.0"->"specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1)";
    "specialinvoke $r2.<java.lang.Double: void <init>(double)>($d1)"->"r5 = $r2";
    "r5 = $r2"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 1000 goto $i0 = i1 & 1";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()";
    "if i1 < 1000 goto $i0 = i1 & 1"->"$i0 = i1 & 1";
    "$d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>()"->"$d5 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()";
    "$d5 = virtualinvoke r5.<java.lang.Double: double doubleValue()>()"->"$d6 = $d4 + $d5";
    "$d6 = $d4 + $d5"->"return $d6";
}
