digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r7 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= $r0 = <TestShortArraycopy: short[] a1>];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestShortArraycopy: short[] a1>;
$r1[i1] = -1;
$r2 = <TestShortArraycopy: short[] a2>;
$r2[i1] = -1;
$r3 = <TestShortArraycopy: short[] a3>;
$r3[i1] = 0;
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$r0 = <TestShortArraycopy: short[] a1>;
$i0 = lengthof $r0;
if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r4 = new TestShortArraycopy$1;
specialinvoke $r4.<TestShortArraycopy$1: void <init>()>();
r8 = $r4;
$r5 = new TestShortArraycopy$2;
specialinvoke $r5.<TestShortArraycopy$2: void <init>()>();
r6 = $r5;
<TestShortArraycopy: boolean keepRunning> = 1;
virtualinvoke r8.<java.lang.Thread: void start()>();
virtualinvoke r6.<java.lang.Thread: void start()>();
virtualinvoke r6.<java.lang.Thread: void join()>();
<TestShortArraycopy: boolean keepRunning> = 0;
virtualinvoke r8.<java.lang.Thread: void join()>();
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r7 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= $r0 = <TestShortArraycopy: short[] a1>];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$r0 = <TestShortArraycopy: short[] a1>;
$i0 = lengthof $r0;
if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestShortArraycopy: short[] a1>;
$r1[i1] = -1;
$r2 = <TestShortArraycopy: short[] a2>;
$r2[i1] = -1;
$r3 = <TestShortArraycopy: short[] a3>;
$r3[i1] = 0;
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$r0 = <TestShortArraycopy: short[] a1>;
$i0 = lengthof $r0;
if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$r0 = <TestShortArraycopy: short[] a1>;
$i0 = lengthof $r0;
if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>;
"->"Block 3:
[preds: 2 ] [succs: ]
$r4 = new TestShortArraycopy$1;
specialinvoke $r4.<TestShortArraycopy$1: void <init>()>();
r8 = $r4;
$r5 = new TestShortArraycopy$2;
specialinvoke $r5.<TestShortArraycopy$2: void <init>()>();
r6 = $r5;
<TestShortArraycopy: boolean keepRunning> = 1;
virtualinvoke r8.<java.lang.Thread: void start()>();
virtualinvoke r6.<java.lang.Thread: void start()>();
virtualinvoke r6.<java.lang.Thread: void join()>();
<TestShortArraycopy: boolean keepRunning> = 0;
virtualinvoke r8.<java.lang.Thread: void join()>();
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
$r0 = <TestShortArraycopy: short[] a1>;
$i0 = lengthof $r0;
if i1 < $i0 goto $r1 = <TestShortArraycopy: short[] a1>;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestShortArraycopy: short[] a1>;
$r1[i1] = -1;
$r2 = <TestShortArraycopy: short[] a2>;
$r2[i1] = -1;
$r3 = <TestShortArraycopy: short[] a3>;
$r3[i1] = 0;
i1 = i1 + 1;
";
}
