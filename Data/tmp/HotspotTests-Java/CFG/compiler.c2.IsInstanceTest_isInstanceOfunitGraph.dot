digraph "unitGraph" {
    "r3 := @parameter0: compiler.c2.IsInstanceTest$BaseInterface"
    "r0 := @parameter1: java.lang.Class[]"
    "r1 = r0"
    "i0 = lengthof r0"
    "i1 = 0"
    "goto [?= (branch)]"
    "r2 = r1[i1]"
    "$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3)"
    "if $z0 == 0 goto i1 = i1 + 1"
    "return 1"
    "i1 = i1 + 1"
    "if i1 < i0 goto r2 = r1[i1]"
    "return 0"
    "r3 := @parameter0: compiler.c2.IsInstanceTest$BaseInterface"->"r0 := @parameter1: java.lang.Class[]";
    "r0 := @parameter1: java.lang.Class[]"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < i0 goto r2 = r1[i1]";
    "r2 = r1[i1]"->"$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3)";
    "$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3)"->"if $z0 == 0 goto i1 = i1 + 1";
    "if $z0 == 0 goto i1 = i1 + 1"->"return 1";
    "if $z0 == 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < i0 goto r2 = r1[i1]";
    "if i1 < i0 goto r2 = r1[i1]"->"return 0";
    "if i1 < i0 goto r2 = r1[i1]"->"r2 = r1[i1]";
}
