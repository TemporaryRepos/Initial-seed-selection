digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i1 := @parameter2: int"
    "i2 := @parameter3: int"
    "b0 = 96"
    "i4 = b0"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)"
    "$i3 = b0 - i4"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i3, i2)"
    "i4 = i4 + -1"
    "if i4 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i2 := @parameter3: int";
    "i2 := @parameter3: int"->"b0 = 96";
    "b0 = 96"->"i4 = b0";
    "i4 = b0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)"->"$i3 = b0 - i4";
    "$i3 = b0 - i4"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i3, i2)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i3, i2)"->"i4 = i4 + -1";
    "i4 = i4 + -1"->"if i4 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)";
    "if i4 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)"->"return";
    "if i4 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i4, i1)";
}
