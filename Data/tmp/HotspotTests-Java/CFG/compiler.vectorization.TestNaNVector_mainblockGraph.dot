digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r4 := @parameter0: java.lang.String[];
$r0 = new compiler.vectorization.TestNaNVector;
specialinvoke $r0.<compiler.vectorization.TestNaNVector: void <init>()>();
r1 = $r0;
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
i0 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking double precision Nan\");
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void checkResult(int)>(65527);
i1 = 0;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
i1 = i1 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
"
    "Block 6:
[preds: 5 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Checking single precision Nan\");
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void checkResult(int)>(65408);
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r4 := @parameter0: java.lang.String[];
$r0 = new compiler.vectorization.TestNaNVector;
specialinvoke $r0.<compiler.vectorization.TestNaNVector: void <init>()>();
r1 = $r0;
i0 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
i0 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking double precision Nan\");
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void checkResult(int)>(65527);
i1 = 0;
goto [?= (branch)];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i0 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
"->"Block 1:
[preds: 2 ] [succs: 2 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNDP()>();
i0 = i0 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Checking double precision Nan\");
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void checkResult(int)>(65527);
i1 = 0;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
i1 = i1 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
"->"Block 6:
[preds: 5 ] [succs: ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"Checking single precision Nan\");
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void checkResult(int)>(65408);
return;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i1 < 10000 goto virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
"->"Block 4:
[preds: 5 ] [succs: 5 ]
virtualinvoke r1.<compiler.vectorization.TestNaNVector: void vectorizeNaNSP()>();
i1 = i1 + 1;
";
}
