digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "r8 = null"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 % 10000"
    "if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1)"
    "$r0 = newarray (java.lang.Object)[5]"
    "$r0[0] = r8"
    "$r0[1] = r8"
    "$r0[2] = r8"
    "$r0[3] = r8"
    "$r0[4] = r8"
    "r1 = $r0"
    "r8 = r1"
    "goto [?= i1 = i1 + 1]"
    "$r5 := @caughtexception"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Caught OutOfMemoryError.\")"
    "return"
    "$r3 := @caughtexception"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Caught StackOverflowError.\")"
    "i1 = i1 + 1"
    "if i1 < 1000000 goto $i0 = i1 % 10000"
    "r7 := @parameter0: java.lang.String[]"->"r8 = null";
    "r8 = null"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 1000000 goto $i0 = i1 % 10000";
    "$i0 = i1 % 10000"->"if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]";
    "if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]"->"$r0 = newarray (java.lang.Object)[5]";
    "if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]"->"$r5 := @caughtexception";
    "if $i0 != 0 goto $r0 = newarray (java.lang.Object)[5]"->"$r3 := @caughtexception";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1)";
    "virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1)"->"$r5 := @caughtexception";
    "virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1)"->"$r3 := @caughtexception";
    "virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1)"->"$r0 = newarray (java.lang.Object)[5]";
    "$r0 = newarray (java.lang.Object)[5]"->"$r5 := @caughtexception";
    "$r0 = newarray (java.lang.Object)[5]"->"$r3 := @caughtexception";
    "$r0 = newarray (java.lang.Object)[5]"->"$r0[0] = r8";
    "$r0[0] = r8"->"$r5 := @caughtexception";
    "$r0[0] = r8"->"$r3 := @caughtexception";
    "$r0[0] = r8"->"$r0[1] = r8";
    "$r0[1] = r8"->"$r5 := @caughtexception";
    "$r0[1] = r8"->"$r3 := @caughtexception";
    "$r0[1] = r8"->"$r0[2] = r8";
    "$r0[2] = r8"->"$r5 := @caughtexception";
    "$r0[2] = r8"->"$r3 := @caughtexception";
    "$r0[2] = r8"->"$r0[3] = r8";
    "$r0[3] = r8"->"$r5 := @caughtexception";
    "$r0[3] = r8"->"$r3 := @caughtexception";
    "$r0[3] = r8"->"$r0[4] = r8";
    "$r0[4] = r8"->"$r5 := @caughtexception";
    "$r0[4] = r8"->"$r3 := @caughtexception";
    "$r0[4] = r8"->"r1 = $r0";
    "r1 = $r0"->"$r5 := @caughtexception";
    "r1 = $r0"->"$r3 := @caughtexception";
    "r1 = $r0"->"r8 = r1";
    "r8 = r1"->"$r5 := @caughtexception";
    "r8 = r1"->"$r3 := @caughtexception";
    "r8 = r1"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r5 := @caughtexception"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Caught OutOfMemoryError.\")";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Caught OutOfMemoryError.\")"->"return";
    "$r3 := @caughtexception"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Caught StackOverflowError.\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Caught StackOverflowError.\")"->"return";
    "i1 = i1 + 1"->"if i1 < 1000000 goto $i0 = i1 % 10000";
    "if i1 < 1000000 goto $i0 = i1 % 10000"->"return";
    "if i1 < 1000000 goto $i0 = i1 % 10000"->"$i0 = i1 % 10000";
}
