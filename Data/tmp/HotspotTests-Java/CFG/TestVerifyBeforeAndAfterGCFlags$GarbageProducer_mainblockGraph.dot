digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
i2 = 0;
i3 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$r0 = newarray (long)[10000];
$r1[i2] = $r0;
$i1 = i2 + 1;
$r2 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$i0 = lengthof $r2;
i2 = $i1 % $i0;
i3 = i3 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 1000 goto $r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
"
    "Block 3:
[preds: 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r3 := @parameter0: java.lang.String[];
i2 = 0;
i3 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 1000 goto $r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$r0 = newarray (long)[10000];
$r1[i2] = $r0;
$i1 = i2 + 1;
$r2 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$i0 = lengthof $r2;
i2 = $i1 % $i0;
i3 = i3 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 1000 goto $r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 1000 goto $r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
"->"Block 3:
[preds: 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i3 < 1000 goto $r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$r1 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$r0 = newarray (long)[10000];
$r1[i2] = $r0;
$i1 = i2 + 1;
$r2 = <TestVerifyBeforeAndAfterGCFlags$GarbageProducer: long[][] garbage>;
$i0 = lengthof $r2;
i2 = $i1 % $i0;
i3 = i3 + 1;
";
}
