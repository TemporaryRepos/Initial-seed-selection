digraph "unitGraph" {
    "$r0 = new java.lang.Byte"
    "specialinvoke $r0.<java.lang.Byte: void <init>(byte)>(1)"
    "r2 = $r0"
    "i5 = 0"
    "goto [?= (branch)]"
    "$i0 = i5 & 1"
    "if $i0 != 0 goto i5 = i5 + 1"
    "$r1 = new java.lang.Byte"
    "$b1 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()"
    "$i2 = $b1 + 1"
    "$b3 = (byte) $i2"
    "specialinvoke $r1.<java.lang.Byte: void <init>(byte)>($b3)"
    "r2 = $r1"
    "i5 = i5 + 1"
    "if i5 < 1000 goto $i0 = i5 & 1"
    "$b4 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()"
    "return $b4"
    "$r0 = new java.lang.Byte"->"specialinvoke $r0.<java.lang.Byte: void <init>(byte)>(1)";
    "specialinvoke $r0.<java.lang.Byte: void <init>(byte)>(1)"->"r2 = $r0";
    "r2 = $r0"->"i5 = 0";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < 1000 goto $i0 = i5 & 1";
    "$i0 = i5 & 1"->"if $i0 != 0 goto i5 = i5 + 1";
    "if $i0 != 0 goto i5 = i5 + 1"->"$r1 = new java.lang.Byte";
    "if $i0 != 0 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "$r1 = new java.lang.Byte"->"$b1 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()";
    "$b1 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()"->"$i2 = $b1 + 1";
    "$i2 = $b1 + 1"->"$b3 = (byte) $i2";
    "$b3 = (byte) $i2"->"specialinvoke $r1.<java.lang.Byte: void <init>(byte)>($b3)";
    "specialinvoke $r1.<java.lang.Byte: void <init>(byte)>($b3)"->"r2 = $r1";
    "r2 = $r1"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < 1000 goto $i0 = i5 & 1";
    "if i5 < 1000 goto $i0 = i5 & 1"->"$b4 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()";
    "if i5 < 1000 goto $i0 = i5 & 1"->"$i0 = i5 & 1";
    "$b4 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>()"->"return $b4";
}
