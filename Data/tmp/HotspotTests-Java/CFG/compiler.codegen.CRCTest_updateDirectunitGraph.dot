digraph "unitGraph" {
    "r4 := @parameter0: java.util.zip.CRC32"
    "r1 := @parameter1: byte[]"
    "i1 := @parameter2: int"
    "i0 := @parameter3: int"
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0)"
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i1, i0)"
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer flip()>()"
    "virtualinvoke r4.<java.util.zip.CRC32: void update(java.nio.ByteBuffer)>(r0)"
    "return"
    "r4 := @parameter0: java.util.zip.CRC32"->"r1 := @parameter1: byte[]";
    "r1 := @parameter1: byte[]"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i0 := @parameter3: int";
    "i0 := @parameter3: int"->"r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0)";
    "r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0)"->"virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i1, i0)";
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i1, i0)"->"virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer flip()>()";
    "virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer flip()>()"->"virtualinvoke r4.<java.util.zip.CRC32: void update(java.nio.ByteBuffer)>(r0)";
    "virtualinvoke r4.<java.util.zip.CRC32: void update(java.nio.ByteBuffer)>(r0)"->"return";
}
