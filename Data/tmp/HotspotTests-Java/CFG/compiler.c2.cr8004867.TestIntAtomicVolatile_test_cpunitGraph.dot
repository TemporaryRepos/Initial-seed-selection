digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, $i0)"
    "i1 = i1 + 1"
    "if i1 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)";
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, $i0)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>(i1, $i0)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)";
    "if i1 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)"->"return";
    "if i1 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)"->"$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i1)";
}
