digraph "unitGraph" {
    "l0 := @parameter0: long"
    "$l1 = <TestGCOld: long treeSize>"
    "$l2 = l0 / $l1"
    "i3 = (int) $l2"
    "$l4 = <TestGCOld: long treeSize>"
    "l14 = l0 % $l4"
    "i15 = 0"
    "goto [?= (branch)]"
    "$r0 = <TestGCOld: TreeNode[] trees>"
    "$i5 = <TestGCOld: int where>"
    "$i6 = $i5 + 1"
    "<TestGCOld: int where> = $i6"
    "$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14)"
    "$r0[$i5] = $r1"
    "$i8 = <TestGCOld: int where>"
    "$r2 = <TestGCOld: TreeNode[] trees>"
    "$i7 = lengthof $r2"
    "if $i8 != $i7 goto i15 = i15 + 1"
    "<TestGCOld: int where> = 0"
    "i15 = i15 + 1"
    "if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>"
    "goto [?= $b17 = l14 cmp 999L]"
    "i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)"
    "r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16)"
    "$r4 = <TestGCOld: TreeNode[] trees>"
    "$i9 = <TestGCOld: int where>"
    "$i10 = $i9 + 1"
    "<TestGCOld: int where> = $i10"
    "$r5 = $r4[$i9]"
    "staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3)"
    "$i12 = <TestGCOld: int where>"
    "$r6 = <TestGCOld: TreeNode[] trees>"
    "$i11 = lengthof $r6"
    "if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)"
    "$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)"
    "l14 = l14 - $l13"
    "$b17 = l14 cmp 999L"
    "if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)"
    "return"
    "l0 := @parameter0: long"->"$l1 = <TestGCOld: long treeSize>";
    "$l1 = <TestGCOld: long treeSize>"->"$l2 = l0 / $l1";
    "$l2 = l0 / $l1"->"i3 = (int) $l2";
    "i3 = (int) $l2"->"$l4 = <TestGCOld: long treeSize>";
    "$l4 = <TestGCOld: long treeSize>"->"l14 = l0 % $l4";
    "l14 = l0 % $l4"->"i15 = 0";
    "i15 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>";
    "$r0 = <TestGCOld: TreeNode[] trees>"->"$i5 = <TestGCOld: int where>";
    "$i5 = <TestGCOld: int where>"->"$i6 = $i5 + 1";
    "$i6 = $i5 + 1"->"<TestGCOld: int where> = $i6";
    "<TestGCOld: int where> = $i6"->"$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14)";
    "$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14)"->"$r0[$i5] = $r1";
    "$r0[$i5] = $r1"->"$i8 = <TestGCOld: int where>";
    "$i8 = <TestGCOld: int where>"->"$r2 = <TestGCOld: TreeNode[] trees>";
    "$r2 = <TestGCOld: TreeNode[] trees>"->"$i7 = lengthof $r2";
    "$i7 = lengthof $r2"->"if $i8 != $i7 goto i15 = i15 + 1";
    "if $i8 != $i7 goto i15 = i15 + 1"->"<TestGCOld: int where> = 0";
    "if $i8 != $i7 goto i15 = i15 + 1"->"i15 = i15 + 1";
    "<TestGCOld: int where> = 0"->"i15 = i15 + 1";
    "i15 = i15 + 1"->"if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>";
    "if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>"->"goto [?= $b17 = l14 cmp 999L]";
    "if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>"->"$r0 = <TestGCOld: TreeNode[] trees>";
    "goto [?= $b17 = l14 cmp 999L]"->"$b17 = l14 cmp 999L";
    "i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)"->"r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16)";
    "r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16)"->"$r4 = <TestGCOld: TreeNode[] trees>";
    "$r4 = <TestGCOld: TreeNode[] trees>"->"$i9 = <TestGCOld: int where>";
    "$i9 = <TestGCOld: int where>"->"$i10 = $i9 + 1";
    "$i10 = $i9 + 1"->"<TestGCOld: int where> = $i10";
    "<TestGCOld: int where> = $i10"->"$r5 = $r4[$i9]";
    "$r5 = $r4[$i9]"->"staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3)";
    "staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3)"->"$i12 = <TestGCOld: int where>";
    "$i12 = <TestGCOld: int where>"->"$r6 = <TestGCOld: TreeNode[] trees>";
    "$r6 = <TestGCOld: TreeNode[] trees>"->"$i11 = lengthof $r6";
    "$i11 = lengthof $r6"->"if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)";
    "if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)"->"<TestGCOld: int where> = 0";
    "if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)"->"$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)";
    "<TestGCOld: int where> = 0"->"$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)";
    "$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16)"->"l14 = l14 - $l13";
    "l14 = l14 - $l13"->"$b17 = l14 cmp 999L";
    "$b17 = l14 cmp 999L"->"if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)";
    "if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)"->"return";
    "if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)"->"i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14)";
}
