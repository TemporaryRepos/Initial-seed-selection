digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i0 := @parameter2: int"
    "i5 = 0"
    "goto [?= $i1 = 97 - i0]"
    "$i3 = i5 + i0"
    "$i2 = i5 + i0"
    "$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i2)"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i3, $i4)"
    "i5 = i5 + 1"
    "$i1 = 97 - i0"
    "if i5 < $i1 goto $i3 = i5 + i0"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i5 = 0";
    "i5 = 0"->"goto [?= $i1 = 97 - i0]";
    "goto [?= $i1 = 97 - i0]"->"$i1 = 97 - i0";
    "$i3 = i5 + i0"->"$i2 = i5 + i0";
    "$i2 = i5 + i0"->"$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i2)";
    "$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i2)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i3, $i4)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>($i3, $i4)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"$i1 = 97 - i0";
    "$i1 = 97 - i0"->"if i5 < $i1 goto $i3 = i5 + i0";
    "if i5 < $i1 goto $i3 = i5 + i0"->"return";
    "if i5 < $i1 goto $i3 = i5 + i0"->"$i3 = i5 + i0";
}
