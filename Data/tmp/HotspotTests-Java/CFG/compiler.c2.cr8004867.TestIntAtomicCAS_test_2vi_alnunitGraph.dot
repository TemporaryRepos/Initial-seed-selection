digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i0 := @parameter2: int"
    "i2 := @parameter3: int"
    "i5 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)"
    "$i3 = i5 + 8"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2)"
    "i5 = i5 + 1"
    "if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i2 := @parameter3: int";
    "i2 := @parameter3: int"->"i5 = 0";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)"->"$i3 = i5 + 8";
    "$i3 = i5 + 8"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>($i3, i2)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)";
    "if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)"->"return";
    "if i5 < 89 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i5, i0)";
}
