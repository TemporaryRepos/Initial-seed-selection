digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.Test7047069;
$i1 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i0 = r0.<compiler.c2.Test7047069: int holdEnd>;
if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>;
"
    "Block 1:
[preds: 0 ] [succs: ]
return 0;
"
    "Block 2:
[preds: 0 ] [succs: 6 ]
$r1 = r0.<compiler.c2.Test7047069: int[] levels>;
$i2 = r0.<compiler.c2.Test7047069: int levelIndex>;
i20 = $r1[$i2];
goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>];
"
    "Block 3:
[preds: 6 ] [succs: 4 5 ]
$r2 = r0.<compiler.c2.Test7047069: float[] hold>;
$i4 = r0.<compiler.c2.Test7047069: int holdIndex>;
$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4);
$f0 = r0.<compiler.c2.Test7047069: float squareflat>;
$d1 = (double) $f0;
$b5 = $d0 cmpg $d1;
if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
"
    "Block 4:
[preds: 3 ] [succs: 7 ]
goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>];
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
$r5 = r0.<compiler.c2.Test7047069: float[] hold>;
$i9 = r0.<compiler.c2.Test7047069: int holdIndex>;
$r4 = r0.<compiler.c2.Test7047069: float[] hold>;
$i6 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i8 = $i6 - 4;
$r3 = r0.<compiler.c2.Test7047069: float[] hold>;
$i7 = r0.<compiler.c2.Test7047069: int holdIndex>;
staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7);
$i10 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i11 = $i10 - 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i11;
i20 = i20 + 1;
$r6 = r0.<compiler.c2.Test7047069: int[] levels>;
$i12 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r6[$i12] = i20;
$i13 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i14 = $i13 + 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i14;
$r7 = r0.<compiler.c2.Test7047069: int[] levels>;
$i15 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r7[$i15] = i20;
"
    "Block 6:
[preds: 2 5 ] [succs: 7 3 ]
$i3 = r0.<compiler.c2.Test7047069: int limit>;
if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>;
"
    "Block 7:
[preds: 4 6 ] [succs: ]
$i16 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i17 = $i16 + 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i17;
$i18 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i19 = $i18 - 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i19;
return 1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.Test7047069;
$i1 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i0 = r0.<compiler.c2.Test7047069: int holdEnd>;
if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>;
"->"Block 1:
[preds: 0 ] [succs: ]
return 0;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: compiler.c2.Test7047069;
$i1 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i0 = r0.<compiler.c2.Test7047069: int holdEnd>;
if $i1 < $i0 goto $r1 = r0.<compiler.c2.Test7047069: int[] levels>;
"->"Block 2:
[preds: 0 ] [succs: 6 ]
$r1 = r0.<compiler.c2.Test7047069: int[] levels>;
$i2 = r0.<compiler.c2.Test7047069: int levelIndex>;
i20 = $r1[$i2];
goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>];
";
    "Block 2:
[preds: 0 ] [succs: 6 ]
$r1 = r0.<compiler.c2.Test7047069: int[] levels>;
$i2 = r0.<compiler.c2.Test7047069: int levelIndex>;
i20 = $r1[$i2];
goto [?= $i3 = r0.<compiler.c2.Test7047069: int limit>];
"->"Block 6:
[preds: 2 5 ] [succs: 7 3 ]
$i3 = r0.<compiler.c2.Test7047069: int limit>;
if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>;
";
    "Block 3:
[preds: 6 ] [succs: 4 5 ]
$r2 = r0.<compiler.c2.Test7047069: float[] hold>;
$i4 = r0.<compiler.c2.Test7047069: int holdIndex>;
$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4);
$f0 = r0.<compiler.c2.Test7047069: float squareflat>;
$d1 = (double) $f0;
$b5 = $d0 cmpg $d1;
if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
"->"Block 4:
[preds: 3 ] [succs: 7 ]
goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>];
";
    "Block 3:
[preds: 6 ] [succs: 4 5 ]
$r2 = r0.<compiler.c2.Test7047069: float[] hold>;
$i4 = r0.<compiler.c2.Test7047069: int holdIndex>;
$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4);
$f0 = r0.<compiler.c2.Test7047069: float squareflat>;
$d1 = (double) $f0;
$b5 = $d0 cmpg $d1;
if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
"->"Block 5:
[preds: 3 ] [succs: 6 ]
virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
$r5 = r0.<compiler.c2.Test7047069: float[] hold>;
$i9 = r0.<compiler.c2.Test7047069: int holdIndex>;
$r4 = r0.<compiler.c2.Test7047069: float[] hold>;
$i6 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i8 = $i6 - 4;
$r3 = r0.<compiler.c2.Test7047069: float[] hold>;
$i7 = r0.<compiler.c2.Test7047069: int holdIndex>;
staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7);
$i10 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i11 = $i10 - 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i11;
i20 = i20 + 1;
$r6 = r0.<compiler.c2.Test7047069: int[] levels>;
$i12 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r6[$i12] = i20;
$i13 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i14 = $i13 + 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i14;
$r7 = r0.<compiler.c2.Test7047069: int[] levels>;
$i15 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r7[$i15] = i20;
";
    "Block 4:
[preds: 3 ] [succs: 7 ]
goto [?= $i16 = r0.<compiler.c2.Test7047069: int holdIndex>];
"->"Block 7:
[preds: 4 6 ] [succs: ]
$i16 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i17 = $i16 + 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i17;
$i18 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i19 = $i18 - 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i19;
return 1;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
$r5 = r0.<compiler.c2.Test7047069: float[] hold>;
$i9 = r0.<compiler.c2.Test7047069: int holdIndex>;
$r4 = r0.<compiler.c2.Test7047069: float[] hold>;
$i6 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i8 = $i6 - 4;
$r3 = r0.<compiler.c2.Test7047069: float[] hold>;
$i7 = r0.<compiler.c2.Test7047069: int holdIndex>;
staticinvoke <compiler.c2.Test7047069: void subdivide(float[],int,float[],int,float[],int)>($r5, $i9, $r4, $i8, $r3, $i7);
$i10 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i11 = $i10 - 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i11;
i20 = i20 + 1;
$r6 = r0.<compiler.c2.Test7047069: int[] levels>;
$i12 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r6[$i12] = i20;
$i13 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i14 = $i13 + 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i14;
$r7 = r0.<compiler.c2.Test7047069: int[] levels>;
$i15 = r0.<compiler.c2.Test7047069: int levelIndex>;
$r7[$i15] = i20;
"->"Block 6:
[preds: 2 5 ] [succs: 7 3 ]
$i3 = r0.<compiler.c2.Test7047069: int limit>;
if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>;
";
    "Block 6:
[preds: 2 5 ] [succs: 7 3 ]
$i3 = r0.<compiler.c2.Test7047069: int limit>;
if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>;
"->"Block 7:
[preds: 4 6 ] [succs: ]
$i16 = r0.<compiler.c2.Test7047069: int holdIndex>;
$i17 = $i16 + 4;
r0.<compiler.c2.Test7047069: int holdIndex> = $i17;
$i18 = r0.<compiler.c2.Test7047069: int levelIndex>;
$i19 = $i18 - 1;
r0.<compiler.c2.Test7047069: int levelIndex> = $i19;
return 1;
";
    "Block 6:
[preds: 2 5 ] [succs: 7 3 ]
$i3 = r0.<compiler.c2.Test7047069: int limit>;
if i20 < $i3 goto $r2 = r0.<compiler.c2.Test7047069: float[] hold>;
"->"Block 3:
[preds: 6 ] [succs: 4 5 ]
$r2 = r0.<compiler.c2.Test7047069: float[] hold>;
$i4 = r0.<compiler.c2.Test7047069: int holdIndex>;
$d0 = staticinvoke <compiler.c2.Test7047069: double getFlatnessSq(float[],int)>($r2, $i4);
$f0 = r0.<compiler.c2.Test7047069: float squareflat>;
$d1 = (double) $f0;
$b5 = $d0 cmpg $d1;
if $b5 >= 0 goto virtualinvoke r0.<compiler.c2.Test7047069: void ensureHoldCapacity(int)>(4);
";
}
