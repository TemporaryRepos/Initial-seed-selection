digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "<jit.ExcOpt.ExcOpt: int x> = 0"
    "i6 = 1"
    "goto [?= (branch)]"
    "$i0 = <jit.ExcOpt.ExcOpt: int x>"
    "$i1 = $i0 + 1"
    "<jit.ExcOpt.ExcOpt: int x> = $i1"
    "i6 = i6 + 1"
    "if i6 < 100 goto $i0 = <jit.ExcOpt.ExcOpt: int x>"
    "goto [?= i7 = 1]"
    "i7 = 1"
    "$i2 = <jit.ExcOpt.ExcOpt: int x>"
    "$i3 = $i2 + 1"
    "<jit.ExcOpt.ExcOpt: int x> = $i3"
    "goto [?= i7 = i7 + 1]"
    "i7 = i7 + 1"
    "if i7 < 100 goto $i2 = <jit.ExcOpt.ExcOpt: int x>"
    "$r1 = <java.lang.System: java.io.PrintStream out>"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Done \")"
    "$i4 = <jit.ExcOpt.ExcOpt: int x>"
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3)"
    "$i5 = <jit.ExcOpt.ExcOpt: int x>"
    "if $i5 == 198 goto return"
    "$r4 = new nsk.share.TestFailure"
    "specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"Test failed (x != 198)\")"
    "throw $r4"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"<jit.ExcOpt.ExcOpt: int x> = 0";
    "<jit.ExcOpt.ExcOpt: int x> = 0"->"i6 = 1";
    "i6 = 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < 100 goto $i0 = <jit.ExcOpt.ExcOpt: int x>";
    "$i0 = <jit.ExcOpt.ExcOpt: int x>"->"$i1 = $i0 + 1";
    "$i1 = $i0 + 1"->"<jit.ExcOpt.ExcOpt: int x> = $i1";
    "<jit.ExcOpt.ExcOpt: int x> = $i1"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"if i6 < 100 goto $i0 = <jit.ExcOpt.ExcOpt: int x>";
    "if i6 < 100 goto $i0 = <jit.ExcOpt.ExcOpt: int x>"->"goto [?= i7 = 1]";
    "if i6 < 100 goto $i0 = <jit.ExcOpt.ExcOpt: int x>"->"$i0 = <jit.ExcOpt.ExcOpt: int x>";
    "goto [?= i7 = 1]"->"i7 = 1";
    "i7 = 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < 100 goto $i2 = <jit.ExcOpt.ExcOpt: int x>";
    "$i2 = <jit.ExcOpt.ExcOpt: int x>"->"$i3 = $i2 + 1";
    "$i3 = $i2 + 1"->"<jit.ExcOpt.ExcOpt: int x> = $i3";
    "<jit.ExcOpt.ExcOpt: int x> = $i3"->"goto [?= i7 = i7 + 1]";
    "goto [?= i7 = i7 + 1]"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < 100 goto $i2 = <jit.ExcOpt.ExcOpt: int x>";
    "if i7 < 100 goto $i2 = <jit.ExcOpt.ExcOpt: int x>"->"$r1 = <java.lang.System: java.io.PrintStream out>";
    "if i7 < 100 goto $i2 = <jit.ExcOpt.ExcOpt: int x>"->"$i2 = <jit.ExcOpt.ExcOpt: int x>";
    "$r1 = <java.lang.System: java.io.PrintStream out>"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Done \")";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Done \")"->"$i4 = <jit.ExcOpt.ExcOpt: int x>";
    "$i4 = <jit.ExcOpt.ExcOpt: int x>"->"$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)";
    "$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3)";
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3)"->"$i5 = <jit.ExcOpt.ExcOpt: int x>";
    "$i5 = <jit.ExcOpt.ExcOpt: int x>"->"if $i5 == 198 goto return";
    "if $i5 == 198 goto return"->"$r4 = new nsk.share.TestFailure";
    "if $i5 == 198 goto return"->"return";
    "$r4 = new nsk.share.TestFailure"->"specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"Test failed (x != 198)\")";
    "specialinvoke $r4.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"Test failed (x != 198)\")"->"throw $r4";
}
