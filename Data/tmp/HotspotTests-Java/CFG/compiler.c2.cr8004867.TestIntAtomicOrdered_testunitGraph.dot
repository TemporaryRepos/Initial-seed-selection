digraph "unitGraph" {
    "z0 := @parameter0: boolean"
    "$r0 = new java.util.concurrent.atomic.AtomicIntegerArray"
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)"
    "r1 = $r0"
    "$r2 = new java.util.concurrent.atomic.AtomicIntegerArray"
    "specialinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)"
    "r3 = $r2"
    "i195 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"
    "i195 = i195 + 1"
    "if i195 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Warmup\")"
    "i196 = 0"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i196 = i196 + 1"
    "if i196 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"
    "i197 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"
    "i197 = i197 + 1"
    "if i197 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"
    "$r5 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Verification\")"
    "i198 = 0"
    "i199 = 0"
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)"
    "$i1 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci: a1\", i199, $i0, -123)"
    "i198 = i198 + $i1"
    "i199 = i199 + 1"
    "if i199 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)"
    "i200 = 0"
    "$i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)"
    "$i3 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi: a2\", i200, $i2, 123)"
    "i198 = i198 + $i3"
    "i200 = i200 + 1"
    "if i200 < 97 goto $i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)"
    "i201 = 0"
    "$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)"
    "$i5 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp: a1\", i201, $i4, 123)"
    "i198 = i198 + $i5"
    "i201 = i201 + 1"
    "if i201 < 97 goto $i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)"
    "i202 = 0"
    "$i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"
    "$i7 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a1\", i202, $i6, -123)"
    "i203 = i198 + $i7"
    "$i8 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"
    "$i9 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a2\", i202, $i8, -103)"
    "i198 = i203 + $i9"
    "i202 = i202 + 1"
    "if i202 < 97 goto $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"
    "i204 = 0"
    "$i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"
    "$i11 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a1\", i204, $i10, 123)"
    "i205 = i198 + $i11"
    "$i12 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"
    "$i13 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a2\", i204, $i12, 103)"
    "i198 = i205 + $i13"
    "i204 = i204 + 1"
    "if i204 < 97 goto $i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"
    "i206 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"
    "i206 = i206 + 1"
    "if i206 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"
    "i207 = 0"
    "$i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)"
    "$i15 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_neg: a1\", i207, $i14, -123)"
    "i198 = i198 + $i15"
    "i207 = i207 + 1"
    "if i207 < 97 goto $i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "i208 = 0"
    "$i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)"
    "$i17 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_neg: a2\", i208, $i16, 123)"
    "i198 = i198 + $i17"
    "i208 = i208 + 1"
    "if i208 < 97 goto $i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)"
    "i209 = 0"
    "$i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)"
    "$i19 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_neg: a1\", i209, $i18, 123)"
    "i198 = i198 + $i19"
    "i209 = i209 + 1"
    "if i209 < 97 goto $i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)"
    "i210 = 0"
    "$i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"
    "$i21 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a1\", i210, $i20, -123)"
    "i211 = i198 + $i21"
    "$i22 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"
    "$i23 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a2\", i210, $i22, -103)"
    "i198 = i211 + $i23"
    "i210 = i210 + 1"
    "if i210 < 97 goto $i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"
    "i212 = 0"
    "$i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"
    "$i25 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a1\", i212, $i24, 123)"
    "i213 = i198 + $i25"
    "$i26 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"
    "$i27 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a2\", i212, $i26, 103)"
    "i198 = i213 + $i27"
    "i212 = i212 + 1"
    "if i212 < 97 goto $i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"
    "i214 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"
    "i214 = i214 + 1"
    "if i214 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"
    "i215 = 0"
    "$i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)"
    "$i29 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_oppos: a1\", i215, $i28, -123)"
    "i198 = i198 + $i29"
    "i215 = i215 + 1"
    "if i215 < 97 goto $i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "i216 = 0"
    "$i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)"
    "$i31 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_oppos: a2\", i216, $i30, 123)"
    "i198 = i198 + $i31"
    "i216 = i216 + 1"
    "if i216 < 97 goto $i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)"
    "i217 = 0"
    "$i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)"
    "$i33 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_oppos: a1\", i217, $i32, 123)"
    "i198 = i198 + $i33"
    "i217 = i217 + 1"
    "if i217 < 97 goto $i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)"
    "i218 = 0"
    "$i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"
    "$i35 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a1\", i218, $i34, -123)"
    "i219 = i198 + $i35"
    "$i36 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"
    "$i37 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a2\", i218, $i36, -103)"
    "i198 = i219 + $i37"
    "i218 = i218 + 1"
    "if i218 < 97 goto $i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"
    "i220 = 0"
    "$i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"
    "$i39 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a1\", i220, $i38, 123)"
    "i221 = i198 + $i39"
    "$i40 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"
    "$i41 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a2\", i220, $i40, 103)"
    "i198 = i221 + $i41"
    "i220 = i220 + 1"
    "if i220 < 97 goto $i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"
    "i222 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"
    "i222 = i222 + 1"
    "if i222 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"
    "i223 = 3"
    "$i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)"
    "$i43 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_off: a1\", i223, $i42, -123)"
    "i198 = i198 + $i43"
    "i223 = i223 + 1"
    "if i223 < 97 goto $i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "i224 = 3"
    "$i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)"
    "$i45 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_off: a2\", i224, $i44, 123)"
    "i198 = i198 + $i45"
    "i224 = i224 + 1"
    "if i224 < 97 goto $i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)"
    "i225 = 3"
    "$i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)"
    "$i47 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_off: a1\", i225, $i46, 123)"
    "i198 = i198 + $i47"
    "i225 = i225 + 1"
    "if i225 < 97 goto $i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)"
    "i226 = 3"
    "$i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"
    "$i49 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a1\", i226, $i48, -123)"
    "i227 = i198 + $i49"
    "$i50 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"
    "$i51 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a2\", i226, $i50, -103)"
    "i198 = i227 + $i51"
    "i226 = i226 + 1"
    "if i226 < 97 goto $i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"
    "i228 = 3"
    "$i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"
    "$i53 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i228, $i52, 123)"
    "i229 = i198 + $i53"
    "$i54 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"
    "$i55 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i228, $i54, 103)"
    "i198 = i229 + $i55"
    "i228 = i228 + 1"
    "if i228 < 97 goto $i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"
    "i230 = 0"
    "$i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"
    "$i57 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i230, $i56, -1)"
    "i231 = i198 + $i57"
    "$i58 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"
    "$i59 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i230, $i58, -1)"
    "i198 = i231 + $i59"
    "i230 = i230 + 1"
    "if i230 < 3 goto $i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"
    "i232 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"
    "i232 = i232 + 1"
    "if i232 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, -1)"
    "i233 = 3"
    "$i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)"
    "$i61 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_inv: a1\", i233, $i60, -123)"
    "i198 = i198 + $i61"
    "i233 = i233 + 1"
    "if i233 < 97 goto $i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, -1)"
    "i234 = 3"
    "$i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)"
    "$i63 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_inv: a2\", i234, $i62, 123)"
    "i198 = i198 + $i63"
    "i234 = i234 + 1"
    "if i234 < 97 goto $i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)"
    "i235 = 3"
    "$i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)"
    "$i65 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_inv: a1\", i235, $i64, 123)"
    "i198 = i198 + $i65"
    "i235 = i235 + 1"
    "if i235 < 97 goto $i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)"
    "i236 = 3"
    "$i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"
    "$i67 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a1\", i236, $i66, -123)"
    "i237 = i198 + $i67"
    "$i68 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"
    "$i69 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a2\", i236, $i68, -103)"
    "i198 = i237 + $i69"
    "i236 = i236 + 1"
    "if i236 < 97 goto $i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"
    "i238 = 3"
    "$i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"
    "$i71 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i238, $i70, 123)"
    "i239 = i198 + $i71"
    "$i72 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"
    "$i73 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i238, $i72, 103)"
    "i198 = i239 + $i73"
    "i238 = i238 + 1"
    "if i238 < 97 goto $i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"
    "i240 = 0"
    "$i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"
    "$i75 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i240, $i74, -1)"
    "i241 = i198 + $i75"
    "$i76 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"
    "$i77 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i240, $i76, -1)"
    "i198 = i241 + $i77"
    "i240 = i240 + 1"
    "if i240 < 3 goto $i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"
    "i242 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"
    "i242 = i242 + 1"
    "if i242 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"
    "i243 = 0"
    "$i78 = i243 % 2"
    "if $i78 == 0 goto $b244 = -123"
    "$b244 = -1"
    "goto [?= b245 = $b244]"
    "$b244 = -123"
    "b245 = $b244"
    "$i79 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i243)"
    "$i80 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_scl: a1\", i243, $i79, b245)"
    "i198 = i198 + $i80"
    "i243 = i243 + 1"
    "if i243 < 97 goto $i78 = i243 % 2"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "i246 = 0"
    "$i81 = i246 % 2"
    "if $i81 == 0 goto $b247 = 123"
    "$b247 = -1"
    "goto [?= b248 = $b247]"
    "$b247 = 123"
    "b248 = $b247"
    "$i82 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i246)"
    "$i83 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_scl: a2\", i246, $i82, b248)"
    "i198 = i198 + $i83"
    "i246 = i246 + 1"
    "if i246 < 97 goto $i81 = i246 % 2"
    "i249 = 0"
    "$i84 = i249 % 2"
    "if $i84 == 0 goto $b250 = 123"
    "$b250 = -1"
    "goto [?= b251 = $b250]"
    "$b250 = 123"
    "b251 = $b250"
    "$i85 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i249)"
    "$i86 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_scl: a1\", i249, $i85, b251)"
    "i198 = i198 + $i86"
    "i249 = i249 + 1"
    "if i249 < 97 goto $i84 = i249 % 2"
    "i252 = 0"
    "$i87 = i252 % 2"
    "if $i87 == 0 goto $i88 = i252 * 2"
    "$i100 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)"
    "$i101 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", i252, $i100, -1)"
    "i198 = i198 + $i101"
    "goto [?= $i253 = i252 % 2]"
    "$i88 = i252 * 2"
    "if $i88 >= 97 goto $i253 = i252 % 2"
    "$i97 = i252 * 2"
    "$i96 = i252 * 2"
    "$i98 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i96)"
    "$i99 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", $i97, $i98, -123)"
    "i198 = i198 + $i99"
    "$i253 = i252 % 2"
    "if $i253 == 0 goto $i89 = i252 * 2"
    "$i94 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)"
    "$i95 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", i252, $i94, -1)"
    "i198 = i198 + $i95"
    "goto [?= i252 = i252 + 1]"
    "$i89 = i252 * 2"
    "if $i89 >= 97 goto i252 = i252 + 1"
    "$i91 = i252 * 2"
    "$i90 = i252 * 2"
    "$i92 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i90)"
    "$i93 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", $i91, $i92, -103)"
    "i198 = i198 + $i93"
    "i252 = i252 + 1"
    "if i252 < 97 goto $i87 = i252 % 2"
    "i254 = 0"
    "$i102 = i254 % 2"
    "if $i102 == 0 goto $i103 = i254 * 2"
    "$i115 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)"
    "$i116 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", i254, $i115, -1)"
    "i198 = i198 + $i116"
    "goto [?= $i255 = i254 % 2]"
    "$i103 = i254 * 2"
    "if $i103 >= 97 goto $i255 = i254 % 2"
    "$i112 = i254 * 2"
    "$i111 = i254 * 2"
    "$i113 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i111)"
    "$i114 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", $i112, $i113, 123)"
    "i198 = i198 + $i114"
    "$i255 = i254 % 2"
    "if $i255 == 0 goto $i104 = i254 * 2"
    "$i109 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)"
    "$i110 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", i254, $i109, -1)"
    "i198 = i198 + $i110"
    "goto [?= i254 = i254 + 1]"
    "$i104 = i254 * 2"
    "if $i104 >= 97 goto i254 = i254 + 1"
    "$i106 = i254 * 2"
    "$i105 = i254 * 2"
    "$i107 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i105)"
    "$i108 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", $i106, $i107, 103)"
    "i198 = i198 + $i108"
    "i254 = i254 + 1"
    "if i254 < 97 goto $i102 = i254 % 2"
    "i256 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"
    "i256 = i256 + 1"
    "if i256 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"
    "i257 = 0"
    "$i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)"
    "$i118 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i257, $i117, -1)"
    "i198 = i198 + $i118"
    "i257 = i257 + 1"
    "if i257 < 8 goto $i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)"
    "i258 = 8"
    "$i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)"
    "$i120 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i258, $i119, 123)"
    "i198 = i198 + $i120"
    "i258 = i258 + 1"
    "if i258 < 97 goto $i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)"
    "i259 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)"
    "i259 = i259 + 1"
    "if i259 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, -123, 123)"
    "i260 = 0"
    "$i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)"
    "$i122 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i260, $i121, -123)"
    "i198 = i198 + $i122"
    "i260 = i260 + 1"
    "if i260 < 89 goto $i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)"
    "i261 = 89"
    "$i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)"
    "$i124 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i261, $i123, 123)"
    "i198 = i198 + $i124"
    "i261 = i261 + 1"
    "if i261 < 97 goto $i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)"
    "i262 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"
    "i262 = i262 + 1"
    "if i262 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"
    "i263 = 0"
    "$i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)"
    "$i126 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i263, $i125, -1)"
    "i198 = i198 + $i126"
    "i263 = i263 + 1"
    "if i263 < 8 goto $i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)"
    "i264 = 8"
    "$i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)"
    "$i128 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i264, $i127, -123)"
    "i198 = i198 + $i128"
    "i264 = i264 + 1"
    "if i264 < 97 goto $i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)"
    "i265 = 0"
    "$i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)"
    "$i130 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i265, $i129, -103)"
    "i198 = i198 + $i130"
    "i265 = i265 + 1"
    "if i265 < 89 goto $i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)"
    "i266 = 89"
    "$i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)"
    "$i132 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i266, $i131, -1)"
    "i198 = i198 + $i132"
    "i266 = i266 + 1"
    "if i266 < 97 goto $i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)"
    "i267 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"
    "i267 = i267 + 1"
    "if i267 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"
    "i268 = 0"
    "$i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)"
    "$i134 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i268, $i133, 123)"
    "i198 = i198 + $i134"
    "i268 = i268 + 1"
    "if i268 < 89 goto $i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)"
    "i269 = 89"
    "$i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)"
    "$i136 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i269, $i135, -1)"
    "i198 = i198 + $i136"
    "i269 = i269 + 1"
    "if i269 < 97 goto $i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)"
    "i270 = 0"
    "$i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)"
    "$i138 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i270, $i137, -1)"
    "i198 = i198 + $i138"
    "i270 = i270 + 1"
    "if i270 < 8 goto $i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)"
    "i271 = 8"
    "$i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)"
    "$i140 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i271, $i139, 103)"
    "i198 = i198 + $i140"
    "i271 = i271 + 1"
    "if i271 < 97 goto $i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)"
    "i272 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"
    "i272 = i272 + 1"
    "if i272 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"
    "i273 = 0"
    "$i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)"
    "$i142 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i273, $i141, -1)"
    "i198 = i198 + $i142"
    "i273 = i273 + 1"
    "if i273 < 5 goto $i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)"
    "i274 = 5"
    "$i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)"
    "$i144 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i274, $i143, 123)"
    "i198 = i198 + $i144"
    "i274 = i274 + 1"
    "if i274 < 97 goto $i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)"
    "i275 = 0"
    "$i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)"
    "$i146 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i275, $i145, -123)"
    "i198 = i198 + $i146"
    "i275 = i275 + 1"
    "if i275 < 92 goto $i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)"
    "i276 = 92"
    "$i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)"
    "$i148 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i276, $i147, 123)"
    "i198 = i198 + $i148"
    "i276 = i276 + 1"
    "if i276 < 97 goto $i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)"
    "i277 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"
    "i277 = i277 + 1"
    "if i277 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"
    "i278 = 0"
    "$i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)"
    "$i150 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i278, $i149, -1)"
    "i198 = i198 + $i150"
    "i278 = i278 + 1"
    "if i278 < 5 goto $i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)"
    "i279 = 5"
    "$i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)"
    "$i152 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i279, $i151, -123)"
    "i198 = i198 + $i152"
    "i279 = i279 + 1"
    "if i279 < 97 goto $i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)"
    "i280 = 0"
    "$i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)"
    "$i154 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i280, $i153, -103)"
    "i198 = i198 + $i154"
    "i280 = i280 + 1"
    "if i280 < 92 goto $i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)"
    "i281 = 92"
    "$i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)"
    "$i156 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i281, $i155, -1)"
    "i198 = i198 + $i156"
    "i281 = i281 + 1"
    "if i281 < 97 goto $i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)"
    "i282 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"
    "i282 = i282 + 1"
    "if i282 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"
    "i283 = 0"
    "$i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)"
    "$i158 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i283, $i157, 123)"
    "i198 = i198 + $i158"
    "i283 = i283 + 1"
    "if i283 < 92 goto $i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)"
    "i284 = 92"
    "$i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)"
    "$i160 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i284, $i159, -1)"
    "i198 = i198 + $i160"
    "i284 = i284 + 1"
    "if i284 < 97 goto $i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)"
    "i285 = 0"
    "$i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)"
    "$i162 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i285, $i161, -1)"
    "i198 = i198 + $i162"
    "i285 = i285 + 1"
    "if i285 < 5 goto $i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)"
    "i286 = 5"
    "$i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)"
    "$i164 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i286, $i163, 103)"
    "i198 = i198 + $i164"
    "i286 = i286 + 1"
    "if i286 < 97 goto $i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)"
    "i287 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)"
    "i287 = i287 + 1"
    "if i287 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)"
    "i288 = 8"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)"
    "i288 = i288 + 1"
    "if i288 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i289 = 0"
    "i290 = i289 % 8"
    "$i165 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i289)"
    "$i166 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst_overlap: a1\", i289, $i165, i290)"
    "i198 = i198 + $i166"
    "i289 = i289 + 1"
    "if i289 < 97 goto i290 = i289 % 8"
    "i291 = 0"
    "$i167 = i291 + 8"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i167, -1)"
    "i291 = i291 + 1"
    "if i291 < 8 goto $i167 = i291 + 8"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i292 = 0"
    "$i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)"
    "$i169 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i292, $i168, -1)"
    "i198 = i198 + $i169"
    "i292 = i292 + 1"
    "if i292 < 8 goto $i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)"
    "i293 = 8"
    "i294 = i293 % 8"
    "$i170 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i293)"
    "$i171 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i293, $i170, i294)"
    "i198 = i198 + $i171"
    "i293 = i293 + 1"
    "if i293 < 97 goto i294 = i293 % 8"
    "i295 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)"
    "i295 = i295 + 1"
    "if i295 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i296 = 0"
    "$i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)"
    "$i173 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i296, $i172, -103)"
    "i198 = i198 + $i173"
    "i296 = i296 + 1"
    "if i296 < 89 goto $i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)"
    "i297 = 89"
    "$i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)"
    "$i175 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i297, $i174, -123)"
    "i198 = i198 + $i175"
    "i297 = i297 + 1"
    "if i297 < 97 goto $i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)"
    "i298 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)"
    "i298 = i298 + 1"
    "if i298 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)"
    "i299 = 0"
    "$i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)"
    "$i177 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i299, $i176, 123)"
    "i198 = i198 + $i177"
    "i299 = i299 + 1"
    "if i299 < 89 goto $i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)"
    "i300 = 89"
    "$i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)"
    "$i179 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i300, $i178, 103)"
    "i198 = i198 + $i179"
    "i300 = i300 + 1"
    "if i300 < 97 goto $i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)"
    "i301 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)"
    "i301 = i301 + 1"
    "if i301 < 5 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)"
    "i302 = 5"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)"
    "i302 = i302 + 1"
    "if i302 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i303 = 0"
    "i304 = i303 % 5"
    "$i180 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i303)"
    "$i181 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst_overlap: a1\", i303, $i180, i304)"
    "i198 = i198 + $i181"
    "i303 = i303 + 1"
    "if i303 < 97 goto i304 = i303 % 5"
    "i305 = 0"
    "$i182 = i305 + 5"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i182, -1)"
    "i305 = i305 + 1"
    "if i305 < 5 goto $i182 = i305 + 5"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i306 = 0"
    "$i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)"
    "$i184 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i306, $i183, -1)"
    "i198 = i198 + $i184"
    "i306 = i306 + 1"
    "if i306 < 5 goto $i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)"
    "i307 = 5"
    "i308 = i307 % 5"
    "$i185 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i307)"
    "$i186 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i307, $i185, i308)"
    "i198 = i198 + $i186"
    "i307 = i307 + 1"
    "if i307 < 97 goto i308 = i307 % 5"
    "i309 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)"
    "i309 = i309 + 1"
    "if i309 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"
    "i310 = 0"
    "$i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)"
    "$i188 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i310, $i187, -103)"
    "i198 = i198 + $i188"
    "i310 = i310 + 1"
    "if i310 < 92 goto $i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)"
    "i311 = 92"
    "$i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)"
    "$i190 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i311, $i189, -123)"
    "i198 = i198 + $i190"
    "i311 = i311 + 1"
    "if i311 < 97 goto $i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)"
    "i312 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)"
    "i312 = i312 + 1"
    "if i312 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)"
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)"
    "i313 = 0"
    "$i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)"
    "$i192 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i313, $i191, 123)"
    "i198 = i198 + $i192"
    "i313 = i313 + 1"
    "if i313 < 92 goto $i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)"
    "i314 = 92"
    "$i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)"
    "$i194 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i314, $i193, 103)"
    "i198 = i198 + $i194"
    "i314 = i314 + 1"
    "if i314 < 97 goto $i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)"
    "if i198 > 0 goto return i198"
    "if z0 == 0 goto i315 = 0"
    "return i198"
    "i315 = 0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"
    "i315 = i315 + 1"
    "if i315 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Time\")"
    "i316 = 0"
    "i316 = i316 + 1"
    "if i316 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"
    "i317 = 0"
    "i317 = i317 + 1"
    "if i317 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"
    "i318 = 0"
    "i318 = i318 + 1"
    "if i318 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i319 = 0"
    "i319 = i319 + 1"
    "if i319 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i320 = 0"
    "i320 = i320 + 1"
    "if i320 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i321 = 0"
    "i321 = i321 + 1"
    "if i321 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "i322 = 0"
    "i322 = i322 + 1"
    "if i322 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "i323 = 0"
    "i323 = i323 + 1"
    "if i323 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i324 = 0"
    "i324 = i324 + 1"
    "if i324 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i325 = 0"
    "i325 = i325 + 1"
    "if i325 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i326 = 0"
    "i326 = i326 + 1"
    "if i326 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "i327 = 0"
    "i327 = i327 + 1"
    "if i327 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "i328 = 0"
    "i328 = i328 + 1"
    "if i328 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i329 = 0"
    "i329 = i329 + 1"
    "if i329 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i330 = 0"
    "i330 = i330 + 1"
    "if i330 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i331 = 0"
    "i331 = i331 + 1"
    "if i331 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "i332 = 0"
    "i332 = i332 + 1"
    "if i332 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "i333 = 0"
    "i333 = i333 + 1"
    "if i333 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i334 = 0"
    "i334 = i334 + 1"
    "if i334 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i335 = 0"
    "i335 = i335 + 1"
    "if i335 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i336 = 0"
    "i336 = i336 + 1"
    "if i336 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"
    "i337 = 0"
    "i337 = i337 + 1"
    "if i337 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"
    "i338 = 0"
    "i338 = i338 + 1"
    "if i338 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"
    "i339 = 0"
    "i339 = i339 + 1"
    "if i339 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"
    "i340 = 0"
    "i340 = i340 + 1"
    "if i340 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"
    "i341 = 0"
    "i341 = i341 + 1"
    "if i341 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"
    "i342 = 0"
    "i342 = i342 + 1"
    "if i342 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"
    "i343 = 0"
    "i343 = i343 + 1"
    "if i343 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i344 = 0"
    "i344 = i344 + 1"
    "if i344 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i345 = 0"
    "i345 = i345 + 1"
    "if i345 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i346 = 0"
    "i346 = i346 + 1"
    "if i346 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i347 = 0"
    "i347 = i347 + 1"
    "if i347 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i348 = 0"
    "i348 = i348 + 1"
    "if i348 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i349 = 0"
    "i349 = i349 + 1"
    "if i349 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "i350 = 0"
    "i350 = i350 + 1"
    "if i350 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i351 = 0"
    "i351 = i351 + 1"
    "if i351 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i352 = 0"
    "i352 = i352 + 1"
    "if i352 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"
    "i353 = 0"
    "i353 = i353 + 1"
    "if i353 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"
    "z0 := @parameter0: boolean"->"$r0 = new java.util.concurrent.atomic.AtomicIntegerArray";
    "$r0 = new java.util.concurrent.atomic.AtomicIntegerArray"->"specialinvoke $r0.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)";
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.util.concurrent.atomic.AtomicIntegerArray";
    "$r2 = new java.util.concurrent.atomic.AtomicIntegerArray"->"specialinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)";
    "specialinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>(97)"->"r3 = $r2";
    "r3 = $r2"->"i195 = 0";
    "i195 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i195 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"->"i195 = i195 + 1";
    "i195 = i195 + 1"->"if i195 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)";
    "if i195 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "if i195 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i195, -1)";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Warmup\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"Warmup\")"->"i196 = 0";
    "i196 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i196 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i196 = i196 + 1";
    "i196 = i196 + 1"->"if i196 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "if i196 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"i197 = 0";
    "if i196 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "i197 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i197 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"->"i197 = i197 + 1";
    "i197 = i197 + 1"->"if i197 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)";
    "if i197 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"->"$r5 = <java.lang.System: java.io.PrintStream out>";
    "if i197 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i197, -1)";
    "$r5 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Verification\")";
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Verification\")"->"i198 = 0";
    "i198 = 0"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"i199 = 0";
    "i199 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i199 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)";
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)"->"$i1 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci: a1\", i199, $i0, -123)";
    "$i1 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci: a1\", i199, $i0, -123)"->"i198 = i198 + $i1";
    "i198 = i198 + $i1"->"i199 = i199 + 1";
    "i199 = i199 + 1"->"if i199 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)";
    "if i199 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i199 < 97 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)"->"$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i199)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i200 = 0";
    "i200 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i200 < 97 goto $i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)";
    "$i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)"->"$i3 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi: a2\", i200, $i2, 123)";
    "$i3 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi: a2\", i200, $i2, 123)"->"i198 = i198 + $i3";
    "i198 = i198 + $i3"->"i200 = i200 + 1";
    "i200 = i200 + 1"->"if i200 < 97 goto $i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)";
    "if i200 < 97 goto $i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i200 < 97 goto $i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)"->"$i2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i200)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i201 = 0";
    "i201 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i201 < 97 goto $i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)";
    "$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)"->"$i5 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp: a1\", i201, $i4, 123)";
    "$i5 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp: a1\", i201, $i4, 123)"->"i198 = i198 + $i5";
    "i198 = i198 + $i5"->"i201 = i201 + 1";
    "i201 = i201 + 1"->"if i201 < 97 goto $i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)";
    "if i201 < 97 goto $i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i201 < 97 goto $i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)"->"$i4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i201)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i202 = 0";
    "i202 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i202 < 97 goto $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)";
    "$i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"->"$i7 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a1\", i202, $i6, -123)";
    "$i7 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a1\", i202, $i6, -123)"->"i203 = i198 + $i7";
    "i203 = i198 + $i7"->"$i8 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)";
    "$i8 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"->"$i9 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a2\", i202, $i8, -103)";
    "$i9 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci: a2\", i202, $i8, -103)"->"i198 = i203 + $i9";
    "i198 = i203 + $i9"->"i202 = i202 + 1";
    "i202 = i202 + 1"->"if i202 < 97 goto $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)";
    "if i202 < 97 goto $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i202 < 97 goto $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)"->"$i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i202)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i204 = 0";
    "i204 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i204 < 97 goto $i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)";
    "$i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"->"$i11 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a1\", i204, $i10, 123)";
    "$i11 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a1\", i204, $i10, 123)"->"i205 = i198 + $i11";
    "i205 = i198 + $i11"->"$i12 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)";
    "$i12 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"->"$i13 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a2\", i204, $i12, 103)";
    "$i13 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi: a2\", i204, $i12, 103)"->"i198 = i205 + $i13";
    "i198 = i205 + $i13"->"i204 = i204 + 1";
    "i204 = i204 + 1"->"if i204 < 97 goto $i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)";
    "if i204 < 97 goto $i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"->"i206 = 0";
    "if i204 < 97 goto $i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)"->"$i10 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i204)";
    "i206 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i206 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"->"i206 = i206 + 1";
    "i206 = i206 + 1"->"if i206 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)";
    "if i206 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)";
    "if i206 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i206, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"->"i207 = 0";
    "i207 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i207 < 97 goto $i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)";
    "$i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)"->"$i15 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_neg: a1\", i207, $i14, -123)";
    "$i15 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_neg: a1\", i207, $i14, -123)"->"i198 = i198 + $i15";
    "i198 = i198 + $i15"->"i207 = i207 + 1";
    "i207 = i207 + 1"->"if i207 < 97 goto $i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)";
    "if i207 < 97 goto $i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i207 < 97 goto $i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)"->"$i14 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i207)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i208 = 0";
    "i208 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i208 < 97 goto $i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)";
    "$i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)"->"$i17 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_neg: a2\", i208, $i16, 123)";
    "$i17 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_neg: a2\", i208, $i16, 123)"->"i198 = i198 + $i17";
    "i198 = i198 + $i17"->"i208 = i208 + 1";
    "i208 = i208 + 1"->"if i208 < 97 goto $i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)";
    "if i208 < 97 goto $i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i208 < 97 goto $i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)"->"$i16 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i208)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i209 = 0";
    "i209 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i209 < 97 goto $i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)";
    "$i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)"->"$i19 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_neg: a1\", i209, $i18, 123)";
    "$i19 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_neg: a1\", i209, $i18, 123)"->"i198 = i198 + $i19";
    "i198 = i198 + $i19"->"i209 = i209 + 1";
    "i209 = i209 + 1"->"if i209 < 97 goto $i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)";
    "if i209 < 97 goto $i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i209 < 97 goto $i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)"->"$i18 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i209)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i210 = 0";
    "i210 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i210 < 97 goto $i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)";
    "$i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"->"$i21 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a1\", i210, $i20, -123)";
    "$i21 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a1\", i210, $i20, -123)"->"i211 = i198 + $i21";
    "i211 = i198 + $i21"->"$i22 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)";
    "$i22 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"->"$i23 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a2\", i210, $i22, -103)";
    "$i23 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_neg: a2\", i210, $i22, -103)"->"i198 = i211 + $i23";
    "i198 = i211 + $i23"->"i210 = i210 + 1";
    "i210 = i210 + 1"->"if i210 < 97 goto $i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)";
    "if i210 < 97 goto $i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i210 < 97 goto $i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)"->"$i20 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i210)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i212 = 0";
    "i212 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i212 < 97 goto $i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)";
    "$i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"->"$i25 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a1\", i212, $i24, 123)";
    "$i25 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a1\", i212, $i24, 123)"->"i213 = i198 + $i25";
    "i213 = i198 + $i25"->"$i26 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)";
    "$i26 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"->"$i27 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a2\", i212, $i26, 103)";
    "$i27 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_neg: a2\", i212, $i26, 103)"->"i198 = i213 + $i27";
    "i198 = i213 + $i27"->"i212 = i212 + 1";
    "i212 = i212 + 1"->"if i212 < 97 goto $i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)";
    "if i212 < 97 goto $i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"->"i214 = 0";
    "if i212 < 97 goto $i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)"->"$i24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i212)";
    "i214 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i214 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"->"i214 = i214 + 1";
    "i214 = i214 + 1"->"if i214 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)";
    "if i214 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)";
    "if i214 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i214, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"->"i215 = 0";
    "i215 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i215 < 97 goto $i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)";
    "$i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)"->"$i29 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_oppos: a1\", i215, $i28, -123)";
    "$i29 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_oppos: a1\", i215, $i28, -123)"->"i198 = i198 + $i29";
    "i198 = i198 + $i29"->"i215 = i215 + 1";
    "i215 = i215 + 1"->"if i215 < 97 goto $i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)";
    "if i215 < 97 goto $i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i215 < 97 goto $i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)"->"$i28 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i215)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i216 = 0";
    "i216 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i216 < 97 goto $i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)";
    "$i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)"->"$i31 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_oppos: a2\", i216, $i30, 123)";
    "$i31 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_oppos: a2\", i216, $i30, 123)"->"i198 = i198 + $i31";
    "i198 = i198 + $i31"->"i216 = i216 + 1";
    "i216 = i216 + 1"->"if i216 < 97 goto $i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)";
    "if i216 < 97 goto $i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i216 < 97 goto $i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)"->"$i30 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i216)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i217 = 0";
    "i217 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i217 < 97 goto $i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)";
    "$i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)"->"$i33 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_oppos: a1\", i217, $i32, 123)";
    "$i33 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_oppos: a1\", i217, $i32, 123)"->"i198 = i198 + $i33";
    "i198 = i198 + $i33"->"i217 = i217 + 1";
    "i217 = i217 + 1"->"if i217 < 97 goto $i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)";
    "if i217 < 97 goto $i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i217 < 97 goto $i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)"->"$i32 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i217)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i218 = 0";
    "i218 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i218 < 97 goto $i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)";
    "$i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"->"$i35 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a1\", i218, $i34, -123)";
    "$i35 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a1\", i218, $i34, -123)"->"i219 = i198 + $i35";
    "i219 = i198 + $i35"->"$i36 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)";
    "$i36 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"->"$i37 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a2\", i218, $i36, -103)";
    "$i37 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_oppos: a2\", i218, $i36, -103)"->"i198 = i219 + $i37";
    "i198 = i219 + $i37"->"i218 = i218 + 1";
    "i218 = i218 + 1"->"if i218 < 97 goto $i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)";
    "if i218 < 97 goto $i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i218 < 97 goto $i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)"->"$i34 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i218)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i220 = 0";
    "i220 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i220 < 97 goto $i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)";
    "$i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"->"$i39 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a1\", i220, $i38, 123)";
    "$i39 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a1\", i220, $i38, 123)"->"i221 = i198 + $i39";
    "i221 = i198 + $i39"->"$i40 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)";
    "$i40 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"->"$i41 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a2\", i220, $i40, 103)";
    "$i41 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_oppos: a2\", i220, $i40, 103)"->"i198 = i221 + $i41";
    "i198 = i221 + $i41"->"i220 = i220 + 1";
    "i220 = i220 + 1"->"if i220 < 97 goto $i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)";
    "if i220 < 97 goto $i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"->"i222 = 0";
    "if i220 < 97 goto $i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)"->"$i38 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i220)";
    "i222 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i222 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"->"i222 = i222 + 1";
    "i222 = i222 + 1"->"if i222 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)";
    "if i222 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)";
    "if i222 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i222, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"->"i223 = 3";
    "i223 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i223 < 97 goto $i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)";
    "$i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)"->"$i43 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_off: a1\", i223, $i42, -123)";
    "$i43 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_off: a1\", i223, $i42, -123)"->"i198 = i198 + $i43";
    "i198 = i198 + $i43"->"i223 = i223 + 1";
    "i223 = i223 + 1"->"if i223 < 97 goto $i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)";
    "if i223 < 97 goto $i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i223 < 97 goto $i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)"->"$i42 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i223)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i224 = 3";
    "i224 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i224 < 97 goto $i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)";
    "$i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)"->"$i45 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_off: a2\", i224, $i44, 123)";
    "$i45 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_off: a2\", i224, $i44, 123)"->"i198 = i198 + $i45";
    "i198 = i198 + $i45"->"i224 = i224 + 1";
    "i224 = i224 + 1"->"if i224 < 97 goto $i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)";
    "if i224 < 97 goto $i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i224 < 97 goto $i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)"->"$i44 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i224)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i225 = 3";
    "i225 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i225 < 97 goto $i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)";
    "$i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)"->"$i47 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_off: a1\", i225, $i46, 123)";
    "$i47 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_off: a1\", i225, $i46, 123)"->"i198 = i198 + $i47";
    "i198 = i198 + $i47"->"i225 = i225 + 1";
    "i225 = i225 + 1"->"if i225 < 97 goto $i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)";
    "if i225 < 97 goto $i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i225 < 97 goto $i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)"->"$i46 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i225)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i226 = 3";
    "i226 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i226 < 97 goto $i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)";
    "$i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"->"$i49 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a1\", i226, $i48, -123)";
    "$i49 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a1\", i226, $i48, -123)"->"i227 = i198 + $i49";
    "i227 = i198 + $i49"->"$i50 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)";
    "$i50 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"->"$i51 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a2\", i226, $i50, -103)";
    "$i51 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_off: a2\", i226, $i50, -103)"->"i198 = i227 + $i51";
    "i198 = i227 + $i51"->"i226 = i226 + 1";
    "i226 = i226 + 1"->"if i226 < 97 goto $i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)";
    "if i226 < 97 goto $i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i226 < 97 goto $i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)"->"$i48 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i226)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i228 = 3";
    "i228 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i228 < 97 goto $i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)";
    "$i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"->"$i53 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i228, $i52, 123)";
    "$i53 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i228, $i52, 123)"->"i229 = i198 + $i53";
    "i229 = i198 + $i53"->"$i54 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)";
    "$i54 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"->"$i55 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i228, $i54, 103)";
    "$i55 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i228, $i54, 103)"->"i198 = i229 + $i55";
    "i198 = i229 + $i55"->"i228 = i228 + 1";
    "i228 = i228 + 1"->"if i228 < 97 goto $i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)";
    "if i228 < 97 goto $i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"->"i230 = 0";
    "if i228 < 97 goto $i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)"->"$i52 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i228)";
    "i230 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i230 < 3 goto $i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)";
    "$i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"->"$i57 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i230, $i56, -1)";
    "$i57 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a1\", i230, $i56, -1)"->"i231 = i198 + $i57";
    "i231 = i198 + $i57"->"$i58 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)";
    "$i58 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"->"$i59 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i230, $i58, -1)";
    "$i59 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_off: a2\", i230, $i58, -1)"->"i198 = i231 + $i59";
    "i198 = i231 + $i59"->"i230 = i230 + 1";
    "i230 = i230 + 1"->"if i230 < 3 goto $i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)";
    "if i230 < 3 goto $i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"->"i232 = 0";
    "if i230 < 3 goto $i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)"->"$i56 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i230)";
    "i232 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i232 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"->"i232 = i232 + 1";
    "i232 = i232 + 1"->"if i232 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)";
    "if i232 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, -1)";
    "if i232 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i232, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, -1)"->"i233 = 3";
    "i233 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i233 < 97 goto $i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)";
    "$i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)"->"$i61 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_inv: a1\", i233, $i60, -123)";
    "$i61 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_inv: a1\", i233, $i60, -123)"->"i198 = i198 + $i61";
    "i198 = i198 + $i61"->"i233 = i233 + 1";
    "i233 = i233 + 1"->"if i233 < 97 goto $i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)";
    "if i233 < 97 goto $i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, -1)";
    "if i233 < 97 goto $i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)"->"$i60 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i233)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, -1)"->"i234 = 3";
    "i234 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i234 < 97 goto $i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)";
    "$i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)"->"$i63 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_inv: a2\", i234, $i62, 123)";
    "$i63 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_inv: a2\", i234, $i62, 123)"->"i198 = i198 + $i63";
    "i198 = i198 + $i63"->"i234 = i234 + 1";
    "i234 = i234 + 1"->"if i234 < 97 goto $i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)";
    "if i234 < 97 goto $i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "if i234 < 97 goto $i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)"->"$i62 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i234)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i235 = 3";
    "i235 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i235 < 97 goto $i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)";
    "$i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)"->"$i65 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_inv: a1\", i235, $i64, 123)";
    "$i65 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_inv: a1\", i235, $i64, 123)"->"i198 = i198 + $i65";
    "i198 = i198 + $i65"->"i235 = i235 + 1";
    "i235 = i235 + 1"->"if i235 < 97 goto $i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)";
    "if i235 < 97 goto $i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "if i235 < 97 goto $i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)"->"$i64 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i235)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i236 = 3";
    "i236 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i236 < 97 goto $i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)";
    "$i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"->"$i67 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a1\", i236, $i66, -123)";
    "$i67 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a1\", i236, $i66, -123)"->"i237 = i198 + $i67";
    "i237 = i198 + $i67"->"$i68 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)";
    "$i68 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"->"$i69 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a2\", i236, $i68, -103)";
    "$i69 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_inv: a2\", i236, $i68, -103)"->"i198 = i237 + $i69";
    "i198 = i237 + $i69"->"i236 = i236 + 1";
    "i236 = i236 + 1"->"if i236 < 97 goto $i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)";
    "if i236 < 97 goto $i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)";
    "if i236 < 97 goto $i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)"->"$i66 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i236)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"->"i238 = 3";
    "i238 = 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i238 < 97 goto $i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)";
    "$i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"->"$i71 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i238, $i70, 123)";
    "$i71 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i238, $i70, 123)"->"i239 = i198 + $i71";
    "i239 = i198 + $i71"->"$i72 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)";
    "$i72 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"->"$i73 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i238, $i72, 103)";
    "$i73 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i238, $i72, 103)"->"i198 = i239 + $i73";
    "i198 = i239 + $i73"->"i238 = i238 + 1";
    "i238 = i238 + 1"->"if i238 < 97 goto $i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)";
    "if i238 < 97 goto $i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"->"i240 = 0";
    "if i238 < 97 goto $i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)"->"$i70 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i238)";
    "i240 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i240 < 3 goto $i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)";
    "$i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"->"$i75 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i240, $i74, -1)";
    "$i75 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a1\", i240, $i74, -1)"->"i241 = i198 + $i75";
    "i241 = i198 + $i75"->"$i76 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)";
    "$i76 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"->"$i77 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i240, $i76, -1)";
    "$i77 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_inv: a2\", i240, $i76, -1)"->"i198 = i241 + $i77";
    "i198 = i241 + $i77"->"i240 = i240 + 1";
    "i240 = i240 + 1"->"if i240 < 3 goto $i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)";
    "if i240 < 3 goto $i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"->"i242 = 0";
    "if i240 < 3 goto $i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)"->"$i74 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i240)";
    "i242 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i242 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"->"i242 = i242 + 1";
    "i242 = i242 + 1"->"if i242 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)";
    "if i242 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)";
    "if i242 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i242, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, -1)"->"i243 = 0";
    "i243 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i243 < 97 goto $i78 = i243 % 2";
    "$i78 = i243 % 2"->"if $i78 == 0 goto $b244 = -123";
    "if $i78 == 0 goto $b244 = -123"->"$b244 = -1";
    "if $i78 == 0 goto $b244 = -123"->"$b244 = -123";
    "$b244 = -1"->"goto [?= b245 = $b244]";
    "goto [?= b245 = $b244]"->"b245 = $b244";
    "$b244 = -123"->"b245 = $b244";
    "b245 = $b244"->"$i79 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i243)";
    "$i79 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i243)"->"$i80 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_scl: a1\", i243, $i79, b245)";
    "$i80 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_ci_scl: a1\", i243, $i79, b245)"->"i198 = i198 + $i80";
    "i198 = i198 + $i80"->"i243 = i243 + 1";
    "i243 = i243 + 1"->"if i243 < 97 goto $i78 = i243 % 2";
    "if i243 < 97 goto $i78 = i243 % 2"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i243 < 97 goto $i78 = i243 % 2"->"$i78 = i243 % 2";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i246 = 0";
    "i246 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i246 < 97 goto $i81 = i246 % 2";
    "$i81 = i246 % 2"->"if $i81 == 0 goto $b247 = 123";
    "if $i81 == 0 goto $b247 = 123"->"$b247 = -1";
    "if $i81 == 0 goto $b247 = 123"->"$b247 = 123";
    "$b247 = -1"->"goto [?= b248 = $b247]";
    "goto [?= b248 = $b247]"->"b248 = $b247";
    "$b247 = 123"->"b248 = $b247";
    "b248 = $b247"->"$i82 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i246)";
    "$i82 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i246)"->"$i83 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_scl: a2\", i246, $i82, b248)";
    "$i83 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_vi_scl: a2\", i246, $i82, b248)"->"i198 = i198 + $i83";
    "i198 = i198 + $i83"->"i246 = i246 + 1";
    "i246 = i246 + 1"->"if i246 < 97 goto $i81 = i246 % 2";
    "if i246 < 97 goto $i81 = i246 % 2"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i246 < 97 goto $i81 = i246 % 2"->"$i81 = i246 % 2";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i249 = 0";
    "i249 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i249 < 97 goto $i84 = i249 % 2";
    "$i84 = i249 % 2"->"if $i84 == 0 goto $b250 = 123";
    "if $i84 == 0 goto $b250 = 123"->"$b250 = -1";
    "if $i84 == 0 goto $b250 = 123"->"$b250 = 123";
    "$b250 = -1"->"goto [?= b251 = $b250]";
    "goto [?= b251 = $b250]"->"b251 = $b250";
    "$b250 = 123"->"b251 = $b250";
    "b251 = $b250"->"$i85 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i249)";
    "$i85 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i249)"->"$i86 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_scl: a1\", i249, $i85, b251)";
    "$i86 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_scl: a1\", i249, $i85, b251)"->"i198 = i198 + $i86";
    "i198 = i198 + $i86"->"i249 = i249 + 1";
    "i249 = i249 + 1"->"if i249 < 97 goto $i84 = i249 % 2";
    "if i249 < 97 goto $i84 = i249 % 2"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i249 < 97 goto $i84 = i249 % 2"->"$i84 = i249 % 2";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i252 = 0";
    "i252 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i252 < 97 goto $i87 = i252 % 2";
    "$i87 = i252 % 2"->"if $i87 == 0 goto $i88 = i252 * 2";
    "if $i87 == 0 goto $i88 = i252 * 2"->"$i100 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)";
    "if $i87 == 0 goto $i88 = i252 * 2"->"$i88 = i252 * 2";
    "$i100 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)"->"$i101 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", i252, $i100, -1)";
    "$i101 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", i252, $i100, -1)"->"i198 = i198 + $i101";
    "i198 = i198 + $i101"->"goto [?= $i253 = i252 % 2]";
    "goto [?= $i253 = i252 % 2]"->"$i253 = i252 % 2";
    "$i88 = i252 * 2"->"if $i88 >= 97 goto $i253 = i252 % 2";
    "if $i88 >= 97 goto $i253 = i252 % 2"->"$i97 = i252 * 2";
    "if $i88 >= 97 goto $i253 = i252 % 2"->"$i253 = i252 % 2";
    "$i97 = i252 * 2"->"$i96 = i252 * 2";
    "$i96 = i252 * 2"->"$i98 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i96)";
    "$i98 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i96)"->"$i99 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", $i97, $i98, -123)";
    "$i99 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a1\", $i97, $i98, -123)"->"i198 = i198 + $i99";
    "i198 = i198 + $i99"->"$i253 = i252 % 2";
    "$i253 = i252 % 2"->"if $i253 == 0 goto $i89 = i252 * 2";
    "if $i253 == 0 goto $i89 = i252 * 2"->"$i94 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)";
    "if $i253 == 0 goto $i89 = i252 * 2"->"$i89 = i252 * 2";
    "$i94 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i252)"->"$i95 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", i252, $i94, -1)";
    "$i95 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", i252, $i94, -1)"->"i198 = i198 + $i95";
    "i198 = i198 + $i95"->"goto [?= i252 = i252 + 1]";
    "goto [?= i252 = i252 + 1]"->"i252 = i252 + 1";
    "$i89 = i252 * 2"->"if $i89 >= 97 goto i252 = i252 + 1";
    "if $i89 >= 97 goto i252 = i252 + 1"->"$i91 = i252 * 2";
    "if $i89 >= 97 goto i252 = i252 + 1"->"i252 = i252 + 1";
    "$i91 = i252 * 2"->"$i90 = i252 * 2";
    "$i90 = i252 * 2"->"$i92 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i90)";
    "$i92 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i90)"->"$i93 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", $i91, $i92, -103)";
    "$i93 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_scl: a2\", $i91, $i92, -103)"->"i198 = i198 + $i93";
    "i198 = i198 + $i93"->"i252 = i252 + 1";
    "i252 = i252 + 1"->"if i252 < 97 goto $i87 = i252 % 2";
    "if i252 < 97 goto $i87 = i252 % 2"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i252 < 97 goto $i87 = i252 % 2"->"$i87 = i252 % 2";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i254 = 0";
    "i254 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i254 < 97 goto $i102 = i254 % 2";
    "$i102 = i254 % 2"->"if $i102 == 0 goto $i103 = i254 * 2";
    "if $i102 == 0 goto $i103 = i254 * 2"->"$i115 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)";
    "if $i102 == 0 goto $i103 = i254 * 2"->"$i103 = i254 * 2";
    "$i115 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)"->"$i116 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", i254, $i115, -1)";
    "$i116 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", i254, $i115, -1)"->"i198 = i198 + $i116";
    "i198 = i198 + $i116"->"goto [?= $i255 = i254 % 2]";
    "goto [?= $i255 = i254 % 2]"->"$i255 = i254 % 2";
    "$i103 = i254 * 2"->"if $i103 >= 97 goto $i255 = i254 % 2";
    "if $i103 >= 97 goto $i255 = i254 % 2"->"$i112 = i254 * 2";
    "if $i103 >= 97 goto $i255 = i254 % 2"->"$i255 = i254 % 2";
    "$i112 = i254 * 2"->"$i111 = i254 * 2";
    "$i111 = i254 * 2"->"$i113 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i111)";
    "$i113 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i111)"->"$i114 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", $i112, $i113, 123)";
    "$i114 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a1\", $i112, $i113, 123)"->"i198 = i198 + $i114";
    "i198 = i198 + $i114"->"$i255 = i254 % 2";
    "$i255 = i254 % 2"->"if $i255 == 0 goto $i104 = i254 * 2";
    "if $i255 == 0 goto $i104 = i254 * 2"->"$i109 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)";
    "if $i255 == 0 goto $i104 = i254 * 2"->"$i104 = i254 * 2";
    "$i109 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i254)"->"$i110 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", i254, $i109, -1)";
    "$i110 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", i254, $i109, -1)"->"i198 = i198 + $i110";
    "i198 = i198 + $i110"->"goto [?= i254 = i254 + 1]";
    "goto [?= i254 = i254 + 1]"->"i254 = i254 + 1";
    "$i104 = i254 * 2"->"if $i104 >= 97 goto i254 = i254 + 1";
    "if $i104 >= 97 goto i254 = i254 + 1"->"$i106 = i254 * 2";
    "if $i104 >= 97 goto i254 = i254 + 1"->"i254 = i254 + 1";
    "$i106 = i254 * 2"->"$i105 = i254 * 2";
    "$i105 = i254 * 2"->"$i107 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i105)";
    "$i107 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i105)"->"$i108 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", $i106, $i107, 103)";
    "$i108 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_scl: a2\", $i106, $i107, 103)"->"i198 = i198 + $i108";
    "i198 = i198 + $i108"->"i254 = i254 + 1";
    "i254 = i254 + 1"->"if i254 < 97 goto $i102 = i254 % 2";
    "if i254 < 97 goto $i102 = i254 % 2"->"i256 = 0";
    "if i254 < 97 goto $i102 = i254 % 2"->"$i102 = i254 % 2";
    "i256 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i256 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"->"i256 = i256 + 1";
    "i256 = i256 + 1"->"if i256 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)";
    "if i256 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i256 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i256, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i257 = 0";
    "i257 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i257 < 8 goto $i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)";
    "$i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)"->"$i118 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i257, $i117, -1)";
    "$i118 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i257, $i117, -1)"->"i198 = i198 + $i118";
    "i198 = i198 + $i118"->"i257 = i257 + 1";
    "i257 = i257 + 1"->"if i257 < 8 goto $i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)";
    "if i257 < 8 goto $i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)"->"i258 = 8";
    "if i257 < 8 goto $i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)"->"$i117 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i257)";
    "i258 = 8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i258 < 97 goto $i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)";
    "$i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)"->"$i120 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i258, $i119, 123)";
    "$i120 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst: a1\", i258, $i119, 123)"->"i198 = i198 + $i120";
    "i198 = i198 + $i120"->"i258 = i258 + 1";
    "i258 = i258 + 1"->"if i258 < 97 goto $i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)";
    "if i258 < 97 goto $i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)"->"i259 = 0";
    "if i258 < 97 goto $i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)"->"$i119 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i258)";
    "i259 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i259 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)"->"i259 = i259 + 1";
    "i259 = i259 + 1"->"if i259 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)";
    "if i259 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, -123, 123)";
    "if i259 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i259, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, -123, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i260 = 0";
    "i260 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i260 < 89 goto $i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)";
    "$i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)"->"$i122 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i260, $i121, -123)";
    "$i122 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i260, $i121, -123)"->"i198 = i198 + $i122";
    "i198 = i198 + $i122"->"i260 = i260 + 1";
    "i260 = i260 + 1"->"if i260 < 89 goto $i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)";
    "if i260 < 89 goto $i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)"->"i261 = 89";
    "if i260 < 89 goto $i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)"->"$i121 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i260)";
    "i261 = 89"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i261 < 97 goto $i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)";
    "$i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)"->"$i124 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i261, $i123, 123)";
    "$i124 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc: a1\", i261, $i123, 123)"->"i198 = i198 + $i124";
    "i198 = i198 + $i124"->"i261 = i261 + 1";
    "i261 = i261 + 1"->"if i261 < 97 goto $i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)";
    "if i261 < 97 goto $i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)"->"i262 = 0";
    "if i261 < 97 goto $i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)"->"$i123 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i261)";
    "i262 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i262 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"->"i262 = i262 + 1";
    "i262 = i262 + 1"->"if i262 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)";
    "if i262 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i262 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i262, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i263 = 0";
    "i263 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i263 < 8 goto $i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)";
    "$i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)"->"$i126 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i263, $i125, -1)";
    "$i126 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i263, $i125, -1)"->"i198 = i198 + $i126";
    "i198 = i198 + $i126"->"i263 = i263 + 1";
    "i263 = i263 + 1"->"if i263 < 8 goto $i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)";
    "if i263 < 8 goto $i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)"->"i264 = 8";
    "if i263 < 8 goto $i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)"->"$i125 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i263)";
    "i264 = 8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i264 < 97 goto $i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)";
    "$i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)"->"$i128 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i264, $i127, -123)";
    "$i128 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a1\", i264, $i127, -123)"->"i198 = i198 + $i128";
    "i198 = i198 + $i128"->"i264 = i264 + 1";
    "i264 = i264 + 1"->"if i264 < 97 goto $i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)";
    "if i264 < 97 goto $i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)"->"i265 = 0";
    "if i264 < 97 goto $i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)"->"$i127 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i264)";
    "i265 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i265 < 89 goto $i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)";
    "$i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)"->"$i130 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i265, $i129, -103)";
    "$i130 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i265, $i129, -103)"->"i198 = i198 + $i130";
    "i198 = i198 + $i130"->"i265 = i265 + 1";
    "i265 = i265 + 1"->"if i265 < 89 goto $i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)";
    "if i265 < 89 goto $i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)"->"i266 = 89";
    "if i265 < 89 goto $i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)"->"$i129 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i265)";
    "i266 = 89"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i266 < 97 goto $i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)";
    "$i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)"->"$i132 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i266, $i131, -1)";
    "$i132 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln: a2\", i266, $i131, -1)"->"i198 = i198 + $i132";
    "i198 = i198 + $i132"->"i266 = i266 + 1";
    "i266 = i266 + 1"->"if i266 < 97 goto $i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)";
    "if i266 < 97 goto $i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)"->"i267 = 0";
    "if i266 < 97 goto $i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)"->"$i131 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i266)";
    "i267 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i267 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"->"i267 = i267 + 1";
    "i267 = i267 + 1"->"if i267 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)";
    "if i267 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i267 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i267, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i268 = 0";
    "i268 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i268 < 89 goto $i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)";
    "$i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)"->"$i134 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i268, $i133, 123)";
    "$i134 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i268, $i133, 123)"->"i198 = i198 + $i134";
    "i198 = i198 + $i134"->"i268 = i268 + 1";
    "i268 = i268 + 1"->"if i268 < 89 goto $i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)";
    "if i268 < 89 goto $i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)"->"i269 = 89";
    "if i268 < 89 goto $i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)"->"$i133 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i268)";
    "i269 = 89"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i269 < 97 goto $i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)";
    "$i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)"->"$i136 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i269, $i135, -1)";
    "$i136 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a1\", i269, $i135, -1)"->"i198 = i198 + $i136";
    "i198 = i198 + $i136"->"i269 = i269 + 1";
    "i269 = i269 + 1"->"if i269 < 97 goto $i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)";
    "if i269 < 97 goto $i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)"->"i270 = 0";
    "if i269 < 97 goto $i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)"->"$i135 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i269)";
    "i270 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i270 < 8 goto $i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)";
    "$i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)"->"$i138 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i270, $i137, -1)";
    "$i138 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i270, $i137, -1)"->"i198 = i198 + $i138";
    "i198 = i198 + $i138"->"i270 = i270 + 1";
    "i270 = i270 + 1"->"if i270 < 8 goto $i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)";
    "if i270 < 8 goto $i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)"->"i271 = 8";
    "if i270 < 8 goto $i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)"->"$i137 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i270)";
    "i271 = 8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i271 < 97 goto $i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)";
    "$i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)"->"$i140 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i271, $i139, 103)";
    "$i140 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln: a2\", i271, $i139, 103)"->"i198 = i198 + $i140";
    "i198 = i198 + $i140"->"i271 = i271 + 1";
    "i271 = i271 + 1"->"if i271 < 97 goto $i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)";
    "if i271 < 97 goto $i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)"->"i272 = 0";
    "if i271 < 97 goto $i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)"->"$i139 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i271)";
    "i272 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i272 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"->"i272 = i272 + 1";
    "i272 = i272 + 1"->"if i272 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)";
    "if i272 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i272 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i272, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i273 = 0";
    "i273 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i273 < 5 goto $i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)";
    "$i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)"->"$i142 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i273, $i141, -1)";
    "$i142 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i273, $i141, -1)"->"i198 = i198 + $i142";
    "i198 = i198 + $i142"->"i273 = i273 + 1";
    "i273 = i273 + 1"->"if i273 < 5 goto $i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)";
    "if i273 < 5 goto $i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)"->"i274 = 5";
    "if i273 < 5 goto $i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)"->"$i141 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i273)";
    "i274 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i274 < 97 goto $i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)";
    "$i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)"->"$i144 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i274, $i143, 123)";
    "$i144 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst: a1\", i274, $i143, 123)"->"i198 = i198 + $i144";
    "i198 = i198 + $i144"->"i274 = i274 + 1";
    "i274 = i274 + 1"->"if i274 < 97 goto $i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)";
    "if i274 < 97 goto $i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, -123, 123)";
    "if i274 < 97 goto $i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)"->"$i143 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i274)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, -123, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i275 = 0";
    "i275 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i275 < 92 goto $i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)";
    "$i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)"->"$i146 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i275, $i145, -123)";
    "$i146 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i275, $i145, -123)"->"i198 = i198 + $i146";
    "i198 = i198 + $i146"->"i275 = i275 + 1";
    "i275 = i275 + 1"->"if i275 < 92 goto $i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)";
    "if i275 < 92 goto $i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)"->"i276 = 92";
    "if i275 < 92 goto $i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)"->"$i145 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i275)";
    "i276 = 92"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i276 < 97 goto $i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)";
    "$i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)"->"$i148 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i276, $i147, 123)";
    "$i148 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc: a1\", i276, $i147, 123)"->"i198 = i198 + $i148";
    "i198 = i198 + $i148"->"i276 = i276 + 1";
    "i276 = i276 + 1"->"if i276 < 97 goto $i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)";
    "if i276 < 97 goto $i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)"->"i277 = 0";
    "if i276 < 97 goto $i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)"->"$i147 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i276)";
    "i277 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i277 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"->"i277 = i277 + 1";
    "i277 = i277 + 1"->"if i277 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)";
    "if i277 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i277 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i277, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i278 = 0";
    "i278 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i278 < 5 goto $i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)";
    "$i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)"->"$i150 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i278, $i149, -1)";
    "$i150 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i278, $i149, -1)"->"i198 = i198 + $i150";
    "i198 = i198 + $i150"->"i278 = i278 + 1";
    "i278 = i278 + 1"->"if i278 < 5 goto $i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)";
    "if i278 < 5 goto $i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)"->"i279 = 5";
    "if i278 < 5 goto $i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)"->"$i149 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i278)";
    "i279 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i279 < 97 goto $i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)";
    "$i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)"->"$i152 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i279, $i151, -123)";
    "$i152 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a1\", i279, $i151, -123)"->"i198 = i198 + $i152";
    "i198 = i198 + $i152"->"i279 = i279 + 1";
    "i279 = i279 + 1"->"if i279 < 97 goto $i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)";
    "if i279 < 97 goto $i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)"->"i280 = 0";
    "if i279 < 97 goto $i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)"->"$i151 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i279)";
    "i280 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i280 < 92 goto $i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)";
    "$i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)"->"$i154 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i280, $i153, -103)";
    "$i154 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i280, $i153, -103)"->"i198 = i198 + $i154";
    "i198 = i198 + $i154"->"i280 = i280 + 1";
    "i280 = i280 + 1"->"if i280 < 92 goto $i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)";
    "if i280 < 92 goto $i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)"->"i281 = 92";
    "if i280 < 92 goto $i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)"->"$i153 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i280)";
    "i281 = 92"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i281 < 97 goto $i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)";
    "$i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)"->"$i156 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i281, $i155, -1)";
    "$i156 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln: a2\", i281, $i155, -1)"->"i198 = i198 + $i156";
    "i198 = i198 + $i156"->"i281 = i281 + 1";
    "i281 = i281 + 1"->"if i281 < 97 goto $i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)";
    "if i281 < 97 goto $i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)"->"i282 = 0";
    "if i281 < 97 goto $i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)"->"$i155 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i281)";
    "i282 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i282 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"->"i282 = i282 + 1";
    "i282 = i282 + 1"->"if i282 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)";
    "if i282 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i282 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i282, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i283 = 0";
    "i283 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i283 < 92 goto $i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)";
    "$i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)"->"$i158 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i283, $i157, 123)";
    "$i158 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i283, $i157, 123)"->"i198 = i198 + $i158";
    "i198 = i198 + $i158"->"i283 = i283 + 1";
    "i283 = i283 + 1"->"if i283 < 92 goto $i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)";
    "if i283 < 92 goto $i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)"->"i284 = 92";
    "if i283 < 92 goto $i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)"->"$i157 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i283)";
    "i284 = 92"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i284 < 97 goto $i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)";
    "$i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)"->"$i160 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i284, $i159, -1)";
    "$i160 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a1\", i284, $i159, -1)"->"i198 = i198 + $i160";
    "i198 = i198 + $i160"->"i284 = i284 + 1";
    "i284 = i284 + 1"->"if i284 < 97 goto $i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)";
    "if i284 < 97 goto $i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)"->"i285 = 0";
    "if i284 < 97 goto $i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)"->"$i159 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i284)";
    "i285 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i285 < 5 goto $i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)";
    "$i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)"->"$i162 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i285, $i161, -1)";
    "$i162 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i285, $i161, -1)"->"i198 = i198 + $i162";
    "i198 = i198 + $i162"->"i285 = i285 + 1";
    "i285 = i285 + 1"->"if i285 < 5 goto $i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)";
    "if i285 < 5 goto $i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)"->"i286 = 5";
    "if i285 < 5 goto $i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)"->"$i161 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i285)";
    "i286 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i286 < 97 goto $i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)";
    "$i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)"->"$i164 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i286, $i163, 103)";
    "$i164 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln: a2\", i286, $i163, 103)"->"i198 = i198 + $i164";
    "i198 = i198 + $i164"->"i286 = i286 + 1";
    "i286 = i286 + 1"->"if i286 < 97 goto $i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)";
    "if i286 < 97 goto $i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)"->"i287 = 0";
    "if i286 < 97 goto $i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)"->"$i163 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i286)";
    "i287 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i287 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)"->"i287 = i287 + 1";
    "i287 = i287 + 1"->"if i287 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)";
    "if i287 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)"->"i288 = 8";
    "if i287 < 8 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i287, i287)";
    "i288 = 8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i288 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)"->"i288 = i288 + 1";
    "i288 = i288 + 1"->"if i288 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)";
    "if i288 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i288 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i288, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i289 = 0";
    "i289 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i289 < 97 goto i290 = i289 % 8";
    "i290 = i289 % 8"->"$i165 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i289)";
    "$i165 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i289)"->"$i166 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst_overlap: a1\", i289, $i165, i290)";
    "$i166 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alndst_overlap: a1\", i289, $i165, i290)"->"i198 = i198 + $i166";
    "i198 = i198 + $i166"->"i289 = i289 + 1";
    "i289 = i289 + 1"->"if i289 < 97 goto i290 = i289 % 8";
    "if i289 < 97 goto i290 = i289 % 8"->"i291 = 0";
    "if i289 < 97 goto i290 = i289 % 8"->"i290 = i289 % 8";
    "i291 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i291 < 8 goto $i167 = i291 + 8";
    "$i167 = i291 + 8"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i167, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i167, -1)"->"i291 = i291 + 1";
    "i291 = i291 + 1"->"if i291 < 8 goto $i167 = i291 + 8";
    "if i291 < 8 goto $i167 = i291 + 8"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i291 < 8 goto $i167 = i291 + 8"->"$i167 = i291 + 8";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i292 = 0";
    "i292 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i292 < 8 goto $i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)";
    "$i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)"->"$i169 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i292, $i168, -1)";
    "$i169 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i292, $i168, -1)"->"i198 = i198 + $i169";
    "i198 = i198 + $i169"->"i292 = i292 + 1";
    "i292 = i292 + 1"->"if i292 < 8 goto $i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)";
    "if i292 < 8 goto $i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)"->"i293 = 8";
    "if i292 < 8 goto $i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)"->"$i168 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i292)";
    "i293 = 8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i293 < 97 goto i294 = i293 % 8";
    "i294 = i293 % 8"->"$i170 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i293)";
    "$i170 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i293)"->"$i171 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i293, $i170, i294)";
    "$i171 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_alnsrc_overlap: a1\", i293, $i170, i294)"->"i198 = i198 + $i171";
    "i198 = i198 + $i171"->"i293 = i293 + 1";
    "i293 = i293 + 1"->"if i293 < 97 goto i294 = i293 % 8";
    "if i293 < 97 goto i294 = i293 % 8"->"i295 = 0";
    "if i293 < 97 goto i294 = i293 % 8"->"i294 = i293 % 8";
    "i295 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i295 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)"->"i295 = i295 + 1";
    "i295 = i295 + 1"->"if i295 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)";
    "if i295 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i295 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i295, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i296 = 0";
    "i296 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i296 < 89 goto $i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)";
    "$i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)"->"$i173 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i296, $i172, -103)";
    "$i173 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i296, $i172, -103)"->"i198 = i198 + $i173";
    "i198 = i198 + $i173"->"i296 = i296 + 1";
    "i296 = i296 + 1"->"if i296 < 89 goto $i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)";
    "if i296 < 89 goto $i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)"->"i297 = 89";
    "if i296 < 89 goto $i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)"->"$i172 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i296)";
    "i297 = 89"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i297 < 97 goto $i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)";
    "$i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)"->"$i175 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i297, $i174, -123)";
    "$i175 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_aln_overlap: a1\", i297, $i174, -123)"->"i198 = i198 + $i175";
    "i198 = i198 + $i175"->"i297 = i297 + 1";
    "i297 = i297 + 1"->"if i297 < 97 goto $i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)";
    "if i297 < 97 goto $i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)"->"i298 = 0";
    "if i297 < 97 goto $i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)"->"$i174 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i297)";
    "i298 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i298 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)"->"i298 = i298 + 1";
    "i298 = i298 + 1"->"if i298 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)";
    "if i298 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)";
    "if i298 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i298, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)"->"i299 = 0";
    "i299 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i299 < 89 goto $i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)";
    "$i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)"->"$i177 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i299, $i176, 123)";
    "$i177 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i299, $i176, 123)"->"i198 = i198 + $i177";
    "i198 = i198 + $i177"->"i299 = i299 + 1";
    "i299 = i299 + 1"->"if i299 < 89 goto $i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)";
    "if i299 < 89 goto $i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)"->"i300 = 89";
    "if i299 < 89 goto $i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)"->"$i176 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i299)";
    "i300 = 89"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i300 < 97 goto $i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)";
    "$i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)"->"$i179 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i300, $i178, 103)";
    "$i179 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_aln_overlap: a1\", i300, $i178, 103)"->"i198 = i198 + $i179";
    "i198 = i198 + $i179"->"i300 = i300 + 1";
    "i300 = i300 + 1"->"if i300 < 97 goto $i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)";
    "if i300 < 97 goto $i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)"->"i301 = 0";
    "if i300 < 97 goto $i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)"->"$i178 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i300)";
    "i301 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i301 < 5 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)"->"i301 = i301 + 1";
    "i301 = i301 + 1"->"if i301 < 5 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)";
    "if i301 < 5 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)"->"i302 = 5";
    "if i301 < 5 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i301, i301)";
    "i302 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i302 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)"->"i302 = i302 + 1";
    "i302 = i302 + 1"->"if i302 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)";
    "if i302 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i302 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i302, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i303 = 0";
    "i303 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i303 < 97 goto i304 = i303 % 5";
    "i304 = i303 % 5"->"$i180 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i303)";
    "$i180 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i303)"->"$i181 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst_overlap: a1\", i303, $i180, i304)";
    "$i181 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalndst_overlap: a1\", i303, $i180, i304)"->"i198 = i198 + $i181";
    "i198 = i198 + $i181"->"i303 = i303 + 1";
    "i303 = i303 + 1"->"if i303 < 97 goto i304 = i303 % 5";
    "if i303 < 97 goto i304 = i303 % 5"->"i305 = 0";
    "if i303 < 97 goto i304 = i303 % 5"->"i304 = i303 % 5";
    "i305 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i305 < 5 goto $i182 = i305 + 5";
    "$i182 = i305 + 5"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i182, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>($i182, -1)"->"i305 = i305 + 1";
    "i305 = i305 + 1"->"if i305 < 5 goto $i182 = i305 + 5";
    "if i305 < 5 goto $i182 = i305 + 5"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i305 < 5 goto $i182 = i305 + 5"->"$i182 = i305 + 5";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i306 = 0";
    "i306 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i306 < 5 goto $i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)";
    "$i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)"->"$i184 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i306, $i183, -1)";
    "$i184 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i306, $i183, -1)"->"i198 = i198 + $i184";
    "i198 = i198 + $i184"->"i306 = i306 + 1";
    "i306 = i306 + 1"->"if i306 < 5 goto $i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)";
    "if i306 < 5 goto $i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)"->"i307 = 5";
    "if i306 < 5 goto $i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)"->"$i183 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i306)";
    "i307 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i307 < 97 goto i308 = i307 % 5";
    "i308 = i307 % 5"->"$i185 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i307)";
    "$i185 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i307)"->"$i186 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i307, $i185, i308)";
    "$i186 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_cp_unalnsrc_overlap: a1\", i307, $i185, i308)"->"i198 = i198 + $i186";
    "i198 = i198 + $i186"->"i307 = i307 + 1";
    "i307 = i307 + 1"->"if i307 < 97 goto i308 = i307 % 5";
    "if i307 < 97 goto i308 = i307 % 5"->"i309 = 0";
    "if i307 < 97 goto i308 = i307 % 5"->"i308 = i307 % 5";
    "i309 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i309 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)"->"i309 = i309 + 1";
    "i309 = i309 + 1"->"if i309 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)";
    "if i309 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)";
    "if i309 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i309, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r1)"->"i310 = 0";
    "i310 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i310 < 92 goto $i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)";
    "$i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)"->"$i188 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i310, $i187, -103)";
    "$i188 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i310, $i187, -103)"->"i198 = i198 + $i188";
    "i198 = i198 + $i188"->"i310 = i310 + 1";
    "i310 = i310 + 1"->"if i310 < 92 goto $i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)";
    "if i310 < 92 goto $i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)"->"i311 = 92";
    "if i310 < 92 goto $i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)"->"$i187 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i310)";
    "i311 = 92"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i311 < 97 goto $i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)";
    "$i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)"->"$i190 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i311, $i189, -123)";
    "$i190 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2ci_unaln_overlap: a1\", i311, $i189, -123)"->"i198 = i198 + $i190";
    "i198 = i198 + $i190"->"i311 = i311 + 1";
    "i311 = i311 + 1"->"if i311 < 97 goto $i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)";
    "if i311 < 97 goto $i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)"->"i312 = 0";
    "if i311 < 97 goto $i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)"->"$i189 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i311)";
    "i312 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i312 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)"->"i312 = i312 + 1";
    "i312 = i312 + 1"->"if i312 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)";
    "if i312 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)";
    "if i312 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i312, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r1, 123, 103)"->"i313 = 0";
    "i313 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i313 < 92 goto $i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)";
    "$i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)"->"$i192 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i313, $i191, 123)";
    "$i192 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i313, $i191, 123)"->"i198 = i198 + $i192";
    "i198 = i198 + $i192"->"i313 = i313 + 1";
    "i313 = i313 + 1"->"if i313 < 92 goto $i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)";
    "if i313 < 92 goto $i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)"->"i314 = 92";
    "if i313 < 92 goto $i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)"->"$i191 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i313)";
    "i314 = 92"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i314 < 97 goto $i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)";
    "$i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)"->"$i194 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i314, $i193, 103)";
    "$i194 = staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: int verify(java.lang.String,int,int,int)>(\"test_2vi_unaln_overlap: a1\", i314, $i193, 103)"->"i198 = i198 + $i194";
    "i198 = i198 + $i194"->"i314 = i314 + 1";
    "i314 = i314 + 1"->"if i314 < 97 goto $i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)";
    "if i314 < 97 goto $i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)"->"if i198 > 0 goto return i198";
    "if i314 < 97 goto $i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)"->"$i193 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>(i314)";
    "if i198 > 0 goto return i198"->"if z0 == 0 goto i315 = 0";
    "if i198 > 0 goto return i198"->"return i198";
    "if z0 == 0 goto i315 = 0"->"return i198";
    "if z0 == 0 goto i315 = 0"->"i315 = 0";
    "i315 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i315 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"->"virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)";
    "virtualinvoke r3.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"->"i315 = i315 + 1";
    "i315 = i315 + 1"->"if i315 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)";
    "if i315 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "if i315 < 97 goto virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i315, -1)";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Time\")";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Time\")"->"i316 = 0";
    "i316 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i316 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"i316 = i316 + 1";
    "i316 = i316 + 1"->"if i316 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "if i316 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"i317 = 0";
    "if i316 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci(java.util.concurrent.atomic.AtomicIntegerArray)>(r1)";
    "i317 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i317 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i317 = i317 + 1";
    "i317 = i317 + 1"->"if i317 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "if i317 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"i318 = 0";
    "if i317 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, -1)";
    "i318 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i318 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i318 = i318 + 1";
    "i318 = i318 + 1"->"if i318 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i318 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i319 = 0";
    "if i318 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i319 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i319 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i319 = i319 + 1";
    "i319 = i319 + 1"->"if i319 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i319 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i320 = 0";
    "if i319 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i320 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i320 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i320 = i320 + 1";
    "i320 = i320 + 1"->"if i320 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i320 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i321 = 0";
    "if i320 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i321 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i321 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i321 = i321 + 1";
    "i321 = i321 + 1"->"if i321 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "if i321 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i322 = 0";
    "if i321 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "i322 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i322 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i322 = i322 + 1";
    "i322 = i322 + 1"->"if i322 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "if i322 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i323 = 0";
    "if i322 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "i323 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i323 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i323 = i323 + 1";
    "i323 = i323 + 1"->"if i323 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i323 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i324 = 0";
    "if i323 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i324 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i324 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i324 = i324 + 1";
    "i324 = i324 + 1"->"if i324 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i324 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i325 = 0";
    "if i324 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i325 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i325 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i325 = i325 + 1";
    "i325 = i325 + 1"->"if i325 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i325 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i326 = 0";
    "if i325 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_neg(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i326 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i326 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i326 = i326 + 1";
    "i326 = i326 + 1"->"if i326 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "if i326 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i327 = 0";
    "if i326 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "i327 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i327 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i327 = i327 + 1";
    "i327 = i327 + 1"->"if i327 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "if i327 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i328 = 0";
    "if i327 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "i328 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i328 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i328 = i328 + 1";
    "i328 = i328 + 1"->"if i328 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i328 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i329 = 0";
    "if i328 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i329 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i329 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i329 = i329 + 1";
    "i329 = i329 + 1"->"if i329 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i329 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i330 = 0";
    "if i329 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i330 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i330 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i330 = i330 + 1";
    "i330 = i330 + 1"->"if i330 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i330 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i331 = 0";
    "if i330 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_oppos(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i331 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i331 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i331 = i331 + 1";
    "i331 = i331 + 1"->"if i331 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "if i331 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i332 = 0";
    "if i331 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_off(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "i332 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i332 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i332 = i332 + 1";
    "i332 = i332 + 1"->"if i332 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "if i332 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i333 = 0";
    "if i332 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_off(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "i333 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i333 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i333 = i333 + 1";
    "i333 = i333 + 1"->"if i333 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i333 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i334 = 0";
    "if i333 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i334 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i334 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i334 = i334 + 1";
    "i334 = i334 + 1"->"if i334 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i334 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i335 = 0";
    "if i334 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i335 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i335 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i335 = i335 + 1";
    "i335 = i335 + 1"->"if i335 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i335 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i336 = 0";
    "if i335 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_off(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i336 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i336 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"->"i336 = i336 + 1";
    "i336 = i336 + 1"->"if i336 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)";
    "if i336 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"->"i337 = 0";
    "if i336 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, 3, 123)";
    "i337 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i337 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"->"i337 = i337 + 1";
    "i337 = i337 + 1"->"if i337 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)";
    "if i337 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"->"i338 = 0";
    "if i337 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r3, 123, 3, 103)";
    "i338 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i338 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i338 = i338 + 1";
    "i338 = i338 + 1"->"if i338 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "if i338 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i339 = 0";
    "if i338 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "i339 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i339 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i339 = i339 + 1";
    "i339 = i339 + 1"->"if i339 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "if i339 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"i340 = 0";
    "if i339 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, r3, 3)";
    "i340 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i340 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"->"i340 = i340 + 1";
    "i340 = i340 + 1"->"if i340 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)";
    "if i340 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"->"i341 = 0";
    "if i340 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_inv(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int,int)>(r1, r3, 123, 103, 3)";
    "i341 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i341 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i341 = i341 + 1";
    "i341 = i341 + 1"->"if i341 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "if i341 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"i342 = 0";
    "if i341 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,int)>(r1, 123)";
    "i342 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i342 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i342 = i342 + 1";
    "i342 = i342 + 1"->"if i342 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "if i342 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"i343 = 0";
    "if i342 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r3, 123, 103)";
    "i343 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i343 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i343 = i343 + 1";
    "i343 = i343 + 1"->"if i343 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i343 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i344 = 0";
    "if i343 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i344 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i344 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i344 = i344 + 1";
    "i344 = i344 + 1"->"if i344 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i344 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i345 = 0";
    "if i344 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i345 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i345 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i345 = i345 + 1";
    "i345 = i345 + 1"->"if i345 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i345 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i346 = 0";
    "if i345 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_scl(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i346 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i346 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i346 = i346 + 1";
    "i346 = i346 + 1"->"if i346 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i346 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i347 = 0";
    "if i346 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i347 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i347 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i347 = i347 + 1";
    "i347 = i347 + 1"->"if i347 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i347 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i348 = 0";
    "if i347 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_alnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i348 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i348 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i348 = i348 + 1";
    "i348 = i348 + 1"->"if i348 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i348 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i349 = 0";
    "if i348 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i349 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i349 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i349 = i349 + 1";
    "i349 = i349 + 1"->"if i349 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i349 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i350 = 0";
    "if i349 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_aln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "i350 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i350 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i350 = i350 + 1";
    "i350 = i350 + 1"->"if i350 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i350 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i351 = 0";
    "if i350 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalndst(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i351 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i351 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i351 = i351 + 1";
    "i351 = i351 + 1"->"if i351 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i351 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i352 = 0";
    "if i351 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_cp_unalnsrc(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i352 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i352 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i352 = i352 + 1";
    "i352 = i352 + 1"->"if i352 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "if i352 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"i353 = 0";
    "if i352 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2ci_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray)>(r1, r3)";
    "i353 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i353 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"i353 = i353 + 1";
    "i353 = i353 + 1"->"if i353 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
    "if i353 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"return i198";
    "if i353 < 11000 goto staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)"->"staticinvoke <compiler.c2.cr8004867.TestIntAtomicOrdered: void test_2vi_unaln(java.util.concurrent.atomic.AtomicIntegerArray,java.util.concurrent.atomic.AtomicIntegerArray,int,int)>(r1, r3, 123, 103)";
}
