digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "l7 := @parameter2: long"
    "r0 := @parameter3: int[]"
    "$l10 = (long) i0"
    "$l2 = (long) i1"
    "$l9 = $l2 & 4294967295L"
    "$l6 = (long) i0"
    "$i3 = r0[1]"
    "$l4 = (long) $i3"
    "$l5 = $l4 & 4294967295L"
    "$l8 = $l6 * $l5"
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l10, $l9, $l8, l7)"
    "return"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"l7 := @parameter2: long";
    "l7 := @parameter2: long"->"r0 := @parameter3: int[]";
    "r0 := @parameter3: int[]"->"$l10 = (long) i0";
    "$l10 = (long) i0"->"$l2 = (long) i1";
    "$l2 = (long) i1"->"$l9 = $l2 & 4294967295L";
    "$l9 = $l2 & 4294967295L"->"$l6 = (long) i0";
    "$l6 = (long) i0"->"$i3 = r0[1]";
    "$i3 = r0[1]"->"$l4 = (long) $i3";
    "$l4 = (long) $i3"->"$l5 = $l4 & 4294967295L";
    "$l5 = $l4 & 4294967295L"->"$l8 = $l6 * $l5";
    "$l8 = $l6 * $l5"->"staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l10, $l9, $l8, l7)";
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l10, $l9, $l8, l7)"->"return";
}
