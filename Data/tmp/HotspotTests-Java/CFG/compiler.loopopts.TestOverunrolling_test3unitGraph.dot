digraph "unitGraph" {
    "r1 := @parameter0: int[]"
    "r0 = newarray (int)[8]"
    "i1 = 0"
    "goto [?= $i0 = lengthof r1]"
    "i2 = 5"
    "goto [?= (branch)]"
    "i3 = 1"
    "r0[i2] = 0"
    "lookupswitch(i3) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i3 = i3 + 1; }"
    "<compiler.loopopts.TestOverunrolling: long lFld> = 0L"
    "goto [?= i3 = i3 + 1]"
    "<compiler.loopopts.TestOverunrolling: double dFld> = 0.0"
    "i3 = i3 + 1"
    "if i3 < 1 goto r0[i2] = 0"
    "i2 = i2 + 1"
    "if i2 < i1 goto i3 = 1"
    "i1 = i1 + 1"
    "$i0 = lengthof r1"
    "if i1 < $i0 goto i2 = 5"
    "return"
    "r1 := @parameter0: int[]"->"r0 = newarray (int)[8]";
    "r0 = newarray (int)[8]"->"i1 = 0";
    "i1 = 0"->"goto [?= $i0 = lengthof r1]";
    "goto [?= $i0 = lengthof r1]"->"$i0 = lengthof r1";
    "i2 = 5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < i1 goto i3 = 1";
    "i3 = 1"->"r0[i2] = 0";
    "r0[i2] = 0"->"lookupswitch(i3) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i3 = i3 + 1; }";
    "lookupswitch(i3) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i3 = i3 + 1; }"->"<compiler.loopopts.TestOverunrolling: long lFld> = 0L";
    "lookupswitch(i3) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i3 = i3 + 1; }"->"<compiler.loopopts.TestOverunrolling: double dFld> = 0.0";
    "lookupswitch(i3) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i3 = i3 + 1; }"->"i3 = i3 + 1";
    "<compiler.loopopts.TestOverunrolling: long lFld> = 0L"->"goto [?= i3 = i3 + 1]";
    "goto [?= i3 = i3 + 1]"->"i3 = i3 + 1";
    "<compiler.loopopts.TestOverunrolling: double dFld> = 0.0"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 1 goto r0[i2] = 0";
    "if i3 < 1 goto r0[i2] = 0"->"i2 = i2 + 1";
    "if i3 < 1 goto r0[i2] = 0"->"r0[i2] = 0";
    "i2 = i2 + 1"->"if i2 < i1 goto i3 = 1";
    "if i2 < i1 goto i3 = 1"->"i1 = i1 + 1";
    "if i2 < i1 goto i3 = 1"->"i3 = 1";
    "i1 = i1 + 1"->"$i0 = lengthof r1";
    "$i0 = lengthof r1"->"if i1 < $i0 goto i2 = 5";
    "if i1 < $i0 goto i2 = 5"->"return";
    "if i1 < $i0 goto i2 = 5"->"i2 = 5";
}
