digraph "unitGraph" {
    "r0 := @this: vm.compiler.jbe.hoist.hoist03.hoist03"
    "i1 = 0"
    "i2 = 0"
    "goto [?= (branch)]"
    "i3 = 0"
    "$r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>"
    "$i0 = i1"
    "i1 = i1 + 1"
    "$r1[$i0] = 1"
    "i3 = i3 + 1"
    "if i3 < 300 goto $r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>"
    "i2 = i2 + 1"
    "if i2 < 200 goto i3 = 0"
    "return"
    "r0 := @this: vm.compiler.jbe.hoist.hoist03.hoist03"->"i1 = 0";
    "i1 = 0"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 200 goto i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 300 goto $r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>";
    "$r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>"->"$i0 = i1";
    "$i0 = i1"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"$r1[$i0] = 1";
    "$r1[$i0] = 1"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 300 goto $r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>";
    "if i3 < 300 goto $r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>"->"i2 = i2 + 1";
    "if i3 < 300 goto $r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>"->"$r1 = r0.<vm.compiler.jbe.hoist.hoist03.hoist03: int[] aopt>";
    "i2 = i2 + 1"->"if i2 < 200 goto i3 = 0";
    "if i2 < 200 goto i3 = 0"->"return";
    "if i2 < 200 goto i3 = 0"->"i3 = 0";
}
