digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "r0 = newarray (int)[2]"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_inf(int[])>(r0)"
    "$f1 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_INF>"
    "$f0 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_PLUS_INF>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f1, $f0)"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_zero(int[])>(r0)"
    "$f2 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_ZERO>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f2, 0.0F)"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_nan(int[])>(r0)"
    "$f3 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_NAN>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f3, #NaNF)"
    "r1 = newarray (long)[2]"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_inf(long[])>(r1)"
    "$d1 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_INF>"
    "$d0 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_PLUS_INF>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d1, $d0)"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_zero(long[])>(r1)"
    "$d2 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_ZERO>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d2, 0.0)"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_nan(long[])>(r1)"
    "$d3 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_NAN>"
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d3, #NaN)"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"r0 = newarray (int)[2]";
    "r0 = newarray (int)[2]"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_inf(int[])>(r0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_inf(int[])>(r0)"->"$f1 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_INF>";
    "$f1 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_INF>"->"$f0 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_PLUS_INF>";
    "$f0 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_PLUS_INF>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f1, $f0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f1, $f0)"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_zero(int[])>(r0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_zero(int[])>(r0)"->"$f2 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_ZERO>";
    "$f2 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_MINUS_ZERO>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f2, 0.0F)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f2, 0.0F)"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_nan(int[])>(r0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_float_nan(int[])>(r0)"->"$f3 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_NAN>";
    "$f3 = <compiler.c2.FloatingPointFoldingTest: float FLOAT_NAN>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f3, #NaNF)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_float(int[],float,float)>(r0, $f3, #NaNF)"->"r1 = newarray (long)[2]";
    "r1 = newarray (long)[2]"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_inf(long[])>(r1)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_inf(long[])>(r1)"->"$d1 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_INF>";
    "$d1 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_INF>"->"$d0 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_PLUS_INF>";
    "$d0 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_PLUS_INF>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d1, $d0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d1, $d0)"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_zero(long[])>(r1)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_zero(long[])>(r1)"->"$d2 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_ZERO>";
    "$d2 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_MINUS_ZERO>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d2, 0.0)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d2, 0.0)"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_nan(long[])>(r1)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void test_double_nan(long[])>(r1)"->"$d3 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_NAN>";
    "$d3 = <compiler.c2.FloatingPointFoldingTest: double DOUBLE_NAN>"->"staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d3, #NaN)";
    "staticinvoke <compiler.c2.FloatingPointFoldingTest: void check_double(long[],double,double)>(r1, $d3, #NaN)"->"return";
}
