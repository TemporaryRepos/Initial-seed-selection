digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 4 ]
r6 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$d0 = <compiler.interpreter.Test6539464: double log_value>;
d1 = staticinvoke <java.lang.Math: double log(double)>($d0);
$d2 = <compiler.interpreter.Test6539464: double log_result>;
$b0 = d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r0 = new java.lang.InternalError;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Math.log produces inconsistent results: \");
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$d3 = <compiler.interpreter.Test6539464: double log_result>;
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r5);
throw $r0;
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
i1 = i1 + 1;
"
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>;
"
    "Block 5:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 4 ]
r6 := @parameter0: java.lang.String[];
i1 = 0;
goto [?= (branch)];
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$d0 = <compiler.interpreter.Test6539464: double log_value>;
d1 = staticinvoke <java.lang.Math: double log(double)>($d0);
$d2 = <compiler.interpreter.Test6539464: double log_result>;
$b0 = d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"->"Block 2:
[preds: 1 ] [succs: ]
$r0 = new java.lang.InternalError;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Math.log produces inconsistent results: \");
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$d3 = <compiler.interpreter.Test6539464: double log_result>;
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r5);
throw $r0;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$d0 = <compiler.interpreter.Test6539464: double log_value>;
d1 = staticinvoke <java.lang.Math: double log(double)>($d0);
$d2 = <compiler.interpreter.Test6539464: double log_result>;
$b0 = d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
i1 = i1 + 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
i1 = i1 + 1;
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>;
"->"Block 5:
[preds: 4 ] [succs: ]
return;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i1 < 1000000 goto $d0 = <compiler.interpreter.Test6539464: double log_value>;
"->"Block 1:
[preds: 4 ] [succs: 2 3 ]
$d0 = <compiler.interpreter.Test6539464: double log_value>;
d1 = staticinvoke <java.lang.Math: double log(double)>($d0);
$d2 = <compiler.interpreter.Test6539464: double log_result>;
$b0 = d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
";
}
