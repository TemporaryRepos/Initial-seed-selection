digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "i3 = 0"
    "goto [?= (branch)]"
    "staticinvoke <java.lang.Math: long round(double)>(#NaN)"
    "i3 = i3 + 1"
    "if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN)"
    "$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0)"
    "$b2 = $l1 cmp 1L"
    "if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>"
    "$r1 = new java.lang.AssertionError"
    "specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"TEST FAILED\")"
    "throw $r1"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Test passed.\")"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN)";
    "staticinvoke <java.lang.Math: long round(double)>(#NaN)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN)";
    "if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN)"->"$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0)";
    "if i3 < 10000 goto staticinvoke <java.lang.Math: long round(double)>(#NaN)"->"staticinvoke <java.lang.Math: long round(double)>(#NaN)";
    "$l1 = staticinvoke <java.lang.Math: long round(double)>(1.0)"->"$b2 = $l1 cmp 1L";
    "$b2 = $l1 cmp 1L"->"if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>";
    "if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>"->"$r1 = new java.lang.AssertionError";
    "if $b2 == 0 goto $r0 = <java.lang.System: java.io.PrintStream out>"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "$r1 = new java.lang.AssertionError"->"specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"TEST FAILED\")";
    "specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"TEST FAILED\")"->"throw $r1";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Test passed.\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Test passed.\")"->"return";
}
