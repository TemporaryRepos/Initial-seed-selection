digraph "unitGraph" {
    "r1 := @this: compiler.c2.stemmer.Stemmer"
    "r0 := @parameter0: java.lang.String"
    "i0 = virtualinvoke r0.<java.lang.String: int length()>()"
    "$i1 = r1.<compiler.c2.stemmer.Stemmer: int j>"
    "i2 = $i1 + 1"
    "i7 = 0"
    "goto [?= (branch)]"
    "$r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>"
    "$i3 = i2 + i7"
    "$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7)"
    "$r2[$i3] = $c4"
    "i7 = i7 + 1"
    "if i7 < i0 goto $r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>"
    "$i5 = r1.<compiler.c2.stemmer.Stemmer: int j>"
    "$i6 = $i5 + i0"
    "r1.<compiler.c2.stemmer.Stemmer: int k> = $i6"
    "return"
    "r1 := @this: compiler.c2.stemmer.Stemmer"->"r0 := @parameter0: java.lang.String";
    "r0 := @parameter0: java.lang.String"->"i0 = virtualinvoke r0.<java.lang.String: int length()>()";
    "i0 = virtualinvoke r0.<java.lang.String: int length()>()"->"$i1 = r1.<compiler.c2.stemmer.Stemmer: int j>";
    "$i1 = r1.<compiler.c2.stemmer.Stemmer: int j>"->"i2 = $i1 + 1";
    "i2 = $i1 + 1"->"i7 = 0";
    "i7 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < i0 goto $r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>";
    "$r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>"->"$i3 = i2 + i7";
    "$i3 = i2 + i7"->"$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7)";
    "$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7)"->"$r2[$i3] = $c4";
    "$r2[$i3] = $c4"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < i0 goto $r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>";
    "if i7 < i0 goto $r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>"->"$i5 = r1.<compiler.c2.stemmer.Stemmer: int j>";
    "if i7 < i0 goto $r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>"->"$r2 = r1.<compiler.c2.stemmer.Stemmer: char[] b>";
    "$i5 = r1.<compiler.c2.stemmer.Stemmer: int j>"->"$i6 = $i5 + i0";
    "$i6 = $i5 + i0"->"r1.<compiler.c2.stemmer.Stemmer: int k> = $i6";
    "r1.<compiler.c2.stemmer.Stemmer: int k> = $i6"->"return";
}
