digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 4 ]
r0 := @this: compiler.vectorization.TestPopCountVector;
i4 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
$i0 = $r1[i4];
i1 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);
$r2 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i2 = $r2[i4];
if $i2 == i1 goto i4 = i4 + 1;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Invalid result: output[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$r7 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i3 = $r7[i4];
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);
throw $r3;
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
i4 = i4 + 1;
"
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i4 < 1024 goto $r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
"
    "Block 5:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 4 ]
r0 := @this: compiler.vectorization.TestPopCountVector;
i4 = 0;
goto [?= (branch)];
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i4 < 1024 goto $r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
$i0 = $r1[i4];
i1 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);
$r2 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i2 = $r2[i4];
if $i2 == i1 goto i4 = i4 + 1;
"->"Block 2:
[preds: 1 ] [succs: ]
$r3 = new java.lang.RuntimeException;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Invalid result: output[\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$r7 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i3 = $r7[i4];
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);
throw $r3;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
$i0 = $r1[i4];
i1 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);
$r2 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i2 = $r2[i4];
if $i2 == i1 goto i4 = i4 + 1;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
i4 = i4 + 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
i4 = i4 + 1;
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i4 < 1024 goto $r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i4 < 1024 goto $r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
"->"Block 5:
[preds: 4 ] [succs: ]
return;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i4 < 1024 goto $r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
"->"Block 1:
[preds: 4 ] [succs: 2 3 ]
$r1 = r0.<compiler.vectorization.TestPopCountVector: int[] input>;
$i0 = $r1[i4];
i1 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);
$r2 = r0.<compiler.vectorization.TestPopCountVector: int[] output>;
$i2 = $r2[i4];
if $i2 == i1 goto i4 = i4 + 1;
";
}
