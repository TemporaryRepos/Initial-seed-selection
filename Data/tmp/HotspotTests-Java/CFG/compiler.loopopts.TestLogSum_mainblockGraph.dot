digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 11 ]
r0 := @parameter0: java.lang.String[];
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 11 ] [succs: 9 ]
i1 = 2;
goto [?= (branch)];
"
    "Block 2:
[preds: 9 ] [succs: 7 ]
i2 = 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 7 ] [succs: 5 ]
i3 = 1;
goto [?= (branch)];
"
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
i3 = i3 + 1;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 <= i2 goto staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
"
    "Block 6:
[preds: 5 ] [succs: 7 ]
i2 = i2 + 1;
"
    "Block 7:
[preds: 2 6 ] [succs: 8 3 ]
if i2 <= i1 goto i3 = 1;
"
    "Block 8:
[preds: 7 ] [succs: 9 ]
i1 = i1 + 1;
"
    "Block 9:
[preds: 1 8 ] [succs: 10 2 ]
if i1 < 30 goto i2 = 1;
"
    "Block 10:
[preds: 9 ] [succs: 11 ]
i0 = i0 + 1;
"
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i0 < 6 goto i1 = 2;
"
    "Block 12:
[preds: 11 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 11 ]
r0 := @parameter0: java.lang.String[];
i0 = 0;
goto [?= (branch)];
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i0 < 6 goto i1 = 2;
";
    "Block 1:
[preds: 11 ] [succs: 9 ]
i1 = 2;
goto [?= (branch)];
"->"Block 9:
[preds: 1 8 ] [succs: 10 2 ]
if i1 < 30 goto i2 = 1;
";
    "Block 2:
[preds: 9 ] [succs: 7 ]
i2 = 1;
goto [?= (branch)];
"->"Block 7:
[preds: 2 6 ] [succs: 8 3 ]
if i2 <= i1 goto i3 = 1;
";
    "Block 3:
[preds: 7 ] [succs: 5 ]
i3 = 1;
goto [?= (branch)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 <= i2 goto staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
";
    "Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
i3 = i3 + 1;
"->"Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 <= i2 goto staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 <= i2 goto staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
"->"Block 6:
[preds: 5 ] [succs: 7 ]
i2 = i2 + 1;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 4 ]
if i3 <= i2 goto staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
"->"Block 4:
[preds: 5 ] [succs: 5 ]
staticinvoke <compiler.loopopts.TestLogSum: double computeSum(int,int)>(i3, i2);
i3 = i3 + 1;
";
    "Block 6:
[preds: 5 ] [succs: 7 ]
i2 = i2 + 1;
"->"Block 7:
[preds: 2 6 ] [succs: 8 3 ]
if i2 <= i1 goto i3 = 1;
";
    "Block 7:
[preds: 2 6 ] [succs: 8 3 ]
if i2 <= i1 goto i3 = 1;
"->"Block 8:
[preds: 7 ] [succs: 9 ]
i1 = i1 + 1;
";
    "Block 7:
[preds: 2 6 ] [succs: 8 3 ]
if i2 <= i1 goto i3 = 1;
"->"Block 3:
[preds: 7 ] [succs: 5 ]
i3 = 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 ] [succs: 9 ]
i1 = i1 + 1;
"->"Block 9:
[preds: 1 8 ] [succs: 10 2 ]
if i1 < 30 goto i2 = 1;
";
    "Block 9:
[preds: 1 8 ] [succs: 10 2 ]
if i1 < 30 goto i2 = 1;
"->"Block 10:
[preds: 9 ] [succs: 11 ]
i0 = i0 + 1;
";
    "Block 9:
[preds: 1 8 ] [succs: 10 2 ]
if i1 < 30 goto i2 = 1;
"->"Block 2:
[preds: 9 ] [succs: 7 ]
i2 = 1;
goto [?= (branch)];
";
    "Block 10:
[preds: 9 ] [succs: 11 ]
i0 = i0 + 1;
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i0 < 6 goto i1 = 2;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i0 < 6 goto i1 = 2;
"->"Block 12:
[preds: 11 ] [succs: ]
return;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i0 < 6 goto i1 = 2;
"->"Block 1:
[preds: 11 ] [succs: 9 ]
i1 = 2;
goto [?= (branch)];
";
}
