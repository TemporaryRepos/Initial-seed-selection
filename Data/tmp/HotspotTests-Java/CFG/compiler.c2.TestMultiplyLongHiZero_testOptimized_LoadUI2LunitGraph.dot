digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i2 := @parameter1: int"
    "l10 := @parameter2: long"
    "r0 := @parameter3: int[]"
    "$l1 = (long) i0"
    "$l13 = $l1 & 4294967295L"
    "$l3 = (long) i2"
    "$l12 = $l3 & 4294967295L"
    "$i4 = r0[0]"
    "$l5 = (long) $i4"
    "$l9 = $l5 & 4294967295L"
    "$i6 = r0[1]"
    "$l7 = (long) $i6"
    "$l8 = $l7 & 4294967295L"
    "$l11 = $l9 * $l8"
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l13, $l12, $l11, l10)"
    "return"
    "i0 := @parameter0: int"->"i2 := @parameter1: int";
    "i2 := @parameter1: int"->"l10 := @parameter2: long";
    "l10 := @parameter2: long"->"r0 := @parameter3: int[]";
    "r0 := @parameter3: int[]"->"$l1 = (long) i0";
    "$l1 = (long) i0"->"$l13 = $l1 & 4294967295L";
    "$l13 = $l1 & 4294967295L"->"$l3 = (long) i2";
    "$l3 = (long) i2"->"$l12 = $l3 & 4294967295L";
    "$l12 = $l3 & 4294967295L"->"$i4 = r0[0]";
    "$i4 = r0[0]"->"$l5 = (long) $i4";
    "$l5 = (long) $i4"->"$l9 = $l5 & 4294967295L";
    "$l9 = $l5 & 4294967295L"->"$i6 = r0[1]";
    "$i6 = r0[1]"->"$l7 = (long) $i6";
    "$l7 = (long) $i6"->"$l8 = $l7 & 4294967295L";
    "$l8 = $l7 & 4294967295L"->"$l11 = $l9 * $l8";
    "$l11 = $l9 * $l8"->"staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l13, $l12, $l11, l10)";
    "staticinvoke <compiler.c2.TestMultiplyLongHiZero: void check(long,long,long,long)>($l13, $l12, $l11, l10)"->"return";
}
