digraph "unitGraph" {
    "r11 := @parameter0: java.lang.String[]"
    "$r0 = new SourceDebugExtension"
    "specialinvoke $r0.<SourceDebugExtension: void <init>()>()"
    "r1 = $r0"
    "$r2 = <SourceDebugExtension: byte[] header>"
    "$i0 = lengthof $r2"
    "$i1 = $i0 + 68000"
    "r3 = newarray (byte)[$i1]"
    "i7 = 0"
    "goto [?= $r4 = <SourceDebugExtension: byte[] header>]"
    "$r5 = <SourceDebugExtension: byte[] header>"
    "$b3 = $r5[i7]"
    "r3[i7] = $b3"
    "i7 = i7 + 1"
    "$r4 = <SourceDebugExtension: byte[] header>"
    "$i2 = lengthof $r4"
    "if i7 < $i2 goto $r5 = <SourceDebugExtension: byte[] header>"
    "i8 = 0"
    "goto [?= (branch)]"
    "$r6 = <SourceDebugExtension: byte[] header>"
    "$i4 = lengthof $r6"
    "$i5 = $i4 + i8"
    "r3[$i5] = 2"
    "i8 = i8 + 1"
    "if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>"
    "$i6 = lengthof r3"
    "virtualinvoke r1.<SourceDebugExtension: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestProg\", r3, 0, $i6)"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"Test PASSES\")"
    "goto [?= return]"
    "$r9 := @caughtexception"
    "$r10 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"Test FAILS\")"
    "return"
    "r11 := @parameter0: java.lang.String[]"->"$r0 = new SourceDebugExtension";
    "r11 := @parameter0: java.lang.String[]"->"$r9 := @caughtexception";
    "$r0 = new SourceDebugExtension"->"specialinvoke $r0.<SourceDebugExtension: void <init>()>()";
    "$r0 = new SourceDebugExtension"->"$r9 := @caughtexception";
    "specialinvoke $r0.<SourceDebugExtension: void <init>()>()"->"r1 = $r0";
    "specialinvoke $r0.<SourceDebugExtension: void <init>()>()"->"$r9 := @caughtexception";
    "r1 = $r0"->"$r2 = <SourceDebugExtension: byte[] header>";
    "r1 = $r0"->"$r9 := @caughtexception";
    "$r2 = <SourceDebugExtension: byte[] header>"->"$i0 = lengthof $r2";
    "$r2 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "$i0 = lengthof $r2"->"$i1 = $i0 + 68000";
    "$i0 = lengthof $r2"->"$r9 := @caughtexception";
    "$i1 = $i0 + 68000"->"r3 = newarray (byte)[$i1]";
    "$i1 = $i0 + 68000"->"$r9 := @caughtexception";
    "r3 = newarray (byte)[$i1]"->"i7 = 0";
    "r3 = newarray (byte)[$i1]"->"$r9 := @caughtexception";
    "i7 = 0"->"goto [?= $r4 = <SourceDebugExtension: byte[] header>]";
    "i7 = 0"->"$r9 := @caughtexception";
    "goto [?= $r4 = <SourceDebugExtension: byte[] header>]"->"$r4 = <SourceDebugExtension: byte[] header>";
    "goto [?= $r4 = <SourceDebugExtension: byte[] header>]"->"$r9 := @caughtexception";
    "$r5 = <SourceDebugExtension: byte[] header>"->"$b3 = $r5[i7]";
    "$r5 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "$b3 = $r5[i7]"->"r3[i7] = $b3";
    "$b3 = $r5[i7]"->"$r9 := @caughtexception";
    "r3[i7] = $b3"->"i7 = i7 + 1";
    "r3[i7] = $b3"->"$r9 := @caughtexception";
    "i7 = i7 + 1"->"$r4 = <SourceDebugExtension: byte[] header>";
    "i7 = i7 + 1"->"$r9 := @caughtexception";
    "$r4 = <SourceDebugExtension: byte[] header>"->"$i2 = lengthof $r4";
    "$r4 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "$i2 = lengthof $r4"->"if i7 < $i2 goto $r5 = <SourceDebugExtension: byte[] header>";
    "$i2 = lengthof $r4"->"$r9 := @caughtexception";
    "if i7 < $i2 goto $r5 = <SourceDebugExtension: byte[] header>"->"i8 = 0";
    "if i7 < $i2 goto $r5 = <SourceDebugExtension: byte[] header>"->"$r5 = <SourceDebugExtension: byte[] header>";
    "if i7 < $i2 goto $r5 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "i8 = 0"->"goto [?= (branch)]";
    "i8 = 0"->"$r9 := @caughtexception";
    "goto [?= (branch)]"->"if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>";
    "goto [?= (branch)]"->"$r9 := @caughtexception";
    "$r6 = <SourceDebugExtension: byte[] header>"->"$i4 = lengthof $r6";
    "$r6 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "$i4 = lengthof $r6"->"$i5 = $i4 + i8";
    "$i4 = lengthof $r6"->"$r9 := @caughtexception";
    "$i5 = $i4 + i8"->"r3[$i5] = 2";
    "$i5 = $i4 + i8"->"$r9 := @caughtexception";
    "r3[$i5] = 2"->"i8 = i8 + 1";
    "r3[$i5] = 2"->"$r9 := @caughtexception";
    "i8 = i8 + 1"->"if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>";
    "i8 = i8 + 1"->"$r9 := @caughtexception";
    "if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>"->"$i6 = lengthof r3";
    "if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>"->"$r6 = <SourceDebugExtension: byte[] header>";
    "if i8 < 68000 goto $r6 = <SourceDebugExtension: byte[] header>"->"$r9 := @caughtexception";
    "$i6 = lengthof r3"->"virtualinvoke r1.<SourceDebugExtension: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestProg\", r3, 0, $i6)";
    "$i6 = lengthof r3"->"$r9 := @caughtexception";
    "virtualinvoke r1.<SourceDebugExtension: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestProg\", r3, 0, $i6)"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "virtualinvoke r1.<SourceDebugExtension: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(\"TestProg\", r3, 0, $i6)"->"$r9 := @caughtexception";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"Test PASSES\")";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"$r9 := @caughtexception";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"Test PASSES\")"->"goto [?= return]";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(\"Test PASSES\")"->"$r9 := @caughtexception";
    "goto [?= return]"->"return";
    "$r9 := @caughtexception"->"$r10 = <java.lang.System: java.io.PrintStream out>";
    "$r10 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"Test FAILS\")";
    "virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"Test FAILS\")"->"return";
}
