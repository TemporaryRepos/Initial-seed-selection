digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "i0 := @parameter1: int"
    "i1 = 96"
    "goto [?= (branch)]"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)"
    "i1 = i1 + -1"
    "if i1 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 = 96";
    "i1 = 96"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)"->"i1 = i1 + -1";
    "i1 = i1 + -1"->"if i1 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)";
    "if i1 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)"->"return";
    "if i1 >= 0 goto virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>(i1, -123)";
}
