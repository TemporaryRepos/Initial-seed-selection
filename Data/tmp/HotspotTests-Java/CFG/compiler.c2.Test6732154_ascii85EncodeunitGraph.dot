digraph "unitGraph" {
    "r3 := @this: compiler.c2.Test6732154"
    "r0 := @parameter0: byte[]"
    "$i0 = lengthof r0"
    "$i1 = $i0 + 4"
    "$i2 = $i1 * 5"
    "$i3 = $i2 / 4"
    "$i4 = $i3 + 2"
    "r1 = newarray (byte)[$i4]"
    "l5 = 85L"
    "l6 = l5 * l5"
    "l7 = l5 * l6"
    "l8 = l5 * l7"
    "b9 = 33"
    "i89 = 0"
    "i90 = 0"
    "goto [?= $i104 = i89 + 3]"
    "i91 = i89 + 1"
    "$b10 = r0[i89]"
    "$i11 = $b10 & 255"
    "$l12 = (long) $i11"
    "$l17 = $l12 << 24"
    "i92 = i91 + 1"
    "$b13 = r0[i91]"
    "$i14 = $b13 & 255"
    "$l15 = (long) $i14"
    "$l16 = $l15 << 16"
    "$l22 = $l17 + $l16"
    "i93 = i92 + 1"
    "$b18 = r0[i92]"
    "$i19 = $b18 & 255"
    "$l20 = (long) $i19"
    "$l21 = $l20 << 8"
    "$l26 = $l22 + $l21"
    "i89 = i93 + 1"
    "$b23 = r0[i93]"
    "$i24 = $b23 & 255"
    "$l25 = (long) $i24"
    "l94 = $l26 + $l25"
    "$b27 = l94 cmp 0L"
    "if $b27 != 0 goto l95 = l94"
    "$i52 = i90"
    "i90 = i90 + 1"
    "r1[$i52] = 122"
    "l95 = l94"
    "i96 = i90 + 1"
    "$l29 = l95 / l8"
    "$l28 = (long) b9"
    "$l30 = $l29 + $l28"
    "$i31 = (int) $l30"
    "$b32 = (byte) $i31"
    "r1[i90] = $b32"
    "l97 = l95 % l8"
    "i98 = i96 + 1"
    "$l34 = l97 / l7"
    "$l33 = (long) b9"
    "$l35 = $l34 + $l33"
    "$i36 = (int) $l35"
    "$b37 = (byte) $i36"
    "r1[i96] = $b37"
    "l99 = l97 % l7"
    "i100 = i98 + 1"
    "$l39 = l99 / l6"
    "$l38 = (long) b9"
    "$l40 = $l39 + $l38"
    "$i41 = (int) $l40"
    "$b42 = (byte) $i41"
    "r1[i98] = $b42"
    "l101 = l99 % l6"
    "i102 = i100 + 1"
    "$l44 = l101 / l5"
    "$l43 = (long) b9"
    "$l45 = $l44 + $l43"
    "$i46 = (int) $l45"
    "$b47 = (byte) $i46"
    "r1[i100] = $b47"
    "l103 = l101 % l5"
    "i90 = i102 + 1"
    "$l48 = (long) b9"
    "$l49 = l103 + $l48"
    "$i50 = (int) $l49"
    "$b51 = (byte) $i50"
    "r1[i102] = $b51"
    "$i104 = i89 + 3"
    "$i105 = lengthof r0"
    "if $i104 < $i105 goto i91 = i89 + 1"
    "$i53 = lengthof r0"
    "if i89 >= $i53 goto i115 = i90 + 1"
    "$i54 = lengthof r0"
    "i106 = $i54 - i89"
    "l107 = 0L"
    "goto [?= $i55 = lengthof r0]"
    "$l60 = l107 << 8"
    "$i56 = i89"
    "i89 = i89 + 1"
    "$b57 = r0[$i56]"
    "$i58 = $b57 & 255"
    "$l59 = (long) $i58"
    "l107 = $l60 + $l59"
    "$i55 = lengthof r0"
    "if i89 < $i55 goto $l60 = l107 << 8"
    "i108 = 4 - i106"
    "goto [?= $i61 = i108]"
    "l107 = l107 << 8"
    "$i61 = i108"
    "i108 = i108 + -1"
    "if $i61 > 0 goto l107 = l107 << 8"
    "r2 = newarray (byte)[5]"
    "l109 = l107"
    "$l63 = l109 / l8"
    "$l62 = (long) b9"
    "$l64 = $l63 + $l62"
    "$i65 = (int) $l64"
    "$b66 = (byte) $i65"
    "r2[0] = $b66"
    "l110 = l109 % l8"
    "$l68 = l110 / l7"
    "$l67 = (long) b9"
    "$l69 = $l68 + $l67"
    "$i70 = (int) $l69"
    "$b71 = (byte) $i70"
    "r2[1] = $b71"
    "l111 = l110 % l7"
    "$l73 = l111 / l6"
    "$l72 = (long) b9"
    "$l74 = $l73 + $l72"
    "$i75 = (int) $l74"
    "$b76 = (byte) $i75"
    "r2[2] = $b76"
    "l112 = l111 % l6"
    "$l78 = l112 / l5"
    "$l77 = (long) b9"
    "$l79 = $l78 + $l77"
    "$i80 = (int) $l79"
    "$b81 = (byte) $i80"
    "r2[3] = $b81"
    "l113 = l112 % l5"
    "$l82 = (long) b9"
    "$l83 = l113 + $l82"
    "$i84 = (int) $l83"
    "$b85 = (byte) $i84"
    "r2[4] = $b85"
    "i114 = 0"
    "goto [?= $i86 = i106 + 1]"
    "$i87 = i90"
    "$b88 = r2[i114]"
    "r1[$i87] = $b88"
    "i114 = i114 + 1"
    "$i86 = i106 + 1"
    "if i114 < $i86 goto $i87 = i90"
    "i115 = i90 + 1"
    "r1[i90] = 126"
    "i116 = i115 + 1"
    "r1[i115] = 62"
    "r4 = newarray (byte)[i116]"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i116)"
    "return r4"
    "r3 := @this: compiler.c2.Test6732154"->"r0 := @parameter0: byte[]";
    "r0 := @parameter0: byte[]"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"$i1 = $i0 + 4";
    "$i1 = $i0 + 4"->"$i2 = $i1 * 5";
    "$i2 = $i1 * 5"->"$i3 = $i2 / 4";
    "$i3 = $i2 / 4"->"$i4 = $i3 + 2";
    "$i4 = $i3 + 2"->"r1 = newarray (byte)[$i4]";
    "r1 = newarray (byte)[$i4]"->"l5 = 85L";
    "l5 = 85L"->"l6 = l5 * l5";
    "l6 = l5 * l5"->"l7 = l5 * l6";
    "l7 = l5 * l6"->"l8 = l5 * l7";
    "l8 = l5 * l7"->"b9 = 33";
    "b9 = 33"->"i89 = 0";
    "i89 = 0"->"i90 = 0";
    "i90 = 0"->"goto [?= $i104 = i89 + 3]";
    "goto [?= $i104 = i89 + 3]"->"$i104 = i89 + 3";
    "i91 = i89 + 1"->"$b10 = r0[i89]";
    "$b10 = r0[i89]"->"$i11 = $b10 & 255";
    "$i11 = $b10 & 255"->"$l12 = (long) $i11";
    "$l12 = (long) $i11"->"$l17 = $l12 << 24";
    "$l17 = $l12 << 24"->"i92 = i91 + 1";
    "i92 = i91 + 1"->"$b13 = r0[i91]";
    "$b13 = r0[i91]"->"$i14 = $b13 & 255";
    "$i14 = $b13 & 255"->"$l15 = (long) $i14";
    "$l15 = (long) $i14"->"$l16 = $l15 << 16";
    "$l16 = $l15 << 16"->"$l22 = $l17 + $l16";
    "$l22 = $l17 + $l16"->"i93 = i92 + 1";
    "i93 = i92 + 1"->"$b18 = r0[i92]";
    "$b18 = r0[i92]"->"$i19 = $b18 & 255";
    "$i19 = $b18 & 255"->"$l20 = (long) $i19";
    "$l20 = (long) $i19"->"$l21 = $l20 << 8";
    "$l21 = $l20 << 8"->"$l26 = $l22 + $l21";
    "$l26 = $l22 + $l21"->"i89 = i93 + 1";
    "i89 = i93 + 1"->"$b23 = r0[i93]";
    "$b23 = r0[i93]"->"$i24 = $b23 & 255";
    "$i24 = $b23 & 255"->"$l25 = (long) $i24";
    "$l25 = (long) $i24"->"l94 = $l26 + $l25";
    "l94 = $l26 + $l25"->"$b27 = l94 cmp 0L";
    "$b27 = l94 cmp 0L"->"if $b27 != 0 goto l95 = l94";
    "if $b27 != 0 goto l95 = l94"->"$i52 = i90";
    "if $b27 != 0 goto l95 = l94"->"l95 = l94";
    "$i52 = i90"->"i90 = i90 + 1";
    "i90 = i90 + 1"->"r1[$i52] = 122";
    "r1[$i52] = 122"->"goto [?= $i104 = i89 + 3]";
    "goto [?= $i104 = i89 + 3]"->"$i104 = i89 + 3";
    "l95 = l94"->"i96 = i90 + 1";
    "i96 = i90 + 1"->"$l29 = l95 / l8";
    "$l29 = l95 / l8"->"$l28 = (long) b9";
    "$l28 = (long) b9"->"$l30 = $l29 + $l28";
    "$l30 = $l29 + $l28"->"$i31 = (int) $l30";
    "$i31 = (int) $l30"->"$b32 = (byte) $i31";
    "$b32 = (byte) $i31"->"r1[i90] = $b32";
    "r1[i90] = $b32"->"l97 = l95 % l8";
    "l97 = l95 % l8"->"i98 = i96 + 1";
    "i98 = i96 + 1"->"$l34 = l97 / l7";
    "$l34 = l97 / l7"->"$l33 = (long) b9";
    "$l33 = (long) b9"->"$l35 = $l34 + $l33";
    "$l35 = $l34 + $l33"->"$i36 = (int) $l35";
    "$i36 = (int) $l35"->"$b37 = (byte) $i36";
    "$b37 = (byte) $i36"->"r1[i96] = $b37";
    "r1[i96] = $b37"->"l99 = l97 % l7";
    "l99 = l97 % l7"->"i100 = i98 + 1";
    "i100 = i98 + 1"->"$l39 = l99 / l6";
    "$l39 = l99 / l6"->"$l38 = (long) b9";
    "$l38 = (long) b9"->"$l40 = $l39 + $l38";
    "$l40 = $l39 + $l38"->"$i41 = (int) $l40";
    "$i41 = (int) $l40"->"$b42 = (byte) $i41";
    "$b42 = (byte) $i41"->"r1[i98] = $b42";
    "r1[i98] = $b42"->"l101 = l99 % l6";
    "l101 = l99 % l6"->"i102 = i100 + 1";
    "i102 = i100 + 1"->"$l44 = l101 / l5";
    "$l44 = l101 / l5"->"$l43 = (long) b9";
    "$l43 = (long) b9"->"$l45 = $l44 + $l43";
    "$l45 = $l44 + $l43"->"$i46 = (int) $l45";
    "$i46 = (int) $l45"->"$b47 = (byte) $i46";
    "$b47 = (byte) $i46"->"r1[i100] = $b47";
    "r1[i100] = $b47"->"l103 = l101 % l5";
    "l103 = l101 % l5"->"i90 = i102 + 1";
    "i90 = i102 + 1"->"$l48 = (long) b9";
    "$l48 = (long) b9"->"$l49 = l103 + $l48";
    "$l49 = l103 + $l48"->"$i50 = (int) $l49";
    "$i50 = (int) $l49"->"$b51 = (byte) $i50";
    "$b51 = (byte) $i50"->"r1[i102] = $b51";
    "r1[i102] = $b51"->"$i104 = i89 + 3";
    "$i104 = i89 + 3"->"$i105 = lengthof r0";
    "$i105 = lengthof r0"->"if $i104 < $i105 goto i91 = i89 + 1";
    "if $i104 < $i105 goto i91 = i89 + 1"->"$i53 = lengthof r0";
    "if $i104 < $i105 goto i91 = i89 + 1"->"i91 = i89 + 1";
    "$i53 = lengthof r0"->"if i89 >= $i53 goto i115 = i90 + 1";
    "if i89 >= $i53 goto i115 = i90 + 1"->"$i54 = lengthof r0";
    "if i89 >= $i53 goto i115 = i90 + 1"->"i115 = i90 + 1";
    "$i54 = lengthof r0"->"i106 = $i54 - i89";
    "i106 = $i54 - i89"->"l107 = 0L";
    "l107 = 0L"->"goto [?= $i55 = lengthof r0]";
    "goto [?= $i55 = lengthof r0]"->"$i55 = lengthof r0";
    "$l60 = l107 << 8"->"$i56 = i89";
    "$i56 = i89"->"i89 = i89 + 1";
    "i89 = i89 + 1"->"$b57 = r0[$i56]";
    "$b57 = r0[$i56]"->"$i58 = $b57 & 255";
    "$i58 = $b57 & 255"->"$l59 = (long) $i58";
    "$l59 = (long) $i58"->"l107 = $l60 + $l59";
    "l107 = $l60 + $l59"->"$i55 = lengthof r0";
    "$i55 = lengthof r0"->"if i89 < $i55 goto $l60 = l107 << 8";
    "if i89 < $i55 goto $l60 = l107 << 8"->"i108 = 4 - i106";
    "if i89 < $i55 goto $l60 = l107 << 8"->"$l60 = l107 << 8";
    "i108 = 4 - i106"->"goto [?= $i61 = i108]";
    "goto [?= $i61 = i108]"->"$i61 = i108";
    "l107 = l107 << 8"->"$i61 = i108";
    "$i61 = i108"->"i108 = i108 + -1";
    "i108 = i108 + -1"->"if $i61 > 0 goto l107 = l107 << 8";
    "if $i61 > 0 goto l107 = l107 << 8"->"r2 = newarray (byte)[5]";
    "if $i61 > 0 goto l107 = l107 << 8"->"l107 = l107 << 8";
    "r2 = newarray (byte)[5]"->"l109 = l107";
    "l109 = l107"->"$l63 = l109 / l8";
    "$l63 = l109 / l8"->"$l62 = (long) b9";
    "$l62 = (long) b9"->"$l64 = $l63 + $l62";
    "$l64 = $l63 + $l62"->"$i65 = (int) $l64";
    "$i65 = (int) $l64"->"$b66 = (byte) $i65";
    "$b66 = (byte) $i65"->"r2[0] = $b66";
    "r2[0] = $b66"->"l110 = l109 % l8";
    "l110 = l109 % l8"->"$l68 = l110 / l7";
    "$l68 = l110 / l7"->"$l67 = (long) b9";
    "$l67 = (long) b9"->"$l69 = $l68 + $l67";
    "$l69 = $l68 + $l67"->"$i70 = (int) $l69";
    "$i70 = (int) $l69"->"$b71 = (byte) $i70";
    "$b71 = (byte) $i70"->"r2[1] = $b71";
    "r2[1] = $b71"->"l111 = l110 % l7";
    "l111 = l110 % l7"->"$l73 = l111 / l6";
    "$l73 = l111 / l6"->"$l72 = (long) b9";
    "$l72 = (long) b9"->"$l74 = $l73 + $l72";
    "$l74 = $l73 + $l72"->"$i75 = (int) $l74";
    "$i75 = (int) $l74"->"$b76 = (byte) $i75";
    "$b76 = (byte) $i75"->"r2[2] = $b76";
    "r2[2] = $b76"->"l112 = l111 % l6";
    "l112 = l111 % l6"->"$l78 = l112 / l5";
    "$l78 = l112 / l5"->"$l77 = (long) b9";
    "$l77 = (long) b9"->"$l79 = $l78 + $l77";
    "$l79 = $l78 + $l77"->"$i80 = (int) $l79";
    "$i80 = (int) $l79"->"$b81 = (byte) $i80";
    "$b81 = (byte) $i80"->"r2[3] = $b81";
    "r2[3] = $b81"->"l113 = l112 % l5";
    "l113 = l112 % l5"->"$l82 = (long) b9";
    "$l82 = (long) b9"->"$l83 = l113 + $l82";
    "$l83 = l113 + $l82"->"$i84 = (int) $l83";
    "$i84 = (int) $l83"->"$b85 = (byte) $i84";
    "$b85 = (byte) $i84"->"r2[4] = $b85";
    "r2[4] = $b85"->"i114 = 0";
    "i114 = 0"->"goto [?= $i86 = i106 + 1]";
    "goto [?= $i86 = i106 + 1]"->"$i86 = i106 + 1";
    "$i87 = i90"->"i90 = i90 + 1";
    "i90 = i90 + 1"->"$b88 = r2[i114]";
    "$b88 = r2[i114]"->"r1[$i87] = $b88";
    "r1[$i87] = $b88"->"i114 = i114 + 1";
    "i114 = i114 + 1"->"$i86 = i106 + 1";
    "$i86 = i106 + 1"->"if i114 < $i86 goto $i87 = i90";
    "if i114 < $i86 goto $i87 = i90"->"i115 = i90 + 1";
    "if i114 < $i86 goto $i87 = i90"->"$i87 = i90";
    "i115 = i90 + 1"->"r1[i90] = 126";
    "r1[i90] = 126"->"i116 = i115 + 1";
    "i116 = i115 + 1"->"r1[i115] = 62";
    "r1[i115] = 62"->"r4 = newarray (byte)[i116]";
    "r4 = newarray (byte)[i116]"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i116)";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i116)"->"return r4";
}
