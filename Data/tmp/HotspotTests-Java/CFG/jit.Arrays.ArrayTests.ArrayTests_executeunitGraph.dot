digraph "unitGraph" {
    "r0 := @this: jit.Arrays.ArrayTests.ArrayTests"
    "z7 = 1"
    "$z0 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_chars()>()"
    "z8 = z7 & $z0"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"chars\", z8)"
    "$z1 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_shorts()>()"
    "z9 = z8 & $z1"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"shorts\", z9)"
    "$z2 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_bytes()>()"
    "z10 = z9 & $z2"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"bytes\", z10)"
    "$z3 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_ints()>()"
    "z11 = z10 & $z3"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"ints\", z11)"
    "$z4 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_longs()>()"
    "z12 = z11 & $z4"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"longs\", z12)"
    "$z5 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_floats()>()"
    "z13 = z12 & $z5"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"floats\", z13)"
    "$z6 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_doubles()>()"
    "z14 = z13 & $z6"
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"doubles\", z14)"
    "return z14"
    "r0 := @this: jit.Arrays.ArrayTests.ArrayTests"->"z7 = 1";
    "z7 = 1"->"$z0 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_chars()>()";
    "$z0 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_chars()>()"->"z8 = z7 & $z0";
    "z8 = z7 & $z0"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"chars\", z8)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"chars\", z8)"->"$z1 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_shorts()>()";
    "$z1 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_shorts()>()"->"z9 = z8 & $z1";
    "z9 = z8 & $z1"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"shorts\", z9)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"shorts\", z9)"->"$z2 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_bytes()>()";
    "$z2 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_bytes()>()"->"z10 = z9 & $z2";
    "z10 = z9 & $z2"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"bytes\", z10)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"bytes\", z10)"->"$z3 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_ints()>()";
    "$z3 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_ints()>()"->"z11 = z10 & $z3";
    "z11 = z10 & $z3"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"ints\", z11)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"ints\", z11)"->"$z4 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_longs()>()";
    "$z4 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_longs()>()"->"z12 = z11 & $z4";
    "z12 = z11 & $z4"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"longs\", z12)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"longs\", z12)"->"$z5 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_floats()>()";
    "$z5 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_floats()>()"->"z13 = z12 & $z5";
    "z13 = z12 & $z5"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"floats\", z13)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"floats\", z13)"->"$z6 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_doubles()>()";
    "$z6 = virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: boolean with_doubles()>()"->"z14 = z13 & $z6";
    "z14 = z13 & $z6"->"virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"doubles\", z14)";
    "virtualinvoke r0.<jit.Arrays.ArrayTests.ArrayTests: void check(java.lang.String,boolean)>(\"doubles\", z14)"->"return z14";
}
