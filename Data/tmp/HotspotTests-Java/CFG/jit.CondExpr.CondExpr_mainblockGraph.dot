digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\");
b5 = 1;
z0 = 0;
i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6);
if i6 != 3 goto $b7 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$b7 = 1;
goto [?= i8 = b5 & $b7];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$b7 = 0;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
i8 = b5 & $b7;
i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9);
if i9 != 3 goto $b10 = 0;
"
    "Block 4:
[preds: 3 ] [succs: 6 ]
$b10 = 1;
goto [?= i11 = i8 & $b10];
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
$b10 = 0;
"
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
i11 = i8 & $b10;
i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12);
if i12 != 3 goto $b13 = 0;
"
    "Block 7:
[preds: 6 ] [succs: 9 ]
$b13 = 1;
goto [?= i14 = i11 & $b13];
"
    "Block 8:
[preds: 6 ] [succs: 9 ]
$b13 = 0;
"
    "Block 9:
[preds: 7 8 ] [succs: 10 11 ]
i14 = i11 & $b13;
i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15);
if i15 != 3 goto $b16 = 0;
"
    "Block 10:
[preds: 9 ] [succs: 12 ]
$b16 = 1;
goto [?= i17 = i14 & $b16];
"
    "Block 11:
[preds: 9 ] [succs: 12 ]
$b16 = 0;
"
    "Block 12:
[preds: 10 11 ] [succs: 13 14 ]
i17 = i14 & $b16;
i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18);
if i18 != 10 goto $b19 = 0;
"
    "Block 13:
[preds: 12 ] [succs: 15 ]
$b19 = 1;
goto [?= i20 = i17 & $b19];
"
    "Block 14:
[preds: 12 ] [succs: 15 ]
$b19 = 0;
"
    "Block 15:
[preds: 13 14 ] [succs: 16 17 ]
i20 = i17 & $b19;
if i20 == 0 goto $r1 = new nsk.share.TestFailure;
"
    "Block 16:
[preds: 15 ] [succs: 18 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\");
goto [?= return];
"
    "Block 17:
[preds: 15 ] [succs: ]
$r1 = new nsk.share.TestFailure;
specialinvoke $r1.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"ERRROR in conditional expressions\");
throw $r1;
"
    "Block 18:
[preds: 16 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\");
b5 = 1;
z0 = 0;
i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6);
if i6 != 3 goto $b7 = 0;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$b7 = 1;
goto [?= i8 = b5 & $b7];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r3 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing conditional expressions (srm 10/22)\");
b5 = 1;
z0 = 0;
i6 = staticinvoke <jit.CondExpr.CondExpr: int test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_int\", i6);
if i6 != 3 goto $b7 = 0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$b7 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$b7 = 1;
goto [?= i8 = b5 & $b7];
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
i8 = b5 & $b7;
i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9);
if i9 != 3 goto $b10 = 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$b7 = 0;
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
i8 = b5 & $b7;
i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9);
if i9 != 3 goto $b10 = 0;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
i8 = b5 & $b7;
i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9);
if i9 != 3 goto $b10 = 0;
"->"Block 4:
[preds: 3 ] [succs: 6 ]
$b10 = 1;
goto [?= i11 = i8 & $b10];
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
i8 = b5 & $b7;
i9 = staticinvoke <jit.CondExpr.CondExpr: int test_long(long)>(10L);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_long\", i9);
if i9 != 3 goto $b10 = 0;
"->"Block 5:
[preds: 3 ] [succs: 6 ]
$b10 = 0;
";
    "Block 4:
[preds: 3 ] [succs: 6 ]
$b10 = 1;
goto [?= i11 = i8 & $b10];
"->"Block 6:
[preds: 4 5 ] [succs: 7 8 ]
i11 = i8 & $b10;
i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12);
if i12 != 3 goto $b13 = 0;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
$b10 = 0;
"->"Block 6:
[preds: 4 5 ] [succs: 7 8 ]
i11 = i8 & $b10;
i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12);
if i12 != 3 goto $b13 = 0;
";
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
i11 = i8 & $b10;
i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12);
if i12 != 3 goto $b13 = 0;
"->"Block 7:
[preds: 6 ] [succs: 9 ]
$b13 = 1;
goto [?= i14 = i11 & $b13];
";
    "Block 6:
[preds: 4 5 ] [succs: 7 8 ]
i11 = i8 & $b10;
i12 = staticinvoke <jit.CondExpr.CondExpr: int test_float(float)>(10.0F);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_float\", i12);
if i12 != 3 goto $b13 = 0;
"->"Block 8:
[preds: 6 ] [succs: 9 ]
$b13 = 0;
";
    "Block 7:
[preds: 6 ] [succs: 9 ]
$b13 = 1;
goto [?= i14 = i11 & $b13];
"->"Block 9:
[preds: 7 8 ] [succs: 10 11 ]
i14 = i11 & $b13;
i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15);
if i15 != 3 goto $b16 = 0;
";
    "Block 8:
[preds: 6 ] [succs: 9 ]
$b13 = 0;
"->"Block 9:
[preds: 7 8 ] [succs: 10 11 ]
i14 = i11 & $b13;
i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15);
if i15 != 3 goto $b16 = 0;
";
    "Block 9:
[preds: 7 8 ] [succs: 10 11 ]
i14 = i11 & $b13;
i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15);
if i15 != 3 goto $b16 = 0;
"->"Block 10:
[preds: 9 ] [succs: 12 ]
$b16 = 1;
goto [?= i17 = i14 & $b16];
";
    "Block 9:
[preds: 7 8 ] [succs: 10 11 ]
i14 = i11 & $b13;
i15 = staticinvoke <jit.CondExpr.CondExpr: int test_double(double)>(10.0);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"test_double\", i15);
if i15 != 3 goto $b16 = 0;
"->"Block 11:
[preds: 9 ] [succs: 12 ]
$b16 = 0;
";
    "Block 10:
[preds: 9 ] [succs: 12 ]
$b16 = 1;
goto [?= i17 = i14 & $b16];
"->"Block 12:
[preds: 10 11 ] [succs: 13 14 ]
i17 = i14 & $b16;
i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18);
if i18 != 10 goto $b19 = 0;
";
    "Block 11:
[preds: 9 ] [succs: 12 ]
$b16 = 0;
"->"Block 12:
[preds: 10 11 ] [succs: 13 14 ]
i17 = i14 & $b16;
i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18);
if i18 != 10 goto $b19 = 0;
";
    "Block 12:
[preds: 10 11 ] [succs: 13 14 ]
i17 = i14 & $b16;
i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18);
if i18 != 10 goto $b19 = 0;
"->"Block 13:
[preds: 12 ] [succs: 15 ]
$b19 = 1;
goto [?= i20 = i17 & $b19];
";
    "Block 12:
[preds: 10 11 ] [succs: 13 14 ]
i17 = i14 & $b16;
i18 = staticinvoke <jit.CondExpr.CondExpr: int nested_test_int(int)>(10);
staticinvoke <jit.CondExpr.CondExpr: void trace(java.lang.String,int)>(\"nested_test_int\", i18);
if i18 != 10 goto $b19 = 0;
"->"Block 14:
[preds: 12 ] [succs: 15 ]
$b19 = 0;
";
    "Block 13:
[preds: 12 ] [succs: 15 ]
$b19 = 1;
goto [?= i20 = i17 & $b19];
"->"Block 15:
[preds: 13 14 ] [succs: 16 17 ]
i20 = i17 & $b19;
if i20 == 0 goto $r1 = new nsk.share.TestFailure;
";
    "Block 14:
[preds: 12 ] [succs: 15 ]
$b19 = 0;
"->"Block 15:
[preds: 13 14 ] [succs: 16 17 ]
i20 = i17 & $b19;
if i20 == 0 goto $r1 = new nsk.share.TestFailure;
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 ]
i20 = i17 & $b19;
if i20 == 0 goto $r1 = new nsk.share.TestFailure;
"->"Block 16:
[preds: 15 ] [succs: 18 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\");
goto [?= return];
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 ]
i20 = i17 & $b19;
if i20 == 0 goto $r1 = new nsk.share.TestFailure;
"->"Block 17:
[preds: 15 ] [succs: ]
$r1 = new nsk.share.TestFailure;
specialinvoke $r1.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"ERRROR in conditional expressions\");
throw $r1;
";
    "Block 16:
[preds: 15 ] [succs: 18 ]
$r2 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"Correct!\");
goto [?= return];
"->"Block 18:
[preds: 16 ] [succs: ]
return;
";
}
