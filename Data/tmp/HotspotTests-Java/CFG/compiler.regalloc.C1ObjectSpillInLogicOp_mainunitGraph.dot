digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.concurrent.atomic.AtomicReferenceArray"
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128)"
    "r1 = $r0"
    "$r2 = new java.lang.Integer"
    "specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0)"
    "r3 = $r2"
    "i2 = 0"
    "goto [?= (branch)]"
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()"
    "$i1 = i2 % $i0"
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3)"
    "i2 = i2 + 1"
    "if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"$r0 = new java.util.concurrent.atomic.AtomicReferenceArray";
    "$r0 = new java.util.concurrent.atomic.AtomicReferenceArray"->"specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128)";
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128)"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.lang.Integer";
    "$r2 = new java.lang.Integer"->"specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0)";
    "specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0)"->"r3 = $r2";
    "r3 = $r2"->"i2 = 0";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()";
    "$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()"->"$i1 = i2 % $i0";
    "$i1 = i2 % $i0"->"virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3)";
    "virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()";
    "if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()"->"return";
    "if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()"->"$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>()";
}
