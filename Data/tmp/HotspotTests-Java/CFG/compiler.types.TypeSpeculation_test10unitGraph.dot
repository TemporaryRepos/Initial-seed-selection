digraph "unitGraph" {
    "$r0 = new java.lang.Object"
    "specialinvoke $r0.<java.lang.Object: void <init>()>()"
    "r1 = $r0"
    "r2 = newarray (compiler.types.TypeSpeculation$A)[10]"
    "r3 = newarray (compiler.types.TypeSpeculation$B)[10]"
    "r4 = newarray (compiler.types.TypeSpeculation$C)[10]"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)"
    "staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r4, 0, 0)"
    "staticinvoke <compiler.types.TypeSpeculation: void test10_2(java.lang.Object,boolean,boolean)>(r2, 1, 0)"
    "staticinvoke <compiler.types.TypeSpeculation: void test10_3(java.lang.Object,boolean)>(r1, 1)"
    "i0 = i0 + 1"
    "if i0 < 20000 goto staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)"
    "return 1"
    "$r0 = new java.lang.Object"->"specialinvoke $r0.<java.lang.Object: void <init>()>()";
    "specialinvoke $r0.<java.lang.Object: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r2 = newarray (compiler.types.TypeSpeculation$A)[10]";
    "r2 = newarray (compiler.types.TypeSpeculation$A)[10]"->"r3 = newarray (compiler.types.TypeSpeculation$B)[10]";
    "r3 = newarray (compiler.types.TypeSpeculation$B)[10]"->"r4 = newarray (compiler.types.TypeSpeculation$C)[10]";
    "r4 = newarray (compiler.types.TypeSpeculation$C)[10]"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)";
    "staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)"->"staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r4, 0, 0)";
    "staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r4, 0, 0)"->"staticinvoke <compiler.types.TypeSpeculation: void test10_2(java.lang.Object,boolean,boolean)>(r2, 1, 0)";
    "staticinvoke <compiler.types.TypeSpeculation: void test10_2(java.lang.Object,boolean,boolean)>(r2, 1, 0)"->"staticinvoke <compiler.types.TypeSpeculation: void test10_3(java.lang.Object,boolean)>(r1, 1)";
    "staticinvoke <compiler.types.TypeSpeculation: void test10_3(java.lang.Object,boolean)>(r1, 1)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 20000 goto staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)";
    "if i0 < 20000 goto staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)"->"return 1";
    "if i0 < 20000 goto staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)"->"staticinvoke <compiler.types.TypeSpeculation: void test10_1(compiler.types.TypeSpeculation$B[],boolean,boolean)>(r3, 0, 0)";
}
