digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @this: vm.runtime.defmeth.RedefineTest;
r0 := @parameter0: vm.runtime.defmeth.shared.builder.TestBuilder;
r6 := @parameter1: vm.runtime.defmeth.shared.builder.TestBuilder;
r10 := @parameter2: vm.runtime.defmeth.shared.data.Clazz[];
r1 = virtualinvoke r0.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.executor.TestExecutor prepare()>();
$r3 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r3.<nsk.share.log.Log: void info(java.lang.Object)>(\"Before\");
r4 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
r5 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: vm.runtime.defmeth.shared.MemoryClassLoader getLoader()>();
r7 = virtualinvoke r6.<vm.runtime.defmeth.shared.builder.TestBuilder: java.util.Map produce()>();
$r8 = new java.util.HashMap;
specialinvoke $r8.<java.util.HashMap: void <init>()>();
r9 = $r8;
r11 = r10;
i0 = lengthof r10;
i1 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r20 = r11[i1];
r12 = interfaceinvoke r20.<vm.runtime.defmeth.shared.data.Clazz: java.lang.String name()>();
$r13 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);
$r14 = (byte[]) $r13;
interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r14);
i1 = i1 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r20 = r11[i1];
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r16 = r2.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
$z0 = virtualinvoke $r16.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: boolean isRetransformClasses()>();
virtualinvoke r5.<vm.runtime.defmeth.shared.MemoryClassLoader: void modifyClasses(java.util.Map,boolean)>(r9, $z0);
$r17 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r17.<nsk.share.log.Log: void info(java.lang.Object)>(\"After\");
r21 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
$z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();
if $z1 != 0 goto $z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
"
    "Block 4:
[preds: 3 ] [succs: ]
$r19 = new vm.runtime.defmeth.shared.DefMethTestFailure;
specialinvoke $r19.<vm.runtime.defmeth.shared.DefMethTestFailure: void <init>(java.util.List)>(r4);
throw $r19;
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
if $z2 != 0 goto return;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r18 = new vm.runtime.defmeth.shared.DefMethTestFailure;
specialinvoke $r18.<vm.runtime.defmeth.shared.DefMethTestFailure: void <init>(java.util.List)>(r21);
throw $r18;
"
    "Block 7:
[preds: 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @this: vm.runtime.defmeth.RedefineTest;
r0 := @parameter0: vm.runtime.defmeth.shared.builder.TestBuilder;
r6 := @parameter1: vm.runtime.defmeth.shared.builder.TestBuilder;
r10 := @parameter2: vm.runtime.defmeth.shared.data.Clazz[];
r1 = virtualinvoke r0.<vm.runtime.defmeth.shared.builder.TestBuilder: vm.runtime.defmeth.shared.executor.TestExecutor prepare()>();
$r3 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r3.<nsk.share.log.Log: void info(java.lang.Object)>(\"Before\");
r4 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
r5 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: vm.runtime.defmeth.shared.MemoryClassLoader getLoader()>();
r7 = virtualinvoke r6.<vm.runtime.defmeth.shared.builder.TestBuilder: java.util.Map produce()>();
$r8 = new java.util.HashMap;
specialinvoke $r8.<java.util.HashMap: void <init>()>();
r9 = $r8;
r11 = r10;
i0 = lengthof r10;
i1 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r20 = r11[i1];
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r20 = r11[i1];
r12 = interfaceinvoke r20.<vm.runtime.defmeth.shared.data.Clazz: java.lang.String name()>();
$r13 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);
$r14 = (byte[]) $r13;
interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r14);
i1 = i1 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r20 = r11[i1];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r20 = r11[i1];
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$r16 = r2.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
$z0 = virtualinvoke $r16.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: boolean isRetransformClasses()>();
virtualinvoke r5.<vm.runtime.defmeth.shared.MemoryClassLoader: void modifyClasses(java.util.Map,boolean)>(r9, $z0);
$r17 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r17.<nsk.share.log.Log: void info(java.lang.Object)>(\"After\");
r21 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
$z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();
if $z1 != 0 goto $z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i1 < i0 goto r20 = r11[i1];
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r20 = r11[i1];
r12 = interfaceinvoke r20.<vm.runtime.defmeth.shared.data.Clazz: java.lang.String name()>();
$r13 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);
$r14 = (byte[]) $r13;
interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r14);
i1 = i1 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r16 = r2.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
$z0 = virtualinvoke $r16.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: boolean isRetransformClasses()>();
virtualinvoke r5.<vm.runtime.defmeth.shared.MemoryClassLoader: void modifyClasses(java.util.Map,boolean)>(r9, $z0);
$r17 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r17.<nsk.share.log.Log: void info(java.lang.Object)>(\"After\");
r21 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
$z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();
if $z1 != 0 goto $z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
"->"Block 4:
[preds: 3 ] [succs: ]
$r19 = new vm.runtime.defmeth.shared.DefMethTestFailure;
specialinvoke $r19.<vm.runtime.defmeth.shared.DefMethTestFailure: void <init>(java.util.List)>(r4);
throw $r19;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r16 = r2.<vm.runtime.defmeth.RedefineTest: vm.runtime.defmeth.shared.builder.TestBuilderFactory factory>;
$z0 = virtualinvoke $r16.<vm.runtime.defmeth.shared.builder.TestBuilderFactory: boolean isRetransformClasses()>();
virtualinvoke r5.<vm.runtime.defmeth.shared.MemoryClassLoader: void modifyClasses(java.util.Map,boolean)>(r9, $z0);
$r17 = virtualinvoke r2.<vm.runtime.defmeth.RedefineTest: nsk.share.log.Log getLog()>();
interfaceinvoke $r17.<nsk.share.log.Log: void info(java.lang.Object)>(\"After\");
r21 = interfaceinvoke r1.<vm.runtime.defmeth.shared.executor.TestExecutor: java.util.List run()>();
$z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();
if $z1 != 0 goto $z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
if $z2 != 0 goto return;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
if $z2 != 0 goto return;
"->"Block 6:
[preds: 5 ] [succs: ]
$r18 = new vm.runtime.defmeth.shared.DefMethTestFailure;
specialinvoke $r18.<vm.runtime.defmeth.shared.DefMethTestFailure: void <init>(java.util.List)>(r21);
throw $r18;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();
if $z2 != 0 goto return;
"->"Block 7:
[preds: 5 ] [succs: ]
return;
";
}
