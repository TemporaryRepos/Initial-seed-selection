digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r5 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128);
r1 = $r0;
$r2 = new java.lang.Integer;
specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0);
r3 = $r2;
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
$i1 = i2 % $i0;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3);
i2 = i2 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
"
    "Block 3:
[preds: 2 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r5 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128);
r1 = $r0;
$r2 = new java.lang.Integer;
specialinvoke $r2.<java.lang.Integer: void <init>(int)>(0);
r3 = $r2;
i2 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
$i1 = i2 % $i0;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3);
i2 = i2 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
"->"Block 3:
[preds: 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < 50000 goto $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
"->"Block 1:
[preds: 2 ] [succs: 2 ]
$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
$i1 = i2 % $i0;
virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i1, r3);
i2 = i2 + 1;
";
}
