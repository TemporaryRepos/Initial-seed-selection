digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "$r0 = new compiler.types.TestSpeculationFailedHigherEqual$C"
    "specialinvoke $r0.<compiler.types.TestSpeculationFailedHigherEqual$C: void <init>()>()"
    "r1 = $r0"
    "<compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$C c> = r1"
    "i1 = 0"
    "goto [?= (branch)]"
    "$i0 = i1 % 2"
    "if $i0 != 0 goto $z0 = 0"
    "$z0 = 1"
    "goto [?= staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)]"
    "$z0 = 0"
    "staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)"
    "i1 = i1 + 1"
    "if i1 < 20000 goto $i0 = i1 % 2"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"$r0 = new compiler.types.TestSpeculationFailedHigherEqual$C";
    "$r0 = new compiler.types.TestSpeculationFailedHigherEqual$C"->"specialinvoke $r0.<compiler.types.TestSpeculationFailedHigherEqual$C: void <init>()>()";
    "specialinvoke $r0.<compiler.types.TestSpeculationFailedHigherEqual$C: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"<compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$C c> = r1";
    "<compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$C c> = r1"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 20000 goto $i0 = i1 % 2";
    "$i0 = i1 % 2"->"if $i0 != 0 goto $z0 = 0";
    "if $i0 != 0 goto $z0 = 0"->"$z0 = 1";
    "if $i0 != 0 goto $z0 = 0"->"$z0 = 0";
    "$z0 = 1"->"goto [?= staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)]";
    "goto [?= staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)]"->"staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)";
    "$z0 = 0"->"staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)";
    "staticinvoke <compiler.types.TestSpeculationFailedHigherEqual: compiler.types.TestSpeculationFailedHigherEqual$A m1(compiler.types.TestSpeculationFailedHigherEqual$A,boolean)>(r1, $z0)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 20000 goto $i0 = i1 % 2";
    "if i1 < 20000 goto $i0 = i1 % 2"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "if i1 < 20000 goto $i0 = i1 % 2"->"$i0 = i1 % 2";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"TEST PASSED\")"->"return";
}
