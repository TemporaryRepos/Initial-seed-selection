digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String[]"
    "i1 = 0"
    "goto [?= (branch)]"
    "i0 = i1 * 10"
    "if i0 >= 0 goto i1 = i1 + 1"
    "staticinvoke <jit.init.init02.inittest: void foo(int)>(i0)"
    "i1 = i1 + 1"
    "if i1 < 10 goto i0 = i1 * 10"
    "$z0 = <jit.init.init02.init02: boolean failed>"
    "if $z0 == 0 goto return"
    "$r0 = new nsk.share.TestFailure"
    "specialinvoke $r0.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"\n\nInitializing inittest, test FAILS\n\")"
    "throw $r0"
    "return"
    "r1 := @parameter0: java.lang.String[]"->"i1 = 0";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 10 goto i0 = i1 * 10";
    "i0 = i1 * 10"->"if i0 >= 0 goto i1 = i1 + 1";
    "if i0 >= 0 goto i1 = i1 + 1"->"staticinvoke <jit.init.init02.inittest: void foo(int)>(i0)";
    "if i0 >= 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "staticinvoke <jit.init.init02.inittest: void foo(int)>(i0)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 10 goto i0 = i1 * 10";
    "if i1 < 10 goto i0 = i1 * 10"->"$z0 = <jit.init.init02.init02: boolean failed>";
    "if i1 < 10 goto i0 = i1 * 10"->"i0 = i1 * 10";
    "$z0 = <jit.init.init02.init02: boolean failed>"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r0 = new nsk.share.TestFailure";
    "if $z0 == 0 goto return"->"return";
    "$r0 = new nsk.share.TestFailure"->"specialinvoke $r0.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"\n\nInitializing inittest, test FAILS\n\")";
    "specialinvoke $r0.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"\n\nInitializing inittest, test FAILS\n\")"->"throw $r0";
}
