digraph "unitGraph" {
    "r3 := @parameter0: java.lang.Object"
    "z0 := @parameter1: boolean"
    "virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>()"
    "if z0 == 0 goto r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)"
    "return null"
    "r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)"
    "r1 = newarray (int)[10]"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, 0, 10)"
    "goto [?= return r1]"
    "$r2 := @caughtexception"
    "return r1"
    "r3 := @parameter0: java.lang.Object"->"z0 := @parameter1: boolean";
    "z0 := @parameter1: boolean"->"virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>()";
    "virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>()"->"if z0 == 0 goto r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)";
    "if z0 == 0 goto r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)"->"return null";
    "if z0 == 0 goto r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)"->"r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)";
    "r4 = staticinvoke <compiler.arraycopy.TestArrayCopyNoInit: java.lang.Object m7_src(java.lang.Object)>(r3)"->"r1 = newarray (int)[10]";
    "r1 = newarray (int)[10]"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, 0, 10)";
    "r1 = newarray (int)[10]"->"$r2 := @caughtexception";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, 0, 10)"->"goto [?= return r1]";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, 0, 10)"->"$r2 := @caughtexception";
    "goto [?= return r1]"->"return r1";
    "$r2 := @caughtexception"->"return r1";
}
