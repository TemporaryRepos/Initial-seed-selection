digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()"
    "i0 = i0 + 1"
    "if i0 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()"
    "i1 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()"
    "i1 = i1 + 1"
    "if i1 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()"
    "i2 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()"
    "i2 = i2 + 1"
    "if i2 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()"
    "i3 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()"
    "i3 = i3 + 1"
    "if i3 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()"
    "i4 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()"
    "i4 = i4 + 1"
    "if i4 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()"
    "i5 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()"
    "i5 = i5 + 1"
    "if i5 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()"
    "i6 = 0"
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()"
    "i6 = i6 + 1"
    "if i6 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()";
    "if i0 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()"->"i1 = 0";
    "if i0 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$0()>()";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()";
    "if i1 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()"->"i2 = 0";
    "if i1 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$1()>()";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()";
    "if i2 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()"->"i3 = 0";
    "if i2 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$2()>()";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()";
    "if i3 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()"->"i4 = 0";
    "if i3 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$3()>()";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()";
    "if i4 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()"->"i5 = 0";
    "if i4 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$4()>()";
    "i5 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"if i5 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()";
    "if i5 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()"->"i6 = 0";
    "if i5 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$5()>()";
    "i6 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()";
    "staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"if i6 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()";
    "if i6 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()"->"return";
    "if i6 < 20000 goto staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()"->"staticinvoke <compiler.jsr292.MHInlineTest: void access$6()>()";
}
