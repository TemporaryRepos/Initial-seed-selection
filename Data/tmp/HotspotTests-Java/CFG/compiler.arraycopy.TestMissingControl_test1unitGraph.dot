digraph "unitGraph" {
    "r0 = newarray (int)[10]"
    "r1 = newarray (int)[5]"
    "i0 = 0"
    "goto [?= (branch)]"
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"
    "i0 = i0 + 1"
    "if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"
    "i1 = 0"
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"
    "goto [?= i1 = i1 + 1]"
    "$r7 := @caughtexception"
    "i1 = i1 + 1"
    "if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"
    "i2 = 0"
    "i2 = i2 + 1"
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null)"
    "goto [?= return]"
    "$r6 := @caughtexception"
    "return"
    "r0 = newarray (int)[10]"->"r1 = newarray (int)[5]";
    "r1 = newarray (int)[5]"->"i0 = 0";
    "i0 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"i0 = i0 + 1";
    "i0 = i0 + 1"->"if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"i1 = 0";
    "if i0 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "i1 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"->"goto [?= i1 = i1 + 1]";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"->"$r7 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r7 := @caughtexception"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)";
    "if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"->"i2 = 0";
    "if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"->"staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)";
    "if i1 < 10 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r1)"->"$r7 := @caughtexception";
    "i2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null)";
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)";
    "if i2 < 20000 goto staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(r0)"->"$r6 := @caughtexception";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null)"->"goto [?= return]";
    "staticinvoke <compiler.arraycopy.TestMissingControl: int[] m1(int[])>(null)"->"$r6 := @caughtexception";
    "goto [?= return]"->"return";
    "$r6 := @caughtexception"->"return";
}
