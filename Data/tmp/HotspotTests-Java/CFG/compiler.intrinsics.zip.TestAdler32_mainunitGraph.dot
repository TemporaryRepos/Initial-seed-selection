digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0)"
    "i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512)"
    "i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>()"
    "z3 = 0"
    "i4 = 20000"
    "i5 = 20000"
    "$i2 = lengthof r2"
    "if $i2 <= 0 goto (branch)"
    "$r31 = r2[0]"
    "$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\")"
    "if $z2 == 0 goto $r32 = r2[0]"
    "z3 = 1"
    "goto [?= $i3 = lengthof r2]"
    "$r32 = r2[0]"
    "$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32)"
    "i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>()"
    "$i3 = lengthof r2"
    "if $i3 <= 1 goto (branch)"
    "$r34 = r2[1]"
    "$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34)"
    "i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>()"
    "if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>"
    "staticinvoke <compiler.intrinsics.zip.TestAdler32: void test_multi(int)>(i5)"
    "return"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \")"
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \")"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)"
    "$r13 = <java.lang.System: java.io.PrintStream out>"
    "$r12 = new java.lang.StringBuilder"
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \")"
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15)"
    "r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0)"
    "$r17 = new java.util.zip.Adler32"
    "specialinvoke $r17.<java.util.zip.Adler32: void <init>()>()"
    "r18 = $r17"
    "$r19 = new java.util.zip.Adler32"
    "specialinvoke $r19.<java.util.zip.Adler32: void <init>()>()"
    "r20 = $r19"
    "$r21 = new java.util.zip.Adler32"
    "specialinvoke $r21.<java.util.zip.Adler32: void <init>()>()"
    "r22 = $r21"
    "virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"
    "$r23 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"
    "i6 = 0"
    "goto [?= (branch)]"
    "virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"
    "virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"
    "i6 = i6 + 1"
    "if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"
    "i7 = 0"
    "i7 = i7 + 1"
    "if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"
    "i8 = 0"
    "$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20)"
    "if $z0 != 0 goto i8 = i8 + 1"
    "goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)]"
    "i8 = i8 + 1"
    "if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"
    "staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)"
    "$r24 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"
    "r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1)"
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1)"
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>()"
    "i9 = 0"
    "virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"
    "virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)"
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()"
    "i9 = i9 + 1"
    "if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"
    "i10 = 0"
    "i10 = i10 + 1"
    "if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"
    "i11 = 0"
    "$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22)"
    "if $z1 != 0 goto i11 = i11 + 1"
    "i11 = i11 + 1"
    "if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"
    "$r30 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"
    "r2 := @parameter0: java.lang.String[]"->"$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0)";
    "$r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"offset\", 0)"->"i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()";
    "i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>(\"msgSize\", 512)"->"i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>()";
    "i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>()"->"z3 = 0";
    "z3 = 0"->"i4 = 20000";
    "i4 = 20000"->"i5 = 20000";
    "i5 = 20000"->"$i2 = lengthof r2";
    "$i2 = lengthof r2"->"if $i2 <= 0 goto (branch)";
    "if $i2 <= 0 goto (branch)"->"$r31 = r2[0]";
    "if $i2 <= 0 goto (branch)"->"if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>";
    "$r31 = r2[0]"->"$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\")";
    "$z2 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(\"-m\")"->"if $z2 == 0 goto $r32 = r2[0]";
    "if $z2 == 0 goto $r32 = r2[0]"->"z3 = 1";
    "if $z2 == 0 goto $r32 = r2[0]"->"$r32 = r2[0]";
    "z3 = 1"->"goto [?= $i3 = lengthof r2]";
    "goto [?= $i3 = lengthof r2]"->"$i3 = lengthof r2";
    "$r32 = r2[0]"->"$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32)";
    "$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r32)"->"i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>()";
    "i4 = virtualinvoke $r33.<java.lang.Integer: int intValue()>()"->"$i3 = lengthof r2";
    "$i3 = lengthof r2"->"if $i3 <= 1 goto (branch)";
    "if $i3 <= 1 goto (branch)"->"$r34 = r2[1]";
    "if $i3 <= 1 goto (branch)"->"if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>";
    "$r34 = r2[1]"->"$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34)";
    "$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r34)"->"i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>()";
    "i5 = virtualinvoke $r35.<java.lang.Integer: int intValue()>()"->"if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>";
    "if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>"->"staticinvoke <compiler.intrinsics.zip.TestAdler32: void test_multi(int)>(i5)";
    "if z3 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "staticinvoke <compiler.intrinsics.zip.TestAdler32: void test_multi(int)>(i5)"->"return";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"$r3 = new java.lang.StringBuilder";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \")";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\" offset = \")"->"$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)";
    "$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)"->"$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6)"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \")";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"msgSize = \")"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" bytes\")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)"->"$r13 = <java.lang.System: java.io.PrintStream out>";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"$r12 = new java.lang.StringBuilder";
    "$r12 = new java.lang.StringBuilder"->"specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \")";
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"  iters = \")"->"$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)";
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15)";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r15)"->"r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0)";
    "r16 = staticinvoke <compiler.intrinsics.zip.TestAdler32: byte[] initializedBytes(int,int)>(i1, i0)"->"$r17 = new java.util.zip.Adler32";
    "$r17 = new java.util.zip.Adler32"->"specialinvoke $r17.<java.util.zip.Adler32: void <init>()>()";
    "specialinvoke $r17.<java.util.zip.Adler32: void <init>()>()"->"r18 = $r17";
    "r18 = $r17"->"$r19 = new java.util.zip.Adler32";
    "$r19 = new java.util.zip.Adler32"->"specialinvoke $r19.<java.util.zip.Adler32: void <init>()>()";
    "specialinvoke $r19.<java.util.zip.Adler32: void <init>()>()"->"r20 = $r19";
    "r20 = $r19"->"$r21 = new java.util.zip.Adler32";
    "$r21 = new java.util.zip.Adler32"->"specialinvoke $r21.<java.util.zip.Adler32: void <init>()>()";
    "specialinvoke $r21.<java.util.zip.Adler32: void <init>()>()"->"r22 = $r21";
    "r22 = $r21"->"virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)";
    "virtualinvoke r18.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"->"$r23 = <java.lang.System: java.io.PrintStream out>";
    "$r23 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")";
    "virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"->"i6 = 0";
    "i6 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)";
    "virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"i7 = 0";
    "if i6 < i5 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "i7 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)";
    "virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"i8 = 0";
    "if i7 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "i8 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)";
    "virtualinvoke r20.<java.util.zip.Adler32: void update(byte[],int,int)>(r16, i0, i1)"->"$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20)";
    "$z0 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r20)"->"if $z0 != 0 goto i8 = i8 + 1";
    "if $z0 != 0 goto i8 = i8 + 1"->"goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)]";
    "if $z0 != 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)]"->"staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)";
    "i8 = i8 + 1"->"if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)";
    "if i8 < i4 goto virtualinvoke r20.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r20.<java.util.zip.Adler32: void reset()>()";
    "staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)"->"$r24 = <java.lang.System: java.io.PrintStream out>";
    "$r24 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")";
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"->"r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1)";
    "r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1)"->"virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1)";
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r16, i0, i1)"->"virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>()";
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer flip()>()"->"i9 = 0";
    "i9 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)";
    "virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)"->"virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()";
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"i10 = 0";
    "if i9 < i5 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "i10 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)";
    "virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)"->"virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()";
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"i11 = 0";
    "if i10 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "i11 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)";
    "virtualinvoke r22.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r36)"->"virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()";
    "virtualinvoke r36.<java.nio.ByteBuffer: java.nio.Buffer rewind()>()"->"$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22)";
    "$z1 = staticinvoke <compiler.intrinsics.zip.TestAdler32: boolean check(java.util.zip.Checksum,java.util.zip.Checksum)>(r18, r22)"->"if $z1 != 0 goto i11 = i11 + 1";
    "if $z1 != 0 goto i11 = i11 + 1"->"goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)]";
    "if $z1 != 0 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "goto [?= staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)]"->"staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)";
    "i11 = i11 + 1"->"if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)";
    "if i11 < i4 goto virtualinvoke r22.<java.util.zip.Adler32: void reset()>()"->"virtualinvoke r22.<java.util.zip.Adler32: void reset()>()";
    "staticinvoke <compiler.intrinsics.zip.TestAdler32: void report(java.lang.String,java.util.zip.Checksum,java.util.zip.Checksum)>(\"Adlers\", r18, r20)"->"$r30 = <java.lang.System: java.io.PrintStream out>";
    "$r30 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")";
    "virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>(\"-------------------------------------------------------\")"->"return";
}
