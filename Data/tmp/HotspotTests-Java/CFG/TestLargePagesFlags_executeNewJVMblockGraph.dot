digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @parameter0: TestLargePagesFlags$Flag[];
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
r3 = r2;
i0 = lengthof r2;
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
r10 = r3[i2];
$r4 = interfaceinvoke r10.<TestLargePagesFlags$Flag: java.lang.String flagString()>();
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);
i2 = i2 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < i0 goto r10 = r3[i2];
"
    "Block 3:
[preds: 2 ] [succs: ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(\"-XX:+PrintFlagsFinal\");
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(\"-version\");
$i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();
$r5 = newarray (java.lang.String)[$i1];
$r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);
$r7 = (java.lang.String[]) $r6;
r11 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r7);
$r8 = new jdk.test.lib.process.OutputAnalyzer;
$r9 = virtualinvoke r11.<java.lang.ProcessBuilder: java.lang.Process start()>();
specialinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r9);
r12 = $r8;
return r12;
"
    "Block 0:
[preds: ] [succs: 2 ]
r2 := @parameter0: TestLargePagesFlags$Flag[];
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
r3 = r2;
i0 = lengthof r2;
i2 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < i0 goto r10 = r3[i2];
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
r10 = r3[i2];
$r4 = interfaceinvoke r10.<TestLargePagesFlags$Flag: java.lang.String flagString()>();
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);
i2 = i2 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < i0 goto r10 = r3[i2];
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < i0 goto r10 = r3[i2];
"->"Block 3:
[preds: 2 ] [succs: ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(\"-XX:+PrintFlagsFinal\");
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(\"-version\");
$i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();
$r5 = newarray (java.lang.String)[$i1];
$r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);
$r7 = (java.lang.String[]) $r6;
r11 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r7);
$r8 = new jdk.test.lib.process.OutputAnalyzer;
$r9 = virtualinvoke r11.<java.lang.ProcessBuilder: java.lang.Process start()>();
specialinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r9);
r12 = $r8;
return r12;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i2 < i0 goto r10 = r3[i2];
"->"Block 1:
[preds: 2 ] [succs: 2 ]
r10 = r3[i2];
$r4 = interfaceinvoke r10.<TestLargePagesFlags$Flag: java.lang.String flagString()>();
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);
i2 = i2 + 1;
";
}
