digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: jit.FloatingPoint.gen_math.Filtering.Filtering;
d0 := @parameter0: double;
d1 := @parameter1: double;
$b0 = d0 cmpg d1;
if $b0 >= 0 goto $r1 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
"
    "Block 2:
[preds: 0 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream out>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"expected error: \");
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);
$r5 = <java.lang.System: java.io.PrintStream out>;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"   found error: \");
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);
$r8 = new nsk.share.TestFailure;
specialinvoke $r8.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\");
throw $r8;
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: jit.FloatingPoint.gen_math.Filtering.Filtering;
d0 := @parameter0: double;
d1 := @parameter1: double;
$b0 = d0 cmpg d1;
if $b0 >= 0 goto $r1 = <java.lang.System: java.io.PrintStream out>;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: jit.FloatingPoint.gen_math.Filtering.Filtering;
d0 := @parameter0: double;
d1 := @parameter1: double;
$b0 = d0 cmpg d1;
if $b0 >= 0 goto $r1 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 0 ] [succs: ]
$r1 = <java.lang.System: java.io.PrintStream out>;
$r0 = new java.lang.StringBuilder;
specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"expected error: \");
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);
$r5 = <java.lang.System: java.io.PrintStream out>;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"   found error: \");
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);
$r8 = new nsk.share.TestFailure;
specialinvoke $r8.<nsk.share.TestFailure: void <init>(java.lang.String)>(\"test FAIL\");
throw $r8;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"test PASS\");
goto [?= return];
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
}
