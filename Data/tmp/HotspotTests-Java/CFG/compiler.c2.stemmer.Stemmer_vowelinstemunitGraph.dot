digraph "unitGraph" {
    "r0 := @this: compiler.c2.stemmer.Stemmer"
    "i1 = 0"
    "goto [?= $i0 = r0.<compiler.c2.stemmer.Stemmer: int j>]"
    "$z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)"
    "if $z0 != 0 goto i1 = i1 + 1"
    "return 1"
    "i1 = i1 + 1"
    "$i0 = r0.<compiler.c2.stemmer.Stemmer: int j>"
    "if i1 <= $i0 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)"
    "return 0"
    "r0 := @this: compiler.c2.stemmer.Stemmer"->"i1 = 0";
    "i1 = 0"->"goto [?= $i0 = r0.<compiler.c2.stemmer.Stemmer: int j>]";
    "goto [?= $i0 = r0.<compiler.c2.stemmer.Stemmer: int j>]"->"$i0 = r0.<compiler.c2.stemmer.Stemmer: int j>";
    "$z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)"->"if $z0 != 0 goto i1 = i1 + 1";
    "if $z0 != 0 goto i1 = i1 + 1"->"return 1";
    "if $z0 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"$i0 = r0.<compiler.c2.stemmer.Stemmer: int j>";
    "$i0 = r0.<compiler.c2.stemmer.Stemmer: int j>"->"if i1 <= $i0 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)";
    "if i1 <= $i0 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)"->"return 0";
    "if i1 <= $i0 goto $z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)"->"$z0 = specialinvoke r0.<compiler.c2.stemmer.Stemmer: boolean cons(int)>(i1)";
}
