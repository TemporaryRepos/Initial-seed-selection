digraph "unitGraph" {
    "i2 := @parameter0: int"
    "i4 = 0"
    "goto [?= (branch)]"
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$l0 = $r0[0]"
    "$b1 = $l0 cmp -2L"
    "if $b1 != 0 goto $r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "goto [?= return]"
    "$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "$l3 = (long) i4"
    "$r1[i2] = $l3"
    "i4 = i4 + 1"
    "if i4 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"
    "return"
    "i2 := @parameter0: int"->"i4 = 0";
    "i4 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$l0 = $r0[0]";
    "$l0 = $r0[0]"->"$b1 = $l0 cmp -2L";
    "$b1 = $l0 cmp -2L"->"if $b1 != 0 goto $r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "if $b1 != 0 goto $r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"goto [?= return]";
    "if $b1 != 0 goto $r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "goto [?= return]"->"return";
    "$r1 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$l3 = (long) i4";
    "$l3 = (long) i4"->"$r1[i2] = $l3";
    "$r1[i2] = $l3"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"if i4 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
    "if i4 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"return";
    "if i4 < 1000 goto $r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>"->"$r0 = <compiler.loopopts.TestMoveStoresOutOfLoops: long[] array>";
}
