digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 12 ]
r1 := @parameter0: int[];
z0 := @parameter1: boolean;
r0 = newarray (int)[8];
i0 = -8;
goto [?= (branch)];
"
    "Block 1:
[preds: 12 ] [succs: 10 ]
i1 = 5;
goto [?= (branch)];
"
    "Block 2:
[preds: 10 ] [succs: 3 ]
i2 = 1;
"
    "Block 3:
[preds: 2 8 ] [succs: 4 5 ]
if z0 == 0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
r0[i1] = 0;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
"
    "Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
"
    "Block 9:
[preds: 8 ] [succs: 10 ]
i1 = i1 + -1;
"
    "Block 10:
[preds: 1 9 ] [succs: 11 2 ]
if i1 > i0 goto i2 = 1;
"
    "Block 11:
[preds: 10 ] [succs: 12 ]
i0 = i0 + 1;
"
    "Block 12:
[preds: 0 11 ] [succs: 13 1 ]
if i0 < 8 goto i1 = 5;
"
    "Block 13:
[preds: 12 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 12 ]
r1 := @parameter0: int[];
z0 := @parameter1: boolean;
r0 = newarray (int)[8];
i0 = -8;
goto [?= (branch)];
"->"Block 12:
[preds: 0 11 ] [succs: 13 1 ]
if i0 < 8 goto i1 = 5;
";
    "Block 1:
[preds: 12 ] [succs: 10 ]
i1 = 5;
goto [?= (branch)];
"->"Block 10:
[preds: 1 9 ] [succs: 11 2 ]
if i1 > i0 goto i2 = 1;
";
    "Block 2:
[preds: 10 ] [succs: 3 ]
i2 = 1;
"->"Block 3:
[preds: 2 8 ] [succs: 4 5 ]
if z0 == 0 goto (branch);
";
    "Block 3:
[preds: 2 8 ] [succs: 4 5 ]
if z0 == 0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 5 ]
r0[i1] = 0;
";
    "Block 3:
[preds: 2 8 ] [succs: 4 5 ]
if z0 == 0 goto (branch);
"->"Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
r0[i1] = 0;
"->"Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
";
    "Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 6:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
";
    "Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 7:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 7 8 ]
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
"->"Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
"->"Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
";
    "Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
"->"Block 9:
[preds: 8 ] [succs: 10 ]
i1 = i1 + -1;
";
    "Block 8:
[preds: 5 6 7 ] [succs: 9 3 ]
i2 = i2 + 1;
if i2 < 1 goto (branch);
"->"Block 3:
[preds: 2 8 ] [succs: 4 5 ]
if z0 == 0 goto (branch);
";
    "Block 9:
[preds: 8 ] [succs: 10 ]
i1 = i1 + -1;
"->"Block 10:
[preds: 1 9 ] [succs: 11 2 ]
if i1 > i0 goto i2 = 1;
";
    "Block 10:
[preds: 1 9 ] [succs: 11 2 ]
if i1 > i0 goto i2 = 1;
"->"Block 11:
[preds: 10 ] [succs: 12 ]
i0 = i0 + 1;
";
    "Block 10:
[preds: 1 9 ] [succs: 11 2 ]
if i1 > i0 goto i2 = 1;
"->"Block 2:
[preds: 10 ] [succs: 3 ]
i2 = 1;
";
    "Block 11:
[preds: 10 ] [succs: 12 ]
i0 = i0 + 1;
"->"Block 12:
[preds: 0 11 ] [succs: 13 1 ]
if i0 < 8 goto i1 = 5;
";
    "Block 12:
[preds: 0 11 ] [succs: 13 1 ]
if i0 < 8 goto i1 = 5;
"->"Block 13:
[preds: 12 ] [succs: ]
return;
";
    "Block 12:
[preds: 0 11 ] [succs: 13 1 ]
if i0 < 8 goto i1 = 5;
"->"Block 1:
[preds: 12 ] [succs: 10 ]
i1 = 5;
goto [?= (branch)];
";
}
