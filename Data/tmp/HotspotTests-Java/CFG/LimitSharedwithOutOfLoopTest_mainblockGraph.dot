digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 8 ]
r6 := @parameter0: java.lang.String[];
r0 = newarray (boolean)[2001];
r1 = newarray (boolean)[2001];
r2 = newarray (boolean)[2001];
r1[1000] = 1;
r2[2000] = 1;
i0 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
"
    "Block 2:
[preds: 1 ] [succs: ]
$r5 = new java.lang.RuntimeException;
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r5;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
"
    "Block 4:
[preds: 3 ] [succs: ]
$r4 = new java.lang.RuntimeException;
specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r4;
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
if $z2 == 0 goto i0 = i0 + 1;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r3 = new java.lang.RuntimeException;
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r3;
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
"
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
"
    "Block 9:
[preds: 8 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 8 ]
r6 := @parameter0: java.lang.String[];
r0 = newarray (boolean)[2001];
r1 = newarray (boolean)[2001];
r2 = newarray (boolean)[2001];
r1[1000] = 1;
r2[2000] = 1;
i0 = 0;
goto [?= (branch)];
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
";
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
"->"Block 2:
[preds: 1 ] [succs: ]
$r5 = new java.lang.RuntimeException;
specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r5;
";
    "Block 1:
[preds: 8 ] [succs: 2 3 ]
$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
"->"Block 4:
[preds: 3 ] [succs: ]
$r4 = new java.lang.RuntimeException;
specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r4;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
if $z1 != 0 goto $z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
if $z2 == 0 goto i0 = i0 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
if $z2 == 0 goto i0 = i0 + 1;
"->"Block 6:
[preds: 5 ] [succs: ]
$r3 = new java.lang.RuntimeException;
specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"bad return\");
throw $r3;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z2 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r2);
if $z2 == 0 goto i0 = i0 + 1;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
i0 = i0 + 1;
"->"Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
"->"Block 9:
[preds: 8 ] [succs: ]
return;
";
    "Block 8:
[preds: 0 7 ] [succs: 9 1 ]
if i0 < 20000 goto $z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
"->"Block 1:
[preds: 8 ] [succs: 2 3 ]
$z0 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r0);
if $z0 == 0 goto $z1 = staticinvoke <LimitSharedwithOutOfLoopTest: boolean test(int,boolean[])>(2000, r1);
";
}
