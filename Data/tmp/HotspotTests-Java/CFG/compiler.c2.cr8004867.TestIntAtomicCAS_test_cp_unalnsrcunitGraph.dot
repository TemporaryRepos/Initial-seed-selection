digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"
    "i3 = 0"
    "goto [?= (branch)]"
    "$i0 = i3 + 5"
    "$i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i0)"
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i3, $i1)"
    "i3 = i3 + 1"
    "if i3 < 92 goto $i0 = i3 + 5"
    "return"
    "r0 := @parameter0: java.util.concurrent.atomic.AtomicIntegerArray"->"r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray";
    "r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray"->"i3 = 0";
    "i3 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 < 92 goto $i0 = i3 + 5";
    "$i0 = i3 + 5"->"$i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i0)";
    "$i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i0)"->"virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i3, $i1)";
    "virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>(i3, $i1)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"if i3 < 92 goto $i0 = i3 + 5";
    "if i3 < 92 goto $i0 = i3 + 5"->"return";
    "if i3 < 92 goto $i0 = i3 + 5"->"$i0 = i3 + 5";
}
