digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 4 ]
l0 := @parameter0: long;
$l1 = <TestGCOld: long treeSize>;
$l2 = l0 / $l1;
i3 = (int) $l2;
$l4 = <TestGCOld: long treeSize>;
l14 = l0 % $l4;
i15 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r0 = <TestGCOld: TreeNode[] trees>;
$i5 = <TestGCOld: int where>;
$i6 = $i5 + 1;
<TestGCOld: int where> = $i6;
$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r0[$i5] = $r1;
$i8 = <TestGCOld: int where>;
$r2 = <TestGCOld: TreeNode[] trees>;
$i7 = lengthof $r2;
if $i8 != $i7 goto i15 = i15 + 1;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
<TestGCOld: int where> = 0;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
i15 = i15 + 1;
"
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>;
"
    "Block 5:
[preds: 4 ] [succs: 9 ]
goto [?= $b17 = l14 cmp 999L];
"
    "Block 6:
[preds: 9 ] [succs: 7 8 ]
i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16);
$r4 = <TestGCOld: TreeNode[] trees>;
$i9 = <TestGCOld: int where>;
$i10 = $i9 + 1;
<TestGCOld: int where> = $i10;
$r5 = $r4[$i9];
staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3);
$i12 = <TestGCOld: int where>;
$r6 = <TestGCOld: TreeNode[] trees>;
$i11 = lengthof $r6;
if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
"
    "Block 7:
[preds: 6 ] [succs: 8 ]
<TestGCOld: int where> = 0;
"
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
l14 = l14 - $l13;
"
    "Block 9:
[preds: 5 8 ] [succs: 10 6 ]
$b17 = l14 cmp 999L;
if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
"
    "Block 10:
[preds: 9 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 4 ]
l0 := @parameter0: long;
$l1 = <TestGCOld: long treeSize>;
$l2 = l0 / $l1;
i3 = (int) $l2;
$l4 = <TestGCOld: long treeSize>;
l14 = l0 % $l4;
i15 = 0;
goto [?= (branch)];
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r0 = <TestGCOld: TreeNode[] trees>;
$i5 = <TestGCOld: int where>;
$i6 = $i5 + 1;
<TestGCOld: int where> = $i6;
$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r0[$i5] = $r1;
$i8 = <TestGCOld: int where>;
$r2 = <TestGCOld: TreeNode[] trees>;
$i7 = lengthof $r2;
if $i8 != $i7 goto i15 = i15 + 1;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
<TestGCOld: int where> = 0;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
$r0 = <TestGCOld: TreeNode[] trees>;
$i5 = <TestGCOld: int where>;
$i6 = $i5 + 1;
<TestGCOld: int where> = $i6;
$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r0[$i5] = $r1;
$i8 = <TestGCOld: int where>;
$r2 = <TestGCOld: TreeNode[] trees>;
$i7 = lengthof $r2;
if $i8 != $i7 goto i15 = i15 + 1;
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
i15 = i15 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
<TestGCOld: int where> = 0;
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
i15 = i15 + 1;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
i15 = i15 + 1;
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>;
"->"Block 5:
[preds: 4 ] [succs: 9 ]
goto [?= $b17 = l14 cmp 999L];
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i15 < i3 goto $r0 = <TestGCOld: TreeNode[] trees>;
"->"Block 1:
[preds: 4 ] [succs: 2 3 ]
$r0 = <TestGCOld: TreeNode[] trees>;
$i5 = <TestGCOld: int where>;
$i6 = $i5 + 1;
<TestGCOld: int where> = $i6;
$r1 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(14);
$r0[$i5] = $r1;
$i8 = <TestGCOld: int where>;
$r2 = <TestGCOld: TreeNode[] trees>;
$i7 = lengthof $r2;
if $i8 != $i7 goto i15 = i15 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 9 ]
goto [?= $b17 = l14 cmp 999L];
"->"Block 9:
[preds: 5 8 ] [succs: 10 6 ]
$b17 = l14 cmp 999L;
if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
";
    "Block 6:
[preds: 9 ] [succs: 7 8 ]
i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16);
$r4 = <TestGCOld: TreeNode[] trees>;
$i9 = <TestGCOld: int where>;
$i10 = $i9 + 1;
<TestGCOld: int where> = $i10;
$r5 = $r4[$i9];
staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3);
$i12 = <TestGCOld: int where>;
$r6 = <TestGCOld: TreeNode[] trees>;
$i11 = lengthof $r6;
if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
"->"Block 7:
[preds: 6 ] [succs: 8 ]
<TestGCOld: int where> = 0;
";
    "Block 6:
[preds: 9 ] [succs: 7 8 ]
i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16);
$r4 = <TestGCOld: TreeNode[] trees>;
$i9 = <TestGCOld: int where>;
$i10 = $i9 + 1;
<TestGCOld: int where> = $i10;
$r5 = $r4[$i9];
staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3);
$i12 = <TestGCOld: int where>;
$r6 = <TestGCOld: TreeNode[] trees>;
$i11 = lengthof $r6;
if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
l14 = l14 - $l13;
";
    "Block 7:
[preds: 6 ] [succs: 8 ]
<TestGCOld: int where> = 0;
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
l14 = l14 - $l13;
";
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
$l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
l14 = l14 - $l13;
"->"Block 9:
[preds: 5 8 ] [succs: 10 6 ]
$b17 = l14 cmp 999L;
if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
";
    "Block 9:
[preds: 5 8 ] [succs: 10 6 ]
$b17 = l14 cmp 999L;
if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
"->"Block 10:
[preds: 9 ] [succs: ]
return;
";
    "Block 9:
[preds: 5 8 ] [succs: 10 6 ]
$b17 = l14 cmp 999L;
if $b17 > 0 goto i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
"->"Block 6:
[preds: 9 ] [succs: 7 8 ]
i16 = staticinvoke <TestGCOld: int bytesToHeight(long)>(l14);
r3 = staticinvoke <TestGCOld: TreeNode makeTree(int)>(i16);
$r4 = <TestGCOld: TreeNode[] trees>;
$i9 = <TestGCOld: int where>;
$i10 = $i9 + 1;
<TestGCOld: int where> = $i10;
$r5 = $r4[$i9];
staticinvoke <TestGCOld: void replaceTree(TreeNode,TreeNode)>($r5, r3);
$i12 = <TestGCOld: int where>;
$r6 = <TestGCOld: TreeNode[] trees>;
$i11 = lengthof $r6;
if $i12 != $i11 goto $l13 = staticinvoke <TestGCOld: long heightToBytes(int)>(i16);
";
}
