digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
i4 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
i4 = i4 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1);
$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i1 = $i0 - i5;
if $i1 == 1 goto return;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Bad increment: \");
$i2 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i3 = $i2 - i5;
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);
$r7 = new java.lang.RuntimeException;
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\");
throw $r7;
"
    "Block 5:
[preds: 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 2 ]
r8 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
i4 = 0;
goto [?= (branch)];
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
";
    "Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
i4 = i4 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1);
$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i1 = $i0 - i5;
if $i1 == 1 goto return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 1 ]
if i4 < 20000 goto staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
"->"Block 1:
[preds: 2 ] [succs: 2 ]
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, 10);
i4 = i4 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1);
$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i1 = $i0 - i5;
if $i1 == 1 goto return;
"->"Block 4:
[preds: 3 ] [succs: ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"Bad increment: \");
$i2 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i3 = $i2 - i5;
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);
$r7 = new java.lang.RuntimeException;
specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Test failed\");
throw $r7;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
i5 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
staticinvoke <compiler.arraycopy.TestArrayCopyBadReexec: int[] m1(int[],int)>(r0, -1);
$i0 = <compiler.arraycopy.TestArrayCopyBadReexec: int val>;
$i1 = $i0 - i5;
if $i1 == 1 goto return;
"->"Block 5:
[preds: 3 ] [succs: ]
return;
";
}
