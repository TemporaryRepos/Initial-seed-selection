digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 4 ]
r2 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
r0[0] = 66;
i2 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
$i1 = r0[0];
if i0 == $i1 goto i2 = i2 + 1;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r1 = new java.lang.RuntimeException;
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"test failed\");
throw $r1;
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
i2 = i2 + 1;
"
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i2 < 20000 goto i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
"
    "Block 5:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 4 ]
r2 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
r0[0] = 66;
i2 = 0;
goto [?= (branch)];
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i2 < 20000 goto i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
$i1 = r0[0];
if i0 == $i1 goto i2 = i2 + 1;
"->"Block 2:
[preds: 1 ] [succs: ]
$r1 = new java.lang.RuntimeException;
specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"test failed\");
throw $r1;
";
    "Block 1:
[preds: 4 ] [succs: 2 3 ]
i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
$i1 = r0[0];
if i0 == $i1 goto i2 = i2 + 1;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
i2 = i2 + 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
i2 = i2 + 1;
"->"Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i2 < 20000 goto i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i2 < 20000 goto i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
"->"Block 5:
[preds: 4 ] [succs: ]
return;
";
    "Block 4:
[preds: 0 3 ] [succs: 5 1 ]
if i2 < 20000 goto i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
"->"Block 1:
[preds: 4 ] [succs: 2 3 ]
i0 = staticinvoke <compiler.arraycopy.TestLoadBypassArrayCopy: int test(int[],int,boolean)>(r0, 10, 0);
$i1 = r0[0];
if i0 == $i1 goto i2 = i2 + 1;
";
}
