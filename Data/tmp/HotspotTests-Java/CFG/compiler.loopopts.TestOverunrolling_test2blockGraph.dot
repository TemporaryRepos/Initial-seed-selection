digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 10 ]
r0 = newarray (int)[10];
i0 = 6;
goto [?= (branch)];
"
    "Block 1:
[preds: 10 ] [succs: 8 ]
i1 = 8;
goto [?= (branch)];
"
    "Block 2:
[preds: 8 ] [succs: 3 ]
i2 = 1;
"
    "Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"
    "Block 4:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
"
    "Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
"
    "Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + -1;
"
    "Block 8:
[preds: 1 7 ] [succs: 9 2 ]
if i1 > i0 goto i2 = 1;
"
    "Block 9:
[preds: 8 ] [succs: 10 ]
i0 = i0 + 1;
"
    "Block 10:
[preds: 0 9 ] [succs: 11 1 ]
if i0 < 10 goto i1 = 8;
"
    "Block 11:
[preds: 10 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 10 ]
r0 = newarray (int)[10];
i0 = 6;
goto [?= (branch)];
"->"Block 10:
[preds: 0 9 ] [succs: 11 1 ]
if i0 < 10 goto i1 = 8;
";
    "Block 1:
[preds: 10 ] [succs: 8 ]
i1 = 8;
goto [?= (branch)];
"->"Block 8:
[preds: 1 7 ] [succs: 9 2 ]
if i1 > i0 goto i2 = 1;
";
    "Block 2:
[preds: 8 ] [succs: 3 ]
i2 = 1;
"->"Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
";
    "Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 4:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
";
    "Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 5:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
"->"Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
";
    "Block 4:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: long lFld> = 0L;
goto [?= i2 = i2 + 1];
"->"Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
<compiler.loopopts.TestOverunrolling: double dFld> = 0.0;
"->"Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
";
    "Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
"->"Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + -1;
";
    "Block 6:
[preds: 3 4 5 ] [succs: 7 3 ]
i2 = i2 + 1;
if i2 < 1 goto r0[i1] = 0;
"->"Block 3:
[preds: 2 6 ] [succs: 4 5 6 ]
r0[i1] = 0;
lookupswitch(i2) {     case 1: goto <compiler.loopopts.TestOverunrolling: long lFld> = 0L;     case 10: goto <compiler.loopopts.TestOverunrolling: double dFld> = 0.0;     default: goto i2 = i2 + 1; };
";
    "Block 7:
[preds: 6 ] [succs: 8 ]
i1 = i1 + -1;
"->"Block 8:
[preds: 1 7 ] [succs: 9 2 ]
if i1 > i0 goto i2 = 1;
";
    "Block 8:
[preds: 1 7 ] [succs: 9 2 ]
if i1 > i0 goto i2 = 1;
"->"Block 9:
[preds: 8 ] [succs: 10 ]
i0 = i0 + 1;
";
    "Block 8:
[preds: 1 7 ] [succs: 9 2 ]
if i1 > i0 goto i2 = 1;
"->"Block 2:
[preds: 8 ] [succs: 3 ]
i2 = 1;
";
    "Block 9:
[preds: 8 ] [succs: 10 ]
i0 = i0 + 1;
"->"Block 10:
[preds: 0 9 ] [succs: 11 1 ]
if i0 < 10 goto i1 = 8;
";
    "Block 10:
[preds: 0 9 ] [succs: 11 1 ]
if i0 < 10 goto i1 = 8;
"->"Block 11:
[preds: 10 ] [succs: ]
return;
";
    "Block 10:
[preds: 0 9 ] [succs: 11 1 ]
if i0 < 10 goto i1 = 8;
"->"Block 1:
[preds: 10 ] [succs: 8 ]
i1 = 8;
goto [?= (branch)];
";
}
