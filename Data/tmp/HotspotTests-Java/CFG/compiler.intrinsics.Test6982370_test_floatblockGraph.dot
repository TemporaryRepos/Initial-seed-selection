digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 11 ]
r0 = newarray (float)[16];
i7 = 0;
goto [?= (branch)];
"
    "Block 1:
[preds: 11 ] [succs: 2 3 ]
i0 = i7 & 7;
$i1 = i7 >> 4;
$i2 = $i1 & 7;
i3 = i0 + $i2;
f2 = (float) i7;
$i4 = i7 & 1;
if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
f2 = neg f2;
"
    "Block 3:
[preds: 1 2 ] [succs: 7 ]
staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
z0 = 0;
i8 = i0;
goto [?= (branch)];
"
    "Block 4:
[preds: 7 ] [succs: 5 6 ]
$f0 = r0[i8];
$b5 = $f0 cmpl f2;
if $b5 == 0 goto i8 = i8 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r2 = <java.lang.System: java.io.PrintStream err>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$f1 = r0[i8];
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \");
$i6 = lengthof r0;
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);
z0 = 1;
"
    "Block 6:
[preds: 4 5 ] [succs: 7 ]
i8 = i8 + 1;
"
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
if i8 < i3 goto $f0 = r0[i8];
"
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
if z0 == 0 goto i7 = i7 + 1;
"
    "Block 9:
[preds: 8 ] [succs: ]
$r11 = new java.lang.InternalError;
specialinvoke $r11.<java.lang.InternalError: void <init>()>();
throw $r11;
"
    "Block 10:
[preds: 8 ] [succs: 11 ]
i7 = i7 + 1;
"
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i7 < 200000 goto i0 = i7 & 7;
"
    "Block 12:
[preds: 11 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 11 ]
r0 = newarray (float)[16];
i7 = 0;
goto [?= (branch)];
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i7 < 200000 goto i0 = i7 & 7;
";
    "Block 1:
[preds: 11 ] [succs: 2 3 ]
i0 = i7 & 7;
$i1 = i7 >> 4;
$i2 = $i1 & 7;
i3 = i0 + $i2;
f2 = (float) i7;
$i4 = i7 & 1;
if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
"->"Block 2:
[preds: 1 ] [succs: 3 ]
f2 = neg f2;
";
    "Block 1:
[preds: 11 ] [succs: 2 3 ]
i0 = i7 & 7;
$i1 = i7 >> 4;
$i2 = $i1 & 7;
i3 = i0 + $i2;
f2 = (float) i7;
$i4 = i7 & 1;
if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
"->"Block 3:
[preds: 1 2 ] [succs: 7 ]
staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
z0 = 0;
i8 = i0;
goto [?= (branch)];
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
f2 = neg f2;
"->"Block 3:
[preds: 1 2 ] [succs: 7 ]
staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
z0 = 0;
i8 = i0;
goto [?= (branch)];
";
    "Block 3:
[preds: 1 2 ] [succs: 7 ]
staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
z0 = 0;
i8 = i0;
goto [?= (branch)];
"->"Block 7:
[preds: 3 6 ] [succs: 8 4 ]
if i8 < i3 goto $f0 = r0[i8];
";
    "Block 4:
[preds: 7 ] [succs: 5 6 ]
$f0 = r0[i8];
$b5 = $f0 cmpl f2;
if $b5 == 0 goto i8 = i8 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r2 = <java.lang.System: java.io.PrintStream err>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$f1 = r0[i8];
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \");
$i6 = lengthof r0;
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);
z0 = 1;
";
    "Block 4:
[preds: 7 ] [succs: 5 6 ]
$f0 = r0[i8];
$b5 = $f0 cmpl f2;
if $b5 == 0 goto i8 = i8 + 1;
"->"Block 6:
[preds: 4 5 ] [succs: 7 ]
i8 = i8 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r2 = <java.lang.System: java.io.PrintStream err>;
$r1 = new java.lang.StringBuilder;
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"a[\");
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] = \");
$f1 = r0[i8];
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" != \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" for \");
$i6 = lengthof r0;
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);
z0 = 1;
"->"Block 6:
[preds: 4 5 ] [succs: 7 ]
i8 = i8 + 1;
";
    "Block 6:
[preds: 4 5 ] [succs: 7 ]
i8 = i8 + 1;
"->"Block 7:
[preds: 3 6 ] [succs: 8 4 ]
if i8 < i3 goto $f0 = r0[i8];
";
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
if i8 < i3 goto $f0 = r0[i8];
"->"Block 8:
[preds: 7 ] [succs: 9 10 ]
if z0 == 0 goto i7 = i7 + 1;
";
    "Block 7:
[preds: 3 6 ] [succs: 8 4 ]
if i8 < i3 goto $f0 = r0[i8];
"->"Block 4:
[preds: 7 ] [succs: 5 6 ]
$f0 = r0[i8];
$b5 = $f0 cmpl f2;
if $b5 == 0 goto i8 = i8 + 1;
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
if z0 == 0 goto i7 = i7 + 1;
"->"Block 9:
[preds: 8 ] [succs: ]
$r11 = new java.lang.InternalError;
specialinvoke $r11.<java.lang.InternalError: void <init>()>();
throw $r11;
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
if z0 == 0 goto i7 = i7 + 1;
"->"Block 10:
[preds: 8 ] [succs: 11 ]
i7 = i7 + 1;
";
    "Block 10:
[preds: 8 ] [succs: 11 ]
i7 = i7 + 1;
"->"Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i7 < 200000 goto i0 = i7 & 7;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i7 < 200000 goto i0 = i7 & 7;
"->"Block 12:
[preds: 11 ] [succs: ]
return;
";
    "Block 11:
[preds: 0 10 ] [succs: 12 1 ]
if i7 < 200000 goto i0 = i7 & 7;
"->"Block 1:
[preds: 11 ] [succs: 2 3 ]
i0 = i7 & 7;
$i1 = i7 >> 4;
$i2 = $i1 & 7;
i3 = i0 + $i2;
f2 = (float) i7;
$i4 = i7 & 1;
if $i4 != 1 goto staticinvoke <java.util.Arrays: void fill(float[],int,int,float)>(r0, i0, i3, f2);
";
}
