digraph "unitGraph" {
    "r4 := @this: com.tictactec.ta.lib.meta.CoreMetaInfo"
    "$r0 = new java.util.TreeMap"
    "specialinvoke $r0.<java.util.TreeMap: void <init>()>()"
    "r1 = $r0"
    "$r2 = <com.tictactec.ta.lib.meta.CoreMetaInfo: java.lang.Class coreClass>"
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"
    "r5 = virtualinvoke r4.<com.tictactec.ta.lib.meta.CoreMetaInfo: java.util.Map getLookbackMethodMap()>()"
    "r6 = r3"
    "i0 = lengthof r6"
    "i1 = 0"
    "if i1 >= i0 goto return r1"
    "r7 = r6[i1]"
    "r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>()"
    "$r9 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>()"
    "$z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Lcom/tictactec/ta/lib/RetCode;\")"
    "if $z0 == 0 goto i1 = i1 + 1"
    "$z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(\"INT_\")"
    "if $z1 != 0 goto i1 = i1 + 1"
    "$r10 = new java.lang.StringBuilder"
    "specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_Lookback\")"
    "r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13)"
    "r15 = (java.lang.reflect.Method) $r14"
    "if r15 == null goto i1 = i1 + 1"
    "$r16 = new com.tictactec.ta.lib.meta.TaFuncMetaInfo"
    "specialinvoke $r16.<com.tictactec.ta.lib.meta.TaFuncMetaInfo: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r8, r7, r15)"
    "r17 = $r16"
    "interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r17)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return r1"
    "r4 := @this: com.tictactec.ta.lib.meta.CoreMetaInfo"->"$r0 = new java.util.TreeMap";
    "$r0 = new java.util.TreeMap"->"specialinvoke $r0.<java.util.TreeMap: void <init>()>()";
    "specialinvoke $r0.<java.util.TreeMap: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = <com.tictactec.ta.lib.meta.CoreMetaInfo: java.lang.Class coreClass>";
    "$r2 = <com.tictactec.ta.lib.meta.CoreMetaInfo: java.lang.Class coreClass>"->"r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()";
    "r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()"->"r5 = virtualinvoke r4.<com.tictactec.ta.lib.meta.CoreMetaInfo: java.util.Map getLookbackMethodMap()>()";
    "r5 = virtualinvoke r4.<com.tictactec.ta.lib.meta.CoreMetaInfo: java.util.Map getLookbackMethodMap()>()"->"r6 = r3";
    "r6 = r3"->"i0 = lengthof r6";
    "i0 = lengthof r6"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return r1";
    "if i1 >= i0 goto return r1"->"r7 = r6[i1]";
    "if i1 >= i0 goto return r1"->"return r1";
    "r7 = r6[i1]"->"r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>()";
    "r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>()"->"$r9 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>()";
    "$r9 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>()"->"$z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Lcom/tictactec/ta/lib/RetCode;\")";
    "$z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class \"Lcom/tictactec/ta/lib/RetCode;\")"->"if $z0 == 0 goto i1 = i1 + 1";
    "if $z0 == 0 goto i1 = i1 + 1"->"$z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(\"INT_\")";
    "if $z0 == 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(\"INT_\")"->"if $z1 != 0 goto i1 = i1 + 1";
    "if $z1 != 0 goto i1 = i1 + 1"->"$r10 = new java.lang.StringBuilder";
    "if $z1 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r10 = new java.lang.StringBuilder"->"specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_Lookback\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_Lookback\")"->"r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13)";
    "$r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13)"->"r15 = (java.lang.reflect.Method) $r14";
    "r15 = (java.lang.reflect.Method) $r14"->"if r15 == null goto i1 = i1 + 1";
    "if r15 == null goto i1 = i1 + 1"->"$r16 = new com.tictactec.ta.lib.meta.TaFuncMetaInfo";
    "if r15 == null goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r16 = new com.tictactec.ta.lib.meta.TaFuncMetaInfo"->"specialinvoke $r16.<com.tictactec.ta.lib.meta.TaFuncMetaInfo: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r8, r7, r15)";
    "specialinvoke $r16.<com.tictactec.ta.lib.meta.TaFuncMetaInfo: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r8, r7, r15)"->"r17 = $r16";
    "r17 = $r16"->"interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r17)";
    "interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r17)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return r1";
}
