digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
$r2 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r1);
if r3 != $r4 goto $z0 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
"
    "Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
$r2 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r1);
if r3 != $r4 goto $z0 = 0;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
$r2 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r1);
if r3 != $r4 goto $z0 = 0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
"->"Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
"->"Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
";
}
