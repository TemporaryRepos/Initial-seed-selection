digraph "unitGraph" {
    "r8 := @this: com.github.davidmoten.rtree.RTreeTest"
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 100)"
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1000)"
    "r2 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)"
    "$r3 = virtualinvoke r2.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r4 = virtualinvoke $r3.<rx.Observable: rx.Observable count()>()"
    "$r5 = virtualinvoke $r4.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r6 = virtualinvoke $r5.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "$r7 = (java.lang.Integer) $r6"
    "$i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()"
    "$l1 = (long) $i0"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(100L, $l1)"
    "return"
    "r8 := @this: com.github.davidmoten.rtree.RTreeTest"->"$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 100)";
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 100)"->"$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1000)";
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1000)"->"r2 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)";
    "r2 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)"->"$r3 = virtualinvoke r2.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r3 = virtualinvoke r2.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r4 = virtualinvoke $r3.<rx.Observable: rx.Observable count()>()";
    "$r4 = virtualinvoke $r3.<rx.Observable: rx.Observable count()>()"->"$r5 = virtualinvoke $r4.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r5 = virtualinvoke $r4.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r6 = virtualinvoke $r5.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r6 = virtualinvoke $r5.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"$r7 = (java.lang.Integer) $r6";
    "$r7 = (java.lang.Integer) $r6"->"$i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()";
    "$i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(100L, $l1)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(100L, $l1)"->"return";
}
