digraph "unitGraph" {
    "r10 := @this: com.github.davidmoten.rtree.RTreeTest"
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()"
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"
    "r11 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r1)"
    "$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"
    "r12 = virtualinvoke r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r2)"
    "$r3 = newarray (com.github.davidmoten.rtree.Entry)[1]"
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"
    "$r3[0] = $r4"
    "$r5 = staticinvoke <com.github.davidmoten.guavamini.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r3)"
    "$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()"
    "$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r9)"
    "return"
    "r10 := @this: com.github.davidmoten.rtree.RTreeTest"->"$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()";
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()"->"$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)";
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"->"r11 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r1)";
    "r11 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r1)"->"$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)";
    "$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"->"r12 = virtualinvoke r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r2)";
    "r12 = virtualinvoke r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r2)"->"$r3 = newarray (com.github.davidmoten.rtree.Entry)[1]";
    "$r3 = newarray (com.github.davidmoten.rtree.Entry)[1]"->"$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)";
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"->"$r3[0] = $r4";
    "$r3[0] = $r4"->"$r5 = staticinvoke <com.github.davidmoten.guavamini.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r3)";
    "$r5 = staticinvoke <com.github.davidmoten.guavamini.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r3)"->"$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()";
    "$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()"->"$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r9)";
    "staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r9)"->"return";
}
