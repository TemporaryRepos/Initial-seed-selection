digraph "unitGraph" {
    "l0 := @parameter0: long"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "l2 = 0L"
    "$b1 = l2 cmp l0"
    "if $b1 >= 0 goto return r1"
    "$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry randomEntry()>()"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2)"
    "l2 = l2 + 1L"
    "goto [?= $b1 = l2 cmp l0]"
    "return r1"
    "l0 := @parameter0: long"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"l2 = 0L";
    "l2 = 0L"->"$b1 = l2 cmp l0";
    "$b1 = l2 cmp l0"->"if $b1 >= 0 goto return r1";
    "if $b1 >= 0 goto return r1"->"$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry randomEntry()>()";
    "if $b1 >= 0 goto return r1"->"return r1";
    "$r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry randomEntry()>()"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2)"->"l2 = l2 + 1L";
    "l2 = l2 + 1L"->"goto [?= $b1 = l2 cmp l0]";
    "goto [?= $b1 = l2 cmp l0]"->"$b1 = l2 cmp l0";
}
