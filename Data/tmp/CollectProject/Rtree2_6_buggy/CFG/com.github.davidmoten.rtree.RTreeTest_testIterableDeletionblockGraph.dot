digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 4 ]
r13 := @this: com.github.davidmoten.rtree.RTreeTest;
r14 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
$r3 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r15 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = new java.util.ArrayList;
specialinvoke $r5.<java.util.ArrayList: void <init>()>();
r6 = $r5;
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r0);
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2);
r7 = virtualinvoke r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable)>(r6);
$r8 = virtualinvoke r7.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.Observable toList()>();
$r10 = virtualinvoke $r9.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r11 = virtualinvoke $r10.<rx.observables.BlockingObservable: java.lang.Object single()>();
r12 = (java.util.List) $r11;
$z2 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r1);
if $z2 == 0 goto $z5 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$z3 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r0);
if $z3 != 0 goto $z5 = 0;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$z4 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r2);
if $z4 != 0 goto $z5 = 0;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$z5 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5)];
"
    "Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$z5 = 0;
"
    "Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);
return;
"
    "Block 0:
[preds: ] [succs: 1 4 ]
r13 := @this: com.github.davidmoten.rtree.RTreeTest;
r14 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
$r3 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r15 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = new java.util.ArrayList;
specialinvoke $r5.<java.util.ArrayList: void <init>()>();
r6 = $r5;
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r0);
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2);
r7 = virtualinvoke r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable)>(r6);
$r8 = virtualinvoke r7.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.Observable toList()>();
$r10 = virtualinvoke $r9.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r11 = virtualinvoke $r10.<rx.observables.BlockingObservable: java.lang.Object single()>();
r12 = (java.util.List) $r11;
$z2 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r1);
if $z2 == 0 goto $z5 = 0;
"->"Block 1:
[preds: 0 ] [succs: 2 4 ]
$z3 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r0);
if $z3 != 0 goto $z5 = 0;
";
    "Block 0:
[preds: ] [succs: 1 4 ]
r13 := @this: com.github.davidmoten.rtree.RTreeTest;
r14 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
$r3 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r15 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = new java.util.ArrayList;
specialinvoke $r5.<java.util.ArrayList: void <init>()>();
r6 = $r5;
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r0);
interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2);
r7 = virtualinvoke r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable)>(r6);
$r8 = virtualinvoke r7.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.Observable toList()>();
$r10 = virtualinvoke $r9.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r11 = virtualinvoke $r10.<rx.observables.BlockingObservable: java.lang.Object single()>();
r12 = (java.util.List) $r11;
$z2 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r1);
if $z2 == 0 goto $z5 = 0;
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$z5 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$z3 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r0);
if $z3 != 0 goto $z5 = 0;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$z4 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r2);
if $z4 != 0 goto $z5 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 4 ]
$z3 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r0);
if $z3 != 0 goto $z5 = 0;
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$z5 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$z4 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r2);
if $z4 != 0 goto $z5 = 0;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$z5 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5)];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$z4 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r2);
if $z4 != 0 goto $z5 = 0;
"->"Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$z5 = 0;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$z5 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5)];
"->"Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);
return;
";
    "Block 4:
[preds: 0 1 2 ] [succs: 5 ]
$z5 = 0;
"->"Block 5:
[preds: 3 4 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);
return;
";
}
