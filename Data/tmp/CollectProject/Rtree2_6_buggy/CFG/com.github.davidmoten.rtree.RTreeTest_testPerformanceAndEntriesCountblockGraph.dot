digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r29 := @this: com.github.davidmoten.rtree.RTreeTest;
$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(\"r\", \"1\");
l8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(\"n\", \"10000\");
l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);
r30 = null;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$l1 = l8 - 1L;
l8 = $l1;
$b2 = $l1 cmp 0L;
if $b2 < 0 goto $r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();
r30 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree createRandomRTree(long)>(l0);
$l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
l10 = $l7 - l9;
$r25 = <java.lang.System: java.io.PrintStream out>;
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"inserts/second = \");
$d1 = (double) l0;
$d0 = (double) l10;
$d2 = $d1 / $d0;
$d3 = $d2 * 1000.0;
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);
goto [?= $l1 = l8 - 1L];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r3 = virtualinvoke $r2.<rx.Observable: rx.Observable count()>();
$r4 = virtualinvoke $r3.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r5 = virtualinvoke $r4.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r6 = (java.lang.Integer) $r5;
$i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
$l4 = (long) $i3;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l4);
l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();
$r7 = staticinvoke <com.github.davidmoten.rtree.geometry.Geometries: com.github.davidmoten.rtree.geometry.Rectangle rectangle(float,float,float,float)>(0.0F, 0.0F, 500.0F, 500.0F);
$r8 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable search(com.github.davidmoten.rtree.geometry.Rectangle)>($r7);
$r9 = virtualinvoke $r8.<rx.Observable: rx.Observable first()>();
$r10 = virtualinvoke $r9.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r11 = virtualinvoke $r10.<rx.observables.BlockingObservable: java.lang.Object single()>();
r31 = (com.github.davidmoten.rtree.Entry) $r11;
$l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
l6 = $l5 - l11;
$r13 = <java.lang.System: java.io.PrintStream out>;
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);
$r18 = <java.lang.System: java.io.PrintStream out>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"time to get nearest with \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" entries=\");
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r23);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r29 := @this: com.github.davidmoten.rtree.RTreeTest;
$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(\"r\", \"1\");
l8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(\"n\", \"10000\");
l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);
r30 = null;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$l1 = l8 - 1L;
l8 = $l1;
$b2 = $l1 cmp 0L;
if $b2 < 0 goto $r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$l1 = l8 - 1L;
l8 = $l1;
$b2 = $l1 cmp 0L;
if $b2 < 0 goto $r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
"->"Block 2:
[preds: 1 ] [succs: 1 ]
l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();
r30 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree createRandomRTree(long)>(l0);
$l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
l10 = $l7 - l9;
$r25 = <java.lang.System: java.io.PrintStream out>;
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"inserts/second = \");
$d1 = (double) l0;
$d0 = (double) l10;
$d2 = $d1 / $d0;
$d3 = $d2 * 1000.0;
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);
goto [?= $l1 = l8 - 1L];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$l1 = l8 - 1L;
l8 = $l1;
$b2 = $l1 cmp 0L;
if $b2 < 0 goto $r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
"->"Block 3:
[preds: 1 ] [succs: ]
$r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r3 = virtualinvoke $r2.<rx.Observable: rx.Observable count()>();
$r4 = virtualinvoke $r3.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r5 = virtualinvoke $r4.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r6 = (java.lang.Integer) $r5;
$i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();
$l4 = (long) $i3;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l4);
l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();
$r7 = staticinvoke <com.github.davidmoten.rtree.geometry.Geometries: com.github.davidmoten.rtree.geometry.Rectangle rectangle(float,float,float,float)>(0.0F, 0.0F, 500.0F, 500.0F);
$r8 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable search(com.github.davidmoten.rtree.geometry.Rectangle)>($r7);
$r9 = virtualinvoke $r8.<rx.Observable: rx.Observable first()>();
$r10 = virtualinvoke $r9.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r11 = virtualinvoke $r10.<rx.observables.BlockingObservable: java.lang.Object single()>();
r31 = (com.github.davidmoten.rtree.Entry) $r11;
$l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
l6 = $l5 - l11;
$r13 = <java.lang.System: java.io.PrintStream out>;
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);
$r18 = <java.lang.System: java.io.PrintStream out>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"time to get nearest with \");
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" entries=\");
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r23);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();
r30 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree createRandomRTree(long)>(l0);
$l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
l10 = $l7 - l9;
$r25 = <java.lang.System: java.io.PrintStream out>;
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"inserts/second = \");
$d1 = (double) l0;
$d0 = (double) l10;
$d2 = $d1 / $d0;
$d3 = $d2 * 1000.0;
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);
goto [?= $l1 = l8 - 1L];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$l1 = l8 - 1L;
l8 = $l1;
$b2 = $l1 cmp 0L;
if $b2 < 0 goto $r2 = virtualinvoke r30.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
";
}
