digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r11 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.Utilities: java.util.List entries1000()>();
$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder star()>();
r12 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>();
i1 = 1;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 > 1000 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i0 = i1 - 1;
$r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);
$r3 = (com.github.davidmoten.rtree.Entry) $r2;
r12 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r3);
$r4 = new java.util.HashSet;
specialinvoke $r4.<java.util.HashSet: void <init>()>();
r5 = $r4;
$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: rx.Subscriber createBackpressureSubscriber(java.util.Collection)>(r5);
virtualinvoke $r6.<rx.Observable: rx.Subscription subscribe(rx.Subscriber)>($r7);
$r9 = new java.util.HashSet;
$r10 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, i1);
specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r10);
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r5);
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r11 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.Utilities: java.util.List entries1000()>();
$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder star()>();
r12 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>();
i1 = 1;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 > 1000 goto return;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 > 1000 goto return;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$i0 = i1 - 1;
$r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);
$r3 = (com.github.davidmoten.rtree.Entry) $r2;
r12 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r3);
$r4 = new java.util.HashSet;
specialinvoke $r4.<java.util.HashSet: void <init>()>();
r5 = $r4;
$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: rx.Subscriber createBackpressureSubscriber(java.util.Collection)>(r5);
virtualinvoke $r6.<rx.Observable: rx.Subscription subscribe(rx.Subscriber)>($r7);
$r9 = new java.util.HashSet;
$r10 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, i1);
specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r10);
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r5);
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 > 1000 goto return;
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i0 = i1 - 1;
$r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);
$r3 = (com.github.davidmoten.rtree.Entry) $r2;
r12 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r3);
$r4 = new java.util.HashSet;
specialinvoke $r4.<java.util.HashSet: void <init>()>();
r5 = $r4;
$r6 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: rx.Subscriber createBackpressureSubscriber(java.util.Collection)>(r5);
virtualinvoke $r6.<rx.Observable: rx.Subscription subscribe(rx.Subscriber)>($r7);
$r9 = new java.util.HashSet;
$r10 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, i1);
specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r10);
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r5);
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 > 1000 goto return;
";
}
