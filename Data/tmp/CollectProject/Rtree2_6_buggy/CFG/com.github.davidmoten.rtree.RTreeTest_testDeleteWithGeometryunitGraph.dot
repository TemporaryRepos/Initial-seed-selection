digraph "unitGraph" {
    "r11 := @this: com.github.davidmoten.rtree.RTreeTest"
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)"
    "r12 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()"
    "r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"
    "r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e2(int)>(1)"
    "$r3 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1)"
    "r13 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2)"
    "$r4 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: java.lang.Object value()>()"
    "$r5 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: com.github.davidmoten.rtree.geometry.Geometry geometry()>()"
    "r14 = virtualinvoke r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry,boolean)>($r4, $r5, 1)"
    "$r6 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()"
    "$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "r10 = (java.util.List) $r9"
    "$z0 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r2)"
    "if $z0 == 0 goto $z2 = 0"
    "$z1 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r1)"
    "if $z1 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)]"
    "$z2 = 0"
    "staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)"
    "return"
    "r11 := @this: com.github.davidmoten.rtree.RTreeTest"->"$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)";
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)"->"r12 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()";
    "r12 = virtualinvoke $r0.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()"->"r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)";
    "r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"->"r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e2(int)>(1)";
    "r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e2(int)>(1)"->"$r3 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1)";
    "$r3 = virtualinvoke r12.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1)"->"r13 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2)";
    "r13 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2)"->"$r4 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: java.lang.Object value()>()";
    "$r4 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: java.lang.Object value()>()"->"$r5 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: com.github.davidmoten.rtree.geometry.Geometry geometry()>()";
    "$r5 = interfaceinvoke r1.<com.github.davidmoten.rtree.Entry: com.github.davidmoten.rtree.geometry.Geometry geometry()>()"->"r14 = virtualinvoke r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry,boolean)>($r4, $r5, 1)";
    "r14 = virtualinvoke r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry,boolean)>($r4, $r5, 1)"->"$r6 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r6 = virtualinvoke r14.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()";
    "$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable toList()>()"->"$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r8 = virtualinvoke $r7.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r9 = virtualinvoke $r8.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"r10 = (java.util.List) $r9";
    "r10 = (java.util.List) $r9"->"$z0 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r2)";
    "$z0 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r2)"->"if $z0 == 0 goto $z2 = 0";
    "if $z0 == 0 goto $z2 = 0"->"$z1 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r1)";
    "if $z0 == 0 goto $z2 = 0"->"$z2 = 0";
    "$z1 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(r1)"->"if $z1 != 0 goto $z2 = 0";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)]";
    "goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)]"->"staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)";
    "$z2 = 0"->"staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)";
    "staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)"->"return";
}
