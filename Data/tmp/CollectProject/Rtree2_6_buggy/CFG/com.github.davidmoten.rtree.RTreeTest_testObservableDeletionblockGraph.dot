digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r17 := @this: com.github.davidmoten.rtree.RTreeTest;
r18 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5);
$r3 = virtualinvoke r18.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r19 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.geometry.Rectangle r(int)>(2);
r6 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable search(com.github.davidmoten.rtree.geometry.Rectangle,double)>($r5, 5.0);
r7 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable delete(rx.Observable,boolean)>(r6, 1);
$r8 = virtualinvoke r7.<rx.Observable: rx.Observable count()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r10 = virtualinvoke $r9.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r11 = (java.lang.Integer) $r10;
$i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();
$i1 = $i0 - 1;
$r12 = virtualinvoke r7.<rx.Observable: rx.Observable elementAt(int)>($i1);
$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable count()>();
$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r16 = (java.lang.Integer) $r15;
$i2 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();
if $i2 != 1 goto $z0 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
"
    "Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r17 := @this: com.github.davidmoten.rtree.RTreeTest;
r18 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5);
$r3 = virtualinvoke r18.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r19 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.geometry.Rectangle r(int)>(2);
r6 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable search(com.github.davidmoten.rtree.geometry.Rectangle,double)>($r5, 5.0);
r7 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable delete(rx.Observable,boolean)>(r6, 1);
$r8 = virtualinvoke r7.<rx.Observable: rx.Observable count()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r10 = virtualinvoke $r9.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r11 = (java.lang.Integer) $r10;
$i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();
$i1 = $i0 - 1;
$r12 = virtualinvoke r7.<rx.Observable: rx.Observable elementAt(int)>($i1);
$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable count()>();
$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r16 = (java.lang.Integer) $r15;
$i2 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();
if $i2 != 1 goto $z0 = 0;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r17 := @this: com.github.davidmoten.rtree.RTreeTest;
r18 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>();
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3);
r2 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5);
$r3 = virtualinvoke r18.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
$r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r1);
r19 = virtualinvoke $r4.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r2);
$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.geometry.Rectangle r(int)>(2);
r6 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable search(com.github.davidmoten.rtree.geometry.Rectangle,double)>($r5, 5.0);
r7 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: rx.Observable delete(rx.Observable,boolean)>(r6, 1);
$r8 = virtualinvoke r7.<rx.Observable: rx.Observable count()>();
$r9 = virtualinvoke $r8.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r10 = virtualinvoke $r9.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r11 = (java.lang.Integer) $r10;
$i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();
$i1 = $i0 - 1;
$r12 = virtualinvoke r7.<rx.Observable: rx.Observable elementAt(int)>($i1);
$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable count()>();
$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r16 = (java.lang.Integer) $r15;
$i2 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();
if $i2 != 1 goto $z0 = 0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)];
"->"Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;
"->"Block 3:
[preds: 1 2 ] [succs: ]
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
return;
";
}
