digraph "unitGraph" {
    "r18 := @this: com.github.davidmoten.rtree.RTreeTest"
    "r19 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 8)"
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"
    "r20 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r0)"
    "$i0 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()"
    "$l1 = (long) $i0"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1)"
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"
    "r21 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)"
    "$i2 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()"
    "$l3 = (long) $i2"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3)"
    "$r2 = newarray (com.github.davidmoten.rtree.Entry)[8]"
    "$r3 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"
    "$r2[0] = $r3"
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"
    "$r2[1] = $r4"
    "$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)"
    "$r2[2] = $r5"
    "$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)"
    "$r2[3] = $r6"
    "$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)"
    "$r2[4] = $r7"
    "$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)"
    "$r2[5] = $r8"
    "$r9 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)"
    "$r2[6] = $r9"
    "$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)"
    "$r2[7] = $r10"
    "$r11 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r2)"
    "$r12 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable toList()>()"
    "$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "$r16 = (java.lang.Iterable) $r15"
    "$r17 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r16)"
    "staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r17)"
    "return"
    "r18 := @this: com.github.davidmoten.rtree.RTreeTest"->"r19 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 8)";
    "r19 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.RTree create(int,int)>(3, 8)"->"$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)";
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"->"r20 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r0)";
    "r20 = virtualinvoke r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r0)"->"$i0 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()";
    "$i0 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1)"->"$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)";
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"->"r21 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)";
    "r21 = virtualinvoke r20.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>($r1)"->"$i2 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()";
    "$i2 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: int calculateDepth()>()"->"$l3 = (long) $i2";
    "$l3 = (long) $i2"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3)"->"$r2 = newarray (com.github.davidmoten.rtree.Entry)[8]";
    "$r2 = newarray (com.github.davidmoten.rtree.Entry)[8]"->"$r3 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)";
    "$r3 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"->"$r2[0] = $r3";
    "$r2[0] = $r3"->"$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)";
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"->"$r2[1] = $r4";
    "$r2[1] = $r4"->"$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)";
    "$r5 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)"->"$r2[2] = $r5";
    "$r2[2] = $r5"->"$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)";
    "$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)"->"$r2[3] = $r6";
    "$r2[3] = $r6"->"$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)";
    "$r7 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)"->"$r2[4] = $r7";
    "$r2[4] = $r7"->"$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)";
    "$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)"->"$r2[5] = $r8";
    "$r2[5] = $r8"->"$r9 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)";
    "$r9 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)"->"$r2[6] = $r9";
    "$r2[6] = $r9"->"$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)";
    "$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)"->"$r2[7] = $r10";
    "$r2[7] = $r10"->"$r11 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r2)";
    "$r11 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r2)"->"$r12 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r12 = virtualinvoke r21.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable toList()>()";
    "$r13 = virtualinvoke $r12.<rx.Observable: rx.Observable toList()>()"->"$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r14 = virtualinvoke $r13.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r15 = virtualinvoke $r14.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"$r16 = (java.lang.Iterable) $r15";
    "$r16 = (java.lang.Iterable) $r15"->"$r17 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r16)";
    "$r17 = staticinvoke <com.github.davidmoten.guavamini.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r16)"->"staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r17)";
    "staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r17)"->"return";
}
