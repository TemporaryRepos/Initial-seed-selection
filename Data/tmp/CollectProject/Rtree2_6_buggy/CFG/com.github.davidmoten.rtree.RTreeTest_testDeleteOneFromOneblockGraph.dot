digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r10 := @this: com.github.davidmoten.rtree.RTreeTest;
r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1);
$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4);
$r2 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>();
$r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0);
r4 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r0);
$r5 = virtualinvoke r4.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>();
$r6 = virtualinvoke $r5.<rx.Observable: rx.Observable count()>();
$r7 = virtualinvoke $r6.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
$r8 = virtualinvoke $r7.<rx.observables.BlockingObservable: java.lang.Object single()>();
$r9 = (java.lang.Integer) $r8;
$i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();
$l1 = (long) $i0;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);
return;
"
}
