digraph "unitGraph" {
    "r7 := @this: com.github.davidmoten.rtree.RTreeTest"
    "r8 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()"
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: java.util.List createRandomEntries(long)>(5L)"
    "r9 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Iterable)>($r0)"
    "$r1 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r2 = virtualinvoke $r1.<rx.Observable: rx.Observable toList()>()"
    "$r3 = virtualinvoke $r2.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r4 = virtualinvoke $r3.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "r5 = (java.util.List) $r4"
    "r6 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable,boolean)>(r5, 1)"
    "$z0 = virtualinvoke r6.<com.github.davidmoten.rtree.RTree: boolean isEmpty()>()"
    "staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)"
    "return"
    "r7 := @this: com.github.davidmoten.rtree.RTreeTest"->"r8 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()";
    "r8 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree create()>()"->"$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: java.util.List createRandomEntries(long)>(5L)";
    "$r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: java.util.List createRandomEntries(long)>(5L)"->"r9 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Iterable)>($r0)";
    "r9 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Iterable)>($r0)"->"$r1 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r1 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r2 = virtualinvoke $r1.<rx.Observable: rx.Observable toList()>()";
    "$r2 = virtualinvoke $r1.<rx.Observable: rx.Observable toList()>()"->"$r3 = virtualinvoke $r2.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r3 = virtualinvoke $r2.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r4 = virtualinvoke $r3.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r4 = virtualinvoke $r3.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"r5 = (java.util.List) $r4";
    "r5 = (java.util.List) $r4"->"r6 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable,boolean)>(r5, 1)";
    "r6 = virtualinvoke r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(java.lang.Iterable,boolean)>(r5, 1)"->"$z0 = virtualinvoke r6.<com.github.davidmoten.rtree.RTree: boolean isEmpty()>()";
    "$z0 = virtualinvoke r6.<com.github.davidmoten.rtree.RTree: boolean isEmpty()>()"->"staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)";
    "staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)"->"return";
}
