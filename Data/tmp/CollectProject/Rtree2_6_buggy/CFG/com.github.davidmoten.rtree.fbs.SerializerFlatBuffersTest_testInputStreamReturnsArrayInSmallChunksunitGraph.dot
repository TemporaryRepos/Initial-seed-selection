digraph "unitGraph" {
    "r1 := @this: com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest"
    "$r0 = new com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3"
    "specialinvoke $r0.<com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3: void <init>(com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest)>(r1)"
    "r2 = $r0"
    "r3 = staticinvoke <com.github.davidmoten.rtree.fbs.SerializerFlatBuffers: byte[] readFully(java.io.InputStream,int)>(r2, 2)"
    "$i0 = lengthof r3"
    "$l1 = (long) $i0"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1)"
    "$b2 = r3[0]"
    "$l3 = (long) $b2"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3)"
    "$b4 = r3[0]"
    "$l5 = (long) $b4"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5)"
    "return"
    "r1 := @this: com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest"->"$r0 = new com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3";
    "$r0 = new com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3"->"specialinvoke $r0.<com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3: void <init>(com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest)>(r1)";
    "specialinvoke $r0.<com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest$3: void <init>(com.github.davidmoten.rtree.fbs.SerializerFlatBuffersTest)>(r1)"->"r2 = $r0";
    "r2 = $r0"->"r3 = staticinvoke <com.github.davidmoten.rtree.fbs.SerializerFlatBuffers: byte[] readFully(java.io.InputStream,int)>(r2, 2)";
    "r3 = staticinvoke <com.github.davidmoten.rtree.fbs.SerializerFlatBuffers: byte[] readFully(java.io.InputStream,int)>(r2, 2)"->"$i0 = lengthof r3";
    "$i0 = lengthof r3"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1)"->"$b2 = r3[0]";
    "$b2 = r3[0]"->"$l3 = (long) $b2";
    "$l3 = (long) $b2"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3)"->"$b4 = r3[0]";
    "$b4 = r3[0]"->"$l5 = (long) $b4";
    "$l5 = (long) $b4"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5)"->"return";
}
