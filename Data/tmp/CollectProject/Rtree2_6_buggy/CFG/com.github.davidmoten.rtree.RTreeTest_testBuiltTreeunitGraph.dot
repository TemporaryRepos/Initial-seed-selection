digraph "unitGraph" {
    "r7 := @this: com.github.davidmoten.rtree.RTreeTest"
    "r8 := @parameter0: com.github.davidmoten.rtree.RTree"
    "i2 = 1"
    "if i2 > 1000 goto $r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$f1 = (float) i2"
    "$f0 = (float) i2"
    "$r6 = staticinvoke <com.github.davidmoten.rtree.geometry.Geometries: com.github.davidmoten.rtree.geometry.Point point(float,float)>($f1, $f0)"
    "r8 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry)>($r5, $r6)"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "$r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r1 = virtualinvoke $r0.<rx.Observable: rx.Observable count()>()"
    "$r2 = virtualinvoke $r1.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r3 = virtualinvoke $r2.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "$r4 = (java.lang.Integer) $r3"
    "$i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()"
    "$l1 = (long) $i0"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000L, $l1)"
    "return"
    "r7 := @this: com.github.davidmoten.rtree.RTreeTest"->"r8 := @parameter0: com.github.davidmoten.rtree.RTree";
    "r8 := @parameter0: com.github.davidmoten.rtree.RTree"->"i2 = 1";
    "i2 = 1"->"if i2 > 1000 goto $r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "if i2 > 1000 goto $r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "if i2 > 1000 goto $r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$f1 = (float) i2";
    "$f1 = (float) i2"->"$f0 = (float) i2";
    "$f0 = (float) i2"->"$r6 = staticinvoke <com.github.davidmoten.rtree.geometry.Geometries: com.github.davidmoten.rtree.geometry.Point point(float,float)>($f1, $f0)";
    "$r6 = staticinvoke <com.github.davidmoten.rtree.geometry.Geometries: com.github.davidmoten.rtree.geometry.Point point(float,float)>($f1, $f0)"->"r8 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry)>($r5, $r6)";
    "r8 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(java.lang.Object,com.github.davidmoten.rtree.geometry.Geometry)>($r5, $r6)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 > 1000 goto $r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r0 = virtualinvoke r8.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r1 = virtualinvoke $r0.<rx.Observable: rx.Observable count()>()";
    "$r1 = virtualinvoke $r0.<rx.Observable: rx.Observable count()>()"->"$r2 = virtualinvoke $r1.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r2 = virtualinvoke $r1.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r3 = virtualinvoke $r2.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r3 = virtualinvoke $r2.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"$r4 = (java.lang.Integer) $r3";
    "$r4 = (java.lang.Integer) $r3"->"$i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()";
    "$i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000L, $l1)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000L, $l1)"->"return";
}
