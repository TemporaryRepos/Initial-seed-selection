digraph "unitGraph" {
    "r33 := @this: com.github.davidmoten.rtree.RTreeTest"
    "r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)"
    "$r2 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()"
    "$r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0)"
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"
    "$r5 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r4)"
    "$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)"
    "$r7 = virtualinvoke $r5.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r6)"
    "$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)"
    "$r9 = virtualinvoke $r7.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r8)"
    "$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)"
    "$r11 = virtualinvoke $r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r10)"
    "$r12 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)"
    "$r13 = virtualinvoke $r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r12)"
    "$r14 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)"
    "$r15 = virtualinvoke $r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r14)"
    "$r16 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)"
    "$r17 = virtualinvoke $r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r16)"
    "$r18 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(9)"
    "$r19 = virtualinvoke $r17.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r18)"
    "$r20 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"
    "$r21 = virtualinvoke $r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r20)"
    "r22 = virtualinvoke $r21.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r0)"
    "$r23 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r24 = virtualinvoke $r23.<rx.Observable: rx.Observable count()>()"
    "$r25 = virtualinvoke $r24.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r26 = virtualinvoke $r25.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "$r27 = (java.lang.Integer) $r26"
    "$i0 = virtualinvoke $r27.<java.lang.Integer: int intValue()>()"
    "$l1 = (long) $i0"
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l1)"
    "$r28 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"
    "$r29 = virtualinvoke $r28.<rx.Observable: rx.Observable contains(java.lang.Object)>(r0)"
    "$r30 = virtualinvoke $r29.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"
    "$r31 = virtualinvoke $r30.<rx.observables.BlockingObservable: java.lang.Object single()>()"
    "$r32 = (java.lang.Boolean) $r31"
    "$z0 = virtualinvoke $r32.<java.lang.Boolean: boolean booleanValue()>()"
    "staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0)"
    "return"
    "r33 := @this: com.github.davidmoten.rtree.RTreeTest"->"r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)";
    "r0 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(1)"->"$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)";
    "$r1 = staticinvoke <com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree$Builder maxChildren(int)>(4)"->"$r2 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()";
    "$r2 = virtualinvoke $r1.<com.github.davidmoten.rtree.RTree$Builder: com.github.davidmoten.rtree.RTree create()>()"->"$r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0)";
    "$r3 = virtualinvoke $r2.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>(r0)"->"$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)";
    "$r4 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(2)"->"$r5 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r4)";
    "$r5 = virtualinvoke $r3.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r4)"->"$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)";
    "$r6 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(3)"->"$r7 = virtualinvoke $r5.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r6)";
    "$r7 = virtualinvoke $r5.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r6)"->"$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)";
    "$r8 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(4)"->"$r9 = virtualinvoke $r7.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r8)";
    "$r9 = virtualinvoke $r7.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r8)"->"$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)";
    "$r10 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(5)"->"$r11 = virtualinvoke $r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r10)";
    "$r11 = virtualinvoke $r9.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r10)"->"$r12 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)";
    "$r12 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(6)"->"$r13 = virtualinvoke $r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r12)";
    "$r13 = virtualinvoke $r11.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r12)"->"$r14 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)";
    "$r14 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(7)"->"$r15 = virtualinvoke $r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r14)";
    "$r15 = virtualinvoke $r13.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r14)"->"$r16 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)";
    "$r16 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(8)"->"$r17 = virtualinvoke $r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r16)";
    "$r17 = virtualinvoke $r15.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r16)"->"$r18 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(9)";
    "$r18 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(9)"->"$r19 = virtualinvoke $r17.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r18)";
    "$r19 = virtualinvoke $r17.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r18)"->"$r20 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)";
    "$r20 = staticinvoke <com.github.davidmoten.rtree.RTreeTest: com.github.davidmoten.rtree.Entry e(int)>(10)"->"$r21 = virtualinvoke $r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r20)";
    "$r21 = virtualinvoke $r19.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree add(com.github.davidmoten.rtree.Entry)>($r20)"->"r22 = virtualinvoke $r21.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r0)";
    "r22 = virtualinvoke $r21.<com.github.davidmoten.rtree.RTree: com.github.davidmoten.rtree.RTree delete(com.github.davidmoten.rtree.Entry)>(r0)"->"$r23 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r23 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r24 = virtualinvoke $r23.<rx.Observable: rx.Observable count()>()";
    "$r24 = virtualinvoke $r23.<rx.Observable: rx.Observable count()>()"->"$r25 = virtualinvoke $r24.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r25 = virtualinvoke $r24.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r26 = virtualinvoke $r25.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r26 = virtualinvoke $r25.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"$r27 = (java.lang.Integer) $r26";
    "$r27 = (java.lang.Integer) $r26"->"$i0 = virtualinvoke $r27.<java.lang.Integer: int intValue()>()";
    "$i0 = virtualinvoke $r27.<java.lang.Integer: int intValue()>()"->"$l1 = (long) $i0";
    "$l1 = (long) $i0"->"staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l1)";
    "staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l1)"->"$r28 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()";
    "$r28 = virtualinvoke r22.<com.github.davidmoten.rtree.RTree: rx.Observable entries()>()"->"$r29 = virtualinvoke $r28.<rx.Observable: rx.Observable contains(java.lang.Object)>(r0)";
    "$r29 = virtualinvoke $r28.<rx.Observable: rx.Observable contains(java.lang.Object)>(r0)"->"$r30 = virtualinvoke $r29.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()";
    "$r30 = virtualinvoke $r29.<rx.Observable: rx.observables.BlockingObservable toBlocking()>()"->"$r31 = virtualinvoke $r30.<rx.observables.BlockingObservable: java.lang.Object single()>()";
    "$r31 = virtualinvoke $r30.<rx.observables.BlockingObservable: java.lang.Object single()>()"->"$r32 = (java.lang.Boolean) $r31";
    "$r32 = (java.lang.Boolean) $r31"->"$z0 = virtualinvoke $r32.<java.lang.Boolean: boolean booleanValue()>()";
    "$z0 = virtualinvoke $r32.<java.lang.Boolean: boolean booleanValue()>()"->"staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0)";
    "staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0)"->"return";
}
