digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "i2 := @parameter2: int"
    "r0 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i0, i1)"
    "r1 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayTos(int,int)>(i0, i1)"
    "r2 = newmultiarray (int)[i1][i2]"
    "i8 = 0"
    "if i8 >= i1 goto return r2"
    "i3 = r0[i8]"
    "i4 = r1[i8]"
    "i5 = i4 - i3"
    "r3 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i5, i2)"
    "i9 = 0"
    "if i9 >= i2 goto r2[i8] = r3"
    "$i6 = r3[i9]"
    "$i7 = $i6 + i3"
    "r3[i9] = $i7"
    "i9 = i9 + 1"
    "goto [?= (branch)]"
    "r2[i8] = r3"
    "i8 = i8 + 1"
    "return r2"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"i2 := @parameter2: int";
    "i2 := @parameter2: int"->"r0 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i0, i1)";
    "r0 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i0, i1)"->"r1 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayTos(int,int)>(i0, i1)";
    "r1 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayTos(int,int)>(i0, i1)"->"r2 = newmultiarray (int)[i1][i2]";
    "r2 = newmultiarray (int)[i1][i2]"->"i8 = 0";
    "i8 = 0"->"if i8 >= i1 goto return r2";
    "if i8 >= i1 goto return r2"->"i3 = r0[i8]";
    "if i8 >= i1 goto return r2"->"return r2";
    "i3 = r0[i8]"->"i4 = r1[i8]";
    "i4 = r1[i8]"->"i5 = i4 - i3";
    "i5 = i4 - i3"->"r3 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i5, i2)";
    "r3 = staticinvoke <com.fenbi.mp4j.utils.CommUtils: int[] createProcessArrayFroms(int,int)>(i5, i2)"->"i9 = 0";
    "i9 = 0"->"if i9 >= i2 goto r2[i8] = r3";
    "if i9 >= i2 goto r2[i8] = r3"->"$i6 = r3[i9]";
    "if i9 >= i2 goto r2[i8] = r3"->"r2[i8] = r3";
    "$i6 = r3[i9]"->"$i7 = $i6 + i3";
    "$i7 = $i6 + i3"->"r3[i9] = $i7";
    "r3[i9] = $i7"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 >= i2 goto r2[i8] = r3";
    "r2[i8] = r3"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i1 goto return r2";
}
