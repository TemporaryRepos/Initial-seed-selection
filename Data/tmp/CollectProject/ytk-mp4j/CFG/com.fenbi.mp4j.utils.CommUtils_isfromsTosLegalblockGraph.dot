digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[][];
r3 := @parameter1: int[][];
i5 := @parameter2: int;
i0 = lengthof r0;
i8 = 0;
"
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i8 >= i0 goto r12 = newarray (int)[i0];
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r7 = r0[i8];
$r6 = r3[i8];
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6);
$r8 = r0[i8];
$i6 = lengthof $r8;
if $i6 == i5 goto $r9 = r3[i8];
"
    "Block 3:
[preds: 2 ] [succs: ]
$r11 = new com.fenbi.mp4j.exception.Mp4jException;
specialinvoke $r11.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"froms arrays must be array[slaveNum][threadNum]\");
throw $r11;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r9 = r3[i8];
$i7 = lengthof $r9;
if $i7 == i5 goto i8 = i8 + 1;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r10 = new com.fenbi.mp4j.exception.Mp4jException;
specialinvoke $r10.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"tos arrays must be array[slaveNum][threadNum]\");
throw $r10;
"
    "Block 6:
[preds: 4 ] [succs: 1 ]
i8 = i8 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 1 ] [succs: 8 ]
r12 = newarray (int)[i0];
r1 = newarray (int)[i0];
i9 = 0;
"
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
"
    "Block 9:
[preds: 8 ] [succs: 8 ]
$r2 = r0[i9];
$i1 = $r2[0];
r12[i9] = $i1;
$r5 = r3[i9];
$r4 = r3[i9];
$i2 = lengthof $r4;
$i3 = $i2 - 1;
$i4 = $r5[$i3];
r1[i9] = $i4;
i9 = i9 + 1;
goto [?= (branch)];
"
    "Block 10:
[preds: 8 ] [succs: ]
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[][];
r3 := @parameter1: int[][];
i5 := @parameter2: int;
i0 = lengthof r0;
i8 = 0;
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i8 >= i0 goto r12 = newarray (int)[i0];
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i8 >= i0 goto r12 = newarray (int)[i0];
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r7 = r0[i8];
$r6 = r3[i8];
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6);
$r8 = r0[i8];
$i6 = lengthof $r8;
if $i6 == i5 goto $r9 = r3[i8];
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i8 >= i0 goto r12 = newarray (int)[i0];
"->"Block 7:
[preds: 1 ] [succs: 8 ]
r12 = newarray (int)[i0];
r1 = newarray (int)[i0];
i9 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r7 = r0[i8];
$r6 = r3[i8];
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6);
$r8 = r0[i8];
$i6 = lengthof $r8;
if $i6 == i5 goto $r9 = r3[i8];
"->"Block 3:
[preds: 2 ] [succs: ]
$r11 = new com.fenbi.mp4j.exception.Mp4jException;
specialinvoke $r11.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"froms arrays must be array[slaveNum][threadNum]\");
throw $r11;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r7 = r0[i8];
$r6 = r3[i8];
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6);
$r8 = r0[i8];
$i6 = lengthof $r8;
if $i6 == i5 goto $r9 = r3[i8];
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
$r9 = r3[i8];
$i7 = lengthof $r9;
if $i7 == i5 goto i8 = i8 + 1;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r9 = r3[i8];
$i7 = lengthof $r9;
if $i7 == i5 goto i8 = i8 + 1;
"->"Block 5:
[preds: 4 ] [succs: ]
$r10 = new com.fenbi.mp4j.exception.Mp4jException;
specialinvoke $r10.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"tos arrays must be array[slaveNum][threadNum]\");
throw $r10;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r9 = r3[i8];
$i7 = lengthof $r9;
if $i7 == i5 goto i8 = i8 + 1;
"->"Block 6:
[preds: 4 ] [succs: 1 ]
i8 = i8 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 1 ]
i8 = i8 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i8 >= i0 goto r12 = newarray (int)[i0];
";
    "Block 7:
[preds: 1 ] [succs: 8 ]
r12 = newarray (int)[i0];
r1 = newarray (int)[i0];
i9 = 0;
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
"->"Block 9:
[preds: 8 ] [succs: 8 ]
$r2 = r0[i9];
$i1 = $r2[0];
r12[i9] = $i1;
$r5 = r3[i9];
$r4 = r3[i9];
$i2 = lengthof $r4;
$i3 = $i2 - 1;
$i4 = $r5[$i3];
r1[i9] = $i4;
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
"->"Block 10:
[preds: 8 ] [succs: ]
staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
return;
";
    "Block 9:
[preds: 8 ] [succs: 8 ]
$r2 = r0[i9];
$i1 = $r2[0];
r12[i9] = $i1;
$r5 = r3[i9];
$r4 = r3[i9];
$i2 = lengthof $r4;
$i3 = $i2 - 1;
$i4 = $r5[$i3];
r1[i9] = $i4;
i9 = i9 + 1;
goto [?= (branch)];
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1);
";
}
