digraph "unitGraph" {
    "r0 := @parameter0: int[][]"
    "r3 := @parameter1: int[][]"
    "i5 := @parameter2: int"
    "i0 = lengthof r0"
    "i8 = 0"
    "if i8 >= i0 goto r12 = newarray (int)[i0]"
    "$r7 = r0[i8]"
    "$r6 = r3[i8]"
    "staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6)"
    "$r8 = r0[i8]"
    "$i6 = lengthof $r8"
    "if $i6 == i5 goto $r9 = r3[i8]"
    "$r11 = new com.fenbi.mp4j.exception.Mp4jException"
    "specialinvoke $r11.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"froms arrays must be array[slaveNum][threadNum]\")"
    "throw $r11"
    "$r9 = r3[i8]"
    "$i7 = lengthof $r9"
    "if $i7 == i5 goto i8 = i8 + 1"
    "$r10 = new com.fenbi.mp4j.exception.Mp4jException"
    "specialinvoke $r10.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"tos arrays must be array[slaveNum][threadNum]\")"
    "throw $r10"
    "i8 = i8 + 1"
    "goto [?= (branch)]"
    "r12 = newarray (int)[i0]"
    "r1 = newarray (int)[i0]"
    "i9 = 0"
    "if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)"
    "$r2 = r0[i9]"
    "$i1 = $r2[0]"
    "r12[i9] = $i1"
    "$r5 = r3[i9]"
    "$r4 = r3[i9]"
    "$i2 = lengthof $r4"
    "$i3 = $i2 - 1"
    "$i4 = $r5[$i3]"
    "r1[i9] = $i4"
    "i9 = i9 + 1"
    "staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)"
    "return"
    "r0 := @parameter0: int[][]"->"r3 := @parameter1: int[][]";
    "r3 := @parameter1: int[][]"->"i5 := @parameter2: int";
    "i5 := @parameter2: int"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i8 = 0";
    "i8 = 0"->"if i8 >= i0 goto r12 = newarray (int)[i0]";
    "if i8 >= i0 goto r12 = newarray (int)[i0]"->"$r7 = r0[i8]";
    "if i8 >= i0 goto r12 = newarray (int)[i0]"->"r12 = newarray (int)[i0]";
    "$r7 = r0[i8]"->"$r6 = r3[i8]";
    "$r6 = r3[i8]"->"staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6)";
    "staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>($r7, $r6)"->"$r8 = r0[i8]";
    "$r8 = r0[i8]"->"$i6 = lengthof $r8";
    "$i6 = lengthof $r8"->"if $i6 == i5 goto $r9 = r3[i8]";
    "if $i6 == i5 goto $r9 = r3[i8]"->"$r11 = new com.fenbi.mp4j.exception.Mp4jException";
    "if $i6 == i5 goto $r9 = r3[i8]"->"$r9 = r3[i8]";
    "$r11 = new com.fenbi.mp4j.exception.Mp4jException"->"specialinvoke $r11.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"froms arrays must be array[slaveNum][threadNum]\")";
    "specialinvoke $r11.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"froms arrays must be array[slaveNum][threadNum]\")"->"throw $r11";
    "$r9 = r3[i8]"->"$i7 = lengthof $r9";
    "$i7 = lengthof $r9"->"if $i7 == i5 goto i8 = i8 + 1";
    "if $i7 == i5 goto i8 = i8 + 1"->"$r10 = new com.fenbi.mp4j.exception.Mp4jException";
    "if $i7 == i5 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r10 = new com.fenbi.mp4j.exception.Mp4jException"->"specialinvoke $r10.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"tos arrays must be array[slaveNum][threadNum]\")";
    "specialinvoke $r10.<com.fenbi.mp4j.exception.Mp4jException: void <init>(java.lang.String)>(\"tos arrays must be array[slaveNum][threadNum]\")"->"throw $r10";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i0 goto r12 = newarray (int)[i0]";
    "r12 = newarray (int)[i0]"->"r1 = newarray (int)[i0]";
    "r1 = newarray (int)[i0]"->"i9 = 0";
    "i9 = 0"->"if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)";
    "if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)"->"$r2 = r0[i9]";
    "if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)"->"staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)";
    "$r2 = r0[i9]"->"$i1 = $r2[0]";
    "$i1 = $r2[0]"->"r12[i9] = $i1";
    "r12[i9] = $i1"->"$r5 = r3[i9]";
    "$r5 = r3[i9]"->"$r4 = r3[i9]";
    "$r4 = r3[i9]"->"$i2 = lengthof $r4";
    "$i2 = lengthof $r4"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"$i4 = $r5[$i3]";
    "$i4 = $r5[$i3]"->"r1[i9] = $i4";
    "r1[i9] = $i4"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 >= i0 goto staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)";
    "staticinvoke <com.fenbi.mp4j.utils.CommUtils: void isfromsTosLegal(int[],int[])>(r12, r1)"->"return";
}
