digraph "unitGraph" {
    "r2 := @this: us.monoid.web.jp.javacc.JSONPathCompiler"
    "$r0 = staticinvoke <us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.SimpleNode jjtCreate(int)>(4)"
    "r1 = (us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr) $r0"
    "z2 = 1"
    "$r3 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r3.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void openNodeScope(us.monoid.web.jp.javacc.Node)>(r1)"
    "r19 = null"
    "$i0 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"
    "if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"
    "$i2 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk()>()"
    "goto [?= (branch)]"
    "$i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"
    "lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }"
    "r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15)"
    "goto [?= virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()]"
    "$r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>"
    "$i1 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_gen>"
    "$r7[6] = $i1"
    "virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()"
    "$r4 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r4.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"
    "z2 = 0"
    "if r19 == null goto (branch)"
    "$r6 = <java.lang.Boolean: java.lang.Boolean FALSE>"
    "r1.<us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr: java.lang.Object value> = $r6"
    "if z2 == 0 goto return"
    "$r5 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r5.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"
    "goto [?= return]"
    "$r11 := @caughtexception"
    "r12 = $r11"
    "if z2 == 0 goto $r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "$r18 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r18.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void clearNodeScope(us.monoid.web.jp.javacc.Node)>(r1)"
    "goto [?= $z0 = r12 instanceof java.lang.RuntimeException]"
    "$r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r13.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: us.monoid.web.jp.javacc.Node popNode()>()"
    "$z0 = r12 instanceof java.lang.RuntimeException"
    "if $z0 == 0 goto $z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"
    "$r17 = (java.lang.RuntimeException) r12"
    "throw $r17"
    "$z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"
    "if $z1 == 0 goto $r15 = (java.lang.Error) r12"
    "$r16 = (us.monoid.web.jp.javacc.ParseException) r12"
    "throw $r16"
    "$r15 = (java.lang.Error) r12"
    "throw $r15"
    "$r8 := @caughtexception"
    "r9 = $r8"
    "if z2 == 0 goto throw r9"
    "$r10 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"
    "virtualinvoke $r10.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"
    "throw r9"
    "return"
    "r2 := @this: us.monoid.web.jp.javacc.JSONPathCompiler"->"$r0 = staticinvoke <us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.SimpleNode jjtCreate(int)>(4)";
    "$r0 = staticinvoke <us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.SimpleNode jjtCreate(int)>(4)"->"r1 = (us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr) $r0";
    "r1 = (us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr) $r0"->"z2 = 1";
    "z2 = 1"->"$r3 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "$r3 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r3.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void openNodeScope(us.monoid.web.jp.javacc.Node)>(r1)";
    "virtualinvoke $r3.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void openNodeScope(us.monoid.web.jp.javacc.Node)>(r1)"->"r19 = null";
    "r19 = null"->"$r11 := @caughtexception";
    "r19 = null"->"$r8 := @caughtexception";
    "r19 = null"->"$i0 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>";
    "$i0 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r11 := @caughtexception";
    "$i0 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r8 := @caughtexception";
    "$i0 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>";
    "if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$i2 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk()>()";
    "if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>";
    "if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r11 := @caughtexception";
    "if $i0 != -1 goto $i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r8 := @caughtexception";
    "$i2 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk()>()"->"$r11 := @caughtexception";
    "$i2 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk()>()"->"$r8 := @caughtexception";
    "$i2 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk()>()"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"$r11 := @caughtexception";
    "goto [?= (branch)]"->"$r8 := @caughtexception";
    "goto [?= (branch)]"->"lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }";
    "$i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r11 := @caughtexception";
    "$i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"$r8 := @caughtexception";
    "$i2 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_ntk>"->"lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }";
    "lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }"->"r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15)";
    "lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }"->"$r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>";
    "lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }"->"$r11 := @caughtexception";
    "lookupswitch($i2) {     case 15: goto r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15);     default: goto $r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>; }"->"$r8 := @caughtexception";
    "r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15)"->"$r11 := @caughtexception";
    "r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15)"->"$r8 := @caughtexception";
    "r19 = specialinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.Token jj_consume_token(int)>(15)"->"goto [?= virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()]";
    "goto [?= virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()]"->"$r11 := @caughtexception";
    "goto [?= virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()]"->"$r8 := @caughtexception";
    "goto [?= virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()]"->"virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()";
    "$r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>"->"$r11 := @caughtexception";
    "$r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>"->"$r8 := @caughtexception";
    "$r7 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int[] jj_la1>"->"$i1 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_gen>";
    "$i1 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_gen>"->"$r11 := @caughtexception";
    "$i1 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_gen>"->"$r8 := @caughtexception";
    "$i1 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: int jj_gen>"->"$r7[6] = $i1";
    "$r7[6] = $i1"->"$r11 := @caughtexception";
    "$r7[6] = $i1"->"$r8 := @caughtexception";
    "$r7[6] = $i1"->"virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()";
    "virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()"->"$r11 := @caughtexception";
    "virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()"->"$r8 := @caughtexception";
    "virtualinvoke r2.<us.monoid.web.jp.javacc.JSONPathCompiler: void part()>()"->"$r4 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "$r4 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r11 := @caughtexception";
    "$r4 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r8 := @caughtexception";
    "$r4 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r4.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)";
    "virtualinvoke $r4.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"->"$r11 := @caughtexception";
    "virtualinvoke $r4.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"->"$r8 := @caughtexception";
    "virtualinvoke $r4.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"->"z2 = 0";
    "z2 = 0"->"$r11 := @caughtexception";
    "z2 = 0"->"$r8 := @caughtexception";
    "z2 = 0"->"if r19 == null goto (branch)";
    "if r19 == null goto (branch)"->"$r6 = <java.lang.Boolean: java.lang.Boolean FALSE>";
    "if r19 == null goto (branch)"->"if z2 == 0 goto return";
    "if r19 == null goto (branch)"->"$r11 := @caughtexception";
    "if r19 == null goto (branch)"->"$r8 := @caughtexception";
    "$r6 = <java.lang.Boolean: java.lang.Boolean FALSE>"->"$r11 := @caughtexception";
    "$r6 = <java.lang.Boolean: java.lang.Boolean FALSE>"->"$r8 := @caughtexception";
    "$r6 = <java.lang.Boolean: java.lang.Boolean FALSE>"->"r1.<us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr: java.lang.Object value> = $r6";
    "r1.<us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr: java.lang.Object value> = $r6"->"$r11 := @caughtexception";
    "r1.<us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr: java.lang.Object value> = $r6"->"$r8 := @caughtexception";
    "r1.<us.monoid.web.jp.javacc.JSONPathCompiler$JSONPathExpr: java.lang.Object value> = $r6"->"if z2 == 0 goto return";
    "if z2 == 0 goto return"->"$r5 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "if z2 == 0 goto return"->"return";
    "$r5 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r5.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)";
    "virtualinvoke $r5.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r11 := @caughtexception"->"r12 = $r11";
    "$r11 := @caughtexception"->"$r8 := @caughtexception";
    "r12 = $r11"->"if z2 == 0 goto $r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "r12 = $r11"->"$r8 := @caughtexception";
    "if z2 == 0 goto $r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r18 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "if z2 == 0 goto $r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "if z2 == 0 goto $r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r8 := @caughtexception";
    "$r18 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r18.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void clearNodeScope(us.monoid.web.jp.javacc.Node)>(r1)";
    "$r18 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r8 := @caughtexception";
    "virtualinvoke $r18.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void clearNodeScope(us.monoid.web.jp.javacc.Node)>(r1)"->"z2 = 0";
    "virtualinvoke $r18.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void clearNodeScope(us.monoid.web.jp.javacc.Node)>(r1)"->"$r8 := @caughtexception";
    "z2 = 0"->"goto [?= $z0 = r12 instanceof java.lang.RuntimeException]";
    "z2 = 0"->"$r8 := @caughtexception";
    "goto [?= $z0 = r12 instanceof java.lang.RuntimeException]"->"$z0 = r12 instanceof java.lang.RuntimeException";
    "goto [?= $z0 = r12 instanceof java.lang.RuntimeException]"->"$r8 := @caughtexception";
    "$r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r13.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: us.monoid.web.jp.javacc.Node popNode()>()";
    "$r13 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"$r8 := @caughtexception";
    "virtualinvoke $r13.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: us.monoid.web.jp.javacc.Node popNode()>()"->"$z0 = r12 instanceof java.lang.RuntimeException";
    "virtualinvoke $r13.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: us.monoid.web.jp.javacc.Node popNode()>()"->"$r8 := @caughtexception";
    "$z0 = r12 instanceof java.lang.RuntimeException"->"if $z0 == 0 goto $z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException";
    "$z0 = r12 instanceof java.lang.RuntimeException"->"$r8 := @caughtexception";
    "if $z0 == 0 goto $z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"->"$r17 = (java.lang.RuntimeException) r12";
    "if $z0 == 0 goto $z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"->"$z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException";
    "if $z0 == 0 goto $z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"->"$r8 := @caughtexception";
    "$r17 = (java.lang.RuntimeException) r12"->"throw $r17";
    "$r17 = (java.lang.RuntimeException) r12"->"$r8 := @caughtexception";
    "throw $r17"->"$r8 := @caughtexception";
    "$z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"->"if $z1 == 0 goto $r15 = (java.lang.Error) r12";
    "$z1 = r12 instanceof us.monoid.web.jp.javacc.ParseException"->"$r8 := @caughtexception";
    "if $z1 == 0 goto $r15 = (java.lang.Error) r12"->"$r16 = (us.monoid.web.jp.javacc.ParseException) r12";
    "if $z1 == 0 goto $r15 = (java.lang.Error) r12"->"$r15 = (java.lang.Error) r12";
    "if $z1 == 0 goto $r15 = (java.lang.Error) r12"->"$r8 := @caughtexception";
    "$r16 = (us.monoid.web.jp.javacc.ParseException) r12"->"throw $r16";
    "$r16 = (us.monoid.web.jp.javacc.ParseException) r12"->"$r8 := @caughtexception";
    "throw $r16"->"$r8 := @caughtexception";
    "$r15 = (java.lang.Error) r12"->"throw $r15";
    "$r15 = (java.lang.Error) r12"->"$r8 := @caughtexception";
    "throw $r15"->"$r8 := @caughtexception";
    "$r8 := @caughtexception"->"r9 = $r8";
    "$r8 := @caughtexception"->"$r8 := @caughtexception";
    "r9 = $r8"->"if z2 == 0 goto throw r9";
    "r9 = $r8"->"$r8 := @caughtexception";
    "if z2 == 0 goto throw r9"->"$r10 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>";
    "if z2 == 0 goto throw r9"->"throw r9";
    "$r10 = r2.<us.monoid.web.jp.javacc.JSONPathCompiler: us.monoid.web.jp.javacc.JJTJSONPathCompilerState jjtree>"->"virtualinvoke $r10.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)";
    "virtualinvoke $r10.<us.monoid.web.jp.javacc.JJTJSONPathCompilerState: void closeNodeScope(us.monoid.web.jp.javacc.Node,boolean)>(r1, 1)"->"throw r9";
}
