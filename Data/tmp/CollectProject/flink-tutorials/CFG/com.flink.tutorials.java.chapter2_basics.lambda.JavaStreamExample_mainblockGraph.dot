digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r11 := @parameter0: java.lang.String[];
$r0 = newarray (java.lang.String)[8];
$r0[0] = \"abc\";
$r0[1] = \"\";
$r0[2] = \"bc\";
$r0[3] = \"12345\";
$r0[4] = \"efg\";
$r0[5] = \"abcd\";
$r0[6] = \"\";
$r0[7] = \"jkl\";
r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r2 = interfaceinvoke r1.<java.util.List: java.util.stream.Stream stream()>();
$r3 = staticinvoke <com.flink.tutorials.java.chapter2_basics.lambda.JavaStreamExample$lambda_main_0__74: java.util.function.Predicate bootstrap$()>();
$r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);
$r5 = staticinvoke <com.flink.tutorials.java.chapter2_basics.lambda.JavaStreamExample$lambda_main_1__75: java.util.function.Function bootstrap$()>();
$r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);
$r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
$r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);
r9 = (java.util.List) $r8;
$r10 = staticinvoke <com.flink.tutorials.java.chapter2_basics.lambda.JavaStreamExample$lambda_main_2__76: java.util.function.Consumer bootstrap$()>();
interfaceinvoke r9.<java.util.List: void forEach(java.util.function.Consumer)>($r10);
return;
"
}
