digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "r1 = r0[0]"
    "r2 = r0[1]"
    "r3 = r0[2]"
    "$i0 = lengthof r0"
    "if $i0 < 4 goto $z2 = 0"
    "$r6 = r0[3]"
    "$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"production\")"
    "goto [?= z0 = $z2]"
    "$z2 = 0"
    "z0 = $z2"
    "$i1 = lengthof r0"
    "if $i1 < 4 goto $z3 = 0"
    "$r5 = r0[3]"
    "$z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"simulation\")"
    "goto [?= z1 = $z3]"
    "$z3 = 0"
    "z1 = $z3"
    "$i2 = lengthof r0"
    "if $i2 < 5 goto $r13 = null"
    "$r13 = r0[4]"
    "goto [?= r14 = $r13]"
    "$r13 = null"
    "r14 = $r13"
    "if r14 == null goto r14 = \"default\""
    "$i3 = virtualinvoke r14.<java.lang.String: int length()>()"
    "if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\""
    "r14 = \"default\""
    "$r15 = class \"Ljavapns/test/SpecificNotificationTests;\""
    "$r16 = new java.lang.StringBuilder"
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"test_\")"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r20 = newarray (java.lang.Class)[4]"
    "$r20[0] = class \"Ljava/lang/String;\""
    "$r20[1] = class \"Ljava/lang/String;\""
    "$r20[2] = class \"Ljava/lang/String;\""
    "$r21 = <java.lang.Boolean: java.lang.Class TYPE>"
    "$r20[3] = $r21"
    "$r22 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r19, $r20)"
    "$r23 = newarray (java.lang.Object)[4]"
    "$r23[0] = r1"
    "$r23[1] = r2"
    "$r23[2] = r3"
    "$r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"
    "$r23[3] = $r24"
    "virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r23)"
    "goto [?= return]"
    "$r9 := @caughtexception"
    "r25 = $r9"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "$r10 = newarray (java.lang.Object)[1]"
    "$r10[0] = r14"
    "$r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Error: test \'%s\' not found.  Test names are case-sensitive\", $r10)"
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "$r7 := @caughtexception"
    "r26 = $r7"
    "$r8 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()"
    "if $r8 == null goto $r27 = r26"
    "$r27 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()"
    "goto [?= virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()]"
    "$r27 = r26"
    "virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()"
    "return"
    "r0 := @parameter0: java.lang.String[]"->"r1 = r0[0]";
    "r1 = r0[0]"->"r2 = r0[1]";
    "r2 = r0[1]"->"r3 = r0[2]";
    "r3 = r0[2]"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if $i0 < 4 goto $z2 = 0";
    "if $i0 < 4 goto $z2 = 0"->"$r6 = r0[3]";
    "if $i0 < 4 goto $z2 = 0"->"$z2 = 0";
    "$r6 = r0[3]"->"$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"production\")";
    "$z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"production\")"->"goto [?= z0 = $z2]";
    "goto [?= z0 = $z2]"->"z0 = $z2";
    "$z2 = 0"->"z0 = $z2";
    "z0 = $z2"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"if $i1 < 4 goto $z3 = 0";
    "if $i1 < 4 goto $z3 = 0"->"$r5 = r0[3]";
    "if $i1 < 4 goto $z3 = 0"->"$z3 = 0";
    "$r5 = r0[3]"->"$z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"simulation\")";
    "$z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"simulation\")"->"goto [?= z1 = $z3]";
    "goto [?= z1 = $z3]"->"z1 = $z3";
    "$z3 = 0"->"z1 = $z3";
    "z1 = $z3"->"$i2 = lengthof r0";
    "$i2 = lengthof r0"->"if $i2 < 5 goto $r13 = null";
    "if $i2 < 5 goto $r13 = null"->"$r13 = r0[4]";
    "if $i2 < 5 goto $r13 = null"->"$r13 = null";
    "$r13 = r0[4]"->"goto [?= r14 = $r13]";
    "goto [?= r14 = $r13]"->"r14 = $r13";
    "$r13 = null"->"r14 = $r13";
    "r14 = $r13"->"if r14 == null goto r14 = \"default\"";
    "if r14 == null goto r14 = \"default\""->"$i3 = virtualinvoke r14.<java.lang.String: int length()>()";
    "if r14 == null goto r14 = \"default\""->"r14 = \"default\"";
    "$i3 = virtualinvoke r14.<java.lang.String: int length()>()"->"if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\"";
    "if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"r14 = \"default\"";
    "if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r15 = class \"Ljavapns/test/SpecificNotificationTests;\"";
    "if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r9 := @caughtexception";
    "if $i3 != 0 goto $r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r7 := @caughtexception";
    "r14 = \"default\""->"$r9 := @caughtexception";
    "r14 = \"default\""->"$r7 := @caughtexception";
    "r14 = \"default\""->"$r15 = class \"Ljavapns/test/SpecificNotificationTests;\"";
    "$r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r9 := @caughtexception";
    "$r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r7 := @caughtexception";
    "$r15 = class \"Ljavapns/test/SpecificNotificationTests;\""->"$r16 = new java.lang.StringBuilder";
    "$r16 = new java.lang.StringBuilder"->"$r9 := @caughtexception";
    "$r16 = new java.lang.StringBuilder"->"$r7 := @caughtexception";
    "$r16 = new java.lang.StringBuilder"->"specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"->"$r9 := @caughtexception";
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"->"$r7 := @caughtexception";
    "specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"test_\")";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"test_\")"->"$r9 := @caughtexception";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"test_\")"->"$r7 := @caughtexception";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"test_\")"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)"->"$r9 := @caughtexception";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)"->"$r7 := @caughtexception";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r9 := @caughtexception";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r7 := @caughtexception";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r20 = newarray (java.lang.Class)[4]";
    "$r20 = newarray (java.lang.Class)[4]"->"$r9 := @caughtexception";
    "$r20 = newarray (java.lang.Class)[4]"->"$r7 := @caughtexception";
    "$r20 = newarray (java.lang.Class)[4]"->"$r20[0] = class \"Ljava/lang/String;\"";
    "$r20[0] = class \"Ljava/lang/String;\""->"$r9 := @caughtexception";
    "$r20[0] = class \"Ljava/lang/String;\""->"$r7 := @caughtexception";
    "$r20[0] = class \"Ljava/lang/String;\""->"$r20[1] = class \"Ljava/lang/String;\"";
    "$r20[1] = class \"Ljava/lang/String;\""->"$r9 := @caughtexception";
    "$r20[1] = class \"Ljava/lang/String;\""->"$r7 := @caughtexception";
    "$r20[1] = class \"Ljava/lang/String;\""->"$r20[2] = class \"Ljava/lang/String;\"";
    "$r20[2] = class \"Ljava/lang/String;\""->"$r9 := @caughtexception";
    "$r20[2] = class \"Ljava/lang/String;\""->"$r7 := @caughtexception";
    "$r20[2] = class \"Ljava/lang/String;\""->"$r21 = <java.lang.Boolean: java.lang.Class TYPE>";
    "$r21 = <java.lang.Boolean: java.lang.Class TYPE>"->"$r9 := @caughtexception";
    "$r21 = <java.lang.Boolean: java.lang.Class TYPE>"->"$r7 := @caughtexception";
    "$r21 = <java.lang.Boolean: java.lang.Class TYPE>"->"$r20[3] = $r21";
    "$r20[3] = $r21"->"$r9 := @caughtexception";
    "$r20[3] = $r21"->"$r7 := @caughtexception";
    "$r20[3] = $r21"->"$r22 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r19, $r20)";
    "$r22 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r19, $r20)"->"$r9 := @caughtexception";
    "$r22 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r19, $r20)"->"$r7 := @caughtexception";
    "$r22 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r19, $r20)"->"$r23 = newarray (java.lang.Object)[4]";
    "$r23 = newarray (java.lang.Object)[4]"->"$r9 := @caughtexception";
    "$r23 = newarray (java.lang.Object)[4]"->"$r7 := @caughtexception";
    "$r23 = newarray (java.lang.Object)[4]"->"$r23[0] = r1";
    "$r23[0] = r1"->"$r9 := @caughtexception";
    "$r23[0] = r1"->"$r7 := @caughtexception";
    "$r23[0] = r1"->"$r23[1] = r2";
    "$r23[1] = r2"->"$r9 := @caughtexception";
    "$r23[1] = r2"->"$r7 := @caughtexception";
    "$r23[1] = r2"->"$r23[2] = r3";
    "$r23[2] = r3"->"$r9 := @caughtexception";
    "$r23[2] = r3"->"$r7 := @caughtexception";
    "$r23[2] = r3"->"$r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)";
    "$r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"->"$r9 := @caughtexception";
    "$r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"->"$r7 := @caughtexception";
    "$r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"->"$r23[3] = $r24";
    "$r23[3] = $r24"->"$r9 := @caughtexception";
    "$r23[3] = $r24"->"$r7 := @caughtexception";
    "$r23[3] = $r24"->"virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r23)";
    "virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r23)"->"$r9 := @caughtexception";
    "virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r23)"->"$r7 := @caughtexception";
    "virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r23)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r9 := @caughtexception"->"r25 = $r9";
    "r25 = $r9"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"$r10 = newarray (java.lang.Object)[1]";
    "$r10 = newarray (java.lang.Object)[1]"->"$r10[0] = r14";
    "$r10[0] = r14"->"$r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Error: test \'%s\' not found.  Test names are case-sensitive\", $r10)";
    "$r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Error: test \'%s\' not found.  Test names are case-sensitive\", $r10)"->"virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r7 := @caughtexception"->"r26 = $r7";
    "r26 = $r7"->"$r8 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()";
    "$r8 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()"->"if $r8 == null goto $r27 = r26";
    "if $r8 == null goto $r27 = r26"->"$r27 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()";
    "if $r8 == null goto $r27 = r26"->"$r27 = r26";
    "$r27 = virtualinvoke r26.<java.lang.Exception: java.lang.Throwable getCause()>()"->"goto [?= virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()]";
    "goto [?= virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()]"->"virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()";
    "$r27 = r26"->"virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()";
    "virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>()"->"return";
}
