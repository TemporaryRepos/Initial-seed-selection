digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "$r1 = newarray (java.lang.String)[5]"
    "$r1[0] = \"keystore-path\""
    "$r1[1] = \"keystore-password\""
    "$r1[2] = \"device-token\""
    "$r1[3] = \"[production|sandbox]\""
    "$r1[4] = \"[test-name]\""
    "$z0 = staticinvoke <javapns.test.SpecificNotificationTests: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)"
    "if $z0 != 0 goto staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()"
    "return"
    "staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()"
    "staticinvoke <javapns.test.SpecificNotificationTests: void runTest(java.lang.String[])>(r0)"
    "r0 := @parameter0: java.lang.String[]"->"$r1 = newarray (java.lang.String)[5]";
    "$r1 = newarray (java.lang.String)[5]"->"$r1[0] = \"keystore-path\"";
    "$r1[0] = \"keystore-path\""->"$r1[1] = \"keystore-password\"";
    "$r1[1] = \"keystore-password\""->"$r1[2] = \"device-token\"";
    "$r1[2] = \"device-token\""->"$r1[3] = \"[production|sandbox]\"";
    "$r1[3] = \"[production|sandbox]\""->"$r1[4] = \"[test-name]\"";
    "$r1[4] = \"[test-name]\""->"$z0 = staticinvoke <javapns.test.SpecificNotificationTests: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)";
    "$z0 = staticinvoke <javapns.test.SpecificNotificationTests: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)"->"if $z0 != 0 goto staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()";
    "if $z0 != 0 goto staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()"->"return";
    "if $z0 != 0 goto staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()"->"staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()";
    "staticinvoke <javapns.test.SpecificNotificationTests: void configureBasicLogging()>()"->"staticinvoke <javapns.test.SpecificNotificationTests: void runTest(java.lang.String[])>(r0)";
    "staticinvoke <javapns.test.SpecificNotificationTests: void runTest(java.lang.String[])>(r0)"->"return";
}
