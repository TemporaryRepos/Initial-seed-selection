digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "$r1 = newarray (java.lang.String)[7]"
    "$r1[0] = \"keystore-path\""
    "$r1[1] = \"keystore-password\""
    "$r1[2] = \"device-token\""
    "$r1[3] = \"[production|sandbox]\""
    "$r1[4] = \"[complex|simple|threads]\""
    "$r1[5] = \"[#devices]\""
    "$r1[6] = \"[#threads]\""
    "$z0 = staticinvoke <javapns.test.NotificationTest: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)"
    "if $z0 != 0 goto staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"
    "return"
    "staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"
    "staticinvoke <javapns.test.NotificationTest: void pushTest(java.lang.String[])>(r0)"
    "goto [?= return]"
    "$r3 := @caughtexception"
    "r4 = $r3"
    "virtualinvoke r4.<javapns.communication.exceptions.CommunicationException: void printStackTrace()>()"
    "$r2 := @caughtexception"
    "r5 = $r2"
    "virtualinvoke r5.<javapns.communication.exceptions.KeystoreException: void printStackTrace()>()"
    "r0 := @parameter0: java.lang.String[]"->"$r1 = newarray (java.lang.String)[7]";
    "$r1 = newarray (java.lang.String)[7]"->"$r1[0] = \"keystore-path\"";
    "$r1[0] = \"keystore-path\""->"$r1[1] = \"keystore-password\"";
    "$r1[1] = \"keystore-password\""->"$r1[2] = \"device-token\"";
    "$r1[2] = \"device-token\""->"$r1[3] = \"[production|sandbox]\"";
    "$r1[3] = \"[production|sandbox]\""->"$r1[4] = \"[complex|simple|threads]\"";
    "$r1[4] = \"[complex|simple|threads]\""->"$r1[5] = \"[#devices]\"";
    "$r1[5] = \"[#devices]\""->"$r1[6] = \"[#threads]\"";
    "$r1[6] = \"[#threads]\""->"$z0 = staticinvoke <javapns.test.NotificationTest: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)";
    "$z0 = staticinvoke <javapns.test.NotificationTest: boolean verifyCorrectUsage(java.lang.Class,java.lang.String[],java.lang.String[])>(class \"Ljavapns/test/NotificationTest;\", r0, $r1)"->"if $z0 != 0 goto staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()";
    "if $z0 != 0 goto staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"->"return";
    "if $z0 != 0 goto staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"->"staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()";
    "staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"->"$r3 := @caughtexception";
    "staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"->"$r2 := @caughtexception";
    "staticinvoke <javapns.test.NotificationTest: void configureBasicLogging()>()"->"staticinvoke <javapns.test.NotificationTest: void pushTest(java.lang.String[])>(r0)";
    "staticinvoke <javapns.test.NotificationTest: void pushTest(java.lang.String[])>(r0)"->"$r3 := @caughtexception";
    "staticinvoke <javapns.test.NotificationTest: void pushTest(java.lang.String[])>(r0)"->"$r2 := @caughtexception";
    "staticinvoke <javapns.test.NotificationTest: void pushTest(java.lang.String[])>(r0)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r3 := @caughtexception"->"r4 = $r3";
    "r4 = $r3"->"virtualinvoke r4.<javapns.communication.exceptions.CommunicationException: void printStackTrace()>()";
    "virtualinvoke r4.<javapns.communication.exceptions.CommunicationException: void printStackTrace()>()"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r2 := @caughtexception"->"r5 = $r2";
    "r5 = $r2"->"virtualinvoke r5.<javapns.communication.exceptions.KeystoreException: void printStackTrace()>()";
    "virtualinvoke r5.<javapns.communication.exceptions.KeystoreException: void printStackTrace()>()"->"return";
}
