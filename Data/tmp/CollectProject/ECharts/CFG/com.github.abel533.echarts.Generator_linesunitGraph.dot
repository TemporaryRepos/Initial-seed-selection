digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\n\")"
    "r4 = r3"
    "i0 = lengthof r4"
    "i4 = 0"
    "if i4 >= i0 goto $r5 = newarray (java.lang.String)[0]"
    "r8 = r4[i4]"
    "r9 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>()"
    "$i1 = virtualinvoke r9.<java.lang.String: int length()>()"
    "if $i1 != 0 goto $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")"
    "goto [?= i4 = i4 + 1]"
    "$z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")"
    "if $z0 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)"
    "$i2 = virtualinvoke r9.<java.lang.String: int length()>()"
    "$i3 = $i2 - 1"
    "r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i3)"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "$r5 = newarray (java.lang.String)[0]"
    "$r6 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5)"
    "$r7 = (java.lang.String[]) $r6"
    "return $r7"
    "r2 := @parameter0: java.lang.String"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\n\")";
    "r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\n\")"->"r4 = r3";
    "r4 = r3"->"i0 = lengthof r4";
    "i0 = lengthof r4"->"i4 = 0";
    "i4 = 0"->"if i4 >= i0 goto $r5 = newarray (java.lang.String)[0]";
    "if i4 >= i0 goto $r5 = newarray (java.lang.String)[0]"->"r8 = r4[i4]";
    "if i4 >= i0 goto $r5 = newarray (java.lang.String)[0]"->"$r5 = newarray (java.lang.String)[0]";
    "r8 = r4[i4]"->"r9 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>()";
    "r9 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>()"->"$i1 = virtualinvoke r9.<java.lang.String: int length()>()";
    "$i1 = virtualinvoke r9.<java.lang.String: int length()>()"->"if $i1 != 0 goto $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")";
    "if $i1 != 0 goto $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")"->"goto [?= i4 = i4 + 1]";
    "if $i1 != 0 goto $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")"->"$z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")";
    "goto [?= i4 = i4 + 1]"->"i4 = i4 + 1";
    "$z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(\";\")"->"if $z0 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)";
    "if $z0 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)"->"$i2 = virtualinvoke r9.<java.lang.String: int length()>()";
    "if $z0 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)";
    "$i2 = virtualinvoke r9.<java.lang.String: int length()>()"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i3)";
    "r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i3)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i0 goto $r5 = newarray (java.lang.String)[0]";
    "$r5 = newarray (java.lang.String)[0]"->"$r6 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5)";
    "$r6 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5)"->"$r7 = (java.lang.String[]) $r6";
    "$r7 = (java.lang.String[]) $r6"->"return $r7";
}
