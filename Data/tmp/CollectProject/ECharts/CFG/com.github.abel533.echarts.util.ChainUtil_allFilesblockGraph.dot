digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r2 := @parameter0: java.io.File;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$z0 = virtualinvoke r2.<java.io.File: boolean isFile()>();
if $z0 == 0 goto $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
"
    "Block 1:
[preds: 0 ] [succs: 6 ]
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);
goto [?= return r1];
"
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
if $z1 == 0 goto return r1;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r3 = new com.github.abel533.echarts.util.ChainUtil$1;
specialinvoke $r3.<com.github.abel533.echarts.util.ChainUtil$1: void <init>()>();
r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r3);
r5 = r4;
i0 = lengthof r5;
i1 = 0;
"
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i1 >= i0 goto return r1;
"
    "Block 5:
[preds: 4 ] [succs: 4 ]
r6 = r5[i1];
$r7 = staticinvoke <com.github.abel533.echarts.util.ChainUtil: java.util.List allFiles(java.io.File)>(r6);
interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r7);
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 2 4 ] [succs: ]
return r1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r2 := @parameter0: java.io.File;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$z0 = virtualinvoke r2.<java.io.File: boolean isFile()>();
if $z0 == 0 goto $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
"->"Block 1:
[preds: 0 ] [succs: 6 ]
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);
goto [?= return r1];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r2 := @parameter0: java.io.File;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$z0 = virtualinvoke r2.<java.io.File: boolean isFile()>();
if $z0 == 0 goto $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
"->"Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
if $z1 == 0 goto return r1;
";
    "Block 1:
[preds: 0 ] [succs: 6 ]
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);
goto [?= return r1];
"->"Block 6:
[preds: 1 2 4 ] [succs: ]
return r1;
";
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
if $z1 == 0 goto return r1;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r3 = new com.github.abel533.echarts.util.ChainUtil$1;
specialinvoke $r3.<com.github.abel533.echarts.util.ChainUtil$1: void <init>()>();
r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r3);
r5 = r4;
i0 = lengthof r5;
i1 = 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 6 ]
$z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();
if $z1 == 0 goto return r1;
"->"Block 6:
[preds: 1 2 4 ] [succs: ]
return r1;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r3 = new com.github.abel533.echarts.util.ChainUtil$1;
specialinvoke $r3.<com.github.abel533.echarts.util.ChainUtil$1: void <init>()>();
r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r3);
r5 = r4;
i0 = lengthof r5;
i1 = 0;
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i1 >= i0 goto return r1;
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i1 >= i0 goto return r1;
"->"Block 5:
[preds: 4 ] [succs: 4 ]
r6 = r5[i1];
$r7 = staticinvoke <com.github.abel533.echarts.util.ChainUtil: java.util.List allFiles(java.io.File)>(r6);
interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r7);
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i1 >= i0 goto return r1;
"->"Block 6:
[preds: 1 2 4 ] [succs: ]
return r1;
";
    "Block 5:
[preds: 4 ] [succs: 4 ]
r6 = r5[i1];
$r7 = staticinvoke <com.github.abel533.echarts.util.ChainUtil: java.util.List allFiles(java.io.File)>(r6);
interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r7);
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i1 >= i0 goto return r1;
";
}
