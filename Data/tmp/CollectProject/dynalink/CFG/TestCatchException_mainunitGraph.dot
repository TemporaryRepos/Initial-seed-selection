digraph "unitGraph" {
    "r5 := @parameter0: java.lang.String[]"
    "r0 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"throwing\")"
    "r1 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"catching\")"
    "$r2 = newarray (java.lang.Class)[1]"
    "$r2[0] = class \"LTestCatchException$MyException;\""
    "$r3 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])>(r1, 0, $r2)"
    "staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>(r0, class \"LTestCatchException$MyException;\", $r3)"
    "return"
    "r5 := @parameter0: java.lang.String[]"->"r0 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"throwing\")";
    "r0 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"throwing\")"->"r1 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"catching\")";
    "r1 = staticinvoke <TestCatchException: java.lang.invoke.MethodHandle findStatic(java.lang.String)>(\"catching\")"->"$r2 = newarray (java.lang.Class)[1]";
    "$r2 = newarray (java.lang.Class)[1]"->"$r2[0] = class \"LTestCatchException$MyException;\"";
    "$r2[0] = class \"LTestCatchException$MyException;\""->"$r3 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])>(r1, 0, $r2)";
    "$r3 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])>(r1, 0, $r2)"->"staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>(r0, class \"LTestCatchException$MyException;\", $r3)";
    "staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>(r0, class \"LTestCatchException$MyException;\", $r3)"->"return";
}
