digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r24 := @parameter0: java.lang.String[];
$r0 = new com.doinb.cas.User;
specialinvoke $r0.<com.doinb.cas.User: void <init>(java.lang.String,int)>(\"z3\", 22);
r1 = $r0;
$r2 = new com.doinb.cas.User;
specialinvoke $r2.<com.doinb.cas.User: void <init>(java.lang.String,int)>(\"li4\", 25);
r3 = $r2;
$r4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
r5 = $r4;
virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);
$r7 = <java.lang.System: java.io.PrintStream out>;
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r3);
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\t\");
$r10 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
$r11 = (com.doinb.cas.User) $r10;
$r12 = virtualinvoke $r11.<com.doinb.cas.User: java.lang.String toString()>();
$r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r14);
$r16 = <java.lang.System: java.io.PrintStream out>;
$r15 = new java.lang.StringBuilder;
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
$z1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r3);
$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\t\");
$r19 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
$r20 = (com.doinb.cas.User) $r19;
$r21 = virtualinvoke $r20.<com.doinb.cas.User: java.lang.String toString()>();
$r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r23);
return;
"
}
