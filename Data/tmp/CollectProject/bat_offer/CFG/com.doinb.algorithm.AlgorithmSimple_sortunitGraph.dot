digraph "unitGraph" {
    "r1 := @this: com.doinb.algorithm.AlgorithmSimple"
    "r0 := @parameter0: int[]"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "i11 = i0"
    "i12 = i1"
    "i2 = r0[i0]"
    "if i12 <= i11 goto (branch)"
    "if i12 <= i11 goto $i5 = r0[i12]"
    "$i10 = r0[i12]"
    "if $i10 < i2 goto $i5 = r0[i12]"
    "i12 = i12 + -1"
    "goto [?= (branch)]"
    "$i5 = r0[i12]"
    "if $i5 > i2 goto (branch)"
    "i13 = r0[i12]"
    "$i9 = r0[i11]"
    "r0[i12] = $i9"
    "r0[i11] = i13"
    "if i12 <= i11 goto $i6 = r0[i11]"
    "$i8 = r0[i11]"
    "if $i8 > i2 goto $i6 = r0[i11]"
    "i11 = i11 + 1"
    "$i6 = r0[i11]"
    "if $i6 < i2 goto (branch)"
    "i14 = r0[i11]"
    "$i7 = r0[i12]"
    "r0[i11] = $i7"
    "r0[i12] = i14"
    "if i11 <= i0 goto (branch)"
    "$i4 = i11 - 1"
    "virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, i0, $i4)"
    "if i12 >= i1 goto return"
    "$i3 = i12 + 1"
    "virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, $i3, i1)"
    "return"
    "r1 := @this: com.doinb.algorithm.AlgorithmSimple"->"r0 := @parameter0: int[]";
    "r0 := @parameter0: int[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i11 = i0";
    "i11 = i0"->"i12 = i1";
    "i12 = i1"->"i2 = r0[i0]";
    "i2 = r0[i0]"->"if i12 <= i11 goto (branch)";
    "if i12 <= i11 goto (branch)"->"if i12 <= i11 goto $i5 = r0[i12]";
    "if i12 <= i11 goto (branch)"->"if i11 <= i0 goto (branch)";
    "if i12 <= i11 goto $i5 = r0[i12]"->"$i10 = r0[i12]";
    "if i12 <= i11 goto $i5 = r0[i12]"->"$i5 = r0[i12]";
    "$i10 = r0[i12]"->"if $i10 < i2 goto $i5 = r0[i12]";
    "if $i10 < i2 goto $i5 = r0[i12]"->"i12 = i12 + -1";
    "if $i10 < i2 goto $i5 = r0[i12]"->"$i5 = r0[i12]";
    "i12 = i12 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 <= i11 goto $i5 = r0[i12]";
    "$i5 = r0[i12]"->"if $i5 > i2 goto (branch)";
    "if $i5 > i2 goto (branch)"->"i13 = r0[i12]";
    "if $i5 > i2 goto (branch)"->"if i12 <= i11 goto $i6 = r0[i11]";
    "i13 = r0[i12]"->"$i9 = r0[i11]";
    "$i9 = r0[i11]"->"r0[i12] = $i9";
    "r0[i12] = $i9"->"r0[i11] = i13";
    "r0[i11] = i13"->"if i12 <= i11 goto $i6 = r0[i11]";
    "if i12 <= i11 goto $i6 = r0[i11]"->"$i8 = r0[i11]";
    "if i12 <= i11 goto $i6 = r0[i11]"->"$i6 = r0[i11]";
    "$i8 = r0[i11]"->"if $i8 > i2 goto $i6 = r0[i11]";
    "if $i8 > i2 goto $i6 = r0[i11]"->"i11 = i11 + 1";
    "if $i8 > i2 goto $i6 = r0[i11]"->"$i6 = r0[i11]";
    "i11 = i11 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 <= i11 goto $i6 = r0[i11]";
    "$i6 = r0[i11]"->"if $i6 < i2 goto (branch)";
    "if $i6 < i2 goto (branch)"->"i14 = r0[i11]";
    "if $i6 < i2 goto (branch)"->"if i12 <= i11 goto (branch)";
    "i14 = r0[i11]"->"$i7 = r0[i12]";
    "$i7 = r0[i12]"->"r0[i11] = $i7";
    "r0[i11] = $i7"->"r0[i12] = i14";
    "r0[i12] = i14"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 <= i11 goto (branch)";
    "if i11 <= i0 goto (branch)"->"$i4 = i11 - 1";
    "if i11 <= i0 goto (branch)"->"if i12 >= i1 goto return";
    "$i4 = i11 - 1"->"virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, i0, $i4)";
    "virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, i0, $i4)"->"if i12 >= i1 goto return";
    "if i12 >= i1 goto return"->"$i3 = i12 + 1";
    "if i12 >= i1 goto return"->"return";
    "$i3 = i12 + 1"->"virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, $i3, i1)";
    "virtualinvoke r1.<com.doinb.algorithm.AlgorithmSimple: void sort(int[],int,int)>(r0, $i3, i1)"->"return";
}
