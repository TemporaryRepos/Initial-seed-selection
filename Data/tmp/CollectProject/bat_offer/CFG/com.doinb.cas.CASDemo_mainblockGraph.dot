digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r20 := @parameter0: java.lang.String[];
$r0 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(5);
r1 = $r0;
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(5, 2019);
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\t current data: \");
$i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$z1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(2019, 2048);
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\t current data: \");
$i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);
$r15 = <java.lang.System: java.io.PrintStream out>;
$r14 = new java.lang.StringBuilder;
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
$z2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(5, 4096);
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\t current data: \");
$i2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);
virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
return;
"
}
