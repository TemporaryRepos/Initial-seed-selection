digraph "unitGraph" {
    "r7 := @this: edu.cmu.graphchi.apps.recommendations.TwitterWTF"
    "r0 := @parameter0: edu.cmu.graphchi.walks.WalkArray"
    "r5 := @parameter1: edu.cmu.graphchi.ChiVertex"
    "r3 := @parameter2: edu.cmu.graphchi.walks.DrunkardContext"
    "r6 := @parameter3: java.util.Random"
    "$r1 = (edu.cmu.graphchi.walks.IntWalkArray) r0"
    "r2 = virtualinvoke $r1.<edu.cmu.graphchi.walks.IntWalkArray: int[] getArray()>()"
    "r4 = (edu.cmu.graphchi.walks.IntDrunkardContext) r3"
    "i0 = lengthof r2"
    "i1 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int numOutEdges()>()"
    "if i1 <= 0 goto i8 = 0"
    "i7 = 0"
    "if i7 >= i0 goto (branch)"
    "i3 = r2[i7]"
    "$d0 = virtualinvoke r6.<java.util.Random: double nextDouble()>()"
    "$d1 = <edu.cmu.graphchi.apps.recommendations.TwitterWTF: double RESET_PROBABILITY>"
    "$b4 = $d0 cmpg $d1"
    "if $b4 >= 0 goto $i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)"
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>(i3, 0)"
    "goto [?= i7 = i7 + 1]"
    "$i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)"
    "i6 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int getOutEdgeId(int)>($i5)"
    "$z0 = interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: boolean isWalkStartedFromVertex(int)>(i3)"
    "if $z0 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= z1 = $z2]"
    "$z2 = 0"
    "z1 = $z2"
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void forwardWalkTo(int,int,boolean)>(i3, i6, z1)"
    "i7 = i7 + 1"
    "goto [?= (branch)]"
    "goto [?= return]"
    "i8 = 0"
    "if i8 >= i0 goto return"
    "$i2 = r2[i8]"
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>($i2, 0)"
    "i8 = i8 + 1"
    "return"
    "r7 := @this: edu.cmu.graphchi.apps.recommendations.TwitterWTF"->"r0 := @parameter0: edu.cmu.graphchi.walks.WalkArray";
    "r0 := @parameter0: edu.cmu.graphchi.walks.WalkArray"->"r5 := @parameter1: edu.cmu.graphchi.ChiVertex";
    "r5 := @parameter1: edu.cmu.graphchi.ChiVertex"->"r3 := @parameter2: edu.cmu.graphchi.walks.DrunkardContext";
    "r3 := @parameter2: edu.cmu.graphchi.walks.DrunkardContext"->"r6 := @parameter3: java.util.Random";
    "r6 := @parameter3: java.util.Random"->"$r1 = (edu.cmu.graphchi.walks.IntWalkArray) r0";
    "$r1 = (edu.cmu.graphchi.walks.IntWalkArray) r0"->"r2 = virtualinvoke $r1.<edu.cmu.graphchi.walks.IntWalkArray: int[] getArray()>()";
    "r2 = virtualinvoke $r1.<edu.cmu.graphchi.walks.IntWalkArray: int[] getArray()>()"->"r4 = (edu.cmu.graphchi.walks.IntDrunkardContext) r3";
    "r4 = (edu.cmu.graphchi.walks.IntDrunkardContext) r3"->"i0 = lengthof r2";
    "i0 = lengthof r2"->"i1 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int numOutEdges()>()";
    "i1 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int numOutEdges()>()"->"if i1 <= 0 goto i8 = 0";
    "if i1 <= 0 goto i8 = 0"->"i7 = 0";
    "if i1 <= 0 goto i8 = 0"->"i8 = 0";
    "i7 = 0"->"if i7 >= i0 goto (branch)";
    "if i7 >= i0 goto (branch)"->"i3 = r2[i7]";
    "if i7 >= i0 goto (branch)"->"goto [?= return]";
    "i3 = r2[i7]"->"$d0 = virtualinvoke r6.<java.util.Random: double nextDouble()>()";
    "$d0 = virtualinvoke r6.<java.util.Random: double nextDouble()>()"->"$d1 = <edu.cmu.graphchi.apps.recommendations.TwitterWTF: double RESET_PROBABILITY>";
    "$d1 = <edu.cmu.graphchi.apps.recommendations.TwitterWTF: double RESET_PROBABILITY>"->"$b4 = $d0 cmpg $d1";
    "$b4 = $d0 cmpg $d1"->"if $b4 >= 0 goto $i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)";
    "if $b4 >= 0 goto $i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)"->"interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>(i3, 0)";
    "if $b4 >= 0 goto $i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)"->"$i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)";
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>(i3, 0)"->"goto [?= i7 = i7 + 1]";
    "goto [?= i7 = i7 + 1]"->"i7 = i7 + 1";
    "$i5 = virtualinvoke r6.<java.util.Random: int nextInt(int)>(i1)"->"i6 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int getOutEdgeId(int)>($i5)";
    "i6 = virtualinvoke r5.<edu.cmu.graphchi.ChiVertex: int getOutEdgeId(int)>($i5)"->"$z0 = interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: boolean isWalkStartedFromVertex(int)>(i3)";
    "$z0 = interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: boolean isWalkStartedFromVertex(int)>(i3)"->"if $z0 != 0 goto $z2 = 0";
    "if $z0 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $z0 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= z1 = $z2]";
    "goto [?= z1 = $z2]"->"z1 = $z2";
    "$z2 = 0"->"z1 = $z2";
    "z1 = $z2"->"interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void forwardWalkTo(int,int,boolean)>(i3, i6, z1)";
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void forwardWalkTo(int,int,boolean)>(i3, i6, z1)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 >= i0 goto (branch)";
    "goto [?= return]"->"return";
    "i8 = 0"->"if i8 >= i0 goto return";
    "if i8 >= i0 goto return"->"$i2 = r2[i8]";
    "if i8 >= i0 goto return"->"return";
    "$i2 = r2[i8]"->"interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>($i2, 0)";
    "interfaceinvoke r4.<edu.cmu.graphchi.walks.IntDrunkardContext: void resetWalk(int,boolean)>($i2, 0)"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i0 goto return";
}
