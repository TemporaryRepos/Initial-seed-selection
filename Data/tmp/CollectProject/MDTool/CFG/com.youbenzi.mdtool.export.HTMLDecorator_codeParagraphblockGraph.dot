digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: com.youbenzi.mdtool.export.HTMLDecorator;
r0 := @parameter0: com.youbenzi.mdtool.markdown.bean.ValuePart[];
$r1 = r0[0];
r11 = virtualinvoke $r1.<com.youbenzi.mdtool.markdown.bean.ValuePart: java.lang.String getValue()>();
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"<pre>\");
r3 = $r2;
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<code>\");
r12 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"<\", \"&lt;\");
r13 = virtualinvoke r12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\">\", \"&gt;\");
$z0 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>(\"\n\");
if $z0 == 0 goto virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$i0 = virtualinvoke r13.<java.lang.String: int length()>();
$r9 = \"\n\";
$i1 = virtualinvoke $r9.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</code>\");
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</pre>\n\");
$r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
return $r8;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: com.youbenzi.mdtool.export.HTMLDecorator;
r0 := @parameter0: com.youbenzi.mdtool.markdown.bean.ValuePart[];
$r1 = r0[0];
r11 = virtualinvoke $r1.<com.youbenzi.mdtool.markdown.bean.ValuePart: java.lang.String getValue()>();
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"<pre>\");
r3 = $r2;
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<code>\");
r12 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"<\", \"&lt;\");
r13 = virtualinvoke r12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\">\", \"&gt;\");
$z0 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>(\"\n\");
if $z0 == 0 goto virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$i0 = virtualinvoke r13.<java.lang.String: int length()>();
$r9 = \"\n\";
$i1 = virtualinvoke $r9.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r10 := @this: com.youbenzi.mdtool.export.HTMLDecorator;
r0 := @parameter0: com.youbenzi.mdtool.markdown.bean.ValuePart[];
$r1 = r0[0];
r11 = virtualinvoke $r1.<com.youbenzi.mdtool.markdown.bean.ValuePart: java.lang.String getValue()>();
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(\"<pre>\");
r3 = $r2;
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<code>\");
r12 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"<\", \"&lt;\");
r13 = virtualinvoke r12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\">\", \"&gt;\");
$z0 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>(\"\n\");
if $z0 == 0 goto virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
"->"Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</code>\");
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</pre>\n\");
$r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
return $r8;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$i0 = virtualinvoke r13.<java.lang.String: int length()>();
$r9 = \"\n\";
$i1 = virtualinvoke $r9.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
"->"Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</code>\");
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"</pre>\n\");
$r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
return $r8;
";
}
