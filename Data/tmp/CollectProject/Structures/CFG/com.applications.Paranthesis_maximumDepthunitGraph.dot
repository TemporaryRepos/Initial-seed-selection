digraph "unitGraph" {
    "r2 := @this: com.applications.Paranthesis"
    "r0 := @parameter0: java.lang.String"
    "if r0 != null goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()"
    "return -1"
    "r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()"
    "i3 = 0"
    "i4 = 0"
    "i5 = 0"
    "$i0 = lengthof r1"
    "if i5 >= $i0 goto (branch)"
    "$c1 = r1[i5]"
    "if $c1 != 40 goto $c2 = r1[i5]"
    "i3 = i3 + 1"
    "if i3 <= i4 goto i5 = i5 + 1"
    "i4 = i3"
    "goto [?= i5 = i5 + 1]"
    "$c2 = r1[i5]"
    "if $c2 != 41 goto i5 = i5 + 1"
    "i3 = i3 + -1"
    "i5 = i5 + 1"
    "goto [?= $i0 = lengthof r1]"
    "if i3 == 0 goto return i4"
    "return i4"
    "r2 := @this: com.applications.Paranthesis"->"r0 := @parameter0: java.lang.String";
    "r0 := @parameter0: java.lang.String"->"if r0 != null goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()";
    "if r0 != null goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()"->"return -1";
    "if r0 != null goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()"->"r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()";
    "r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()"->"i3 = 0";
    "i3 = 0"->"i4 = 0";
    "i4 = 0"->"i5 = 0";
    "i5 = 0"->"$i0 = lengthof r1";
    "$i0 = lengthof r1"->"if i5 >= $i0 goto (branch)";
    "if i5 >= $i0 goto (branch)"->"$c1 = r1[i5]";
    "if i5 >= $i0 goto (branch)"->"if i3 == 0 goto return i4";
    "$c1 = r1[i5]"->"if $c1 != 40 goto $c2 = r1[i5]";
    "if $c1 != 40 goto $c2 = r1[i5]"->"i3 = i3 + 1";
    "if $c1 != 40 goto $c2 = r1[i5]"->"$c2 = r1[i5]";
    "i3 = i3 + 1"->"if i3 <= i4 goto i5 = i5 + 1";
    "if i3 <= i4 goto i5 = i5 + 1"->"i4 = i3";
    "if i3 <= i4 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "i4 = i3"->"goto [?= i5 = i5 + 1]";
    "goto [?= i5 = i5 + 1]"->"i5 = i5 + 1";
    "$c2 = r1[i5]"->"if $c2 != 41 goto i5 = i5 + 1";
    "if $c2 != 41 goto i5 = i5 + 1"->"i3 = i3 + -1";
    "if $c2 != 41 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "i3 = i3 + -1"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= $i0 = lengthof r1]";
    "goto [?= $i0 = lengthof r1]"->"$i0 = lengthof r1";
    "if i3 == 0 goto return i4"->"return -1";
    "if i3 == 0 goto return i4"->"return i4";
}
