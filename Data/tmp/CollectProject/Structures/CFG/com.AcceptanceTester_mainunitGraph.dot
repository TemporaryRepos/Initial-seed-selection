digraph "unitGraph" {
    "r20 := @parameter0: java.lang.String[]"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Unit testing elementary data structures!\")"
    "z1 = 0"
    "$z0 = <com.AcceptanceTester: boolean $assertionsDisabled>"
    "if $z0 != 0 goto (branch)"
    "$r14 = new java.lang.AssertionError"
    "specialinvoke $r14.<java.lang.AssertionError: void <init>()>()"
    "throw $r14"
    "goto [?= z2 = 0]"
    "$r19 := @caughtexception"
    "r21 = $r19"
    "z1 = 1"
    "z2 = 0"
    "if z1 != 0 goto i1 = 0"
    "$r13 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Please enable assertions, run with java -ea\")"
    "z2 = 1"
    "goto [?= (branch)]"
    "i1 = 0"
    "$r1 = <com.AcceptanceTester: com.Test[] tests>"
    "$i0 = lengthof $r1"
    "if i1 >= $i0 goto (branch)"
    "if z2 != 0 goto (branch)"
    "$r6 = <com.AcceptanceTester: com.Test[] tests>"
    "r7 = $r6[i1]"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running \")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "interfaceinvoke r7.<com.Test: void run()>()"
    "goto [?= i1 = i1 + 1]"
    "$r15 := @caughtexception"
    "r16 = $r15"
    "$r17 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"TEST FAILED\")"
    "$r18 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>(\"Printing stack trace...\")"
    "virtualinvoke r16.<java.lang.Throwable: void printStackTrace()>()"
    "i1 = i1 + 1"
    "goto [?= $r1 = <com.AcceptanceTester: com.Test[] tests>]"
    "if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED\")"
    "$r5 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Not accepted!\")"
    "goto [?= return]"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"ACCEPTED\")"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"You are awesome!\")"
    "return"
    "r20 := @parameter0: java.lang.String[]"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Unit testing elementary data structures!\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Unit testing elementary data structures!\")"->"z1 = 0";
    "z1 = 0"->"$z0 = <com.AcceptanceTester: boolean $assertionsDisabled>";
    "z1 = 0"->"$r19 := @caughtexception";
    "$z0 = <com.AcceptanceTester: boolean $assertionsDisabled>"->"if $z0 != 0 goto (branch)";
    "$z0 = <com.AcceptanceTester: boolean $assertionsDisabled>"->"$r19 := @caughtexception";
    "if $z0 != 0 goto (branch)"->"$r14 = new java.lang.AssertionError";
    "if $z0 != 0 goto (branch)"->"goto [?= z2 = 0]";
    "if $z0 != 0 goto (branch)"->"$r19 := @caughtexception";
    "$r14 = new java.lang.AssertionError"->"specialinvoke $r14.<java.lang.AssertionError: void <init>()>()";
    "$r14 = new java.lang.AssertionError"->"$r19 := @caughtexception";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>()>()"->"throw $r14";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>()>()"->"$r19 := @caughtexception";
    "throw $r14"->"$r19 := @caughtexception";
    "goto [?= z2 = 0]"->"z2 = 0";
    "$r19 := @caughtexception"->"r21 = $r19";
    "r21 = $r19"->"z1 = 1";
    "z1 = 1"->"z2 = 0";
    "z2 = 0"->"if z1 != 0 goto i1 = 0";
    "if z1 != 0 goto i1 = 0"->"$r13 = <java.lang.System: java.io.PrintStream out>";
    "if z1 != 0 goto i1 = 0"->"i1 = 0";
    "$r13 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Please enable assertions, run with java -ea\")";
    "virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(\"Please enable assertions, run with java -ea\")"->"z2 = 1";
    "z2 = 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>";
    "i1 = 0"->"$r1 = <com.AcceptanceTester: com.Test[] tests>";
    "$r1 = <com.AcceptanceTester: com.Test[] tests>"->"$i0 = lengthof $r1";
    "$i0 = lengthof $r1"->"if i1 >= $i0 goto (branch)";
    "if i1 >= $i0 goto (branch)"->"if z2 != 0 goto (branch)";
    "if i1 >= $i0 goto (branch)"->"if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>";
    "if z2 != 0 goto (branch)"->"$r6 = <com.AcceptanceTester: com.Test[] tests>";
    "if z2 != 0 goto (branch)"->"if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <com.AcceptanceTester: com.Test[] tests>"->"r7 = $r6[i1]";
    "r7 = $r6[i1]"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running \")";
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running \")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"interfaceinvoke r7.<com.Test: void run()>()";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"$r15 := @caughtexception";
    "interfaceinvoke r7.<com.Test: void run()>()"->"goto [?= i1 = i1 + 1]";
    "interfaceinvoke r7.<com.Test: void run()>()"->"$r15 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r15 := @caughtexception"->"r16 = $r15";
    "r16 = $r15"->"$r17 = <java.lang.System: java.io.PrintStream out>";
    "$r17 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"TEST FAILED\")";
    "virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>(\"TEST FAILED\")"->"$r18 = <java.lang.System: java.io.PrintStream out>";
    "$r18 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>(\"Printing stack trace...\")";
    "virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>(\"Printing stack trace...\")"->"virtualinvoke r16.<java.lang.Throwable: void printStackTrace()>()";
    "virtualinvoke r16.<java.lang.Throwable: void printStackTrace()>()"->"z2 = 1";
    "z2 = 1"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= $r1 = <com.AcceptanceTester: com.Test[] tests>]";
    "goto [?= $r1 = <com.AcceptanceTester: com.Test[] tests>]"->"$r1 = <com.AcceptanceTester: com.Test[] tests>";
    "if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "if z2 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED\")";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(\"FAILED\")"->"$r5 = <java.lang.System: java.io.PrintStream out>";
    "$r5 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Not accepted!\")";
    "virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(\"Not accepted!\")"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"ACCEPTED\")";
    "virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(\"ACCEPTED\")"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"You are awesome!\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"You are awesome!\")"->"return";
}
