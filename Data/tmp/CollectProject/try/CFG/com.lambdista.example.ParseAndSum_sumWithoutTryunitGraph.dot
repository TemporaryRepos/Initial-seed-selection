digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "i2 = 0"
    "r1 = r0"
    "i0 = lengthof r1"
    "i3 = 0"
    "if i3 >= i0 goto return i2"
    "r2 = r1[i3]"
    "$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2)"
    "i4 = staticinvoke <java.lang.Math: int abs(int)>($i1)"
    "i2 = i2 + i4"
    "goto [?= i3 = i3 + 1]"
    "$r3 := @caughtexception"
    "r4 = $r3"
    "return -1"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "return i2"
    "r0 := @parameter0: java.lang.String[]"->"i2 = 0";
    "i2 = 0"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i3 = 0";
    "i3 = 0"->"if i3 >= i0 goto return i2";
    "if i3 >= i0 goto return i2"->"r2 = r1[i3]";
    "if i3 >= i0 goto return i2"->"return i2";
    "r2 = r1[i3]"->"$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2)";
    "r2 = r1[i3]"->"$r3 := @caughtexception";
    "$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2)"->"i4 = staticinvoke <java.lang.Math: int abs(int)>($i1)";
    "$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2)"->"$r3 := @caughtexception";
    "i4 = staticinvoke <java.lang.Math: int abs(int)>($i1)"->"i2 = i2 + i4";
    "i4 = staticinvoke <java.lang.Math: int abs(int)>($i1)"->"$r3 := @caughtexception";
    "i2 = i2 + i4"->"goto [?= i3 = i3 + 1]";
    "i2 = i2 + i4"->"$r3 := @caughtexception";
    "goto [?= i3 = i3 + 1]"->"i3 = i3 + 1";
    "$r3 := @caughtexception"->"r4 = $r3";
    "r4 = $r3"->"return -1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto return i2";
}
