digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String[];
i2 = 0;
r1 = r0;
i0 = lengthof r1;
i3 = 0;
"
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i3 >= i0 goto return i2;
"
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
r2 = r1[i3];
"
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
"
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
i4 = staticinvoke <java.lang.Math: int abs(int)>($i1);
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
i2 = i2 + i4;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
goto [?= i3 = i3 + 1];
"
    "Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
return -1;
"
    "Block 8:
[preds: 6 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 1 ] [succs: ]
return i2;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String[];
i2 = 0;
r1 = r0;
i0 = lengthof r1;
i3 = 0;
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i3 >= i0 goto return i2;
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i3 >= i0 goto return i2;
"->"Block 2:
[preds: 1 ] [succs: 3 7 ]
r2 = r1[i3];
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i3 >= i0 goto return i2;
"->"Block 9:
[preds: 1 ] [succs: ]
return i2;
";
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
r2 = r1[i3];
"->"Block 3:
[preds: 2 ] [succs: 4 7 ]
$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
";
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
r2 = r1[i3];
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
return -1;
";
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
"->"Block 4:
[preds: 3 ] [succs: 5 7 ]
i4 = staticinvoke <java.lang.Math: int abs(int)>($i1);
";
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
return -1;
";
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
i4 = staticinvoke <java.lang.Math: int abs(int)>($i1);
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
i2 = i2 + i4;
";
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
i4 = staticinvoke <java.lang.Math: int abs(int)>($i1);
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
return -1;
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
i2 = i2 + i4;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
goto [?= i3 = i3 + 1];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
i2 = i2 + i4;
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r3 := @caughtexception;
r4 = $r3;
return -1;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
goto [?= i3 = i3 + 1];
"->"Block 8:
[preds: 6 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 6 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i3 >= i0 goto return i2;
";
}
