digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 := @parameter0: java.lang.String[];
$r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);
$r2 = staticinvoke <com.lambdista.example.ParseAndSum$lambda_sumWithTry_1__310: java.util.function.Function bootstrap$()>();
$r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);
$r4 = staticinvoke <com.lambdista.example.ParseAndSum$lambda_sumWithTry_2__311: com.lambdista.util.FailableSupplier bootstrap$()>();
$r5 = staticinvoke <com.lambdista.util.Try: com.lambdista.util.Try apply(com.lambdista.util.FailableSupplier)>($r4);
$r6 = staticinvoke <com.lambdista.example.ParseAndSum$sum__312: java.util.function.BinaryOperator bootstrap$()>();
$r7 = staticinvoke <com.lambdista.util.TryBinaryOperator: com.lambdista.util.TryBinaryOperator of(java.util.function.BinaryOperator)>($r6);
$r8 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>($r5, $r7);
$r9 = (com.lambdista.util.Try) $r8;
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);
$r11 = virtualinvoke $r9.<com.lambdista.util.Try: java.lang.Object getOrElse(java.lang.Object)>($r10);
$r12 = (java.lang.Integer) $r11;
$i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();
return $i0;
"
}
