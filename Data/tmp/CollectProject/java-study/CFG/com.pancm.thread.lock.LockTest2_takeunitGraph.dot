digraph "unitGraph" {
    "r0 := @this: com.pancm.thread.lock.LockTest2"
    "$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"
    "$i0 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "if $i0 != 0 goto $r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"
    "goto [?= $i0 = r0.<com.pancm.thread.lock.LockTest2: int count>]"
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"
    "r3 = $r2[$i1]"
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"
    "$i3 = $i2 + 1"
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = $i3"
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$i4 = lengthof $r4"
    "if $i3 != $i4 goto $i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = 0"
    "$i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "$i6 = $i5 - 1"
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i6"
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"
    "interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>()"
    "r6 = r3"
    "$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()"
    "return r6"
    "$r10 := @caughtexception"
    "r11 = $r10"
    "$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()"
    "throw r11"
    "r0 := @this: com.pancm.thread.lock.LockTest2"->"$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()";
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"->"$i0 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"->"$r10 := @caughtexception";
    "$i0 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"if $i0 != 0 goto $r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "$i0 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "if $i0 != 0 goto $r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>";
    "if $i0 != 0 goto $r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "if $i0 != 0 goto $r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"->"interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()";
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"->"$r10 := @caughtexception";
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"->"goto [?= $i0 = r0.<com.pancm.thread.lock.LockTest2: int count>]";
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"->"$r10 := @caughtexception";
    "goto [?= $i0 = r0.<com.pancm.thread.lock.LockTest2: int count>]"->"$i0 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "goto [?= $i0 = r0.<com.pancm.thread.lock.LockTest2: int count>]"->"$r10 := @caughtexception";
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$i1 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>";
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"->"r3 = $r2[$i1]";
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"->"$r10 := @caughtexception";
    "r3 = $r2[$i1]"->"$i2 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>";
    "r3 = $r2[$i1]"->"$r10 := @caughtexception";
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"->"$i3 = $i2 + 1";
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int takeptr>"->"$r10 := @caughtexception";
    "$i3 = $i2 + 1"->"r0.<com.pancm.thread.lock.LockTest2: int takeptr> = $i3";
    "$i3 = $i2 + 1"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = $i3"->"$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = $i3"->"$r10 := @caughtexception";
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$i4 = lengthof $r4";
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$i4 = lengthof $r4"->"if $i3 != $i4 goto $i5 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "$i4 = lengthof $r4"->"$r10 := @caughtexception";
    "if $i3 != $i4 goto $i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"r0.<com.pancm.thread.lock.LockTest2: int takeptr> = 0";
    "if $i3 != $i4 goto $i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$i5 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "if $i3 != $i4 goto $i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = 0"->"$i5 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "r0.<com.pancm.thread.lock.LockTest2: int takeptr> = 0"->"$r10 := @caughtexception";
    "$i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$i6 = $i5 - 1";
    "$i5 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "$i6 = $i5 - 1"->"r0.<com.pancm.thread.lock.LockTest2: int count> = $i6";
    "$i6 = $i5 - 1"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i6"->"$r5 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>";
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i6"->"$r10 := @caughtexception";
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"->"interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>()";
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"->"$r10 := @caughtexception";
    "interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>()"->"r6 = r3";
    "interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>()"->"$r10 := @caughtexception";
    "r6 = r3"->"$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "r6 = r3"->"$r10 := @caughtexception";
    "$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()";
    "interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()"->"return r6";
    "$r10 := @caughtexception"->"r11 = $r10";
    "r11 = $r10"->"$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()";
    "interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()"->"throw r11";
}
