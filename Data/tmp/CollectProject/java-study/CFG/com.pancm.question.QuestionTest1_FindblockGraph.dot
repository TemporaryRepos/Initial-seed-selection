digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
i3 := @parameter0: int;
r0 := @parameter1: int[][];
r1 = r0;
i0 = lengthof r1;
i4 = 0;
"
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i4 >= i0 goto return 0;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i4];
r3 = r2;
i1 = lengthof r3;
i5 = 0;
"
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i5 >= i1 goto i4 = i4 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i2 = r3[i5];
if i2 != i3 goto i5 = i5 + 1;
"
    "Block 5:
[preds: 4 ] [succs: ]
return 1;
"
    "Block 6:
[preds: 4 ] [succs: 3 ]
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 7:
[preds: 3 ] [succs: 1 ]
i4 = i4 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 1 ] [succs: ]
return 0;
"
    "Block 0:
[preds: ] [succs: 1 ]
i3 := @parameter0: int;
r0 := @parameter1: int[][];
r1 = r0;
i0 = lengthof r1;
i4 = 0;
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i4 >= i0 goto return 0;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i4 >= i0 goto return 0;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i4];
r3 = r2;
i1 = lengthof r3;
i5 = 0;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i4 >= i0 goto return 0;
"->"Block 8:
[preds: 1 ] [succs: ]
return 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i4];
r3 = r2;
i1 = lengthof r3;
i5 = 0;
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i5 >= i1 goto i4 = i4 + 1;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i5 >= i1 goto i4 = i4 + 1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
i2 = r3[i5];
if i2 != i3 goto i5 = i5 + 1;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i5 >= i1 goto i4 = i4 + 1;
"->"Block 7:
[preds: 3 ] [succs: 1 ]
i4 = i4 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i2 = r3[i5];
if i2 != i3 goto i5 = i5 + 1;
"->"Block 5:
[preds: 4 ] [succs: ]
return 1;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
i2 = r3[i5];
if i2 != i3 goto i5 = i5 + 1;
"->"Block 6:
[preds: 4 ] [succs: 3 ]
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 3 ]
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
if i5 >= i1 goto i4 = i4 + 1;
";
    "Block 7:
[preds: 3 ] [succs: 1 ]
i4 = i4 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i4 >= i0 goto return 0;
";
}
