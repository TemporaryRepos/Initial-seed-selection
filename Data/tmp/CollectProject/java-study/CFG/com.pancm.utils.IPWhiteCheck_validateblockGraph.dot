digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"-\");
i0 = lengthof r1;
i1 = 0;
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i1 >= i0 goto return 1;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i1];
$r3 = <com.pancm.utils.IPWhiteCheck: java.util.regex.Pattern pattern>;
$r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
if $z0 != 0 goto i1 = i1 + 1;
"
    "Block 3:
[preds: 2 ] [succs: ]
return 0;
"
    "Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 1 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"-\");
i0 = lengthof r1;
i1 = 0;
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i1 >= i0 goto return 1;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i1 >= i0 goto return 1;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i1];
$r3 = <com.pancm.utils.IPWhiteCheck: java.util.regex.Pattern pattern>;
$r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
if $z0 != 0 goto i1 = i1 + 1;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i1 >= i0 goto return 1;
"->"Block 5:
[preds: 1 ] [succs: ]
return 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i1];
$r3 = <com.pancm.utils.IPWhiteCheck: java.util.regex.Pattern pattern>;
$r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 3:
[preds: 2 ] [succs: ]
return 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
r2 = r1[i1];
$r3 = <com.pancm.utils.IPWhiteCheck: java.util.regex.Pattern pattern>;
$r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 2 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i1 >= i0 goto return 1;
";
}
