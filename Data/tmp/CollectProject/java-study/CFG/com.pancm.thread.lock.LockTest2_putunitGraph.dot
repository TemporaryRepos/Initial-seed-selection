digraph "unitGraph" {
    "r0 := @this: com.pancm.thread.lock.LockTest2"
    "r3 := @parameter0: java.lang.Object"
    "$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$i0 = lengthof $r2"
    "if $i1 != $i0 goto $r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"
    "goto [?= $i1 = r0.<com.pancm.thread.lock.LockTest2: int count>]"
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"
    "$r4[$i2] = r3"
    "$i3 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"
    "$i4 = $i3 + 1"
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = $i4"
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"
    "$i5 = lengthof $r5"
    "if $i4 != $i5 goto $i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = 0"
    "$i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"
    "$i7 = $i6 + 1"
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i7"
    "$r6 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"
    "interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>()"
    "$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()"
    "goto [?= return]"
    "$r10 := @caughtexception"
    "r11 = $r10"
    "$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"
    "interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()"
    "throw r11"
    "return"
    "r0 := @this: com.pancm.thread.lock.LockTest2"->"r3 := @parameter0: java.lang.Object";
    "r3 := @parameter0: java.lang.Object"->"$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "$r1 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()";
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"->"$i1 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>()"->"$r10 := @caughtexception";
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "$i1 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$i0 = lengthof $r2";
    "$r2 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$i0 = lengthof $r2"->"if $i1 != $i0 goto $r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "$i0 = lengthof $r2"->"$r10 := @caughtexception";
    "if $i1 != $i0 goto $r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>";
    "if $i1 != $i0 goto $r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "if $i1 != $i0 goto $r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"->"interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()";
    "$r9 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notfull>"->"$r10 := @caughtexception";
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"->"goto [?= $i1 = r0.<com.pancm.thread.lock.LockTest2: int count>]";
    "interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void await()>()"->"$r10 := @caughtexception";
    "goto [?= $i1 = r0.<com.pancm.thread.lock.LockTest2: int count>]"->"$i1 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "goto [?= $i1 = r0.<com.pancm.thread.lock.LockTest2: int count>]"->"$r10 := @caughtexception";
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$i2 = r0.<com.pancm.thread.lock.LockTest2: int putptr>";
    "$r4 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"->"$r4[$i2] = r3";
    "$i2 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"->"$r10 := @caughtexception";
    "$r4[$i2] = r3"->"$i3 = r0.<com.pancm.thread.lock.LockTest2: int putptr>";
    "$r4[$i2] = r3"->"$r10 := @caughtexception";
    "$i3 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"->"$i4 = $i3 + 1";
    "$i3 = r0.<com.pancm.thread.lock.LockTest2: int putptr>"->"$r10 := @caughtexception";
    "$i4 = $i3 + 1"->"r0.<com.pancm.thread.lock.LockTest2: int putptr> = $i4";
    "$i4 = $i3 + 1"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = $i4"->"$r5 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>";
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = $i4"->"$r10 := @caughtexception";
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$i5 = lengthof $r5";
    "$r5 = r0.<com.pancm.thread.lock.LockTest2: java.lang.Object[] items>"->"$r10 := @caughtexception";
    "$i5 = lengthof $r5"->"if $i4 != $i5 goto $i6 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "$i5 = lengthof $r5"->"$r10 := @caughtexception";
    "if $i4 != $i5 goto $i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"r0.<com.pancm.thread.lock.LockTest2: int putptr> = 0";
    "if $i4 != $i5 goto $i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$i6 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "if $i4 != $i5 goto $i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = 0"->"$i6 = r0.<com.pancm.thread.lock.LockTest2: int count>";
    "r0.<com.pancm.thread.lock.LockTest2: int putptr> = 0"->"$r10 := @caughtexception";
    "$i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$i7 = $i6 + 1";
    "$i6 = r0.<com.pancm.thread.lock.LockTest2: int count>"->"$r10 := @caughtexception";
    "$i7 = $i6 + 1"->"r0.<com.pancm.thread.lock.LockTest2: int count> = $i7";
    "$i7 = $i6 + 1"->"$r10 := @caughtexception";
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i7"->"$r6 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>";
    "r0.<com.pancm.thread.lock.LockTest2: int count> = $i7"->"$r10 := @caughtexception";
    "$r6 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"->"interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>()";
    "$r6 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Condition notempty>"->"$r10 := @caughtexception";
    "interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>()"->"$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>()"->"$r10 := @caughtexception";
    "$r7 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()";
    "interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r10 := @caughtexception"->"r11 = $r10";
    "r11 = $r10"->"$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>";
    "$r12 = r0.<com.pancm.thread.lock.LockTest2: java.util.concurrent.locks.Lock lock>"->"interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()";
    "interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>()"->"throw r11";
}
