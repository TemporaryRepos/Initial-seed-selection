digraph "unitGraph" {
    "r0 := @parameter0: java.util.List"
    "i1 := @parameter1: int"
    "i2 := @parameter2: int"
    "i3 = 0"
    "i0 = interfaceinvoke r0.<java.util.List: int size()>()"
    "if i3 >= i0 goto return r0"
    "if i3 < i1 goto i3 = i3 + 1"
    "if i3 >= i2 goto i3 = i3 + 1"
    "interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i3)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "return r0"
    "r0 := @parameter0: java.util.List"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"i2 := @parameter2: int";
    "i2 := @parameter2: int"->"i3 = 0";
    "i3 = 0"->"i0 = interfaceinvoke r0.<java.util.List: int size()>()";
    "i0 = interfaceinvoke r0.<java.util.List: int size()>()"->"if i3 >= i0 goto return r0";
    "if i3 >= i0 goto return r0"->"if i3 < i1 goto i3 = i3 + 1";
    "if i3 >= i0 goto return r0"->"return r0";
    "if i3 < i1 goto i3 = i3 + 1"->"if i3 >= i2 goto i3 = i3 + 1";
    "if i3 < i1 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "if i3 >= i2 goto i3 = i3 + 1"->"interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i3)";
    "if i3 >= i2 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i3)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i0 goto return r0";
}
