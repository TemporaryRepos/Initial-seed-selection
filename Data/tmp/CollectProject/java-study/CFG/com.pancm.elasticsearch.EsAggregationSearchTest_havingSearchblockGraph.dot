digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 = \"\";
$r1 = new org.elasticsearch.action.search.SearchRequest;
$r2 = newarray (java.lang.String)[1];
$r2[0] = r0;
specialinvoke $r1.<org.elasticsearch.action.search.SearchRequest: void <init>(java.lang.String[])>($r2);
r3 = $r1;
$r4 = newarray (java.lang.String)[1];
$r4[0] = r0;
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest indices(java.lang.String[])>($r4);
$r6 = new org.elasticsearch.search.builder.SearchSourceBuilder;
specialinvoke $r6.<org.elasticsearch.search.builder.SearchSourceBuilder: void <init>()>();
r7 = $r6;
$r8 = new org.elasticsearch.index.query.BoolQueryBuilder;
specialinvoke $r8.<org.elasticsearch.index.query.BoolQueryBuilder: void <init>()>();
r9 = $r8;
$r10 = staticinvoke <org.elasticsearch.action.support.IndicesOptions: org.elasticsearch.action.support.IndicesOptions lenientExpandOpen()>();
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest indicesOptions(org.elasticsearch.action.support.IndicesOptions)>($r10);
r12 = \"nas_ip_address_group\";
r13 = \"nas_ip_address\";
r14 = \"acct_start_time\";
r15 = \"gte,lte\";
r16 = \"2020-08-05 13:25:55,2020-08-20 13:26:55\";
r17 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(\",\");
r18 = virtualinvoke r16.<java.lang.String: java.lang.String[] split(java.lang.String)>(\",\");
i3 = 0;
"
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i0 = lengthof r17;
if i3 >= $i0 goto $r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r50 = \"gte\";
$r49 = r17[i3];
$z0 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);
if $z0 == 0 goto $r52 = \"lte\";
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r57 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r58 = r18[i3];
$r59 = virtualinvoke $r57.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder gte(java.lang.Object)>($r58);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r59);
"
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$r52 = \"lte\";
$r51 = r17[i3];
$z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51);
if $z1 == 0 goto i3 = i3 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r53 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r54 = r18[i3];
$r55 = virtualinvoke $r53.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder lte(java.lang.Object)>($r54);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r55);
"
    "Block 6:
[preds: 4 5 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= $i0 = lengthof r17];
"
    "Block 7:
[preds: 1 ] [succs: ]
$r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
$r20 = virtualinvoke $r19.<org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder: org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder field(java.lang.String)>(r13);
$r21 = (org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder) $r20;
r61 = virtualinvoke $r21.<org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder size(int)>(2147483647);
$r22 = new java.util.HashMap;
specialinvoke $r22.<java.util.HashMap: void <init>(int)>(8);
r23 = $r22;
interfaceinvoke r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"groupCount\", \"_count\");
$r25 = new org.elasticsearch.script.Script;
specialinvoke $r25.<org.elasticsearch.script.Script: void <init>(java.lang.String)>(\"params.groupCount >= 1000\");
r26 = $r25;
r27 = staticinvoke <org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders: org.elasticsearch.search.aggregations.pipeline.bucketselector.BucketSelectorPipelineAggregationBuilder bucketSelector(java.lang.String,java.util.Map,org.elasticsearch.script.Script)>(\"having\", r23, r26);
virtualinvoke r61.<org.elasticsearch.search.aggregations.AggregationBuilder: org.elasticsearch.search.aggregations.AggregationBuilder subAggregation(org.elasticsearch.search.aggregations.PipelineAggregationBuilder)>(r27);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder aggregation(org.elasticsearch.search.aggregations.AggregationBuilder)>(r61);
$r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder explain(java.lang.Boolean)>($r30);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder fetchSource(boolean)>(0);
$r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder version(java.lang.Boolean)>($r33);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder query(org.elasticsearch.index.query.QueryBuilder)>(r9);
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest source(org.elasticsearch.search.builder.SearchSourceBuilder)>(r7);
$r37 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.Object)>(r7);
$r39 = <com.pancm.elasticsearch.EsAggregationSearchTest: org.elasticsearch.client.RestHighLevelClient client>;
$r38 = <org.elasticsearch.client.RequestOptions: org.elasticsearch.client.RequestOptions DEFAULT>;
r40 = virtualinvoke $r39.<org.elasticsearch.client.RestHighLevelClient: org.elasticsearch.action.search.SearchResponse search(org.elasticsearch.action.search.SearchRequest,org.elasticsearch.client.RequestOptions)>(r3, $r38);
$r41 = virtualinvoke r40.<org.elasticsearch.action.search.SearchResponse: org.elasticsearch.search.SearchHits getHits()>();
$r42 = virtualinvoke $r41.<org.elasticsearch.search.SearchHits: org.elasticsearch.search.SearchHit[] getHits()>();
$i1 = lengthof $r42;
l2 = (long) $i1;
r43 = virtualinvoke r40.<org.elasticsearch.action.search.SearchResponse: org.elasticsearch.search.aggregations.Aggregations getAggregations()>();
$r44 = new java.util.HashMap;
specialinvoke $r44.<java.util.HashMap: void <init>()>();
r45 = $r44;
$r46 = new java.util.ArrayList;
specialinvoke $r46.<java.util.ArrayList: void <init>()>();
r47 = $r46;
staticinvoke <com.pancm.elasticsearch.EsAggregationSearchTest: void agg(java.util.List,org.elasticsearch.search.aggregations.Aggregations)>(r47, r43);
$r48 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.Object)>(r47);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 = \"\";
$r1 = new org.elasticsearch.action.search.SearchRequest;
$r2 = newarray (java.lang.String)[1];
$r2[0] = r0;
specialinvoke $r1.<org.elasticsearch.action.search.SearchRequest: void <init>(java.lang.String[])>($r2);
r3 = $r1;
$r4 = newarray (java.lang.String)[1];
$r4[0] = r0;
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest indices(java.lang.String[])>($r4);
$r6 = new org.elasticsearch.search.builder.SearchSourceBuilder;
specialinvoke $r6.<org.elasticsearch.search.builder.SearchSourceBuilder: void <init>()>();
r7 = $r6;
$r8 = new org.elasticsearch.index.query.BoolQueryBuilder;
specialinvoke $r8.<org.elasticsearch.index.query.BoolQueryBuilder: void <init>()>();
r9 = $r8;
$r10 = staticinvoke <org.elasticsearch.action.support.IndicesOptions: org.elasticsearch.action.support.IndicesOptions lenientExpandOpen()>();
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest indicesOptions(org.elasticsearch.action.support.IndicesOptions)>($r10);
r12 = \"nas_ip_address_group\";
r13 = \"nas_ip_address\";
r14 = \"acct_start_time\";
r15 = \"gte,lte\";
r16 = \"2020-08-05 13:25:55,2020-08-20 13:26:55\";
r17 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(\",\");
r18 = virtualinvoke r16.<java.lang.String: java.lang.String[] split(java.lang.String)>(\",\");
i3 = 0;
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i0 = lengthof r17;
if i3 >= $i0 goto $r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i0 = lengthof r17;
if i3 >= $i0 goto $r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r50 = \"gte\";
$r49 = r17[i3];
$z0 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);
if $z0 == 0 goto $r52 = \"lte\";
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i0 = lengthof r17;
if i3 >= $i0 goto $r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
"->"Block 7:
[preds: 1 ] [succs: ]
$r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
$r20 = virtualinvoke $r19.<org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder: org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder field(java.lang.String)>(r13);
$r21 = (org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder) $r20;
r61 = virtualinvoke $r21.<org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder size(int)>(2147483647);
$r22 = new java.util.HashMap;
specialinvoke $r22.<java.util.HashMap: void <init>(int)>(8);
r23 = $r22;
interfaceinvoke r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(\"groupCount\", \"_count\");
$r25 = new org.elasticsearch.script.Script;
specialinvoke $r25.<org.elasticsearch.script.Script: void <init>(java.lang.String)>(\"params.groupCount >= 1000\");
r26 = $r25;
r27 = staticinvoke <org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders: org.elasticsearch.search.aggregations.pipeline.bucketselector.BucketSelectorPipelineAggregationBuilder bucketSelector(java.lang.String,java.util.Map,org.elasticsearch.script.Script)>(\"having\", r23, r26);
virtualinvoke r61.<org.elasticsearch.search.aggregations.AggregationBuilder: org.elasticsearch.search.aggregations.AggregationBuilder subAggregation(org.elasticsearch.search.aggregations.PipelineAggregationBuilder)>(r27);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder aggregation(org.elasticsearch.search.aggregations.AggregationBuilder)>(r61);
$r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder explain(java.lang.Boolean)>($r30);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder fetchSource(boolean)>(0);
$r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder version(java.lang.Boolean)>($r33);
virtualinvoke r7.<org.elasticsearch.search.builder.SearchSourceBuilder: org.elasticsearch.search.builder.SearchSourceBuilder query(org.elasticsearch.index.query.QueryBuilder)>(r9);
virtualinvoke r3.<org.elasticsearch.action.search.SearchRequest: org.elasticsearch.action.search.SearchRequest source(org.elasticsearch.search.builder.SearchSourceBuilder)>(r7);
$r37 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.Object)>(r7);
$r39 = <com.pancm.elasticsearch.EsAggregationSearchTest: org.elasticsearch.client.RestHighLevelClient client>;
$r38 = <org.elasticsearch.client.RequestOptions: org.elasticsearch.client.RequestOptions DEFAULT>;
r40 = virtualinvoke $r39.<org.elasticsearch.client.RestHighLevelClient: org.elasticsearch.action.search.SearchResponse search(org.elasticsearch.action.search.SearchRequest,org.elasticsearch.client.RequestOptions)>(r3, $r38);
$r41 = virtualinvoke r40.<org.elasticsearch.action.search.SearchResponse: org.elasticsearch.search.SearchHits getHits()>();
$r42 = virtualinvoke $r41.<org.elasticsearch.search.SearchHits: org.elasticsearch.search.SearchHit[] getHits()>();
$i1 = lengthof $r42;
l2 = (long) $i1;
r43 = virtualinvoke r40.<org.elasticsearch.action.search.SearchResponse: org.elasticsearch.search.aggregations.Aggregations getAggregations()>();
$r44 = new java.util.HashMap;
specialinvoke $r44.<java.util.HashMap: void <init>()>();
r45 = $r44;
$r46 = new java.util.ArrayList;
specialinvoke $r46.<java.util.ArrayList: void <init>()>();
r47 = $r46;
staticinvoke <com.pancm.elasticsearch.EsAggregationSearchTest: void agg(java.util.List,org.elasticsearch.search.aggregations.Aggregations)>(r47, r43);
$r48 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.Object)>(r47);
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r50 = \"gte\";
$r49 = r17[i3];
$z0 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);
if $z0 == 0 goto $r52 = \"lte\";
"->"Block 3:
[preds: 2 ] [succs: 4 ]
$r57 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r58 = r18[i3];
$r59 = virtualinvoke $r57.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder gte(java.lang.Object)>($r58);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r59);
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r50 = \"gte\";
$r49 = r17[i3];
$z0 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);
if $z0 == 0 goto $r52 = \"lte\";
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$r52 = \"lte\";
$r51 = r17[i3];
$z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51);
if $z1 == 0 goto i3 = i3 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
$r57 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r58 = r18[i3];
$r59 = virtualinvoke $r57.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder gte(java.lang.Object)>($r58);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r59);
"->"Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$r52 = \"lte\";
$r51 = r17[i3];
$z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51);
if $z1 == 0 goto i3 = i3 + 1;
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$r52 = \"lte\";
$r51 = r17[i3];
$z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51);
if $z1 == 0 goto i3 = i3 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r53 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r54 = r18[i3];
$r55 = virtualinvoke $r53.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder lte(java.lang.Object)>($r54);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r55);
";
    "Block 4:
[preds: 2 3 ] [succs: 5 6 ]
$r52 = \"lte\";
$r51 = r17[i3];
$z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r51);
if $z1 == 0 goto i3 = i3 + 1;
"->"Block 6:
[preds: 4 5 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= $i0 = lengthof r17];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r53 = staticinvoke <org.elasticsearch.index.query.QueryBuilders: org.elasticsearch.index.query.RangeQueryBuilder rangeQuery(java.lang.String)>(r14);
$r54 = r18[i3];
$r55 = virtualinvoke $r53.<org.elasticsearch.index.query.RangeQueryBuilder: org.elasticsearch.index.query.RangeQueryBuilder lte(java.lang.Object)>($r54);
virtualinvoke r9.<org.elasticsearch.index.query.BoolQueryBuilder: org.elasticsearch.index.query.BoolQueryBuilder must(org.elasticsearch.index.query.QueryBuilder)>($r55);
"->"Block 6:
[preds: 4 5 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= $i0 = lengthof r17];
";
    "Block 6:
[preds: 4 5 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= $i0 = lengthof r17];
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i0 = lengthof r17;
if i3 >= $i0 goto $r19 = staticinvoke <org.elasticsearch.search.aggregations.AggregationBuilders: org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder terms(java.lang.String)>(r12);
";
}
