digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: byte[];
$r0 = newarray (byte)[24];
$r0[0] = 36;
$r0[1] = 80;
$r0[2] = 114;
$r0[3] = 105;
$r0[4] = 109;
$r0[5] = 101;
$r0[6] = 116;
$r0[7] = 111;
$r0[8] = 110;
$r0[9] = 45;
$r0[10] = 69;
$r0[11] = 79;
$r0[12] = 83;
$r0[13] = 32;
$r0[14] = 87;
$r0[15] = 105;
$r0[16] = 108;
$r0[17] = 108;
$r0[18] = 95;
$r0[19] = 87;
$r0[20] = 105;
$r0[21] = 110;
$r0[22] = 33;
$r0[23] = 36;
r1 = $r0;
i6 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i0 = lengthof r2;
if i6 >= $i0 goto return r1;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
i7 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r1;
if i7 >= $i1 goto i6 = i6 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
$b3 = r1[i7];
$b2 = r2[i6];
$i4 = $b3 ^ $b2;
$b5 = (byte) $i4;
r1[i7] = $b5;
i7 = i7 + 1;
goto [?= $i1 = lengthof r1];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= $i0 = lengthof r2];
"
    "Block 6:
[preds: 1 ] [succs: ]
return r1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: byte[];
$r0 = newarray (byte)[24];
$r0[0] = 36;
$r0[1] = 80;
$r0[2] = 114;
$r0[3] = 105;
$r0[4] = 109;
$r0[5] = 101;
$r0[6] = 116;
$r0[7] = 111;
$r0[8] = 110;
$r0[9] = 45;
$r0[10] = 69;
$r0[11] = 79;
$r0[12] = 83;
$r0[13] = 32;
$r0[14] = 87;
$r0[15] = 105;
$r0[16] = 108;
$r0[17] = 108;
$r0[18] = 95;
$r0[19] = 87;
$r0[20] = 105;
$r0[21] = 110;
$r0[22] = 33;
$r0[23] = 36;
r1 = $r0;
i6 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i0 = lengthof r2;
if i6 >= $i0 goto return r1;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i0 = lengthof r2;
if i6 >= $i0 goto return r1;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
i7 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i0 = lengthof r2;
if i6 >= $i0 goto return r1;
"->"Block 6:
[preds: 1 ] [succs: ]
return r1;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
i7 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r1;
if i7 >= $i1 goto i6 = i6 + 1;
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r1;
if i7 >= $i1 goto i6 = i6 + 1;
"->"Block 4:
[preds: 3 ] [succs: 3 ]
$b3 = r1[i7];
$b2 = r2[i6];
$i4 = $b3 ^ $b2;
$b5 = (byte) $i4;
r1[i7] = $b5;
i7 = i7 + 1;
goto [?= $i1 = lengthof r1];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r1;
if i7 >= $i1 goto i6 = i6 + 1;
"->"Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= $i0 = lengthof r2];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
$b3 = r1[i7];
$b2 = r2[i6];
$i4 = $b3 ^ $b2;
$b5 = (byte) $i4;
r1[i7] = $b5;
i7 = i7 + 1;
goto [?= $i1 = lengthof r1];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r1;
if i7 >= $i1 goto i6 = i6 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= $i0 = lengthof r2];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
$i0 = lengthof r2;
if i6 >= $i0 goto return r1;
";
}
