digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String"
    "r5 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: java.lang.String assertAlgorithm(java.lang.String)>(r4)"
    "r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r5)"
    "$i0 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: int getKeySize(java.lang.String)>(r5)"
    "$r1 = new java.security.SecureRandom"
    "specialinvoke $r1.<java.security.SecureRandom: void <init>()>()"
    "virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>($i0, $r1)"
    "r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"
    "$r3 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()"
    "return $r3"
    "r4 := @parameter0: java.lang.String"->"r5 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: java.lang.String assertAlgorithm(java.lang.String)>(r4)";
    "r5 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: java.lang.String assertAlgorithm(java.lang.String)>(r4)"->"r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r5)";
    "r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r5)"->"$i0 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: int getKeySize(java.lang.String)>(r5)";
    "$i0 = staticinvoke <com.scoder.jusic.util.CryptoUtil2: int getKeySize(java.lang.String)>(r5)"->"$r1 = new java.security.SecureRandom";
    "$r1 = new java.security.SecureRandom"->"specialinvoke $r1.<java.security.SecureRandom: void <init>()>()";
    "specialinvoke $r1.<java.security.SecureRandom: void <init>()>()"->"virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>($i0, $r1)";
    "virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>($i0, $r1)"->"r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()";
    "r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()"->"$r3 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()";
    "$r3 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>()"->"return $r3";
}
