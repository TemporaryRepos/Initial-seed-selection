digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 6 ]
r1 := @this: dict.build.TernaryTree;
r0 := @parameter0: dict.build.TernaryNode;
r3 := @parameter1: java.lang.String;
r16 := @parameter2: java.util.List;
if r0 == null goto return r16;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16);
$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>();
r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);
$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17);
"
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10);
"
    "Block 5:
[preds: 3 4 ] [succs: 6 ]
$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17);
"
    "Block 6:
[preds: 0 5 ] [succs: ]
return r16;
"
    "Block 0:
[preds: ] [succs: 1 6 ]
r1 := @this: dict.build.TernaryTree;
r0 := @parameter0: dict.build.TernaryNode;
r3 := @parameter1: java.lang.String;
r16 := @parameter2: java.util.List;
if r0 == null goto return r16;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16);
$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>();
r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);
$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
";
    "Block 0:
[preds: ] [succs: 1 6 ]
r1 := @this: dict.build.TernaryTree;
r0 := @parameter0: dict.build.TernaryNode;
r3 := @parameter1: java.lang.String;
r16 := @parameter2: java.util.List;
if r0 == null goto return r16;
"->"Block 6:
[preds: 0 5 ] [succs: ]
return r16;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16);
$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>();
r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);
$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17);
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16);
$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>();
r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);
$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>();
$r12 = new java.lang.StringBuilder;
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17);
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
"->"Block 4:
[preds: 3 ] [succs: 5 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10);
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>();
if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
"->"Block 5:
[preds: 3 4 ] [succs: 6 ]
$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17);
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10);
"->"Block 5:
[preds: 3 4 ] [succs: 6 ]
$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17);
";
    "Block 5:
[preds: 3 4 ] [succs: 6 ]
$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>();
r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17);
"->"Block 6:
[preds: 0 5 ] [succs: ]
return r16;
";
}
