digraph "unitGraph" {
    "r1 := @this: dict.build.TernaryTree"
    "r0 := @parameter0: dict.build.TernaryNode"
    "r3 := @parameter1: java.lang.String"
    "r16 := @parameter2: java.util.List"
    "if r0 == null goto return r16"
    "$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16)"
    "$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"
    "r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0)"
    "$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$r12 = new java.lang.StringBuilder"
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17)"
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10)"
    "$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17)"
    "return r16"
    "r1 := @this: dict.build.TernaryTree"->"r0 := @parameter0: dict.build.TernaryNode";
    "r0 := @parameter0: dict.build.TernaryNode"->"r3 := @parameter1: java.lang.String";
    "r3 := @parameter1: java.lang.String"->"r16 := @parameter2: java.util.List";
    "r16 := @parameter2: java.util.List"->"if r0 == null goto return r16";
    "if r0 == null goto return r16"->"$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if r0 == null goto return r16"->"return r16";
    "$r2 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16)";
    "r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r2, r3, r16)"->"$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()";
    "$c0 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"->"r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0)";
    "r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0)"->"$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $r5 == null goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r12 = new java.lang.StringBuilder";
    "$r12 = new java.lang.StringBuilder"->"specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17)";
    "r17 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r11, $r15, r17)"->"$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$r7 = new java.lang.StringBuilder";
    "if $z0 == 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10)";
    "interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r10)"->"$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17)";
    "r16 = specialinvoke r1.<dict.build.TernaryTree: java.util.List traverseNode(dict.build.TernaryNode,java.lang.String,java.util.List)>($r6, r3, r17)"->"return r16";
}
