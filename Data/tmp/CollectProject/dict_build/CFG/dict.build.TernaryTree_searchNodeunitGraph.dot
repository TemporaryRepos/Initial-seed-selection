digraph "unitGraph" {
    "r2 := @this: dict.build.TernaryTree"
    "r0 := @parameter0: dict.build.TernaryNode"
    "r1 := @parameter1: java.lang.String"
    "i0 := @parameter2: int"
    "if r0 == null goto return -1"
    "$i1 = virtualinvoke r1.<java.lang.String: int length()>()"
    "if i0 >= $i1 goto return -1"
    "c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0)"
    "c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"
    "if c2 >= c3 goto (branch)"
    "$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "$i10 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r5, r1, i0)"
    "return $i10"
    "if c2 <= c3 goto $i4 = virtualinvoke r1.<java.lang.String: int length()>()"
    "$r4 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "$i9 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r4, r1, i0)"
    "return $i9"
    "$i4 = virtualinvoke r1.<java.lang.String: int length()>()"
    "$i5 = $i4 - 1"
    "if i0 != $i5 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "if $z0 == 0 goto return -1"
    "$i8 = virtualinvoke r0.<dict.build.TernaryNode: int getValue()>()"
    "return $i8"
    "$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i6 = i0 + 1"
    "$i7 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r3, r1, $i6)"
    "return $i7"
    "return -1"
    "r2 := @this: dict.build.TernaryTree"->"r0 := @parameter0: dict.build.TernaryNode";
    "r0 := @parameter0: dict.build.TernaryNode"->"r1 := @parameter1: java.lang.String";
    "r1 := @parameter1: java.lang.String"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"if r0 == null goto return -1";
    "if r0 == null goto return -1"->"$i1 = virtualinvoke r1.<java.lang.String: int length()>()";
    "if r0 == null goto return -1"->"return -1";
    "$i1 = virtualinvoke r1.<java.lang.String: int length()>()"->"if i0 >= $i1 goto return -1";
    "if i0 >= $i1 goto return -1"->"c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0)";
    "if i0 >= $i1 goto return -1"->"return -1";
    "c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0)"->"c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()";
    "c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"->"if c2 >= c3 goto (branch)";
    "if c2 >= c3 goto (branch)"->"$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if c2 >= c3 goto (branch)"->"if c2 <= c3 goto $i4 = virtualinvoke r1.<java.lang.String: int length()>()";
    "$r5 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"$i10 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r5, r1, i0)";
    "$i10 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r5, r1, i0)"->"return $i10";
    "if c2 <= c3 goto $i4 = virtualinvoke r1.<java.lang.String: int length()>()"->"$r4 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "if c2 <= c3 goto $i4 = virtualinvoke r1.<java.lang.String: int length()>()"->"$i4 = virtualinvoke r1.<java.lang.String: int length()>()";
    "$r4 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$i9 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r4, r1, i0)";
    "$i9 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r4, r1, i0)"->"return $i9";
    "$i4 = virtualinvoke r1.<java.lang.String: int length()>()"->"$i5 = $i4 - 1";
    "$i5 = $i4 - 1"->"if i0 != $i5 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if i0 != $i5 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "if i0 != $i5 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"if $z0 == 0 goto return -1";
    "if $z0 == 0 goto return -1"->"$i8 = virtualinvoke r0.<dict.build.TernaryNode: int getValue()>()";
    "if $z0 == 0 goto return -1"->"return -1";
    "$i8 = virtualinvoke r0.<dict.build.TernaryNode: int getValue()>()"->"return $i8";
    "$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i6 = i0 + 1";
    "$i6 = i0 + 1"->"$i7 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r3, r1, $i6)";
    "$i7 = specialinvoke r2.<dict.build.TernaryTree: int searchNode(dict.build.TernaryNode,java.lang.String,int)>($r3, r1, $i6)"->"return $i7";
}
