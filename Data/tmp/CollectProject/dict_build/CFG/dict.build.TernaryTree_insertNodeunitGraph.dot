digraph "unitGraph" {
    "r1 := @this: dict.build.TernaryTree"
    "r9 := @parameter0: dict.build.TernaryNode"
    "r0 := @parameter1: java.lang.String"
    "i0 := @parameter2: int"
    "i4 := @parameter3: int"
    "$i1 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if i0 >= $i1 goto return r9"
    "c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)"
    "if r9 != null goto c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()"
    "$r8 = new dict.build.TernaryNode"
    "specialinvoke $r8.<dict.build.TernaryNode: void <init>(char)>(c2)"
    "r9 = $r8"
    "c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()"
    "if c2 >= c3 goto (branch)"
    "$r6 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "$r7 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r6, r0, i0, i4)"
    "virtualinvoke r9.<dict.build.TernaryNode: void setLokid(dict.build.TernaryNode)>($r7)"
    "goto [?= return r9]"
    "if c2 != c3 goto $r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "$i5 = virtualinvoke r0.<java.lang.String: int length()>()"
    "$i6 = $i5 - 1"
    "if i0 != $i6 goto $r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "virtualinvoke r9.<dict.build.TernaryNode: void setEndOfWord(int)>(i4)"
    "$r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i7 = i0 + 1"
    "$r5 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r4, r0, $i7, i4)"
    "virtualinvoke r9.<dict.build.TernaryNode: void setEqkid(dict.build.TernaryNode)>($r5)"
    "$r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "$r3 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r2, r0, i0, i4)"
    "virtualinvoke r9.<dict.build.TernaryNode: void setHikid(dict.build.TernaryNode)>($r3)"
    "return r9"
    "r1 := @this: dict.build.TernaryTree"->"r9 := @parameter0: dict.build.TernaryNode";
    "r9 := @parameter0: dict.build.TernaryNode"->"r0 := @parameter1: java.lang.String";
    "r0 := @parameter1: java.lang.String"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i4 := @parameter3: int";
    "i4 := @parameter3: int"->"$i1 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i1 = virtualinvoke r0.<java.lang.String: int length()>()"->"if i0 >= $i1 goto return r9";
    "if i0 >= $i1 goto return r9"->"c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)";
    "if i0 >= $i1 goto return r9"->"return r9";
    "c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)"->"if r9 != null goto c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()";
    "if r9 != null goto c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()"->"$r8 = new dict.build.TernaryNode";
    "if r9 != null goto c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()"->"c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()";
    "$r8 = new dict.build.TernaryNode"->"specialinvoke $r8.<dict.build.TernaryNode: void <init>(char)>(c2)";
    "specialinvoke $r8.<dict.build.TernaryNode: void <init>(char)>(c2)"->"r9 = $r8";
    "r9 = $r8"->"c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()";
    "c3 = virtualinvoke r9.<dict.build.TernaryNode: char getSplitChar()>()"->"if c2 >= c3 goto (branch)";
    "if c2 >= c3 goto (branch)"->"$r6 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if c2 >= c3 goto (branch)"->"if c2 != c3 goto $r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$r6 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"$r7 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r6, r0, i0, i4)";
    "$r7 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r6, r0, i0, i4)"->"virtualinvoke r9.<dict.build.TernaryNode: void setLokid(dict.build.TernaryNode)>($r7)";
    "virtualinvoke r9.<dict.build.TernaryNode: void setLokid(dict.build.TernaryNode)>($r7)"->"goto [?= return r9]";
    "goto [?= return r9]"->"return r9";
    "if c2 != c3 goto $r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$i5 = virtualinvoke r0.<java.lang.String: int length()>()";
    "if c2 != c3 goto $r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$i5 = virtualinvoke r0.<java.lang.String: int length()>()"->"$i6 = $i5 - 1";
    "$i6 = $i5 - 1"->"if i0 != $i6 goto $r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if i0 != $i6 goto $r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"virtualinvoke r9.<dict.build.TernaryNode: void setEndOfWord(int)>(i4)";
    "if i0 != $i6 goto $r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "virtualinvoke r9.<dict.build.TernaryNode: void setEndOfWord(int)>(i4)"->"$r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$r4 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i7 = i0 + 1";
    "$i7 = i0 + 1"->"$r5 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r4, r0, $i7, i4)";
    "$r5 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r4, r0, $i7, i4)"->"virtualinvoke r9.<dict.build.TernaryNode: void setEqkid(dict.build.TernaryNode)>($r5)";
    "virtualinvoke r9.<dict.build.TernaryNode: void setEqkid(dict.build.TernaryNode)>($r5)"->"goto [?= return r9]";
    "goto [?= return r9]"->"return r9";
    "$r2 = virtualinvoke r9.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$r3 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r2, r0, i0, i4)";
    "$r3 = specialinvoke r1.<dict.build.TernaryTree: dict.build.TernaryNode insertNode(dict.build.TernaryNode,java.lang.String,int,int)>($r2, r0, i0, i4)"->"virtualinvoke r9.<dict.build.TernaryNode: void setHikid(dict.build.TernaryNode)>($r3)";
    "virtualinvoke r9.<dict.build.TernaryNode: void setHikid(dict.build.TernaryNode)>($r3)"->"return r9";
}
