digraph "unitGraph" {
    "r3 := @this: dict.build.TernaryTree"
    "r2 := @parameter0: dict.build.TernaryNode"
    "r12 := @parameter1: java.lang.String"
    "i0 := @parameter2: int"
    "$r0 = new java.lang.StringBuffer"
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()"
    "r1 = $r0"
    "if r2 == null goto $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"
    "$r4 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "$i1 = i0 + 1"
    "$r5 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r4, \" <-\", $i1)"
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5)"
    "$c2 = virtualinvoke r2.<dict.build.TernaryNode: char getSplitChar()>()"
    "r7 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2)"
    "$r8 = new java.lang.StringBuffer"
    "specialinvoke $r8.<java.lang.StringBuffer: void <init>()>()"
    "r9 = $r8"
    "$r10 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "if $r10 == null goto $r11 = new java.util.StringTokenizer"
    "$r22 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$r23 = new java.lang.StringBuilder"
    "specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"--\")"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$i4 = i0 + 1"
    "$r28 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r22, $r27, $i4)"
    "virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28)"
    "goto [?= virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)]"
    "$r11 = new java.util.StringTokenizer"
    "specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r12, \"--\")"
    "i5 = virtualinvoke $r11.<java.util.StringTokenizer: int countTokens()>()"
    "if i5 <= 0 goto i6 = 1"
    "i5 = i5 + -1"
    "i6 = 1"
    "$i7 = i0 - i5"
    "$i8 = $i7 - 1"
    "if i6 >= $i8 goto $r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)"
    "virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"   \")"
    "i6 = i6 + 1"
    "goto [?= $i7 = i0 - i5]"
    "$r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7)"
    "$r15 = <dict.build.TernaryTree: java.lang.String LINE_SEPARATOR>"
    "virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)"
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)"
    "$r18 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "$i3 = i0 + 1"
    "$r19 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r18, \" >-\", $i3)"
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19)"
    "$r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"
    "return $r30"
    "r3 := @this: dict.build.TernaryTree"->"r2 := @parameter0: dict.build.TernaryNode";
    "r2 := @parameter0: dict.build.TernaryNode"->"r12 := @parameter1: java.lang.String";
    "r12 := @parameter1: java.lang.String"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"$r0 = new java.lang.StringBuffer";
    "$r0 = new java.lang.StringBuffer"->"specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"if r2 == null goto $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()";
    "if r2 == null goto $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"->"$r4 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if r2 == null goto $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"->"$r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()";
    "$r4 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"$i1 = i0 + 1";
    "$i1 = i0 + 1"->"$r5 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r4, \" <-\", $i1)";
    "$r5 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r4, \" <-\", $i1)"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5)";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5)"->"$c2 = virtualinvoke r2.<dict.build.TernaryNode: char getSplitChar()>()";
    "$c2 = virtualinvoke r2.<dict.build.TernaryNode: char getSplitChar()>()"->"r7 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2)";
    "r7 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2)"->"$r8 = new java.lang.StringBuffer";
    "$r8 = new java.lang.StringBuffer"->"specialinvoke $r8.<java.lang.StringBuffer: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuffer: void <init>()>()"->"r9 = $r8";
    "r9 = $r8"->"$r10 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$r10 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"if $r10 == null goto $r11 = new java.util.StringTokenizer";
    "if $r10 == null goto $r11 = new java.util.StringTokenizer"->"$r22 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $r10 == null goto $r11 = new java.util.StringTokenizer"->"$r11 = new java.util.StringTokenizer";
    "$r22 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r23 = new java.lang.StringBuilder";
    "$r23 = new java.lang.StringBuilder"->"specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"--\")";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"--\")"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()"->"$i4 = i0 + 1";
    "$i4 = i0 + 1"->"$r28 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r22, $r27, $i4)";
    "$r28 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r22, $r27, $i4)"->"virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28)";
    "virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28)"->"goto [?= virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)]";
    "goto [?= virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)]"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)";
    "$r11 = new java.util.StringTokenizer"->"specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r12, \"--\")";
    "specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r12, \"--\")"->"i5 = virtualinvoke $r11.<java.util.StringTokenizer: int countTokens()>()";
    "i5 = virtualinvoke $r11.<java.util.StringTokenizer: int countTokens()>()"->"if i5 <= 0 goto i6 = 1";
    "if i5 <= 0 goto i6 = 1"->"i5 = i5 + -1";
    "if i5 <= 0 goto i6 = 1"->"i6 = 1";
    "i5 = i5 + -1"->"i6 = 1";
    "i6 = 1"->"$i7 = i0 - i5";
    "$i7 = i0 - i5"->"$i8 = $i7 - 1";
    "$i8 = $i7 - 1"->"if i6 >= $i8 goto $r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)";
    "if i6 >= $i8 goto $r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)"->"virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"   \")";
    "if i6 >= $i8 goto $r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)"->"$r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)";
    "virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"   \")"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= $i7 = i0 - i5]";
    "goto [?= $i7 = i0 - i5]"->"$i7 = i0 - i5";
    "$r13 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12)"->"$r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7)";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7)"->"$r15 = <dict.build.TernaryTree: java.lang.String LINE_SEPARATOR>";
    "$r15 = <dict.build.TernaryTree: java.lang.String LINE_SEPARATOR>"->"virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)";
    "virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r9)"->"$r18 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$r18 = virtualinvoke r2.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$i3 = i0 + 1";
    "$i3 = i0 + 1"->"$r19 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r18, \" >-\", $i3)";
    "$r19 = specialinvoke r3.<dict.build.TernaryTree: java.lang.String printNode(dict.build.TernaryNode,java.lang.String,int)>($r18, \" >-\", $i3)"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19)";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19)"->"$r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()";
    "$r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"->"return $r30";
}
