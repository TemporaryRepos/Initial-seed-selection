digraph "unitGraph" {
    "r2 := @this: dict.build.TernaryTree"
    "r0 := @parameter0: dict.build.TernaryNode"
    "i0 := @parameter1: int"
    "r7 := @parameter2: java.util.List"
    "r4 := @parameter3: java.lang.String"
    "r1 := @parameter4: java.lang.String"
    "i1 := @parameter5: int"
    "if r0 == null goto return r7"
    "if i0 < 0 goto return r7"
    "$i2 = virtualinvoke r1.<java.lang.String: int length()>()"
    "if i1 >= $i2 goto c12 = 65535"
    "c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)"
    "goto [?= c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()]"
    "c12 = 65535"
    "c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"
    "if i0 > 0 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "if c12 >= c3 goto $r8 = new java.lang.StringBuilder"
    "$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r3, i0, r7, r4, r1, i1)"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3)"
    "r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "if c12 != c3 goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "$z2 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "if $z2 == 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "if i0 < 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i9 = virtualinvoke r5.<java.lang.String: int length()>()"
    "$i10 = $i9 + i0"
    "$i11 = virtualinvoke r1.<java.lang.String: int length()>()"
    "if $i10 < $i11 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5)"
    "$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i13 = i1 + 1"
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r11, i0, r7, r5, r1, $i13)"
    "goto [?= (branch)]"
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"
    "if $z0 == 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i4 = i0 - 1"
    "if $i4 < 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i5 = virtualinvoke r5.<java.lang.String: int length()>()"
    "$i6 = $i5 + i0"
    "$i7 = $i6 - 1"
    "$i8 = virtualinvoke r1.<java.lang.String: int length()>()"
    "if $i7 < $i8 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"
    "$i14 = i0 - 1"
    "$i15 = i1 + 1"
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r12, $i14, r7, r5, r1, $i15)"
    "if i0 > 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "if c12 <= c3 goto return r7"
    "$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r6, i0, r7, r4, r1, i1)"
    "return r7"
    "r2 := @this: dict.build.TernaryTree"->"r0 := @parameter0: dict.build.TernaryNode";
    "r0 := @parameter0: dict.build.TernaryNode"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"r7 := @parameter2: java.util.List";
    "r7 := @parameter2: java.util.List"->"r4 := @parameter3: java.lang.String";
    "r4 := @parameter3: java.lang.String"->"r1 := @parameter4: java.lang.String";
    "r1 := @parameter4: java.lang.String"->"i1 := @parameter5: int";
    "i1 := @parameter5: int"->"if r0 == null goto return r7";
    "if r0 == null goto return r7"->"if i0 < 0 goto return r7";
    "if r0 == null goto return r7"->"return r7";
    "if i0 < 0 goto return r7"->"$i2 = virtualinvoke r1.<java.lang.String: int length()>()";
    "if i0 < 0 goto return r7"->"return r7";
    "$i2 = virtualinvoke r1.<java.lang.String: int length()>()"->"if i1 >= $i2 goto c12 = 65535";
    "if i1 >= $i2 goto c12 = 65535"->"c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)";
    "if i1 >= $i2 goto c12 = 65535"->"c12 = 65535";
    "c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)"->"goto [?= c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()]";
    "goto [?= c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()]"->"c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()";
    "c12 = 65535"->"c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()";
    "c3 = virtualinvoke r0.<dict.build.TernaryNode: char getSplitChar()>()"->"if i0 > 0 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if i0 > 0 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"if c12 >= c3 goto $r8 = new java.lang.StringBuilder";
    "if i0 > 0 goto $r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if c12 >= c3 goto $r8 = new java.lang.StringBuilder"->"$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()";
    "if c12 >= c3 goto $r8 = new java.lang.StringBuilder"->"$r8 = new java.lang.StringBuilder";
    "$r3 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getLokid()>()"->"r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r3, i0, r7, r4, r1, i1)";
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r3, i0, r7, r4, r1, i1)"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3)"->"r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"if c12 != c3 goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "if c12 != c3 goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"$z2 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "if c12 != c3 goto $z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()";
    "$z2 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"if $z2 == 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $z2 == 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"if i0 < 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $z2 == 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if i0 < 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i9 = virtualinvoke r5.<java.lang.String: int length()>()";
    "if i0 < 0 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$i9 = virtualinvoke r5.<java.lang.String: int length()>()"->"$i10 = $i9 + i0";
    "$i10 = $i9 + i0"->"$i11 = virtualinvoke r1.<java.lang.String: int length()>()";
    "$i11 = virtualinvoke r1.<java.lang.String: int length()>()"->"if $i10 < $i11 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $i10 < $i11 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5)";
    "if $i10 < $i11 goto $r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5)"->"$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$r11 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i13 = i1 + 1";
    "$i13 = i1 + 1"->"r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r11, i0, r7, r5, r1, $i13)";
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r11, i0, r7, r5, r1, $i13)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i0 > 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "$z0 = virtualinvoke r0.<dict.build.TernaryNode: boolean isEndOfWord()>()"->"if $z0 == 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $z0 == 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i4 = i0 - 1";
    "if $z0 == 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$i4 = i0 - 1"->"if $i4 < 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $i4 < 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i5 = virtualinvoke r5.<java.lang.String: int length()>()";
    "if $i4 < 0 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$i5 = virtualinvoke r5.<java.lang.String: int length()>()"->"$i6 = $i5 + i0";
    "$i6 = $i5 + i0"->"$i7 = $i6 - 1";
    "$i7 = $i6 - 1"->"$i8 = virtualinvoke r1.<java.lang.String: int length()>()";
    "$i8 = virtualinvoke r1.<java.lang.String: int length()>()"->"if $i7 < $i8 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "if $i7 < $i8 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5)";
    "if $i7 < $i8 goto $r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5)"->"$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()";
    "$r12 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getEqkid()>()"->"$i14 = i0 - 1";
    "$i14 = i0 - 1"->"$i15 = i1 + 1";
    "$i15 = i1 + 1"->"r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r12, $i14, r7, r5, r1, $i15)";
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r12, $i14, r7, r5, r1, $i15)"->"if i0 > 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "if i0 > 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"if c12 <= c3 goto return r7";
    "if i0 > 0 goto $r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "if c12 <= c3 goto return r7"->"$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()";
    "if c12 <= c3 goto return r7"->"return r7";
    "$r6 = virtualinvoke r0.<dict.build.TernaryNode: dict.build.TernaryNode getHikid()>()"->"r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r6, i0, r7, r4, r1, i1)";
    "r7 = specialinvoke r2.<dict.build.TernaryTree: java.util.List nearSearchNode(dict.build.TernaryNode,int,java.util.List,java.lang.String,java.lang.String,int)>($r6, i0, r7, r4, r1, i1)"->"return r7";
}
