digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: java.lang.String;
r0 := @parameter1: java.util.List;
z2 = 0;
"
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if z2 != 0 goto return r4;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
z2 = 1;
r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.String) $r2;
$z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);
if $z1 == 0 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$i0 = virtualinvoke r4.<java.lang.String: int length()>();
$i1 = virtualinvoke r3.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
z2 = 0;
"
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 7:
[preds: 3 ] [succs: 1 ]
goto [?= (branch)];
"
    "Block 8:
[preds: 1 ] [succs: ]
return r4;
"
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: java.lang.String;
r0 := @parameter1: java.util.List;
z2 = 0;
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if z2 != 0 goto return r4;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if z2 != 0 goto return r4;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
z2 = 1;
r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if z2 != 0 goto return r4;
"->"Block 8:
[preds: 1 ] [succs: ]
return r4;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
z2 = 1;
r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.String) $r2;
$z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);
if $z1 == 0 goto (branch);
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 7:
[preds: 3 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.String) $r2;
$z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);
if $z1 == 0 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$i0 = virtualinvoke r4.<java.lang.String: int length()>();
$i1 = virtualinvoke r3.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
z2 = 0;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
r3 = (java.lang.String) $r2;
$z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);
if $z1 == 0 goto (branch);
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$i0 = virtualinvoke r4.<java.lang.String: int length()>();
$i1 = virtualinvoke r3.<java.lang.String: int length()>();
$i2 = $i0 - $i1;
r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
z2 = 0;
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()];
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 7:
[preds: 3 ] [succs: 1 ]
goto [?= (branch)];
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if z2 != 0 goto return r4;
";
}
