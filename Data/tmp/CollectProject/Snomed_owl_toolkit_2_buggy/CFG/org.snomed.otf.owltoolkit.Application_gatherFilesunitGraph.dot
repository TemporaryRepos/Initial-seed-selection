digraph "unitGraph" {
    "r8 := @this: org.snomed.otf.owltoolkit.Application"
    "r2 := @parameter0: java.lang.String"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "if r2 == null goto return r1"
    "r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\\,\")"
    "r4 = r3"
    "i0 = lengthof r4"
    "i1 = 0"
    "if i1 >= i0 goto return r1"
    "r5 = r4[i1]"
    "$r6 = new java.io.File"
    "specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r5)"
    "r7 = $r6"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>()"
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be a file.\")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$z0 = virtualinvoke r7.<java.io.File: boolean isFile()>()"
    "specialinvoke r8.<org.snomed.otf.owltoolkit.Application: void assertTrue(java.lang.String,boolean)>($r13, $z0)"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r7)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return r1"
    "r8 := @this: org.snomed.otf.owltoolkit.Application"->"r2 := @parameter0: java.lang.String";
    "r2 := @parameter0: java.lang.String"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"if r2 == null goto return r1";
    "if r2 == null goto return r1"->"r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\\,\")";
    "if r2 == null goto return r1"->"return r1";
    "r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\\,\")"->"r4 = r3";
    "r4 = r3"->"i0 = lengthof r4";
    "i0 = lengthof r4"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return r1";
    "if i1 >= i0 goto return r1"->"r5 = r4[i1]";
    "if i1 >= i0 goto return r1"->"return r1";
    "r5 = r4[i1]"->"$r6 = new java.io.File";
    "$r6 = new java.io.File"->"specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r5)";
    "specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r5)"->"r7 = $r6";
    "r7 = $r6"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>()";
    "$r10 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>()"->"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)";
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be a file.\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" should be a file.\")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"->"$z0 = virtualinvoke r7.<java.io.File: boolean isFile()>()";
    "$z0 = virtualinvoke r7.<java.io.File: boolean isFile()>()"->"specialinvoke r8.<org.snomed.otf.owltoolkit.Application: void assertTrue(java.lang.String,boolean)>($r13, $z0)";
    "specialinvoke r8.<org.snomed.otf.owltoolkit.Application: void assertTrue(java.lang.String,boolean)>($r13, $z0)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r7)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r7)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return r1";
}
