digraph "unitGraph" {
    "r1 := @this: org.joda.time.tz.ZoneInfoCompiler"
    "r0 := @parameter0: java.io.BufferedReader"
    "z6 := @parameter1: boolean"
    "r25 = null"
    "$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"
    "r27 = $r26"
    "if $r26 == null goto (branch)"
    "r3 = virtualinvoke r27.<java.lang.String: java.lang.String trim()>()"
    "$i0 = virtualinvoke r3.<java.lang.String: int length()>()"
    "if $i0 == 0 goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"
    "$c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)"
    "if $c1 != 35 goto i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)"
    "goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]"
    "i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)"
    "if i2 < 0 goto $r4 = new java.util.StringTokenizer"
    "r27 = virtualinvoke r27.<java.lang.String: java.lang.String substring(int,int)>(0, i2)"
    "$r4 = new java.util.StringTokenizer"
    "specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r27, \" \t\")"
    "r5 = $r4"
    "$c3 = virtualinvoke r27.<java.lang.String: char charAt(int)>(0)"
    "$z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)"
    "if $z1 == 0 goto (branch)"
    "$z15 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()"
    "if $z15 == 0 goto (branch)"
    "if r25 == null goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"
    "virtualinvoke r25.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r5)"
    "if r25 == null goto r25 = null"
    "$r24 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>"
    "interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r25)"
    "$z2 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()"
    "if $z2 == 0 goto (branch)"
    "r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"
    "$z3 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Rule\")"
    "if $z3 == 0 goto $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")"
    "$r16 = new org.joda.time.tz.ZoneInfoCompiler$Rule"
    "specialinvoke $r16.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>(r5)"
    "r28 = $r16"
    "$r18 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>"
    "$r17 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>"
    "$r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17)"
    "r29 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r19"
    "if r29 != null goto virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"
    "$r20 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet"
    "specialinvoke $r20.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"
    "r30 = $r20"
    "$r22 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>"
    "$r21 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>"
    "interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r30)"
    "goto [?= (branch)]"
    "virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"
    "$z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")"
    "if $z4 == 0 goto $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")"
    "$i4 = virtualinvoke r5.<java.util.StringTokenizer: int countTokens()>()"
    "if $i4 >= 4 goto $r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone"
    "$r15 = new java.lang.IllegalArgumentException"
    "specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"Attempting to create a Zone from an incomplete tokenizer\")"
    "throw $r15"
    "$r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone"
    "specialinvoke $r14.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>(r5)"
    "r25 = $r14"
    "$z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")"
    "if $z5 == 0 goto $r8 = <java.lang.System: java.io.PrintStream out>"
    "r31 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"
    "r32 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"
    "if z6 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"
    "$z9 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"US/Pacific-New\")"
    "if $z9 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"
    "$z10 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>(\"Etc/\")"
    "if $z10 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"
    "$z11 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"GMT\")"
    "if $z11 == 0 goto $r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"
    "$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"
    "interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r31)"
    "$r34 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"
    "interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(r32)"
    "$r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"
    "interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r31)"
    "$r13 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"
    "interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r32)"
    "$r8 = <java.lang.System: java.io.PrintStream out>"
    "$r7 = new java.lang.StringBuilder"
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown line: \")"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)"
    "if r25 == null goto return"
    "$r2 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>"
    "interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r25)"
    "return"
    "r1 := @this: org.joda.time.tz.ZoneInfoCompiler"->"r0 := @parameter0: java.io.BufferedReader";
    "r0 := @parameter0: java.io.BufferedReader"->"z6 := @parameter1: boolean";
    "z6 := @parameter1: boolean"->"r25 = null";
    "r25 = null"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"->"r27 = $r26";
    "r27 = $r26"->"if $r26 == null goto (branch)";
    "if $r26 == null goto (branch)"->"r3 = virtualinvoke r27.<java.lang.String: java.lang.String trim()>()";
    "if $r26 == null goto (branch)"->"if r25 == null goto return";
    "r3 = virtualinvoke r27.<java.lang.String: java.lang.String trim()>()"->"$i0 = virtualinvoke r3.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke r3.<java.lang.String: int length()>()"->"if $i0 == 0 goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "if $i0 == 0 goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"->"$c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)";
    "if $i0 == 0 goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "$c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)"->"if $c1 != 35 goto i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)";
    "if $c1 != 35 goto i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "if $c1 != 35 goto i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)"->"i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)";
    "goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "i2 = virtualinvoke r27.<java.lang.String: int indexOf(int)>(35)"->"if i2 < 0 goto $r4 = new java.util.StringTokenizer";
    "if i2 < 0 goto $r4 = new java.util.StringTokenizer"->"r27 = virtualinvoke r27.<java.lang.String: java.lang.String substring(int,int)>(0, i2)";
    "if i2 < 0 goto $r4 = new java.util.StringTokenizer"->"$r4 = new java.util.StringTokenizer";
    "r27 = virtualinvoke r27.<java.lang.String: java.lang.String substring(int,int)>(0, i2)"->"$r4 = new java.util.StringTokenizer";
    "$r4 = new java.util.StringTokenizer"->"specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r27, \" \t\")";
    "specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r27, \" \t\")"->"r5 = $r4";
    "r5 = $r4"->"$c3 = virtualinvoke r27.<java.lang.String: char charAt(int)>(0)";
    "$c3 = virtualinvoke r27.<java.lang.String: char charAt(int)>(0)"->"$z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)";
    "$z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)"->"if $z1 == 0 goto (branch)";
    "if $z1 == 0 goto (branch)"->"$z15 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()";
    "if $z1 == 0 goto (branch)"->"if r25 == null goto r25 = null";
    "$z15 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()"->"if $z15 == 0 goto (branch)";
    "if $z15 == 0 goto (branch)"->"if r25 == null goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "if $z15 == 0 goto (branch)"->"if r25 == null goto r25 = null";
    "if r25 == null goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"->"virtualinvoke r25.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r5)";
    "if r25 == null goto $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "virtualinvoke r25.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r5)"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "if r25 == null goto r25 = null"->"$r24 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>";
    "if r25 == null goto r25 = null"->"r25 = null";
    "$r24 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>"->"interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r25)";
    "interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r25)"->"r25 = null";
    "r25 = null"->"$z2 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()";
    "$z2 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()"->"if $z2 == 0 goto (branch)";
    "if $z2 == 0 goto (branch)"->"r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()";
    "if $z2 == 0 goto (branch)"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"->"$z3 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Rule\")";
    "$z3 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Rule\")"->"if $z3 == 0 goto $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")";
    "if $z3 == 0 goto $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")"->"$r16 = new org.joda.time.tz.ZoneInfoCompiler$Rule";
    "if $z3 == 0 goto $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")"->"$z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")";
    "$r16 = new org.joda.time.tz.ZoneInfoCompiler$Rule"->"specialinvoke $r16.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>(r5)";
    "specialinvoke $r16.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>(r5)"->"r28 = $r16";
    "r28 = $r16"->"$r18 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>";
    "$r18 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>"->"$r17 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>";
    "$r17 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>"->"$r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17)";
    "$r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17)"->"r29 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r19";
    "r29 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r19"->"if r29 != null goto virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)";
    "if r29 != null goto virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"->"$r20 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet";
    "if r29 != null goto virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"->"virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)";
    "$r20 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet"->"specialinvoke $r20.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)";
    "specialinvoke $r20.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"->"r30 = $r20";
    "r30 = $r20"->"$r22 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>";
    "$r22 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>"->"$r21 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>";
    "$r21 = r28.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>"->"interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r30)";
    "interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r30)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= (branch)]";
    "virtualinvoke r29.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r28)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "$z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Zone\")"->"if $z4 == 0 goto $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")";
    "if $z4 == 0 goto $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")"->"$i4 = virtualinvoke r5.<java.util.StringTokenizer: int countTokens()>()";
    "if $z4 == 0 goto $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")"->"$z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")";
    "$i4 = virtualinvoke r5.<java.util.StringTokenizer: int countTokens()>()"->"if $i4 >= 4 goto $r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone";
    "if $i4 >= 4 goto $r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone"->"$r15 = new java.lang.IllegalArgumentException";
    "if $i4 >= 4 goto $r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone"->"$r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone";
    "$r15 = new java.lang.IllegalArgumentException"->"specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"Attempting to create a Zone from an incomplete tokenizer\")";
    "specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"Attempting to create a Zone from an incomplete tokenizer\")"->"throw $r15";
    "$r14 = new org.joda.time.tz.ZoneInfoCompiler$Zone"->"specialinvoke $r14.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>(r5)";
    "specialinvoke $r14.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>(r5)"->"r25 = $r14";
    "r25 = $r14"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "$z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\"Link\")"->"if $z5 == 0 goto $r8 = <java.lang.System: java.io.PrintStream out>";
    "if $z5 == 0 goto $r8 = <java.lang.System: java.io.PrintStream out>"->"r31 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()";
    "if $z5 == 0 goto $r8 = <java.lang.System: java.io.PrintStream out>"->"$r8 = <java.lang.System: java.io.PrintStream out>";
    "r31 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"->"r32 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()";
    "r32 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()"->"if z6 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "if z6 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$z9 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"US/Pacific-New\")";
    "if z6 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "$z9 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"US/Pacific-New\")"->"if $z9 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "if $z9 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$z10 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>(\"Etc/\")";
    "if $z9 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "$z10 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>(\"Etc/\")"->"if $z10 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "if $z10 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$z11 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"GMT\")";
    "if $z10 != 0 goto $r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "$z11 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(\"GMT\")"->"if $z11 == 0 goto $r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>";
    "if $z11 == 0 goto $r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"->"$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "if $z11 == 0 goto $r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"->"$r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>";
    "$r33 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r31)";
    "interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r31)"->"$r34 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>";
    "$r34 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iBackLinks>"->"interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(r32)";
    "interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(r32)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= (branch)]";
    "$r12 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"->"interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r31)";
    "interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r31)"->"$r13 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>";
    "$r13 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iGoodLinks>"->"interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r32)";
    "interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r32)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "$r8 = <java.lang.System: java.io.PrintStream out>"->"$r7 = new java.lang.StringBuilder";
    "$r7 = new java.lang.StringBuilder"->"specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()"->"$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown line: \")";
    "$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown line: \")"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)";
    "virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)"->"goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]";
    "goto [?= $r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()]"->"$r26 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>()";
    "if r25 == null goto return"->"$r2 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>";
    "if r25 == null goto return"->"return";
    "$r2 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>"->"interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r25)";
    "interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r25)"->"return";
}
