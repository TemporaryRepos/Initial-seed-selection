digraph "unitGraph" {
    "r4 := @parameter0: java.lang.String"
    "r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>()"
    "$r1 = new org.joda.time.MutableDateTime"
    "$r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>()"
    "specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2)"
    "r3 = $r1"
    "b3 = 0"
    "$z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")"
    "if $z0 == 0 goto i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)"
    "b3 = 1"
    "i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)"
    "$i1 = b3 ^ -1"
    "if i0 != $i1 goto $l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()"
    "$r5 = new java.lang.IllegalArgumentException"
    "specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4)"
    "throw $r5"
    "$l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()"
    "i4 = (int) $l2"
    "if b3 != 1 goto return i4"
    "i4 = neg i4"
    "return i4"
    "r4 := @parameter0: java.lang.String"->"r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>()";
    "r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>()"->"$r1 = new org.joda.time.MutableDateTime";
    "$r1 = new org.joda.time.MutableDateTime"->"$r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>()";
    "$r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>()"->"specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2)";
    "specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2)"->"r3 = $r1";
    "r3 = $r1"->"b3 = 0";
    "b3 = 0"->"$z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")";
    "$z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")"->"if $z0 == 0 goto i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)";
    "if $z0 == 0 goto i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)"->"b3 = 1";
    "if $z0 == 0 goto i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)"->"i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)";
    "b3 = 1"->"i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)";
    "i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r4, b3)"->"$i1 = b3 ^ -1";
    "$i1 = b3 ^ -1"->"if i0 != $i1 goto $l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()";
    "if i0 != $i1 goto $l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()"->"$r5 = new java.lang.IllegalArgumentException";
    "if i0 != $i1 goto $l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()"->"$l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()";
    "$r5 = new java.lang.IllegalArgumentException"->"specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4)";
    "specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4)"->"throw $r5";
    "$l2 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()"->"i4 = (int) $l2";
    "i4 = (int) $l2"->"if b3 != 1 goto return i4";
    "if b3 != 1 goto return i4"->"i4 = neg i4";
    "if b3 != 1 goto return i4"->"return i4";
    "i4 = neg i4"->"return i4";
}
