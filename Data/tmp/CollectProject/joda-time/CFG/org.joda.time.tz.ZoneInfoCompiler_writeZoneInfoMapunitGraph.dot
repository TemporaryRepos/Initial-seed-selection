digraph "unitGraph" {
    "r0 := @parameter0: java.io.DataOutputStream"
    "r2 := @parameter1: java.util.Map"
    "if r0 != null goto $r1 = new java.util.HashMap"
    "$r28 = new java.lang.IllegalArgumentException"
    "specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"DataOutputStream must not be null.\")"
    "throw $r28"
    "$r1 = new java.util.HashMap"
    "$i0 = interfaceinvoke r2.<java.util.Map: int size()>()"
    "specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0)"
    "r3 = $r1"
    "$r4 = new java.util.TreeMap"
    "specialinvoke $r4.<java.util.TreeMap: void <init>()>()"
    "r5 = $r4"
    "s7 = 0"
    "$r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()"
    "r29 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto $i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()"
    "$r18 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()"
    "r30 = (java.util.Map$Entry) $r18"
    "$r19 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "r31 = (java.lang.String) $r19"
    "$z3 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r31)"
    "if $z3 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "r32 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)"
    "interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, r32)"
    "virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r31)"
    "$i6 = s7 + 1"
    "s7 = (short) $i6"
    "if s7 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r27 = new java.lang.InternalError"
    "specialinvoke $r27.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")"
    "throw $r27"
    "$r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r21 = (org.joda.time.DateTimeZone) $r20"
    "r33 = virtualinvoke $r21.<org.joda.time.DateTimeZone: java.lang.String getID()>()"
    "$z4 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r33)"
    "if $z4 != 0 goto (branch)"
    "r34 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)"
    "interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34)"
    "virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, r33)"
    "$i5 = s7 + 1"
    "s7 = (short) $i5"
    "if s7 != 0 goto (branch)"
    "$r24 = new java.lang.InternalError"
    "specialinvoke $r24.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")"
    "throw $r24"
    "goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]"
    "$i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()"
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1)"
    "$r7 = virtualinvoke r5.<java.util.TreeMap: java.util.Collection values()>()"
    "r35 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto $i2 = interfaceinvoke r2.<java.util.Map: int size()>()"
    "$r17 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>()"
    "r36 = (java.lang.String) $r17"
    "virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r36)"
    "goto [?= $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()]"
    "$i2 = interfaceinvoke r2.<java.util.Map: int size()>()"
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i2)"
    "$r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()"
    "r37 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()"
    "$z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 == 0 goto return"
    "$r9 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>()"
    "r38 = (java.util.Map$Entry) $r9"
    "$r10 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "r39 = (java.lang.String) $r10"
    "$r11 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39)"
    "$r12 = (java.lang.Short) $r11"
    "$s3 = virtualinvoke $r12.<java.lang.Short: short shortValue()>()"
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s3)"
    "$r13 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r14 = (org.joda.time.DateTimeZone) $r13"
    "r40 = virtualinvoke $r14.<org.joda.time.DateTimeZone: java.lang.String getID()>()"
    "$r15 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40)"
    "$r16 = (java.lang.Short) $r15"
    "$s4 = virtualinvoke $r16.<java.lang.Short: short shortValue()>()"
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s4)"
    "goto [?= $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()]"
    "return"
    "r0 := @parameter0: java.io.DataOutputStream"->"r2 := @parameter1: java.util.Map";
    "r2 := @parameter1: java.util.Map"->"if r0 != null goto $r1 = new java.util.HashMap";
    "if r0 != null goto $r1 = new java.util.HashMap"->"$r28 = new java.lang.IllegalArgumentException";
    "if r0 != null goto $r1 = new java.util.HashMap"->"$r1 = new java.util.HashMap";
    "$r28 = new java.lang.IllegalArgumentException"->"specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"DataOutputStream must not be null.\")";
    "specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"DataOutputStream must not be null.\")"->"throw $r28";
    "$r1 = new java.util.HashMap"->"$i0 = interfaceinvoke r2.<java.util.Map: int size()>()";
    "$i0 = interfaceinvoke r2.<java.util.Map: int size()>()"->"specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0)";
    "specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0)"->"r3 = $r1";
    "r3 = $r1"->"$r4 = new java.util.TreeMap";
    "$r4 = new java.util.TreeMap"->"specialinvoke $r4.<java.util.TreeMap: void <init>()>()";
    "specialinvoke $r4.<java.util.TreeMap: void <init>()>()"->"r5 = $r4";
    "r5 = $r4"->"s7 = 0";
    "s7 = 0"->"$r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()";
    "$r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()"->"r29 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()";
    "r29 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto $i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()";
    "if $z0 == 0 goto $i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()"->"$r18 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto $i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()"->"$i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()";
    "$r18 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()"->"r30 = (java.util.Map$Entry) $r18";
    "r30 = (java.util.Map$Entry) $r18"->"$r19 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "$r19 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>()"->"r31 = (java.lang.String) $r19";
    "r31 = (java.lang.String) $r19"->"$z3 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r31)";
    "$z3 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r31)"->"if $z3 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "if $z3 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"->"r32 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)";
    "if $z3 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "r32 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)"->"interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, r32)";
    "interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, r32)"->"virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r31)";
    "virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r31)"->"$i6 = s7 + 1";
    "$i6 = s7 + 1"->"s7 = (short) $i6";
    "s7 = (short) $i6"->"if s7 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "if s7 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r27 = new java.lang.InternalError";
    "if s7 != 0 goto $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r27 = new java.lang.InternalError"->"specialinvoke $r27.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")";
    "specialinvoke $r27.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")"->"throw $r27";
    "$r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r21 = (org.joda.time.DateTimeZone) $r20";
    "$r21 = (org.joda.time.DateTimeZone) $r20"->"r33 = virtualinvoke $r21.<org.joda.time.DateTimeZone: java.lang.String getID()>()";
    "r33 = virtualinvoke $r21.<org.joda.time.DateTimeZone: java.lang.String getID()>()"->"$z4 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r33)";
    "$z4 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r33)"->"if $z4 != 0 goto (branch)";
    "if $z4 != 0 goto (branch)"->"r34 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)";
    "if $z4 != 0 goto (branch)"->"goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]";
    "r34 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7)"->"interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34)";
    "interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34)"->"virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, r33)";
    "virtualinvoke r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, r33)"->"$i5 = s7 + 1";
    "$i5 = s7 + 1"->"s7 = (short) $i5";
    "s7 = (short) $i5"->"if s7 != 0 goto (branch)";
    "if s7 != 0 goto (branch)"->"$r24 = new java.lang.InternalError";
    "if s7 != 0 goto (branch)"->"goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]";
    "$r24 = new java.lang.InternalError"->"specialinvoke $r24.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")";
    "specialinvoke $r24.<java.lang.InternalError: void <init>(java.lang.String)>(\"Too many time zone ids\")"->"throw $r24";
    "goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()";
    "$i1 = virtualinvoke r5.<java.util.TreeMap: int size()>()"->"virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1)";
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1)"->"$r7 = virtualinvoke r5.<java.util.TreeMap: java.util.Collection values()>()";
    "$r7 = virtualinvoke r5.<java.util.TreeMap: java.util.Collection values()>()"->"r35 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()";
    "r35 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()";
    "$z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto $i2 = interfaceinvoke r2.<java.util.Map: int size()>()";
    "if $z1 == 0 goto $i2 = interfaceinvoke r2.<java.util.Map: int size()>()"->"$r17 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 == 0 goto $i2 = interfaceinvoke r2.<java.util.Map: int size()>()"->"$i2 = interfaceinvoke r2.<java.util.Map: int size()>()";
    "$r17 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>()"->"r36 = (java.lang.String) $r17";
    "r36 = (java.lang.String) $r17"->"virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r36)";
    "virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r36)"->"goto [?= $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>()";
    "$i2 = interfaceinvoke r2.<java.util.Map: int size()>()"->"virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i2)";
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i2)"->"$r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()";
    "$r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()"->"r37 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()";
    "r37 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()"->"$z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()";
    "$z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()"->"if $z2 == 0 goto return";
    "if $z2 == 0 goto return"->"$r9 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 == 0 goto return"->"return";
    "$r9 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>()"->"r38 = (java.util.Map$Entry) $r9";
    "r38 = (java.util.Map$Entry) $r9"->"$r10 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "$r10 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>()"->"r39 = (java.lang.String) $r10";
    "r39 = (java.lang.String) $r10"->"$r11 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39)";
    "$r11 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39)"->"$r12 = (java.lang.Short) $r11";
    "$r12 = (java.lang.Short) $r11"->"$s3 = virtualinvoke $r12.<java.lang.Short: short shortValue()>()";
    "$s3 = virtualinvoke $r12.<java.lang.Short: short shortValue()>()"->"virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s3)";
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s3)"->"$r13 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r13 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r14 = (org.joda.time.DateTimeZone) $r13";
    "$r14 = (org.joda.time.DateTimeZone) $r13"->"r40 = virtualinvoke $r14.<org.joda.time.DateTimeZone: java.lang.String getID()>()";
    "r40 = virtualinvoke $r14.<org.joda.time.DateTimeZone: java.lang.String getID()>()"->"$r15 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40)";
    "$r15 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40)"->"$r16 = (java.lang.Short) $r15";
    "$r16 = (java.lang.Short) $r15"->"$s4 = virtualinvoke $r16.<java.lang.Short: short shortValue()>()";
    "$s4 = virtualinvoke $r16.<java.lang.Short: short shortValue()>()"->"virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s4)";
    "virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s4)"->"goto [?= $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>()";
}
