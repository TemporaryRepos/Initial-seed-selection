digraph "unitGraph" {
    "r2 := @this: com.thealgorithms.sorts.PancakeSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 = lengthof r0"
    "i5 = 0"
    "if i5 >= i0 goto return r0"
    "r3 = r0[0]"
    "i6 = 0"
    "i7 = 0"
    "$i1 = i0 - i5"
    "if i7 >= $i1 goto $i2 = lengthof r0"
    "$r1 = r0[i7]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1)"
    "if $z0 == 0 goto i7 = i7 + 1"
    "r3 = r0[i7]"
    "i6 = i7"
    "i7 = i7 + 1"
    "goto [?= $i1 = i0 - i5]"
    "$i2 = lengthof r0"
    "$i3 = $i2 - 1"
    "$i4 = $i3 - i5"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4)"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "return r0"
    "r2 := @this: com.thealgorithms.sorts.PancakeSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i5 = 0";
    "i5 = 0"->"if i5 >= i0 goto return r0";
    "if i5 >= i0 goto return r0"->"r3 = r0[0]";
    "if i5 >= i0 goto return r0"->"return r0";
    "r3 = r0[0]"->"i6 = 0";
    "i6 = 0"->"i7 = 0";
    "i7 = 0"->"$i1 = i0 - i5";
    "$i1 = i0 - i5"->"if i7 >= $i1 goto $i2 = lengthof r0";
    "if i7 >= $i1 goto $i2 = lengthof r0"->"$r1 = r0[i7]";
    "if i7 >= $i1 goto $i2 = lengthof r0"->"$i2 = lengthof r0";
    "$r1 = r0[i7]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1)"->"if $z0 == 0 goto i7 = i7 + 1";
    "if $z0 == 0 goto i7 = i7 + 1"->"r3 = r0[i7]";
    "if $z0 == 0 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "r3 = r0[i7]"->"i6 = i7";
    "i6 = i7"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $i1 = i0 - i5]";
    "goto [?= $i1 = i0 - i5]"->"$i1 = i0 - i5";
    "$i2 = lengthof r0"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"$i4 = $i3 - i5";
    "$i4 = $i3 - i5"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4)";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto return r0";
}
