digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String"
    "r1 := @parameter1: java.lang.String"
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"
    "i1 = $i0 + 1"
    "$i2 = virtualinvoke r1.<java.lang.String: int length()>()"
    "i3 = $i2 + 1"
    "r2 = newmultiarray (int)[i1][i3]"
    "i23 = 0"
    "if i23 >= i1 goto i24 = 0"
    "$r11 = r2[i23]"
    "$r11[0] = i23"
    "i23 = i23 + 1"
    "goto [?= (branch)]"
    "i24 = 0"
    "if i24 >= i3 goto i25 = 1"
    "$r10 = r2[0]"
    "$r10[i24] = i24"
    "i24 = i24 + 1"
    "i25 = 1"
    "if i25 >= i1 goto $i4 = i1 - 1"
    "i26 = 1"
    "if i26 >= i3 goto i25 = i25 + 1"
    "$i7 = i25 - 1"
    "$c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7)"
    "$i9 = i26 - 1"
    "$c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9)"
    "if $c8 != $c10 goto $r7 = r2[i25]"
    "$r9 = r2[i25]"
    "$i20 = i25 - 1"
    "$r8 = r2[$i20]"
    "$i21 = i26 - 1"
    "$i22 = $r8[$i21]"
    "$r9[i26] = $i22"
    "goto [?= i26 = i26 + 1]"
    "$r7 = r2[i25]"
    "$i11 = i25 - 1"
    "$r4 = r2[$i11]"
    "$i17 = $r4[i26]"
    "$i12 = i25 - 1"
    "$r5 = r2[$i12]"
    "$i13 = i26 - 1"
    "$i16 = $r5[$i13]"
    "$r6 = r2[i25]"
    "$i14 = i26 - 1"
    "$i15 = $r6[$i14]"
    "$i18 = staticinvoke <com.thealgorithms.dynamicprogramming.LevenshteinDistance: int minimum(int,int,int)>($i17, $i16, $i15)"
    "$i19 = 1 + $i18"
    "$r7[i26] = $i19"
    "i26 = i26 + 1"
    "i25 = i25 + 1"
    "$i4 = i1 - 1"
    "$r3 = r2[$i4]"
    "$i5 = i3 - 1"
    "$i6 = $r3[$i5]"
    "return $i6"
    "r0 := @parameter0: java.lang.String"->"r1 := @parameter1: java.lang.String";
    "r1 := @parameter1: java.lang.String"->"$i0 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"->"i1 = $i0 + 1";
    "i1 = $i0 + 1"->"$i2 = virtualinvoke r1.<java.lang.String: int length()>()";
    "$i2 = virtualinvoke r1.<java.lang.String: int length()>()"->"i3 = $i2 + 1";
    "i3 = $i2 + 1"->"r2 = newmultiarray (int)[i1][i3]";
    "r2 = newmultiarray (int)[i1][i3]"->"i23 = 0";
    "i23 = 0"->"if i23 >= i1 goto i24 = 0";
    "if i23 >= i1 goto i24 = 0"->"$r11 = r2[i23]";
    "if i23 >= i1 goto i24 = 0"->"i24 = 0";
    "$r11 = r2[i23]"->"$r11[0] = i23";
    "$r11[0] = i23"->"i23 = i23 + 1";
    "i23 = i23 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i23 >= i1 goto i24 = 0";
    "i24 = 0"->"if i24 >= i3 goto i25 = 1";
    "if i24 >= i3 goto i25 = 1"->"$r10 = r2[0]";
    "if i24 >= i3 goto i25 = 1"->"i25 = 1";
    "$r10 = r2[0]"->"$r10[i24] = i24";
    "$r10[i24] = i24"->"i24 = i24 + 1";
    "i24 = i24 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i24 >= i3 goto i25 = 1";
    "i25 = 1"->"if i25 >= i1 goto $i4 = i1 - 1";
    "if i25 >= i1 goto $i4 = i1 - 1"->"i26 = 1";
    "if i25 >= i1 goto $i4 = i1 - 1"->"$i4 = i1 - 1";
    "i26 = 1"->"if i26 >= i3 goto i25 = i25 + 1";
    "if i26 >= i3 goto i25 = i25 + 1"->"$i7 = i25 - 1";
    "if i26 >= i3 goto i25 = i25 + 1"->"i25 = i25 + 1";
    "$i7 = i25 - 1"->"$c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7)";
    "$c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7)"->"$i9 = i26 - 1";
    "$i9 = i26 - 1"->"$c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9)";
    "$c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9)"->"if $c8 != $c10 goto $r7 = r2[i25]";
    "if $c8 != $c10 goto $r7 = r2[i25]"->"$r9 = r2[i25]";
    "if $c8 != $c10 goto $r7 = r2[i25]"->"$r7 = r2[i25]";
    "$r9 = r2[i25]"->"$i20 = i25 - 1";
    "$i20 = i25 - 1"->"$r8 = r2[$i20]";
    "$r8 = r2[$i20]"->"$i21 = i26 - 1";
    "$i21 = i26 - 1"->"$i22 = $r8[$i21]";
    "$i22 = $r8[$i21]"->"$r9[i26] = $i22";
    "$r9[i26] = $i22"->"goto [?= i26 = i26 + 1]";
    "goto [?= i26 = i26 + 1]"->"i26 = i26 + 1";
    "$r7 = r2[i25]"->"$i11 = i25 - 1";
    "$i11 = i25 - 1"->"$r4 = r2[$i11]";
    "$r4 = r2[$i11]"->"$i17 = $r4[i26]";
    "$i17 = $r4[i26]"->"$i12 = i25 - 1";
    "$i12 = i25 - 1"->"$r5 = r2[$i12]";
    "$r5 = r2[$i12]"->"$i13 = i26 - 1";
    "$i13 = i26 - 1"->"$i16 = $r5[$i13]";
    "$i16 = $r5[$i13]"->"$r6 = r2[i25]";
    "$r6 = r2[i25]"->"$i14 = i26 - 1";
    "$i14 = i26 - 1"->"$i15 = $r6[$i14]";
    "$i15 = $r6[$i14]"->"$i18 = staticinvoke <com.thealgorithms.dynamicprogramming.LevenshteinDistance: int minimum(int,int,int)>($i17, $i16, $i15)";
    "$i18 = staticinvoke <com.thealgorithms.dynamicprogramming.LevenshteinDistance: int minimum(int,int,int)>($i17, $i16, $i15)"->"$i19 = 1 + $i18";
    "$i19 = 1 + $i18"->"$r7[i26] = $i19";
    "$r7[i26] = $i19"->"i26 = i26 + 1";
    "i26 = i26 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i26 >= i3 goto i25 = i25 + 1";
    "i25 = i25 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i25 >= i1 goto $i4 = i1 - 1";
    "$i4 = i1 - 1"->"$r3 = r2[$i4]";
    "$r3 = r2[$i4]"->"$i5 = i3 - 1";
    "$i5 = i3 - 1"->"$i6 = $r3[$i5]";
    "$i6 = $r3[$i5]"->"return $i6";
}
