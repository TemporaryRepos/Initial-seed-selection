digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "$i2 = i1 - 1"
    "if i0 != $i2 goto i4 = i0"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1)"
    "goto [?= return]"
    "i4 = i0"
    "if i4 >= i1 goto return"
    "r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4)"
    "$i3 = i0 + 1"
    "staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1)"
    "r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4)"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "return"
    "r1 := @parameter0: java.lang.String"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"$i2 = i1 - 1";
    "$i2 = i1 - 1"->"if i0 != $i2 goto i4 = i0";
    "if i0 != $i2 goto i4 = i0"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "if i0 != $i2 goto i4 = i0"->"i4 = i0";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1)";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "i4 = i0"->"if i4 >= i1 goto return";
    "if i4 >= i1 goto return"->"r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4)";
    "if i4 >= i1 goto return"->"return";
    "r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4)"->"$i3 = i0 + 1";
    "$i3 = i0 + 1"->"staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1)";
    "staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1)"->"r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4)";
    "r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i1 goto return";
}
