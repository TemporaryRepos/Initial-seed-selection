digraph "unitGraph" {
    "r9 := @parameter0: java.lang.String[]"
    "r0 = newarray (java.lang.Integer)[10]"
    "$r1 = new java.util.Random"
    "specialinvoke $r1.<java.util.Random: void <init>()>()"
    "r2 = $r1"
    "i7 = 0"
    "$i0 = lengthof r0"
    "if i7 >= $i0 goto $r3 = new com.thealgorithms.sorts.BubbleSortRecursion"
    "$i5 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100)"
    "$i6 = $i5 - 50"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"
    "r0[i7] = $r8"
    "i7 = i7 + 1"
    "goto [?= $i0 = lengthof r0]"
    "$r3 = new com.thealgorithms.sorts.BubbleSortRecursion"
    "specialinvoke $r3.<com.thealgorithms.sorts.BubbleSortRecursion: void <init>()>()"
    "r10 = $r3"
    "virtualinvoke r10.<com.thealgorithms.sorts.BubbleSortRecursion: java.lang.Comparable[] sort(java.lang.Comparable[])>(r0)"
    "i8 = 0"
    "$i1 = lengthof r0"
    "$i2 = $i1 - 1"
    "if i8 >= $i2 goto return"
    "$z0 = <com.thealgorithms.sorts.BubbleSortRecursion: boolean $assertionsDisabled>"
    "if $z0 != 0 goto i8 = i8 + 1"
    "$r6 = r0[i8]"
    "$i3 = i8 + 1"
    "$r5 = r0[$i3]"
    "$i4 = virtualinvoke $r6.<java.lang.Integer: int compareTo(java.lang.Integer)>($r5)"
    "if $i4 <= 0 goto i8 = i8 + 1"
    "$r7 = new java.lang.AssertionError"
    "specialinvoke $r7.<java.lang.AssertionError: void <init>()>()"
    "throw $r7"
    "i8 = i8 + 1"
    "goto [?= $i1 = lengthof r0]"
    "return"
    "r9 := @parameter0: java.lang.String[]"->"r0 = newarray (java.lang.Integer)[10]";
    "r0 = newarray (java.lang.Integer)[10]"->"$r1 = new java.util.Random";
    "$r1 = new java.util.Random"->"specialinvoke $r1.<java.util.Random: void <init>()>()";
    "specialinvoke $r1.<java.util.Random: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"i7 = 0";
    "i7 = 0"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if i7 >= $i0 goto $r3 = new com.thealgorithms.sorts.BubbleSortRecursion";
    "if i7 >= $i0 goto $r3 = new com.thealgorithms.sorts.BubbleSortRecursion"->"$i5 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100)";
    "if i7 >= $i0 goto $r3 = new com.thealgorithms.sorts.BubbleSortRecursion"->"$r3 = new com.thealgorithms.sorts.BubbleSortRecursion";
    "$i5 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100)"->"$i6 = $i5 - 50";
    "$i6 = $i5 - 50"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"->"r0[i7] = $r8";
    "r0[i7] = $r8"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $i0 = lengthof r0]";
    "goto [?= $i0 = lengthof r0]"->"$i0 = lengthof r0";
    "$r3 = new com.thealgorithms.sorts.BubbleSortRecursion"->"specialinvoke $r3.<com.thealgorithms.sorts.BubbleSortRecursion: void <init>()>()";
    "specialinvoke $r3.<com.thealgorithms.sorts.BubbleSortRecursion: void <init>()>()"->"r10 = $r3";
    "r10 = $r3"->"virtualinvoke r10.<com.thealgorithms.sorts.BubbleSortRecursion: java.lang.Comparable[] sort(java.lang.Comparable[])>(r0)";
    "virtualinvoke r10.<com.thealgorithms.sorts.BubbleSortRecursion: java.lang.Comparable[] sort(java.lang.Comparable[])>(r0)"->"i8 = 0";
    "i8 = 0"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"$i2 = $i1 - 1";
    "$i2 = $i1 - 1"->"if i8 >= $i2 goto return";
    "if i8 >= $i2 goto return"->"$z0 = <com.thealgorithms.sorts.BubbleSortRecursion: boolean $assertionsDisabled>";
    "if i8 >= $i2 goto return"->"return";
    "$z0 = <com.thealgorithms.sorts.BubbleSortRecursion: boolean $assertionsDisabled>"->"if $z0 != 0 goto i8 = i8 + 1";
    "if $z0 != 0 goto i8 = i8 + 1"->"$r6 = r0[i8]";
    "if $z0 != 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r6 = r0[i8]"->"$i3 = i8 + 1";
    "$i3 = i8 + 1"->"$r5 = r0[$i3]";
    "$r5 = r0[$i3]"->"$i4 = virtualinvoke $r6.<java.lang.Integer: int compareTo(java.lang.Integer)>($r5)";
    "$i4 = virtualinvoke $r6.<java.lang.Integer: int compareTo(java.lang.Integer)>($r5)"->"if $i4 <= 0 goto i8 = i8 + 1";
    "if $i4 <= 0 goto i8 = i8 + 1"->"$r7 = new java.lang.AssertionError";
    "if $i4 <= 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r7 = new java.lang.AssertionError"->"specialinvoke $r7.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r7.<java.lang.AssertionError: void <init>()>()"->"throw $r7";
    "i8 = i8 + 1"->"goto [?= $i1 = lengthof r0]";
    "goto [?= $i1 = lengthof r0]"->"$i1 = lengthof r0";
}
