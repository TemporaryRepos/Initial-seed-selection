digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i9 := @parameter1: int;
i0 := @parameter2: int;
$r2 = r0[i9];
$r1 = r0[i0];
$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);
if $i1 <= 0 goto r3 = r0[i9];
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 ]
r3 = r0[i9];
r4 = r0[i0];
i10 = i9 + 1;
i11 = i9 + 1;
i12 = i0 - 1;
"
    "Block 3:
[preds: 2 12 ] [succs: 4 13 ]
if i11 > i12 goto i13 = i10 + -1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r6 = r0[i11];
$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i2 >= 0 goto $r7 = r0[i11];
"
    "Block 5:
[preds: 4 ] [succs: 12 ]
$i8 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8);
goto [?= i11 = i11 + 1];
"
    "Block 6:
[preds: 4 ] [succs: 7 12 ]
$r7 = r0[i11];
$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i3 < 0 goto i11 = i11 + 1;
"
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i11 >= i12 goto $i4 = i12;
"
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r9 = r0[i12];
$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i7 <= 0 goto $i4 = i12;
"
    "Block 9:
[preds: 8 ] [succs: 7 ]
i12 = i12 + -1;
goto [?= (branch)];
"
    "Block 10:
[preds: 7 8 ] [succs: 11 12 ]
$i4 = i12;
i12 = i12 + -1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4);
$r8 = r0[i11];
$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i5 >= 0 goto i11 = i11 + 1;
"
    "Block 11:
[preds: 10 ] [succs: 12 ]
$i6 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6);
"
    "Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
"
    "Block 13:
[preds: 3 ] [succs: ]
i13 = i10 + -1;
i14 = i12 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i13);
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i0, i14);
$r5 = newarray (int)[2];
$r5[0] = i11;
$r5[1] = i14;
return $r5;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i9 := @parameter1: int;
i0 := @parameter2: int;
$r2 = r0[i9];
$r1 = r0[i0];
$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);
if $i1 <= 0 goto r3 = r0[i9];
"->"Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i9 := @parameter1: int;
i0 := @parameter2: int;
$r2 = r0[i9];
$r1 = r0[i0];
$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);
if $i1 <= 0 goto r3 = r0[i9];
"->"Block 2:
[preds: 0 1 ] [succs: 3 ]
r3 = r0[i9];
r4 = r0[i0];
i10 = i9 + 1;
i11 = i9 + 1;
i12 = i0 - 1;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0);
"->"Block 2:
[preds: 0 1 ] [succs: 3 ]
r3 = r0[i9];
r4 = r0[i0];
i10 = i9 + 1;
i11 = i9 + 1;
i12 = i0 - 1;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 ]
r3 = r0[i9];
r4 = r0[i0];
i10 = i9 + 1;
i11 = i9 + 1;
i12 = i0 - 1;
"->"Block 3:
[preds: 2 12 ] [succs: 4 13 ]
if i11 > i12 goto i13 = i10 + -1;
";
    "Block 3:
[preds: 2 12 ] [succs: 4 13 ]
if i11 > i12 goto i13 = i10 + -1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r6 = r0[i11];
$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i2 >= 0 goto $r7 = r0[i11];
";
    "Block 3:
[preds: 2 12 ] [succs: 4 13 ]
if i11 > i12 goto i13 = i10 + -1;
"->"Block 13:
[preds: 3 ] [succs: ]
i13 = i10 + -1;
i14 = i12 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i13);
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i0, i14);
$r5 = newarray (int)[2];
$r5[0] = i11;
$r5[1] = i14;
return $r5;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r6 = r0[i11];
$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i2 >= 0 goto $r7 = r0[i11];
"->"Block 5:
[preds: 4 ] [succs: 12 ]
$i8 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8);
goto [?= i11 = i11 + 1];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r6 = r0[i11];
$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i2 >= 0 goto $r7 = r0[i11];
"->"Block 6:
[preds: 4 ] [succs: 7 12 ]
$r7 = r0[i11];
$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i3 < 0 goto i11 = i11 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 12 ]
$i8 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8);
goto [?= i11 = i11 + 1];
"->"Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 7 12 ]
$r7 = r0[i11];
$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i3 < 0 goto i11 = i11 + 1;
"->"Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i11 >= i12 goto $i4 = i12;
";
    "Block 6:
[preds: 4 ] [succs: 7 12 ]
$r7 = r0[i11];
$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i3 < 0 goto i11 = i11 + 1;
"->"Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i11 >= i12 goto $i4 = i12;
"->"Block 8:
[preds: 7 ] [succs: 9 10 ]
$r9 = r0[i12];
$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i7 <= 0 goto $i4 = i12;
";
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i11 >= i12 goto $i4 = i12;
"->"Block 10:
[preds: 7 8 ] [succs: 11 12 ]
$i4 = i12;
i12 = i12 + -1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4);
$r8 = r0[i11];
$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i5 >= 0 goto i11 = i11 + 1;
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r9 = r0[i12];
$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i7 <= 0 goto $i4 = i12;
"->"Block 9:
[preds: 8 ] [succs: 7 ]
i12 = i12 + -1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r9 = r0[i12];
$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);
if $i7 <= 0 goto $i4 = i12;
"->"Block 10:
[preds: 7 8 ] [succs: 11 12 ]
$i4 = i12;
i12 = i12 + -1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4);
$r8 = r0[i11];
$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i5 >= 0 goto i11 = i11 + 1;
";
    "Block 9:
[preds: 8 ] [succs: 7 ]
i12 = i12 + -1;
goto [?= (branch)];
"->"Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i11 >= i12 goto $i4 = i12;
";
    "Block 10:
[preds: 7 8 ] [succs: 11 12 ]
$i4 = i12;
i12 = i12 + -1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4);
$r8 = r0[i11];
$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i5 >= 0 goto i11 = i11 + 1;
"->"Block 11:
[preds: 10 ] [succs: 12 ]
$i6 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6);
";
    "Block 10:
[preds: 7 8 ] [succs: 11 12 ]
$i4 = i12;
i12 = i12 + -1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4);
$r8 = r0[i11];
$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);
if $i5 >= 0 goto i11 = i11 + 1;
"->"Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 11:
[preds: 10 ] [succs: 12 ]
$i6 = i9;
i9 = i9 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6);
"->"Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 12:
[preds: 5 6 10 11 ] [succs: 3 ]
i11 = i11 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 12 ] [succs: 4 13 ]
if i11 > i12 goto i13 = i10 + -1;
";
}
