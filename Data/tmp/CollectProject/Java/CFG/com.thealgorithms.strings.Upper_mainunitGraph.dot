digraph "unitGraph" {
    "r7 := @parameter0: java.lang.String[]"
    "$r0 = newarray (java.lang.String)[4]"
    "$r0[0] = \"ABC\""
    "$r0[1] = \"ABC123\""
    "$r0[2] = \"abcABC\""
    "$r0[3] = \"abc123ABC\""
    "r1 = $r0"
    "r2 = r1"
    "i0 = lengthof r2"
    "i1 = 0"
    "if i1 >= i0 goto return"
    "r3 = r2[i1]"
    "$z0 = <com.thealgorithms.strings.Upper: boolean $assertionsDisabled>"
    "if $z0 != 0 goto i1 = i1 + 1"
    "$r4 = staticinvoke <com.thealgorithms.strings.Upper: java.lang.String toUpperCase(java.lang.String)>(r3)"
    "$r5 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>()"
    "$z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)"
    "if $z1 != 0 goto i1 = i1 + 1"
    "$r6 = new java.lang.AssertionError"
    "specialinvoke $r6.<java.lang.AssertionError: void <init>()>()"
    "throw $r6"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r7 := @parameter0: java.lang.String[]"->"$r0 = newarray (java.lang.String)[4]";
    "$r0 = newarray (java.lang.String)[4]"->"$r0[0] = \"ABC\"";
    "$r0[0] = \"ABC\""->"$r0[1] = \"ABC123\"";
    "$r0[1] = \"ABC123\""->"$r0[2] = \"abcABC\"";
    "$r0[2] = \"abcABC\""->"$r0[3] = \"abc123ABC\"";
    "$r0[3] = \"abc123ABC\""->"r1 = $r0";
    "r1 = $r0"->"r2 = r1";
    "r2 = r1"->"i0 = lengthof r2";
    "i0 = lengthof r2"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return";
    "if i1 >= i0 goto return"->"r3 = r2[i1]";
    "if i1 >= i0 goto return"->"return";
    "r3 = r2[i1]"->"$z0 = <com.thealgorithms.strings.Upper: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.strings.Upper: boolean $assertionsDisabled>"->"if $z0 != 0 goto i1 = i1 + 1";
    "if $z0 != 0 goto i1 = i1 + 1"->"$r4 = staticinvoke <com.thealgorithms.strings.Upper: java.lang.String toUpperCase(java.lang.String)>(r3)";
    "if $z0 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r4 = staticinvoke <com.thealgorithms.strings.Upper: java.lang.String toUpperCase(java.lang.String)>(r3)"->"$r5 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>()";
    "$r5 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>()"->"$z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)";
    "$z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)"->"if $z1 != 0 goto i1 = i1 + 1";
    "if $z1 != 0 goto i1 = i1 + 1"->"$r6 = new java.lang.AssertionError";
    "if $z1 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r6 = new java.lang.AssertionError"->"specialinvoke $r6.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r6.<java.lang.AssertionError: void <init>()>()"->"throw $r6";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return";
}
