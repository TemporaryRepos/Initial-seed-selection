digraph "unitGraph" {
    "r3 := @this: com.thealgorithms.sorts.StoogeSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i2 := @parameter1: int"
    "i0 := @parameter2: int"
    "$i1 = i0 - 1"
    "$r2 = r0[$i1]"
    "$r1 = r0[i2]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)"
    "if $z0 == 0 goto i9 = i0 - i2"
    "r8 = r0[i2]"
    "$i7 = i0 - 1"
    "$r7 = r0[$i7]"
    "r0[i2] = $r7"
    "$i8 = i0 - 1"
    "r0[$i8] = r8"
    "i9 = i0 - i2"
    "if i9 <= 2 goto return r0"
    "i3 = i9 / 3"
    "$i4 = i0 - i3"
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i4)"
    "$i5 = i2 + i3"
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, $i5, i0)"
    "$i6 = i0 - i3"
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i6)"
    "return r0"
    "r3 := @this: com.thealgorithms.sorts.StoogeSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i2 := @parameter1: int";
    "i2 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"$i1 = i0 - 1";
    "$i1 = i0 - 1"->"$r2 = r0[$i1]";
    "$r2 = r0[$i1]"->"$r1 = r0[i2]";
    "$r1 = r0[i2]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)"->"if $z0 == 0 goto i9 = i0 - i2";
    "if $z0 == 0 goto i9 = i0 - i2"->"r8 = r0[i2]";
    "if $z0 == 0 goto i9 = i0 - i2"->"i9 = i0 - i2";
    "r8 = r0[i2]"->"$i7 = i0 - 1";
    "$i7 = i0 - 1"->"$r7 = r0[$i7]";
    "$r7 = r0[$i7]"->"r0[i2] = $r7";
    "r0[i2] = $r7"->"$i8 = i0 - 1";
    "$i8 = i0 - 1"->"r0[$i8] = r8";
    "r0[$i8] = r8"->"i9 = i0 - i2";
    "i9 = i0 - i2"->"if i9 <= 2 goto return r0";
    "if i9 <= 2 goto return r0"->"i3 = i9 / 3";
    "if i9 <= 2 goto return r0"->"return r0";
    "i3 = i9 / 3"->"$i4 = i0 - i3";
    "$i4 = i0 - i3"->"virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i4)";
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i4)"->"$i5 = i2 + i3";
    "$i5 = i2 + i3"->"virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, $i5, i0)";
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, $i5, i0)"->"$i6 = i0 - i3";
    "$i6 = i0 - i3"->"virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i6)";
    "virtualinvoke r3.<com.thealgorithms.sorts.StoogeSort: java.lang.Comparable[] sort(java.lang.Comparable[],int,int)>(r0, i2, $i6)"->"return r0";
}
