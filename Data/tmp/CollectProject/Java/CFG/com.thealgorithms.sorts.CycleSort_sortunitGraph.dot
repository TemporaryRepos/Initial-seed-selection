digraph "unitGraph" {
    "r4 := @this: com.thealgorithms.sorts.CycleSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 = lengthof r0"
    "i4 = 0"
    "$i1 = i0 - 2"
    "if i4 > $i1 goto return r0"
    "r7 = r0[i4]"
    "i5 = i4"
    "i6 = i4 + 1"
    "if i6 >= i0 goto (branch)"
    "$r6 = r0[i6]"
    "$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r6, r7)"
    "if $z1 == 0 goto i6 = i6 + 1"
    "i5 = i5 + 1"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "if i5 != i4 goto $r1 = r0[i5]"
    "goto [?= i4 = i4 + 1]"
    "$r1 = r0[i5]"
    "$i2 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)"
    "if $i2 != 0 goto (branch)"
    "goto [?= $r1 = r0[i5]]"
    "if i5 == i4 goto (branch)"
    "r7 = specialinvoke r4.<com.thealgorithms.sorts.CycleSort: java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable)>(r0, i5, r7)"
    "if i5 == i4 goto i4 = i4 + 1"
    "i7 = i4 + 1"
    "if i7 >= i0 goto $r2 = r0[i5]"
    "$r5 = r0[i7]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r5, r7)"
    "if $z0 == 0 goto i7 = i7 + 1"
    "i7 = i7 + 1"
    "$r2 = r0[i5]"
    "$i3 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)"
    "if $i3 != 0 goto $r3 = r0[i5]"
    "goto [?= $r2 = r0[i5]]"
    "$r3 = r0[i5]"
    "if r7 == $r3 goto (branch)"
    "i4 = i4 + 1"
    "goto [?= $i1 = i0 - 2]"
    "return r0"
    "r4 := @this: com.thealgorithms.sorts.CycleSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i4 = 0";
    "i4 = 0"->"$i1 = i0 - 2";
    "$i1 = i0 - 2"->"if i4 > $i1 goto return r0";
    "if i4 > $i1 goto return r0"->"r7 = r0[i4]";
    "if i4 > $i1 goto return r0"->"return r0";
    "r7 = r0[i4]"->"i5 = i4";
    "i5 = i4"->"i6 = i4 + 1";
    "i6 = i4 + 1"->"if i6 >= i0 goto (branch)";
    "if i6 >= i0 goto (branch)"->"$r6 = r0[i6]";
    "if i6 >= i0 goto (branch)"->"if i5 != i4 goto $r1 = r0[i5]";
    "$r6 = r0[i6]"->"$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r6, r7)";
    "$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r6, r7)"->"if $z1 == 0 goto i6 = i6 + 1";
    "if $z1 == 0 goto i6 = i6 + 1"->"i5 = i5 + 1";
    "if $z1 == 0 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "i5 = i5 + 1"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i0 goto (branch)";
    "if i5 != i4 goto $r1 = r0[i5]"->"goto [?= i4 = i4 + 1]";
    "if i5 != i4 goto $r1 = r0[i5]"->"$r1 = r0[i5]";
    "goto [?= i4 = i4 + 1]"->"i4 = i4 + 1";
    "$r1 = r0[i5]"->"$i2 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)";
    "$i2 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)"->"if $i2 != 0 goto (branch)";
    "if $i2 != 0 goto (branch)"->"i5 = i5 + 1";
    "if $i2 != 0 goto (branch)"->"if i5 == i4 goto (branch)";
    "i5 = i5 + 1"->"goto [?= $r1 = r0[i5]]";
    "goto [?= $r1 = r0[i5]]"->"$r1 = r0[i5]";
    "if i5 == i4 goto (branch)"->"r7 = specialinvoke r4.<com.thealgorithms.sorts.CycleSort: java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable)>(r0, i5, r7)";
    "if i5 == i4 goto (branch)"->"if i5 == i4 goto i4 = i4 + 1";
    "r7 = specialinvoke r4.<com.thealgorithms.sorts.CycleSort: java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable)>(r0, i5, r7)"->"if i5 == i4 goto i4 = i4 + 1";
    "if i5 == i4 goto i4 = i4 + 1"->"i5 = i4";
    "if i5 == i4 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "i5 = i4"->"i7 = i4 + 1";
    "i7 = i4 + 1"->"if i7 >= i0 goto $r2 = r0[i5]";
    "if i7 >= i0 goto $r2 = r0[i5]"->"$r5 = r0[i7]";
    "if i7 >= i0 goto $r2 = r0[i5]"->"$r2 = r0[i5]";
    "$r5 = r0[i7]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r5, r7)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r5, r7)"->"if $z0 == 0 goto i7 = i7 + 1";
    "if $z0 == 0 goto i7 = i7 + 1"->"i5 = i5 + 1";
    "if $z0 == 0 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "i5 = i5 + 1"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 >= i0 goto $r2 = r0[i5]";
    "$r2 = r0[i5]"->"$i3 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)";
    "$i3 = interfaceinvoke r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)"->"if $i3 != 0 goto $r3 = r0[i5]";
    "if $i3 != 0 goto $r3 = r0[i5]"->"i5 = i5 + 1";
    "if $i3 != 0 goto $r3 = r0[i5]"->"$r3 = r0[i5]";
    "i5 = i5 + 1"->"goto [?= $r2 = r0[i5]]";
    "goto [?= $r2 = r0[i5]]"->"$r2 = r0[i5]";
    "$r3 = r0[i5]"->"if r7 == $r3 goto (branch)";
    "if r7 == $r3 goto (branch)"->"r7 = specialinvoke r4.<com.thealgorithms.sorts.CycleSort: java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable)>(r0, i5, r7)";
    "if r7 == $r3 goto (branch)"->"if i5 == i4 goto i4 = i4 + 1";
    "r7 = specialinvoke r4.<com.thealgorithms.sorts.CycleSort: java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable)>(r0, i5, r7)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 == i4 goto i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= $i1 = i0 - 2]";
    "goto [?= $i1 = i0 - 2]"->"$i1 = i0 - 2";
}
