digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @this: com.thealgorithms.sorts.PancakeSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i5 = 0;
"
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i5 >= i0 goto return r0;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
r3 = r0[0];
i6 = 0;
i7 = 0;
"
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$i1 = i0 - i5;
if i7 >= $i1 goto $i2 = lengthof r0;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r1 = r0[i7];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1);
if $z0 == 0 goto i7 = i7 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
r3 = r0[i7];
i6 = i7;
"
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
i7 = i7 + 1;
goto [?= $i1 = i0 - i5];
"
    "Block 7:
[preds: 3 ] [succs: 1 ]
$i2 = lengthof r0;
$i3 = $i2 - 1;
$i4 = $i3 - i5;
staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4);
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 1 ] [succs: ]
return r0;
"
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @this: com.thealgorithms.sorts.PancakeSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i5 = 0;
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i5 >= i0 goto return r0;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i5 >= i0 goto return r0;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
r3 = r0[0];
i6 = 0;
i7 = 0;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i5 >= i0 goto return r0;
"->"Block 8:
[preds: 1 ] [succs: ]
return r0;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
r3 = r0[0];
i6 = 0;
i7 = 0;
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$i1 = i0 - i5;
if i7 >= $i1 goto $i2 = lengthof r0;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$i1 = i0 - i5;
if i7 >= $i1 goto $i2 = lengthof r0;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r1 = r0[i7];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1);
if $z0 == 0 goto i7 = i7 + 1;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$i1 = i0 - i5;
if i7 >= $i1 goto $i2 = lengthof r0;
"->"Block 7:
[preds: 3 ] [succs: 1 ]
$i2 = lengthof r0;
$i3 = $i2 - 1;
$i4 = $i3 - i5;
staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4);
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r1 = r0[i7];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1);
if $z0 == 0 goto i7 = i7 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
r3 = r0[i7];
i6 = i7;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r1 = r0[i7];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r3, $r1);
if $z0 == 0 goto i7 = i7 + 1;
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
i7 = i7 + 1;
goto [?= $i1 = i0 - i5];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
r3 = r0[i7];
i6 = i7;
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
i7 = i7 + 1;
goto [?= $i1 = i0 - i5];
";
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
i7 = i7 + 1;
goto [?= $i1 = i0 - i5];
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$i1 = i0 - i5;
if i7 >= $i1 goto $i2 = lengthof r0;
";
    "Block 7:
[preds: 3 ] [succs: 1 ]
$i2 = lengthof r0;
$i3 = $i2 - 1;
$i4 = $i3 - i5;
staticinvoke <com.thealgorithms.sorts.SortUtils: void flip(java.lang.Comparable[],int,int)>(r0, i6, $i4);
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i5 >= i0 goto return r0;
";
}
