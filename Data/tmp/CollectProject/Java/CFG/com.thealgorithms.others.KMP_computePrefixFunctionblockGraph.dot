digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
i0 = virtualinvoke r0.<java.lang.String: int length()>();
r1 = newarray (int)[i0];
r1[0] = 0;
i6 = 0;
i7 = 1;
"
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i7 >= i0 goto return r1;
"
    "Block 2:
[preds: 1 4 ] [succs: 3 5 ]
if i6 <= 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c3 == $c4 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"
    "Block 4:
[preds: 3 ] [succs: 2 ]
$i5 = i6 - 1;
i6 = r1[$i5];
goto [?= (branch)];
"
    "Block 5:
[preds: 2 3 ] [succs: 6 7 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c1 != $c2 goto r1[i7] = i6;
"
    "Block 6:
[preds: 5 ] [succs: 7 ]
i6 = i6 + 1;
"
    "Block 7:
[preds: 5 6 ] [succs: 1 ]
r1[i7] = i6;
i7 = i7 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 1 ] [succs: ]
return r1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
i0 = virtualinvoke r0.<java.lang.String: int length()>();
r1 = newarray (int)[i0];
r1[0] = 0;
i6 = 0;
i7 = 1;
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i7 >= i0 goto return r1;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i7 >= i0 goto return r1;
"->"Block 2:
[preds: 1 4 ] [succs: 3 5 ]
if i6 <= 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i7 >= i0 goto return r1;
"->"Block 8:
[preds: 1 ] [succs: ]
return r1;
";
    "Block 2:
[preds: 1 4 ] [succs: 3 5 ]
if i6 <= 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c3 == $c4 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
";
    "Block 2:
[preds: 1 4 ] [succs: 3 5 ]
if i6 <= 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"->"Block 5:
[preds: 2 3 ] [succs: 6 7 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c1 != $c2 goto r1[i7] = i6;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c3 == $c4 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"->"Block 4:
[preds: 3 ] [succs: 2 ]
$i5 = i6 - 1;
i6 = r1[$i5];
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c3 == $c4 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
"->"Block 5:
[preds: 2 3 ] [succs: 6 7 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c1 != $c2 goto r1[i7] = i6;
";
    "Block 4:
[preds: 3 ] [succs: 2 ]
$i5 = i6 - 1;
i6 = r1[$i5];
goto [?= (branch)];
"->"Block 2:
[preds: 1 4 ] [succs: 3 5 ]
if i6 <= 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
";
    "Block 5:
[preds: 2 3 ] [succs: 6 7 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c1 != $c2 goto r1[i7] = i6;
"->"Block 6:
[preds: 5 ] [succs: 7 ]
i6 = i6 + 1;
";
    "Block 5:
[preds: 2 3 ] [succs: 6 7 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
if $c1 != $c2 goto r1[i7] = i6;
"->"Block 7:
[preds: 5 6 ] [succs: 1 ]
r1[i7] = i6;
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 7 ]
i6 = i6 + 1;
"->"Block 7:
[preds: 5 6 ] [succs: 1 ]
r1[i7] = i6;
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 7:
[preds: 5 6 ] [succs: 1 ]
r1[i7] = i6;
i7 = i7 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i7 >= i0 goto return r1;
";
}
