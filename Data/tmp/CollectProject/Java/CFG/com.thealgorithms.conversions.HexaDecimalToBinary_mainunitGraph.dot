digraph "unitGraph" {
    "r13 := @parameter0: java.lang.String[]"
    "$r0 = newarray (java.lang.String)[11]"
    "$r0[0] = \"1\""
    "$r0[1] = \"A1\""
    "$r0[2] = \"ef\""
    "$r0[3] = \"BA\""
    "$r0[4] = \"AA\""
    "$r0[5] = \"BB\""
    "$r0[6] = \"19\""
    "$r0[7] = \"01\""
    "$r0[8] = \"02\""
    "$r0[9] = \"03\""
    "$r0[10] = \"04\""
    "r1 = $r0"
    "$r2 = new com.thealgorithms.conversions.HexaDecimalToBinary"
    "specialinvoke $r2.<com.thealgorithms.conversions.HexaDecimalToBinary: void <init>()>()"
    "r3 = $r2"
    "r4 = r1"
    "i0 = lengthof r4"
    "i1 = 0"
    "if i1 >= i0 goto return"
    "r5 = r4[i1]"
    "$r7 = <java.lang.System: java.io.PrintStream out>"
    "$r6 = new java.lang.StringBuilder"
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" = \")"
    "$r10 = virtualinvoke r3.<com.thealgorithms.conversions.HexaDecimalToBinary: java.lang.String convert(java.lang.String)>(r5)"
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r13 := @parameter0: java.lang.String[]"->"$r0 = newarray (java.lang.String)[11]";
    "$r0 = newarray (java.lang.String)[11]"->"$r0[0] = \"1\"";
    "$r0[0] = \"1\""->"$r0[1] = \"A1\"";
    "$r0[1] = \"A1\""->"$r0[2] = \"ef\"";
    "$r0[2] = \"ef\""->"$r0[3] = \"BA\"";
    "$r0[3] = \"BA\""->"$r0[4] = \"AA\"";
    "$r0[4] = \"AA\""->"$r0[5] = \"BB\"";
    "$r0[5] = \"BB\""->"$r0[6] = \"19\"";
    "$r0[6] = \"19\""->"$r0[7] = \"01\"";
    "$r0[7] = \"01\""->"$r0[8] = \"02\"";
    "$r0[8] = \"02\""->"$r0[9] = \"03\"";
    "$r0[9] = \"03\""->"$r0[10] = \"04\"";
    "$r0[10] = \"04\""->"r1 = $r0";
    "r1 = $r0"->"$r2 = new com.thealgorithms.conversions.HexaDecimalToBinary";
    "$r2 = new com.thealgorithms.conversions.HexaDecimalToBinary"->"specialinvoke $r2.<com.thealgorithms.conversions.HexaDecimalToBinary: void <init>()>()";
    "specialinvoke $r2.<com.thealgorithms.conversions.HexaDecimalToBinary: void <init>()>()"->"r3 = $r2";
    "r3 = $r2"->"r4 = r1";
    "r4 = r1"->"i0 = lengthof r4";
    "i0 = lengthof r4"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return";
    "if i1 >= i0 goto return"->"r5 = r4[i1]";
    "if i1 >= i0 goto return"->"return";
    "r5 = r4[i1]"->"$r7 = <java.lang.System: java.io.PrintStream out>";
    "$r7 = <java.lang.System: java.io.PrintStream out>"->"$r6 = new java.lang.StringBuilder";
    "$r6 = new java.lang.StringBuilder"->"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"->"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)";
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" = \")";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" = \")"->"$r10 = virtualinvoke r3.<com.thealgorithms.conversions.HexaDecimalToBinary: java.lang.String convert(java.lang.String)>(r5)";
    "$r10 = virtualinvoke r3.<com.thealgorithms.conversions.HexaDecimalToBinary: java.lang.String convert(java.lang.String)>(r5)"->"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)";
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12)";
    "virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return";
}
