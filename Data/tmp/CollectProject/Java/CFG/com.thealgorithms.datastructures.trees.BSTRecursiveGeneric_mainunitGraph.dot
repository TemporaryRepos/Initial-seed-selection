digraph "unitGraph" {
    "r29 := @parameter0: java.lang.String[]"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\")"
    "$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric"
    "specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()"
    "r2 = $r1"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3)"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4)"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5)"
    "$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"
    "$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27)"
    "if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "$r28 = new java.lang.AssertionError"
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"4 is not yet present in BST\")"
    "throw $r28"
    "$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25)"
    "if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "$r26 = new java.lang.AssertionError"
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")"
    "throw $r26"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6)"
    "$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23)"
    "if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r24 = new java.lang.AssertionError"
    "specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"9 was just deleted from BST\")"
    "throw $r24"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7)"
    "$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21)"
    "if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"
    "$r22 = new java.lang.AssertionError"
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since 1 was not present so find deleting would do no change\")"
    "throw $r22"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8)"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9)"
    "$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)"
    "$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19)"
    "if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "$r20 = new java.lang.AssertionError"
    "specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"70 was inserted but not found\")"
    "throw $r20"
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "$r10 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r10.<java.io.PrintStream: void println()>()"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\")"
    "$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric"
    "specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()"
    "r13 = $r12"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\")"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\")"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\")"
    "$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\")"
    "if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "$r18 = new java.lang.AssertionError"
    "specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"girl is not yet present in BST\")"
    "throw $r18"
    "$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"
    "$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\")"
    "if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"
    "$r17 = new java.lang.AssertionError"
    "specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")"
    "throw $r17"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"
    "$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"
    "$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\")"
    "if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"
    "$r16 = new java.lang.AssertionError"
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"date was just deleted from BST\")"
    "throw $r16"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"
    "$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"
    "$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\")"
    "if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"
    "$r15 = new java.lang.AssertionError"
    "specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since boy was not present so deleting would do no change\")"
    "throw $r15"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\")"
    "$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"
    "if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\")"
    "if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "$r14 = new java.lang.AssertionError"
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"hills was inserted but not found\")"
    "throw $r14"
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"
    "return"
    "r29 := @parameter0: java.lang.String[]"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\")";
    "virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\")"->"$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric";
    "$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric"->"specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()";
    "specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3)"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4)"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5)"->"$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)";
    "if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27)";
    "$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27)"->"if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$r28 = new java.lang.AssertionError";
    "if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$r28 = new java.lang.AssertionError"->"specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"4 is not yet present in BST\")";
    "specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"4 is not yet present in BST\")"->"throw $r28";
    "$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25)";
    "$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25)"->"if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r26 = new java.lang.AssertionError";
    "if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "$r26 = new java.lang.AssertionError"->"specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")";
    "specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")"->"throw $r26";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6)"->"$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23)";
    "$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23)"->"if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r24 = new java.lang.AssertionError";
    "if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "$r24 = new java.lang.AssertionError"->"specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"9 was just deleted from BST\")";
    "specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"9 was just deleted from BST\")"->"throw $r24";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7)"->"$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)";
    "if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"->"$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)";
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21)";
    "$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21)"->"if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)";
    "if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"->"$r22 = new java.lang.AssertionError";
    "if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)";
    "$r22 = new java.lang.AssertionError"->"specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since 1 was not present so find deleting would do no change\")";
    "specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since 1 was not present so find deleting would do no change\")"->"throw $r22";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8)"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9)";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9)"->"$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)";
    "if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)"->"$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19)";
    "$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19)"->"if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"$r20 = new java.lang.AssertionError";
    "if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "$r20 = new java.lang.AssertionError"->"specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"70 was inserted but not found\")";
    "specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"70 was inserted but not found\")"->"throw $r20";
    "virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"$r10 = <java.lang.System: java.io.PrintStream out>";
    "$r10 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r10.<java.io.PrintStream: void println()>()";
    "virtualinvoke $r10.<java.io.PrintStream: void println()>()"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\")";
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\")"->"$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric";
    "$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric"->"specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()";
    "specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>()"->"r13 = $r12";
    "r13 = $r12"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\")";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\")";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\")";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\")"->"$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\")";
    "if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\")"->"if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$r18 = new java.lang.AssertionError";
    "if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$r18 = new java.lang.AssertionError"->"specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"girl is not yet present in BST\")";
    "specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"girl is not yet present in BST\")"->"throw $r18";
    "$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")";
    "if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"->"$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\")";
    "if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")";
    "$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\")"->"if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")";
    "if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"->"$r17 = new java.lang.AssertionError";
    "if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")";
    "$r17 = new java.lang.AssertionError"->"specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")";
    "specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\")"->"throw $r17";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\")"->"$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")";
    "if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"->"$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\")";
    "if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")";
    "$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\")"->"if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")";
    "if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"->"$r16 = new java.lang.AssertionError";
    "if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")";
    "$r16 = new java.lang.AssertionError"->"specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"date was just deleted from BST\")";
    "specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"date was just deleted from BST\")"->"throw $r16";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\")"->"$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")";
    "if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"->"$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\")";
    "if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")";
    "$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\")"->"if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")";
    "if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"->"$r15 = new java.lang.AssertionError";
    "if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")";
    "$r15 = new java.lang.AssertionError"->"specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since boy was not present so deleting would do no change\")";
    "specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since boy was not present so deleting would do no change\")"->"throw $r15";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\")"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\")";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\")"->"$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>";
    "$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>"->"if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\")";
    "if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\")"->"if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"$r14 = new java.lang.AssertionError";
    "if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()";
    "$r14 = new java.lang.AssertionError"->"specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"hills was inserted but not found\")";
    "specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"hills was inserted but not found\")"->"throw $r14";
    "virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>()"->"return";
}
