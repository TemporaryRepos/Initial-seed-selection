digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: char[][];
r2 := @parameter1: java.lang.String[];
$r0 = new com.thealgorithms.misc.Trie;
specialinvoke $r0.<com.thealgorithms.misc.Trie: void <init>()>();
r1 = $r0;
r8 = r2;
i4 = lengthof r8;
i5 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i4 goto $r3 = new java.util.HashSet;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r9 = r8[i5];
virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9);
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r3 = new java.util.HashSet;
specialinvoke $r3.<java.util.HashSet: void <init>()>();
r10 = $r3;
$i1 = lengthof r4;
$i0 = lengthof r4;
r11 = newmultiarray (boolean)[$i1][$i0];
i6 = 0;
"
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
$i2 = lengthof r4;
if i6 >= $i2 goto $r5 = new java.util.ArrayList;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i7 = 0;
"
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$r6 = r4[i6];
$i3 = lengthof $r6;
if i7 >= $i3 goto i6 = i6 + 1;
"
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>;
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10);
i7 = i7 + 1;
goto [?= $r6 = r4[i6]];
"
    "Block 8:
[preds: 6 ] [succs: 4 ]
i6 = i6 + 1;
goto [?= $i2 = lengthof r4];
"
    "Block 9:
[preds: 4 ] [succs: ]
$r5 = new java.util.ArrayList;
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r10);
return $r5;
"
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: char[][];
r2 := @parameter1: java.lang.String[];
$r0 = new com.thealgorithms.misc.Trie;
specialinvoke $r0.<com.thealgorithms.misc.Trie: void <init>()>();
r1 = $r0;
r8 = r2;
i4 = lengthof r8;
i5 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i4 goto $r3 = new java.util.HashSet;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i4 goto $r3 = new java.util.HashSet;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r9 = r8[i5];
virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9);
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i4 goto $r3 = new java.util.HashSet;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$r3 = new java.util.HashSet;
specialinvoke $r3.<java.util.HashSet: void <init>()>();
r10 = $r3;
$i1 = lengthof r4;
$i0 = lengthof r4;
r11 = newmultiarray (boolean)[$i1][$i0];
i6 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r9 = r8[i5];
virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9);
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i4 goto $r3 = new java.util.HashSet;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r3 = new java.util.HashSet;
specialinvoke $r3.<java.util.HashSet: void <init>()>();
r10 = $r3;
$i1 = lengthof r4;
$i0 = lengthof r4;
r11 = newmultiarray (boolean)[$i1][$i0];
i6 = 0;
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
$i2 = lengthof r4;
if i6 >= $i2 goto $r5 = new java.util.ArrayList;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
$i2 = lengthof r4;
if i6 >= $i2 goto $r5 = new java.util.ArrayList;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i7 = 0;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
$i2 = lengthof r4;
if i6 >= $i2 goto $r5 = new java.util.ArrayList;
"->"Block 9:
[preds: 4 ] [succs: ]
$r5 = new java.util.ArrayList;
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r10);
return $r5;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i7 = 0;
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$r6 = r4[i6];
$i3 = lengthof $r6;
if i7 >= $i3 goto i6 = i6 + 1;
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$r6 = r4[i6];
$i3 = lengthof $r6;
if i7 >= $i3 goto i6 = i6 + 1;
"->"Block 7:
[preds: 6 ] [succs: 6 ]
$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>;
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10);
i7 = i7 + 1;
goto [?= $r6 = r4[i6]];
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$r6 = r4[i6];
$i3 = lengthof $r6;
if i7 >= $i3 goto i6 = i6 + 1;
"->"Block 8:
[preds: 6 ] [succs: 4 ]
i6 = i6 + 1;
goto [?= $i2 = lengthof r4];
";
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>;
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10);
i7 = i7 + 1;
goto [?= $r6 = r4[i6]];
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
$r6 = r4[i6];
$i3 = lengthof $r6;
if i7 >= $i3 goto i6 = i6 + 1;
";
    "Block 8:
[preds: 6 ] [succs: 4 ]
i6 = i6 + 1;
goto [?= $i2 = lengthof r4];
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
$i2 = lengthof r4;
if i6 >= $i2 goto $r5 = new java.util.ArrayList;
";
}
