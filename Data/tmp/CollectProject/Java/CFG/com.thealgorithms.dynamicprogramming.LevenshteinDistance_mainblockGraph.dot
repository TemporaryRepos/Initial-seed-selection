digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r11 := @parameter0: java.lang.String[];
r0 = \"\";
r1 = \"\";
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Levenshtein distance between \");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" and \");
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" is: \");
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r9);
$r10 = <java.lang.System: java.io.PrintStream out>;
$i0 = staticinvoke <com.thealgorithms.dynamicprogramming.LevenshteinDistance: int calculateLevenshteinDistance(java.lang.String,java.lang.String)>(r0, r1);
virtualinvoke $r10.<java.io.PrintStream: void println(int)>($i0);
return;
"
}
