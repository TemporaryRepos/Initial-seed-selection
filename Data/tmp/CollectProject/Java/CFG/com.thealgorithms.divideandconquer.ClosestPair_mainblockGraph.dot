digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r75 := @parameter0: java.lang.String[];
$r0 = new com.thealgorithms.divideandconquer.ClosestPair;
specialinvoke $r0.<com.thealgorithms.divideandconquer.ClosestPair: void <init>(int)>(12);
r1 = $r0;
$r2 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r3 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 3.0);
$r2[0] = $r3;
$r4 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r5 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 16.0);
$r4[1] = $r5;
$r6 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r7 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(3.0, 9.0);
$r6[2] = $r7;
$r8 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r9 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(6.0, 3.0);
$r8[3] = $r9;
$r10 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r11 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(7.0, 7.0);
$r10[4] = $r11;
$r12 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r13 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(19.0, 4.0);
$r12[5] = $r13;
$r14 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r15 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(10.0, 11.0);
$r14[6] = $r15;
$r16 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r17 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 2.0);
$r16[7] = $r17;
$r18 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r19 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 19.0);
$r18[8] = $r19;
$r20 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r21 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(16.0, 11.0);
$r20[9] = $r21;
$r22 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r23 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(17.0, 13.0);
$r22[10] = $r23;
$r24 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r25 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(9.0, 12.0);
$r24[11] = $r25;
$r26 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>(\"Input data\");
$r28 = <java.lang.System: java.io.PrintStream out>;
$r27 = new java.lang.StringBuilder;
specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Number of points: \");
$r30 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i0 = lengthof $r30;
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r32);
i5 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i1 = lengthof $r33;
if i5 >= $i1 goto $r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r65 = <java.lang.System: java.io.PrintStream out>;
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x: \");
$r67 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r68 = $r67[i5];
$d4 = $r68.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", y: \");
$r71 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r72 = $r71[i5];
$d5 = $r72.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);
$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r74);
i5 = i5 + 1;
goto [?= $r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r34 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i2 = lengthof $r34;
$i3 = $i2 - 1;
virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: void xQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>($r35, 0, $i3);
$r37 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r36 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i4 = lengthof $r36;
d6 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>($r37, $i4);
$r38 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>(\"Output Data\");
$r40 = <java.lang.System: java.io.PrintStream out>;
$r39 = new java.lang.StringBuilder;
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r42 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1>;
$d0 = $r42.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r45 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1>;
$d1 = $r45.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r48);
$r50 = <java.lang.System: java.io.PrintStream out>;
$r49 = new java.lang.StringBuilder;
specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();
$r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r52 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2>;
$d2 = $r52.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);
$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r55 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2>;
$d3 = $r55.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r58);
$r60 = <java.lang.System: java.io.PrintStream out>;
$r59 = new java.lang.StringBuilder;
specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();
$r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Minimum Distance : \");
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d6);
$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r60.<java.io.PrintStream: void println(java.lang.String)>($r63);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r75 := @parameter0: java.lang.String[];
$r0 = new com.thealgorithms.divideandconquer.ClosestPair;
specialinvoke $r0.<com.thealgorithms.divideandconquer.ClosestPair: void <init>(int)>(12);
r1 = $r0;
$r2 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r3 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 3.0);
$r2[0] = $r3;
$r4 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r5 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 16.0);
$r4[1] = $r5;
$r6 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r7 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(3.0, 9.0);
$r6[2] = $r7;
$r8 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r9 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(6.0, 3.0);
$r8[3] = $r9;
$r10 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r11 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(7.0, 7.0);
$r10[4] = $r11;
$r12 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r13 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(19.0, 4.0);
$r12[5] = $r13;
$r14 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r15 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(10.0, 11.0);
$r14[6] = $r15;
$r16 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r17 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 2.0);
$r16[7] = $r17;
$r18 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r19 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 19.0);
$r18[8] = $r19;
$r20 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r21 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(16.0, 11.0);
$r20[9] = $r21;
$r22 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r23 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(17.0, 13.0);
$r22[10] = $r23;
$r24 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r25 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double)>(9.0, 12.0);
$r24[11] = $r25;
$r26 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>(\"Input data\");
$r28 = <java.lang.System: java.io.PrintStream out>;
$r27 = new java.lang.StringBuilder;
specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Number of points: \");
$r30 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i0 = lengthof $r30;
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r32);
i5 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i1 = lengthof $r33;
if i5 >= $i1 goto $r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i1 = lengthof $r33;
if i5 >= $i1 goto $r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r65 = <java.lang.System: java.io.PrintStream out>;
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x: \");
$r67 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r68 = $r67[i5];
$d4 = $r68.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", y: \");
$r71 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r72 = $r71[i5];
$d5 = $r72.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);
$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r74);
i5 = i5 + 1;
goto [?= $r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i1 = lengthof $r33;
if i5 >= $i1 goto $r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
"->"Block 3:
[preds: 1 ] [succs: ]
$r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r34 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i2 = lengthof $r34;
$i3 = $i2 - 1;
virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: void xQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>($r35, 0, $i3);
$r37 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r36 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i4 = lengthof $r36;
d6 = virtualinvoke r1.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>($r37, $i4);
$r38 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>(\"Output Data\");
$r40 = <java.lang.System: java.io.PrintStream out>;
$r39 = new java.lang.StringBuilder;
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r42 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1>;
$d0 = $r42.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r45 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1>;
$d1 = $r45.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r48);
$r50 = <java.lang.System: java.io.PrintStream out>;
$r49 = new java.lang.StringBuilder;
specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();
$r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\");
$r52 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2>;
$d2 = $r52.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);
$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \");
$r55 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2>;
$d3 = $r55.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\")\");
$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r58);
$r60 = <java.lang.System: java.io.PrintStream out>;
$r59 = new java.lang.StringBuilder;
specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();
$r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Minimum Distance : \");
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d6);
$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r60.<java.io.PrintStream: void println(java.lang.String)>($r63);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r65 = <java.lang.System: java.io.PrintStream out>;
$r64 = new java.lang.StringBuilder;
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
$r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x: \");
$r67 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r68 = $r67[i5];
$d4 = $r68.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>;
$r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", y: \");
$r71 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$r72 = $r71[i5];
$d5 = $r72.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>;
$r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);
$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r74);
i5 = i5 + 1;
goto [?= $r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$r33 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
$i1 = lengthof $r33;
if i5 >= $i1 goto $r35 = r1.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location[] array>;
";
}
