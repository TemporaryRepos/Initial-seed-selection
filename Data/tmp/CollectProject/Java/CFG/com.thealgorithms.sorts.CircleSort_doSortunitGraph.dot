digraph "unitGraph" {
    "r0 := @this: com.thealgorithms.sorts.CircleSort"
    "r1 := @parameter0: java.lang.Comparable[]"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "z2 = 0"
    "if i0 != i1 goto i7 = i0"
    "$r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)"
    "return $r9"
    "i7 = i0"
    "i8 = i1"
    "if i7 >= i8 goto (branch)"
    "$r8 = r1[i7]"
    "$r7 = r1[i8]"
    "$i6 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7)"
    "if $i6 <= 0 goto i7 = i7 + 1"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, i8)"
    "z2 = 1"
    "i7 = i7 + 1"
    "i8 = i8 + -1"
    "goto [?= (branch)]"
    "if i7 != i8 goto $i9 = i1 - i0"
    "$r6 = r1[i7]"
    "$i3 = i8 + 1"
    "$r5 = r1[$i3]"
    "$i4 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5)"
    "if $i4 <= 0 goto $i9 = i1 - i0"
    "$i5 = i8 + 1"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, $i5)"
    "$i9 = i1 - i0"
    "$i10 = $i9 / 2"
    "i2 = i0 + $i10"
    "r2 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, i0, i2)"
    "$i11 = i2 + 1"
    "r3 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, $i11, i1)"
    "if z2 != 0 goto $z3 = 1"
    "$z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>()"
    "if $z0 != 0 goto $z3 = 1"
    "$z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>()"
    "if $z1 == 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)]"
    "$z3 = 0"
    "$r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)"
    "return $r4"
    "r0 := @this: com.thealgorithms.sorts.CircleSort"->"r1 := @parameter0: java.lang.Comparable[]";
    "r1 := @parameter0: java.lang.Comparable[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"z2 = 0";
    "z2 = 0"->"if i0 != i1 goto i7 = i0";
    "if i0 != i1 goto i7 = i0"->"$r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)";
    "if i0 != i1 goto i7 = i0"->"i7 = i0";
    "$r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)"->"return $r9";
    "i7 = i0"->"i8 = i1";
    "i8 = i1"->"if i7 >= i8 goto (branch)";
    "if i7 >= i8 goto (branch)"->"$r8 = r1[i7]";
    "if i7 >= i8 goto (branch)"->"if i7 != i8 goto $i9 = i1 - i0";
    "$r8 = r1[i7]"->"$r7 = r1[i8]";
    "$r7 = r1[i8]"->"$i6 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7)";
    "$i6 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7)"->"if $i6 <= 0 goto i7 = i7 + 1";
    "if $i6 <= 0 goto i7 = i7 + 1"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, i8)";
    "if $i6 <= 0 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, i8)"->"z2 = 1";
    "z2 = 1"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"i8 = i8 + -1";
    "i8 = i8 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 >= i8 goto (branch)";
    "if i7 != i8 goto $i9 = i1 - i0"->"$r6 = r1[i7]";
    "if i7 != i8 goto $i9 = i1 - i0"->"$i9 = i1 - i0";
    "$r6 = r1[i7]"->"$i3 = i8 + 1";
    "$i3 = i8 + 1"->"$r5 = r1[$i3]";
    "$r5 = r1[$i3]"->"$i4 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5)";
    "$i4 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5)"->"if $i4 <= 0 goto $i9 = i1 - i0";
    "if $i4 <= 0 goto $i9 = i1 - i0"->"$i5 = i8 + 1";
    "if $i4 <= 0 goto $i9 = i1 - i0"->"$i9 = i1 - i0";
    "$i5 = i8 + 1"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, $i5)";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r1, i7, $i5)"->"z2 = 1";
    "z2 = 1"->"$i9 = i1 - i0";
    "$i9 = i1 - i0"->"$i10 = $i9 / 2";
    "$i10 = $i9 / 2"->"i2 = i0 + $i10";
    "i2 = i0 + $i10"->"r2 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, i0, i2)";
    "r2 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, i0, i2)"->"$i11 = i2 + 1";
    "$i11 = i2 + 1"->"r3 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, $i11, i1)";
    "r3 = specialinvoke r0.<com.thealgorithms.sorts.CircleSort: java.lang.Boolean doSort(java.lang.Comparable[],int,int)>(r1, $i11, i1)"->"if z2 != 0 goto $z3 = 1";
    "if z2 != 0 goto $z3 = 1"->"$z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>()";
    "if z2 != 0 goto $z3 = 1"->"$z3 = 1";
    "$z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>()"->"if $z0 != 0 goto $z3 = 1";
    "if $z0 != 0 goto $z3 = 1"->"$z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>()";
    "if $z0 != 0 goto $z3 = 1"->"$z3 = 1";
    "$z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>()"->"if $z1 == 0 goto $z3 = 0";
    "if $z1 == 0 goto $z3 = 0"->"$z3 = 1";
    "if $z1 == 0 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)]";
    "goto [?= $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)]"->"$r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)";
    "$z3 = 0"->"$r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)";
    "$r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)"->"return $r4";
}
