digraph "unitGraph" {
    "r0 := @parameter0: int[]"
    "i0 := @parameter1: int"
    "i1 = staticinvoke <com.thealgorithms.sorts.RadixSort: int getMax(int[],int)>(r0, i0)"
    "i3 = 1"
    "$i2 = i1 / i3"
    "if $i2 <= 0 goto return"
    "staticinvoke <com.thealgorithms.sorts.RadixSort: void countSort(int[],int,int)>(r0, i0, i3)"
    "i3 = i3 * 10"
    "goto [?= $i2 = i1 / i3]"
    "return"
    "r0 := @parameter0: int[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 = staticinvoke <com.thealgorithms.sorts.RadixSort: int getMax(int[],int)>(r0, i0)";
    "i1 = staticinvoke <com.thealgorithms.sorts.RadixSort: int getMax(int[],int)>(r0, i0)"->"i3 = 1";
    "i3 = 1"->"$i2 = i1 / i3";
    "$i2 = i1 / i3"->"if $i2 <= 0 goto return";
    "if $i2 <= 0 goto return"->"staticinvoke <com.thealgorithms.sorts.RadixSort: void countSort(int[],int,int)>(r0, i0, i3)";
    "if $i2 <= 0 goto return"->"return";
    "staticinvoke <com.thealgorithms.sorts.RadixSort: void countSort(int[],int,int)>(r0, i0, i3)"->"i3 = i3 * 10";
    "i3 = i3 * 10"->"goto [?= $i2 = i1 / i3]";
    "goto [?= $i2 = i1 / i3]"->"$i2 = i1 / i3";
}
