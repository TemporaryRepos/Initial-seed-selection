digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$r2 = newarray (int)[i0];
staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i0, r1, $r2, 0);
$z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();
if $z0 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"There is no way to place \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens on board of size \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r24);
goto [?= r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Arrangement for placing \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens\");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r8);
"
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto return;
"
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r11 = (java.util.List) $r10;
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();
$r14 = staticinvoke <com.thealgorithms.backtracking.NQueens$println__80: java.util.function.Consumer bootstrap$(java.io.PrintStream)>($r12);
interfaceinvoke r11.<java.util.List: void forEach(java.util.function.Consumer)>($r14);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println()>();
goto [?= $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 6:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$r2 = newarray (int)[i0];
staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i0, r1, $r2, 0);
$z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();
if $z0 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"There is no way to place \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens on board of size \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r24);
goto [?= r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
$r0 = new java.util.ArrayList;
specialinvoke $r0.<java.util.ArrayList: void <init>()>();
r1 = $r0;
$r2 = newarray (int)[i0];
staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i0, r1, $r2, 0);
$z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();
if $z0 == 0 goto $r4 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Arrangement for placing \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens\");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r8);
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"There is no way to place \");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens on board of size \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"x\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r24);
goto [?= r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()];
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
$r3 = new java.lang.StringBuilder;
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Arrangement for placing \");
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" queens\");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r8);
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto return;
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto return;
"->"Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r11 = (java.util.List) $r10;
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();
$r14 = staticinvoke <com.thealgorithms.backtracking.NQueens$println__80: java.util.function.Consumer bootstrap$(java.io.PrintStream)>($r12);
interfaceinvoke r11.<java.util.List: void forEach(java.util.function.Consumer)>($r14);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println()>();
goto [?= $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto return;
"->"Block 6:
[preds: 4 ] [succs: ]
return;
";
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r11 = (java.util.List) $r10;
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();
$r14 = staticinvoke <com.thealgorithms.backtracking.NQueens$println__80: java.util.function.Consumer bootstrap$(java.io.PrintStream)>($r12);
interfaceinvoke r11.<java.util.List: void forEach(java.util.function.Consumer)>($r14);
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println()>();
goto [?= $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto return;
";
}
