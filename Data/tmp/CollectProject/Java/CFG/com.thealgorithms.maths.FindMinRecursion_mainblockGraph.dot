digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r9 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 + 1;
r2 = newarray (int)[i1];
i10 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>();
$i9 = $i8 % 100;
r2[i10] = $i9;
i10 = i10 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 6 ]
$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = lengthof r2;
$i5 = $i4 - 1;
$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5);
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>();
if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r8 = new java.lang.AssertionError;
specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
throw $r8;
"
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z1 != 0 goto return;
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2);
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>();
if $i2 == $i3 goto return;
"
    "Block 8:
[preds: 7 ] [succs: ]
$r5 = new java.lang.AssertionError;
specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
throw $r5;
"
    "Block 9:
[preds: 6 7 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r9 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 + 1;
r2 = newarray (int)[i1];
i10 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>();
$i9 = $i8 % 100;
r2[i10] = $i9;
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 3:
[preds: 1 ] [succs: 4 6 ]
$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>();
$i9 = $i8 % 100;
r2[i10] = $i9;
i10 = i10 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
";
    "Block 3:
[preds: 1 ] [succs: 4 6 ]
$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = lengthof r2;
$i5 = $i4 - 1;
$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5);
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>();
if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
";
    "Block 3:
[preds: 1 ] [succs: 4 6 ]
$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z1 != 0 goto return;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = lengthof r2;
$i5 = $i4 - 1;
$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5);
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>();
if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 5:
[preds: 4 ] [succs: ]
$r8 = new java.lang.AssertionError;
specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
throw $r8;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = lengthof r2;
$i5 = $i4 - 1;
$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5);
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>();
if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z1 != 0 goto return;
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z1 != 0 goto return;
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2);
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>();
if $i2 == $i3 goto return;
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>;
if $z1 != 0 goto return;
"->"Block 9:
[preds: 6 7 ] [succs: ]
return;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2);
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>();
if $i2 == $i3 goto return;
"->"Block 8:
[preds: 7 ] [succs: ]
$r5 = new java.lang.AssertionError;
specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
throw $r5;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2);
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2);
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>();
$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>();
if $i2 == $i3 goto return;
"->"Block 9:
[preds: 6 7 ] [succs: ]
return;
";
}
