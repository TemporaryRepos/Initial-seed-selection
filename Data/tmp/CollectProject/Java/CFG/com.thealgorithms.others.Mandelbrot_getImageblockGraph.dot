digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
d5 := @parameter2: double;
d12 := @parameter3: double;
d0 := @parameter4: double;
i2 := @parameter5: int;
z0 := @parameter6: boolean;
if i0 > 0 goto (branch);
"
    "Block 1:
[preds: 0 ] [succs: ]
$r7 = new java.lang.IllegalArgumentException;
specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageWidth should be greater than zero\");
throw $r7;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i1 > 0 goto (branch);
"
    "Block 3:
[preds: 2 ] [succs: ]
$r6 = new java.lang.IllegalArgumentException;
specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageHeight should be greater than zero\");
throw $r6;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i2 > 0 goto $r0 = new java.awt.image.BufferedImage;
"
    "Block 5:
[preds: 4 ] [succs: ]
$r5 = new java.lang.IllegalArgumentException;
specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"maxStep should be greater than zero\");
throw $r5;
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
$r0 = new java.awt.image.BufferedImage;
specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);
r1 = $r0;
$d1 = (double) i0;
$d3 = d0 / $d1;
$d2 = (double) i1;
d4 = $d3 * $d2;
i5 = 0;
"
    "Block 7:
[preds: 6 14 ] [succs: 8 15 ]
if i5 >= i0 goto return r1;
"
    "Block 8:
[preds: 7 ] [succs: 9 ]
i6 = 0;
"
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i6 >= i1 goto i5 = i5 + 1;
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$d7 = (double) i5;
$d6 = (double) i0;
$d8 = $d7 / $d6;
$d9 = $d8 - 0.5;
$d10 = $d9 * d0;
d11 = d5 + $d10;
$d14 = (double) i6;
$d13 = (double) i1;
$d15 = $d14 / $d13;
$d16 = $d15 - 0.5;
$d17 = $d16 * d4;
d18 = d12 + $d17;
d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2);
$i3 = i5;
$i4 = i6;
if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
"
    "Block 11:
[preds: 10 ] [succs: 13 ]
$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19);
$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>();
goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)];
"
    "Block 12:
[preds: 10 ] [succs: 13 ]
$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>();
"
    "Block 13:
[preds: 11 12 ] [succs: 9 ]
virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7);
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 14:
[preds: 9 ] [succs: 7 ]
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 15:
[preds: 7 ] [succs: ]
return r1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
d5 := @parameter2: double;
d12 := @parameter3: double;
d0 := @parameter4: double;
i2 := @parameter5: int;
z0 := @parameter6: boolean;
if i0 > 0 goto (branch);
"->"Block 1:
[preds: 0 ] [succs: ]
$r7 = new java.lang.IllegalArgumentException;
specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageWidth should be greater than zero\");
throw $r7;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
d5 := @parameter2: double;
d12 := @parameter3: double;
d0 := @parameter4: double;
i2 := @parameter5: int;
z0 := @parameter6: boolean;
if i0 > 0 goto (branch);
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
if i1 > 0 goto (branch);
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i1 > 0 goto (branch);
"->"Block 3:
[preds: 2 ] [succs: ]
$r6 = new java.lang.IllegalArgumentException;
specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageHeight should be greater than zero\");
throw $r6;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i1 > 0 goto (branch);
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
if i2 > 0 goto $r0 = new java.awt.image.BufferedImage;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i2 > 0 goto $r0 = new java.awt.image.BufferedImage;
"->"Block 5:
[preds: 4 ] [succs: ]
$r5 = new java.lang.IllegalArgumentException;
specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"maxStep should be greater than zero\");
throw $r5;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i2 > 0 goto $r0 = new java.awt.image.BufferedImage;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
$r0 = new java.awt.image.BufferedImage;
specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);
r1 = $r0;
$d1 = (double) i0;
$d3 = d0 / $d1;
$d2 = (double) i1;
d4 = $d3 * $d2;
i5 = 0;
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
$r0 = new java.awt.image.BufferedImage;
specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);
r1 = $r0;
$d1 = (double) i0;
$d3 = d0 / $d1;
$d2 = (double) i1;
d4 = $d3 * $d2;
i5 = 0;
"->"Block 7:
[preds: 6 14 ] [succs: 8 15 ]
if i5 >= i0 goto return r1;
";
    "Block 7:
[preds: 6 14 ] [succs: 8 15 ]
if i5 >= i0 goto return r1;
"->"Block 8:
[preds: 7 ] [succs: 9 ]
i6 = 0;
";
    "Block 7:
[preds: 6 14 ] [succs: 8 15 ]
if i5 >= i0 goto return r1;
"->"Block 15:
[preds: 7 ] [succs: ]
return r1;
";
    "Block 8:
[preds: 7 ] [succs: 9 ]
i6 = 0;
"->"Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i6 >= i1 goto i5 = i5 + 1;
";
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i6 >= i1 goto i5 = i5 + 1;
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
$d7 = (double) i5;
$d6 = (double) i0;
$d8 = $d7 / $d6;
$d9 = $d8 - 0.5;
$d10 = $d9 * d0;
d11 = d5 + $d10;
$d14 = (double) i6;
$d13 = (double) i1;
$d15 = $d14 / $d13;
$d16 = $d15 - 0.5;
$d17 = $d16 * d4;
d18 = d12 + $d17;
d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2);
$i3 = i5;
$i4 = i6;
if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
";
    "Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i6 >= i1 goto i5 = i5 + 1;
"->"Block 14:
[preds: 9 ] [succs: 7 ]
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$d7 = (double) i5;
$d6 = (double) i0;
$d8 = $d7 / $d6;
$d9 = $d8 - 0.5;
$d10 = $d9 * d0;
d11 = d5 + $d10;
$d14 = (double) i6;
$d13 = (double) i1;
$d15 = $d14 / $d13;
$d16 = $d15 - 0.5;
$d17 = $d16 * d4;
d18 = d12 + $d17;
d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2);
$i3 = i5;
$i4 = i6;
if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
"->"Block 11:
[preds: 10 ] [succs: 13 ]
$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19);
$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>();
goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)];
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$d7 = (double) i5;
$d6 = (double) i0;
$d8 = $d7 / $d6;
$d9 = $d8 - 0.5;
$d10 = $d9 * d0;
d11 = d5 + $d10;
$d14 = (double) i6;
$d13 = (double) i1;
$d15 = $d14 / $d13;
$d16 = $d15 - 0.5;
$d17 = $d16 * d4;
d18 = d12 + $d17;
d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2);
$i3 = i5;
$i4 = i6;
if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
"->"Block 12:
[preds: 10 ] [succs: 13 ]
$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>();
";
    "Block 11:
[preds: 10 ] [succs: 13 ]
$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19);
$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>();
goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)];
"->"Block 13:
[preds: 11 12 ] [succs: 9 ]
virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7);
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 12:
[preds: 10 ] [succs: 13 ]
$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19);
$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>();
"->"Block 13:
[preds: 11 12 ] [succs: 9 ]
virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7);
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 13:
[preds: 11 12 ] [succs: 9 ]
virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7);
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 9:
[preds: 8 13 ] [succs: 10 14 ]
if i6 >= i1 goto i5 = i5 + 1;
";
    "Block 14:
[preds: 9 ] [succs: 7 ]
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 7:
[preds: 6 14 ] [succs: 8 15 ]
if i5 >= i0 goto return r1;
";
}
