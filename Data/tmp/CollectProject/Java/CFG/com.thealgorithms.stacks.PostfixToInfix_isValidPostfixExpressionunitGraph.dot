digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String"
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if $i0 >= 3 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)"
    "return 0"
    "$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)"
    "$z0 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c1)"
    "if $z0 == 0 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)"
    "$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)"
    "$z1 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c2)"
    "if $z1 == 0 goto i7 = 0"
    "i7 = 0"
    "i8 = 0"
    "i9 = 0"
    "$i3 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if i9 >= $i3 goto $i4 = i8 + 1"
    "c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"
    "$z2 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>(c5)"
    "if $z2 == 0 goto (branch)"
    "i8 = i8 + 1"
    "if i8 < i7 goto i9 = i9 + 1"
    "if i8 != 0 goto $i6 = i8 + 1"
    "i7 = i7 + 1"
    "goto [?= i9 = i9 + 1]"
    "$i6 = i8 + 1"
    "if i7 == $i6 goto i7 = 2"
    "i7 = 2"
    "i9 = i9 + 1"
    "goto [?= $i3 = virtualinvoke r0.<java.lang.String: int length()>()]"
    "$i4 = i8 + 1"
    "if i7 != $i4 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= return $z3]"
    "$z3 = 0"
    "return $z3"
    "r0 := @parameter0: java.lang.String"->"$i0 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"->"if $i0 >= 3 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)";
    "if $i0 >= 3 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)"->"return 0";
    "if $i0 >= 3 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)"->"$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)";
    "$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)"->"$z0 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c1)";
    "$z0 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c1)"->"if $z0 == 0 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)";
    "if $z0 == 0 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)"->"return 0";
    "if $z0 == 0 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)"->"$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)";
    "$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)"->"$z1 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c2)";
    "$z1 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>($c2)"->"if $z1 == 0 goto i7 = 0";
    "if $z1 == 0 goto i7 = 0"->"return 0";
    "if $z1 == 0 goto i7 = 0"->"i7 = 0";
    "i7 = 0"->"i8 = 0";
    "i8 = 0"->"i9 = 0";
    "i9 = 0"->"$i3 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i3 = virtualinvoke r0.<java.lang.String: int length()>()"->"if i9 >= $i3 goto $i4 = i8 + 1";
    "if i9 >= $i3 goto $i4 = i8 + 1"->"c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)";
    "if i9 >= $i3 goto $i4 = i8 + 1"->"$i4 = i8 + 1";
    "c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"->"$z2 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>(c5)";
    "$z2 = staticinvoke <com.thealgorithms.stacks.PostfixToInfix: boolean isOperator(char)>(c5)"->"if $z2 == 0 goto (branch)";
    "if $z2 == 0 goto (branch)"->"i8 = i8 + 1";
    "if $z2 == 0 goto (branch)"->"if i8 != 0 goto $i6 = i8 + 1";
    "i8 = i8 + 1"->"if i8 < i7 goto i9 = i9 + 1";
    "if i8 < i7 goto i9 = i9 + 1"->"return 0";
    "if i8 < i7 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "if i8 != 0 goto $i6 = i8 + 1"->"i7 = i7 + 1";
    "if i8 != 0 goto $i6 = i8 + 1"->"$i6 = i8 + 1";
    "i7 = i7 + 1"->"goto [?= i9 = i9 + 1]";
    "goto [?= i9 = i9 + 1]"->"i9 = i9 + 1";
    "$i6 = i8 + 1"->"if i7 == $i6 goto i7 = 2";
    "if i7 == $i6 goto i7 = 2"->"return 0";
    "if i7 == $i6 goto i7 = 2"->"i7 = 2";
    "i7 = 2"->"i8 = 0";
    "i8 = 0"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= $i3 = virtualinvoke r0.<java.lang.String: int length()>()]";
    "goto [?= $i3 = virtualinvoke r0.<java.lang.String: int length()>()]"->"$i3 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i4 = i8 + 1"->"if i7 != $i4 goto $z3 = 0";
    "if i7 != $i4 goto $z3 = 0"->"$z3 = 1";
    "if i7 != $i4 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= return $z3]";
    "goto [?= return $z3]"->"return $z3";
    "$z3 = 0"->"return $z3";
}
