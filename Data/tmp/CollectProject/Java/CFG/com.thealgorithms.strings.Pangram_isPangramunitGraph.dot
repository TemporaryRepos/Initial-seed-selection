digraph "unitGraph" {
    "r1 := @parameter0: java.lang.String"
    "r0 = newarray (boolean)[26]"
    "r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()"
    "i3 = lengthof r2"
    "i4 = 0"
    "if i4 >= i3 goto r3 = r0"
    "c5 = r2[i4]"
    "$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c5)"
    "if $z0 == 0 goto $b6 = 97"
    "$b6 = 65"
    "goto [?= i0 = c5 - $b6]"
    "$b6 = 97"
    "i0 = c5 - $b6"
    "if i0 < 0 goto i4 = i4 + 1"
    "$i1 = lengthof r0"
    "if i0 >= $i1 goto i4 = i4 + 1"
    "r0[i0] = 1"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "r3 = r0"
    "i7 = lengthof r3"
    "i8 = 0"
    "if i8 >= i7 goto return 1"
    "z1 = r3[i8]"
    "if z1 != 0 goto i8 = i8 + 1"
    "return 0"
    "i8 = i8 + 1"
    "return 1"
    "r1 := @parameter0: java.lang.String"->"r0 = newarray (boolean)[26]";
    "r0 = newarray (boolean)[26]"->"r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()";
    "r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()"->"i3 = lengthof r2";
    "i3 = lengthof r2"->"i4 = 0";
    "i4 = 0"->"if i4 >= i3 goto r3 = r0";
    "if i4 >= i3 goto r3 = r0"->"c5 = r2[i4]";
    "if i4 >= i3 goto r3 = r0"->"r3 = r0";
    "c5 = r2[i4]"->"$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c5)";
    "$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c5)"->"if $z0 == 0 goto $b6 = 97";
    "if $z0 == 0 goto $b6 = 97"->"$b6 = 65";
    "if $z0 == 0 goto $b6 = 97"->"$b6 = 97";
    "$b6 = 65"->"goto [?= i0 = c5 - $b6]";
    "goto [?= i0 = c5 - $b6]"->"i0 = c5 - $b6";
    "$b6 = 97"->"i0 = c5 - $b6";
    "i0 = c5 - $b6"->"if i0 < 0 goto i4 = i4 + 1";
    "if i0 < 0 goto i4 = i4 + 1"->"$i1 = lengthof r0";
    "if i0 < 0 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "$i1 = lengthof r0"->"if i0 >= $i1 goto i4 = i4 + 1";
    "if i0 >= $i1 goto i4 = i4 + 1"->"r0[i0] = 1";
    "if i0 >= $i1 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "r0[i0] = 1"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i3 goto r3 = r0";
    "r3 = r0"->"i7 = lengthof r3";
    "i7 = lengthof r3"->"i8 = 0";
    "i8 = 0"->"if i8 >= i7 goto return 1";
    "if i8 >= i7 goto return 1"->"z1 = r3[i8]";
    "if i8 >= i7 goto return 1"->"return 1";
    "z1 = r3[i8]"->"if z1 != 0 goto i8 = i8 + 1";
    "if z1 != 0 goto i8 = i8 + 1"->"return 0";
    "if z1 != 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i7 goto return 1";
}
