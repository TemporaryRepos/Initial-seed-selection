digraph "unitGraph" {
    "r1 := @this: com.thealgorithms.sorts.CombSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 = lengthof r0"
    "i3 = i0"
    "z1 = 1"
    "if i3 != 1 goto i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)"
    "if z1 == 0 goto return r0"
    "i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)"
    "z1 = 0"
    "i4 = 0"
    "$i5 = i0 - i3"
    "if i4 >= $i5 goto (branch)"
    "$i1 = i4 + i3"
    "$r3 = r0[$i1]"
    "$r2 = r0[i4]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r3, $r2)"
    "if $z0 == 0 goto i4 = i4 + 1"
    "$i2 = i4 + i3"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i4, $i2)"
    "i4 = i4 + 1"
    "goto [?= $i5 = i0 - i3]"
    "goto [?= (branch)]"
    "return r0"
    "r1 := @this: com.thealgorithms.sorts.CombSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i3 = i0";
    "i3 = i0"->"z1 = 1";
    "z1 = 1"->"if i3 != 1 goto i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)";
    "if i3 != 1 goto i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)"->"if z1 == 0 goto return r0";
    "if i3 != 1 goto i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)"->"i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)";
    "if z1 == 0 goto return r0"->"i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)";
    "if z1 == 0 goto return r0"->"return r0";
    "i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)"->"z1 = 0";
    "z1 = 0"->"i4 = 0";
    "i4 = 0"->"$i5 = i0 - i3";
    "$i5 = i0 - i3"->"if i4 >= $i5 goto (branch)";
    "if i4 >= $i5 goto (branch)"->"$i1 = i4 + i3";
    "if i4 >= $i5 goto (branch)"->"goto [?= (branch)]";
    "$i1 = i4 + i3"->"$r3 = r0[$i1]";
    "$r3 = r0[$i1]"->"$r2 = r0[i4]";
    "$r2 = r0[i4]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r3, $r2)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r3, $r2)"->"if $z0 == 0 goto i4 = i4 + 1";
    "if $z0 == 0 goto i4 = i4 + 1"->"$i2 = i4 + i3";
    "if $z0 == 0 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "$i2 = i4 + i3"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i4, $i2)";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i4, $i2)"->"z1 = 1";
    "z1 = 1"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= $i5 = i0 - i3]";
    "goto [?= $i5 = i0 - i3]"->"$i5 = i0 - i3";
    "goto [?= (branch)]"->"if i3 != 1 goto i3 = specialinvoke r1.<com.thealgorithms.sorts.CombSort: int nextGap(int)>(i3)";
}
