digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 0 goto $r0 = new java.lang.ArithmeticException;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 0 goto (branch);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
$r0 = new java.lang.ArithmeticException;
specialinvoke $r0.<java.lang.ArithmeticException: void <init>()>();
throw $r0;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
if i0 == 0 goto $i2 = i0 - i1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i1 != 0 goto $i4 = i0 % i1;
"
    "Block 5:
[preds: 3 4 ] [succs: ]
$i2 = i0 - i1;
$i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);
return $i3;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$i4 = i0 % i1;
if $i4 != 0 goto $i5 = i0 % i1;
"
    "Block 7:
[preds: 6 ] [succs: ]
return i1;
"
    "Block 8:
[preds: 6 ] [succs: ]
$i5 = i0 % i1;
$i6 = staticinvoke <com.thealgorithms.maths.GCDRecursion: int gcd(int,int)>(i1, $i5);
return $i6;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 0 goto $r0 = new java.lang.ArithmeticException;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 0 goto (branch);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 0 goto $r0 = new java.lang.ArithmeticException;
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r0 = new java.lang.ArithmeticException;
specialinvoke $r0.<java.lang.ArithmeticException: void <init>()>();
throw $r0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 0 goto (branch);
"->"Block 2:
[preds: 0 1 ] [succs: ]
$r0 = new java.lang.ArithmeticException;
specialinvoke $r0.<java.lang.ArithmeticException: void <init>()>();
throw $r0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 0 goto (branch);
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
if i0 == 0 goto $i2 = i0 - i1;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
if i0 == 0 goto $i2 = i0 - i1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
if i1 != 0 goto $i4 = i0 % i1;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
if i0 == 0 goto $i2 = i0 - i1;
"->"Block 5:
[preds: 3 4 ] [succs: ]
$i2 = i0 - i1;
$i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);
return $i3;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i1 != 0 goto $i4 = i0 % i1;
"->"Block 5:
[preds: 3 4 ] [succs: ]
$i2 = i0 - i1;
$i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);
return $i3;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
if i1 != 0 goto $i4 = i0 % i1;
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
$i4 = i0 % i1;
if $i4 != 0 goto $i5 = i0 % i1;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$i4 = i0 % i1;
if $i4 != 0 goto $i5 = i0 % i1;
"->"Block 7:
[preds: 6 ] [succs: ]
return i1;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$i4 = i0 % i1;
if $i4 != 0 goto $i5 = i0 % i1;
"->"Block 8:
[preds: 6 ] [succs: ]
$i5 = i0 % i1;
$i6 = staticinvoke <com.thealgorithms.maths.GCDRecursion: int gcd(int,int)>(i1, $i5);
return $i6;
";
}
