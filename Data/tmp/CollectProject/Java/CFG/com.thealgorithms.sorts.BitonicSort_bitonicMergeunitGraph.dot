digraph "unitGraph" {
    "r0 := @this: com.thealgorithms.sorts.BitonicSort"
    "r1 := @parameter0: int[]"
    "i2 := @parameter1: int"
    "i0 := @parameter2: int"
    "i4 := @parameter3: int"
    "if i0 <= 1 goto return"
    "i1 = i0 / 2"
    "i7 = i2"
    "$i3 = i2 + i1"
    "if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)"
    "$i6 = i7 + i1"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4)"
    "i7 = i7 + 1"
    "goto [?= $i3 = i2 + i1]"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)"
    "$i5 = i2 + i1"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4)"
    "return"
    "r0 := @this: com.thealgorithms.sorts.BitonicSort"->"r1 := @parameter0: int[]";
    "r1 := @parameter0: int[]"->"i2 := @parameter1: int";
    "i2 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i4 := @parameter3: int";
    "i4 := @parameter3: int"->"if i0 <= 1 goto return";
    "if i0 <= 1 goto return"->"i1 = i0 / 2";
    "if i0 <= 1 goto return"->"return";
    "i1 = i0 / 2"->"i7 = i2";
    "i7 = i2"->"$i3 = i2 + i1";
    "$i3 = i2 + i1"->"if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)";
    "if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)"->"$i6 = i7 + i1";
    "if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)";
    "$i6 = i7 + i1"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4)";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $i3 = i2 + i1]";
    "goto [?= $i3 = i2 + i1]"->"$i3 = i2 + i1";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)"->"$i5 = i2 + i1";
    "$i5 = i2 + i1"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4)";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4)"->"return";
}
