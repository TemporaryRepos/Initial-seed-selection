digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 3 ]
r29 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\");
$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r2 = $r1;
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3);
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4);
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5);
$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27);
if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"
    "Block 2:
[preds: 1 ] [succs: ]
$r28 = new java.lang.AssertionError;
specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"4 is not yet present in BST\");
throw $r28;
"
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25);
if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"
    "Block 5:
[preds: 4 ] [succs: ]
$r26 = new java.lang.AssertionError;
specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\");
throw $r26;
"
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6);
$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23);
if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"
    "Block 8:
[preds: 7 ] [succs: ]
$r24 = new java.lang.AssertionError;
specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"9 was just deleted from BST\");
throw $r24;
"
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7);
$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21);
if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"
    "Block 11:
[preds: 10 ] [succs: ]
$r22 = new java.lang.AssertionError;
specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since 1 was not present so find deleting would do no change\");
throw $r22;
"
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8);
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9);
$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19);
if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"
    "Block 14:
[preds: 13 ] [succs: ]
$r20 = new java.lang.AssertionError;
specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"70 was inserted but not found\");
throw $r20;
"
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println()>();
$r11 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\");
$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r13 = $r12;
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\");
$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\");
if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"
    "Block 17:
[preds: 16 ] [succs: ]
$r18 = new java.lang.AssertionError;
specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"girl is not yet present in BST\");
throw $r18;
"
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\");
if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"
    "Block 20:
[preds: 19 ] [succs: ]
$r17 = new java.lang.AssertionError;
specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\");
throw $r17;
"
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\");
if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"
    "Block 23:
[preds: 22 ] [succs: ]
$r16 = new java.lang.AssertionError;
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"date was just deleted from BST\");
throw $r16;
"
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\");
if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"
    "Block 26:
[preds: 25 ] [succs: ]
$r15 = new java.lang.AssertionError;
specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since boy was not present so deleting would do no change\");
throw $r15;
"
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\");
$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\");
if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"
    "Block 29:
[preds: 28 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"hills was inserted but not found\");
throw $r14;
"
    "Block 30:
[preds: 27 28 ] [succs: ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
return;
"
    "Block 0:
[preds: ] [succs: 1 3 ]
r29 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\");
$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r2 = $r1;
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3);
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4);
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5);
$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27);
if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
";
    "Block 0:
[preds: ] [succs: 1 3 ]
r29 := @parameter0: java.lang.String[];
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for integer data...\");
$r1 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r1.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r2 = $r1;
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r3);
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r4);
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r5);
$z0 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z0 != 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27);
if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 2:
[preds: 1 ] [succs: ]
$r28 = new java.lang.AssertionError;
specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"4 is not yet present in BST\");
throw $r28;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$z19 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r27);
if $z19 == 0 goto $z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 3:
[preds: 0 1 ] [succs: 4 6 ]
$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25);
if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
";
    "Block 3:
[preds: 0 1 ] [succs: 4 6 ]
$z1 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z1 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6);
$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25);
if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"->"Block 5:
[preds: 4 ] [succs: ]
$r26 = new java.lang.AssertionError;
specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\");
throw $r26;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
$z18 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r25);
if $z18 != 0 goto $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
"->"Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6);
$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6);
$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23);
if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
";
    "Block 6:
[preds: 3 4 ] [succs: 7 9 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r6);
$z2 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z2 != 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7);
$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23);
if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"->"Block 8:
[preds: 7 ] [succs: ]
$r24 = new java.lang.AssertionError;
specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"9 was just deleted from BST\");
throw $r24;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);
$z17 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r23);
if $z17 == 0 goto $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
"->"Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7);
$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7);
$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21);
if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
";
    "Block 9:
[preds: 6 7 ] [succs: 10 12 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>($r7);
$z3 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z3 != 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8);
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9);
$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21);
if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"->"Block 11:
[preds: 10 ] [succs: ]
$r22 = new java.lang.AssertionError;
specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since 1 was not present so find deleting would do no change\");
throw $r22;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$z16 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r21);
if $z16 == 0 goto $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8);
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9);
$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8);
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9);
$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19);
if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r8);
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>($r9);
$z4 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z4 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println()>();
$r11 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\");
$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r13 = $r12;
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\");
$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19);
if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 14:
[preds: 13 ] [succs: ]
$r20 = new java.lang.AssertionError;
specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"70 was inserted but not found\");
throw $r20;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);
$z15 = virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>($r19);
if $z15 != 0 goto virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 15:
[preds: 12 13 ] [succs: 16 18 ]
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println()>();
$r11 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\");
$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r13 = $r12;
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\");
$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println()>();
$r11 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\");
$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r13 = $r12;
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\");
$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 16:
[preds: 15 ] [succs: 17 18 ]
$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\");
if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
";
    "Block 15:
[preds: 12 13 ] [succs: 16 18 ]
virtualinvoke r2.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println()>();
$r11 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(\"Testing for string data...\");
$r12 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
specialinvoke $r12.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void <init>()>();
r13 = $r12;
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"banana\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"pineapple\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"date\");
$z5 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z5 != 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\");
if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 17:
[preds: 16 ] [succs: ]
$r18 = new java.lang.AssertionError;
specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"girl is not yet present in BST\");
throw $r18;
";
    "Block 16:
[preds: 15 ] [succs: 17 18 ]
$z14 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"girl\");
if $z14 == 0 goto $z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
"->"Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"->"Block 19:
[preds: 18 ] [succs: 20 21 ]
$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\");
if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
";
    "Block 18:
[preds: 15 16 ] [succs: 19 21 ]
$z6 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z6 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"->"Block 21:
[preds: 18 19 ] [succs: 22 24 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\");
if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"->"Block 20:
[preds: 19 ] [succs: ]
$r17 = new java.lang.AssertionError;
specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"10 should be present in BST\");
throw $r17;
";
    "Block 19:
[preds: 18 ] [succs: 20 21 ]
$z13 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"pineapple\");
if $z13 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
"->"Block 21:
[preds: 18 19 ] [succs: 22 24 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
";
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"->"Block 22:
[preds: 21 ] [succs: 23 24 ]
$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\");
if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
";
    "Block 21:
[preds: 18 19 ] [succs: 22 24 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"date\");
$z7 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z7 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"->"Block 24:
[preds: 21 22 ] [succs: 25 27 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
";
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\");
if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"->"Block 23:
[preds: 22 ] [succs: ]
$r16 = new java.lang.AssertionError;
specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"date was just deleted from BST\");
throw $r16;
";
    "Block 22:
[preds: 21 ] [succs: 23 24 ]
$z12 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"date\");
if $z12 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
"->"Block 24:
[preds: 21 22 ] [succs: 25 27 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
";
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"->"Block 25:
[preds: 24 ] [succs: 26 27 ]
$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\");
if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
";
    "Block 24:
[preds: 21 22 ] [succs: 25 27 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void remove(java.lang.Comparable)>(\"boy\");
$z8 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z8 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"->"Block 27:
[preds: 24 25 ] [succs: 28 30 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\");
$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\");
if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"->"Block 26:
[preds: 25 ] [succs: ]
$r15 = new java.lang.AssertionError;
specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Since boy was not present so deleting would do no change\");
throw $r15;
";
    "Block 25:
[preds: 24 ] [succs: 26 27 ]
$z11 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"boy\");
if $z11 == 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
"->"Block 27:
[preds: 24 25 ] [succs: 28 30 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\");
$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\");
$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 28:
[preds: 27 ] [succs: 29 30 ]
$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\");
if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
";
    "Block 27:
[preds: 24 25 ] [succs: 28 30 ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"india\");
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void add(java.lang.Comparable)>(\"hills\");
$z9 = <com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean $assertionsDisabled>;
if $z9 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 30:
[preds: 27 28 ] [succs: ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
return;
";
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\");
if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 29:
[preds: 28 ] [succs: ]
$r14 = new java.lang.AssertionError;
specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"hills was inserted but not found\");
throw $r14;
";
    "Block 28:
[preds: 27 ] [succs: 29 30 ]
$z10 = virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: boolean find(java.lang.Comparable)>(\"hills\");
if $z10 != 0 goto virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
"->"Block 30:
[preds: 27 28 ] [succs: ]
virtualinvoke r13.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: void inorder()>();
return;
";
}
