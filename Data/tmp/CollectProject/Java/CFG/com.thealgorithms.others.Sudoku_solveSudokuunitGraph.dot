digraph "unitGraph" {
    "r0 := @parameter0: int[][]"
    "i0 := @parameter1: int"
    "i2 = -1"
    "i3 = -1"
    "z2 = 1"
    "i4 = 0"
    "if i4 >= i0 goto (branch)"
    "i5 = 0"
    "if i5 >= i0 goto (branch)"
    "$r3 = r0[i4]"
    "$i1 = $r3[i5]"
    "if $i1 != 0 goto i5 = i5 + 1"
    "i2 = i4"
    "i3 = i5"
    "z2 = 0"
    "goto [?= (branch)]"
    "i5 = i5 + 1"
    "if z2 != 0 goto i4 = i4 + 1"
    "i4 = i4 + 1"
    "if z2 == 0 goto i6 = 1"
    "return 1"
    "i6 = 1"
    "if i6 > i0 goto return 0"
    "$z0 = staticinvoke <com.thealgorithms.others.Sudoku: boolean isSafe(int[][],int,int,int)>(r0, i2, i3, i6)"
    "if $z0 == 0 goto i6 = i6 + 1"
    "$r1 = r0[i2]"
    "$r1[i3] = i6"
    "$z1 = staticinvoke <com.thealgorithms.others.Sudoku: boolean solveSudoku(int[][],int)>(r0, i0)"
    "if $z1 == 0 goto $r2 = r0[i2]"
    "$r2 = r0[i2]"
    "$r2[i3] = 0"
    "i6 = i6 + 1"
    "return 0"
    "r0 := @parameter0: int[][]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i2 = -1";
    "i2 = -1"->"i3 = -1";
    "i3 = -1"->"z2 = 1";
    "z2 = 1"->"i4 = 0";
    "i4 = 0"->"if i4 >= i0 goto (branch)";
    "if i4 >= i0 goto (branch)"->"i5 = 0";
    "if i4 >= i0 goto (branch)"->"if z2 == 0 goto i6 = 1";
    "i5 = 0"->"if i5 >= i0 goto (branch)";
    "if i5 >= i0 goto (branch)"->"$r3 = r0[i4]";
    "if i5 >= i0 goto (branch)"->"if z2 != 0 goto i4 = i4 + 1";
    "$r3 = r0[i4]"->"$i1 = $r3[i5]";
    "$i1 = $r3[i5]"->"if $i1 != 0 goto i5 = i5 + 1";
    "if $i1 != 0 goto i5 = i5 + 1"->"i2 = i4";
    "if $i1 != 0 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "i2 = i4"->"i3 = i5";
    "i3 = i5"->"z2 = 0";
    "z2 = 0"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if z2 != 0 goto i4 = i4 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto (branch)";
    "if z2 != 0 goto i4 = i4 + 1"->"goto [?= (branch)]";
    "if z2 != 0 goto i4 = i4 + 1"->"i4 = i4 + 1";
    "goto [?= (branch)]"->"if z2 == 0 goto i6 = 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i0 goto (branch)";
    "if z2 == 0 goto i6 = 1"->"return 1";
    "if z2 == 0 goto i6 = 1"->"i6 = 1";
    "i6 = 1"->"if i6 > i0 goto return 0";
    "if i6 > i0 goto return 0"->"$z0 = staticinvoke <com.thealgorithms.others.Sudoku: boolean isSafe(int[][],int,int,int)>(r0, i2, i3, i6)";
    "if i6 > i0 goto return 0"->"return 0";
    "$z0 = staticinvoke <com.thealgorithms.others.Sudoku: boolean isSafe(int[][],int,int,int)>(r0, i2, i3, i6)"->"if $z0 == 0 goto i6 = i6 + 1";
    "if $z0 == 0 goto i6 = i6 + 1"->"$r1 = r0[i2]";
    "if $z0 == 0 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$r1 = r0[i2]"->"$r1[i3] = i6";
    "$r1[i3] = i6"->"$z1 = staticinvoke <com.thealgorithms.others.Sudoku: boolean solveSudoku(int[][],int)>(r0, i0)";
    "$z1 = staticinvoke <com.thealgorithms.others.Sudoku: boolean solveSudoku(int[][],int)>(r0, i0)"->"if $z1 == 0 goto $r2 = r0[i2]";
    "if $z1 == 0 goto $r2 = r0[i2]"->"return 1";
    "if $z1 == 0 goto $r2 = r0[i2]"->"$r2 = r0[i2]";
    "$r2 = r0[i2]"->"$r2[i3] = 0";
    "$r2[i3] = 0"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 > i0 goto return 0";
}
