digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
$r1 = new java.util.Random;
specialinvoke $r1.<java.util.Random: void <init>()>();
r2 = $r1;
i8 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = lengthof r0;
if i8 >= $i0 goto staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i6 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100);
$i7 = $i6 - 50;
r0[i8] = $i7;
i8 = i8 + 1;
goto [?= $i0 = lengthof r0];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
i9 = 0;
$i1 = lengthof r0;
i2 = $i1 - 1;
"
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i9 >= i2 goto return;
"
    "Block 5:
[preds: 4 ] [succs: 6 8 ]
$z0 = <com.thealgorithms.sorts.BucketSort: boolean $assertionsDisabled>;
if $z0 != 0 goto i9 = i9 + 1;
"
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i5 = r0[i9];
$i3 = i9 + 1;
$i4 = r0[$i3];
if $i5 <= $i4 goto i9 = i9 + 1;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r4 = new java.lang.AssertionError;
specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
throw $r4;
"
    "Block 8:
[preds: 5 6 ] [succs: 4 ]
i9 = i9 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @parameter0: java.lang.String[];
r0 = newarray (int)[10];
$r1 = new java.util.Random;
specialinvoke $r1.<java.util.Random: void <init>()>();
r2 = $r1;
i8 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = lengthof r0;
if i8 >= $i0 goto staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = lengthof r0;
if i8 >= $i0 goto staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$i6 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100);
$i7 = $i6 - 50;
r0[i8] = $i7;
i8 = i8 + 1;
goto [?= $i0 = lengthof r0];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = lengthof r0;
if i8 >= $i0 goto staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
"->"Block 3:
[preds: 1 ] [succs: 4 ]
staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
i9 = 0;
$i1 = lengthof r0;
i2 = $i1 - 1;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i6 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100);
$i7 = $i6 - 50;
r0[i8] = $i7;
i8 = i8 + 1;
goto [?= $i0 = lengthof r0];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i0 = lengthof r0;
if i8 >= $i0 goto staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
staticinvoke <com.thealgorithms.sorts.BucketSort: int[] bucketSort(int[])>(r0);
i9 = 0;
$i1 = lengthof r0;
i2 = $i1 - 1;
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i9 >= i2 goto return;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i9 >= i2 goto return;
"->"Block 5:
[preds: 4 ] [succs: 6 8 ]
$z0 = <com.thealgorithms.sorts.BucketSort: boolean $assertionsDisabled>;
if $z0 != 0 goto i9 = i9 + 1;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i9 >= i2 goto return;
"->"Block 9:
[preds: 4 ] [succs: ]
return;
";
    "Block 5:
[preds: 4 ] [succs: 6 8 ]
$z0 = <com.thealgorithms.sorts.BucketSort: boolean $assertionsDisabled>;
if $z0 != 0 goto i9 = i9 + 1;
"->"Block 6:
[preds: 5 ] [succs: 7 8 ]
$i5 = r0[i9];
$i3 = i9 + 1;
$i4 = r0[$i3];
if $i5 <= $i4 goto i9 = i9 + 1;
";
    "Block 5:
[preds: 4 ] [succs: 6 8 ]
$z0 = <com.thealgorithms.sorts.BucketSort: boolean $assertionsDisabled>;
if $z0 != 0 goto i9 = i9 + 1;
"->"Block 8:
[preds: 5 6 ] [succs: 4 ]
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i5 = r0[i9];
$i3 = i9 + 1;
$i4 = r0[$i3];
if $i5 <= $i4 goto i9 = i9 + 1;
"->"Block 7:
[preds: 6 ] [succs: ]
$r4 = new java.lang.AssertionError;
specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
throw $r4;
";
    "Block 6:
[preds: 5 ] [succs: 7 8 ]
$i5 = r0[i9];
$i3 = i9 + 1;
$i4 = r0[$i3];
if $i5 <= $i4 goto i9 = i9 + 1;
"->"Block 8:
[preds: 5 6 ] [succs: 4 ]
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 5 6 ] [succs: 4 ]
i9 = i9 + 1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i9 >= i2 goto return;
";
}
