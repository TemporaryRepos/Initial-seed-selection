digraph "unitGraph" {
    "r13 := @this: com.thealgorithms.sorts.CountingSort"
    "r3 := @parameter0: java.util.List"
    "$r0 = new java.util.TreeMap"
    "specialinvoke $r0.<java.util.TreeMap: void <init>()>()"
    "r1 = $r0"
    "$r2 = new java.util.ArrayList"
    "$i0 = interfaceinvoke r3.<java.util.List: int size()>()"
    "specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)"
    "r4 = $r2"
    "$r5 = staticinvoke <com.thealgorithms.sorts.CountingSort$lambda_sort_0__101: java.util.function.Consumer bootstrap$(java.util.Map)>(r1)"
    "interfaceinvoke r3.<java.util.List: void forEach(java.util.function.Consumer)>($r5)"
    "$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()"
    "r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto return r4"
    "$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()"
    "r9 = (java.util.Map$Entry) $r8"
    "i2 = 0"
    "$r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r11 = (java.lang.Integer) $r10"
    "$i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>()"
    "if i2 >= $i1 goto (branch)"
    "$r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12)"
    "i2 = i2 + 1"
    "goto [?= $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()]"
    "goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"
    "return r4"
    "r13 := @this: com.thealgorithms.sorts.CountingSort"->"r3 := @parameter0: java.util.List";
    "r3 := @parameter0: java.util.List"->"$r0 = new java.util.TreeMap";
    "$r0 = new java.util.TreeMap"->"specialinvoke $r0.<java.util.TreeMap: void <init>()>()";
    "specialinvoke $r0.<java.util.TreeMap: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.util.ArrayList";
    "$r2 = new java.util.ArrayList"->"$i0 = interfaceinvoke r3.<java.util.List: int size()>()";
    "$i0 = interfaceinvoke r3.<java.util.List: int size()>()"->"specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)";
    "specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)"->"r4 = $r2";
    "r4 = $r2"->"$r5 = staticinvoke <com.thealgorithms.sorts.CountingSort$lambda_sort_0__101: java.util.function.Consumer bootstrap$(java.util.Map)>(r1)";
    "$r5 = staticinvoke <com.thealgorithms.sorts.CountingSort$lambda_sort_0__101: java.util.function.Consumer bootstrap$(java.util.Map)>(r1)"->"interfaceinvoke r3.<java.util.List: void forEach(java.util.function.Consumer)>($r5)";
    "interfaceinvoke r3.<java.util.List: void forEach(java.util.function.Consumer)>($r5)"->"$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()";
    "$r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()"->"r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()";
    "r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto return r4";
    "if $z0 == 0 goto return r4"->"$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto return r4"->"return r4";
    "$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()"->"r9 = (java.util.Map$Entry) $r8";
    "r9 = (java.util.Map$Entry) $r8"->"i2 = 0";
    "i2 = 0"->"$r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r11 = (java.lang.Integer) $r10";
    "$r11 = (java.lang.Integer) $r10"->"$i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>()";
    "$i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>()"->"if i2 >= $i1 goto (branch)";
    "if i2 >= $i1 goto (branch)"->"$r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "if i2 >= $i1 goto (branch)"->"goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]";
    "$r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>()"->"interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12)";
    "interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()]";
    "goto [?= $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()]"->"$r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
}
