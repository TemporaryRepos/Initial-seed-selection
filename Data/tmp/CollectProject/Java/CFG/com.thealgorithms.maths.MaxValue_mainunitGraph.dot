digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.Random"
    "specialinvoke $r0.<java.util.Random: void <init>()>()"
    "r1 = $r0"
    "i6 = 1"
    "if i6 > 100 goto return"
    "$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"
    "i1 = $i0 - 50"
    "$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"
    "i3 = $i2 - 50"
    "$z0 = <com.thealgorithms.maths.MaxValue: boolean $assertionsDisabled>"
    "if $z0 != 0 goto i6 = i6 + 1"
    "$i4 = staticinvoke <com.thealgorithms.maths.MaxValue: int max(int,int)>(i1, i3)"
    "$i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i3)"
    "if $i4 == $i5 goto i6 = i6 + 1"
    "$r2 = new java.lang.AssertionError"
    "specialinvoke $r2.<java.lang.AssertionError: void <init>()>()"
    "throw $r2"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"$r0 = new java.util.Random";
    "$r0 = new java.util.Random"->"specialinvoke $r0.<java.util.Random: void <init>()>()";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i6 = 1";
    "i6 = 1"->"if i6 > 100 goto return";
    "if i6 > 100 goto return"->"$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)";
    "if i6 > 100 goto return"->"return";
    "$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"->"i1 = $i0 - 50";
    "i1 = $i0 - 50"->"$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)";
    "$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"->"i3 = $i2 - 50";
    "i3 = $i2 - 50"->"$z0 = <com.thealgorithms.maths.MaxValue: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.maths.MaxValue: boolean $assertionsDisabled>"->"if $z0 != 0 goto i6 = i6 + 1";
    "if $z0 != 0 goto i6 = i6 + 1"->"$i4 = staticinvoke <com.thealgorithms.maths.MaxValue: int max(int,int)>(i1, i3)";
    "if $z0 != 0 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$i4 = staticinvoke <com.thealgorithms.maths.MaxValue: int max(int,int)>(i1, i3)"->"$i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i3)";
    "$i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i3)"->"if $i4 == $i5 goto i6 = i6 + 1";
    "if $i4 == $i5 goto i6 = i6 + 1"->"$r2 = new java.lang.AssertionError";
    "if $i4 == $i5 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$r2 = new java.lang.AssertionError"->"specialinvoke $r2.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r2.<java.lang.AssertionError: void <init>()>()"->"throw $r2";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 > 100 goto return";
}
