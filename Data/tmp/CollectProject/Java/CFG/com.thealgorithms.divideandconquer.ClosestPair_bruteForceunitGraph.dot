digraph "unitGraph" {
    "r5 := @this: com.thealgorithms.divideandconquer.ClosestPair"
    "r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"
    "d16 = 1.7976931348623157E308"
    "d17 = 0.0"
    "$i0 = lengthof r0"
    "if $i0 != 2 goto $i7 = lengthof r0"
    "$r8 = r0[0]"
    "$d9 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r9 = r0[1]"
    "$d8 = $r9.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "d18 = $d9 - $d8"
    "$r10 = r0[0]"
    "$d11 = $r10.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "$r11 = r0[1]"
    "$d10 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "d19 = $d11 - $d10"
    "$d12 = staticinvoke <java.lang.Math: double pow(double,double)>(d18, 2.0)"
    "$d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d19, 2.0)"
    "$d14 = $d12 + $d13"
    "d20 = staticinvoke <java.lang.Math: double sqrt(double)>($d14)"
    "$d15 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"
    "$b6 = d20 cmpg $d15"
    "if $b6 >= 0 goto $r12 = r0[0]"
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d20)"
    "$r12 = r0[0]"
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r12"
    "$r13 = r0[1]"
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r13"
    "d17 = d20"
    "$i7 = lengthof r0"
    "if $i7 != 3 goto return d17"
    "i8 = 0"
    "$i1 = lengthof r0"
    "$i2 = $i1 - 1"
    "if i8 >= $i2 goto d17 = d16"
    "i9 = i8 + 1"
    "$i3 = lengthof r0"
    "if i9 >= $i3 goto i8 = i8 + 1"
    "$r1 = r0[i8]"
    "$d1 = $r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r2 = r0[i9]"
    "$d0 = $r2.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "d21 = $d1 - $d0"
    "$r3 = r0[i8]"
    "$d3 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "$r4 = r0[i9]"
    "$d2 = $r4.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "d22 = $d3 - $d2"
    "$d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 2.0)"
    "$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d22, 2.0)"
    "$d6 = $d4 + $d5"
    "d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d6)"
    "$b4 = d23 cmpg d16"
    "if $b4 >= 0 goto i9 = i9 + 1"
    "d16 = d23"
    "$d7 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"
    "$b5 = d23 cmpg $d7"
    "if $b5 >= 0 goto i9 = i9 + 1"
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d23)"
    "$r6 = r0[i8]"
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r6"
    "$r7 = r0[i9]"
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r7"
    "i9 = i9 + 1"
    "goto [?= $i3 = lengthof r0]"
    "i8 = i8 + 1"
    "goto [?= $i1 = lengthof r0]"
    "d17 = d16"
    "return d17"
    "r5 := @this: com.thealgorithms.divideandconquer.ClosestPair"->"r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]";
    "r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"->"d16 = 1.7976931348623157E308";
    "d16 = 1.7976931348623157E308"->"d17 = 0.0";
    "d17 = 0.0"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if $i0 != 2 goto $i7 = lengthof r0";
    "if $i0 != 2 goto $i7 = lengthof r0"->"$r8 = r0[0]";
    "if $i0 != 2 goto $i7 = lengthof r0"->"$i7 = lengthof r0";
    "$r8 = r0[0]"->"$d9 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d9 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r9 = r0[1]";
    "$r9 = r0[1]"->"$d8 = $r9.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d8 = $r9.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"d18 = $d9 - $d8";
    "d18 = $d9 - $d8"->"$r10 = r0[0]";
    "$r10 = r0[0]"->"$d11 = $r10.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d11 = $r10.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"$r11 = r0[1]";
    "$r11 = r0[1]"->"$d10 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d10 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"d19 = $d11 - $d10";
    "d19 = $d11 - $d10"->"$d12 = staticinvoke <java.lang.Math: double pow(double,double)>(d18, 2.0)";
    "$d12 = staticinvoke <java.lang.Math: double pow(double,double)>(d18, 2.0)"->"$d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d19, 2.0)";
    "$d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d19, 2.0)"->"$d14 = $d12 + $d13";
    "$d14 = $d12 + $d13"->"d20 = staticinvoke <java.lang.Math: double sqrt(double)>($d14)";
    "d20 = staticinvoke <java.lang.Math: double sqrt(double)>($d14)"->"$d15 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>";
    "$d15 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"->"$b6 = d20 cmpg $d15";
    "$b6 = d20 cmpg $d15"->"if $b6 >= 0 goto $r12 = r0[0]";
    "if $b6 >= 0 goto $r12 = r0[0]"->"staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d20)";
    "if $b6 >= 0 goto $r12 = r0[0]"->"$r12 = r0[0]";
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d20)"->"$r12 = r0[0]";
    "$r12 = r0[0]"->"r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r12";
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r12"->"$r13 = r0[1]";
    "$r13 = r0[1]"->"r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r13";
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r13"->"d17 = d20";
    "d17 = d20"->"$i7 = lengthof r0";
    "$i7 = lengthof r0"->"if $i7 != 3 goto return d17";
    "if $i7 != 3 goto return d17"->"i8 = 0";
    "if $i7 != 3 goto return d17"->"return d17";
    "i8 = 0"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"$i2 = $i1 - 1";
    "$i2 = $i1 - 1"->"if i8 >= $i2 goto d17 = d16";
    "if i8 >= $i2 goto d17 = d16"->"i9 = i8 + 1";
    "if i8 >= $i2 goto d17 = d16"->"d17 = d16";
    "i9 = i8 + 1"->"$i3 = lengthof r0";
    "$i3 = lengthof r0"->"if i9 >= $i3 goto i8 = i8 + 1";
    "if i9 >= $i3 goto i8 = i8 + 1"->"$r1 = r0[i8]";
    "if i9 >= $i3 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$r1 = r0[i8]"->"$d1 = $r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d1 = $r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r2 = r0[i9]";
    "$r2 = r0[i9]"->"$d0 = $r2.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d0 = $r2.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"d21 = $d1 - $d0";
    "d21 = $d1 - $d0"->"$r3 = r0[i8]";
    "$r3 = r0[i8]"->"$d3 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d3 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"$r4 = r0[i9]";
    "$r4 = r0[i9]"->"$d2 = $r4.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d2 = $r4.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"d22 = $d3 - $d2";
    "d22 = $d3 - $d2"->"$d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 2.0)";
    "$d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 2.0)"->"$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d22, 2.0)";
    "$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d22, 2.0)"->"$d6 = $d4 + $d5";
    "$d6 = $d4 + $d5"->"d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d6)";
    "d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d6)"->"$b4 = d23 cmpg d16";
    "$b4 = d23 cmpg d16"->"if $b4 >= 0 goto i9 = i9 + 1";
    "if $b4 >= 0 goto i9 = i9 + 1"->"d16 = d23";
    "if $b4 >= 0 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "d16 = d23"->"$d7 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>";
    "$d7 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"->"$b5 = d23 cmpg $d7";
    "$b5 = d23 cmpg $d7"->"if $b5 >= 0 goto i9 = i9 + 1";
    "if $b5 >= 0 goto i9 = i9 + 1"->"staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d23)";
    "if $b5 >= 0 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d23)"->"$r6 = r0[i8]";
    "$r6 = r0[i8]"->"r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r6";
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r6"->"$r7 = r0[i9]";
    "$r7 = r0[i9]"->"r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r7";
    "r5.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r7"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= $i3 = lengthof r0]";
    "goto [?= $i3 = lengthof r0]"->"$i3 = lengthof r0";
    "i8 = i8 + 1"->"goto [?= $i1 = lengthof r0]";
    "goto [?= $i1 = lengthof r0]"->"$i1 = lengthof r0";
    "d17 = d16"->"return d17";
}
