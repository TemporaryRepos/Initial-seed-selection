digraph "unitGraph" {
    "r5 := @this: com.thealgorithms.sorts.CocktailShakerSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 = lengthof r0"
    "i5 = 0"
    "i6 = i0 - 1"
    "if i5 >= i6 goto return r0"
    "i7 = 0"
    "i8 = i5"
    "if i8 >= i6 goto i6 = i7"
    "$i3 = i8 + 1"
    "$r4 = r0[$i3]"
    "$r3 = r0[i8]"
    "$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r4, $r3)"
    "if $z1 == 0 goto i8 = i8 + 1"
    "$i4 = i8 + 1"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i8, $i4)"
    "i7 = i8"
    "i8 = i8 + 1"
    "goto [?= (branch)]"
    "i6 = i7"
    "i9 = i0 - 1"
    "i10 = i6"
    "if i10 <= i5 goto i5 = i9"
    "$r2 = r0[i10]"
    "$i1 = i10 - 1"
    "$r1 = r0[$i1]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)"
    "if $z0 == 0 goto i10 = i10 + -1"
    "$i2 = i10 - 1"
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, $i2, i10)"
    "i9 = i10"
    "i10 = i10 + -1"
    "i5 = i9"
    "return r0"
    "r5 := @this: com.thealgorithms.sorts.CocktailShakerSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i5 = 0";
    "i5 = 0"->"i6 = i0 - 1";
    "i6 = i0 - 1"->"if i5 >= i6 goto return r0";
    "if i5 >= i6 goto return r0"->"i7 = 0";
    "if i5 >= i6 goto return r0"->"return r0";
    "i7 = 0"->"i8 = i5";
    "i8 = i5"->"if i8 >= i6 goto i6 = i7";
    "if i8 >= i6 goto i6 = i7"->"$i3 = i8 + 1";
    "if i8 >= i6 goto i6 = i7"->"i6 = i7";
    "$i3 = i8 + 1"->"$r4 = r0[$i3]";
    "$r4 = r0[$i3]"->"$r3 = r0[i8]";
    "$r3 = r0[i8]"->"$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r4, $r3)";
    "$z1 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r4, $r3)"->"if $z1 == 0 goto i8 = i8 + 1";
    "if $z1 == 0 goto i8 = i8 + 1"->"$i4 = i8 + 1";
    "if $z1 == 0 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$i4 = i8 + 1"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i8, $i4)";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, i8, $i4)"->"i7 = i8";
    "i7 = i8"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i6 goto i6 = i7";
    "i6 = i7"->"i9 = i0 - 1";
    "i9 = i0 - 1"->"i10 = i6";
    "i10 = i6"->"if i10 <= i5 goto i5 = i9";
    "if i10 <= i5 goto i5 = i9"->"$r2 = r0[i10]";
    "if i10 <= i5 goto i5 = i9"->"i5 = i9";
    "$r2 = r0[i10]"->"$i1 = i10 - 1";
    "$i1 = i10 - 1"->"$r1 = r0[$i1]";
    "$r1 = r0[$i1]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>($r2, $r1)"->"if $z0 == 0 goto i10 = i10 + -1";
    "if $z0 == 0 goto i10 = i10 + -1"->"$i2 = i10 - 1";
    "if $z0 == 0 goto i10 = i10 + -1"->"i10 = i10 + -1";
    "$i2 = i10 - 1"->"staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, $i2, i10)";
    "staticinvoke <com.thealgorithms.sorts.SortUtils: void swap(java.lang.Object[],int,int)>(r0, $i2, i10)"->"i9 = i10";
    "i9 = i10"->"i10 = i10 + -1";
    "i10 = i10 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 <= i5 goto i5 = i9";
    "i5 = i9"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i6 goto return r0";
}
