digraph "unitGraph" {
    "d0 := @parameter0: double"
    "d1 := @parameter1: double"
    "d6 := @parameter2: double"
    "d7 := @parameter3: double"
    "r0 = newarray (double)[4]"
    "$d2 = d0 + d1"
    "$d3 = $d2 / 2.0"
    "r0[0] = $d3"
    "$d4 = d0 * d1"
    "$d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4)"
    "r0[1] = $d5"
    "$d8 = r0[0]"
    "$d9 = d0 - $d8"
    "$d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, 2.0)"
    "$d11 = d7 * $d10"
    "$d12 = d6 - $d11"
    "r0[2] = $d12"
    "$d13 = 2.0 * d7"
    "r0[3] = $d13"
    "return r0"
    "d0 := @parameter0: double"->"d1 := @parameter1: double";
    "d1 := @parameter1: double"->"d6 := @parameter2: double";
    "d6 := @parameter2: double"->"d7 := @parameter3: double";
    "d7 := @parameter3: double"->"r0 = newarray (double)[4]";
    "r0 = newarray (double)[4]"->"$d2 = d0 + d1";
    "$d2 = d0 + d1"->"$d3 = $d2 / 2.0";
    "$d3 = $d2 / 2.0"->"r0[0] = $d3";
    "r0[0] = $d3"->"$d4 = d0 * d1";
    "$d4 = d0 * d1"->"$d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4)";
    "$d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4)"->"r0[1] = $d5";
    "r0[1] = $d5"->"$d8 = r0[0]";
    "$d8 = r0[0]"->"$d9 = d0 - $d8";
    "$d9 = d0 - $d8"->"$d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, 2.0)";
    "$d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, 2.0)"->"$d11 = d7 * $d10";
    "$d11 = d7 * $d10"->"$d12 = d6 - $d11";
    "$d12 = d6 - $d11"->"r0[2] = $d12";
    "r0[2] = $d12"->"$d13 = 2.0 * d7";
    "$d13 = 2.0 * d7"->"r0[3] = $d13";
    "r0[3] = $d13"->"return r0";
}
