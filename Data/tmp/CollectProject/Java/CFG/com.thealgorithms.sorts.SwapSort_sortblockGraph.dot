digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @this: com.thealgorithms.sorts.SwapSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i3 = 0;
"
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i1 = i0 - 1;
if i3 >= $i1 goto return r0;
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
i2 = specialinvoke r1.<com.thealgorithms.sorts.SwapSort: int getSmallerElementCount(java.lang.Comparable[],int)>(r0, i3);
if i2 <= 0 goto i3 = i3 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i3 == i2 goto i3 = i3 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 6 ]
r2 = r0[i3];
$r3 = r0[i2];
r0[i3] = $r3;
r0[i2] = r2;
goto [?= (branch)];
"
    "Block 5:
[preds: 2 3 ] [succs: 6 ]
i3 = i3 + 1;
"
    "Block 6:
[preds: 4 5 ] [succs: 1 ]
goto [?= $i1 = i0 - 1];
"
    "Block 7:
[preds: 1 ] [succs: ]
return r0;
"
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @this: com.thealgorithms.sorts.SwapSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i3 = 0;
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i1 = i0 - 1;
if i3 >= $i1 goto return r0;
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i1 = i0 - 1;
if i3 >= $i1 goto return r0;
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
i2 = specialinvoke r1.<com.thealgorithms.sorts.SwapSort: int getSmallerElementCount(java.lang.Comparable[],int)>(r0, i3);
if i2 <= 0 goto i3 = i3 + 1;
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i1 = i0 - 1;
if i3 >= $i1 goto return r0;
"->"Block 7:
[preds: 1 ] [succs: ]
return r0;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
i2 = specialinvoke r1.<com.thealgorithms.sorts.SwapSort: int getSmallerElementCount(java.lang.Comparable[],int)>(r0, i3);
if i2 <= 0 goto i3 = i3 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
if i3 == i2 goto i3 = i3 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
i2 = specialinvoke r1.<com.thealgorithms.sorts.SwapSort: int getSmallerElementCount(java.lang.Comparable[],int)>(r0, i3);
if i2 <= 0 goto i3 = i3 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 6 ]
i3 = i3 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i3 == i2 goto i3 = i3 + 1;
"->"Block 4:
[preds: 3 ] [succs: 6 ]
r2 = r0[i3];
$r3 = r0[i2];
r0[i3] = $r3;
r0[i2] = r2;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i3 == i2 goto i3 = i3 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 6 ]
i3 = i3 + 1;
";
    "Block 4:
[preds: 3 ] [succs: 6 ]
r2 = r0[i3];
$r3 = r0[i2];
r0[i3] = $r3;
r0[i2] = r2;
goto [?= (branch)];
"->"Block 6:
[preds: 4 5 ] [succs: 1 ]
goto [?= $i1 = i0 - 1];
";
    "Block 5:
[preds: 2 3 ] [succs: 6 ]
i3 = i3 + 1;
"->"Block 6:
[preds: 4 5 ] [succs: 1 ]
goto [?= $i1 = i0 - 1];
";
    "Block 6:
[preds: 4 5 ] [succs: 1 ]
goto [?= $i1 = i0 - 1];
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$i1 = i0 - 1;
if i3 >= $i1 goto return r0;
";
}
