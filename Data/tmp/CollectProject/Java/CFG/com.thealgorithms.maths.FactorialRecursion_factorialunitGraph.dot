digraph "unitGraph" {
    "i0 := @parameter0: int"
    "if i0 >= 0 goto (branch)"
    "$r0 = new java.lang.IllegalArgumentException"
    "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"number is negative\")"
    "throw $r0"
    "if i0 == 0 goto $l4 = 1L"
    "if i0 != 1 goto $l2 = (long) i0"
    "$l4 = 1L"
    "goto [?= return $l4]"
    "$l2 = (long) i0"
    "$i1 = i0 - 1"
    "$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1)"
    "$l4 = $l2 * $l3"
    "return $l4"
    "i0 := @parameter0: int"->"if i0 >= 0 goto (branch)";
    "if i0 >= 0 goto (branch)"->"$r0 = new java.lang.IllegalArgumentException";
    "if i0 >= 0 goto (branch)"->"if i0 == 0 goto $l4 = 1L";
    "$r0 = new java.lang.IllegalArgumentException"->"specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"number is negative\")";
    "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"number is negative\")"->"throw $r0";
    "if i0 == 0 goto $l4 = 1L"->"if i0 != 1 goto $l2 = (long) i0";
    "if i0 == 0 goto $l4 = 1L"->"$l4 = 1L";
    "if i0 != 1 goto $l2 = (long) i0"->"$l4 = 1L";
    "if i0 != 1 goto $l2 = (long) i0"->"$l2 = (long) i0";
    "$l4 = 1L"->"goto [?= return $l4]";
    "goto [?= return $l4]"->"return $l4";
    "$l2 = (long) i0"->"$i1 = i0 - 1";
    "$i1 = i0 - 1"->"$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1)";
    "$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1)"->"$l4 = $l2 * $l3";
    "$l4 = $l2 * $l3"->"return $l4";
}
