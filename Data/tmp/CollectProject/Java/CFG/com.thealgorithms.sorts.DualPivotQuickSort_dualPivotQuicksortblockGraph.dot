digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1);
$i2 = r1[0];
$i3 = $i2 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3);
$i4 = r1[0];
$i7 = $i4 + 1;
$i5 = r1[1];
$i6 = $i5 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6);
$i8 = r1[1];
$i9 = $i8 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1);
$i2 = r1[0];
$i3 = $i2 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3);
$i4 = r1[0];
$i7 = $i4 + 1;
$i5 = r1[1];
$i6 = $i5 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6);
$i8 = r1[1];
$i9 = $i8 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.Comparable[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1);
$i2 = r1[0];
$i3 = $i2 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3);
$i4 = r1[0];
$i7 = $i4 + 1;
$i5 = r1[1];
$i6 = $i5 - 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6);
$i8 = r1[1];
$i9 = $i8 + 1;
staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1);
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
}
