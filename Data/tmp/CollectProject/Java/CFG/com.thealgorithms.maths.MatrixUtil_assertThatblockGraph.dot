digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r2 = new java.lang.AssertionError;
$r3 = newarray (java.lang.Object)[2];
$r4 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>(r1);
$r3[0] = $r4;
$r5 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>(r0);
$r3[1] = $r5;
$r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"expected=%s but was actual=%s\", $r3);
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);
throw $r2;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r2 = new java.lang.AssertionError;
$r3 = newarray (java.lang.Object)[2];
$r4 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>(r1);
$r3[0] = $r4;
$r5 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>(r0);
$r3[1] = $r5;
$r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"expected=%s but was actual=%s\", $r3);
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);
throw $r2;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>(r0, r1);
if $z0 != 0 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
