digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i6 = 1;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 > 100 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 - 50;
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i3 = $i2 - 50;
$z0 = <com.thealgorithms.maths.MinValue: boolean $assertionsDisabled>;
if $z0 != 0 goto i6 = i6 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i4 = staticinvoke <com.thealgorithms.maths.MinValue: int min(int,int)>(i1, i3);
$i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);
if $i4 == $i5 goto i6 = i6 + 1;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.AssertionError;
specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
throw $r2;
"
    "Block 5:
[preds: 2 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i6 = 1;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 > 100 goto return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 > 100 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 - 50;
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i3 = $i2 - 50;
$z0 = <com.thealgorithms.maths.MinValue: boolean $assertionsDisabled>;
if $z0 != 0 goto i6 = i6 + 1;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 > 100 goto return;
"->"Block 6:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 - 50;
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i3 = $i2 - 50;
$z0 = <com.thealgorithms.maths.MinValue: boolean $assertionsDisabled>;
if $z0 != 0 goto i6 = i6 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$i4 = staticinvoke <com.thealgorithms.maths.MinValue: int min(int,int)>(i1, i3);
$i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);
if $i4 == $i5 goto i6 = i6 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i1 = $i0 - 50;
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
i3 = $i2 - 50;
$z0 = <com.thealgorithms.maths.MinValue: boolean $assertionsDisabled>;
if $z0 != 0 goto i6 = i6 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i4 = staticinvoke <com.thealgorithms.maths.MinValue: int min(int,int)>(i1, i3);
$i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);
if $i4 == $i5 goto i6 = i6 + 1;
"->"Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.AssertionError;
specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
throw $r2;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i4 = staticinvoke <com.thealgorithms.maths.MinValue: int min(int,int)>(i1, i3);
$i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);
if $i4 == $i5 goto i6 = i6 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 2 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 > 100 goto return;
";
}
