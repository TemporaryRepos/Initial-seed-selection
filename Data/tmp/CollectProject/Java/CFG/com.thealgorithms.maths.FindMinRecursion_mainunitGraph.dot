digraph "unitGraph" {
    "r9 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.Random"
    "specialinvoke $r0.<java.util.Random: void <init>()>()"
    "r1 = $r0"
    "$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"
    "i1 = $i0 + 1"
    "r2 = newarray (int)[i1]"
    "i10 = 0"
    "if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"
    "$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>()"
    "$i9 = $i8 % 100"
    "r2[i10] = $i9"
    "i10 = i10 + 1"
    "goto [?= (branch)]"
    "$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"
    "if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"
    "$i4 = lengthof r2"
    "$i5 = $i4 - 1"
    "$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5)"
    "$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)"
    "$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>()"
    "$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>()"
    "if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"
    "$r8 = new java.lang.AssertionError"
    "specialinvoke $r8.<java.lang.AssertionError: void <init>()>()"
    "throw $r8"
    "$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"
    "if $z1 != 0 goto return"
    "$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2)"
    "$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)"
    "$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>()"
    "$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()"
    "if $i2 == $i3 goto return"
    "$r5 = new java.lang.AssertionError"
    "specialinvoke $r5.<java.lang.AssertionError: void <init>()>()"
    "throw $r5"
    "return"
    "r9 := @parameter0: java.lang.String[]"->"$r0 = new java.util.Random";
    "$r0 = new java.util.Random"->"specialinvoke $r0.<java.util.Random: void <init>()>()";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)";
    "$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"->"i1 = $i0 + 1";
    "i1 = $i0 + 1"->"r2 = newarray (int)[i1]";
    "r2 = newarray (int)[i1]"->"i10 = 0";
    "i10 = 0"->"if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>()";
    "if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "$i8 = virtualinvoke r1.<java.util.Random: int nextInt()>()"->"$i9 = $i8 % 100";
    "$i9 = $i8 % 100"->"r2[i10] = $i9";
    "r2[i10] = $i9"->"i10 = i10 + 1";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i1 goto $z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$i4 = lengthof r2";
    "if $z0 != 0 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "$i4 = lengthof r2"->"$i5 = $i4 - 1";
    "$i5 = $i4 - 1"->"$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5)";
    "$i6 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i5)"->"$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)";
    "$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)"->"$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>()";
    "$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>()"->"$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>()";
    "$i7 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>()"->"if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$r8 = new java.lang.AssertionError";
    "if $i6 == $i7 goto $z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>";
    "$r8 = new java.lang.AssertionError"->"specialinvoke $r8.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r8.<java.lang.AssertionError: void <init>()>()"->"throw $r8";
    "$z1 = <com.thealgorithms.maths.FindMinRecursion: boolean $assertionsDisabled>"->"if $z1 != 0 goto return";
    "if $z1 != 0 goto return"->"$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2)";
    "if $z1 != 0 goto return"->"return";
    "$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[])>(r2)"->"$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)";
    "$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)"->"$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>()";
    "$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>()"->"$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()";
    "$i3 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()"->"if $i2 == $i3 goto return";
    "if $i2 == $i3 goto return"->"$r5 = new java.lang.AssertionError";
    "if $i2 == $i3 goto return"->"return";
    "$r5 = new java.lang.AssertionError"->"specialinvoke $r5.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r5.<java.lang.AssertionError: void <init>()>()"->"throw $r5";
}
