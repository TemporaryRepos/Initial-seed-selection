digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i1 = 1;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i1 > 1000 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>();
$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>;
if $z0 != 0 goto i1 = i1 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0);
$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0);
$b0 = $d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"
    "Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.AssertionError;
specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
throw $r2;
"
    "Block 5:
[preds: 2 3 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.lang.String[];
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i1 = 1;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i1 > 1000 goto return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i1 > 1000 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>();
$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>;
if $z0 != 0 goto i1 = i1 + 1;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i1 > 1000 goto return;
"->"Block 6:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>();
$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>;
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0);
$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0);
$b0 = $d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>();
$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>;
if $z0 != 0 goto i1 = i1 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0);
$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0);
$b0 = $d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"->"Block 4:
[preds: 3 ] [succs: ]
$r2 = new java.lang.AssertionError;
specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
throw $r2;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0);
$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0);
$b0 = $d1 cmpl $d2;
if $b0 == 0 goto i1 = i1 + 1;
"->"Block 5:
[preds: 2 3 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 2 3 ] [succs: 1 ]
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i1 > 1000 goto return;
";
}
