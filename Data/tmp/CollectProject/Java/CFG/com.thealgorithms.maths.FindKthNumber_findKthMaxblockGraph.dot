digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[];
i1 := @parameter1: int;
i3 = 0;
i4 = lengthof r0;
"
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i3 >= i4 goto return -1;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
i0 = staticinvoke <com.thealgorithms.maths.FindKthNumber: int partition(int[],int,int)>(r0, i3, i4);
if i1 != i0 goto (branch);
"
    "Block 3:
[preds: 2 ] [succs: ]
$i2 = r0[i0];
return $i2;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i1 <= i0 goto i4 = i0;
"
    "Block 5:
[preds: 4 ] [succs: 7 ]
i3 = i0 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 4 ] [succs: 7 ]
i4 = i0;
"
    "Block 7:
[preds: 5 6 ] [succs: 1 ]
goto [?= (branch)];
"
    "Block 8:
[preds: 1 ] [succs: ]
return -1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[];
i1 := @parameter1: int;
i3 = 0;
i4 = lengthof r0;
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i3 >= i4 goto return -1;
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i3 >= i4 goto return -1;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
i0 = staticinvoke <com.thealgorithms.maths.FindKthNumber: int partition(int[],int,int)>(r0, i3, i4);
if i1 != i0 goto (branch);
";
    "Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i3 >= i4 goto return -1;
"->"Block 8:
[preds: 1 ] [succs: ]
return -1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
i0 = staticinvoke <com.thealgorithms.maths.FindKthNumber: int partition(int[],int,int)>(r0, i3, i4);
if i1 != i0 goto (branch);
"->"Block 3:
[preds: 2 ] [succs: ]
$i2 = r0[i0];
return $i2;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
i0 = staticinvoke <com.thealgorithms.maths.FindKthNumber: int partition(int[],int,int)>(r0, i3, i4);
if i1 != i0 goto (branch);
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
if i1 <= i0 goto i4 = i0;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i1 <= i0 goto i4 = i0;
"->"Block 5:
[preds: 4 ] [succs: 7 ]
i3 = i0 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
if i1 <= i0 goto i4 = i0;
"->"Block 6:
[preds: 4 ] [succs: 7 ]
i4 = i0;
";
    "Block 5:
[preds: 4 ] [succs: 7 ]
i3 = i0 + 1;
goto [?= (branch)];
"->"Block 7:
[preds: 5 6 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 7 ]
i4 = i0;
"->"Block 7:
[preds: 5 6 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 7:
[preds: 5 6 ] [succs: 1 ]
goto [?= (branch)];
"->"Block 1:
[preds: 0 7 ] [succs: 2 8 ]
if i3 >= i4 goto return -1;
";
}
