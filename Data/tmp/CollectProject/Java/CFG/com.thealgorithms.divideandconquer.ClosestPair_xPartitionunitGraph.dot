digraph "unitGraph" {
    "r5 := @this: com.thealgorithms.divideandconquer.ClosestPair"
    "r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"
    "i1 := @parameter1: int"
    "i0 := @parameter2: int"
    "r1 = r0[i0]"
    "i4 = i1 - 1"
    "i5 = i1"
    "$i2 = i0 - 1"
    "if i5 > $i2 goto i6 = i4 + 1"
    "$r3 = r0[i5]"
    "$d1 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$d0 = r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$b3 = $d1 cmpg $d0"
    "if $b3 > 0 goto i5 = i5 + 1"
    "i4 = i4 + 1"
    "r6 = r0[i4]"
    "$r4 = r0[i5]"
    "r0[i4] = $r4"
    "r0[i5] = r6"
    "i5 = i5 + 1"
    "goto [?= $i2 = i0 - 1]"
    "i6 = i4 + 1"
    "r7 = r0[i6]"
    "$r2 = r0[i0]"
    "r0[i6] = $r2"
    "r0[i0] = r7"
    "return i6"
    "r5 := @this: com.thealgorithms.divideandconquer.ClosestPair"->"r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]";
    "r0 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"r1 = r0[i0]";
    "r1 = r0[i0]"->"i4 = i1 - 1";
    "i4 = i1 - 1"->"i5 = i1";
    "i5 = i1"->"$i2 = i0 - 1";
    "$i2 = i0 - 1"->"if i5 > $i2 goto i6 = i4 + 1";
    "if i5 > $i2 goto i6 = i4 + 1"->"$r3 = r0[i5]";
    "if i5 > $i2 goto i6 = i4 + 1"->"i6 = i4 + 1";
    "$r3 = r0[i5]"->"$d1 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d1 = $r3.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$d0 = r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d0 = r1.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$b3 = $d1 cmpg $d0";
    "$b3 = $d1 cmpg $d0"->"if $b3 > 0 goto i5 = i5 + 1";
    "if $b3 > 0 goto i5 = i5 + 1"->"i4 = i4 + 1";
    "if $b3 > 0 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "i4 = i4 + 1"->"r6 = r0[i4]";
    "r6 = r0[i4]"->"$r4 = r0[i5]";
    "$r4 = r0[i5]"->"r0[i4] = $r4";
    "r0[i4] = $r4"->"r0[i5] = r6";
    "r0[i5] = r6"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= $i2 = i0 - 1]";
    "goto [?= $i2 = i0 - 1]"->"$i2 = i0 - 1";
    "i6 = i4 + 1"->"r7 = r0[i6]";
    "r7 = r0[i6]"->"$r2 = r0[i0]";
    "$r2 = r0[i0]"->"r0[i6] = $r2";
    "r0[i6] = $r2"->"r0[i0] = r7";
    "r0[i0] = r7"->"return i6";
}
