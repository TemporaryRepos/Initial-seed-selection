digraph "unitGraph" {
    "r13 := @parameter0: java.lang.String[]"
    "$r0 = new com.thealgorithms.datastructures.graphs.AdjacencyList"
    "specialinvoke $r0.<com.thealgorithms.datastructures.graphs.AdjacencyList: void <init>()>()"
    "r1 = $r0"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"b\")"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"a\")"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"d\")"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"b\", \"d\")"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"u\")"
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"u\", \"b\")"
    "$r2 = new com.thealgorithms.datastructures.graphs.TopologicalSort"
    "specialinvoke $r2.<com.thealgorithms.datastructures.graphs.TopologicalSort: void <init>(com.thealgorithms.datastructures.graphs.AdjacencyList)>(r1)"
    "r3 = $r2"
    "$r4 = virtualinvoke r3.<com.thealgorithms.datastructures.graphs.TopologicalSort: java.util.ArrayList topSortOrder()>()"
    "r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto return"
    "$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()"
    "r7 = (java.lang.String) $r6"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r12)"
    "goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]"
    "return"
    "r13 := @parameter0: java.lang.String[]"->"$r0 = new com.thealgorithms.datastructures.graphs.AdjacencyList";
    "$r0 = new com.thealgorithms.datastructures.graphs.AdjacencyList"->"specialinvoke $r0.<com.thealgorithms.datastructures.graphs.AdjacencyList: void <init>()>()";
    "specialinvoke $r0.<com.thealgorithms.datastructures.graphs.AdjacencyList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"b\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"b\")"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"a\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"a\")"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"d\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"a\", \"d\")"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"b\", \"d\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"b\", \"d\")"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"u\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"c\", \"u\")"->"virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"u\", \"b\")";
    "virtualinvoke r1.<com.thealgorithms.datastructures.graphs.AdjacencyList: void addEdge(java.lang.Comparable,java.lang.Comparable)>(\"u\", \"b\")"->"$r2 = new com.thealgorithms.datastructures.graphs.TopologicalSort";
    "$r2 = new com.thealgorithms.datastructures.graphs.TopologicalSort"->"specialinvoke $r2.<com.thealgorithms.datastructures.graphs.TopologicalSort: void <init>(com.thealgorithms.datastructures.graphs.AdjacencyList)>(r1)";
    "specialinvoke $r2.<com.thealgorithms.datastructures.graphs.TopologicalSort: void <init>(com.thealgorithms.datastructures.graphs.AdjacencyList)>(r1)"->"r3 = $r2";
    "r3 = $r2"->"$r4 = virtualinvoke r3.<com.thealgorithms.datastructures.graphs.TopologicalSort: java.util.ArrayList topSortOrder()>()";
    "$r4 = virtualinvoke r3.<com.thealgorithms.datastructures.graphs.TopologicalSort: java.util.ArrayList topSortOrder()>()"->"r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto return"->"return";
    "$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()"->"r7 = (java.lang.String) $r6";
    "r7 = (java.lang.String) $r6"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)";
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r12)";
    "virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r12)"->"goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()";
}
