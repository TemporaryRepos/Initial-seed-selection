digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "d5 := @parameter2: double"
    "d12 := @parameter3: double"
    "d0 := @parameter4: double"
    "i2 := @parameter5: int"
    "z0 := @parameter6: boolean"
    "if i0 > 0 goto (branch)"
    "$r7 = new java.lang.IllegalArgumentException"
    "specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageWidth should be greater than zero\")"
    "throw $r7"
    "if i1 > 0 goto (branch)"
    "$r6 = new java.lang.IllegalArgumentException"
    "specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageHeight should be greater than zero\")"
    "throw $r6"
    "if i2 > 0 goto $r0 = new java.awt.image.BufferedImage"
    "$r5 = new java.lang.IllegalArgumentException"
    "specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"maxStep should be greater than zero\")"
    "throw $r5"
    "$r0 = new java.awt.image.BufferedImage"
    "specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1)"
    "r1 = $r0"
    "$d1 = (double) i0"
    "$d3 = d0 / $d1"
    "$d2 = (double) i1"
    "d4 = $d3 * $d2"
    "i5 = 0"
    "if i5 >= i0 goto return r1"
    "i6 = 0"
    "if i6 >= i1 goto i5 = i5 + 1"
    "$d7 = (double) i5"
    "$d6 = (double) i0"
    "$d8 = $d7 / $d6"
    "$d9 = $d8 - 0.5"
    "$d10 = $d9 * d0"
    "d11 = d5 + $d10"
    "$d14 = (double) i6"
    "$d13 = (double) i1"
    "$d15 = $d14 / $d13"
    "$d16 = $d15 - 0.5"
    "$d17 = $d16 * d4"
    "d18 = d12 + $d17"
    "d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2)"
    "$i3 = i5"
    "$i4 = i6"
    "if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)"
    "$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19)"
    "$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>()"
    "goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)]"
    "$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)"
    "$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>()"
    "virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "i5 = i5 + 1"
    "return r1"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"d5 := @parameter2: double";
    "d5 := @parameter2: double"->"d12 := @parameter3: double";
    "d12 := @parameter3: double"->"d0 := @parameter4: double";
    "d0 := @parameter4: double"->"i2 := @parameter5: int";
    "i2 := @parameter5: int"->"z0 := @parameter6: boolean";
    "z0 := @parameter6: boolean"->"if i0 > 0 goto (branch)";
    "if i0 > 0 goto (branch)"->"$r7 = new java.lang.IllegalArgumentException";
    "if i0 > 0 goto (branch)"->"if i1 > 0 goto (branch)";
    "$r7 = new java.lang.IllegalArgumentException"->"specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageWidth should be greater than zero\")";
    "specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageWidth should be greater than zero\")"->"throw $r7";
    "if i1 > 0 goto (branch)"->"$r6 = new java.lang.IllegalArgumentException";
    "if i1 > 0 goto (branch)"->"if i2 > 0 goto $r0 = new java.awt.image.BufferedImage";
    "$r6 = new java.lang.IllegalArgumentException"->"specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageHeight should be greater than zero\")";
    "specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"imageHeight should be greater than zero\")"->"throw $r6";
    "if i2 > 0 goto $r0 = new java.awt.image.BufferedImage"->"$r5 = new java.lang.IllegalArgumentException";
    "if i2 > 0 goto $r0 = new java.awt.image.BufferedImage"->"$r0 = new java.awt.image.BufferedImage";
    "$r5 = new java.lang.IllegalArgumentException"->"specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"maxStep should be greater than zero\")";
    "specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"maxStep should be greater than zero\")"->"throw $r5";
    "$r0 = new java.awt.image.BufferedImage"->"specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1)";
    "specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1)"->"r1 = $r0";
    "r1 = $r0"->"$d1 = (double) i0";
    "$d1 = (double) i0"->"$d3 = d0 / $d1";
    "$d3 = d0 / $d1"->"$d2 = (double) i1";
    "$d2 = (double) i1"->"d4 = $d3 * $d2";
    "d4 = $d3 * $d2"->"i5 = 0";
    "i5 = 0"->"if i5 >= i0 goto return r1";
    "if i5 >= i0 goto return r1"->"i6 = 0";
    "if i5 >= i0 goto return r1"->"return r1";
    "i6 = 0"->"if i6 >= i1 goto i5 = i5 + 1";
    "if i6 >= i1 goto i5 = i5 + 1"->"$d7 = (double) i5";
    "if i6 >= i1 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "$d7 = (double) i5"->"$d6 = (double) i0";
    "$d6 = (double) i0"->"$d8 = $d7 / $d6";
    "$d8 = $d7 / $d6"->"$d9 = $d8 - 0.5";
    "$d9 = $d8 - 0.5"->"$d10 = $d9 * d0";
    "$d10 = $d9 * d0"->"d11 = d5 + $d10";
    "d11 = d5 + $d10"->"$d14 = (double) i6";
    "$d14 = (double) i6"->"$d13 = (double) i1";
    "$d13 = (double) i1"->"$d15 = $d14 / $d13";
    "$d15 = $d14 / $d13"->"$d16 = $d15 - 0.5";
    "$d16 = $d15 - 0.5"->"$d17 = $d16 * d4";
    "$d17 = $d16 * d4"->"d18 = d12 + $d17";
    "d18 = d12 + $d17"->"d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2)";
    "d19 = staticinvoke <com.thealgorithms.others.Mandelbrot: double getDistance(double,double,int)>(d11, d18, i2)"->"$i3 = i5";
    "$i3 = i5"->"$i4 = i6";
    "$i4 = i6"->"if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)";
    "if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)"->"$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19)";
    "if z0 == 0 goto $r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)"->"$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)";
    "$r3 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color colorCodedColorMap(double)>(d19)"->"$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>()";
    "$i7 = virtualinvoke $r3.<java.awt.Color: int getRGB()>()"->"goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)]";
    "goto [?= virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)]"->"virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)";
    "$r2 = staticinvoke <com.thealgorithms.others.Mandelbrot: java.awt.Color blackAndWhiteColorMap(double)>(d19)"->"$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>()";
    "$i7 = virtualinvoke $r2.<java.awt.Color: int getRGB()>()"->"virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)";
    "virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i3, $i4, $i7)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i1 goto i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto return r1";
}
