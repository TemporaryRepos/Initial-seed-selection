digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i1 := @parameter0: int;
r0 := @parameter1: int[];
r1 := @parameter2: int[];
i0 := @parameter3: int;
if i0 == 0 goto return 0;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 != 0 goto $i2 = i0 - 1;
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return 0;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = i0 - 1;
$i3 = r0[$i2];
if $i3 <= i1 goto $i4 = i0 - 1;
"
    "Block 4:
[preds: 3 ] [succs: ]
$i15 = i0 - 1;
$i16 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>(i1, r0, r1, $i15);
return $i16;
"
    "Block 5:
[preds: 3 ] [succs: ]
$i4 = i0 - 1;
$i9 = r1[$i4];
$i5 = i0 - 1;
$i6 = r0[$i5];
$i8 = i1 - $i6;
$i7 = i0 - 1;
$i10 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>($i8, r0, r1, $i7);
$i12 = $i9 + $i10;
$i11 = i0 - 1;
$i13 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>(i1, r0, r1, $i11);
$i14 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i13);
return $i14;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i1 := @parameter0: int;
r0 := @parameter1: int[];
r1 := @parameter2: int[];
i0 := @parameter3: int;
if i0 == 0 goto return 0;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 != 0 goto $i2 = i0 - 1;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i1 := @parameter0: int;
r0 := @parameter1: int[];
r1 := @parameter2: int[];
i0 := @parameter3: int;
if i0 == 0 goto return 0;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 != 0 goto $i2 = i0 - 1;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 != 0 goto $i2 = i0 - 1;
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = i0 - 1;
$i3 = r0[$i2];
if $i3 <= i1 goto $i4 = i0 - 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = i0 - 1;
$i3 = r0[$i2];
if $i3 <= i1 goto $i4 = i0 - 1;
"->"Block 4:
[preds: 3 ] [succs: ]
$i15 = i0 - 1;
$i16 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>(i1, r0, r1, $i15);
return $i16;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = i0 - 1;
$i3 = r0[$i2];
if $i3 <= i1 goto $i4 = i0 - 1;
"->"Block 5:
[preds: 3 ] [succs: ]
$i4 = i0 - 1;
$i9 = r1[$i4];
$i5 = i0 - 1;
$i6 = r0[$i5];
$i8 = i1 - $i6;
$i7 = i0 - 1;
$i10 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>($i8, r0, r1, $i7);
$i12 = $i9 + $i10;
$i11 = i0 - 1;
$i13 = staticinvoke <com.thealgorithms.dynamicprogramming.BruteForceKnapsack: int knapSack(int,int[],int[],int)>(i1, r0, r1, $i11);
$i14 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i13);
return $i14;
";
}
