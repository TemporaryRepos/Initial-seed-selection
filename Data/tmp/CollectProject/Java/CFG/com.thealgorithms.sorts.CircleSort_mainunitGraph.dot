digraph "unitGraph" {
    "r22 := @parameter0: java.lang.String[]"
    "$r0 = new com.thealgorithms.sorts.CircleSort"
    "specialinvoke $r0.<com.thealgorithms.sorts.CircleSort: void <init>()>()"
    "r1 = $r0"
    "$r2 = newarray (java.lang.Integer)[9]"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"
    "$r2[0] = $r3"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23)"
    "$r2[1] = $r4"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)"
    "$r2[2] = $r5"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(78)"
    "$r2[3] = $r6"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r2[4] = $r7"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(54)"
    "$r2[5] = $r8"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(231)"
    "$r2[6] = $r9"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "$r2[7] = $r10"
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)"
    "$r2[8] = $r11"
    "r12 = $r2"
    "virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r12)"
    "i9 = 0"
    "$i0 = lengthof r12"
    "$i1 = $i0 - 1"
    "if i9 >= $i1 goto $r14 = newarray (java.lang.String)[5]"
    "$z1 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>"
    "if $z1 != 0 goto i9 = i9 + 1"
    "$r19 = r12[i9]"
    "$i6 = virtualinvoke $r19.<java.lang.Integer: int intValue()>()"
    "$i7 = i9 + 1"
    "$r20 = r12[$i7]"
    "$i8 = virtualinvoke $r20.<java.lang.Integer: int intValue()>()"
    "if $i6 <= $i8 goto i9 = i9 + 1"
    "$r21 = new java.lang.AssertionError"
    "specialinvoke $r21.<java.lang.AssertionError: void <init>()>()"
    "throw $r21"
    "i9 = i9 + 1"
    "goto [?= $i0 = lengthof r12]"
    "$r14 = newarray (java.lang.String)[5]"
    "$r14[0] = \"c\""
    "$r14[1] = \"a\""
    "$r14[2] = \"e\""
    "$r14[3] = \"b\""
    "$r14[4] = \"d\""
    "r23 = $r14"
    "virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r23)"
    "i10 = 0"
    "$i2 = lengthof r23"
    "$i3 = $i2 - 1"
    "if i10 >= $i3 goto return"
    "$z0 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>"
    "if $z0 != 0 goto i10 = i10 + 1"
    "$r17 = r12[i10]"
    "$i4 = i10 + 1"
    "$r16 = r12[$i4]"
    "$i5 = virtualinvoke $r17.<java.lang.Integer: int compareTo(java.lang.Integer)>($r16)"
    "if $i5 <= 0 goto i10 = i10 + 1"
    "$r18 = new java.lang.AssertionError"
    "specialinvoke $r18.<java.lang.AssertionError: void <init>()>()"
    "throw $r18"
    "i10 = i10 + 1"
    "goto [?= $i2 = lengthof r23]"
    "return"
    "r22 := @parameter0: java.lang.String[]"->"$r0 = new com.thealgorithms.sorts.CircleSort";
    "$r0 = new com.thealgorithms.sorts.CircleSort"->"specialinvoke $r0.<com.thealgorithms.sorts.CircleSort: void <init>()>()";
    "specialinvoke $r0.<com.thealgorithms.sorts.CircleSort: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = newarray (java.lang.Integer)[9]";
    "$r2 = newarray (java.lang.Integer)[9]"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"$r2[0] = $r3";
    "$r2[0] = $r3"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23)"->"$r2[1] = $r4";
    "$r2[1] = $r4"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)"->"$r2[2] = $r5";
    "$r2[2] = $r5"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(78)";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(78)"->"$r2[3] = $r6";
    "$r2[3] = $r6"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r2[4] = $r7";
    "$r2[4] = $r7"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(54)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(54)"->"$r2[5] = $r8";
    "$r2[5] = $r8"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(231)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(231)"->"$r2[6] = $r9";
    "$r2[6] = $r9"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r2[7] = $r10";
    "$r2[7] = $r10"->"$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)";
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)"->"$r2[8] = $r11";
    "$r2[8] = $r11"->"r12 = $r2";
    "r12 = $r2"->"virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r12)";
    "virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r12)"->"i9 = 0";
    "i9 = 0"->"$i0 = lengthof r12";
    "$i0 = lengthof r12"->"$i1 = $i0 - 1";
    "$i1 = $i0 - 1"->"if i9 >= $i1 goto $r14 = newarray (java.lang.String)[5]";
    "if i9 >= $i1 goto $r14 = newarray (java.lang.String)[5]"->"$z1 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>";
    "if i9 >= $i1 goto $r14 = newarray (java.lang.String)[5]"->"$r14 = newarray (java.lang.String)[5]";
    "$z1 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>"->"if $z1 != 0 goto i9 = i9 + 1";
    "if $z1 != 0 goto i9 = i9 + 1"->"$r19 = r12[i9]";
    "if $z1 != 0 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "$r19 = r12[i9]"->"$i6 = virtualinvoke $r19.<java.lang.Integer: int intValue()>()";
    "$i6 = virtualinvoke $r19.<java.lang.Integer: int intValue()>()"->"$i7 = i9 + 1";
    "$i7 = i9 + 1"->"$r20 = r12[$i7]";
    "$r20 = r12[$i7]"->"$i8 = virtualinvoke $r20.<java.lang.Integer: int intValue()>()";
    "$i8 = virtualinvoke $r20.<java.lang.Integer: int intValue()>()"->"if $i6 <= $i8 goto i9 = i9 + 1";
    "if $i6 <= $i8 goto i9 = i9 + 1"->"$r21 = new java.lang.AssertionError";
    "if $i6 <= $i8 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "$r21 = new java.lang.AssertionError"->"specialinvoke $r21.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r21.<java.lang.AssertionError: void <init>()>()"->"throw $r21";
    "i9 = i9 + 1"->"goto [?= $i0 = lengthof r12]";
    "goto [?= $i0 = lengthof r12]"->"$i0 = lengthof r12";
    "$r14 = newarray (java.lang.String)[5]"->"$r14[0] = \"c\"";
    "$r14[0] = \"c\""->"$r14[1] = \"a\"";
    "$r14[1] = \"a\""->"$r14[2] = \"e\"";
    "$r14[2] = \"e\""->"$r14[3] = \"b\"";
    "$r14[3] = \"b\""->"$r14[4] = \"d\"";
    "$r14[4] = \"d\""->"r23 = $r14";
    "r23 = $r14"->"virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r23)";
    "virtualinvoke r1.<com.thealgorithms.sorts.CircleSort: java.lang.Comparable[] sort(java.lang.Comparable[])>(r23)"->"i10 = 0";
    "i10 = 0"->"$i2 = lengthof r23";
    "$i2 = lengthof r23"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"if i10 >= $i3 goto return";
    "if i10 >= $i3 goto return"->"$z0 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>";
    "if i10 >= $i3 goto return"->"return";
    "$z0 = <com.thealgorithms.sorts.CircleSort: boolean $assertionsDisabled>"->"if $z0 != 0 goto i10 = i10 + 1";
    "if $z0 != 0 goto i10 = i10 + 1"->"$r17 = r12[i10]";
    "if $z0 != 0 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "$r17 = r12[i10]"->"$i4 = i10 + 1";
    "$i4 = i10 + 1"->"$r16 = r12[$i4]";
    "$r16 = r12[$i4]"->"$i5 = virtualinvoke $r17.<java.lang.Integer: int compareTo(java.lang.Integer)>($r16)";
    "$i5 = virtualinvoke $r17.<java.lang.Integer: int compareTo(java.lang.Integer)>($r16)"->"if $i5 <= 0 goto i10 = i10 + 1";
    "if $i5 <= 0 goto i10 = i10 + 1"->"$r18 = new java.lang.AssertionError";
    "if $i5 <= 0 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "$r18 = new java.lang.AssertionError"->"specialinvoke $r18.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r18.<java.lang.AssertionError: void <init>()>()"->"throw $r18";
    "i10 = i10 + 1"->"goto [?= $i2 = lengthof r23]";
    "goto [?= $i2 = lengthof r23]"->"$i2 = lengthof r23";
}
