digraph "unitGraph" {
    "r0 := @this: com.thealgorithms.datastructures.lists.CircleLinkedList"
    "i0 := @parameter0: int"
    "$i1 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"
    "if i0 > $i1 goto $r1 = new java.lang.IndexOutOfBoundsException"
    "if i0 >= 0 goto r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>"
    "$r1 = new java.lang.IndexOutOfBoundsException"
    "specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\"position cannot be greater than size or negative\")"
    "throw $r1"
    "r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>"
    "i4 = 1"
    "if i4 > i0 goto r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"
    "r7 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"
    "r2 = r8.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: java.lang.Object value>"
    "$r3 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"
    "$r4 = $r3.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"
    "r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next> = $r4"
    "$r5 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail>"
    "if r8 != $r5 goto $i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"
    "r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail> = r7"
    "$i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"
    "$i3 = $i2 - 1"
    "r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size> = $i3"
    "return r2"
    "r0 := @this: com.thealgorithms.datastructures.lists.CircleLinkedList"->"i0 := @parameter0: int";
    "i0 := @parameter0: int"->"$i1 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>";
    "$i1 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"->"if i0 > $i1 goto $r1 = new java.lang.IndexOutOfBoundsException";
    "if i0 > $i1 goto $r1 = new java.lang.IndexOutOfBoundsException"->"if i0 >= 0 goto r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>";
    "if i0 > $i1 goto $r1 = new java.lang.IndexOutOfBoundsException"->"$r1 = new java.lang.IndexOutOfBoundsException";
    "if i0 >= 0 goto r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>"->"$r1 = new java.lang.IndexOutOfBoundsException";
    "if i0 >= 0 goto r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>"->"r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>";
    "$r1 = new java.lang.IndexOutOfBoundsException"->"specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\"position cannot be greater than size or negative\")";
    "specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\"position cannot be greater than size or negative\")"->"throw $r1";
    "r7 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node head>"->"i4 = 1";
    "i4 = 1"->"if i4 > i0 goto r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "if i4 > i0 goto r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"r7 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "if i4 > i0 goto r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "r7 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 > i0 goto r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "r8 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"r2 = r8.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: java.lang.Object value>";
    "r2 = r8.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: java.lang.Object value>"->"$r3 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "$r3 = r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"$r4 = $r3.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>";
    "$r4 = $r3.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next>"->"r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next> = $r4";
    "r7.<com.thealgorithms.datastructures.lists.CircleLinkedList$Node: com.thealgorithms.datastructures.lists.CircleLinkedList$Node next> = $r4"->"$r5 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail>";
    "$r5 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail>"->"if r8 != $r5 goto $i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>";
    "if r8 != $r5 goto $i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"->"r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail> = r7";
    "if r8 != $r5 goto $i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"->"$i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>";
    "r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail> = r7"->"$i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>";
    "$i2 = r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size>"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size> = $i3";
    "r0.<com.thealgorithms.datastructures.lists.CircleLinkedList: int size> = $i3"->"return r2";
}
