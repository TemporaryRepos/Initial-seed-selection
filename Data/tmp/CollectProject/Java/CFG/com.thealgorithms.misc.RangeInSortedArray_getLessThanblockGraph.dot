digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[];
i2 := @parameter1: int;
i5 := @parameter2: int;
i6 := @parameter3: int;
i7 = 0;
"
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i5 > i6 goto return i7;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i0 = i5 + i6;
i1 = $i0 / 2;
$i3 = r0[i1];
if $i3 <= i2 goto $i4 = r0[i1];
"
    "Block 3:
[preds: 2 ] [succs: 6 ]
i6 = i1 - 1;
goto [?= (branch)];
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$i4 = r0[i1];
if $i4 > i2 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i7 = i1 + 1;
i5 = i1 + 1;
"
    "Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= (branch)];
"
    "Block 7:
[preds: 1 ] [succs: ]
return i7;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: int[];
i2 := @parameter1: int;
i5 := @parameter2: int;
i6 := @parameter3: int;
i7 = 0;
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i5 > i6 goto return i7;
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i5 > i6 goto return i7;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$i0 = i5 + i6;
i1 = $i0 / 2;
$i3 = r0[i1];
if $i3 <= i2 goto $i4 = r0[i1];
";
    "Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i5 > i6 goto return i7;
"->"Block 7:
[preds: 1 ] [succs: ]
return i7;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i0 = i5 + i6;
i1 = $i0 / 2;
$i3 = r0[i1];
if $i3 <= i2 goto $i4 = r0[i1];
"->"Block 3:
[preds: 2 ] [succs: 6 ]
i6 = i1 - 1;
goto [?= (branch)];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i0 = i5 + i6;
i1 = $i0 / 2;
$i3 = r0[i1];
if $i3 <= i2 goto $i4 = r0[i1];
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
$i4 = r0[i1];
if $i4 > i2 goto (branch);
";
    "Block 3:
[preds: 2 ] [succs: 6 ]
i6 = i1 - 1;
goto [?= (branch)];
"->"Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$i4 = r0[i1];
if $i4 > i2 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i7 = i1 + 1;
i5 = i1 + 1;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$i4 = r0[i1];
if $i4 > i2 goto (branch);
"->"Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i7 = i1 + 1;
i5 = i1 + 1;
"->"Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= (branch)];
";
    "Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= (branch)];
"->"Block 1:
[preds: 0 6 ] [succs: 2 7 ]
if i5 > i6 goto return i7;
";
}
