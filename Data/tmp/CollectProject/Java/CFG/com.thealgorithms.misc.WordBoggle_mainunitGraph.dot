digraph "unitGraph" {
    "r17 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.ArrayList"
    "$r1 = newarray (java.lang.String)[7]"
    "$r1[0] = \"a\""
    "$r1[1] = \"boggle\""
    "$r1[2] = \"this\""
    "$r1[3] = \"NOTRE_PEATED\""
    "$r1[4] = \"is\""
    "$r1[5] = \"simple\""
    "$r1[6] = \"board\""
    "$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)"
    "specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2)"
    "r3 = $r0"
    "$z0 = <com.thealgorithms.misc.WordBoggle: boolean $assertionsDisabled>"
    "if $z0 != 0 goto return"
    "$r4 = newarray (char[])[9]"
    "$r5 = newarray (char)[7]"
    "$r5[0] = 116"
    "$r5[1] = 104"
    "$r5[2] = 105"
    "$r5[3] = 115"
    "$r5[4] = 105"
    "$r5[5] = 115"
    "$r5[6] = 97"
    "$r4[0] = $r5"
    "$r6 = newarray (char)[7]"
    "$r6[0] = 115"
    "$r6[1] = 105"
    "$r6[2] = 109"
    "$r6[3] = 112"
    "$r6[4] = 108"
    "$r6[5] = 101"
    "$r6[6] = 120"
    "$r4[1] = $r6"
    "$r7 = newarray (char)[7]"
    "$r7[0] = 98"
    "$r7[1] = 120"
    "$r7[2] = 120"
    "$r7[3] = 120"
    "$r7[4] = 120"
    "$r7[5] = 101"
    "$r7[6] = 98"
    "$r4[2] = $r7"
    "$r8 = newarray (char)[7]"
    "$r8[0] = 120"
    "$r8[1] = 111"
    "$r8[2] = 103"
    "$r8[3] = 103"
    "$r8[4] = 108"
    "$r8[5] = 120"
    "$r8[6] = 111"
    "$r4[3] = $r8"
    "$r9 = newarray (char)[7]"
    "$r9[0] = 120"
    "$r9[1] = 120"
    "$r9[2] = 120"
    "$r9[3] = 68"
    "$r9[4] = 84"
    "$r9[5] = 114"
    "$r9[6] = 97"
    "$r4[4] = $r9"
    "$r10 = newarray (char)[7]"
    "$r10[0] = 82"
    "$r10[1] = 69"
    "$r10[2] = 80"
    "$r10[3] = 69"
    "$r10[4] = 65"
    "$r10[5] = 100"
    "$r10[6] = 120"
    "$r4[5] = $r10"
    "$r11 = newarray (char)[7]"
    "$r11[0] = 120"
    "$r11[1] = 120"
    "$r11[2] = 120"
    "$r11[3] = 120"
    "$r11[4] = 120"
    "$r11[5] = 120"
    "$r11[6] = 120"
    "$r4[6] = $r11"
    "$r12 = newarray (char)[7]"
    "$r12[0] = 78"
    "$r12[1] = 79"
    "$r12[2] = 84"
    "$r12[3] = 82"
    "$r12[4] = 69"
    "$r12[5] = 95"
    "$r12[6] = 80"
    "$r4[7] = $r12"
    "$r13 = newarray (char)[7]"
    "$r13[0] = 120"
    "$r13[1] = 120"
    "$r13[2] = 68"
    "$r13[3] = 69"
    "$r13[4] = 84"
    "$r13[5] = 65"
    "$r13[6] = 69"
    "$r4[8] = $r13"
    "$r14 = newarray (java.lang.String)[10]"
    "$r14[0] = \"this\""
    "$r14[1] = \"is\""
    "$r14[2] = \"not\""
    "$r14[3] = \"a\""
    "$r14[4] = \"simple\""
    "$r14[5] = \"test\""
    "$r14[6] = \"boggle\""
    "$r14[7] = \"board\""
    "$r14[8] = \"REPEATED\""
    "$r14[9] = \"NOTRE_PEATED\""
    "$r15 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List boggleBoard(char[][],java.lang.String[])>($r4, $r14)"
    "$z1 = interfaceinvoke $r15.<java.util.List: boolean equals(java.lang.Object)>(r3)"
    "if $z1 != 0 goto return"
    "$r16 = new java.lang.AssertionError"
    "specialinvoke $r16.<java.lang.AssertionError: void <init>()>()"
    "throw $r16"
    "return"
    "r17 := @parameter0: java.lang.String[]"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"$r1 = newarray (java.lang.String)[7]";
    "$r1 = newarray (java.lang.String)[7]"->"$r1[0] = \"a\"";
    "$r1[0] = \"a\""->"$r1[1] = \"boggle\"";
    "$r1[1] = \"boggle\""->"$r1[2] = \"this\"";
    "$r1[2] = \"this\""->"$r1[3] = \"NOTRE_PEATED\"";
    "$r1[3] = \"NOTRE_PEATED\""->"$r1[4] = \"is\"";
    "$r1[4] = \"is\""->"$r1[5] = \"simple\"";
    "$r1[5] = \"simple\""->"$r1[6] = \"board\"";
    "$r1[6] = \"board\""->"$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)";
    "$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)"->"specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2)";
    "specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2)"->"r3 = $r0";
    "r3 = $r0"->"$z0 = <com.thealgorithms.misc.WordBoggle: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.misc.WordBoggle: boolean $assertionsDisabled>"->"if $z0 != 0 goto return";
    "if $z0 != 0 goto return"->"$r4 = newarray (char[])[9]";
    "if $z0 != 0 goto return"->"return";
    "$r4 = newarray (char[])[9]"->"$r5 = newarray (char)[7]";
    "$r5 = newarray (char)[7]"->"$r5[0] = 116";
    "$r5[0] = 116"->"$r5[1] = 104";
    "$r5[1] = 104"->"$r5[2] = 105";
    "$r5[2] = 105"->"$r5[3] = 115";
    "$r5[3] = 115"->"$r5[4] = 105";
    "$r5[4] = 105"->"$r5[5] = 115";
    "$r5[5] = 115"->"$r5[6] = 97";
    "$r5[6] = 97"->"$r4[0] = $r5";
    "$r4[0] = $r5"->"$r6 = newarray (char)[7]";
    "$r6 = newarray (char)[7]"->"$r6[0] = 115";
    "$r6[0] = 115"->"$r6[1] = 105";
    "$r6[1] = 105"->"$r6[2] = 109";
    "$r6[2] = 109"->"$r6[3] = 112";
    "$r6[3] = 112"->"$r6[4] = 108";
    "$r6[4] = 108"->"$r6[5] = 101";
    "$r6[5] = 101"->"$r6[6] = 120";
    "$r6[6] = 120"->"$r4[1] = $r6";
    "$r4[1] = $r6"->"$r7 = newarray (char)[7]";
    "$r7 = newarray (char)[7]"->"$r7[0] = 98";
    "$r7[0] = 98"->"$r7[1] = 120";
    "$r7[1] = 120"->"$r7[2] = 120";
    "$r7[2] = 120"->"$r7[3] = 120";
    "$r7[3] = 120"->"$r7[4] = 120";
    "$r7[4] = 120"->"$r7[5] = 101";
    "$r7[5] = 101"->"$r7[6] = 98";
    "$r7[6] = 98"->"$r4[2] = $r7";
    "$r4[2] = $r7"->"$r8 = newarray (char)[7]";
    "$r8 = newarray (char)[7]"->"$r8[0] = 120";
    "$r8[0] = 120"->"$r8[1] = 111";
    "$r8[1] = 111"->"$r8[2] = 103";
    "$r8[2] = 103"->"$r8[3] = 103";
    "$r8[3] = 103"->"$r8[4] = 108";
    "$r8[4] = 108"->"$r8[5] = 120";
    "$r8[5] = 120"->"$r8[6] = 111";
    "$r8[6] = 111"->"$r4[3] = $r8";
    "$r4[3] = $r8"->"$r9 = newarray (char)[7]";
    "$r9 = newarray (char)[7]"->"$r9[0] = 120";
    "$r9[0] = 120"->"$r9[1] = 120";
    "$r9[1] = 120"->"$r9[2] = 120";
    "$r9[2] = 120"->"$r9[3] = 68";
    "$r9[3] = 68"->"$r9[4] = 84";
    "$r9[4] = 84"->"$r9[5] = 114";
    "$r9[5] = 114"->"$r9[6] = 97";
    "$r9[6] = 97"->"$r4[4] = $r9";
    "$r4[4] = $r9"->"$r10 = newarray (char)[7]";
    "$r10 = newarray (char)[7]"->"$r10[0] = 82";
    "$r10[0] = 82"->"$r10[1] = 69";
    "$r10[1] = 69"->"$r10[2] = 80";
    "$r10[2] = 80"->"$r10[3] = 69";
    "$r10[3] = 69"->"$r10[4] = 65";
    "$r10[4] = 65"->"$r10[5] = 100";
    "$r10[5] = 100"->"$r10[6] = 120";
    "$r10[6] = 120"->"$r4[5] = $r10";
    "$r4[5] = $r10"->"$r11 = newarray (char)[7]";
    "$r11 = newarray (char)[7]"->"$r11[0] = 120";
    "$r11[0] = 120"->"$r11[1] = 120";
    "$r11[1] = 120"->"$r11[2] = 120";
    "$r11[2] = 120"->"$r11[3] = 120";
    "$r11[3] = 120"->"$r11[4] = 120";
    "$r11[4] = 120"->"$r11[5] = 120";
    "$r11[5] = 120"->"$r11[6] = 120";
    "$r11[6] = 120"->"$r4[6] = $r11";
    "$r4[6] = $r11"->"$r12 = newarray (char)[7]";
    "$r12 = newarray (char)[7]"->"$r12[0] = 78";
    "$r12[0] = 78"->"$r12[1] = 79";
    "$r12[1] = 79"->"$r12[2] = 84";
    "$r12[2] = 84"->"$r12[3] = 82";
    "$r12[3] = 82"->"$r12[4] = 69";
    "$r12[4] = 69"->"$r12[5] = 95";
    "$r12[5] = 95"->"$r12[6] = 80";
    "$r12[6] = 80"->"$r4[7] = $r12";
    "$r4[7] = $r12"->"$r13 = newarray (char)[7]";
    "$r13 = newarray (char)[7]"->"$r13[0] = 120";
    "$r13[0] = 120"->"$r13[1] = 120";
    "$r13[1] = 120"->"$r13[2] = 68";
    "$r13[2] = 68"->"$r13[3] = 69";
    "$r13[3] = 69"->"$r13[4] = 84";
    "$r13[4] = 84"->"$r13[5] = 65";
    "$r13[5] = 65"->"$r13[6] = 69";
    "$r13[6] = 69"->"$r4[8] = $r13";
    "$r4[8] = $r13"->"$r14 = newarray (java.lang.String)[10]";
    "$r14 = newarray (java.lang.String)[10]"->"$r14[0] = \"this\"";
    "$r14[0] = \"this\""->"$r14[1] = \"is\"";
    "$r14[1] = \"is\""->"$r14[2] = \"not\"";
    "$r14[2] = \"not\""->"$r14[3] = \"a\"";
    "$r14[3] = \"a\""->"$r14[4] = \"simple\"";
    "$r14[4] = \"simple\""->"$r14[5] = \"test\"";
    "$r14[5] = \"test\""->"$r14[6] = \"boggle\"";
    "$r14[6] = \"boggle\""->"$r14[7] = \"board\"";
    "$r14[7] = \"board\""->"$r14[8] = \"REPEATED\"";
    "$r14[8] = \"REPEATED\""->"$r14[9] = \"NOTRE_PEATED\"";
    "$r14[9] = \"NOTRE_PEATED\""->"$r15 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List boggleBoard(char[][],java.lang.String[])>($r4, $r14)";
    "$r15 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List boggleBoard(char[][],java.lang.String[])>($r4, $r14)"->"$z1 = interfaceinvoke $r15.<java.util.List: boolean equals(java.lang.Object)>(r3)";
    "$z1 = interfaceinvoke $r15.<java.util.List: boolean equals(java.lang.Object)>(r3)"->"if $z1 != 0 goto return";
    "if $z1 != 0 goto return"->"$r16 = new java.lang.AssertionError";
    "if $z1 != 0 goto return"->"return";
    "$r16 = new java.lang.AssertionError"->"specialinvoke $r16.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r16.<java.lang.AssertionError: void <init>()>()"->"throw $r16";
}
