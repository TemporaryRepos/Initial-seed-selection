digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.datastructures.trees.AVLTree;
i1 := @parameter0: int;
$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
"
    "Block 1:
[preds: 0 ] [succs: 17 ]
$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null);
r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7;
goto [?= return 1];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
"
    "Block 3:
[preds: 2 16 ] [succs: 4 5 ]
$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i0 != i1 goto r2 = r8;
"
    "Block 4:
[preds: 3 ] [succs: ]
return 0;
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
r2 = r8;
$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i2 <= i1 goto $z1 = 0;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
$z1 = 1;
goto [?= z0 = $z1];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
$z1 = 0;
"
    "Block 8:
[preds: 6 7 ] [succs: 9 10 ]
z0 = $z1;
if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
"
    "Block 9:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
goto [?= r8 = $r9];
"
    "Block 10:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
"
    "Block 11:
[preds: 9 10 ] [succs: 12 16 ]
r8 = $r9;
if r8 != null goto (branch);
"
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
"
    "Block 13:
[preds: 12 ] [succs: 15 ]
$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5);
goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)];
"
    "Block 14:
[preds: 12 ] [succs: 15 ]
$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3);
"
    "Block 15:
[preds: 13 14 ] [succs: 17 ]
specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
goto [?= return 1];
"
    "Block 16:
[preds: 11 ] [succs: 3 ]
goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)];
"
    "Block 17:
[preds: 1 15 ] [succs: ]
return 1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.datastructures.trees.AVLTree;
i1 := @parameter0: int;
$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
"->"Block 1:
[preds: 0 ] [succs: 17 ]
$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null);
r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7;
goto [?= return 1];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.datastructures.trees.AVLTree;
i1 := @parameter0: int;
$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
";
    "Block 1:
[preds: 0 ] [succs: 17 ]
$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null);
r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7;
goto [?= return 1];
"->"Block 17:
[preds: 1 15 ] [succs: ]
return 1;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>;
"->"Block 3:
[preds: 2 16 ] [succs: 4 5 ]
$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i0 != i1 goto r2 = r8;
";
    "Block 3:
[preds: 2 16 ] [succs: 4 5 ]
$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i0 != i1 goto r2 = r8;
"->"Block 4:
[preds: 3 ] [succs: ]
return 0;
";
    "Block 3:
[preds: 2 16 ] [succs: 4 5 ]
$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i0 != i1 goto r2 = r8;
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
r2 = r8;
$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i2 <= i1 goto $z1 = 0;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
r2 = r8;
$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i2 <= i1 goto $z1 = 0;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
$z1 = 1;
goto [?= z0 = $z1];
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
r2 = r8;
$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i2 <= i1 goto $z1 = 0;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
$z1 = 0;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
$z1 = 1;
goto [?= z0 = $z1];
"->"Block 8:
[preds: 6 7 ] [succs: 9 10 ]
z0 = $z1;
if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
$z1 = 0;
"->"Block 8:
[preds: 6 7 ] [succs: 9 10 ]
z0 = $z1;
if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
";
    "Block 8:
[preds: 6 7 ] [succs: 9 10 ]
z0 = $z1;
if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
"->"Block 9:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
goto [?= r8 = $r9];
";
    "Block 8:
[preds: 6 7 ] [succs: 9 10 ]
z0 = $z1;
if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
"->"Block 10:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
";
    "Block 9:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
goto [?= r8 = $r9];
"->"Block 11:
[preds: 9 10 ] [succs: 12 16 ]
r8 = $r9;
if r8 != null goto (branch);
";
    "Block 10:
[preds: 8 ] [succs: 11 ]
$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
"->"Block 11:
[preds: 9 10 ] [succs: 12 16 ]
r8 = $r9;
if r8 != null goto (branch);
";
    "Block 11:
[preds: 9 10 ] [succs: 12 16 ]
r8 = $r9;
if r8 != null goto (branch);
"->"Block 12:
[preds: 11 ] [succs: 13 14 ]
if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
";
    "Block 11:
[preds: 9 10 ] [succs: 12 16 ]
r8 = $r9;
if r8 != null goto (branch);
"->"Block 16:
[preds: 11 ] [succs: 3 ]
goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)];
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
"->"Block 13:
[preds: 12 ] [succs: 15 ]
$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5);
goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)];
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
"->"Block 14:
[preds: 12 ] [succs: 15 ]
$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3);
";
    "Block 13:
[preds: 12 ] [succs: 15 ]
$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5);
goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)];
"->"Block 15:
[preds: 13 14 ] [succs: 17 ]
specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
goto [?= return 1];
";
    "Block 14:
[preds: 12 ] [succs: 15 ]
$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node;
specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2);
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3);
"->"Block 15:
[preds: 13 14 ] [succs: 17 ]
specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
goto [?= return 1];
";
    "Block 15:
[preds: 13 14 ] [succs: 17 ]
specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
goto [?= return 1];
"->"Block 17:
[preds: 1 15 ] [succs: ]
return 1;
";
    "Block 16:
[preds: 11 ] [succs: 3 ]
goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)];
"->"Block 3:
[preds: 2 16 ] [succs: 4 5 ]
$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8);
if $i0 != i1 goto r2 = r8;
";
}
