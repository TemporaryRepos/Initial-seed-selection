digraph "unitGraph" {
    "r4 := @this: com.thealgorithms.searches.JumpSearch"
    "r0 := @parameter0: java.lang.Comparable[]"
    "r1 := @parameter1: java.lang.Comparable"
    "i0 = lengthof r0"
    "$d0 = (double) i0"
    "$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)"
    "i1 = (int) $d1"
    "i8 = i1"
    "$r2 = r0[i8]"
    "$i2 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)"
    "if $i2 <= 0 goto i9 = i8 - i1"
    "$i3 = lengthof r0"
    "$i4 = $i3 - 1"
    "if i8 >= $i4 goto i9 = i8 - i1"
    "$i7 = i8 + i1"
    "$i5 = lengthof r0"
    "$i6 = $i5 - 1"
    "i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6)"
    "goto [?= $r2 = r0[i8]]"
    "i9 = i8 - i1"
    "if i9 > i8 goto return -1"
    "$r3 = r0[i9]"
    "if $r3 != r1 goto i9 = i9 + 1"
    "return i9"
    "i9 = i9 + 1"
    "goto [?= (branch)]"
    "return -1"
    "r4 := @this: com.thealgorithms.searches.JumpSearch"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"r1 := @parameter1: java.lang.Comparable";
    "r1 := @parameter1: java.lang.Comparable"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"$d0 = (double) i0";
    "$d0 = (double) i0"->"$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)";
    "$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)"->"i1 = (int) $d1";
    "i1 = (int) $d1"->"i8 = i1";
    "i8 = i1"->"$r2 = r0[i8]";
    "$r2 = r0[i8]"->"$i2 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)";
    "$i2 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2)"->"if $i2 <= 0 goto i9 = i8 - i1";
    "if $i2 <= 0 goto i9 = i8 - i1"->"$i3 = lengthof r0";
    "if $i2 <= 0 goto i9 = i8 - i1"->"i9 = i8 - i1";
    "$i3 = lengthof r0"->"$i4 = $i3 - 1";
    "$i4 = $i3 - 1"->"if i8 >= $i4 goto i9 = i8 - i1";
    "if i8 >= $i4 goto i9 = i8 - i1"->"$i7 = i8 + i1";
    "if i8 >= $i4 goto i9 = i8 - i1"->"i9 = i8 - i1";
    "$i7 = i8 + i1"->"$i5 = lengthof r0";
    "$i5 = lengthof r0"->"$i6 = $i5 - 1";
    "$i6 = $i5 - 1"->"i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6)";
    "i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6)"->"goto [?= $r2 = r0[i8]]";
    "goto [?= $r2 = r0[i8]]"->"$r2 = r0[i8]";
    "i9 = i8 - i1"->"if i9 > i8 goto return -1";
    "if i9 > i8 goto return -1"->"$r3 = r0[i9]";
    "if i9 > i8 goto return -1"->"return -1";
    "$r3 = r0[i9]"->"if $r3 != r1 goto i9 = i9 + 1";
    "if $r3 != r1 goto i9 = i9 + 1"->"return i9";
    "if $r3 != r1 goto i9 = i9 + 1"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 > i8 goto return -1";
}
