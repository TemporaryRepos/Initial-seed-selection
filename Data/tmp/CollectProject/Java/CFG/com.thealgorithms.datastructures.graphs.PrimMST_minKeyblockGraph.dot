digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @this: com.thealgorithms.datastructures.graphs.PrimMST;
r2 := @parameter0: int[];
r0 := @parameter1: java.lang.Boolean[];
i1 = 2147483647;
i2 = -1;
i3 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 5 goto return i2;
"
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r1 = r0[i3];
$z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();
if $z0 != 0 goto i3 = i3 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i0 = r2[i3];
if $i0 >= i1 goto i3 = i3 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
i1 = r2[i3];
i2 = i3;
"
    "Block 5:
[preds: 2 3 4 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return i2;
"
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @this: com.thealgorithms.datastructures.graphs.PrimMST;
r2 := @parameter0: int[];
r0 := @parameter1: java.lang.Boolean[];
i1 = 2147483647;
i2 = -1;
i3 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 5 goto return i2;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 5 goto return i2;
"->"Block 2:
[preds: 1 ] [succs: 3 5 ]
$r1 = r0[i3];
$z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();
if $z0 != 0 goto i3 = i3 + 1;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 5 goto return i2;
"->"Block 6:
[preds: 1 ] [succs: ]
return i2;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r1 = r0[i3];
$z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();
if $z0 != 0 goto i3 = i3 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$i0 = r2[i3];
if $i0 >= i1 goto i3 = i3 + 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 5 ]
$r1 = r0[i3];
$z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();
if $z0 != 0 goto i3 = i3 + 1;
"->"Block 5:
[preds: 2 3 4 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i0 = r2[i3];
if $i0 >= i1 goto i3 = i3 + 1;
"->"Block 4:
[preds: 3 ] [succs: 5 ]
i1 = r2[i3];
i2 = i3;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$i0 = r2[i3];
if $i0 >= i1 goto i3 = i3 + 1;
"->"Block 5:
[preds: 2 3 4 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
i1 = r2[i3];
i2 = i3;
"->"Block 5:
[preds: 2 3 4 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 2 3 4 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 5 goto return i2;
";
}
