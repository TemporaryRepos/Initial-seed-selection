digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 5 ]
r0 := @this: com.thealgorithms.sorts.BitonicSort;
r1 := @parameter0: int[];
i2 := @parameter1: int;
i0 := @parameter2: int;
i4 := @parameter3: int;
if i0 <= 1 goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
i1 = i0 / 2;
i7 = i2;
"
    "Block 2:
[preds: 1 3 ] [succs: 3 4 ]
$i3 = i2 + i1;
if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
"
    "Block 3:
[preds: 2 ] [succs: 2 ]
$i6 = i7 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4);
i7 = i7 + 1;
goto [?= $i3 = i2 + i1];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
$i5 = i2 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4);
"
    "Block 5:
[preds: 0 4 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 5 ]
r0 := @this: com.thealgorithms.sorts.BitonicSort;
r1 := @parameter0: int[];
i2 := @parameter1: int;
i0 := @parameter2: int;
i4 := @parameter3: int;
if i0 <= 1 goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
i1 = i0 / 2;
i7 = i2;
";
    "Block 0:
[preds: ] [succs: 1 5 ]
r0 := @this: com.thealgorithms.sorts.BitonicSort;
r1 := @parameter0: int[];
i2 := @parameter1: int;
i0 := @parameter2: int;
i4 := @parameter3: int;
if i0 <= 1 goto return;
"->"Block 5:
[preds: 0 4 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
i1 = i0 / 2;
i7 = i2;
"->"Block 2:
[preds: 1 3 ] [succs: 3 4 ]
$i3 = i2 + i1;
if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
";
    "Block 2:
[preds: 1 3 ] [succs: 3 4 ]
$i3 = i2 + i1;
if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
"->"Block 3:
[preds: 2 ] [succs: 2 ]
$i6 = i7 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4);
i7 = i7 + 1;
goto [?= $i3 = i2 + i1];
";
    "Block 2:
[preds: 1 3 ] [succs: 3 4 ]
$i3 = i2 + i1;
if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
"->"Block 4:
[preds: 2 ] [succs: 5 ]
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
$i5 = i2 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4);
";
    "Block 3:
[preds: 2 ] [succs: 2 ]
$i6 = i7 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4);
i7 = i7 + 1;
goto [?= $i3 = i2 + i1];
"->"Block 2:
[preds: 1 3 ] [succs: 3 4 ]
$i3 = i2 + i1;
if i7 >= $i3 goto virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4);
$i5 = i2 + i1;
virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4);
"->"Block 5:
[preds: 0 4 ] [succs: ]
return;
";
}
