digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "if i0 >= i1 goto return"
    "r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1)"
    "$i2 = r1[0]"
    "$i3 = $i2 - 1"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3)"
    "$i4 = r1[0]"
    "$i7 = $i4 + 1"
    "$i5 = r1[1]"
    "$i6 = $i5 - 1"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6)"
    "$i8 = r1[1]"
    "$i9 = $i8 + 1"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1)"
    "return"
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"if i0 >= i1 goto return";
    "if i0 >= i1 goto return"->"r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1)";
    "if i0 >= i1 goto return"->"return";
    "r1 = staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: int[] partition(java.lang.Comparable[],int,int)>(r0, i0, i1)"->"$i2 = r1[0]";
    "$i2 = r1[0]"->"$i3 = $i2 - 1";
    "$i3 = $i2 - 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, i0, $i3)"->"$i4 = r1[0]";
    "$i4 = r1[0]"->"$i7 = $i4 + 1";
    "$i7 = $i4 + 1"->"$i5 = r1[1]";
    "$i5 = r1[1]"->"$i6 = $i5 - 1";
    "$i6 = $i5 - 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i7, $i6)"->"$i8 = r1[1]";
    "$i8 = r1[1]"->"$i9 = $i8 + 1";
    "$i9 = $i8 + 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void dualPivotQuicksort(java.lang.Comparable[],int,int)>(r0, $i9, i1)"->"return";
}
