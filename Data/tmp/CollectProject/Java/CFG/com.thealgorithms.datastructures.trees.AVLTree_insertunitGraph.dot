digraph "unitGraph" {
    "r0 := @this: com.thealgorithms.datastructures.trees.AVLTree"
    "i1 := @parameter0: int"
    "$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"
    "if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"
    "$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node"
    "specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null)"
    "r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7"
    "goto [?= return 1]"
    "r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"
    "$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"
    "if $i0 != i1 goto r2 = r8"
    "return 0"
    "r2 = r8"
    "$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"
    "if $i2 <= i1 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= z0 = $z1]"
    "$z1 = 0"
    "z0 = $z1"
    "if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"
    "$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"
    "goto [?= r8 = $r9]"
    "$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"
    "r8 = $r9"
    "if r8 != null goto (branch)"
    "if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node"
    "$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node"
    "specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)"
    "staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5)"
    "goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)]"
    "$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node"
    "specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)"
    "staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3)"
    "specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)"
    "goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)]"
    "return 1"
    "r0 := @this: com.thealgorithms.datastructures.trees.AVLTree"->"i1 := @parameter0: int";
    "i1 := @parameter0: int"->"$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>";
    "$r1 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"->"if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>";
    "if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"->"$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node";
    "if $r1 != null goto r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"->"r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>";
    "$r7 = new com.thealgorithms.datastructures.trees.AVLTree$Node"->"specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null)";
    "specialinvoke $r7.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, null)"->"r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7";
    "r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root> = $r7"->"goto [?= return 1]";
    "goto [?= return 1]"->"return 1";
    "r8 = r0.<com.thealgorithms.datastructures.trees.AVLTree: com.thealgorithms.datastructures.trees.AVLTree$Node root>"->"$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
    "$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"if $i0 != i1 goto r2 = r8";
    "if $i0 != i1 goto r2 = r8"->"return 0";
    "if $i0 != i1 goto r2 = r8"->"r2 = r8";
    "r2 = r8"->"$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
    "$i2 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"if $i2 <= i1 goto $z1 = 0";
    "if $i2 <= i1 goto $z1 = 0"->"$z1 = 1";
    "if $i2 <= i1 goto $z1 = 0"->"$z1 = 0";
    "$z1 = 1"->"goto [?= z0 = $z1]";
    "goto [?= z0 = $z1]"->"z0 = $z1";
    "$z1 = 0"->"z0 = $z1";
    "z0 = $z1"->"if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
    "if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
    "if z0 == 0 goto $r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
    "$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"goto [?= r8 = $r9]";
    "goto [?= r8 = $r9]"->"r8 = $r9";
    "$r9 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)"->"r8 = $r9";
    "r8 = $r9"->"if r8 != null goto (branch)";
    "if r8 != null goto (branch)"->"if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node";
    "if r8 != null goto (branch)"->"goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)]";
    "if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node"->"$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node";
    "if z0 == 0 goto $r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node"->"$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node";
    "$r5 = new com.thealgorithms.datastructures.trees.AVLTree$Node"->"specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)";
    "specialinvoke $r5.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)"->"staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5)";
    "staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r5)"->"goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)]";
    "goto [?= specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)]"->"specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)";
    "$r3 = new com.thealgorithms.datastructures.trees.AVLTree$Node"->"specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)";
    "specialinvoke $r3.<com.thealgorithms.datastructures.trees.AVLTree$Node: void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r0, i1, r2)"->"staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3)";
    "staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2, $r3)"->"specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)";
    "specialinvoke r0.<com.thealgorithms.datastructures.trees.AVLTree: void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2)"->"goto [?= return 1]";
    "goto [?= return 1]"->"return 1";
    "goto [?= $i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)]"->"$i0 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r8)";
}
