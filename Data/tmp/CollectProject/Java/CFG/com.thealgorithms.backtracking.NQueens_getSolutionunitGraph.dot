digraph "unitGraph" {
    "i1 := @parameter0: int"
    "r1 := @parameter1: java.util.List"
    "r0 := @parameter2: int[]"
    "i0 := @parameter3: int"
    "if i0 != i1 goto i6 = 0"
    "$r2 = new java.util.ArrayList"
    "specialinvoke $r2.<java.util.ArrayList: void <init>()>()"
    "r8 = $r2"
    "i4 = 0"
    "if i4 >= i1 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "r4 = $r3"
    "i5 = 0"
    "if i5 >= i1 goto $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$i3 = r0[i4]"
    "if i5 != $i3 goto $r9 = \".\""
    "$r9 = \"Q\""
    "goto [?= virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)]"
    "$r9 = \".\""
    "virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "$r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r5)"
    "i4 = i4 + 1"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)"
    "return"
    "i6 = 0"
    "if i6 >= i1 goto return"
    "r0[i0] = i6"
    "$z0 = staticinvoke <com.thealgorithms.backtracking.NQueens: boolean isPlacedCorrectly(int[],int,int)>(r0, i6, i0)"
    "if $z0 == 0 goto i6 = i6 + 1"
    "$i2 = i0 + 1"
    "staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i1, r1, r0, $i2)"
    "i6 = i6 + 1"
    "i1 := @parameter0: int"->"r1 := @parameter1: java.util.List";
    "r1 := @parameter1: java.util.List"->"r0 := @parameter2: int[]";
    "r0 := @parameter2: int[]"->"i0 := @parameter3: int";
    "i0 := @parameter3: int"->"if i0 != i1 goto i6 = 0";
    "if i0 != i1 goto i6 = 0"->"$r2 = new java.util.ArrayList";
    "if i0 != i1 goto i6 = 0"->"i6 = 0";
    "$r2 = new java.util.ArrayList"->"specialinvoke $r2.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r2.<java.util.ArrayList: void <init>()>()"->"r8 = $r2";
    "r8 = $r2"->"i4 = 0";
    "i4 = 0"->"if i4 >= i1 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)";
    "if i4 >= i1 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)"->"$r3 = new java.lang.StringBuilder";
    "if i4 >= i1 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"r4 = $r3";
    "r4 = $r3"->"i5 = 0";
    "i5 = 0"->"if i5 >= i1 goto $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "if i5 >= i1 goto $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"$i3 = r0[i4]";
    "if i5 >= i1 goto $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$i3 = r0[i4]"->"if i5 != $i3 goto $r9 = \".\"";
    "if i5 != $i3 goto $r9 = \".\""->"$r9 = \"Q\"";
    "if i5 != $i3 goto $r9 = \".\""->"$r9 = \".\"";
    "$r9 = \"Q\""->"goto [?= virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)]";
    "goto [?= virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)]"->"virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)";
    "$r9 = \".\""->"virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)";
    "virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i1 goto $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r5)";
    "interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r5)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= i1 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8)"->"return";
    "i6 = 0"->"if i6 >= i1 goto return";
    "if i6 >= i1 goto return"->"r0[i0] = i6";
    "if i6 >= i1 goto return"->"return";
    "r0[i0] = i6"->"$z0 = staticinvoke <com.thealgorithms.backtracking.NQueens: boolean isPlacedCorrectly(int[],int,int)>(r0, i6, i0)";
    "$z0 = staticinvoke <com.thealgorithms.backtracking.NQueens: boolean isPlacedCorrectly(int[],int,int)>(r0, i6, i0)"->"if $z0 == 0 goto i6 = i6 + 1";
    "if $z0 == 0 goto i6 = i6 + 1"->"$i2 = i0 + 1";
    "if $z0 == 0 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$i2 = i0 + 1"->"staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i1, r1, r0, $i2)";
    "staticinvoke <com.thealgorithms.backtracking.NQueens: void getSolution(int,java.util.List,int[],int)>(i1, r1, r0, $i2)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i1 goto return";
}
