digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
r11 := @parameter0: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
r1 := @parameter1: java.lang.Comparable;
if r11 != null goto $r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"
    "Block 1:
[preds: 0 ] [succs: 6 ]
$r10 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
specialinvoke $r10.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: void <init>(java.lang.Object)>(r1);
r11 = $r10;
goto [?= return r11];
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r2 = (java.lang.Comparable) $r0;
$i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i0 <= 0 goto $r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"
    "Block 3:
[preds: 2 ] [succs: 6 ]
$r8 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left>;
$r9 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r8, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left> = $r9;
goto [?= return r11];
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r4 = (java.lang.Comparable) $r3;
$i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i1 >= 0 goto return r11;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r6 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right>;
$r7 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r6, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right> = $r7;
"
    "Block 6:
[preds: 1 3 4 5 ] [succs: ]
return r11;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
r11 := @parameter0: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
r1 := @parameter1: java.lang.Comparable;
if r11 != null goto $r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"->"Block 1:
[preds: 0 ] [succs: 6 ]
$r10 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
specialinvoke $r10.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: void <init>(java.lang.Object)>(r1);
r11 = $r10;
goto [?= return r11];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
r11 := @parameter0: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
r1 := @parameter1: java.lang.Comparable;
if r11 != null goto $r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r2 = (java.lang.Comparable) $r0;
$i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i0 <= 0 goto $r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
";
    "Block 1:
[preds: 0 ] [succs: 6 ]
$r10 = new com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node;
specialinvoke $r10.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: void <init>(java.lang.Object)>(r1);
r11 = $r10;
goto [?= return r11];
"->"Block 6:
[preds: 1 3 4 5 ] [succs: ]
return r11;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r2 = (java.lang.Comparable) $r0;
$i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i0 <= 0 goto $r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"->"Block 3:
[preds: 2 ] [succs: 6 ]
$r8 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left>;
$r9 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r8, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left> = $r9;
goto [?= return r11];
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r0 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r2 = (java.lang.Comparable) $r0;
$i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i0 <= 0 goto $r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
$r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r4 = (java.lang.Comparable) $r3;
$i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i1 >= 0 goto return r11;
";
    "Block 3:
[preds: 2 ] [succs: 6 ]
$r8 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left>;
$r9 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r8, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left> = $r9;
goto [?= return r11];
"->"Block 6:
[preds: 1 3 4 5 ] [succs: ]
return r11;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r4 = (java.lang.Comparable) $r3;
$i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i1 >= 0 goto return r11;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r6 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right>;
$r7 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r6, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right> = $r7;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r3 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: java.lang.Object data>;
$r4 = (java.lang.Comparable) $r3;
$i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i1 >= 0 goto return r11;
"->"Block 6:
[preds: 1 3 4 5 ] [succs: ]
return r11;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r6 = r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right>;
$r7 = specialinvoke r5.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable)>($r6, r1);
r11.<com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node: com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right> = $r7;
"->"Block 6:
[preds: 1 3 4 5 ] [succs: ]
return r11;
";
}
