digraph "unitGraph" {
    "r0 := @parameter0: int[]"
    "i0 = lengthof r0"
    "i12 = 0"
    "$r1 = new java.util.Stack"
    "specialinvoke $r1.<java.util.Stack: void <init>()>()"
    "r2 = $r1"
    "i13 = 0"
    "if i13 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"
    "i14 = i13"
    "$z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"
    "if $z1 != 0 goto $r5 = newarray (int)[2]"
    "$r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"
    "$r8 = (int[]) $r7"
    "$i7 = $r8[1]"
    "$i6 = r0[i13]"
    "if $i7 <= $i6 goto $r5 = newarray (int)[2]"
    "$r9 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"
    "r10 = (int[]) $r9"
    "$i10 = r10[1]"
    "$i8 = r10[0]"
    "$i9 = i13 - $i8"
    "$i11 = $i10 * $i9"
    "i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i11)"
    "i14 = r10[0]"
    "goto [?= $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]"
    "$r5 = newarray (int)[2]"
    "$r5[0] = i14"
    "$i5 = r0[i13]"
    "$r5[1] = $i5"
    "virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5)"
    "i13 = i13 + 1"
    "goto [?= (branch)]"
    "$z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"
    "if $z0 != 0 goto $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)"
    "$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"
    "r11 = (int[]) $r4"
    "$i3 = r11[1]"
    "$i1 = r11[0]"
    "$i2 = i0 - $i1"
    "$i4 = $i3 * $i2"
    "i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i4)"
    "goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)"
    "return $r3"
    "r0 := @parameter0: int[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i12 = 0";
    "i12 = 0"->"$r1 = new java.util.Stack";
    "$r1 = new java.util.Stack"->"specialinvoke $r1.<java.util.Stack: void <init>()>()";
    "specialinvoke $r1.<java.util.Stack: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"i13 = 0";
    "i13 = 0"->"if i13 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "if i13 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"->"i14 = i13";
    "if i13 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"->"$z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "i14 = i13"->"$z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "$z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"->"if $z1 != 0 goto $r5 = newarray (int)[2]";
    "if $z1 != 0 goto $r5 = newarray (int)[2]"->"$r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()";
    "if $z1 != 0 goto $r5 = newarray (int)[2]"->"$r5 = newarray (int)[2]";
    "$r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"->"$r8 = (int[]) $r7";
    "$r8 = (int[]) $r7"->"$i7 = $r8[1]";
    "$i7 = $r8[1]"->"$i6 = r0[i13]";
    "$i6 = r0[i13]"->"if $i7 <= $i6 goto $r5 = newarray (int)[2]";
    "if $i7 <= $i6 goto $r5 = newarray (int)[2]"->"$r9 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()";
    "if $i7 <= $i6 goto $r5 = newarray (int)[2]"->"$r5 = newarray (int)[2]";
    "$r9 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"->"r10 = (int[]) $r9";
    "r10 = (int[]) $r9"->"$i10 = r10[1]";
    "$i10 = r10[1]"->"$i8 = r10[0]";
    "$i8 = r10[0]"->"$i9 = i13 - $i8";
    "$i9 = i13 - $i8"->"$i11 = $i10 * $i9";
    "$i11 = $i10 * $i9"->"i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i11)";
    "i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i11)"->"i14 = r10[0]";
    "i14 = r10[0]"->"goto [?= $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]";
    "goto [?= $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]"->"$z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "$r5 = newarray (int)[2]"->"$r5[0] = i14";
    "$r5[0] = i14"->"$i5 = r0[i13]";
    "$i5 = r0[i13]"->"$r5[1] = $i5";
    "$r5[1] = $i5"->"virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5)";
    "virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5)"->"i13 = i13 + 1";
    "i13 = i13 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i13 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "$z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()"->"if $z0 != 0 goto $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)";
    "if $z0 != 0 goto $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)"->"$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()";
    "if $z0 != 0 goto $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)"->"$r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)";
    "$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"->"r11 = (int[]) $r4";
    "r11 = (int[]) $r4"->"$i3 = r11[1]";
    "$i3 = r11[1]"->"$i1 = r11[0]";
    "$i1 = r11[0]"->"$i2 = i0 - $i1";
    "$i2 = i0 - $i1"->"$i4 = $i3 * $i2";
    "$i4 = $i3 * $i2"->"i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i4)";
    "i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i4)"->"goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]";
    "goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]"->"$z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i12)"->"return $r3";
}
