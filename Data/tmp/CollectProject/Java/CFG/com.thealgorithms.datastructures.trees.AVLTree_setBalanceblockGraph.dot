digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @this: com.thealgorithms.datastructures.trees.AVLTree;
r0 := @parameter0: com.thealgorithms.datastructures.trees.AVLTree$Node[];
r1 = r0;
i0 = lengthof r1;
i5 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r2 = r1[i5];
specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: void reheight(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$r4 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i1 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r4);
$r5 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i2 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r5);
$i3 = $i1 - $i2;
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$402(com.thealgorithms.datastructures.trees.AVLTree$Node,int)>(r2, $i3);
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @this: com.thealgorithms.datastructures.trees.AVLTree;
r0 := @parameter0: com.thealgorithms.datastructures.trees.AVLTree$Node[];
r1 = r0;
i0 = lengthof r1;
i5 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i0 goto return;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r2 = r1[i5];
specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: void reheight(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$r4 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i1 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r4);
$r5 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i2 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r5);
$i3 = $i1 - $i2;
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$402(com.thealgorithms.datastructures.trees.AVLTree$Node,int)>(r2, $i3);
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i0 goto return;
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r2 = r1[i5];
specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: void reheight(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$r4 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i1 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r4);
$r5 = staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node)>(r2);
$i2 = specialinvoke r3.<com.thealgorithms.datastructures.trees.AVLTree: int height(com.thealgorithms.datastructures.trees.AVLTree$Node)>($r5);
$i3 = $i1 - $i2;
staticinvoke <com.thealgorithms.datastructures.trees.AVLTree$Node: int access$402(com.thealgorithms.datastructures.trees.AVLTree$Node,int)>(r2, $i3);
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i5 >= i0 goto return;
";
}
