digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: int[];
$i0 = lengthof r0;
if $i0 != 1 goto $i1 = lengthof r0;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$i2 = r0[0];
goto [?= return $i2];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$i1 = lengthof r0;
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r0, 0, $i1);
"
    "Block 3:
[preds: 1 2 ] [succs: ]
return $i2;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: int[];
$i0 = lengthof r0;
if $i0 != 1 goto $i1 = lengthof r0;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$i2 = r0[0];
goto [?= return $i2];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: int[];
$i0 = lengthof r0;
if $i0 != 1 goto $i1 = lengthof r0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$i1 = lengthof r0;
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r0, 0, $i1);
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$i2 = r0[0];
goto [?= return $i2];
"->"Block 3:
[preds: 1 2 ] [succs: ]
return $i2;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$i1 = lengthof r0;
$i2 = staticinvoke <com.thealgorithms.maths.FindMinRecursion: int min(int[],int,int)>(r0, 0, $i1);
"->"Block 3:
[preds: 1 2 ] [succs: ]
return $i2;
";
}
