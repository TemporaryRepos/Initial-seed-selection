digraph "unitGraph" {
    "r9 := @parameter0: int[]"
    "i0 := @parameter1: int"
    "$r0 = new java.util.Stack"
    "specialinvoke $r0.<java.util.Stack: void <init>()>()"
    "r1 = $r0"
    "$i1 = i0 + 1"
    "r2 = newarray (int)[$i1]"
    "$i2 = i0 + 1"
    "r3 = newarray (int)[$i2]"
    "i24 = 0"
    "if i24 >= i0 goto i25 = 0"
    "r2[i24] = -1"
    "r3[i24] = i0"
    "i24 = i24 + 1"
    "goto [?= (branch)]"
    "i25 = 0"
    "if i25 >= i0 goto $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "$z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "$r22 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"
    "$r23 = (java.lang.Integer) $r22"
    "$i21 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()"
    "$i23 = r9[$i21]"
    "$i22 = r9[i25]"
    "if $i23 < $i22 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()"
    "goto [?= $z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"
    "$z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "if $z4 != 0 goto $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)"
    "$r20 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"
    "$r21 = (java.lang.Integer) $r20"
    "$i20 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()"
    "r2[i25] = $i20"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)"
    "virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r18)"
    "i25 = i25 + 1"
    "$z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "if $z0 != 0 goto i26 = i0 - 1"
    "goto [?= $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"
    "i26 = i0 - 1"
    "if i26 < 0 goto $i3 = i0 + 1"
    "$z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "$r14 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"
    "$r15 = (java.lang.Integer) $r14"
    "$i17 = virtualinvoke $r15.<java.lang.Integer: int intValue()>()"
    "$i19 = r9[$i17]"
    "$i18 = r9[i26]"
    "if $i19 < $i18 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "goto [?= $z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"
    "$z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"
    "if $z2 != 0 goto $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)"
    "$r12 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"
    "$r13 = (java.lang.Integer) $r12"
    "$i16 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()"
    "r3[i26] = $i16"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)"
    "virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r10)"
    "i26 = i26 + -1"
    "$i3 = i0 + 1"
    "r25 = newarray (int)[$i3]"
    "i27 = 0"
    "if i27 > i0 goto i28 = 0"
    "r25[i27] = 0"
    "i27 = i27 + 1"
    "i28 = 0"
    "if i28 >= i0 goto i29 = i0 - 1"
    "$i10 = r3[i28]"
    "$i9 = r2[i28]"
    "$i11 = $i10 - $i9"
    "i12 = $i11 - 1"
    "$i14 = r25[i12]"
    "$i13 = r9[i28]"
    "$i15 = staticinvoke <java.lang.Math: int max(int,int)>($i14, $i13)"
    "r25[i12] = $i15"
    "i28 = i28 + 1"
    "i29 = i0 - 1"
    "if i29 < 1 goto i30 = 1"
    "$i7 = r25[i29]"
    "$i5 = i29 + 1"
    "$i6 = r25[$i5]"
    "$i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6)"
    "r25[i29] = $i8"
    "i29 = i29 + -1"
    "i30 = 1"
    "if i30 > i0 goto return r25"
    "$r5 = <java.lang.System: java.io.PrintStream out>"
    "$r4 = new java.lang.StringBuilder"
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"
    "$i4 = r25[i30]"
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r8)"
    "i30 = i30 + 1"
    "return r25"
    "r9 := @parameter0: int[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"$r0 = new java.util.Stack";
    "$r0 = new java.util.Stack"->"specialinvoke $r0.<java.util.Stack: void <init>()>()";
    "specialinvoke $r0.<java.util.Stack: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$i1 = i0 + 1";
    "$i1 = i0 + 1"->"r2 = newarray (int)[$i1]";
    "r2 = newarray (int)[$i1]"->"$i2 = i0 + 1";
    "$i2 = i0 + 1"->"r3 = newarray (int)[$i2]";
    "r3 = newarray (int)[$i2]"->"i24 = 0";
    "i24 = 0"->"if i24 >= i0 goto i25 = 0";
    "if i24 >= i0 goto i25 = 0"->"r2[i24] = -1";
    "if i24 >= i0 goto i25 = 0"->"i25 = 0";
    "r2[i24] = -1"->"r3[i24] = i0";
    "r3[i24] = i0"->"i24 = i24 + 1";
    "i24 = i24 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i24 >= i0 goto i25 = 0";
    "i25 = 0"->"if i25 >= i0 goto $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if i25 >= i0 goto $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if i25 >= i0 goto $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"if $z3 != 0 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$r22 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()";
    "if $z3 != 0 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$r22 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"->"$r23 = (java.lang.Integer) $r22";
    "$r23 = (java.lang.Integer) $r22"->"$i21 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()";
    "$i21 = virtualinvoke $r23.<java.lang.Integer: int intValue()>()"->"$i23 = r9[$i21]";
    "$i23 = r9[$i21]"->"$i22 = r9[i25]";
    "$i22 = r9[i25]"->"if $i23 < $i22 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if $i23 < $i22 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()";
    "if $i23 < $i22 goto $z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()"->"goto [?= $z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]";
    "goto [?= $z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"->"$z3 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$z4 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"if $z4 != 0 goto $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)";
    "if $z4 != 0 goto $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)"->"$r20 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()";
    "if $z4 != 0 goto $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)";
    "$r20 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"->"$r21 = (java.lang.Integer) $r20";
    "$r21 = (java.lang.Integer) $r20"->"$i20 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()";
    "$i20 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()"->"r2[i25] = $i20";
    "r2[i25] = $i20"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25)"->"virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r18)";
    "virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r18)"->"i25 = i25 + 1";
    "i25 = i25 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i25 >= i0 goto $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"if $z0 != 0 goto i26 = i0 - 1";
    "if $z0 != 0 goto i26 = i0 - 1"->"virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()";
    "if $z0 != 0 goto i26 = i0 - 1"->"i26 = i0 - 1";
    "virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()"->"goto [?= $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]";
    "goto [?= $z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"->"$z0 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "i26 = i0 - 1"->"if i26 < 0 goto $i3 = i0 + 1";
    "if i26 < 0 goto $i3 = i0 + 1"->"$z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if i26 < 0 goto $i3 = i0 + 1"->"$i3 = i0 + 1";
    "$z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"if $z1 != 0 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$r14 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()";
    "if $z1 != 0 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$r14 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"->"$r15 = (java.lang.Integer) $r14";
    "$r15 = (java.lang.Integer) $r14"->"$i17 = virtualinvoke $r15.<java.lang.Integer: int intValue()>()";
    "$i17 = virtualinvoke $r15.<java.lang.Integer: int intValue()>()"->"$i19 = r9[$i17]";
    "$i19 = r9[$i17]"->"$i18 = r9[i26]";
    "$i18 = r9[i26]"->"if $i19 < $i18 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "if $i19 < $i18 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()";
    "if $i19 < $i18 goto $z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"$z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()"->"goto [?= $z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]";
    "goto [?= $z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()]"->"$z1 = virtualinvoke r1.<java.util.Stack: boolean empty()>()";
    "$z2 = virtualinvoke r1.<java.util.Stack: boolean empty()>()"->"if $z2 != 0 goto $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)";
    "if $z2 != 0 goto $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)"->"$r12 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()";
    "if $z2 != 0 goto $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)";
    "$r12 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()"->"$r13 = (java.lang.Integer) $r12";
    "$r13 = (java.lang.Integer) $r12"->"$i16 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()";
    "$i16 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()"->"r3[i26] = $i16";
    "r3[i26] = $i16"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26)"->"virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r10)";
    "virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r10)"->"i26 = i26 + -1";
    "i26 = i26 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i26 < 0 goto $i3 = i0 + 1";
    "$i3 = i0 + 1"->"r25 = newarray (int)[$i3]";
    "r25 = newarray (int)[$i3]"->"i27 = 0";
    "i27 = 0"->"if i27 > i0 goto i28 = 0";
    "if i27 > i0 goto i28 = 0"->"r25[i27] = 0";
    "if i27 > i0 goto i28 = 0"->"i28 = 0";
    "r25[i27] = 0"->"i27 = i27 + 1";
    "i27 = i27 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i27 > i0 goto i28 = 0";
    "i28 = 0"->"if i28 >= i0 goto i29 = i0 - 1";
    "if i28 >= i0 goto i29 = i0 - 1"->"$i10 = r3[i28]";
    "if i28 >= i0 goto i29 = i0 - 1"->"i29 = i0 - 1";
    "$i10 = r3[i28]"->"$i9 = r2[i28]";
    "$i9 = r2[i28]"->"$i11 = $i10 - $i9";
    "$i11 = $i10 - $i9"->"i12 = $i11 - 1";
    "i12 = $i11 - 1"->"$i14 = r25[i12]";
    "$i14 = r25[i12]"->"$i13 = r9[i28]";
    "$i13 = r9[i28]"->"$i15 = staticinvoke <java.lang.Math: int max(int,int)>($i14, $i13)";
    "$i15 = staticinvoke <java.lang.Math: int max(int,int)>($i14, $i13)"->"r25[i12] = $i15";
    "r25[i12] = $i15"->"i28 = i28 + 1";
    "i28 = i28 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i28 >= i0 goto i29 = i0 - 1";
    "i29 = i0 - 1"->"if i29 < 1 goto i30 = 1";
    "if i29 < 1 goto i30 = 1"->"$i7 = r25[i29]";
    "if i29 < 1 goto i30 = 1"->"i30 = 1";
    "$i7 = r25[i29]"->"$i5 = i29 + 1";
    "$i5 = i29 + 1"->"$i6 = r25[$i5]";
    "$i6 = r25[$i5]"->"$i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6)";
    "$i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6)"->"r25[i29] = $i8";
    "r25[i29] = $i8"->"i29 = i29 + -1";
    "i29 = i29 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i29 < 1 goto i30 = 1";
    "i30 = 1"->"if i30 > i0 goto return r25";
    "if i30 > i0 goto return r25"->"$r5 = <java.lang.System: java.io.PrintStream out>";
    "if i30 > i0 goto return r25"->"return r25";
    "$r5 = <java.lang.System: java.io.PrintStream out>"->"$r4 = new java.lang.StringBuilder";
    "$r4 = new java.lang.StringBuilder"->"specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()"->"$i4 = r25[i30]";
    "$i4 = r25[i30]"->"$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)";
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" \")"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r8)";
    "virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r8)"->"i30 = i30 + 1";
    "i30 = i30 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i30 > i0 goto return r25";
}
