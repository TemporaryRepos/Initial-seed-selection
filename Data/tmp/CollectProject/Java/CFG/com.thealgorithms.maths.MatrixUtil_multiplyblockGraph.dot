digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean canMultiply(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1);
if $z0 != 0 goto $r2 = r0[0];
"
    "Block 1:
[preds: 0 ] [succs: ]
$r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return $r8;
"
    "Block 2:
[preds: 0 ] [succs: ]
$r2 = r0[0];
i0 = lengthof $r2;
i1 = lengthof r0;
$r3 = r1[0];
i2 = lengthof $r3;
r4 = newmultiarray (java.math.BigDecimal)[i1][i2];
$r5 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, i1);
$r6 = staticinvoke <com.thealgorithms.maths.MatrixUtil$lambda_multiply_4__92: java.util.function.IntConsumer bootstrap$(int,java.math.BigDecimal[][],int,java.math.BigDecimal[][],java.math.BigDecimal[][])>(i2, r4, i0, r0, r1);
interfaceinvoke $r5.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r6);
$r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r4);
return $r7;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean canMultiply(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1);
if $z0 != 0 goto $r2 = r0[0];
"->"Block 1:
[preds: 0 ] [succs: ]
$r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return $r8;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.math.BigDecimal[][];
r1 := @parameter1: java.math.BigDecimal[][];
$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean canMultiply(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1);
if $z0 != 0 goto $r2 = r0[0];
"->"Block 2:
[preds: 0 ] [succs: ]
$r2 = r0[0];
i0 = lengthof $r2;
i1 = lengthof r0;
$r3 = r1[0];
i2 = lengthof $r3;
r4 = newmultiarray (java.math.BigDecimal)[i1][i2];
$r5 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, i1);
$r6 = staticinvoke <com.thealgorithms.maths.MatrixUtil$lambda_multiply_4__92: java.util.function.IntConsumer bootstrap$(int,java.math.BigDecimal[][],int,java.math.BigDecimal[][],java.math.BigDecimal[][])>(i2, r4, i0, r0, r1);
interfaceinvoke $r5.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r6);
$r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r4);
return $r7;
";
}
