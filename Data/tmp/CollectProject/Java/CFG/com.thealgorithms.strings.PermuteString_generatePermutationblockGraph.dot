digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
$i2 = i1 - 1;
if i0 != $i2 goto i4 = i0;
"
    "Block 1:
[preds: 0 ] [succs: 5 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1);
goto [?= return];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
i4 = i0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= i1 goto return;
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4);
$i3 = i0 + 1;
staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1);
r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4);
i4 = i4 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 1 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
$i2 = i1 - 1;
if i0 != $i2 goto i4 = i0;
"->"Block 1:
[preds: 0 ] [succs: 5 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1);
goto [?= return];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String;
i0 := @parameter1: int;
i1 := @parameter2: int;
$i2 = i1 - 1;
if i0 != $i2 goto i4 = i0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
i4 = i0;
";
    "Block 1:
[preds: 0 ] [succs: 5 ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>(r1);
goto [?= return];
"->"Block 5:
[preds: 1 3 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
i4 = i0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= i1 goto return;
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= i1 goto return;
"->"Block 4:
[preds: 3 ] [succs: 3 ]
r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4);
$i3 = i0 + 1;
staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1);
r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4);
i4 = i4 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= i1 goto return;
"->"Block 5:
[preds: 1 3 ] [succs: ]
return;
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
r2 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r1, i0, i4);
$i3 = i0 + 1;
staticinvoke <com.thealgorithms.strings.PermuteString: void generatePermutation(java.lang.String,int,int)>(r2, $i3, i1);
r1 = staticinvoke <com.thealgorithms.strings.PermuteString: java.lang.String swapString(java.lang.String,int,int)>(r2, i0, i4);
i4 = i4 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= i1 goto return;
";
}
