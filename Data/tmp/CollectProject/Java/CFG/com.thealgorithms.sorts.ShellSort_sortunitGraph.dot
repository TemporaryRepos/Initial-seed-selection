digraph "unitGraph" {
    "r4 := @this: com.thealgorithms.sorts.ShellSort"
    "r0 := @parameter0: java.lang.Comparable[]"
    "i0 = lengthof r0"
    "i5 = 1"
    "$i1 = i0 / 3"
    "if i5 >= $i1 goto (branch)"
    "$i4 = 3 * i5"
    "i5 = $i4 + 1"
    "goto [?= $i1 = i0 / 3]"
    "if i5 <= 0 goto return r0"
    "i6 = i5"
    "if i6 >= i0 goto i5 = i5 / 3"
    "r1 = r0[i6]"
    "i7 = i6"
    "if i7 < i5 goto r0[i7] = r1"
    "$i2 = i7 - i5"
    "$r2 = r0[$i2]"
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2)"
    "if $z0 == 0 goto r0[i7] = r1"
    "$i3 = i7 - i5"
    "$r3 = r0[$i3]"
    "r0[i7] = $r3"
    "i7 = i7 - i5"
    "goto [?= (branch)]"
    "r0[i7] = r1"
    "i6 = i6 + 1"
    "i5 = i5 / 3"
    "return r0"
    "r4 := @this: com.thealgorithms.sorts.ShellSort"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"i5 = 1";
    "i5 = 1"->"$i1 = i0 / 3";
    "$i1 = i0 / 3"->"if i5 >= $i1 goto (branch)";
    "if i5 >= $i1 goto (branch)"->"$i4 = 3 * i5";
    "if i5 >= $i1 goto (branch)"->"if i5 <= 0 goto return r0";
    "$i4 = 3 * i5"->"i5 = $i4 + 1";
    "i5 = $i4 + 1"->"goto [?= $i1 = i0 / 3]";
    "goto [?= $i1 = i0 / 3]"->"$i1 = i0 / 3";
    "if i5 <= 0 goto return r0"->"i6 = i5";
    "if i5 <= 0 goto return r0"->"return r0";
    "i6 = i5"->"if i6 >= i0 goto i5 = i5 / 3";
    "if i6 >= i0 goto i5 = i5 / 3"->"r1 = r0[i6]";
    "if i6 >= i0 goto i5 = i5 / 3"->"i5 = i5 / 3";
    "r1 = r0[i6]"->"i7 = i6";
    "i7 = i6"->"if i7 < i5 goto r0[i7] = r1";
    "if i7 < i5 goto r0[i7] = r1"->"$i2 = i7 - i5";
    "if i7 < i5 goto r0[i7] = r1"->"r0[i7] = r1";
    "$i2 = i7 - i5"->"$r2 = r0[$i2]";
    "$r2 = r0[$i2]"->"$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2)";
    "$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2)"->"if $z0 == 0 goto r0[i7] = r1";
    "if $z0 == 0 goto r0[i7] = r1"->"$i3 = i7 - i5";
    "if $z0 == 0 goto r0[i7] = r1"->"r0[i7] = r1";
    "$i3 = i7 - i5"->"$r3 = r0[$i3]";
    "$r3 = r0[$i3]"->"r0[i7] = $r3";
    "r0[i7] = $r3"->"i7 = i7 - i5";
    "i7 = i7 - i5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 < i5 goto r0[i7] = r1";
    "r0[i7] = r1"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i0 goto i5 = i5 / 3";
    "i5 = i5 / 3"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 <= 0 goto return r0";
}
