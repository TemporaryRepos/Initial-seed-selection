digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
if i0 >= 0 goto (branch);
"
    "Block 1:
[preds: 0 ] [succs: ]
$r0 = new java.lang.IllegalArgumentException;
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"number is negative\");
throw $r0;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 == 0 goto $l4 = 1L;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i0 != 1 goto $l2 = (long) i0;
"
    "Block 4:
[preds: 2 3 ] [succs: 6 ]
$l4 = 1L;
goto [?= return $l4];
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
$l2 = (long) i0;
$i1 = i0 - 1;
$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1);
$l4 = $l2 * $l3;
"
    "Block 6:
[preds: 4 5 ] [succs: ]
return $l4;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
if i0 >= 0 goto (branch);
"->"Block 1:
[preds: 0 ] [succs: ]
$r0 = new java.lang.IllegalArgumentException;
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"number is negative\");
throw $r0;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
if i0 >= 0 goto (branch);
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 == 0 goto $l4 = 1L;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 == 0 goto $l4 = 1L;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
if i0 != 1 goto $l2 = (long) i0;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 == 0 goto $l4 = 1L;
"->"Block 4:
[preds: 2 3 ] [succs: 6 ]
$l4 = 1L;
goto [?= return $l4];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i0 != 1 goto $l2 = (long) i0;
"->"Block 4:
[preds: 2 3 ] [succs: 6 ]
$l4 = 1L;
goto [?= return $l4];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
if i0 != 1 goto $l2 = (long) i0;
"->"Block 5:
[preds: 3 ] [succs: 6 ]
$l2 = (long) i0;
$i1 = i0 - 1;
$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1);
$l4 = $l2 * $l3;
";
    "Block 4:
[preds: 2 3 ] [succs: 6 ]
$l4 = 1L;
goto [?= return $l4];
"->"Block 6:
[preds: 4 5 ] [succs: ]
return $l4;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
$l2 = (long) i0;
$i1 = i0 - 1;
$l3 = staticinvoke <com.thealgorithms.maths.FactorialRecursion: long factorial(int)>($i1);
$l4 = $l2 * $l3;
"->"Block 6:
[preds: 4 5 ] [succs: ]
return $l4;
";
}
