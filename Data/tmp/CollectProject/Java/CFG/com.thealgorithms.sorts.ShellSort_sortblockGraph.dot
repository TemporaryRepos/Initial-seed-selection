digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @this: com.thealgorithms.sorts.ShellSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i5 = 1;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i1 = i0 / 3;
if i5 >= $i1 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i4 = 3 * i5;
i5 = $i4 + 1;
goto [?= $i1 = i0 / 3];
"
    "Block 3:
[preds: 1 11 ] [succs: 4 12 ]
if i5 <= 0 goto return r0;
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i5;
"
    "Block 5:
[preds: 4 10 ] [succs: 6 11 ]
if i6 >= i0 goto i5 = i5 / 3;
"
    "Block 6:
[preds: 5 ] [succs: 7 ]
r1 = r0[i6];
i7 = i6;
"
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i7 < i5 goto r0[i7] = r1;
"
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$i2 = i7 - i5;
$r2 = r0[$i2];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2);
if $z0 == 0 goto r0[i7] = r1;
"
    "Block 9:
[preds: 8 ] [succs: 7 ]
$i3 = i7 - i5;
$r3 = r0[$i3];
r0[i7] = $r3;
i7 = i7 - i5;
goto [?= (branch)];
"
    "Block 10:
[preds: 7 8 ] [succs: 5 ]
r0[i7] = r1;
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 11:
[preds: 5 ] [succs: 3 ]
i5 = i5 / 3;
goto [?= (branch)];
"
    "Block 12:
[preds: 3 ] [succs: ]
return r0;
"
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @this: com.thealgorithms.sorts.ShellSort;
r0 := @parameter0: java.lang.Comparable[];
i0 = lengthof r0;
i5 = 1;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i1 = i0 / 3;
if i5 >= $i1 goto (branch);
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i1 = i0 / 3;
if i5 >= $i1 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$i4 = 3 * i5;
i5 = $i4 + 1;
goto [?= $i1 = i0 / 3];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i1 = i0 / 3;
if i5 >= $i1 goto (branch);
"->"Block 3:
[preds: 1 11 ] [succs: 4 12 ]
if i5 <= 0 goto return r0;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$i4 = 3 * i5;
i5 = $i4 + 1;
goto [?= $i1 = i0 / 3];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$i1 = i0 / 3;
if i5 >= $i1 goto (branch);
";
    "Block 3:
[preds: 1 11 ] [succs: 4 12 ]
if i5 <= 0 goto return r0;
"->"Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i5;
";
    "Block 3:
[preds: 1 11 ] [succs: 4 12 ]
if i5 <= 0 goto return r0;
"->"Block 12:
[preds: 3 ] [succs: ]
return r0;
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
i6 = i5;
"->"Block 5:
[preds: 4 10 ] [succs: 6 11 ]
if i6 >= i0 goto i5 = i5 / 3;
";
    "Block 5:
[preds: 4 10 ] [succs: 6 11 ]
if i6 >= i0 goto i5 = i5 / 3;
"->"Block 6:
[preds: 5 ] [succs: 7 ]
r1 = r0[i6];
i7 = i6;
";
    "Block 5:
[preds: 4 10 ] [succs: 6 11 ]
if i6 >= i0 goto i5 = i5 / 3;
"->"Block 11:
[preds: 5 ] [succs: 3 ]
i5 = i5 / 3;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 7 ]
r1 = r0[i6];
i7 = i6;
"->"Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i7 < i5 goto r0[i7] = r1;
";
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i7 < i5 goto r0[i7] = r1;
"->"Block 8:
[preds: 7 ] [succs: 9 10 ]
$i2 = i7 - i5;
$r2 = r0[$i2];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2);
if $z0 == 0 goto r0[i7] = r1;
";
    "Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i7 < i5 goto r0[i7] = r1;
"->"Block 10:
[preds: 7 8 ] [succs: 5 ]
r0[i7] = r1;
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$i2 = i7 - i5;
$r2 = r0[$i2];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2);
if $z0 == 0 goto r0[i7] = r1;
"->"Block 9:
[preds: 8 ] [succs: 7 ]
$i3 = i7 - i5;
$r3 = r0[$i3];
r0[i7] = $r3;
i7 = i7 - i5;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$i2 = i7 - i5;
$r2 = r0[$i2];
$z0 = staticinvoke <com.thealgorithms.sorts.SortUtils: boolean less(java.lang.Comparable,java.lang.Comparable)>(r1, $r2);
if $z0 == 0 goto r0[i7] = r1;
"->"Block 10:
[preds: 7 8 ] [succs: 5 ]
r0[i7] = r1;
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 9:
[preds: 8 ] [succs: 7 ]
$i3 = i7 - i5;
$r3 = r0[$i3];
r0[i7] = $r3;
i7 = i7 - i5;
goto [?= (branch)];
"->"Block 7:
[preds: 6 9 ] [succs: 8 10 ]
if i7 < i5 goto r0[i7] = r1;
";
    "Block 10:
[preds: 7 8 ] [succs: 5 ]
r0[i7] = r1;
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 5:
[preds: 4 10 ] [succs: 6 11 ]
if i6 >= i0 goto i5 = i5 / 3;
";
    "Block 11:
[preds: 5 ] [succs: 3 ]
i5 = i5 / 3;
goto [?= (branch)];
"->"Block 3:
[preds: 1 11 ] [succs: 4 12 ]
if i5 <= 0 goto return r0;
";
}
