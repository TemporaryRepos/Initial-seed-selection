digraph "unitGraph" {
    "i2 := @parameter0: int"
    "if i2 >= 0 goto $i3 = i2"
    "$i3 = neg i2"
    "goto [?= i4 = $i3]"
    "$i3 = i2"
    "i4 = $i3"
    "$r0 = new java.lang.StringBuilder"
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"
    "$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)"
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()"
    "r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>()"
    "i5 = 0"
    "i6 = 0"
    "$i7 = lengthof r4"
    "if i6 >= $i7 goto return i5"
    "$c0 = r4[i6]"
    "$i1 = $c0 - 48"
    "i5 = i5 + $i1"
    "i6 = i6 + 1"
    "goto [?= $i7 = lengthof r4]"
    "return i5"
    "i2 := @parameter0: int"->"if i2 >= 0 goto $i3 = i2";
    "if i2 >= 0 goto $i3 = i2"->"$i3 = neg i2";
    "if i2 >= 0 goto $i3 = i2"->"$i3 = i2";
    "$i3 = neg i2"->"goto [?= i4 = $i3]";
    "goto [?= i4 = $i3]"->"i4 = $i3";
    "$i3 = i2"->"i4 = $i3";
    "i4 = $i3"->"$r0 = new java.lang.StringBuilder";
    "$r0 = new java.lang.StringBuilder"->"specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()"->"$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)";
    "$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)"->"$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\")";
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()"->"r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>()";
    "r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>()"->"i5 = 0";
    "i5 = 0"->"i6 = 0";
    "i6 = 0"->"$i7 = lengthof r4";
    "$i7 = lengthof r4"->"if i6 >= $i7 goto return i5";
    "if i6 >= $i7 goto return i5"->"$c0 = r4[i6]";
    "if i6 >= $i7 goto return i5"->"return i5";
    "$c0 = r4[i6]"->"$i1 = $c0 - 48";
    "$i1 = $c0 - 48"->"i5 = i5 + $i1";
    "i5 = i5 + $i1"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= $i7 = lengthof r4]";
    "goto [?= $i7 = lengthof r4]"->"$i7 = lengthof r4";
}
