digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String"
    "i3 := @parameter1: int"
    "i7 = 0"
    "i8 = 1"
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"
    "i9 = $i0 - 1"
    "if i9 < 0 goto return i7"
    "$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"
    "i2 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c1)"
    "if i2 < i3 goto $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"
    "$r1 = new java.lang.NumberFormatException"
    "$r2 = new java.lang.StringBuilder"
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"For input string \")"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5)"
    "throw $r1"
    "$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"
    "$i5 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c4)"
    "$i6 = $i5 * i8"
    "i7 = i7 + $i6"
    "i8 = i8 * i3"
    "i9 = i9 + -1"
    "goto [?= (branch)]"
    "return i7"
    "r0 := @parameter0: java.lang.String"->"i3 := @parameter1: int";
    "i3 := @parameter1: int"->"i7 = 0";
    "i7 = 0"->"i8 = 1";
    "i8 = 1"->"$i0 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i0 = virtualinvoke r0.<java.lang.String: int length()>()"->"i9 = $i0 - 1";
    "i9 = $i0 - 1"->"if i9 < 0 goto return i7";
    "if i9 < 0 goto return i7"->"$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)";
    "if i9 < 0 goto return i7"->"return i7";
    "$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"->"i2 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c1)";
    "i2 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c1)"->"if i2 < i3 goto $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)";
    "if i2 < i3 goto $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"->"$r1 = new java.lang.NumberFormatException";
    "if i2 < i3 goto $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"->"$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)";
    "$r1 = new java.lang.NumberFormatException"->"$r2 = new java.lang.StringBuilder";
    "$r2 = new java.lang.StringBuilder"->"specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"For input string \")";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"For input string \")"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)"->"$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5)";
    "specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5)"->"throw $r1";
    "$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)"->"$i5 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c4)";
    "$i5 = staticinvoke <com.thealgorithms.conversions.AnyBaseToDecimal: int valOfChar(char)>($c4)"->"$i6 = $i5 * i8";
    "$i6 = $i5 * i8"->"i7 = i7 + $i6";
    "i7 = i7 + $i6"->"i8 = i8 * i3";
    "i8 = i8 * i3"->"i9 = i9 + -1";
    "i9 = i9 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i9 < 0 goto return i7";
}
