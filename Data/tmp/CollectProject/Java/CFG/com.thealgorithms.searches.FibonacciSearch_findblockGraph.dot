digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @this: com.thealgorithms.searches.FibonacciSearch;
r0 := @parameter0: java.lang.Comparable[];
r1 := @parameter1: java.lang.Comparable;
i8 = 1;
i9 = 0;
i10 = i8 + i9;
i0 = lengthof r0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i0 goto i11 = -1;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
i9 = i8;
i8 = i10;
i10 = i9 + i8;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
i11 = -1;
"
    "Block 4:
[preds: 3 10 ] [succs: 5 11 ]
if i10 <= 1 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i4 = i11 + i9;
$i3 = i0 - 1;
i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);
$r3 = r0[i5];
$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i6 >= 0 goto $r4 = r0[i5];
"
    "Block 6:
[preds: 5 ] [succs: 10 ]
i10 = i8;
i8 = i9;
i9 = i10 - i8;
i11 = i5;
goto [?= (branch)];
"
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$r4 = r0[i5];
$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i7 <= 0 goto return i5;
"
    "Block 8:
[preds: 7 ] [succs: 10 ]
i10 = i9;
i8 = i8 - i9;
i9 = i10 - i8;
goto [?= (branch)];
"
    "Block 9:
[preds: 7 ] [succs: ]
return i5;
"
    "Block 10:
[preds: 6 8 ] [succs: 4 ]
goto [?= (branch)];
"
    "Block 11:
[preds: 4 ] [succs: 12 14 ]
if i8 != 1 goto return -1;
"
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
$i1 = i11 + 1;
$r2 = r0[$i1];
if $r2 != r1 goto return -1;
"
    "Block 13:
[preds: 12 ] [succs: ]
$i2 = i11 + 1;
return $i2;
"
    "Block 14:
[preds: 11 12 ] [succs: ]
return -1;
"
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @this: com.thealgorithms.searches.FibonacciSearch;
r0 := @parameter0: java.lang.Comparable[];
r1 := @parameter1: java.lang.Comparable;
i8 = 1;
i9 = 0;
i10 = i8 + i9;
i0 = lengthof r0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i0 goto i11 = -1;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i0 goto i11 = -1;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
i9 = i8;
i8 = i10;
i10 = i9 + i8;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i0 goto i11 = -1;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
i11 = -1;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
i9 = i8;
i8 = i10;
i10 = i9 + i8;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i10 >= i0 goto i11 = -1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
i11 = -1;
"->"Block 4:
[preds: 3 10 ] [succs: 5 11 ]
if i10 <= 1 goto (branch);
";
    "Block 4:
[preds: 3 10 ] [succs: 5 11 ]
if i10 <= 1 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
$i4 = i11 + i9;
$i3 = i0 - 1;
i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);
$r3 = r0[i5];
$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i6 >= 0 goto $r4 = r0[i5];
";
    "Block 4:
[preds: 3 10 ] [succs: 5 11 ]
if i10 <= 1 goto (branch);
"->"Block 11:
[preds: 4 ] [succs: 12 14 ]
if i8 != 1 goto return -1;
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i4 = i11 + i9;
$i3 = i0 - 1;
i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);
$r3 = r0[i5];
$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i6 >= 0 goto $r4 = r0[i5];
"->"Block 6:
[preds: 5 ] [succs: 10 ]
i10 = i8;
i8 = i9;
i9 = i10 - i8;
i11 = i5;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i4 = i11 + i9;
$i3 = i0 - 1;
i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);
$r3 = r0[i5];
$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i6 >= 0 goto $r4 = r0[i5];
"->"Block 7:
[preds: 5 ] [succs: 8 9 ]
$r4 = r0[i5];
$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i7 <= 0 goto return i5;
";
    "Block 6:
[preds: 5 ] [succs: 10 ]
i10 = i8;
i8 = i9;
i9 = i10 - i8;
i11 = i5;
goto [?= (branch)];
"->"Block 10:
[preds: 6 8 ] [succs: 4 ]
goto [?= (branch)];
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$r4 = r0[i5];
$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i7 <= 0 goto return i5;
"->"Block 8:
[preds: 7 ] [succs: 10 ]
i10 = i9;
i8 = i8 - i9;
i9 = i10 - i8;
goto [?= (branch)];
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$r4 = r0[i5];
$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
if $i7 <= 0 goto return i5;
"->"Block 9:
[preds: 7 ] [succs: ]
return i5;
";
    "Block 8:
[preds: 7 ] [succs: 10 ]
i10 = i9;
i8 = i8 - i9;
i9 = i10 - i8;
goto [?= (branch)];
"->"Block 10:
[preds: 6 8 ] [succs: 4 ]
goto [?= (branch)];
";
    "Block 10:
[preds: 6 8 ] [succs: 4 ]
goto [?= (branch)];
"->"Block 4:
[preds: 3 10 ] [succs: 5 11 ]
if i10 <= 1 goto (branch);
";
    "Block 11:
[preds: 4 ] [succs: 12 14 ]
if i8 != 1 goto return -1;
"->"Block 12:
[preds: 11 ] [succs: 13 14 ]
$i1 = i11 + 1;
$r2 = r0[$i1];
if $r2 != r1 goto return -1;
";
    "Block 11:
[preds: 4 ] [succs: 12 14 ]
if i8 != 1 goto return -1;
"->"Block 14:
[preds: 11 12 ] [succs: ]
return -1;
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
$i1 = i11 + 1;
$r2 = r0[$i1];
if $r2 != r1 goto return -1;
"->"Block 13:
[preds: 12 ] [succs: ]
$i2 = i11 + 1;
return $i2;
";
    "Block 12:
[preds: 11 ] [succs: 13 14 ]
$i1 = i11 + 1;
$r2 = r0[$i1];
if $r2 != r1 goto return -1;
"->"Block 14:
[preds: 11 12 ] [succs: ]
return -1;
";
}
