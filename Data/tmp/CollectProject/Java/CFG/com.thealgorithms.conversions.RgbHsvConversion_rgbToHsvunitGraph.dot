digraph "unitGraph" {
    "i0 := @parameter0: int"
    "i1 := @parameter1: int"
    "i2 := @parameter2: int"
    "if i0 < 0 goto $r0 = new java.lang.IllegalArgumentException"
    "if i0 <= 255 goto (branch)"
    "$r0 = new java.lang.IllegalArgumentException"
    "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"red should be between 0 and 255\")"
    "throw $r0"
    "if i1 < 0 goto $r1 = new java.lang.IllegalArgumentException"
    "if i1 <= 255 goto (branch)"
    "$r1 = new java.lang.IllegalArgumentException"
    "specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"green should be between 0 and 255\")"
    "throw $r1"
    "if i2 < 0 goto $r2 = new java.lang.IllegalArgumentException"
    "if i2 <= 255 goto $d0 = (double) i0"
    "$r2 = new java.lang.IllegalArgumentException"
    "specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"blue should be between 0 and 255\")"
    "throw $r2"
    "$d0 = (double) i0"
    "d1 = $d0 / 255.0"
    "$d2 = (double) i1"
    "d3 = $d2 / 255.0"
    "$d4 = (double) i2"
    "d5 = $d4 / 255.0"
    "$d6 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)"
    "d7 = staticinvoke <java.lang.Math: double max(double,double)>($d6, d5)"
    "$d8 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d3)"
    "$d9 = staticinvoke <java.lang.Math: double min(double,double)>($d8, d5)"
    "d10 = d7 - $d9"
    "$b3 = d7 cmpl 0.0"
    "if $b3 != 0 goto $d21 = d10 / d7"
    "$d21 = 0.0"
    "goto [?= d11 = $d21]"
    "$d21 = d10 / d7"
    "d11 = $d21"
    "$b4 = d10 cmpl 0.0"
    "if $b4 != 0 goto $b5 = d7 cmpl d1"
    "d22 = 0.0"
    "goto [?= $d23 = d22 + 360.0]"
    "$b5 = d7 cmpl d1"
    "if $b5 != 0 goto $b6 = d7 cmpl d3"
    "$d18 = d3 - d5"
    "$d19 = $d18 / d10"
    "$d20 = 0.0 + $d19"
    "d22 = 60.0 * $d20"
    "$b6 = d7 cmpl d3"
    "if $b6 != 0 goto $d12 = d1 - d3"
    "$d15 = d5 - d1"
    "$d16 = $d15 / d10"
    "$d17 = 2.0 + $d16"
    "d22 = 60.0 * $d17"
    "$d12 = d1 - d3"
    "$d13 = $d12 / d10"
    "$d14 = 4.0 + $d13"
    "d22 = 60.0 * $d14"
    "$d23 = d22 + 360.0"
    "d24 = $d23 % 360.0"
    "$r3 = newarray (double)[3]"
    "$r3[0] = d24"
    "$r3[1] = d11"
    "$r3[2] = d7"
    "return $r3"
    "i0 := @parameter0: int"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"i2 := @parameter2: int";
    "i2 := @parameter2: int"->"if i0 < 0 goto $r0 = new java.lang.IllegalArgumentException";
    "if i0 < 0 goto $r0 = new java.lang.IllegalArgumentException"->"if i0 <= 255 goto (branch)";
    "if i0 < 0 goto $r0 = new java.lang.IllegalArgumentException"->"$r0 = new java.lang.IllegalArgumentException";
    "if i0 <= 255 goto (branch)"->"$r0 = new java.lang.IllegalArgumentException";
    "if i0 <= 255 goto (branch)"->"if i1 < 0 goto $r1 = new java.lang.IllegalArgumentException";
    "$r0 = new java.lang.IllegalArgumentException"->"specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"red should be between 0 and 255\")";
    "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"red should be between 0 and 255\")"->"throw $r0";
    "if i1 < 0 goto $r1 = new java.lang.IllegalArgumentException"->"if i1 <= 255 goto (branch)";
    "if i1 < 0 goto $r1 = new java.lang.IllegalArgumentException"->"$r1 = new java.lang.IllegalArgumentException";
    "if i1 <= 255 goto (branch)"->"$r1 = new java.lang.IllegalArgumentException";
    "if i1 <= 255 goto (branch)"->"if i2 < 0 goto $r2 = new java.lang.IllegalArgumentException";
    "$r1 = new java.lang.IllegalArgumentException"->"specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"green should be between 0 and 255\")";
    "specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"green should be between 0 and 255\")"->"throw $r1";
    "if i2 < 0 goto $r2 = new java.lang.IllegalArgumentException"->"if i2 <= 255 goto $d0 = (double) i0";
    "if i2 < 0 goto $r2 = new java.lang.IllegalArgumentException"->"$r2 = new java.lang.IllegalArgumentException";
    "if i2 <= 255 goto $d0 = (double) i0"->"$r2 = new java.lang.IllegalArgumentException";
    "if i2 <= 255 goto $d0 = (double) i0"->"$d0 = (double) i0";
    "$r2 = new java.lang.IllegalArgumentException"->"specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"blue should be between 0 and 255\")";
    "specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"blue should be between 0 and 255\")"->"throw $r2";
    "$d0 = (double) i0"->"d1 = $d0 / 255.0";
    "d1 = $d0 / 255.0"->"$d2 = (double) i1";
    "$d2 = (double) i1"->"d3 = $d2 / 255.0";
    "d3 = $d2 / 255.0"->"$d4 = (double) i2";
    "$d4 = (double) i2"->"d5 = $d4 / 255.0";
    "d5 = $d4 / 255.0"->"$d6 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)";
    "$d6 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)"->"d7 = staticinvoke <java.lang.Math: double max(double,double)>($d6, d5)";
    "d7 = staticinvoke <java.lang.Math: double max(double,double)>($d6, d5)"->"$d8 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d3)";
    "$d8 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d3)"->"$d9 = staticinvoke <java.lang.Math: double min(double,double)>($d8, d5)";
    "$d9 = staticinvoke <java.lang.Math: double min(double,double)>($d8, d5)"->"d10 = d7 - $d9";
    "d10 = d7 - $d9"->"$b3 = d7 cmpl 0.0";
    "$b3 = d7 cmpl 0.0"->"if $b3 != 0 goto $d21 = d10 / d7";
    "if $b3 != 0 goto $d21 = d10 / d7"->"$d21 = 0.0";
    "if $b3 != 0 goto $d21 = d10 / d7"->"$d21 = d10 / d7";
    "$d21 = 0.0"->"goto [?= d11 = $d21]";
    "goto [?= d11 = $d21]"->"d11 = $d21";
    "$d21 = d10 / d7"->"d11 = $d21";
    "d11 = $d21"->"$b4 = d10 cmpl 0.0";
    "$b4 = d10 cmpl 0.0"->"if $b4 != 0 goto $b5 = d7 cmpl d1";
    "if $b4 != 0 goto $b5 = d7 cmpl d1"->"d22 = 0.0";
    "if $b4 != 0 goto $b5 = d7 cmpl d1"->"$b5 = d7 cmpl d1";
    "d22 = 0.0"->"goto [?= $d23 = d22 + 360.0]";
    "goto [?= $d23 = d22 + 360.0]"->"$d23 = d22 + 360.0";
    "$b5 = d7 cmpl d1"->"if $b5 != 0 goto $b6 = d7 cmpl d3";
    "if $b5 != 0 goto $b6 = d7 cmpl d3"->"$d18 = d3 - d5";
    "if $b5 != 0 goto $b6 = d7 cmpl d3"->"$b6 = d7 cmpl d3";
    "$d18 = d3 - d5"->"$d19 = $d18 / d10";
    "$d19 = $d18 / d10"->"$d20 = 0.0 + $d19";
    "$d20 = 0.0 + $d19"->"d22 = 60.0 * $d20";
    "d22 = 60.0 * $d20"->"goto [?= $d23 = d22 + 360.0]";
    "goto [?= $d23 = d22 + 360.0]"->"$d23 = d22 + 360.0";
    "$b6 = d7 cmpl d3"->"if $b6 != 0 goto $d12 = d1 - d3";
    "if $b6 != 0 goto $d12 = d1 - d3"->"$d15 = d5 - d1";
    "if $b6 != 0 goto $d12 = d1 - d3"->"$d12 = d1 - d3";
    "$d15 = d5 - d1"->"$d16 = $d15 / d10";
    "$d16 = $d15 / d10"->"$d17 = 2.0 + $d16";
    "$d17 = 2.0 + $d16"->"d22 = 60.0 * $d17";
    "d22 = 60.0 * $d17"->"goto [?= $d23 = d22 + 360.0]";
    "goto [?= $d23 = d22 + 360.0]"->"$d23 = d22 + 360.0";
    "$d12 = d1 - d3"->"$d13 = $d12 / d10";
    "$d13 = $d12 / d10"->"$d14 = 4.0 + $d13";
    "$d14 = 4.0 + $d13"->"d22 = 60.0 * $d14";
    "d22 = 60.0 * $d14"->"$d23 = d22 + 360.0";
    "$d23 = d22 + 360.0"->"d24 = $d23 % 360.0";
    "d24 = $d23 % 360.0"->"$r3 = newarray (double)[3]";
    "$r3 = newarray (double)[3]"->"$r3[0] = d24";
    "$r3[0] = d24"->"$r3[1] = d11";
    "$r3[1] = d11"->"$r3[2] = d7";
    "$r3[2] = d7"->"return $r3";
}
