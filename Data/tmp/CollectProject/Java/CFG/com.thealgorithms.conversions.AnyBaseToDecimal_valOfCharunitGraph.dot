digraph "unitGraph" {
    "c0 := @parameter0: char"
    "$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0)"
    "if $z0 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"
    "$z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"
    "if $z2 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"
    "$r0 = new java.lang.NumberFormatException"
    "$r1 = new java.lang.StringBuilder"
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"invalid character :\")"
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4)"
    "throw $r0"
    "$z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"
    "if $z1 == 0 goto $i1 = c0 - 65"
    "$i2 = c0 - 48"
    "goto [?= return $i2]"
    "$i1 = c0 - 65"
    "$i2 = $i1 + 10"
    "return $i2"
    "c0 := @parameter0: char"->"$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0)";
    "$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0)"->"if $z0 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)";
    "if $z0 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"$z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)";
    "if $z0 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"$z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)";
    "$z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"if $z2 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)";
    "if $z2 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"$r0 = new java.lang.NumberFormatException";
    "if $z2 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"$z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)";
    "$r0 = new java.lang.NumberFormatException"->"$r1 = new java.lang.StringBuilder";
    "$r1 = new java.lang.StringBuilder"->"specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()"->"$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"invalid character :\")";
    "$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"invalid character :\")"->"$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)";
    "$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4)";
    "specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4)"->"throw $r0";
    "$z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)"->"if $z1 == 0 goto $i1 = c0 - 65";
    "if $z1 == 0 goto $i1 = c0 - 65"->"$i2 = c0 - 48";
    "if $z1 == 0 goto $i1 = c0 - 65"->"$i1 = c0 - 65";
    "$i2 = c0 - 48"->"goto [?= return $i2]";
    "goto [?= return $i2]"->"return $i2";
    "$i1 = c0 - 65"->"$i2 = $i1 + 10";
    "$i2 = $i1 + 10"->"return $i2";
}
