digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.divideandconquer.ClosestPair;
r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
i2 = virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: int yPartition(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, i1);
$i3 = i2 - 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3);
$i4 = i2 + 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.divideandconquer.ClosestPair;
r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
i2 = virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: int yPartition(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, i1);
$i3 = i2 - 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3);
$i4 = i2 + 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.thealgorithms.divideandconquer.ClosestPair;
r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[];
i0 := @parameter1: int;
i1 := @parameter2: int;
if i0 >= i1 goto return;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
i2 = virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: int yPartition(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, i1);
$i3 = i2 - 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3);
$i4 = i2 + 1;
virtualinvoke r0.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1);
"->"Block 2:
[preds: 0 1 ] [succs: ]
return;
";
}
