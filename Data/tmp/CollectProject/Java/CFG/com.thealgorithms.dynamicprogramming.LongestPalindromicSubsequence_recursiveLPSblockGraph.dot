digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
r10 = \"\";
$i0 = virtualinvoke r0.<java.lang.String: int length()>();
if $i0 == 0 goto r11 = \"\";
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i1 = virtualinvoke r1.<java.lang.String: int length()>();
if $i1 != 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>();
"
    "Block 2:
[preds: 0 1 ] [succs: 8 ]
r11 = \"\";
goto [?= return r11];
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = virtualinvoke r0.<java.lang.String: int length()>();
$i3 = $i2 - 1;
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);
$i5 = virtualinvoke r1.<java.lang.String: int length()>();
$i6 = $i5 - 1;
$c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
if $c4 != $c7 goto $i8 = virtualinvoke r1.<java.lang.String: int length()>();
"
    "Block 4:
[preds: 3 ] [succs: 8 ]
$i14 = virtualinvoke r0.<java.lang.String: int length()>();
$i15 = $i14 - 1;
$r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i15);
$i16 = virtualinvoke r1.<java.lang.String: int length()>();
$i17 = $i16 - 1;
$r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i17);
r12 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r5, $r6);
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i18 = virtualinvoke r1.<java.lang.String: int length()>();
$i19 = $i18 - 1;
$c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i19);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c20);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
goto [?= return r11];
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$i8 = virtualinvoke r1.<java.lang.String: int length()>();
$i9 = $i8 - 1;
$r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);
r13 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>(r0, $r2);
$i10 = virtualinvoke r0.<java.lang.String: int length()>();
$i11 = $i10 - 1;
$r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);
r4 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r3, r1);
$i12 = virtualinvoke r13.<java.lang.String: int length()>();
$i13 = virtualinvoke r4.<java.lang.String: int length()>();
if $i12 <= $i13 goto r11 = r4;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
r11 = r13;
goto [?= return r11];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
r11 = r4;
"
    "Block 8:
[preds: 2 4 6 7 ] [succs: ]
return r11;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
r10 = \"\";
$i0 = virtualinvoke r0.<java.lang.String: int length()>();
if $i0 == 0 goto r11 = \"\";
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$i1 = virtualinvoke r1.<java.lang.String: int length()>();
if $i1 != 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>();
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
r1 := @parameter1: java.lang.String;
r10 = \"\";
$i0 = virtualinvoke r0.<java.lang.String: int length()>();
if $i0 == 0 goto r11 = \"\";
"->"Block 2:
[preds: 0 1 ] [succs: 8 ]
r11 = \"\";
goto [?= return r11];
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i1 = virtualinvoke r1.<java.lang.String: int length()>();
if $i1 != 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>();
"->"Block 2:
[preds: 0 1 ] [succs: 8 ]
r11 = \"\";
goto [?= return r11];
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$i1 = virtualinvoke r1.<java.lang.String: int length()>();
if $i1 != 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>();
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = virtualinvoke r0.<java.lang.String: int length()>();
$i3 = $i2 - 1;
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);
$i5 = virtualinvoke r1.<java.lang.String: int length()>();
$i6 = $i5 - 1;
$c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
if $c4 != $c7 goto $i8 = virtualinvoke r1.<java.lang.String: int length()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 8 ]
r11 = \"\";
goto [?= return r11];
"->"Block 8:
[preds: 2 4 6 7 ] [succs: ]
return r11;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = virtualinvoke r0.<java.lang.String: int length()>();
$i3 = $i2 - 1;
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);
$i5 = virtualinvoke r1.<java.lang.String: int length()>();
$i6 = $i5 - 1;
$c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
if $c4 != $c7 goto $i8 = virtualinvoke r1.<java.lang.String: int length()>();
"->"Block 4:
[preds: 3 ] [succs: 8 ]
$i14 = virtualinvoke r0.<java.lang.String: int length()>();
$i15 = $i14 - 1;
$r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i15);
$i16 = virtualinvoke r1.<java.lang.String: int length()>();
$i17 = $i16 - 1;
$r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i17);
r12 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r5, $r6);
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i18 = virtualinvoke r1.<java.lang.String: int length()>();
$i19 = $i18 - 1;
$c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i19);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c20);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
goto [?= return r11];
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$i2 = virtualinvoke r0.<java.lang.String: int length()>();
$i3 = $i2 - 1;
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);
$i5 = virtualinvoke r1.<java.lang.String: int length()>();
$i6 = $i5 - 1;
$c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
if $c4 != $c7 goto $i8 = virtualinvoke r1.<java.lang.String: int length()>();
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
$i8 = virtualinvoke r1.<java.lang.String: int length()>();
$i9 = $i8 - 1;
$r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);
r13 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>(r0, $r2);
$i10 = virtualinvoke r0.<java.lang.String: int length()>();
$i11 = $i10 - 1;
$r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);
r4 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r3, r1);
$i12 = virtualinvoke r13.<java.lang.String: int length()>();
$i13 = virtualinvoke r4.<java.lang.String: int length()>();
if $i12 <= $i13 goto r11 = r4;
";
    "Block 4:
[preds: 3 ] [succs: 8 ]
$i14 = virtualinvoke r0.<java.lang.String: int length()>();
$i15 = $i14 - 1;
$r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i15);
$i16 = virtualinvoke r1.<java.lang.String: int length()>();
$i17 = $i16 - 1;
$r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i17);
r12 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r5, $r6);
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i18 = virtualinvoke r1.<java.lang.String: int length()>();
$i19 = $i18 - 1;
$c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i19);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c20);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
goto [?= return r11];
"->"Block 8:
[preds: 2 4 6 7 ] [succs: ]
return r11;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$i8 = virtualinvoke r1.<java.lang.String: int length()>();
$i9 = $i8 - 1;
$r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);
r13 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>(r0, $r2);
$i10 = virtualinvoke r0.<java.lang.String: int length()>();
$i11 = $i10 - 1;
$r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);
r4 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r3, r1);
$i12 = virtualinvoke r13.<java.lang.String: int length()>();
$i13 = virtualinvoke r4.<java.lang.String: int length()>();
if $i12 <= $i13 goto r11 = r4;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
r11 = r13;
goto [?= return r11];
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$i8 = virtualinvoke r1.<java.lang.String: int length()>();
$i9 = $i8 - 1;
$r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);
r13 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>(r0, $r2);
$i10 = virtualinvoke r0.<java.lang.String: int length()>();
$i11 = $i10 - 1;
$r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);
r4 = staticinvoke <com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>($r3, r1);
$i12 = virtualinvoke r13.<java.lang.String: int length()>();
$i13 = virtualinvoke r4.<java.lang.String: int length()>();
if $i12 <= $i13 goto r11 = r4;
"->"Block 7:
[preds: 5 ] [succs: 8 ]
r11 = r4;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
r11 = r13;
goto [?= return r11];
"->"Block 8:
[preds: 2 4 6 7 ] [succs: ]
return r11;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
r11 = r4;
"->"Block 8:
[preds: 2 4 6 7 ] [succs: ]
return r11;
";
}
