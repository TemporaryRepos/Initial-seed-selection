digraph "unitGraph" {
    "r0 := @this: com.thealgorithms.sorts.BitonicSort"
    "r1 := @parameter0: int[]"
    "i2 := @parameter1: int"
    "i0 := @parameter2: int"
    "i4 := @parameter3: int"
    "if i0 <= 1 goto return"
    "i1 = i0 / 2"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, i2, i1, 1)"
    "$i3 = i2 + i1"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, $i3, i1, 0)"
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i0, i4)"
    "return"
    "r0 := @this: com.thealgorithms.sorts.BitonicSort"->"r1 := @parameter0: int[]";
    "r1 := @parameter0: int[]"->"i2 := @parameter1: int";
    "i2 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"i4 := @parameter3: int";
    "i4 := @parameter3: int"->"if i0 <= 1 goto return";
    "if i0 <= 1 goto return"->"i1 = i0 / 2";
    "if i0 <= 1 goto return"->"return";
    "i1 = i0 / 2"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, i2, i1, 1)";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, i2, i1, 1)"->"$i3 = i2 + i1";
    "$i3 = i2 + i1"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, $i3, i1, 0)";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, $i3, i1, 0)"->"virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i0, i4)";
    "virtualinvoke r0.<com.thealgorithms.sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i0, i4)"->"return";
}
