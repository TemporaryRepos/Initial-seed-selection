digraph "unitGraph" {
    "r0 := @parameter0: int[]"
    "if r0 != null goto $r1 = new java.util.Stack"
    "return r0"
    "$r1 = new java.util.Stack"
    "specialinvoke $r1.<java.util.Stack: void <init>()>()"
    "r2 = $r1"
    "$i0 = lengthof r0"
    "r3 = newarray (int)[$i0]"
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, -1)"
    "i6 = 0"
    "$i1 = lengthof r0"
    "if i6 >= $i1 goto return r3"
    "$z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"
    "if $z0 != 0 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"
    "$r8 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"
    "$r9 = (java.lang.Integer) $r8"
    "$i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()"
    "$i5 = r0[i6]"
    "if $i4 < $i5 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"
    "virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"
    "goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()]"
    "$z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"
    "if $z1 == 0 goto $r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"
    "r3[i6] = -1"
    "goto [?= $i3 = r0[i6]]"
    "$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"
    "$r5 = (java.lang.Integer) $r4"
    "$i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>()"
    "r3[i6] = $i2"
    "$i3 = r0[i6]"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"
    "virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6)"
    "i6 = i6 + 1"
    "goto [?= $i1 = lengthof r0]"
    "return r3"
    "r0 := @parameter0: int[]"->"if r0 != null goto $r1 = new java.util.Stack";
    "if r0 != null goto $r1 = new java.util.Stack"->"return r0";
    "if r0 != null goto $r1 = new java.util.Stack"->"$r1 = new java.util.Stack";
    "$r1 = new java.util.Stack"->"specialinvoke $r1.<java.util.Stack: void <init>()>()";
    "specialinvoke $r1.<java.util.Stack: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"r3 = newarray (int)[$i0]";
    "r3 = newarray (int)[$i0]"->"staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, -1)";
    "staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, -1)"->"i6 = 0";
    "i6 = 0"->"$i1 = lengthof r0";
    "$i1 = lengthof r0"->"if i6 >= $i1 goto return r3";
    "if i6 >= $i1 goto return r3"->"$z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "if i6 >= $i1 goto return r3"->"return r3";
    "$z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"if $z0 != 0 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "if $z0 != 0 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"$r8 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()";
    "if $z0 != 0 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"$z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "$r8 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"->"$r9 = (java.lang.Integer) $r8";
    "$r9 = (java.lang.Integer) $r8"->"$i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()";
    "$i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()"->"$i5 = r0[i6]";
    "$i5 = r0[i6]"->"if $i4 < $i5 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "if $i4 < $i5 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()";
    "if $i4 < $i5 goto $z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"$z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()"->"goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()]";
    "goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()]"->"$z0 = virtualinvoke r2.<java.util.Stack: boolean empty()>()";
    "$z1 = virtualinvoke r2.<java.util.Stack: boolean empty()>()"->"if $z1 == 0 goto $r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()";
    "if $z1 == 0 goto $r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"->"r3[i6] = -1";
    "if $z1 == 0 goto $r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"->"$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()";
    "r3[i6] = -1"->"goto [?= $i3 = r0[i6]]";
    "goto [?= $i3 = r0[i6]]"->"$i3 = r0[i6]";
    "$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()"->"$r5 = (java.lang.Integer) $r4";
    "$r5 = (java.lang.Integer) $r4"->"$i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>()";
    "$i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>()"->"r3[i6] = $i2";
    "r3[i6] = $i2"->"$i3 = r0[i6]";
    "$i3 = r0[i6]"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"->"virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6)";
    "virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6)"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= $i1 = lengthof r0]";
    "goto [?= $i1 = lengthof r0]"->"$i1 = lengthof r0";
}
