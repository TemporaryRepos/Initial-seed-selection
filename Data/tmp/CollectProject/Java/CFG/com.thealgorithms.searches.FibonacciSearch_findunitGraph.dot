digraph "unitGraph" {
    "r5 := @this: com.thealgorithms.searches.FibonacciSearch"
    "r0 := @parameter0: java.lang.Comparable[]"
    "r1 := @parameter1: java.lang.Comparable"
    "i8 = 1"
    "i9 = 0"
    "i10 = i8 + i9"
    "i0 = lengthof r0"
    "if i10 >= i0 goto i11 = -1"
    "i9 = i8"
    "i8 = i10"
    "i10 = i9 + i8"
    "goto [?= (branch)]"
    "i11 = -1"
    "if i10 <= 1 goto (branch)"
    "$i4 = i11 + i9"
    "$i3 = i0 - 1"
    "i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3)"
    "$r3 = r0[i5]"
    "$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)"
    "if $i6 >= 0 goto $r4 = r0[i5]"
    "i10 = i8"
    "i8 = i9"
    "i9 = i10 - i8"
    "i11 = i5"
    "$r4 = r0[i5]"
    "$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)"
    "if $i7 <= 0 goto return i5"
    "i10 = i9"
    "i8 = i8 - i9"
    "return i5"
    "if i8 != 1 goto return -1"
    "$i1 = i11 + 1"
    "$r2 = r0[$i1]"
    "if $r2 != r1 goto return -1"
    "$i2 = i11 + 1"
    "return $i2"
    "return -1"
    "r5 := @this: com.thealgorithms.searches.FibonacciSearch"->"r0 := @parameter0: java.lang.Comparable[]";
    "r0 := @parameter0: java.lang.Comparable[]"->"r1 := @parameter1: java.lang.Comparable";
    "r1 := @parameter1: java.lang.Comparable"->"i8 = 1";
    "i8 = 1"->"i9 = 0";
    "i9 = 0"->"i10 = i8 + i9";
    "i10 = i8 + i9"->"i0 = lengthof r0";
    "i0 = lengthof r0"->"if i10 >= i0 goto i11 = -1";
    "if i10 >= i0 goto i11 = -1"->"i9 = i8";
    "if i10 >= i0 goto i11 = -1"->"i11 = -1";
    "i9 = i8"->"i8 = i10";
    "i8 = i10"->"i10 = i9 + i8";
    "i10 = i9 + i8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i0 goto i11 = -1";
    "i11 = -1"->"if i10 <= 1 goto (branch)";
    "if i10 <= 1 goto (branch)"->"$i4 = i11 + i9";
    "if i10 <= 1 goto (branch)"->"if i8 != 1 goto return -1";
    "$i4 = i11 + i9"->"$i3 = i0 - 1";
    "$i3 = i0 - 1"->"i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3)";
    "i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3)"->"$r3 = r0[i5]";
    "$r3 = r0[i5]"->"$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)";
    "$i6 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)"->"if $i6 >= 0 goto $r4 = r0[i5]";
    "if $i6 >= 0 goto $r4 = r0[i5]"->"i10 = i8";
    "if $i6 >= 0 goto $r4 = r0[i5]"->"$r4 = r0[i5]";
    "i10 = i8"->"i8 = i9";
    "i8 = i9"->"i9 = i10 - i8";
    "i9 = i10 - i8"->"i11 = i5";
    "i11 = i5"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= (branch)]";
    "$r4 = r0[i5]"->"$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)";
    "$i7 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1)"->"if $i7 <= 0 goto return i5";
    "if $i7 <= 0 goto return i5"->"i10 = i9";
    "if $i7 <= 0 goto return i5"->"return i5";
    "i10 = i9"->"i8 = i8 - i9";
    "i8 = i8 - i9"->"i9 = i10 - i8";
    "i9 = i10 - i8"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 <= 1 goto (branch)";
    "if i8 != 1 goto return -1"->"$i1 = i11 + 1";
    "if i8 != 1 goto return -1"->"return -1";
    "$i1 = i11 + 1"->"$r2 = r0[$i1]";
    "$r2 = r0[$i1]"->"if $r2 != r1 goto return -1";
    "if $r2 != r1 goto return -1"->"$i2 = i11 + 1";
    "if $r2 != r1 goto return -1"->"return -1";
    "$i2 = i11 + 1"->"return $i2";
}
