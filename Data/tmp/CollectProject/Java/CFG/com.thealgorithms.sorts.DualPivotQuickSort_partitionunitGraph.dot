digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Comparable[]"
    "i9 := @parameter1: int"
    "i0 := @parameter2: int"
    "$r2 = r0[i9]"
    "$r1 = r0[i0]"
    "$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)"
    "if $i1 <= 0 goto r3 = r0[i9]"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0)"
    "r3 = r0[i9]"
    "r4 = r0[i0]"
    "i10 = i9 + 1"
    "i11 = i9 + 1"
    "i12 = i0 - 1"
    "if i11 > i12 goto i13 = i10 + -1"
    "$r6 = r0[i11]"
    "$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)"
    "if $i2 >= 0 goto $r7 = r0[i11]"
    "$i8 = i9"
    "i9 = i9 + 1"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8)"
    "goto [?= i11 = i11 + 1]"
    "$r7 = r0[i11]"
    "$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)"
    "if $i3 < 0 goto i11 = i11 + 1"
    "if i11 >= i12 goto $i4 = i12"
    "$r9 = r0[i12]"
    "$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)"
    "if $i7 <= 0 goto $i4 = i12"
    "i12 = i12 + -1"
    "goto [?= (branch)]"
    "$i4 = i12"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4)"
    "$r8 = r0[i11]"
    "$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)"
    "if $i5 >= 0 goto i11 = i11 + 1"
    "$i6 = i9"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6)"
    "i11 = i11 + 1"
    "i13 = i10 + -1"
    "i14 = i12 + 1"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i13)"
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i0, i14)"
    "$r5 = newarray (int)[2]"
    "$r5[0] = i11"
    "$r5[1] = i14"
    "return $r5"
    "r0 := @parameter0: java.lang.Comparable[]"->"i9 := @parameter1: int";
    "i9 := @parameter1: int"->"i0 := @parameter2: int";
    "i0 := @parameter2: int"->"$r2 = r0[i9]";
    "$r2 = r0[i9]"->"$r1 = r0[i0]";
    "$r1 = r0[i0]"->"$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)";
    "$i1 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1)"->"if $i1 <= 0 goto r3 = r0[i9]";
    "if $i1 <= 0 goto r3 = r0[i9]"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0)";
    "if $i1 <= 0 goto r3 = r0[i9]"->"r3 = r0[i9]";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i0)"->"r3 = r0[i9]";
    "r3 = r0[i9]"->"r4 = r0[i0]";
    "r4 = r0[i0]"->"i10 = i9 + 1";
    "i10 = i9 + 1"->"i11 = i9 + 1";
    "i11 = i9 + 1"->"i12 = i0 - 1";
    "i12 = i0 - 1"->"if i11 > i12 goto i13 = i10 + -1";
    "if i11 > i12 goto i13 = i10 + -1"->"$r6 = r0[i11]";
    "if i11 > i12 goto i13 = i10 + -1"->"i13 = i10 + -1";
    "$r6 = r0[i11]"->"$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)";
    "$i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)"->"if $i2 >= 0 goto $r7 = r0[i11]";
    "if $i2 >= 0 goto $r7 = r0[i11]"->"$i8 = i9";
    "if $i2 >= 0 goto $r7 = r0[i11]"->"$r7 = r0[i11]";
    "$i8 = i9"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i8)"->"goto [?= i11 = i11 + 1]";
    "goto [?= i11 = i11 + 1]"->"i11 = i11 + 1";
    "$r7 = r0[i11]"->"$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)";
    "$i3 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)"->"if $i3 < 0 goto i11 = i11 + 1";
    "if $i3 < 0 goto i11 = i11 + 1"->"if i11 >= i12 goto $i4 = i12";
    "if $i3 < 0 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "if i11 >= i12 goto $i4 = i12"->"$r9 = r0[i12]";
    "if i11 >= i12 goto $i4 = i12"->"$i4 = i12";
    "$r9 = r0[i12]"->"$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)";
    "$i7 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4)"->"if $i7 <= 0 goto $i4 = i12";
    "if $i7 <= 0 goto $i4 = i12"->"i12 = i12 + -1";
    "if $i7 <= 0 goto $i4 = i12"->"$i4 = i12";
    "i12 = i12 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 >= i12 goto $i4 = i12";
    "$i4 = i12"->"i12 = i12 + -1";
    "i12 = i12 + -1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i4)"->"$r8 = r0[i11]";
    "$r8 = r0[i11]"->"$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)";
    "$i5 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3)"->"if $i5 >= 0 goto i11 = i11 + 1";
    "if $i5 >= 0 goto i11 = i11 + 1"->"$i6 = i9";
    "if $i5 >= 0 goto i11 = i11 + 1"->"i11 = i11 + 1";
    "$i6 = i9"->"i9 = i9 + 1";
    "i9 = i9 + 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i11, $i6)"->"i11 = i11 + 1";
    "i11 = i11 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 > i12 goto i13 = i10 + -1";
    "i13 = i10 + -1"->"i14 = i12 + 1";
    "i14 = i12 + 1"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i13)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i9, i13)"->"staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i0, i14)";
    "staticinvoke <com.thealgorithms.sorts.DualPivotQuickSort: void swap(java.lang.Comparable[],int,int)>(r0, i0, i14)"->"$r5 = newarray (int)[2]";
    "$r5 = newarray (int)[2]"->"$r5[0] = i11";
    "$r5[0] = i11"->"$r5[1] = i14";
    "$r5[1] = i14"->"return $r5";
}
