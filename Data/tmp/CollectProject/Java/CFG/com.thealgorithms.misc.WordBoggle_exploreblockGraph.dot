digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
r2 := @parameter2: char[][];
r21 := @parameter3: com.thealgorithms.misc.TrieNode;
r0 := @parameter4: boolean[][];
r19 := @parameter5: java.util.Set;
$r1 = r0[i0];
$z0 = $r1[i1];
if $z0 == 0 goto $r3 = r2[i0];
"
    "Block 1:
[preds: 0 ] [succs: ]
return;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r3 = r2[i0];
c2 = $r3[i1];
$r4 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);
if $z1 != 0 goto $r6 = r0[i0];
"
    "Block 3:
[preds: 2 ] [succs: ]
return;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r6 = r0[i0];
$r6[i1] = 1;
$r7 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);
r22 = (com.thealgorithms.misc.TrieNode) $r9;
$r10 = r22.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
$z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);
if $z2 == 0 goto r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r20 = r22.<com.thealgorithms.misc.TrieNode: java.lang.String word>;
interfaceinvoke r19.<java.util.Set: boolean add(java.lang.Object)>($r20);
"
    "Block 6:
[preds: 4 5 ] [succs: 7 ]
r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto $r14 = r0[i0];
"
    "Block 8:
[preds: 7 ] [succs: 7 ]
$r15 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r16 = (java.lang.Integer[]) $r15;
$r17 = r16[0];
$i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();
$r18 = r16[1];
$i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>($i3, $i4, r2, r22, r0, r19);
goto [?= $z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 9:
[preds: 7 ] [succs: ]
$r14 = r0[i0];
$r14[i1] = 0;
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
r2 := @parameter2: char[][];
r21 := @parameter3: com.thealgorithms.misc.TrieNode;
r0 := @parameter4: boolean[][];
r19 := @parameter5: java.util.Set;
$r1 = r0[i0];
$z0 = $r1[i1];
if $z0 == 0 goto $r3 = r2[i0];
"->"Block 1:
[preds: 0 ] [succs: ]
return;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
i0 := @parameter0: int;
i1 := @parameter1: int;
r2 := @parameter2: char[][];
r21 := @parameter3: com.thealgorithms.misc.TrieNode;
r0 := @parameter4: boolean[][];
r19 := @parameter5: java.util.Set;
$r1 = r0[i0];
$z0 = $r1[i1];
if $z0 == 0 goto $r3 = r2[i0];
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$r3 = r2[i0];
c2 = $r3[i1];
$r4 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);
if $z1 != 0 goto $r6 = r0[i0];
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r3 = r2[i0];
c2 = $r3[i1];
$r4 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);
if $z1 != 0 goto $r6 = r0[i0];
"->"Block 3:
[preds: 2 ] [succs: ]
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r3 = r2[i0];
c2 = $r3[i1];
$r4 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);
if $z1 != 0 goto $r6 = r0[i0];
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
$r6 = r0[i0];
$r6[i1] = 1;
$r7 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);
r22 = (com.thealgorithms.misc.TrieNode) $r9;
$r10 = r22.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
$z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);
if $z2 == 0 goto r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r6 = r0[i0];
$r6[i1] = 1;
$r7 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);
r22 = (com.thealgorithms.misc.TrieNode) $r9;
$r10 = r22.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
$z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);
if $z2 == 0 goto r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
$r20 = r22.<com.thealgorithms.misc.TrieNode: java.lang.String word>;
interfaceinvoke r19.<java.util.Set: boolean add(java.lang.Object)>($r20);
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
$r6 = r0[i0];
$r6[i1] = 1;
$r7 = r21.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
$r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);
r22 = (com.thealgorithms.misc.TrieNode) $r9;
$r10 = r22.<com.thealgorithms.misc.TrieNode: java.util.Map children>;
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);
$z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);
if $z2 == 0 goto r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
"->"Block 6:
[preds: 4 5 ] [succs: 7 ]
r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
$r20 = r22.<com.thealgorithms.misc.TrieNode: java.lang.String word>;
interfaceinvoke r19.<java.util.Set: boolean add(java.lang.Object)>($r20);
"->"Block 6:
[preds: 4 5 ] [succs: 7 ]
r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 6:
[preds: 4 5 ] [succs: 7 ]
r12 = staticinvoke <com.thealgorithms.misc.WordBoggle: java.util.List getNeighbors(int,int,char[][])>(i0, i1, r2);
r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();
"->"Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto $r14 = r0[i0];
";
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto $r14 = r0[i0];
"->"Block 8:
[preds: 7 ] [succs: 7 ]
$r15 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r16 = (java.lang.Integer[]) $r15;
$r17 = r16[0];
$i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();
$r18 = r16[1];
$i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>($i3, $i4, r2, r22, r0, r19);
goto [?= $z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto $r14 = r0[i0];
"->"Block 9:
[preds: 7 ] [succs: ]
$r14 = r0[i0];
$r14[i1] = 0;
return;
";
    "Block 8:
[preds: 7 ] [succs: 7 ]
$r15 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
r16 = (java.lang.Integer[]) $r15;
$r17 = r16[0];
$i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();
$r18 = r16[1];
$i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();
staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>($i3, $i4, r2, r22, r0, r19);
goto [?= $z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()];
"->"Block 7:
[preds: 6 8 ] [succs: 8 9 ]
$z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto $r14 = r0[i0];
";
}
