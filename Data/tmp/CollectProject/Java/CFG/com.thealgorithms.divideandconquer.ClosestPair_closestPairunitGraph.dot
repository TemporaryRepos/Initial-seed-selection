digraph "unitGraph" {
    "r4 := @this: com.thealgorithms.divideandconquer.ClosestPair"
    "r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"
    "i0 := @parameter1: int"
    "r0 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i0]"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"
    "i1 = i0 / 2"
    "r2 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i1]"
    "$i2 = i0 - i1"
    "r3 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i2]"
    "if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)"
    "$d25 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double bruteForce(com.thealgorithms.divideandconquer.ClosestPair$Location[])>(r0)"
    "return $d25"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)"
    "$i3 = i0 - i1"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, r3, 0, $i3)"
    "d0 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r2, i1)"
    "$i4 = i0 - i1"
    "d1 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r3, $i4)"
    "d26 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)"
    "i18 = 0"
    "if i18 >= i0 goto $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "$r16 = r0[i1]"
    "$d21 = $r16.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r17 = r0[i18]"
    "$d20 = $r17.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$d22 = $d21 - $d20"
    "d27 = staticinvoke <java.lang.Math: double abs(double)>($d22)"
    "$b14 = d27 cmpg d26"
    "if $b14 >= 0 goto $r18 = r0[i18]"
    "$i16 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "$i17 = $i16 + 1"
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>($i17)"
    "goto [?= i18 = i18 + 1]"
    "$r18 = r0[i18]"
    "$d24 = $r18.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r19 = r0[i1]"
    "$d23 = $r19.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$b15 = $d24 cmpl $d23"
    "if $b15 <= 0 goto i18 = i18 + 1"
    "goto [?= $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"
    "i18 = i18 + 1"
    "goto [?= (branch)]"
    "$i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "r20 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i5]"
    "i19 = 0"
    "i20 = 0"
    "if i20 >= i0 goto $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "$r11 = r0[i1]"
    "$d15 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r12 = r0[i20]"
    "$d14 = $r12.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$d16 = $d15 - $d14"
    "d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)"
    "$b12 = d17 cmpg d26"
    "if $b12 >= 0 goto $r13 = r0[i20]"
    "$r15 = r0[i20]"
    "r20[i19] = $r15"
    "i19 = i19 + 1"
    "goto [?= i20 = i20 + 1]"
    "$r13 = r0[i20]"
    "$d19 = $r13.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r14 = r0[i1]"
    "$d18 = $r14.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$b13 = $d19 cmpl $d18"
    "if $b13 <= 0 goto i20 = i20 + 1"
    "goto [?= $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"
    "i20 = i20 + 1"
    "$i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "$i7 = $i6 - 1"
    "virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r20, 0, $i7)"
    "i21 = 0"
    "$i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "$i23 = $i22 - 1"
    "if i21 >= $i23 goto staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)"
    "i24 = i21 + 1"
    "$i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"
    "if i24 >= $i8 goto i21 = i21 + 1"
    "$r5 = r20[i21]"
    "$d3 = $r5.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$r6 = r20[i24]"
    "$d2 = $r6.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"
    "$d4 = $d3 - $d2"
    "d5 = staticinvoke <java.lang.Math: double abs(double)>($d4)"
    "$r7 = r20[i21]"
    "$d7 = $r7.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "$r8 = r20[i24]"
    "$d6 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"
    "$d8 = $d7 - $d6"
    "d9 = staticinvoke <java.lang.Math: double abs(double)>($d8)"
    "$b9 = d9 cmpg d26"
    "if $b9 >= 0 goto i21 = i21 + 1"
    "$d10 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 2.0)"
    "$d11 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 2.0)"
    "$d12 = $d10 + $d11"
    "d28 = staticinvoke <java.lang.Math: double sqrt(double)>($d12)"
    "$b10 = d28 cmpg d26"
    "if $b10 >= 0 goto i24 = i24 + 1"
    "d26 = d28"
    "$d13 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"
    "$b11 = d28 cmpg $d13"
    "if $b11 >= 0 goto i24 = i24 + 1"
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d28)"
    "$r9 = r20[i21]"
    "r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r9"
    "$r10 = r20[i24]"
    "r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r10"
    "i24 = i24 + 1"
    "goto [?= $i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"
    "i21 = i21 + 1"
    "goto [?= $i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)"
    "return d26"
    "r4 := @this: com.thealgorithms.divideandconquer.ClosestPair"->"r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]";
    "r1 := @parameter0: com.thealgorithms.divideandconquer.ClosestPair$Location[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"r0 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i0]";
    "r0 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i0]"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)"->"i1 = i0 / 2";
    "i1 = i0 / 2"->"r2 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i1]";
    "r2 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[i1]"->"$i2 = i0 - i1";
    "$i2 = i0 - i1"->"r3 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i2]";
    "r3 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i2]"->"if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)";
    "if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)"->"$d25 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double bruteForce(com.thealgorithms.divideandconquer.ClosestPair$Location[])>(r0)";
    "if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)";
    "$d25 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double bruteForce(com.thealgorithms.divideandconquer.ClosestPair$Location[])>(r0)"->"return $d25";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)"->"$i3 = i0 - i1";
    "$i3 = i0 - i1"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, r3, 0, $i3)";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, r3, 0, $i3)"->"d0 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r2, i1)";
    "d0 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r2, i1)"->"$i4 = i0 - i1";
    "$i4 = i0 - i1"->"d1 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r3, $i4)";
    "d1 = virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int)>(r3, $i4)"->"d26 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)";
    "d26 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)"->"i18 = 0";
    "i18 = 0"->"if i18 >= i0 goto $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "if i18 >= i0 goto $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$r16 = r0[i1]";
    "if i18 >= i0 goto $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$r16 = r0[i1]"->"$d21 = $r16.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d21 = $r16.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r17 = r0[i18]";
    "$r17 = r0[i18]"->"$d20 = $r17.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d20 = $r17.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$d22 = $d21 - $d20";
    "$d22 = $d21 - $d20"->"d27 = staticinvoke <java.lang.Math: double abs(double)>($d22)";
    "d27 = staticinvoke <java.lang.Math: double abs(double)>($d22)"->"$b14 = d27 cmpg d26";
    "$b14 = d27 cmpg d26"->"if $b14 >= 0 goto $r18 = r0[i18]";
    "if $b14 >= 0 goto $r18 = r0[i18]"->"$i16 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "if $b14 >= 0 goto $r18 = r0[i18]"->"$r18 = r0[i18]";
    "$i16 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$i17 = $i16 + 1";
    "$i17 = $i16 + 1"->"staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>($i17)";
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>($i17)"->"goto [?= i18 = i18 + 1]";
    "goto [?= i18 = i18 + 1]"->"i18 = i18 + 1";
    "$r18 = r0[i18]"->"$d24 = $r18.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d24 = $r18.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r19 = r0[i1]";
    "$r19 = r0[i1]"->"$d23 = $r19.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d23 = $r19.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$b15 = $d24 cmpl $d23";
    "$b15 = $d24 cmpl $d23"->"if $b15 <= 0 goto i18 = i18 + 1";
    "if $b15 <= 0 goto i18 = i18 + 1"->"goto [?= $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]";
    "if $b15 <= 0 goto i18 = i18 + 1"->"i18 = i18 + 1";
    "goto [?= $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"->"$i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "i18 = i18 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i18 >= i0 goto $i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$i5 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"r20 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i5]";
    "r20 = newarray (com.thealgorithms.divideandconquer.ClosestPair$Location)[$i5]"->"i19 = 0";
    "i19 = 0"->"i20 = 0";
    "i20 = 0"->"if i20 >= i0 goto $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "if i20 >= i0 goto $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$r11 = r0[i1]";
    "if i20 >= i0 goto $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$r11 = r0[i1]"->"$d15 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d15 = $r11.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r12 = r0[i20]";
    "$r12 = r0[i20]"->"$d14 = $r12.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d14 = $r12.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$d16 = $d15 - $d14";
    "$d16 = $d15 - $d14"->"d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)";
    "d17 = staticinvoke <java.lang.Math: double abs(double)>($d16)"->"$b12 = d17 cmpg d26";
    "$b12 = d17 cmpg d26"->"if $b12 >= 0 goto $r13 = r0[i20]";
    "if $b12 >= 0 goto $r13 = r0[i20]"->"$r15 = r0[i20]";
    "if $b12 >= 0 goto $r13 = r0[i20]"->"$r13 = r0[i20]";
    "$r15 = r0[i20]"->"r20[i19] = $r15";
    "r20[i19] = $r15"->"i19 = i19 + 1";
    "i19 = i19 + 1"->"goto [?= i20 = i20 + 1]";
    "goto [?= i20 = i20 + 1]"->"i20 = i20 + 1";
    "$r13 = r0[i20]"->"$d19 = $r13.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d19 = $r13.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r14 = r0[i1]";
    "$r14 = r0[i1]"->"$d18 = $r14.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d18 = $r14.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$b13 = $d19 cmpl $d18";
    "$b13 = $d19 cmpl $d18"->"if $b13 <= 0 goto i20 = i20 + 1";
    "if $b13 <= 0 goto i20 = i20 + 1"->"goto [?= $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]";
    "if $b13 <= 0 goto i20 = i20 + 1"->"i20 = i20 + 1";
    "goto [?= $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"->"$i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "i20 = i20 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i20 >= i0 goto $i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$i6 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$i7 = $i6 - 1";
    "$i7 = $i6 - 1"->"virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r20, 0, $i7)";
    "virtualinvoke r4.<com.thealgorithms.divideandconquer.ClosestPair: void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int)>(r20, 0, $i7)"->"i21 = 0";
    "i21 = 0"->"$i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"$i23 = $i22 - 1";
    "$i23 = $i22 - 1"->"if i21 >= $i23 goto staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)";
    "if i21 >= $i23 goto staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)"->"i24 = i21 + 1";
    "if i21 >= $i23 goto staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)"->"staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)";
    "i24 = i21 + 1"->"$i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "$i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>"->"if i24 >= $i8 goto i21 = i21 + 1";
    "if i24 >= $i8 goto i21 = i21 + 1"->"$r5 = r20[i21]";
    "if i24 >= $i8 goto i21 = i21 + 1"->"i21 = i21 + 1";
    "$r5 = r20[i21]"->"$d3 = $r5.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d3 = $r5.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$r6 = r20[i24]";
    "$r6 = r20[i24]"->"$d2 = $r6.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>";
    "$d2 = $r6.<com.thealgorithms.divideandconquer.ClosestPair$Location: double x>"->"$d4 = $d3 - $d2";
    "$d4 = $d3 - $d2"->"d5 = staticinvoke <java.lang.Math: double abs(double)>($d4)";
    "d5 = staticinvoke <java.lang.Math: double abs(double)>($d4)"->"$r7 = r20[i21]";
    "$r7 = r20[i21]"->"$d7 = $r7.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d7 = $r7.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"$r8 = r20[i24]";
    "$r8 = r20[i24]"->"$d6 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>";
    "$d6 = $r8.<com.thealgorithms.divideandconquer.ClosestPair$Location: double y>"->"$d8 = $d7 - $d6";
    "$d8 = $d7 - $d6"->"d9 = staticinvoke <java.lang.Math: double abs(double)>($d8)";
    "d9 = staticinvoke <java.lang.Math: double abs(double)>($d8)"->"$b9 = d9 cmpg d26";
    "$b9 = d9 cmpg d26"->"if $b9 >= 0 goto i21 = i21 + 1";
    "if $b9 >= 0 goto i21 = i21 + 1"->"$d10 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 2.0)";
    "if $b9 >= 0 goto i21 = i21 + 1"->"i21 = i21 + 1";
    "$d10 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 2.0)"->"$d11 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 2.0)";
    "$d11 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 2.0)"->"$d12 = $d10 + $d11";
    "$d12 = $d10 + $d11"->"d28 = staticinvoke <java.lang.Math: double sqrt(double)>($d12)";
    "d28 = staticinvoke <java.lang.Math: double sqrt(double)>($d12)"->"$b10 = d28 cmpg d26";
    "$b10 = d28 cmpg d26"->"if $b10 >= 0 goto i24 = i24 + 1";
    "if $b10 >= 0 goto i24 = i24 + 1"->"d26 = d28";
    "if $b10 >= 0 goto i24 = i24 + 1"->"i24 = i24 + 1";
    "d26 = d28"->"$d13 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>";
    "$d13 = <com.thealgorithms.divideandconquer.ClosestPair: double minNum>"->"$b11 = d28 cmpg $d13";
    "$b11 = d28 cmpg $d13"->"if $b11 >= 0 goto i24 = i24 + 1";
    "if $b11 >= 0 goto i24 = i24 + 1"->"staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d28)";
    "if $b11 >= 0 goto i24 = i24 + 1"->"i24 = i24 + 1";
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setMinNum(double)>(d28)"->"$r9 = r20[i21]";
    "$r9 = r20[i21]"->"r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r9";
    "r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point1> = $r9"->"$r10 = r20[i24]";
    "$r10 = r20[i24]"->"r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r10";
    "r4.<com.thealgorithms.divideandconquer.ClosestPair: com.thealgorithms.divideandconquer.ClosestPair$Location point2> = $r10"->"i24 = i24 + 1";
    "i24 = i24 + 1"->"goto [?= $i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]";
    "goto [?= $i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"->"$i8 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "i21 = i21 + 1"->"goto [?= $i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]";
    "goto [?= $i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>]"->"$i22 = <com.thealgorithms.divideandconquer.ClosestPair: int secondCount>";
    "staticinvoke <com.thealgorithms.divideandconquer.ClosestPair: void setSecondCount(int)>(0)"->"return d26";
}
