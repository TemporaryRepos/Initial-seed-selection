digraph "unitGraph" {
    "r4 := @parameter0: char[][]"
    "r2 := @parameter1: java.lang.String[]"
    "$r0 = new com.thealgorithms.misc.Trie"
    "specialinvoke $r0.<com.thealgorithms.misc.Trie: void <init>()>()"
    "r1 = $r0"
    "r8 = r2"
    "i4 = lengthof r8"
    "i5 = 0"
    "if i5 >= i4 goto $r3 = new java.util.HashSet"
    "r9 = r8[i5]"
    "virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9)"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "$r3 = new java.util.HashSet"
    "specialinvoke $r3.<java.util.HashSet: void <init>()>()"
    "r10 = $r3"
    "$i1 = lengthof r4"
    "$i0 = lengthof r4"
    "r11 = newmultiarray (boolean)[$i1][$i0]"
    "i6 = 0"
    "$i2 = lengthof r4"
    "if i6 >= $i2 goto $r5 = new java.util.ArrayList"
    "i7 = 0"
    "$r6 = r4[i6]"
    "$i3 = lengthof $r6"
    "if i7 >= $i3 goto i6 = i6 + 1"
    "$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>"
    "staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10)"
    "i7 = i7 + 1"
    "goto [?= $r6 = r4[i6]]"
    "i6 = i6 + 1"
    "goto [?= $i2 = lengthof r4]"
    "$r5 = new java.util.ArrayList"
    "specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r10)"
    "return $r5"
    "r4 := @parameter0: char[][]"->"r2 := @parameter1: java.lang.String[]";
    "r2 := @parameter1: java.lang.String[]"->"$r0 = new com.thealgorithms.misc.Trie";
    "$r0 = new com.thealgorithms.misc.Trie"->"specialinvoke $r0.<com.thealgorithms.misc.Trie: void <init>()>()";
    "specialinvoke $r0.<com.thealgorithms.misc.Trie: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r8 = r2";
    "r8 = r2"->"i4 = lengthof r8";
    "i4 = lengthof r8"->"i5 = 0";
    "i5 = 0"->"if i5 >= i4 goto $r3 = new java.util.HashSet";
    "if i5 >= i4 goto $r3 = new java.util.HashSet"->"r9 = r8[i5]";
    "if i5 >= i4 goto $r3 = new java.util.HashSet"->"$r3 = new java.util.HashSet";
    "r9 = r8[i5]"->"virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9)";
    "virtualinvoke r1.<com.thealgorithms.misc.Trie: void add(java.lang.String)>(r9)"->"i5 = i5 + 1";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i4 goto $r3 = new java.util.HashSet";
    "$r3 = new java.util.HashSet"->"specialinvoke $r3.<java.util.HashSet: void <init>()>()";
    "specialinvoke $r3.<java.util.HashSet: void <init>()>()"->"r10 = $r3";
    "r10 = $r3"->"$i1 = lengthof r4";
    "$i1 = lengthof r4"->"$i0 = lengthof r4";
    "$i0 = lengthof r4"->"r11 = newmultiarray (boolean)[$i1][$i0]";
    "r11 = newmultiarray (boolean)[$i1][$i0]"->"i6 = 0";
    "i6 = 0"->"$i2 = lengthof r4";
    "$i2 = lengthof r4"->"if i6 >= $i2 goto $r5 = new java.util.ArrayList";
    "if i6 >= $i2 goto $r5 = new java.util.ArrayList"->"i7 = 0";
    "if i6 >= $i2 goto $r5 = new java.util.ArrayList"->"$r5 = new java.util.ArrayList";
    "i7 = 0"->"$r6 = r4[i6]";
    "$r6 = r4[i6]"->"$i3 = lengthof $r6";
    "$i3 = lengthof $r6"->"if i7 >= $i3 goto i6 = i6 + 1";
    "if i7 >= $i3 goto i6 = i6 + 1"->"$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>";
    "if i7 >= $i3 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$r7 = r1.<com.thealgorithms.misc.Trie: com.thealgorithms.misc.TrieNode root>"->"staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10)";
    "staticinvoke <com.thealgorithms.misc.WordBoggle: void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set)>(i6, i7, r4, $r7, r11, r10)"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $r6 = r4[i6]]";
    "goto [?= $r6 = r4[i6]]"->"$r6 = r4[i6]";
    "i6 = i6 + 1"->"goto [?= $i2 = lengthof r4]";
    "goto [?= $i2 = lengthof r4]"->"$i2 = lengthof r4";
    "$r5 = new java.util.ArrayList"->"specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r10)";
    "specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r10)"->"return $r5";
}
