digraph "unitGraph" {
    "r0 := @parameter0: java.math.BigDecimal[][]"
    "r1 := @parameter1: java.math.BigDecimal[][]"
    "r5 := @parameter2: java.util.function.BiFunction"
    "$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean hasEqualSizes(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1)"
    "if $z0 != 0 goto i0 = lengthof r0"
    "$r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>()"
    "return $r8"
    "i0 = lengthof r0"
    "$r2 = r0[0]"
    "i1 = lengthof $r2"
    "r3 = newmultiarray (java.math.BigDecimal)[i0][i1]"
    "$r4 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, i0)"
    "$r6 = staticinvoke <com.thealgorithms.maths.MatrixUtil$lambda_operate_1__89: java.util.function.IntConsumer bootstrap$(int,java.math.BigDecimal[][],java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction)>(i1, r0, r1, r3, r5)"
    "interfaceinvoke $r4.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r6)"
    "$r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r3)"
    "return $r7"
    "r0 := @parameter0: java.math.BigDecimal[][]"->"r1 := @parameter1: java.math.BigDecimal[][]";
    "r1 := @parameter1: java.math.BigDecimal[][]"->"r5 := @parameter2: java.util.function.BiFunction";
    "r5 := @parameter2: java.util.function.BiFunction"->"$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean hasEqualSizes(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1)";
    "$z0 = staticinvoke <com.thealgorithms.maths.MatrixUtil: boolean hasEqualSizes(java.math.BigDecimal[][],java.math.BigDecimal[][])>(r0, r1)"->"if $z0 != 0 goto i0 = lengthof r0";
    "if $z0 != 0 goto i0 = lengthof r0"->"$r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>()";
    "if $z0 != 0 goto i0 = lengthof r0"->"i0 = lengthof r0";
    "$r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>()"->"return $r8";
    "i0 = lengthof r0"->"$r2 = r0[0]";
    "$r2 = r0[0]"->"i1 = lengthof $r2";
    "i1 = lengthof $r2"->"r3 = newmultiarray (java.math.BigDecimal)[i0][i1]";
    "r3 = newmultiarray (java.math.BigDecimal)[i0][i1]"->"$r4 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, i0)";
    "$r4 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, i0)"->"$r6 = staticinvoke <com.thealgorithms.maths.MatrixUtil$lambda_operate_1__89: java.util.function.IntConsumer bootstrap$(int,java.math.BigDecimal[][],java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction)>(i1, r0, r1, r3, r5)";
    "$r6 = staticinvoke <com.thealgorithms.maths.MatrixUtil$lambda_operate_1__89: java.util.function.IntConsumer bootstrap$(int,java.math.BigDecimal[][],java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction)>(i1, r0, r1, r3, r5)"->"interfaceinvoke $r4.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r6)";
    "interfaceinvoke $r4.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r6)"->"$r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r3)";
    "$r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r3)"->"return $r7";
}
