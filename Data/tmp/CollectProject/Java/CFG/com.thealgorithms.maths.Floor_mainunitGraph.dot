digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.Random"
    "specialinvoke $r0.<java.util.Random: void <init>()>()"
    "r1 = $r0"
    "i1 = 1"
    "if i1 > 1000 goto return"
    "d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>()"
    "$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>"
    "if $z0 != 0 goto i1 = i1 + 1"
    "$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0)"
    "$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0)"
    "$b0 = $d1 cmpl $d2"
    "if $b0 == 0 goto i1 = i1 + 1"
    "$r2 = new java.lang.AssertionError"
    "specialinvoke $r2.<java.lang.AssertionError: void <init>()>()"
    "throw $r2"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"$r0 = new java.util.Random";
    "$r0 = new java.util.Random"->"specialinvoke $r0.<java.util.Random: void <init>()>()";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i1 = 1";
    "i1 = 1"->"if i1 > 1000 goto return";
    "if i1 > 1000 goto return"->"d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>()";
    "if i1 > 1000 goto return"->"return";
    "d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>()"->"$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>";
    "$z0 = <com.thealgorithms.maths.Floor: boolean $assertionsDisabled>"->"if $z0 != 0 goto i1 = i1 + 1";
    "if $z0 != 0 goto i1 = i1 + 1"->"$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0)";
    "if $z0 != 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$d1 = staticinvoke <com.thealgorithms.maths.Floor: double floor(double)>(d0)"->"$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0)";
    "$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0)"->"$b0 = $d1 cmpl $d2";
    "$b0 = $d1 cmpl $d2"->"if $b0 == 0 goto i1 = i1 + 1";
    "if $b0 == 0 goto i1 = i1 + 1"->"$r2 = new java.lang.AssertionError";
    "if $b0 == 0 goto i1 = i1 + 1"->"i1 = i1 + 1";
    "$r2 = new java.lang.AssertionError"->"specialinvoke $r2.<java.lang.AssertionError: void <init>()>()";
    "specialinvoke $r2.<java.lang.AssertionError: void <init>()>()"->"throw $r2";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 > 1000 goto return";
}
