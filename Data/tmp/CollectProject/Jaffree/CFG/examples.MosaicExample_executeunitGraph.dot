digraph "unitGraph" {
    "r4 := @this: examples.MosaicExample"
    "$r0 = new java.util.concurrent.CopyOnWriteArrayList"
    "specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()"
    "r1 = $r0"
    "$r2 = new java.util.ArrayList"
    "specialinvoke $r2.<java.util.ArrayList: void <init>()>()"
    "r3 = $r2"
    "i2 = 0"
    "$r5 = r4.<examples.MosaicExample: java.util.List inputs>"
    "$i0 = interfaceinvoke $r5.<java.util.List: int size()>()"
    "if i2 >= $i0 goto r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)"
    "$r25 = r4.<examples.MosaicExample: java.util.List inputs>"
    "$r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i2)"
    "r73 = (java.lang.String) $r26"
    "z2 = 0"
    "$r27 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"
    "$r28 = staticinvoke <com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe atPath(java.nio.file.Path)>($r27)"
    "$r29 = virtualinvoke $r28.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setShowStreams(boolean)>(1)"
    "$r30 = newarray (java.lang.String)[0]"
    "$r31 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r73, $r30)"
    "$r32 = virtualinvoke $r29.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setInput(java.nio.file.Path)>($r31)"
    "r33 = virtualinvoke $r32.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobeResult execute()>()"
    "$r34 = virtualinvoke r33.<com.github.kokorin.jaffree.ffprobe.FFprobeResult: java.util.List getStreams()>()"
    "r74 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto $r35 = new examples.MosaicExample$FrameIterator"
    "$r70 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>()"
    "r75 = (com.github.kokorin.jaffree.ffprobe.Stream) $r70"
    "$r71 = <com.github.kokorin.jaffree.StreamType: com.github.kokorin.jaffree.StreamType AUDIO>"
    "$r72 = virtualinvoke r75.<com.github.kokorin.jaffree.ffprobe.Stream: com.github.kokorin.jaffree.StreamType getCodecType()>()"
    "if $r71 != $r72 goto (branch)"
    "z2 = 1"
    "goto [?= $r35 = new examples.MosaicExample$FrameIterator]"
    "goto [?= $z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()]"
    "$r35 = new examples.MosaicExample$FrameIterator"
    "specialinvoke $r35.<examples.MosaicExample$FrameIterator: void <init>()>()"
    "r76 = $r35"
    "interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r76)"
    "$r36 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"
    "$r37 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r36)"
    "$r38 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(r73)"
    "$r39 = virtualinvoke $r38.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setDuration(long)>(15000L)"
    "$r40 = (com.github.kokorin.jaffree.ffmpeg.Input) $r39"
    "$r41 = virtualinvoke $r37.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r40)"
    "$r42 = virtualinvoke r76.<examples.MosaicExample$FrameIterator: com.github.kokorin.jaffree.ffmpeg.FrameConsumer getConsumer()>()"
    "$r43 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.FrameOutput withConsumer(com.github.kokorin.jaffree.ffmpeg.FrameConsumer)>($r42)"
    "$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)"
    "$r45 = virtualinvoke $r43.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFrameRate(java.lang.Number)>($r44)"
    "$r46 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r45"
    "$r47 = virtualinvoke $r46.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ac\", \"1\")"
    "$r48 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r47"
    "$r49 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(44100)"
    "$r50 = virtualinvoke $r48.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ar\", $r49)"
    "$r51 = (com.github.kokorin.jaffree.ffmpeg.Output) $r50"
    "$r52 = virtualinvoke $r41.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r51)"
    "$r53 = new java.lang.StringBuilder"
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"
    "$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"input\")"
    "$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()"
    "r77 = virtualinvoke $r52.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>($r56)"
    "if z2 != 0 goto $r57 = new java.lang.Thread"
    "$r65 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(\"anullsrc\")"
    "$r66 = virtualinvoke $r65.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFormat(java.lang.String)>(\"lavfi\")"
    "$r67 = (com.github.kokorin.jaffree.ffmpeg.Input) $r66"
    "$r68 = virtualinvoke r77.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r67)"
    "virtualinvoke $r68.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArgument(java.lang.String)>(\"-shortest\")"
    "$r57 = new java.lang.Thread"
    "$r58 = new examples.MosaicExample$1"
    "specialinvoke $r58.<examples.MosaicExample$1: void <init>(examples.MosaicExample,com.github.kokorin.jaffree.ffmpeg.FFmpeg,java.util.List)>(r4, r77, r1)"
    "$r59 = new java.lang.StringBuilder"
    "specialinvoke $r59.<java.lang.StringBuilder: void <init>()>()"
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Reader-\")"
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"
    "$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-main\")"
    "$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r57.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r58, $r63)"
    "r64 = $r57"
    "virtualinvoke r64.<java.lang.Thread: void setDaemon(boolean)>(1)"
    "virtualinvoke r64.<java.lang.Thread: void start()>()"
    "i2 = i2 + 1"
    "goto [?= $r5 = r4.<examples.MosaicExample: java.util.List inputs>]"
    "r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)"
    "$r6 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"
    "$r7 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r6)"
    "$r8 = <com.github.kokorin.jaffree.ffmpeg.ImageFormats: com.github.kokorin.jaffree.ffmpeg.ImageFormats BGR24>"
    "$r9 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput withProducer(com.github.kokorin.jaffree.ffmpeg.FrameProducer,com.github.kokorin.jaffree.ffmpeg.ImageFormat,long)>(r78, $r8, 5000L)"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)"
    "$r11 = virtualinvoke $r9.<com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput setFrameRate(java.lang.Number)>($r10)"
    "$r12 = virtualinvoke $r7.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r11)"
    "$r13 = virtualinvoke $r12.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setOverwriteOutput(boolean)>(1)"
    "$r14 = <com.github.kokorin.jaffree.LogLevel: com.github.kokorin.jaffree.LogLevel TRACE>"
    "$r15 = virtualinvoke $r13.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setLogLevel(com.github.kokorin.jaffree.LogLevel)>($r14)"
    "$r16 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlOutput: com.github.kokorin.jaffree.ffmpeg.UrlOutput toUrl(java.lang.String)>(\"mosaic.mp4\")"
    "$r17 = virtualinvoke $r15.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r16)"
    "$r18 = new java.lang.StringBuilder"
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"amix=inputs=\")"
    "$r20 = r4.<examples.MosaicExample: java.util.List inputs>"
    "$i1 = interfaceinvoke $r20.<java.util.List: int size()>()"
    "$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r23 = virtualinvoke $r17.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArguments(java.lang.String,java.lang.String)>(\"-filter_complex\", $r22)"
    "$r24 = virtualinvoke $r23.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>(\"result\")"
    "virtualinvoke $r24.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpegResult execute()>()"
    "return"
    "r4 := @this: examples.MosaicExample"->"$r0 = new java.util.concurrent.CopyOnWriteArrayList";
    "$r0 = new java.util.concurrent.CopyOnWriteArrayList"->"specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.util.ArrayList";
    "$r2 = new java.util.ArrayList"->"specialinvoke $r2.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r2.<java.util.ArrayList: void <init>()>()"->"r3 = $r2";
    "r3 = $r2"->"i2 = 0";
    "i2 = 0"->"$r5 = r4.<examples.MosaicExample: java.util.List inputs>";
    "$r5 = r4.<examples.MosaicExample: java.util.List inputs>"->"$i0 = interfaceinvoke $r5.<java.util.List: int size()>()";
    "$i0 = interfaceinvoke $r5.<java.util.List: int size()>()"->"if i2 >= $i0 goto r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)";
    "if i2 >= $i0 goto r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)"->"$r25 = r4.<examples.MosaicExample: java.util.List inputs>";
    "if i2 >= $i0 goto r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)"->"r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)";
    "$r25 = r4.<examples.MosaicExample: java.util.List inputs>"->"$r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i2)";
    "$r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i2)"->"r73 = (java.lang.String) $r26";
    "r73 = (java.lang.String) $r26"->"z2 = 0";
    "z2 = 0"->"$r27 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>";
    "$r27 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"->"$r28 = staticinvoke <com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe atPath(java.nio.file.Path)>($r27)";
    "$r28 = staticinvoke <com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe atPath(java.nio.file.Path)>($r27)"->"$r29 = virtualinvoke $r28.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setShowStreams(boolean)>(1)";
    "$r29 = virtualinvoke $r28.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setShowStreams(boolean)>(1)"->"$r30 = newarray (java.lang.String)[0]";
    "$r30 = newarray (java.lang.String)[0]"->"$r31 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r73, $r30)";
    "$r31 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r73, $r30)"->"$r32 = virtualinvoke $r29.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setInput(java.nio.file.Path)>($r31)";
    "$r32 = virtualinvoke $r29.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobe setInput(java.nio.file.Path)>($r31)"->"r33 = virtualinvoke $r32.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobeResult execute()>()";
    "r33 = virtualinvoke $r32.<com.github.kokorin.jaffree.ffprobe.FFprobe: com.github.kokorin.jaffree.ffprobe.FFprobeResult execute()>()"->"$r34 = virtualinvoke r33.<com.github.kokorin.jaffree.ffprobe.FFprobeResult: java.util.List getStreams()>()";
    "$r34 = virtualinvoke r33.<com.github.kokorin.jaffree.ffprobe.FFprobeResult: java.util.List getStreams()>()"->"r74 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>()";
    "r74 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto $r35 = new examples.MosaicExample$FrameIterator";
    "if $z0 == 0 goto $r35 = new examples.MosaicExample$FrameIterator"->"$r70 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto $r35 = new examples.MosaicExample$FrameIterator"->"$r35 = new examples.MosaicExample$FrameIterator";
    "$r70 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>()"->"r75 = (com.github.kokorin.jaffree.ffprobe.Stream) $r70";
    "r75 = (com.github.kokorin.jaffree.ffprobe.Stream) $r70"->"$r71 = <com.github.kokorin.jaffree.StreamType: com.github.kokorin.jaffree.StreamType AUDIO>";
    "$r71 = <com.github.kokorin.jaffree.StreamType: com.github.kokorin.jaffree.StreamType AUDIO>"->"$r72 = virtualinvoke r75.<com.github.kokorin.jaffree.ffprobe.Stream: com.github.kokorin.jaffree.StreamType getCodecType()>()";
    "$r72 = virtualinvoke r75.<com.github.kokorin.jaffree.ffprobe.Stream: com.github.kokorin.jaffree.StreamType getCodecType()>()"->"if $r71 != $r72 goto (branch)";
    "if $r71 != $r72 goto (branch)"->"z2 = 1";
    "if $r71 != $r72 goto (branch)"->"goto [?= $z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()]";
    "z2 = 1"->"goto [?= $r35 = new examples.MosaicExample$FrameIterator]";
    "goto [?= $r35 = new examples.MosaicExample$FrameIterator]"->"$r35 = new examples.MosaicExample$FrameIterator";
    "goto [?= $z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>()";
    "$r35 = new examples.MosaicExample$FrameIterator"->"specialinvoke $r35.<examples.MosaicExample$FrameIterator: void <init>()>()";
    "specialinvoke $r35.<examples.MosaicExample$FrameIterator: void <init>()>()"->"r76 = $r35";
    "r76 = $r35"->"interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r76)";
    "interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r76)"->"$r36 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>";
    "$r36 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"->"$r37 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r36)";
    "$r37 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r36)"->"$r38 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(r73)";
    "$r38 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(r73)"->"$r39 = virtualinvoke $r38.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setDuration(long)>(15000L)";
    "$r39 = virtualinvoke $r38.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setDuration(long)>(15000L)"->"$r40 = (com.github.kokorin.jaffree.ffmpeg.Input) $r39";
    "$r40 = (com.github.kokorin.jaffree.ffmpeg.Input) $r39"->"$r41 = virtualinvoke $r37.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r40)";
    "$r41 = virtualinvoke $r37.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r40)"->"$r42 = virtualinvoke r76.<examples.MosaicExample$FrameIterator: com.github.kokorin.jaffree.ffmpeg.FrameConsumer getConsumer()>()";
    "$r42 = virtualinvoke r76.<examples.MosaicExample$FrameIterator: com.github.kokorin.jaffree.ffmpeg.FrameConsumer getConsumer()>()"->"$r43 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.FrameOutput withConsumer(com.github.kokorin.jaffree.ffmpeg.FrameConsumer)>($r42)";
    "$r43 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.FrameOutput withConsumer(com.github.kokorin.jaffree.ffmpeg.FrameConsumer)>($r42)"->"$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)";
    "$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)"->"$r45 = virtualinvoke $r43.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFrameRate(java.lang.Number)>($r44)";
    "$r45 = virtualinvoke $r43.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFrameRate(java.lang.Number)>($r44)"->"$r46 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r45";
    "$r46 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r45"->"$r47 = virtualinvoke $r46.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ac\", \"1\")";
    "$r47 = virtualinvoke $r46.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ac\", \"1\")"->"$r48 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r47";
    "$r48 = (com.github.kokorin.jaffree.ffmpeg.FrameOutput) $r47"->"$r49 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(44100)";
    "$r49 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(44100)"->"$r50 = virtualinvoke $r48.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ar\", $r49)";
    "$r50 = virtualinvoke $r48.<com.github.kokorin.jaffree.ffmpeg.FrameOutput: com.github.kokorin.jaffree.ffmpeg.BaseInOut addArguments(java.lang.String,java.lang.String)>(\"-ar\", $r49)"->"$r51 = (com.github.kokorin.jaffree.ffmpeg.Output) $r50";
    "$r51 = (com.github.kokorin.jaffree.ffmpeg.Output) $r50"->"$r52 = virtualinvoke $r41.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r51)";
    "$r52 = virtualinvoke $r41.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r51)"->"$r53 = new java.lang.StringBuilder";
    "$r53 = new java.lang.StringBuilder"->"specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"->"$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"input\")";
    "$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"input\")"->"$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)";
    "$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"->"$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()"->"r77 = virtualinvoke $r52.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>($r56)";
    "r77 = virtualinvoke $r52.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>($r56)"->"if z2 != 0 goto $r57 = new java.lang.Thread";
    "if z2 != 0 goto $r57 = new java.lang.Thread"->"$r65 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(\"anullsrc\")";
    "if z2 != 0 goto $r57 = new java.lang.Thread"->"$r57 = new java.lang.Thread";
    "$r65 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.UrlInput fromUrl(java.lang.String)>(\"anullsrc\")"->"$r66 = virtualinvoke $r65.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFormat(java.lang.String)>(\"lavfi\")";
    "$r66 = virtualinvoke $r65.<com.github.kokorin.jaffree.ffmpeg.UrlInput: com.github.kokorin.jaffree.ffmpeg.BaseInOut setFormat(java.lang.String)>(\"lavfi\")"->"$r67 = (com.github.kokorin.jaffree.ffmpeg.Input) $r66";
    "$r67 = (com.github.kokorin.jaffree.ffmpeg.Input) $r66"->"$r68 = virtualinvoke r77.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r67)";
    "$r68 = virtualinvoke r77.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r67)"->"virtualinvoke $r68.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArgument(java.lang.String)>(\"-shortest\")";
    "virtualinvoke $r68.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArgument(java.lang.String)>(\"-shortest\")"->"$r57 = new java.lang.Thread";
    "$r57 = new java.lang.Thread"->"$r58 = new examples.MosaicExample$1";
    "$r58 = new examples.MosaicExample$1"->"specialinvoke $r58.<examples.MosaicExample$1: void <init>(examples.MosaicExample,com.github.kokorin.jaffree.ffmpeg.FFmpeg,java.util.List)>(r4, r77, r1)";
    "specialinvoke $r58.<examples.MosaicExample$1: void <init>(examples.MosaicExample,com.github.kokorin.jaffree.ffmpeg.FFmpeg,java.util.List)>(r4, r77, r1)"->"$r59 = new java.lang.StringBuilder";
    "$r59 = new java.lang.StringBuilder"->"specialinvoke $r59.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r59.<java.lang.StringBuilder: void <init>()>()"->"$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Reader-\")";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Reader-\")"->"$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)";
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)"->"$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-main\")";
    "$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"-main\")"->"$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r57.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r58, $r63)";
    "specialinvoke $r57.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r58, $r63)"->"r64 = $r57";
    "r64 = $r57"->"virtualinvoke r64.<java.lang.Thread: void setDaemon(boolean)>(1)";
    "virtualinvoke r64.<java.lang.Thread: void setDaemon(boolean)>(1)"->"virtualinvoke r64.<java.lang.Thread: void start()>()";
    "virtualinvoke r64.<java.lang.Thread: void start()>()"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= $r5 = r4.<examples.MosaicExample: java.util.List inputs>]";
    "goto [?= $r5 = r4.<examples.MosaicExample: java.util.List inputs>]"->"$r5 = r4.<examples.MosaicExample: java.util.List inputs>";
    "r78 = specialinvoke r4.<examples.MosaicExample: com.github.kokorin.jaffree.ffmpeg.FrameProducer produceMosaic(java.util.List)>(r3)"->"$r6 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>";
    "$r6 = r4.<examples.MosaicExample: java.nio.file.Path ffmpegBin>"->"$r7 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r6)";
    "$r7 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg atPath(java.nio.file.Path)>($r6)"->"$r8 = <com.github.kokorin.jaffree.ffmpeg.ImageFormats: com.github.kokorin.jaffree.ffmpeg.ImageFormats BGR24>";
    "$r8 = <com.github.kokorin.jaffree.ffmpeg.ImageFormats: com.github.kokorin.jaffree.ffmpeg.ImageFormats BGR24>"->"$r9 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput withProducer(com.github.kokorin.jaffree.ffmpeg.FrameProducer,com.github.kokorin.jaffree.ffmpeg.ImageFormat,long)>(r78, $r8, 5000L)";
    "$r9 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput withProducer(com.github.kokorin.jaffree.ffmpeg.FrameProducer,com.github.kokorin.jaffree.ffmpeg.ImageFormat,long)>(r78, $r8, 5000L)"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25)"->"$r11 = virtualinvoke $r9.<com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput setFrameRate(java.lang.Number)>($r10)";
    "$r11 = virtualinvoke $r9.<com.github.kokorin.jaffree.ffmpeg.FrameInput: com.github.kokorin.jaffree.ffmpeg.FrameInput setFrameRate(java.lang.Number)>($r10)"->"$r12 = virtualinvoke $r7.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r11)";
    "$r12 = virtualinvoke $r7.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addInput(com.github.kokorin.jaffree.ffmpeg.Input)>($r11)"->"$r13 = virtualinvoke $r12.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setOverwriteOutput(boolean)>(1)";
    "$r13 = virtualinvoke $r12.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setOverwriteOutput(boolean)>(1)"->"$r14 = <com.github.kokorin.jaffree.LogLevel: com.github.kokorin.jaffree.LogLevel TRACE>";
    "$r14 = <com.github.kokorin.jaffree.LogLevel: com.github.kokorin.jaffree.LogLevel TRACE>"->"$r15 = virtualinvoke $r13.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setLogLevel(com.github.kokorin.jaffree.LogLevel)>($r14)";
    "$r15 = virtualinvoke $r13.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setLogLevel(com.github.kokorin.jaffree.LogLevel)>($r14)"->"$r16 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlOutput: com.github.kokorin.jaffree.ffmpeg.UrlOutput toUrl(java.lang.String)>(\"mosaic.mp4\")";
    "$r16 = staticinvoke <com.github.kokorin.jaffree.ffmpeg.UrlOutput: com.github.kokorin.jaffree.ffmpeg.UrlOutput toUrl(java.lang.String)>(\"mosaic.mp4\")"->"$r17 = virtualinvoke $r15.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r16)";
    "$r17 = virtualinvoke $r15.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addOutput(com.github.kokorin.jaffree.ffmpeg.Output)>($r16)"->"$r18 = new java.lang.StringBuilder";
    "$r18 = new java.lang.StringBuilder"->"specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()"->"$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"amix=inputs=\")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"amix=inputs=\")"->"$r20 = r4.<examples.MosaicExample: java.util.List inputs>";
    "$r20 = r4.<examples.MosaicExample: java.util.List inputs>"->"$i1 = interfaceinvoke $r20.<java.util.List: int size()>()";
    "$i1 = interfaceinvoke $r20.<java.util.List: int size()>()"->"$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)";
    "$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)"->"$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r23 = virtualinvoke $r17.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArguments(java.lang.String,java.lang.String)>(\"-filter_complex\", $r22)";
    "$r23 = virtualinvoke $r17.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg addArguments(java.lang.String,java.lang.String)>(\"-filter_complex\", $r22)"->"$r24 = virtualinvoke $r23.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>(\"result\")";
    "$r24 = virtualinvoke $r23.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpeg setContextName(java.lang.String)>(\"result\")"->"virtualinvoke $r24.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpegResult execute()>()";
    "virtualinvoke $r24.<com.github.kokorin.jaffree.ffmpeg.FFmpeg: com.github.kokorin.jaffree.ffmpeg.FFmpegResult execute()>()"->"return";
}
