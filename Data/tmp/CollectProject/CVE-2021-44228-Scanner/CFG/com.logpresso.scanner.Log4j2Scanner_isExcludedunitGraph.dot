digraph "unitGraph" {
    "r0 := @this: com.logpresso.scanner.Log4j2Scanner"
    "r7 := @parameter0: java.lang.String"
    "$z0 = <com.logpresso.scanner.Log4j2Scanner: boolean isWindows>"
    "if $z0 == 0 goto $r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"
    "r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>()"
    "$r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"
    "$r2 = virtualinvoke $r1.<com.logpresso.scanner.Configuration: java.util.List getExcludePathPrefixes()>()"
    "r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>()"
    "$z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"
    "if $z4 == 0 goto $r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"
    "$r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"
    "r9 = (java.lang.String) $r6"
    "$z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r9)"
    "if $z3 == 0 goto (branch)"
    "return 1"
    "goto [?= $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"
    "$r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"
    "$r4 = virtualinvoke $r3.<com.logpresso.scanner.Configuration: java.util.List getExcludePatterns()>()"
    "r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto return 0"
    "$r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()"
    "r11 = (java.lang.String) $r5"
    "$z2 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(r11)"
    "if $z2 == 0 goto (branch)"
    "goto [?= $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]"
    "return 0"
    "r0 := @this: com.logpresso.scanner.Log4j2Scanner"->"r7 := @parameter0: java.lang.String";
    "r7 := @parameter0: java.lang.String"->"$z0 = <com.logpresso.scanner.Log4j2Scanner: boolean isWindows>";
    "$z0 = <com.logpresso.scanner.Log4j2Scanner: boolean isWindows>"->"if $z0 == 0 goto $r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>";
    "if $z0 == 0 goto $r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>()";
    "if $z0 == 0 goto $r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"$r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>";
    "r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>()"->"$r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>";
    "$r1 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"$r2 = virtualinvoke $r1.<com.logpresso.scanner.Configuration: java.util.List getExcludePathPrefixes()>()";
    "$r2 = virtualinvoke $r1.<com.logpresso.scanner.Configuration: java.util.List getExcludePathPrefixes()>()"->"r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>()";
    "r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>()"->"$z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "$z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"->"if $z4 == 0 goto $r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>";
    "if $z4 == 0 goto $r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"$r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()";
    "if $z4 == 0 goto $r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"$r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>";
    "$r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"r9 = (java.lang.String) $r6";
    "r9 = (java.lang.String) $r6"->"$z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r9)";
    "$z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r9)"->"if $z3 == 0 goto (branch)";
    "if $z3 == 0 goto (branch)"->"return 1";
    "if $z3 == 0 goto (branch)"->"goto [?= $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"->"$z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "$r3 = r0.<com.logpresso.scanner.Log4j2Scanner: com.logpresso.scanner.Configuration config>"->"$r4 = virtualinvoke $r3.<com.logpresso.scanner.Configuration: java.util.List getExcludePatterns()>()";
    "$r4 = virtualinvoke $r3.<com.logpresso.scanner.Configuration: java.util.List getExcludePatterns()>()"->"r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()";
    "r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()";
    "$z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto return 0";
    "if $z1 == 0 goto return 0"->"$r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 == 0 goto return 0"->"return 0";
    "$r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()"->"r11 = (java.lang.String) $r5";
    "r11 = (java.lang.String) $r5"->"$z2 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(r11)";
    "$z2 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(r11)"->"if $z2 == 0 goto (branch)";
    "if $z2 == 0 goto (branch)"->"return 1";
    "if $z2 == 0 goto (branch)"->"goto [?= $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()";
}
