digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r15 := @parameter0: java.lang.String[];
$r0 = staticinvoke <rx.Observable: rx.Observable range(int,int)>(1, 10000);
$r1 = new com.github.davidmoten.rx.internal.operators.TransformerOnBackpressureBufferRequestLimiting$3;
specialinvoke $r1.<com.github.davidmoten.rx.internal.operators.TransformerOnBackpressureBufferRequestLimiting$3: void <init>()>();
$r2 = virtualinvoke $r0.<rx.Observable: rx.Observable doOnRequest(rx.functions.Action1)>($r1);
$r3 = new com.github.davidmoten.rx.internal.operators.TransformerOnBackpressureBufferRequestLimiting$2;
specialinvoke $r3.<com.github.davidmoten.rx.internal.operators.TransformerOnBackpressureBufferRequestLimiting$2: void <init>()>();
$r4 = virtualinvoke $r2.<rx.Observable: rx.Observable doOnUnsubscribe(rx.functions.Action0)>($r3);
$r5 = staticinvoke <com.github.davidmoten.rx.Transformers: rx.Observable$Transformer onBackpressureBufferRequestLimiting()>();
$r6 = virtualinvoke $r4.<rx.Observable: rx.Observable compose(rx.Observable$Transformer)>($r5);
$r7 = virtualinvoke $r6.<rx.Observable: rx.Observable take(int)>(10);
$r8 = staticinvoke <rx.schedulers.Schedulers: rx.Scheduler io()>();
$r9 = virtualinvoke $r7.<rx.Observable: rx.Observable subscribeOn(rx.Scheduler)>($r8);
$r10 = staticinvoke <com.github.davidmoten.rx.Actions: rx.functions.Action1 println()>();
$r11 = virtualinvoke $r9.<rx.Observable: rx.Observable doOnNext(rx.functions.Action1)>($r10);
$r12 = virtualinvoke $r11.<rx.Observable: rx.Observable count()>();
$r13 = virtualinvoke $r12.<rx.Observable: rx.observables.BlockingObservable toBlocking()>();
virtualinvoke $r13.<rx.observables.BlockingObservable: java.lang.Object single()>();
staticinvoke <java.lang.Thread: void sleep(long)>(2000L);
return;
"
}
