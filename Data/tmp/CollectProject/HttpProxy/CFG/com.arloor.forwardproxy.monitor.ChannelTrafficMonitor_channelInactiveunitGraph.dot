digraph "unitGraph" {
    "r0 := @this: com.arloor.forwardproxy.monitor.ChannelTrafficMonitor"
    "r1 := @parameter0: io.netty.channel.ChannelHandlerContext"
    "specialinvoke r0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(r1)"
    "$r2 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"
    "$l0 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getReadBytes()>()"
    "$r3 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l0)"
    "interfaceinvoke $r2.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"in\", $r3)"
    "$r5 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"
    "$l1 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getWriteBytes()>()"
    "$r6 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l1)"
    "interfaceinvoke $r5.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"out\", $r6)"
    "$r8 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"
    "interfaceinvoke $r8.<io.opentelemetry.api.trace.Span: void end()>()"
    "return"
    "r0 := @this: com.arloor.forwardproxy.monitor.ChannelTrafficMonitor"->"r1 := @parameter0: io.netty.channel.ChannelHandlerContext";
    "r1 := @parameter0: io.netty.channel.ChannelHandlerContext"->"specialinvoke r0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(r1)";
    "specialinvoke r0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(r1)"->"$r2 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>";
    "$r2 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"->"$l0 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getReadBytes()>()";
    "$l0 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getReadBytes()>()"->"$r3 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l0)";
    "$r3 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l0)"->"interfaceinvoke $r2.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"in\", $r3)";
    "interfaceinvoke $r2.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"in\", $r3)"->"$r5 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>";
    "$r5 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"->"$l1 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getWriteBytes()>()";
    "$l1 = virtualinvoke r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: long getWriteBytes()>()"->"$r6 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l1)";
    "$r6 = staticinvoke <com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: java.lang.String format(long)>($l1)"->"interfaceinvoke $r5.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"out\", $r6)";
    "interfaceinvoke $r5.<io.opentelemetry.api.trace.Span: io.opentelemetry.api.trace.Span setAttribute(java.lang.String,java.lang.String)>(\"out\", $r6)"->"$r8 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>";
    "$r8 = r0.<com.arloor.forwardproxy.monitor.ChannelTrafficMonitor: io.opentelemetry.api.trace.Span streamSpan>"->"interfaceinvoke $r8.<io.opentelemetry.api.trace.Span: void end()>()";
    "interfaceinvoke $r8.<io.opentelemetry.api.trace.Span: void end()>()"->"return";
}
