digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "$r0 = new net.seninp.tinker.SamplerAnomalyParameters"
    "specialinvoke $r0.<net.seninp.tinker.SamplerAnomalyParameters: void <init>()>()"
    "r78 = $r0"
    "$r1 = new com.beust.jcommander.JCommander"
    "specialinvoke $r1.<com.beust.jcommander.JCommander: void <init>(java.lang.Object)>(r78)"
    "r2 = $r1"
    "$i0 = lengthof r3"
    "if 0 != $i0 goto virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void usage()>()"
    "goto [?= (branch)]"
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"
    "$r4 = new java.lang.StringBuffer"
    "specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(1024)"
    "r5 = $r4"
    "$r6 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"Sampler anomaly\")"
    "virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"parameters:\")"
    "virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r10 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  input file:                  \")"
    "$r11 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"
    "$r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)"
    "virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r14 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  output file:                 \")"
    "$r15 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"
    "$r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)"
    "virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r18 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX sliding window size:     \")"
    "$i1 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"
    "$r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1)"
    "virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r21 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX PAA size:                \")"
    "$i2 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"
    "$r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2)"
    "virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r24 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX alphabet size:           \")"
    "$i3 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3)"
    "virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r27 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX numerosity reduction:    \")"
    "$r28 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"
    "$r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28)"
    "virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "$r31 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX normalization threshold: \")"
    "$d0 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0)"
    "virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"
    "r34 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"
    "r35 = staticinvoke <net.seninp.jmotif.sax.TSProcessor: double[] readFileColumn(java.lang.String,int,int)>(r34, 0, 0)"
    "$r36 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"
    "specialinvoke $r36.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()"
    "r37 = $r36"
    "$i6 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"
    "$i5 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"
    "$i4 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"
    "$r38 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"
    "$d1 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"
    "r39 = virtualinvoke r37.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r35, 2, $i6, $i5, $i4, $r38, $d1)"
    "r40 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r39)"
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()"
    "$i7 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r39, r35, $i7)"
    "r41 = virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()"
    "$r42 = new java.util.ArrayList"
    "specialinvoke $r42.<java.util.ArrayList: void <init>()>()"
    "r43 = $r42"
    "r79 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"
    "$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()"
    "if $z4 == 0 goto $i8 = lengthof r35"
    "$r64 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>()"
    "r80 = (net.seninp.gi.logic.GrammarRuleRecord) $r64"
    "$i20 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "if 0 != $i20 goto $r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]"
    "$r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "r81 = virtualinvoke $r65.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 == 0 goto (branch)"
    "$r66 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>()"
    "r82 = (net.seninp.gi.logic.RuleInterval) $r66"
    "$r67 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "$i21 = virtualinvoke $r67.<java.util.ArrayList: int size()>()"
    "$d3 = (double) $i21"
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d3)"
    "$i22 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i22)"
    "virtualinvoke r43.<java.util.ArrayList: boolean add(java.lang.Object)>(r82)"
    "goto [?= $z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()]"
    "$i8 = lengthof r35"
    "r83 = newarray (int)[$i8]"
    "r84 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"
    "$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()"
    "if $z5 == 0 goto r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"
    "$r62 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"
    "r85 = (net.seninp.gi.logic.GrammarRuleRecord) $r62"
    "$i17 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "if 0 != $i17 goto r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]"
    "r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "r87 = virtualinvoke r86.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto (branch)"
    "$r63 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>()"
    "r88 = (net.seninp.gi.logic.RuleInterval) $r63"
    "i23 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getStart()>()"
    "i24 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getEnd()>()"
    "i25 = i23"
    "if i25 >= i24 goto (branch)"
    "$i18 = r83[i25]"
    "$i19 = $i18 + 1"
    "r83[i25] = $i19"
    "i25 = i25 + 1"
    "goto [?= $z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()]"
    "r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"
    "$i9 = interfaceinvoke r89.<java.util.List: int size()>()"
    "if $i9 <= 0 goto $r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"
    "$r54 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"
    "$r53 = new java.lang.StringBuilder"
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"
    "$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")"
    "$i16 = interfaceinvoke r89.<java.util.List: int size()>()"
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16)"
    "$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")"
    "$r58 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.lang.String intervalsToString(java.util.List)>(r89)"
    "$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)"
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke $r54.<org.slf4j.Logger: void info(java.lang.String)>($r60)"
    "$r61 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"
    "virtualinvoke r43.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r61)"
    "goto [?= $i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>]"
    "$r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"
    "interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries covered by rule intervals ...\")"
    "$i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>"
    "$d2 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"
    "r90 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r35, $i10, r43, $d2)"
    "$i11 = lengthof r35"
    "r91 = newarray (int)[$i11]"
    "i26 = 0"
    "$i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()"
    "if i26 >= $i27 goto $r45 = new java.io.BufferedWriter"
    "r92 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: net.seninp.jmotif.sax.discord.DiscordRecord get(int)>(i26)"
    "i28 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"
    "$i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"
    "$i13 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getLength()>()"
    "$i14 = $i12 + $i13"
    "if i28 >= $i14 goto i26 = i26 + 1"
    "$i15 = i26 + 1"
    "r91[i28] = $i15"
    "i28 = i28 + 1"
    "goto [?= $i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()]"
    "i26 = i26 + 1"
    "goto [?= $i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()]"
    "$r45 = new java.io.BufferedWriter"
    "$r46 = new java.io.FileWriter"
    "$r47 = new java.io.File"
    "$r48 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"
    "specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>($r48)"
    "specialinvoke $r46.<java.io.FileWriter: void <init>(java.io.File)>($r47)"
    "specialinvoke $r45.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r46)"
    "r93 = $r45"
    "r94 = r91"
    "i29 = lengthof r94"
    "i30 = 0"
    "if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()"
    "i31 = r94[i30]"
    "$r49 = new java.lang.StringBuilder"
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31)"
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r93.<java.io.BufferedWriter: void write(java.lang.String)>($r52)"
    "i30 = i30 + 1"
    "virtualinvoke r93.<java.io.BufferedWriter: void close()>()"
    "goto [?= return]"
    "$r68 := @caughtexception"
    "r95 = $r68"
    "$r70 = <java.lang.System: java.io.PrintStream err>"
    "$r69 = new java.lang.StringBuilder"
    "specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()"
    "$r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"error occured while parsing parameters \")"
    "$r72 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3)"
    "$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72)"
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r75 = staticinvoke <net.seninp.util.StackTrace: java.lang.String toString(java.lang.Throwable)>(r95)"
    "$r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75)"
    "$r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r77)"
    "staticinvoke <java.lang.System: void exit(int)>(-1)"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"$r0 = new net.seninp.tinker.SamplerAnomalyParameters";
    "r3 := @parameter0: java.lang.String[]"->"$r68 := @caughtexception";
    "$r0 = new net.seninp.tinker.SamplerAnomalyParameters"->"specialinvoke $r0.<net.seninp.tinker.SamplerAnomalyParameters: void <init>()>()";
    "$r0 = new net.seninp.tinker.SamplerAnomalyParameters"->"$r68 := @caughtexception";
    "specialinvoke $r0.<net.seninp.tinker.SamplerAnomalyParameters: void <init>()>()"->"r78 = $r0";
    "specialinvoke $r0.<net.seninp.tinker.SamplerAnomalyParameters: void <init>()>()"->"$r68 := @caughtexception";
    "r78 = $r0"->"$r1 = new com.beust.jcommander.JCommander";
    "r78 = $r0"->"$r68 := @caughtexception";
    "$r1 = new com.beust.jcommander.JCommander"->"specialinvoke $r1.<com.beust.jcommander.JCommander: void <init>(java.lang.Object)>(r78)";
    "$r1 = new com.beust.jcommander.JCommander"->"$r68 := @caughtexception";
    "specialinvoke $r1.<com.beust.jcommander.JCommander: void <init>(java.lang.Object)>(r78)"->"r2 = $r1";
    "specialinvoke $r1.<com.beust.jcommander.JCommander: void <init>(java.lang.Object)>(r78)"->"$r68 := @caughtexception";
    "r2 = $r1"->"$i0 = lengthof r3";
    "r2 = $r1"->"$r68 := @caughtexception";
    "$i0 = lengthof r3"->"if 0 != $i0 goto virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)";
    "$i0 = lengthof r3"->"$r68 := @caughtexception";
    "if 0 != $i0 goto virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"->"virtualinvoke r2.<com.beust.jcommander.JCommander: void usage()>()";
    "if 0 != $i0 goto virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"->"virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)";
    "if 0 != $i0 goto virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"->"$r68 := @caughtexception";
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void usage()>()"->"goto [?= (branch)]";
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void usage()>()"->"$r68 := @caughtexception";
    "goto [?= (branch)]"->"goto [?= return]";
    "goto [?= (branch)]"->"$r68 := @caughtexception";
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"->"$r4 = new java.lang.StringBuffer";
    "virtualinvoke r2.<com.beust.jcommander.JCommander: void parse(java.lang.String[])>(r3)"->"$r68 := @caughtexception";
    "$r4 = new java.lang.StringBuffer"->"specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(1024)";
    "$r4 = new java.lang.StringBuffer"->"$r68 := @caughtexception";
    "specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(1024)"->"r5 = $r4";
    "specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(1024)"->"$r68 := @caughtexception";
    "r5 = $r4"->"$r6 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"Sampler anomaly\")";
    "r5 = $r4"->"$r68 := @caughtexception";
    "$r6 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"Sampler anomaly\")"->"virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r6 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"Sampler anomaly\")"->"$r68 := @caughtexception";
    "virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"parameters:\")";
    "virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"parameters:\")"->"virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"parameters:\")"->"$r68 := @caughtexception";
    "virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r10 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  input file:                  \")";
    "virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r10 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  input file:                  \")"->"$r11 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>";
    "$r10 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  input file:                  \")"->"$r68 := @caughtexception";
    "$r11 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"->"$r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)";
    "$r11 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"->"$r68 := @caughtexception";
    "$r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)"->"virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)"->"$r68 := @caughtexception";
    "virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r14 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  output file:                 \")";
    "virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r14 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  output file:                 \")"->"$r15 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>";
    "$r14 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  output file:                 \")"->"$r68 := @caughtexception";
    "$r15 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"->"$r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)";
    "$r15 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"->"$r68 := @caughtexception";
    "$r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)"->"virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15)"->"$r68 := @caughtexception";
    "virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r18 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX sliding window size:     \")";
    "virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r18 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX sliding window size:     \")"->"$i1 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>";
    "$r18 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX sliding window size:     \")"->"$r68 := @caughtexception";
    "$i1 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"$r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1)";
    "$i1 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"$r68 := @caughtexception";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1)"->"virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1)"->"$r68 := @caughtexception";
    "virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r21 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX PAA size:                \")";
    "virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r21 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX PAA size:                \")"->"$i2 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>";
    "$r21 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX PAA size:                \")"->"$r68 := @caughtexception";
    "$i2 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"->"$r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2)";
    "$i2 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"->"$r68 := @caughtexception";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2)"->"virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2)"->"$r68 := @caughtexception";
    "virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r24 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX alphabet size:           \")";
    "virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r24 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX alphabet size:           \")"->"$i3 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>";
    "$r24 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX alphabet size:           \")"->"$r68 := @caughtexception";
    "$i3 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"->"$r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3)";
    "$i3 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"->"$r68 := @caughtexception";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3)"->"virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3)"->"$r68 := @caughtexception";
    "virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r27 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX numerosity reduction:    \")";
    "virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r27 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX numerosity reduction:    \")"->"$r28 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>";
    "$r27 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX numerosity reduction:    \")"->"$r68 := @caughtexception";
    "$r28 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"->"$r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28)";
    "$r28 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"->"$r68 := @caughtexception";
    "$r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28)"->"virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28)"->"$r68 := @caughtexception";
    "virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r31 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX normalization threshold: \")";
    "virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r31 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX normalization threshold: \")"->"$d0 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>";
    "$r31 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"  SAX normalization threshold: \")"->"$r68 := @caughtexception";
    "$d0 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"$r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0)";
    "$d0 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"$r68 := @caughtexception";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0)"->"virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0)"->"$r68 := @caughtexception";
    "virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"r34 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>";
    "virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "r34 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"->"r35 = staticinvoke <net.seninp.jmotif.sax.TSProcessor: double[] readFileColumn(java.lang.String,int,int)>(r34, 0, 0)";
    "r34 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String IN_FILE>"->"$r68 := @caughtexception";
    "r35 = staticinvoke <net.seninp.jmotif.sax.TSProcessor: double[] readFileColumn(java.lang.String,int,int)>(r34, 0, 0)"->"$r36 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation";
    "r35 = staticinvoke <net.seninp.jmotif.sax.TSProcessor: double[] readFileColumn(java.lang.String,int,int)>(r34, 0, 0)"->"$r68 := @caughtexception";
    "$r36 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"->"specialinvoke $r36.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()";
    "$r36 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"->"$r68 := @caughtexception";
    "specialinvoke $r36.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()"->"r37 = $r36";
    "specialinvoke $r36.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()"->"$r68 := @caughtexception";
    "r37 = $r36"->"$i6 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>";
    "r37 = $r36"->"$r68 := @caughtexception";
    "$i6 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"$i5 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>";
    "$i6 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"$r68 := @caughtexception";
    "$i5 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"->"$i4 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>";
    "$i5 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_PAA_SIZE>"->"$r68 := @caughtexception";
    "$i4 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"->"$r38 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>";
    "$i4 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_ALPHABET_SIZE>"->"$r68 := @caughtexception";
    "$r38 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"->"$d1 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>";
    "$r38 = <net.seninp.tinker.SamplerAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"->"$r68 := @caughtexception";
    "$d1 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"r39 = virtualinvoke r37.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r35, 2, $i6, $i5, $i4, $r38, $d1)";
    "$d1 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"$r68 := @caughtexception";
    "r39 = virtualinvoke r37.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r35, 2, $i6, $i5, $i4, $r38, $d1)"->"r40 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r39)";
    "r39 = virtualinvoke r37.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r35, 2, $i6, $i5, $i4, $r38, $d1)"->"$r68 := @caughtexception";
    "r40 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r39)"->"virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()";
    "r40 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r39)"->"$r68 := @caughtexception";
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()"->"$i7 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>";
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()"->"$r68 := @caughtexception";
    "$i7 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r39, r35, $i7)";
    "$i7 = <net.seninp.tinker.SamplerAnomalyParameters: int SAX_WINDOW_SIZE>"->"$r68 := @caughtexception";
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r39, r35, $i7)"->"r41 = virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()";
    "virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r39, r35, $i7)"->"$r68 := @caughtexception";
    "r41 = virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()"->"$r42 = new java.util.ArrayList";
    "r41 = virtualinvoke r40.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()"->"$r68 := @caughtexception";
    "$r42 = new java.util.ArrayList"->"specialinvoke $r42.<java.util.ArrayList: void <init>()>()";
    "$r42 = new java.util.ArrayList"->"$r68 := @caughtexception";
    "specialinvoke $r42.<java.util.ArrayList: void <init>()>()"->"r43 = $r42";
    "specialinvoke $r42.<java.util.ArrayList: void <init>()>()"->"$r68 := @caughtexception";
    "r43 = $r42"->"r79 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()";
    "r43 = $r42"->"$r68 := @caughtexception";
    "r79 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()";
    "r79 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$r68 := @caughtexception";
    "$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()"->"if $z4 == 0 goto $i8 = lengthof r35";
    "$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()"->"$r68 := @caughtexception";
    "if $z4 == 0 goto $i8 = lengthof r35"->"$r64 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>()";
    "if $z4 == 0 goto $i8 = lengthof r35"->"$i8 = lengthof r35";
    "if $z4 == 0 goto $i8 = lengthof r35"->"$r68 := @caughtexception";
    "$r64 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>()"->"r80 = (net.seninp.gi.logic.GrammarRuleRecord) $r64";
    "$r64 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>()"->"$r68 := @caughtexception";
    "r80 = (net.seninp.gi.logic.GrammarRuleRecord) $r64"->"$i20 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "r80 = (net.seninp.gi.logic.GrammarRuleRecord) $r64"->"$r68 := @caughtexception";
    "$i20 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"if 0 != $i20 goto $r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "$i20 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"$r68 := @caughtexception";
    "if 0 != $i20 goto $r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]";
    "if 0 != $i20 goto $r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "if 0 != $i20 goto $r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r68 := @caughtexception";
    "goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]"->"$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "$r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r81 = virtualinvoke $r65.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "$r65 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r68 := @caughtexception";
    "r81 = virtualinvoke $r65.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()";
    "r81 = virtualinvoke $r65.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$r68 := @caughtexception";
    "$z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()"->"if $z2 == 0 goto (branch)";
    "$z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()"->"$r68 := @caughtexception";
    "if $z2 == 0 goto (branch)"->"$r66 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 == 0 goto (branch)"->"goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]";
    "if $z2 == 0 goto (branch)"->"$r68 := @caughtexception";
    "$r66 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>()"->"r82 = (net.seninp.gi.logic.RuleInterval) $r66";
    "$r66 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>()"->"$r68 := @caughtexception";
    "r82 = (net.seninp.gi.logic.RuleInterval) $r66"->"$r67 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "r82 = (net.seninp.gi.logic.RuleInterval) $r66"->"$r68 := @caughtexception";
    "$r67 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$i21 = virtualinvoke $r67.<java.util.ArrayList: int size()>()";
    "$r67 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r68 := @caughtexception";
    "$i21 = virtualinvoke $r67.<java.util.ArrayList: int size()>()"->"$d3 = (double) $i21";
    "$i21 = virtualinvoke $r67.<java.util.ArrayList: int size()>()"->"$r68 := @caughtexception";
    "$d3 = (double) $i21"->"virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d3)";
    "$d3 = (double) $i21"->"$r68 := @caughtexception";
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d3)"->"$i22 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d3)"->"$r68 := @caughtexception";
    "$i22 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i22)";
    "$i22 = virtualinvoke r80.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"$r68 := @caughtexception";
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i22)"->"virtualinvoke r43.<java.util.ArrayList: boolean add(java.lang.Object)>(r82)";
    "virtualinvoke r82.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i22)"->"$r68 := @caughtexception";
    "virtualinvoke r43.<java.util.ArrayList: boolean add(java.lang.Object)>(r82)"->"goto [?= $z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()]";
    "virtualinvoke r43.<java.util.ArrayList: boolean add(java.lang.Object)>(r82)"->"$r68 := @caughtexception";
    "goto [?= $z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]"->"$z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z4 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "$i8 = lengthof r35"->"r83 = newarray (int)[$i8]";
    "$i8 = lengthof r35"->"$r68 := @caughtexception";
    "r83 = newarray (int)[$i8]"->"r84 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()";
    "r83 = newarray (int)[$i8]"->"$r68 := @caughtexception";
    "r84 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()";
    "r84 = virtualinvoke r41.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$r68 := @caughtexception";
    "$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()"->"if $z5 == 0 goto r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)";
    "$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()"->"$r68 := @caughtexception";
    "if $z5 == 0 goto r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"$r62 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()";
    "if $z5 == 0 goto r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)";
    "if $z5 == 0 goto r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"$r68 := @caughtexception";
    "$r62 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"r85 = (net.seninp.gi.logic.GrammarRuleRecord) $r62";
    "$r62 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"$r68 := @caughtexception";
    "r85 = (net.seninp.gi.logic.GrammarRuleRecord) $r62"->"$i17 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "r85 = (net.seninp.gi.logic.GrammarRuleRecord) $r62"->"$r68 := @caughtexception";
    "$i17 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"if 0 != $i17 goto r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "$i17 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"$r68 := @caughtexception";
    "if 0 != $i17 goto r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]";
    "if 0 != $i17 goto r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "if 0 != $i17 goto r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r68 := @caughtexception";
    "goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r87 = virtualinvoke r86.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r86 = virtualinvoke r85.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r68 := @caughtexception";
    "r87 = virtualinvoke r86.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()";
    "r87 = virtualinvoke r86.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$r68 := @caughtexception";
    "$z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto (branch)";
    "$z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()"->"$r68 := @caughtexception";
    "if $z1 == 0 goto (branch)"->"$r63 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 == 0 goto (branch)"->"goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]";
    "if $z1 == 0 goto (branch)"->"$r68 := @caughtexception";
    "$r63 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>()"->"r88 = (net.seninp.gi.logic.RuleInterval) $r63";
    "$r63 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>()"->"$r68 := @caughtexception";
    "r88 = (net.seninp.gi.logic.RuleInterval) $r63"->"i23 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getStart()>()";
    "r88 = (net.seninp.gi.logic.RuleInterval) $r63"->"$r68 := @caughtexception";
    "i23 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getStart()>()"->"i24 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getEnd()>()";
    "i23 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getStart()>()"->"$r68 := @caughtexception";
    "i24 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getEnd()>()"->"i25 = i23";
    "i24 = virtualinvoke r88.<net.seninp.gi.logic.RuleInterval: int getEnd()>()"->"$r68 := @caughtexception";
    "i25 = i23"->"if i25 >= i24 goto (branch)";
    "i25 = i23"->"$r68 := @caughtexception";
    "if i25 >= i24 goto (branch)"->"$i18 = r83[i25]";
    "if i25 >= i24 goto (branch)"->"goto [?= $z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()]";
    "if i25 >= i24 goto (branch)"->"$r68 := @caughtexception";
    "$i18 = r83[i25]"->"$i19 = $i18 + 1";
    "$i18 = r83[i25]"->"$r68 := @caughtexception";
    "$i19 = $i18 + 1"->"r83[i25] = $i19";
    "$i19 = $i18 + 1"->"$r68 := @caughtexception";
    "r83[i25] = $i19"->"i25 = i25 + 1";
    "r83[i25] = $i19"->"$r68 := @caughtexception";
    "i25 = i25 + 1"->"goto [?= (branch)]";
    "i25 = i25 + 1"->"$r68 := @caughtexception";
    "goto [?= (branch)]"->"if i25 >= i24 goto (branch)";
    "goto [?= (branch)]"->"$r68 := @caughtexception";
    "goto [?= $z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z5 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>()]"->"$r68 := @caughtexception";
    "r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"$i9 = interfaceinvoke r89.<java.util.List: int size()>()";
    "r89 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"$r68 := @caughtexception";
    "$i9 = interfaceinvoke r89.<java.util.List: int size()>()"->"if $i9 <= 0 goto $r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>";
    "$i9 = interfaceinvoke r89.<java.util.List: int size()>()"->"$r68 := @caughtexception";
    "if $i9 <= 0 goto $r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r54 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>";
    "if $i9 <= 0 goto $r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>";
    "if $i9 <= 0 goto $r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r68 := @caughtexception";
    "$r54 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r53 = new java.lang.StringBuilder";
    "$r54 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r68 := @caughtexception";
    "$r53 = new java.lang.StringBuilder"->"specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()";
    "$r53 = new java.lang.StringBuilder"->"$r68 := @caughtexception";
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"->"$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")";
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"->"$r68 := @caughtexception";
    "$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")"->"$i16 = interfaceinvoke r89.<java.util.List: int size()>()";
    "$r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")"->"$r68 := @caughtexception";
    "$i16 = interfaceinvoke r89.<java.util.List: int size()>()"->"$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16)";
    "$i16 = interfaceinvoke r89.<java.util.List: int size()>()"->"$r68 := @caughtexception";
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16)"->"$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")";
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16)"->"$r68 := @caughtexception";
    "$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")"->"$r58 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.lang.String intervalsToString(java.util.List)>(r89)";
    "$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")"->"$r68 := @caughtexception";
    "$r58 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.lang.String intervalsToString(java.util.List)>(r89)"->"$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)";
    "$r58 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.lang.String intervalsToString(java.util.List)>(r89)"->"$r68 := @caughtexception";
    "$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)"->"$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)"->"$r68 := @caughtexception";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke $r54.<org.slf4j.Logger: void info(java.lang.String)>($r60)";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r68 := @caughtexception";
    "interfaceinvoke $r54.<org.slf4j.Logger: void info(java.lang.String)>($r60)"->"$r61 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)";
    "interfaceinvoke $r54.<org.slf4j.Logger: void info(java.lang.String)>($r60)"->"$r68 := @caughtexception";
    "$r61 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"virtualinvoke r43.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r61)";
    "$r61 = staticinvoke <net.seninp.tinker.SamplerAnomaly: java.util.List getZeroIntervals(int[])>(r83)"->"$r68 := @caughtexception";
    "virtualinvoke r43.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r61)"->"goto [?= $i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>]";
    "virtualinvoke r43.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r61)"->"$r68 := @caughtexception";
    "goto [?= $i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>]"->"$i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>";
    "goto [?= $i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>]"->"$r68 := @caughtexception";
    "$r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries covered by rule intervals ...\")";
    "$r44 = <net.seninp.tinker.SamplerAnomaly: org.slf4j.Logger LOGGER>"->"$r68 := @caughtexception";
    "interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries covered by rule intervals ...\")"->"$i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>";
    "interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries covered by rule intervals ...\")"->"$r68 := @caughtexception";
    "$i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>"->"$d2 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>";
    "$i10 = <net.seninp.tinker.SamplerAnomalyParameters: int DISCORDS_NUM>"->"$r68 := @caughtexception";
    "$d2 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"r90 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r35, $i10, r43, $d2)";
    "$d2 = <net.seninp.tinker.SamplerAnomalyParameters: double SAX_NORM_THRESHOLD>"->"$r68 := @caughtexception";
    "r90 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r35, $i10, r43, $d2)"->"$i11 = lengthof r35";
    "r90 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r35, $i10, r43, $d2)"->"$r68 := @caughtexception";
    "$i11 = lengthof r35"->"r91 = newarray (int)[$i11]";
    "$i11 = lengthof r35"->"$r68 := @caughtexception";
    "r91 = newarray (int)[$i11]"->"i26 = 0";
    "r91 = newarray (int)[$i11]"->"$r68 := @caughtexception";
    "i26 = 0"->"$i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()";
    "i26 = 0"->"$r68 := @caughtexception";
    "$i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()"->"if i26 >= $i27 goto $r45 = new java.io.BufferedWriter";
    "$i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()"->"$r68 := @caughtexception";
    "if i26 >= $i27 goto $r45 = new java.io.BufferedWriter"->"r92 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: net.seninp.jmotif.sax.discord.DiscordRecord get(int)>(i26)";
    "if i26 >= $i27 goto $r45 = new java.io.BufferedWriter"->"$r45 = new java.io.BufferedWriter";
    "if i26 >= $i27 goto $r45 = new java.io.BufferedWriter"->"$r68 := @caughtexception";
    "r92 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: net.seninp.jmotif.sax.discord.DiscordRecord get(int)>(i26)"->"i28 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()";
    "r92 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: net.seninp.jmotif.sax.discord.DiscordRecord get(int)>(i26)"->"$r68 := @caughtexception";
    "i28 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"->"$i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()";
    "i28 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"->"$r68 := @caughtexception";
    "$i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"->"$i13 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getLength()>()";
    "$i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()"->"$r68 := @caughtexception";
    "$i13 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getLength()>()"->"$i14 = $i12 + $i13";
    "$i13 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getLength()>()"->"$r68 := @caughtexception";
    "$i14 = $i12 + $i13"->"if i28 >= $i14 goto i26 = i26 + 1";
    "$i14 = $i12 + $i13"->"$r68 := @caughtexception";
    "if i28 >= $i14 goto i26 = i26 + 1"->"$i15 = i26 + 1";
    "if i28 >= $i14 goto i26 = i26 + 1"->"i26 = i26 + 1";
    "if i28 >= $i14 goto i26 = i26 + 1"->"$r68 := @caughtexception";
    "$i15 = i26 + 1"->"r91[i28] = $i15";
    "$i15 = i26 + 1"->"$r68 := @caughtexception";
    "r91[i28] = $i15"->"i28 = i28 + 1";
    "r91[i28] = $i15"->"$r68 := @caughtexception";
    "i28 = i28 + 1"->"goto [?= $i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()]";
    "i28 = i28 + 1"->"$r68 := @caughtexception";
    "goto [?= $i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()]"->"$i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()";
    "goto [?= $i12 = virtualinvoke r92.<net.seninp.jmotif.sax.discord.DiscordRecord: int getPosition()>()]"->"$r68 := @caughtexception";
    "i26 = i26 + 1"->"goto [?= $i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()]";
    "i26 = i26 + 1"->"$r68 := @caughtexception";
    "goto [?= $i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()]"->"$i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()";
    "goto [?= $i27 = virtualinvoke r90.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()]"->"$r68 := @caughtexception";
    "$r45 = new java.io.BufferedWriter"->"$r46 = new java.io.FileWriter";
    "$r45 = new java.io.BufferedWriter"->"$r68 := @caughtexception";
    "$r46 = new java.io.FileWriter"->"$r47 = new java.io.File";
    "$r46 = new java.io.FileWriter"->"$r68 := @caughtexception";
    "$r47 = new java.io.File"->"$r48 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>";
    "$r47 = new java.io.File"->"$r68 := @caughtexception";
    "$r48 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"->"specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>($r48)";
    "$r48 = <net.seninp.tinker.SamplerAnomalyParameters: java.lang.String OUT_FILE>"->"$r68 := @caughtexception";
    "specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>($r48)"->"specialinvoke $r46.<java.io.FileWriter: void <init>(java.io.File)>($r47)";
    "specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>($r48)"->"$r68 := @caughtexception";
    "specialinvoke $r46.<java.io.FileWriter: void <init>(java.io.File)>($r47)"->"specialinvoke $r45.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r46)";
    "specialinvoke $r46.<java.io.FileWriter: void <init>(java.io.File)>($r47)"->"$r68 := @caughtexception";
    "specialinvoke $r45.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r46)"->"r93 = $r45";
    "specialinvoke $r45.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r46)"->"$r68 := @caughtexception";
    "r93 = $r45"->"r94 = r91";
    "r93 = $r45"->"$r68 := @caughtexception";
    "r94 = r91"->"i29 = lengthof r94";
    "r94 = r91"->"$r68 := @caughtexception";
    "i29 = lengthof r94"->"i30 = 0";
    "i29 = lengthof r94"->"$r68 := @caughtexception";
    "i30 = 0"->"if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()";
    "i30 = 0"->"$r68 := @caughtexception";
    "if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()"->"i31 = r94[i30]";
    "if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()"->"virtualinvoke r93.<java.io.BufferedWriter: void close()>()";
    "if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()"->"$r68 := @caughtexception";
    "i31 = r94[i30]"->"$r49 = new java.lang.StringBuilder";
    "i31 = r94[i30]"->"$r68 := @caughtexception";
    "$r49 = new java.lang.StringBuilder"->"specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()";
    "$r49 = new java.lang.StringBuilder"->"$r68 := @caughtexception";
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"->"$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31)";
    "specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()"->"$r68 := @caughtexception";
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31)"->"$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31)"->"$r68 := @caughtexception";
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r68 := @caughtexception";
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r93.<java.io.BufferedWriter: void write(java.lang.String)>($r52)";
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r68 := @caughtexception";
    "virtualinvoke r93.<java.io.BufferedWriter: void write(java.lang.String)>($r52)"->"i30 = i30 + 1";
    "virtualinvoke r93.<java.io.BufferedWriter: void write(java.lang.String)>($r52)"->"$r68 := @caughtexception";
    "i30 = i30 + 1"->"goto [?= (branch)]";
    "i30 = i30 + 1"->"$r68 := @caughtexception";
    "goto [?= (branch)]"->"if i30 >= i29 goto virtualinvoke r93.<java.io.BufferedWriter: void close()>()";
    "goto [?= (branch)]"->"$r68 := @caughtexception";
    "virtualinvoke r93.<java.io.BufferedWriter: void close()>()"->"goto [?= return]";
    "virtualinvoke r93.<java.io.BufferedWriter: void close()>()"->"$r68 := @caughtexception";
    "goto [?= return]"->"return";
    "$r68 := @caughtexception"->"r95 = $r68";
    "r95 = $r68"->"$r70 = <java.lang.System: java.io.PrintStream err>";
    "$r70 = <java.lang.System: java.io.PrintStream err>"->"$r69 = new java.lang.StringBuilder";
    "$r69 = new java.lang.StringBuilder"->"specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r69.<java.lang.StringBuilder: void <init>()>()"->"$r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"error occured while parsing parameters \")";
    "$r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"error occured while parsing parameters \")"->"$r72 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3)";
    "$r72 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r3)"->"$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72)";
    "$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72)"->"$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r75 = staticinvoke <net.seninp.util.StackTrace: java.lang.String toString(java.lang.Throwable)>(r95)";
    "$r75 = staticinvoke <net.seninp.util.StackTrace: java.lang.String toString(java.lang.Throwable)>(r95)"->"$r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75)";
    "$r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75)"->"$r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r77)";
    "virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r77)"->"staticinvoke <java.lang.System: void exit(int)>(-1)";
    "staticinvoke <java.lang.System: void exit(int)>(-1)"->"return";
}
