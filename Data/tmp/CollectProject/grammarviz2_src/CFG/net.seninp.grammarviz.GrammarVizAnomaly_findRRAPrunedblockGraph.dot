digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: double[];
i0 := @parameter1: int;
i1 := @parameter2: int;
i2 := @parameter3: int;
r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy;
i11 := @parameter5: int;
r3 := @parameter6: net.seninp.gi.GIAlgorithm;
r40 := @parameter7: java.lang.String;
d0 := @parameter8: double;
$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with pruning algorithm, building the grammar ...\");
$r1 = new java.util.Date;
specialinvoke $r1.<java.util.Date: void <init>()>();
r2 = $r1;
$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>;
$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3);
if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
r95 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0);
goto [?= $r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>();
r96 = $r5;
r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0);
r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97);
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>();
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0);
r95 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>();
"
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$i3 = virtualinvoke r95.<net.seninp.gi.logic.GrammarRules: int size()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules inferred in \");
$l4 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r12 = new java.util.Date;
specialinvoke $r12.<java.util.Date: void <init>()>();
$l5 = virtualinvoke $r12.<java.util.Date: long getTime()>();
$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", pruning ...\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r16);
r99 = staticinvoke <net.seninp.gi.rulepruner.RulePrunerFactory: net.seninp.gi.logic.GrammarRules performPruning(double[],net.seninp.gi.logic.GrammarRules)>(r6, r95);
$r18 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"finished pruning in \");
$l6 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r20 = new java.util.Date;
specialinvoke $r20.<java.util.Date: void <init>()>();
$l7 = virtualinvoke $r20.<java.util.Date: long getTime()>();
$r21 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l6, $l7);
$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", keeping \");
$i8 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: int size()>();
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules for anomaly discovery ...\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r26);
$r27 = new java.util.ArrayList;
specialinvoke $r27.<java.util.ArrayList: void <init>()>();
r100 = $r27;
r101 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
"
    "Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r91 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>();
r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r91;
$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i34 goto $r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"
    "Block 6:
[preds: 5 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 7:
[preds: 5 ] [succs: 8 ]
$r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r103 = virtualinvoke $r92.<java.util.ArrayList: java.util.Iterator iterator()>();
"
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();
if $z5 == 0 goto (branch);
"
    "Block 9:
[preds: 8 ] [succs: 8 ]
$r93 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();
r104 = (net.seninp.gi.logic.RuleInterval) $r93;
$r94 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
$i35 = virtualinvoke $r94.<java.util.ArrayList: int size()>();
$d5 = (double) $i35;
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5);
$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36);
virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r104);
goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 10:
[preds: 8 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 11:
[preds: 4 ] [succs: 12 ]
$i9 = lengthof r6;
r105 = newarray (int)[$i9];
r106 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
"
    "Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r89 = interfaceinvoke r106.<java.util.Iterator: java.lang.Object next()>();
r107 = (net.seninp.gi.logic.GrammarRuleRecord) $r89;
$i31 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i31 goto r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"
    "Block 14:
[preds: 13 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 15:
[preds: 13 ] [succs: 16 ]
r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r109 = virtualinvoke r108.<java.util.ArrayList: java.util.Iterator iterator()>();
"
    "Block 16:
[preds: 15 20 ] [succs: 17 21 ]
$z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"
    "Block 17:
[preds: 16 ] [succs: 18 ]
$r90 = interfaceinvoke r109.<java.util.Iterator: java.lang.Object next()>();
r110 = (net.seninp.gi.logic.RuleInterval) $r90;
i37 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getStart()>();
i38 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getEnd()>();
i39 = i37;
"
    "Block 18:
[preds: 17 19 ] [succs: 19 20 ]
if i39 >= i38 goto (branch);
"
    "Block 19:
[preds: 18 ] [succs: 18 ]
$i32 = r105[i39];
$i33 = $i32 + 1;
r105[i39] = $i33;
i39 = i39 + 1;
goto [?= (branch)];
"
    "Block 20:
[preds: 18 ] [succs: 16 ]
goto [?= $z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 21:
[preds: 16 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 22:
[preds: 12 ] [succs: 23 24 ]
r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
$i10 = interfaceinvoke r111.<java.util.List: int size()>();
if $i10 <= 0 goto $r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
"
    "Block 23:
[preds: 22 ] [succs: 25 ]
$r82 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \");
$i30 = interfaceinvoke r111.<java.util.List: int size()>();
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);
$r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \");
$r86 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r111);
$r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);
$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r82.<org.slf4j.Logger: void info(java.lang.String)>($r88);
virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r111);
goto [?= r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0)];
"
    "Block 24:
[preds: 22 ] [succs: 25 ]
$r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\");
"
    "Block 25:
[preds: 23 24 ] [succs: 26 42 ]
r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0);
$r29 = new java.util.Date;
specialinvoke $r29.<java.util.Date: void <init>()>();
r113 = $r29;
$r31 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke r112.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>();
$r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Discords found in \");
$l12 = virtualinvoke r2.<java.util.Date: long getTime()>();
$l13 = virtualinvoke r113.<java.util.Date: long getTime()>();
$r36 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13);
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r39);
$z1 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();
if $z1 != 0 goto return;
"
    "Block 26:
[preds: 25 ] [succs: 27 ]
$r41 = new java.io.File;
specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>(\".\");
r114 = virtualinvoke $r41.<java.io.File: java.lang.String getCanonicalPath()>();
$r42 = new java.io.BufferedWriter;
$r43 = new java.io.FileWriter;
$r44 = new java.io.File;
$r45 = new java.lang.StringBuilder;
specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();
$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r47 = <java.io.File: java.lang.String separator>;
$r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);
$r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\");
$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>($r51);
specialinvoke $r43.<java.io.FileWriter: void <init>(java.io.File)>($r44);
specialinvoke $r42.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r43);
r115 = $r42;
r116 = r105;
i40 = lengthof r116;
i41 = 0;
"
    "Block 27:
[preds: 26 28 ] [succs: 28 29 ]
if i41 >= i40 goto virtualinvoke r115.<java.io.BufferedWriter: void close()>();
"
    "Block 28:
[preds: 27 ] [succs: 27 ]
i42 = r116[i41];
$r77 = new java.lang.StringBuilder;
specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();
$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);
$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r115.<java.io.BufferedWriter: void write(java.lang.String)>($r80);
i41 = i41 + 1;
goto [?= (branch)];
"
    "Block 29:
[preds: 27 ] [succs: 30 ]
virtualinvoke r115.<java.io.BufferedWriter: void close()>();
$r52 = new net.seninp.grammarviz.GrammarVizAnomaly$1;
specialinvoke $r52.<net.seninp.grammarviz.GrammarVizAnomaly$1: void <init>()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r52);
$i14 = lengthof r6;
r117 = newarray (double)[$i14];
$i15 = lengthof r6;
r118 = newarray (double)[$i15];
r119 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>();
"
    "Block 30:
[preds: 29 37 ] [succs: 31 38 ]
$z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto $r53 = new java.io.BufferedWriter;
"
    "Block 31:
[preds: 30 ] [succs: 32 ]
$r71 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();
r120 = (net.seninp.gi.logic.RuleInterval) $r71;
i17 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getStart()>();
$i18 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
i19 = i17 + $i18;
i20 = i19 - i17;
$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i21 = i17 + i20;
r73 = virtualinvoke $r72.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21);
d6 = 1.7976931348623157E308;
i43 = 0;
"
    "Block 32:
[preds: 31 36 ] [succs: 33 37 ]
$i22 = lengthof r6;
$i23 = $i22 - i20;
$i24 = $i23 - 1;
if i43 >= $i24 goto r117[i17] = d6;
"
    "Block 33:
[preds: 32 ] [succs: 34 36 ]
$i26 = i17 - i43;
$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26);
if $i27 <= i20 goto i43 = i43 + 1;
"
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r74 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i28 = i43 + i20;
r75 = virtualinvoke $r74.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i43, $i28);
$r76 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>;
d4 = virtualinvoke $r76.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r73, r75);
$b29 = d4 cmpg d6;
if $b29 >= 0 goto i43 = i43 + 1;
"
    "Block 35:
[preds: 34 ] [succs: 36 ]
d6 = d4;
"
    "Block 36:
[preds: 33 34 35 ] [succs: 32 ]
i43 = i43 + 1;
goto [?= $i22 = lengthof r6];
"
    "Block 37:
[preds: 32 ] [succs: 30 ]
r117[i17] = d6;
$i25 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
$d3 = (double) $i25;
r118[i17] = $d3;
goto [?= $z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 38:
[preds: 30 ] [succs: 39 ]
$r53 = new java.io.BufferedWriter;
$r54 = new java.io.FileWriter;
$r55 = new java.io.File;
$r56 = new java.lang.StringBuilder;
specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r58 = <java.io.File: java.lang.String separator>;
$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);
$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\");
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>($r62);
specialinvoke $r54.<java.io.FileWriter: void <init>(java.io.File)>($r55);
specialinvoke $r53.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r54);
r121 = $r53;
i44 = 0;
"
    "Block 39:
[preds: 38 40 ] [succs: 40 41 ]
$i16 = lengthof r117;
if i44 >= $i16 goto virtualinvoke r121.<java.io.BufferedWriter: void close()>();
"
    "Block 40:
[preds: 39 ] [succs: 39 ]
$r63 = new java.lang.StringBuilder;
specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();
$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i44);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d1 = r117[i44];
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);
$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d2 = r118[i44];
$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);
$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r121.<java.io.BufferedWriter: void write(java.lang.String)>($r70);
i44 = i44 + 1;
goto [?= $i16 = lengthof r117];
"
    "Block 41:
[preds: 39 ] [succs: 42 ]
virtualinvoke r121.<java.io.BufferedWriter: void close()>();
"
    "Block 42:
[preds: 25 41 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: double[];
i0 := @parameter1: int;
i1 := @parameter2: int;
i2 := @parameter3: int;
r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy;
i11 := @parameter5: int;
r3 := @parameter6: net.seninp.gi.GIAlgorithm;
r40 := @parameter7: java.lang.String;
d0 := @parameter8: double;
$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with pruning algorithm, building the grammar ...\");
$r1 = new java.util.Date;
specialinvoke $r1.<java.util.Date: void <init>()>();
r2 = $r1;
$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>;
$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3);
if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
r95 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0);
goto [?= $r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r6 := @parameter0: double[];
i0 := @parameter1: int;
i1 := @parameter2: int;
i2 := @parameter3: int;
r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy;
i11 := @parameter5: int;
r3 := @parameter6: net.seninp.gi.GIAlgorithm;
r40 := @parameter7: java.lang.String;
d0 := @parameter8: double;
$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with pruning algorithm, building the grammar ...\");
$r1 = new java.util.Date;
specialinvoke $r1.<java.util.Date: void <init>()>();
r2 = $r1;
$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>;
$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3);
if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>();
r96 = $r5;
r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0);
r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97);
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>();
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0);
r95 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>();
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
r95 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0);
goto [?= $r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>];
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$i3 = virtualinvoke r95.<net.seninp.gi.logic.GrammarRules: int size()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules inferred in \");
$l4 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r12 = new java.util.Date;
specialinvoke $r12.<java.util.Date: void <init>()>();
$l5 = virtualinvoke $r12.<java.util.Date: long getTime()>();
$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", pruning ...\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r16);
r99 = staticinvoke <net.seninp.gi.rulepruner.RulePrunerFactory: net.seninp.gi.logic.GrammarRules performPruning(double[],net.seninp.gi.logic.GrammarRules)>(r6, r95);
$r18 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"finished pruning in \");
$l6 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r20 = new java.util.Date;
specialinvoke $r20.<java.util.Date: void <init>()>();
$l7 = virtualinvoke $r20.<java.util.Date: long getTime()>();
$r21 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l6, $l7);
$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", keeping \");
$i8 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: int size()>();
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules for anomaly discovery ...\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r26);
$r27 = new java.util.ArrayList;
specialinvoke $r27.<java.util.ArrayList: void <init>()>();
r100 = $r27;
r101 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation;
specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>();
r96 = $r5;
r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0);
r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97);
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>();
virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0);
r95 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>();
"->"Block 3:
[preds: 1 2 ] [succs: 4 ]
$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$i3 = virtualinvoke r95.<net.seninp.gi.logic.GrammarRules: int size()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules inferred in \");
$l4 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r12 = new java.util.Date;
specialinvoke $r12.<java.util.Date: void <init>()>();
$l5 = virtualinvoke $r12.<java.util.Date: long getTime()>();
$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", pruning ...\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r16);
r99 = staticinvoke <net.seninp.gi.rulepruner.RulePrunerFactory: net.seninp.gi.logic.GrammarRules performPruning(double[],net.seninp.gi.logic.GrammarRules)>(r6, r95);
$r18 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"finished pruning in \");
$l6 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r20 = new java.util.Date;
specialinvoke $r20.<java.util.Date: void <init>()>();
$l7 = virtualinvoke $r20.<java.util.Date: long getTime()>();
$r21 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l6, $l7);
$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", keeping \");
$i8 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: int size()>();
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules for anomaly discovery ...\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r26);
$r27 = new java.util.ArrayList;
specialinvoke $r27.<java.util.ArrayList: void <init>()>();
r100 = $r27;
r101 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
";
    "Block 3:
[preds: 1 2 ] [succs: 4 ]
$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$i3 = virtualinvoke r95.<net.seninp.gi.logic.GrammarRules: int size()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules inferred in \");
$l4 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r12 = new java.util.Date;
specialinvoke $r12.<java.util.Date: void <init>()>();
$l5 = virtualinvoke $r12.<java.util.Date: long getTime()>();
$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5);
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", pruning ...\");
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r16);
r99 = staticinvoke <net.seninp.gi.rulepruner.RulePrunerFactory: net.seninp.gi.logic.GrammarRules performPruning(double[],net.seninp.gi.logic.GrammarRules)>(r6, r95);
$r18 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"finished pruning in \");
$l6 = virtualinvoke r2.<java.util.Date: long getTime()>();
$r20 = new java.util.Date;
specialinvoke $r20.<java.util.Date: void <init>()>();
$l7 = virtualinvoke $r20.<java.util.Date: long getTime()>();
$r21 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l6, $l7);
$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", keeping \");
$i8 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: int size()>();
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" rules for anomaly discovery ...\");
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r26);
$r27 = new java.util.ArrayList;
specialinvoke $r27.<java.util.ArrayList: void <init>()>();
r100 = $r27;
r101 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
"->"Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
";
    "Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
$r91 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>();
r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r91;
$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i34 goto $r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
";
    "Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
"->"Block 11:
[preds: 4 ] [succs: 12 ]
$i9 = lengthof r6;
r105 = newarray (int)[$i9];
r106 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r91 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>();
r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r91;
$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i34 goto $r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"->"Block 6:
[preds: 5 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$r91 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>();
r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r91;
$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i34 goto $r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"->"Block 7:
[preds: 5 ] [succs: 8 ]
$r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r103 = virtualinvoke $r92.<java.util.ArrayList: java.util.Iterator iterator()>();
";
    "Block 6:
[preds: 5 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
"->"Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
";
    "Block 7:
[preds: 5 ] [succs: 8 ]
$r92 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r103 = virtualinvoke $r92.<java.util.ArrayList: java.util.Iterator iterator()>();
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();
if $z5 == 0 goto (branch);
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();
if $z5 == 0 goto (branch);
"->"Block 9:
[preds: 8 ] [succs: 8 ]
$r93 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();
r104 = (net.seninp.gi.logic.RuleInterval) $r93;
$r94 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
$i35 = virtualinvoke $r94.<java.util.ArrayList: int size()>();
$d5 = (double) $i35;
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5);
$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36);
virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r104);
goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 8:
[preds: 7 9 ] [succs: 9 10 ]
$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();
if $z5 == 0 goto (branch);
"->"Block 10:
[preds: 8 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 9:
[preds: 8 ] [succs: 8 ]
$r93 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();
r104 = (net.seninp.gi.logic.RuleInterval) $r93;
$r94 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
$i35 = virtualinvoke $r94.<java.util.ArrayList: int size()>();
$d5 = (double) $i35;
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5);
$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36);
virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r104);
goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()];
"->"Block 8:
[preds: 7 9 ] [succs: 9 10 ]
$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();
if $z5 == 0 goto (branch);
";
    "Block 10:
[preds: 8 ] [succs: 4 ]
goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()];
"->"Block 4:
[preds: 3 6 10 ] [succs: 5 11 ]
$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();
if $z7 == 0 goto $i9 = lengthof r6;
";
    "Block 11:
[preds: 4 ] [succs: 12 ]
$i9 = lengthof r6;
r105 = newarray (int)[$i9];
r106 = virtualinvoke r99.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>();
"->"Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
";
    "Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
$r89 = interfaceinvoke r106.<java.util.Iterator: java.lang.Object next()>();
r107 = (net.seninp.gi.logic.GrammarRuleRecord) $r89;
$i31 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i31 goto r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
";
    "Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
"->"Block 22:
[preds: 12 ] [succs: 23 24 ]
r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
$i10 = interfaceinvoke r111.<java.util.List: int size()>();
if $i10 <= 0 goto $r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r89 = interfaceinvoke r106.<java.util.Iterator: java.lang.Object next()>();
r107 = (net.seninp.gi.logic.GrammarRuleRecord) $r89;
$i31 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i31 goto r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"->"Block 14:
[preds: 13 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
$r89 = interfaceinvoke r106.<java.util.Iterator: java.lang.Object next()>();
r107 = (net.seninp.gi.logic.GrammarRuleRecord) $r89;
$i31 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>();
if 0 != $i31 goto r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
"->"Block 15:
[preds: 13 ] [succs: 16 ]
r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r109 = virtualinvoke r108.<java.util.ArrayList: java.util.Iterator iterator()>();
";
    "Block 14:
[preds: 13 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
"->"Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
";
    "Block 15:
[preds: 13 ] [succs: 16 ]
r108 = virtualinvoke r107.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>();
r109 = virtualinvoke r108.<java.util.ArrayList: java.util.Iterator iterator()>();
"->"Block 16:
[preds: 15 20 ] [succs: 17 21 ]
$z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
";
    "Block 16:
[preds: 15 20 ] [succs: 17 21 ]
$z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"->"Block 17:
[preds: 16 ] [succs: 18 ]
$r90 = interfaceinvoke r109.<java.util.Iterator: java.lang.Object next()>();
r110 = (net.seninp.gi.logic.RuleInterval) $r90;
i37 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getStart()>();
i38 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getEnd()>();
i39 = i37;
";
    "Block 16:
[preds: 15 20 ] [succs: 17 21 ]
$z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"->"Block 21:
[preds: 16 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 17:
[preds: 16 ] [succs: 18 ]
$r90 = interfaceinvoke r109.<java.util.Iterator: java.lang.Object next()>();
r110 = (net.seninp.gi.logic.RuleInterval) $r90;
i37 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getStart()>();
i38 = virtualinvoke r110.<net.seninp.gi.logic.RuleInterval: int getEnd()>();
i39 = i37;
"->"Block 18:
[preds: 17 19 ] [succs: 19 20 ]
if i39 >= i38 goto (branch);
";
    "Block 18:
[preds: 17 19 ] [succs: 19 20 ]
if i39 >= i38 goto (branch);
"->"Block 19:
[preds: 18 ] [succs: 18 ]
$i32 = r105[i39];
$i33 = $i32 + 1;
r105[i39] = $i33;
i39 = i39 + 1;
goto [?= (branch)];
";
    "Block 18:
[preds: 17 19 ] [succs: 19 20 ]
if i39 >= i38 goto (branch);
"->"Block 20:
[preds: 18 ] [succs: 16 ]
goto [?= $z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 19:
[preds: 18 ] [succs: 18 ]
$i32 = r105[i39];
$i33 = $i32 + 1;
r105[i39] = $i33;
i39 = i39 + 1;
goto [?= (branch)];
"->"Block 18:
[preds: 17 19 ] [succs: 19 20 ]
if i39 >= i38 goto (branch);
";
    "Block 20:
[preds: 18 ] [succs: 16 ]
goto [?= $z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>()];
"->"Block 16:
[preds: 15 20 ] [succs: 17 21 ]
$z4 = interfaceinvoke r109.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
";
    "Block 21:
[preds: 16 ] [succs: 12 ]
goto [?= $z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>()];
"->"Block 12:
[preds: 11 14 21 ] [succs: 13 22 ]
$z8 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();
if $z8 == 0 goto r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
";
    "Block 22:
[preds: 12 ] [succs: 23 24 ]
r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
$i10 = interfaceinvoke r111.<java.util.List: int size()>();
if $i10 <= 0 goto $r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
"->"Block 23:
[preds: 22 ] [succs: 25 ]
$r82 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \");
$i30 = interfaceinvoke r111.<java.util.List: int size()>();
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);
$r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \");
$r86 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r111);
$r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);
$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r82.<org.slf4j.Logger: void info(java.lang.String)>($r88);
virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r111);
goto [?= r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0)];
";
    "Block 22:
[preds: 12 ] [succs: 23 24 ]
r111 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r105);
$i10 = interfaceinvoke r111.<java.util.List: int size()>();
if $i10 <= 0 goto $r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
"->"Block 24:
[preds: 22 ] [succs: 25 ]
$r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\");
";
    "Block 23:
[preds: 22 ] [succs: 25 ]
$r82 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \");
$i30 = interfaceinvoke r111.<java.util.List: int size()>();
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);
$r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \");
$r86 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r111);
$r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);
$r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke $r82.<org.slf4j.Logger: void info(java.lang.String)>($r88);
virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r111);
goto [?= r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0)];
"->"Block 25:
[preds: 23 24 ] [succs: 26 42 ]
r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0);
$r29 = new java.util.Date;
specialinvoke $r29.<java.util.Date: void <init>()>();
r113 = $r29;
$r31 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke r112.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>();
$r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Discords found in \");
$l12 = virtualinvoke r2.<java.util.Date: long getTime()>();
$l13 = virtualinvoke r113.<java.util.Date: long getTime()>();
$r36 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13);
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r39);
$z1 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();
if $z1 != 0 goto return;
";
    "Block 24:
[preds: 22 ] [succs: 25 ]
$r28 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>;
interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\");
"->"Block 25:
[preds: 23 24 ] [succs: 26 42 ]
r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0);
$r29 = new java.util.Date;
specialinvoke $r29.<java.util.Date: void <init>()>();
r113 = $r29;
$r31 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke r112.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>();
$r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Discords found in \");
$l12 = virtualinvoke r2.<java.util.Date: long getTime()>();
$l13 = virtualinvoke r113.<java.util.Date: long getTime()>();
$r36 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13);
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r39);
$z1 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();
if $z1 != 0 goto return;
";
    "Block 25:
[preds: 23 24 ] [succs: 26 42 ]
r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0);
$r29 = new java.util.Date;
specialinvoke $r29.<java.util.Date: void <init>()>();
r113 = $r29;
$r31 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke r112.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>();
$r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Discords found in \");
$l12 = virtualinvoke r2.<java.util.Date: long getTime()>();
$l13 = virtualinvoke r113.<java.util.Date: long getTime()>();
$r36 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13);
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r39);
$z1 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();
if $z1 != 0 goto return;
"->"Block 26:
[preds: 25 ] [succs: 27 ]
$r41 = new java.io.File;
specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>(\".\");
r114 = virtualinvoke $r41.<java.io.File: java.lang.String getCanonicalPath()>();
$r42 = new java.io.BufferedWriter;
$r43 = new java.io.FileWriter;
$r44 = new java.io.File;
$r45 = new java.lang.StringBuilder;
specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();
$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r47 = <java.io.File: java.lang.String separator>;
$r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);
$r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\");
$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>($r51);
specialinvoke $r43.<java.io.FileWriter: void <init>(java.io.File)>($r44);
specialinvoke $r42.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r43);
r115 = $r42;
r116 = r105;
i40 = lengthof r116;
i41 = 0;
";
    "Block 25:
[preds: 23 24 ] [succs: 26 42 ]
r112 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i11, r100, d0);
$r29 = new java.util.Date;
specialinvoke $r29.<java.util.Date: void <init>()>();
r113 = $r29;
$r31 = <java.lang.System: java.io.PrintStream out>;
$r30 = new java.lang.StringBuilder;
specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
$r32 = virtualinvoke r112.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>();
$r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Discords found in \");
$l12 = virtualinvoke r2.<java.util.Date: long getTime()>();
$l13 = virtualinvoke r113.<java.util.Date: long getTime()>();
$r36 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13);
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r39);
$z1 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();
if $z1 != 0 goto return;
"->"Block 42:
[preds: 25 41 ] [succs: ]
return;
";
    "Block 26:
[preds: 25 ] [succs: 27 ]
$r41 = new java.io.File;
specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>(\".\");
r114 = virtualinvoke $r41.<java.io.File: java.lang.String getCanonicalPath()>();
$r42 = new java.io.BufferedWriter;
$r43 = new java.io.FileWriter;
$r44 = new java.io.File;
$r45 = new java.lang.StringBuilder;
specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();
$r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r47 = <java.io.File: java.lang.String separator>;
$r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);
$r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\");
$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>($r51);
specialinvoke $r43.<java.io.FileWriter: void <init>(java.io.File)>($r44);
specialinvoke $r42.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r43);
r115 = $r42;
r116 = r105;
i40 = lengthof r116;
i41 = 0;
"->"Block 27:
[preds: 26 28 ] [succs: 28 29 ]
if i41 >= i40 goto virtualinvoke r115.<java.io.BufferedWriter: void close()>();
";
    "Block 27:
[preds: 26 28 ] [succs: 28 29 ]
if i41 >= i40 goto virtualinvoke r115.<java.io.BufferedWriter: void close()>();
"->"Block 28:
[preds: 27 ] [succs: 27 ]
i42 = r116[i41];
$r77 = new java.lang.StringBuilder;
specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();
$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);
$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r115.<java.io.BufferedWriter: void write(java.lang.String)>($r80);
i41 = i41 + 1;
goto [?= (branch)];
";
    "Block 27:
[preds: 26 28 ] [succs: 28 29 ]
if i41 >= i40 goto virtualinvoke r115.<java.io.BufferedWriter: void close()>();
"->"Block 29:
[preds: 27 ] [succs: 30 ]
virtualinvoke r115.<java.io.BufferedWriter: void close()>();
$r52 = new net.seninp.grammarviz.GrammarVizAnomaly$1;
specialinvoke $r52.<net.seninp.grammarviz.GrammarVizAnomaly$1: void <init>()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r52);
$i14 = lengthof r6;
r117 = newarray (double)[$i14];
$i15 = lengthof r6;
r118 = newarray (double)[$i15];
r119 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>();
";
    "Block 28:
[preds: 27 ] [succs: 27 ]
i42 = r116[i41];
$r77 = new java.lang.StringBuilder;
specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();
$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);
$r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r115.<java.io.BufferedWriter: void write(java.lang.String)>($r80);
i41 = i41 + 1;
goto [?= (branch)];
"->"Block 27:
[preds: 26 28 ] [succs: 28 29 ]
if i41 >= i40 goto virtualinvoke r115.<java.io.BufferedWriter: void close()>();
";
    "Block 29:
[preds: 27 ] [succs: 30 ]
virtualinvoke r115.<java.io.BufferedWriter: void close()>();
$r52 = new net.seninp.grammarviz.GrammarVizAnomaly$1;
specialinvoke $r52.<net.seninp.grammarviz.GrammarVizAnomaly$1: void <init>()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r52);
$i14 = lengthof r6;
r117 = newarray (double)[$i14];
$i15 = lengthof r6;
r118 = newarray (double)[$i15];
r119 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>();
"->"Block 30:
[preds: 29 37 ] [succs: 31 38 ]
$z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto $r53 = new java.io.BufferedWriter;
";
    "Block 30:
[preds: 29 37 ] [succs: 31 38 ]
$z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto $r53 = new java.io.BufferedWriter;
"->"Block 31:
[preds: 30 ] [succs: 32 ]
$r71 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();
r120 = (net.seninp.gi.logic.RuleInterval) $r71;
i17 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getStart()>();
$i18 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
i19 = i17 + $i18;
i20 = i19 - i17;
$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i21 = i17 + i20;
r73 = virtualinvoke $r72.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21);
d6 = 1.7976931348623157E308;
i43 = 0;
";
    "Block 30:
[preds: 29 37 ] [succs: 31 38 ]
$z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto $r53 = new java.io.BufferedWriter;
"->"Block 38:
[preds: 30 ] [succs: 39 ]
$r53 = new java.io.BufferedWriter;
$r54 = new java.io.FileWriter;
$r55 = new java.io.File;
$r56 = new java.lang.StringBuilder;
specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r58 = <java.io.File: java.lang.String separator>;
$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);
$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\");
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>($r62);
specialinvoke $r54.<java.io.FileWriter: void <init>(java.io.File)>($r55);
specialinvoke $r53.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r54);
r121 = $r53;
i44 = 0;
";
    "Block 31:
[preds: 30 ] [succs: 32 ]
$r71 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();
r120 = (net.seninp.gi.logic.RuleInterval) $r71;
i17 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getStart()>();
$i18 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
i19 = i17 + $i18;
i20 = i19 - i17;
$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i21 = i17 + i20;
r73 = virtualinvoke $r72.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21);
d6 = 1.7976931348623157E308;
i43 = 0;
"->"Block 32:
[preds: 31 36 ] [succs: 33 37 ]
$i22 = lengthof r6;
$i23 = $i22 - i20;
$i24 = $i23 - 1;
if i43 >= $i24 goto r117[i17] = d6;
";
    "Block 32:
[preds: 31 36 ] [succs: 33 37 ]
$i22 = lengthof r6;
$i23 = $i22 - i20;
$i24 = $i23 - 1;
if i43 >= $i24 goto r117[i17] = d6;
"->"Block 33:
[preds: 32 ] [succs: 34 36 ]
$i26 = i17 - i43;
$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26);
if $i27 <= i20 goto i43 = i43 + 1;
";
    "Block 32:
[preds: 31 36 ] [succs: 33 37 ]
$i22 = lengthof r6;
$i23 = $i22 - i20;
$i24 = $i23 - 1;
if i43 >= $i24 goto r117[i17] = d6;
"->"Block 37:
[preds: 32 ] [succs: 30 ]
r117[i17] = d6;
$i25 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
$d3 = (double) $i25;
r118[i17] = $d3;
goto [?= $z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 33:
[preds: 32 ] [succs: 34 36 ]
$i26 = i17 - i43;
$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26);
if $i27 <= i20 goto i43 = i43 + 1;
"->"Block 34:
[preds: 33 ] [succs: 35 36 ]
$r74 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i28 = i43 + i20;
r75 = virtualinvoke $r74.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i43, $i28);
$r76 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>;
d4 = virtualinvoke $r76.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r73, r75);
$b29 = d4 cmpg d6;
if $b29 >= 0 goto i43 = i43 + 1;
";
    "Block 33:
[preds: 32 ] [succs: 34 36 ]
$i26 = i17 - i43;
$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26);
if $i27 <= i20 goto i43 = i43 + 1;
"->"Block 36:
[preds: 33 34 35 ] [succs: 32 ]
i43 = i43 + 1;
goto [?= $i22 = lengthof r6];
";
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r74 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i28 = i43 + i20;
r75 = virtualinvoke $r74.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i43, $i28);
$r76 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>;
d4 = virtualinvoke $r76.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r73, r75);
$b29 = d4 cmpg d6;
if $b29 >= 0 goto i43 = i43 + 1;
"->"Block 35:
[preds: 34 ] [succs: 36 ]
d6 = d4;
";
    "Block 34:
[preds: 33 ] [succs: 35 36 ]
$r74 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>;
$i28 = i43 + i20;
r75 = virtualinvoke $r74.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i43, $i28);
$r76 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>;
d4 = virtualinvoke $r76.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r73, r75);
$b29 = d4 cmpg d6;
if $b29 >= 0 goto i43 = i43 + 1;
"->"Block 36:
[preds: 33 34 35 ] [succs: 32 ]
i43 = i43 + 1;
goto [?= $i22 = lengthof r6];
";
    "Block 35:
[preds: 34 ] [succs: 36 ]
d6 = d4;
"->"Block 36:
[preds: 33 34 35 ] [succs: 32 ]
i43 = i43 + 1;
goto [?= $i22 = lengthof r6];
";
    "Block 36:
[preds: 33 34 35 ] [succs: 32 ]
i43 = i43 + 1;
goto [?= $i22 = lengthof r6];
"->"Block 32:
[preds: 31 36 ] [succs: 33 37 ]
$i22 = lengthof r6;
$i23 = $i22 - i20;
$i24 = $i23 - 1;
if i43 >= $i24 goto r117[i17] = d6;
";
    "Block 37:
[preds: 32 ] [succs: 30 ]
r117[i17] = d6;
$i25 = virtualinvoke r120.<net.seninp.gi.logic.RuleInterval: int getLength()>();
$d3 = (double) $i25;
r118[i17] = $d3;
goto [?= $z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>()];
"->"Block 30:
[preds: 29 37 ] [succs: 31 38 ]
$z2 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto $r53 = new java.io.BufferedWriter;
";
    "Block 38:
[preds: 30 ] [succs: 39 ]
$r53 = new java.io.BufferedWriter;
$r54 = new java.io.FileWriter;
$r55 = new java.io.File;
$r56 = new java.lang.StringBuilder;
specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);
$r58 = <java.io.File: java.lang.String separator>;
$r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);
$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\");
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>($r62);
specialinvoke $r54.<java.io.FileWriter: void <init>(java.io.File)>($r55);
specialinvoke $r53.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r54);
r121 = $r53;
i44 = 0;
"->"Block 39:
[preds: 38 40 ] [succs: 40 41 ]
$i16 = lengthof r117;
if i44 >= $i16 goto virtualinvoke r121.<java.io.BufferedWriter: void close()>();
";
    "Block 39:
[preds: 38 40 ] [succs: 40 41 ]
$i16 = lengthof r117;
if i44 >= $i16 goto virtualinvoke r121.<java.io.BufferedWriter: void close()>();
"->"Block 40:
[preds: 39 ] [succs: 39 ]
$r63 = new java.lang.StringBuilder;
specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();
$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i44);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d1 = r117[i44];
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);
$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d2 = r118[i44];
$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);
$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r121.<java.io.BufferedWriter: void write(java.lang.String)>($r70);
i44 = i44 + 1;
goto [?= $i16 = lengthof r117];
";
    "Block 39:
[preds: 38 40 ] [succs: 40 41 ]
$i16 = lengthof r117;
if i44 >= $i16 goto virtualinvoke r121.<java.io.BufferedWriter: void close()>();
"->"Block 41:
[preds: 39 ] [succs: 42 ]
virtualinvoke r121.<java.io.BufferedWriter: void close()>();
";
    "Block 40:
[preds: 39 ] [succs: 39 ]
$r63 = new java.lang.StringBuilder;
specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();
$r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i44);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d1 = r117[i44];
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);
$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\");
$d2 = r118[i44];
$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);
$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r121.<java.io.BufferedWriter: void write(java.lang.String)>($r70);
i44 = i44 + 1;
goto [?= $i16 = lengthof r117];
"->"Block 39:
[preds: 38 40 ] [succs: 40 41 ]
$i16 = lengthof r117;
if i44 >= $i16 goto virtualinvoke r121.<java.io.BufferedWriter: void close()>();
";
    "Block 41:
[preds: 39 ] [succs: 42 ]
virtualinvoke r121.<java.io.BufferedWriter: void close()>();
"->"Block 42:
[preds: 25 41 ] [succs: ]
return;
";
}
