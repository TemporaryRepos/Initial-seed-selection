digraph "unitGraph" {
    "r6 := @parameter0: double[]"
    "r44 := @parameter1: java.lang.String"
    "r36 := @parameter2: net.seninp.jmotif.sax.NumerosityReductionStrategy"
    "i2 := @parameter3: int"
    "r37 := @parameter4: net.seninp.gi.GIAlgorithm"
    "r38 := @parameter5: java.lang.String"
    "d3 := @parameter6: double"
    "$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with sampling algorithm...\")"
    "$r1 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.String GRID_BOUNDARIES>"
    "r2 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: int[] toBoundaries(java.lang.String)>($r1)"
    "$r3 = new java.util.ArrayList"
    "specialinvoke $r3.<java.util.ArrayList: void <init>()>()"
    "r4 = $r3"
    "$r5 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>"
    "$z0 = virtualinvoke $r5.<java.lang.Double: boolean isNaN()>()"
    "if $z0 == 0 goto b8 = 0"
    "$r42 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>(\"sampling on full time series length\")"
    "$r43 = new net.seninp.gi.rulepruner.RulePruner"
    "specialinvoke $r43.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>(r6)"
    "r45 = $r43"
    "goto [?= i10 = r2[0]]"
    "b8 = 0"
    "$i0 = lengthof r6"
    "$d0 = (double) $i0"
    "$r7 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>"
    "$d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()"
    "$d2 = $d0 * $d1"
    "$l1 = staticinvoke <java.lang.Math: long round(double)>($d2)"
    "i9 = (int) $l1"
    "$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"sampling parameters on interval [\")"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b8)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r15)"
    "$r16 = new net.seninp.gi.rulepruner.RulePruner"
    "$r17 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r6, b8, i9)"
    "specialinvoke $r16.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>($r17)"
    "r45 = $r16"
    "i10 = r2[0]"
    "$i11 = r2[1]"
    "if i10 >= $i11 goto $r18 = new net.seninp.gi.rulepruner.ReductionSorter"
    "i12 = r2[3]"
    "$i3 = r2[4]"
    "if i12 >= $i3 goto $i4 = r2[2]"
    "if i12 <= i10 goto i13 = r2[6]"
    "goto [?= $i6 = r2[5]]"
    "i13 = r2[6]"
    "$i5 = r2[7]"
    "if i13 >= $i5 goto $i6 = r2[5]"
    "$r40 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm REPAIR>"
    "$r39 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"
    "$d4 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: double SAX_NORM_THRESHOLD>"
    "r41 = virtualinvoke r45.<net.seninp.gi.rulepruner.RulePruner: net.seninp.gi.rulepruner.SampledPoint sample(int,int,int,net.seninp.gi.GIAlgorithm,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(i10, i12, i13, $r40, $r39, $d4)"
    "virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r41)"
    "$i7 = r2[8]"
    "i13 = i13 + $i7"
    "goto [?= $i5 = r2[7]]"
    "$i6 = r2[5]"
    "i12 = i12 + $i6"
    "goto [?= $i3 = r2[4]]"
    "$i4 = r2[2]"
    "i10 = i10 + $i4"
    "goto [?= $i11 = r2[1]]"
    "$r18 = new net.seninp.gi.rulepruner.ReductionSorter"
    "specialinvoke $r18.<net.seninp.gi.rulepruner.ReductionSorter: void <init>()>()"
    "staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r18)"
    "$r20 = <java.lang.System: java.io.PrintStream out>"
    "$r19 = new java.lang.StringBuilder"
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"
    "$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nApparently, the best parameters are \")"
    "$r22 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"
    "$r23 = (net.seninp.gi.rulepruner.SampledPoint) $r22"
    "$r24 = virtualinvoke $r23.<net.seninp.gi.rulepruner.SampledPoint: java.lang.String toString()>()"
    "$r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)"
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running RRAPRUNED...\")"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)"
    "$r30 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"
    "$r31 = (net.seninp.gi.rulepruner.SampledPoint) $r30"
    "i14 = virtualinvoke $r31.<net.seninp.gi.rulepruner.SampledPoint: int getWindow()>()"
    "$r32 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"
    "$r33 = (net.seninp.gi.rulepruner.SampledPoint) $r32"
    "i15 = virtualinvoke $r33.<net.seninp.gi.rulepruner.SampledPoint: int getPAA()>()"
    "$r34 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"
    "$r35 = (net.seninp.gi.rulepruner.SampledPoint) $r34"
    "i16 = virtualinvoke $r35.<net.seninp.gi.rulepruner.SampledPoint: int getAlphabet()>()"
    "staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: void findRRAPruned(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,int,net.seninp.gi.GIAlgorithm,java.lang.String,double)>(r6, i14, i16, i15, r36, i2, r37, r38, d3)"
    "return"
    "r6 := @parameter0: double[]"->"r44 := @parameter1: java.lang.String";
    "r44 := @parameter1: java.lang.String"->"r36 := @parameter2: net.seninp.jmotif.sax.NumerosityReductionStrategy";
    "r36 := @parameter2: net.seninp.jmotif.sax.NumerosityReductionStrategy"->"i2 := @parameter3: int";
    "i2 := @parameter3: int"->"r37 := @parameter4: net.seninp.gi.GIAlgorithm";
    "r37 := @parameter4: net.seninp.gi.GIAlgorithm"->"r38 := @parameter5: java.lang.String";
    "r38 := @parameter5: java.lang.String"->"d3 := @parameter6: double";
    "d3 := @parameter6: double"->"$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with sampling algorithm...\")";
    "interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA with sampling algorithm...\")"->"$r1 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.String GRID_BOUNDARIES>";
    "$r1 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.String GRID_BOUNDARIES>"->"r2 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: int[] toBoundaries(java.lang.String)>($r1)";
    "r2 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: int[] toBoundaries(java.lang.String)>($r1)"->"$r3 = new java.util.ArrayList";
    "$r3 = new java.util.ArrayList"->"specialinvoke $r3.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r3.<java.util.ArrayList: void <init>()>()"->"r4 = $r3";
    "r4 = $r3"->"$r5 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>";
    "$r5 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>"->"$z0 = virtualinvoke $r5.<java.lang.Double: boolean isNaN()>()";
    "$z0 = virtualinvoke $r5.<java.lang.Double: boolean isNaN()>()"->"if $z0 == 0 goto b8 = 0";
    "if $z0 == 0 goto b8 = 0"->"$r42 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "if $z0 == 0 goto b8 = 0"->"b8 = 0";
    "$r42 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>(\"sampling on full time series length\")";
    "interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>(\"sampling on full time series length\")"->"$r43 = new net.seninp.gi.rulepruner.RulePruner";
    "$r43 = new net.seninp.gi.rulepruner.RulePruner"->"specialinvoke $r43.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>(r6)";
    "specialinvoke $r43.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>(r6)"->"r45 = $r43";
    "r45 = $r43"->"goto [?= i10 = r2[0]]";
    "goto [?= i10 = r2[0]]"->"i10 = r2[0]";
    "b8 = 0"->"$i0 = lengthof r6";
    "$i0 = lengthof r6"->"$d0 = (double) $i0";
    "$d0 = (double) $i0"->"$r7 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>";
    "$r7 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: java.lang.Double SUBSAMPLING_FRACTION>"->"$d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()";
    "$d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>()"->"$d2 = $d0 * $d1";
    "$d2 = $d0 * $d1"->"$l1 = staticinvoke <java.lang.Math: long round(double)>($d2)";
    "$l1 = staticinvoke <java.lang.Math: long round(double)>($d2)"->"i9 = (int) $l1";
    "i9 = (int) $l1"->"$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r9 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"sampling parameters on interval [\")";
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"sampling parameters on interval [\")"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b8)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b8)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)"->"$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")";
    "$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"]\")"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r15)";
    "interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>($r15)"->"$r16 = new net.seninp.gi.rulepruner.RulePruner";
    "$r16 = new net.seninp.gi.rulepruner.RulePruner"->"$r17 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r6, b8, i9)";
    "$r17 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r6, b8, i9)"->"specialinvoke $r16.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>($r17)";
    "specialinvoke $r16.<net.seninp.gi.rulepruner.RulePruner: void <init>(double[])>($r17)"->"r45 = $r16";
    "r45 = $r16"->"i10 = r2[0]";
    "i10 = r2[0]"->"$i11 = r2[1]";
    "$i11 = r2[1]"->"if i10 >= $i11 goto $r18 = new net.seninp.gi.rulepruner.ReductionSorter";
    "if i10 >= $i11 goto $r18 = new net.seninp.gi.rulepruner.ReductionSorter"->"i12 = r2[3]";
    "if i10 >= $i11 goto $r18 = new net.seninp.gi.rulepruner.ReductionSorter"->"$r18 = new net.seninp.gi.rulepruner.ReductionSorter";
    "i12 = r2[3]"->"$i3 = r2[4]";
    "$i3 = r2[4]"->"if i12 >= $i3 goto $i4 = r2[2]";
    "if i12 >= $i3 goto $i4 = r2[2]"->"if i12 <= i10 goto i13 = r2[6]";
    "if i12 >= $i3 goto $i4 = r2[2]"->"$i4 = r2[2]";
    "if i12 <= i10 goto i13 = r2[6]"->"goto [?= $i6 = r2[5]]";
    "if i12 <= i10 goto i13 = r2[6]"->"i13 = r2[6]";
    "goto [?= $i6 = r2[5]]"->"$i6 = r2[5]";
    "i13 = r2[6]"->"$i5 = r2[7]";
    "$i5 = r2[7]"->"if i13 >= $i5 goto $i6 = r2[5]";
    "if i13 >= $i5 goto $i6 = r2[5]"->"$r40 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm REPAIR>";
    "if i13 >= $i5 goto $i6 = r2[5]"->"$i6 = r2[5]";
    "$r40 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm REPAIR>"->"$r39 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>";
    "$r39 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: net.seninp.jmotif.sax.NumerosityReductionStrategy SAX_NR_STRATEGY>"->"$d4 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: double SAX_NORM_THRESHOLD>";
    "$d4 = <net.seninp.grammarviz.GrammarVizAnomalyParameters: double SAX_NORM_THRESHOLD>"->"r41 = virtualinvoke r45.<net.seninp.gi.rulepruner.RulePruner: net.seninp.gi.rulepruner.SampledPoint sample(int,int,int,net.seninp.gi.GIAlgorithm,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(i10, i12, i13, $r40, $r39, $d4)";
    "r41 = virtualinvoke r45.<net.seninp.gi.rulepruner.RulePruner: net.seninp.gi.rulepruner.SampledPoint sample(int,int,int,net.seninp.gi.GIAlgorithm,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(i10, i12, i13, $r40, $r39, $d4)"->"virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r41)";
    "virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r41)"->"$i7 = r2[8]";
    "$i7 = r2[8]"->"i13 = i13 + $i7";
    "i13 = i13 + $i7"->"goto [?= $i5 = r2[7]]";
    "goto [?= $i5 = r2[7]]"->"$i5 = r2[7]";
    "$i6 = r2[5]"->"i12 = i12 + $i6";
    "i12 = i12 + $i6"->"goto [?= $i3 = r2[4]]";
    "goto [?= $i3 = r2[4]]"->"$i3 = r2[4]";
    "$i4 = r2[2]"->"i10 = i10 + $i4";
    "i10 = i10 + $i4"->"goto [?= $i11 = r2[1]]";
    "goto [?= $i11 = r2[1]]"->"$i11 = r2[1]";
    "$r18 = new net.seninp.gi.rulepruner.ReductionSorter"->"specialinvoke $r18.<net.seninp.gi.rulepruner.ReductionSorter: void <init>()>()";
    "specialinvoke $r18.<net.seninp.gi.rulepruner.ReductionSorter: void <init>()>()"->"staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r18)";
    "staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r18)"->"$r20 = <java.lang.System: java.io.PrintStream out>";
    "$r20 = <java.lang.System: java.io.PrintStream out>"->"$r19 = new java.lang.StringBuilder";
    "$r19 = new java.lang.StringBuilder"->"specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"->"$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nApparently, the best parameters are \")";
    "$r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\nApparently, the best parameters are \")"->"$r22 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)";
    "$r22 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"->"$r23 = (net.seninp.gi.rulepruner.SampledPoint) $r22";
    "$r23 = (net.seninp.gi.rulepruner.SampledPoint) $r22"->"$r24 = virtualinvoke $r23.<net.seninp.gi.rulepruner.SampledPoint: java.lang.String toString()>()";
    "$r24 = virtualinvoke $r23.<net.seninp.gi.rulepruner.SampledPoint: java.lang.String toString()>()"->"$r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)";
    "$r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)"->"$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running RRAPRUNED...\")";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Running RRAPRUNED...\")"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)";
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)"->"$r30 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)";
    "$r30 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"->"$r31 = (net.seninp.gi.rulepruner.SampledPoint) $r30";
    "$r31 = (net.seninp.gi.rulepruner.SampledPoint) $r30"->"i14 = virtualinvoke $r31.<net.seninp.gi.rulepruner.SampledPoint: int getWindow()>()";
    "i14 = virtualinvoke $r31.<net.seninp.gi.rulepruner.SampledPoint: int getWindow()>()"->"$r32 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)";
    "$r32 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"->"$r33 = (net.seninp.gi.rulepruner.SampledPoint) $r32";
    "$r33 = (net.seninp.gi.rulepruner.SampledPoint) $r32"->"i15 = virtualinvoke $r33.<net.seninp.gi.rulepruner.SampledPoint: int getPAA()>()";
    "i15 = virtualinvoke $r33.<net.seninp.gi.rulepruner.SampledPoint: int getPAA()>()"->"$r34 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)";
    "$r34 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(0)"->"$r35 = (net.seninp.gi.rulepruner.SampledPoint) $r34";
    "$r35 = (net.seninp.gi.rulepruner.SampledPoint) $r34"->"i16 = virtualinvoke $r35.<net.seninp.gi.rulepruner.SampledPoint: int getAlphabet()>()";
    "i16 = virtualinvoke $r35.<net.seninp.gi.rulepruner.SampledPoint: int getAlphabet()>()"->"staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: void findRRAPruned(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,int,net.seninp.gi.GIAlgorithm,java.lang.String,double)>(r6, i14, i16, i15, r36, i2, r37, r38, d3)";
    "staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: void findRRAPruned(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,int,net.seninp.gi.GIAlgorithm,java.lang.String,double)>(r6, i14, i16, i15, r36, i2, r37, r38, d3)"->"return";
}
