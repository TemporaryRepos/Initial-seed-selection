digraph "unitGraph" {
    "r6 := @parameter0: double[]"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "i2 := @parameter3: int"
    "r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy"
    "i10 := @parameter5: int"
    "r3 := @parameter6: net.seninp.gi.GIAlgorithm"
    "r30 := @parameter7: java.lang.String"
    "d0 := @parameter8: double"
    "$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA algorithm...\")"
    "$r1 = new java.util.Date"
    "specialinvoke $r1.<java.util.Date: void <init>()>()"
    "r2 = $r1"
    "$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>"
    "$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3)"
    "if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"
    "r94 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0)"
    "$r86 = new java.util.Date"
    "specialinvoke $r86.<java.util.Date: void <init>()>()"
    "r95 = $r86"
    "$r88 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "$r87 = new java.lang.StringBuilder"
    "specialinvoke $r87.<java.lang.StringBuilder: void <init>()>()"
    "$i37 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"
    "$r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37)"
    "$r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" Sequitur rules inferred in \")"
    "$l38 = virtualinvoke r2.<java.util.Date: long getTime()>()"
    "$l39 = virtualinvoke r95.<java.util.Date: long getTime()>()"
    "$r91 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l38, $l39)"
    "$r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91)"
    "$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke $r88.<org.slf4j.Logger: void info(java.lang.String)>($r93)"
    "goto [?= $r16 = new java.util.ArrayList]"
    "$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"
    "specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()"
    "r96 = $r5"
    "r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0)"
    "r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97)"
    "virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()"
    "virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0)"
    "r94 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()"
    "$r8 = new java.util.Date"
    "specialinvoke $r8.<java.util.Date: void <init>()>()"
    "r99 = $r8"
    "$r10 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "$r9 = new java.lang.StringBuilder"
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"
    "$i3 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" RePair rules inferred in \")"
    "$l4 = virtualinvoke r2.<java.util.Date: long getTime()>()"
    "$l5 = virtualinvoke r99.<java.util.Date: long getTime()>()"
    "$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5)"
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r15)"
    "$r16 = new java.util.ArrayList"
    "$i6 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"
    "$i7 = $i6 * 2"
    "specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i7)"
    "r100 = $r16"
    "r101 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"
    "$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()"
    "if $z7 == 0 goto $i8 = lengthof r6"
    "$r81 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>()"
    "r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r81"
    "$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "if 0 != $i34 goto $r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]"
    "$r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "r103 = virtualinvoke $r82.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()"
    "if $z5 == 0 goto (branch)"
    "$r83 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>()"
    "r104 = (net.seninp.gi.logic.RuleInterval) $r83"
    "$r84 = virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: java.lang.Object clone()>()"
    "r105 = (net.seninp.gi.logic.RuleInterval) $r84"
    "$r85 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "$i35 = virtualinvoke $r85.<java.util.ArrayList: int size()>()"
    "$d5 = (double) $i35"
    "virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5)"
    "$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36)"
    "virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)"
    "goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()]"
    "$i8 = lengthof r6"
    "r106 = newarray (int)[$i8]"
    "r107 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"
    "$z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()"
    "if $z8 == 0 goto r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)"
    "$r79 = interfaceinvoke r107.<java.util.Iterator: java.lang.Object next()>()"
    "r108 = (net.seninp.gi.logic.GrammarRuleRecord) $r79"
    "$i31 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"
    "if 0 != $i31 goto r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "goto [?= $z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()]"
    "r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"
    "r110 = virtualinvoke r109.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()"
    "if $z4 == 0 goto (branch)"
    "$r80 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>()"
    "r111 = (net.seninp.gi.logic.RuleInterval) $r80"
    "i40 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getStart()>()"
    "i41 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getEnd()>()"
    "i42 = i40"
    "if i42 >= i41 goto (branch)"
    "$i32 = r106[i42]"
    "$i33 = $i32 + 1"
    "r106[i42] = $i33"
    "i42 = i42 + 1"
    "goto [?= (branch)]"
    "goto [?= $z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()]"
    "r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)"
    "$i9 = interfaceinvoke r112.<java.util.List: int size()>()"
    "if $i9 <= 0 goto $r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "$r71 = new java.lang.StringBuilder"
    "specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()"
    "$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")"
    "$i30 = interfaceinvoke r112.<java.util.List: int size()>()"
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30)"
    "$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")"
    "$r76 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r112)"
    "$r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76)"
    "$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>()"
    "interfaceinvoke $r72.<org.slf4j.Logger: void info(java.lang.String)>($r78)"
    "virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r112)"
    "goto [?= r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)]"
    "$r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"
    "interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\")"
    "r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)"
    "$r18 = new java.util.Date"
    "specialinvoke $r18.<java.util.Date: void <init>()>()"
    "r114 = $r18"
    "$r20 = <java.lang.System: java.io.PrintStream out>"
    "$r19 = new java.lang.StringBuilder"
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"
    "$r21 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>()"
    "$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)"
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$i11 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()"
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11)"
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" discords found in \")"
    "$l12 = virtualinvoke r2.<java.util.Date: long getTime()>()"
    "$l13 = virtualinvoke r114.<java.util.Date: long getTime()>()"
    "$r26 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13)"
    "$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)"
    "$z1 = virtualinvoke r30.<java.lang.String: boolean isEmpty()>()"
    "if $z1 != 0 goto return"
    "$r31 = new java.io.File"
    "specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(\".\")"
    "r115 = virtualinvoke $r31.<java.io.File: java.lang.String getCanonicalPath()>()"
    "$r32 = new java.io.BufferedWriter"
    "$r33 = new java.io.FileWriter"
    "$r34 = new java.io.File"
    "$r35 = new java.lang.StringBuilder"
    "specialinvoke $r35.<java.lang.StringBuilder: void <init>()>()"
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)"
    "$r37 = <java.io.File: java.lang.String separator>"
    "$r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)"
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\")"
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r41)"
    "specialinvoke $r33.<java.io.FileWriter: void <init>(java.io.File)>($r34)"
    "specialinvoke $r32.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r33)"
    "r116 = $r32"
    "r117 = r106"
    "i43 = lengthof r117"
    "i44 = 0"
    "if i44 >= i43 goto virtualinvoke r116.<java.io.BufferedWriter: void close()>()"
    "i45 = r117[i44]"
    "$r67 = new java.lang.StringBuilder"
    "specialinvoke $r67.<java.lang.StringBuilder: void <init>()>()"
    "$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45)"
    "$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r116.<java.io.BufferedWriter: void write(java.lang.String)>($r70)"
    "i44 = i44 + 1"
    "virtualinvoke r116.<java.io.BufferedWriter: void close()>()"
    "$r42 = new net.seninp.grammarviz.GrammarVizAnomaly$2"
    "specialinvoke $r42.<net.seninp.grammarviz.GrammarVizAnomaly$2: void <init>()>()"
    "staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r42)"
    "$i14 = lengthof r6"
    "r118 = newarray (double)[$i14]"
    "$i15 = lengthof r6"
    "r119 = newarray (double)[$i15]"
    "r120 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 == 0 goto $r43 = new java.io.BufferedWriter"
    "$r61 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>()"
    "r121 = (net.seninp.gi.logic.RuleInterval) $r61"
    "i17 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getStart()>()"
    "$i18 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()"
    "i19 = i17 + $i18"
    "i20 = i19 - i17"
    "$r62 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>"
    "$i21 = i17 + i20"
    "r63 = virtualinvoke $r62.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21)"
    "d6 = 1.7976931348623157E308"
    "i46 = 0"
    "$i22 = lengthof r6"
    "$i23 = $i22 - i20"
    "$i24 = $i23 - 1"
    "if i46 >= $i24 goto r118[i17] = d6"
    "$i26 = i17 - i46"
    "$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26)"
    "if $i27 <= i20 goto i46 = i46 + 1"
    "$r64 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>"
    "$i28 = i46 + i20"
    "r65 = virtualinvoke $r64.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i46, $i28)"
    "$r66 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>"
    "d4 = virtualinvoke $r66.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r63, r65)"
    "$b29 = d4 cmpg d6"
    "if $b29 >= 0 goto i46 = i46 + 1"
    "d6 = d4"
    "i46 = i46 + 1"
    "goto [?= $i22 = lengthof r6]"
    "r118[i17] = d6"
    "$i25 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()"
    "$d3 = (double) $i25"
    "r119[i17] = $d3"
    "goto [?= $z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()]"
    "$r43 = new java.io.BufferedWriter"
    "$r44 = new java.io.FileWriter"
    "$r45 = new java.io.File"
    "$r46 = new java.lang.StringBuilder"
    "specialinvoke $r46.<java.lang.StringBuilder: void <init>()>()"
    "$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)"
    "$r48 = <java.io.File: java.lang.String separator>"
    "$r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48)"
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)"
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\")"
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r52)"
    "specialinvoke $r44.<java.io.FileWriter: void <init>(java.io.File)>($r45)"
    "specialinvoke $r43.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r44)"
    "r122 = $r43"
    "i47 = 0"
    "$i16 = lengthof r118"
    "if i47 >= $i16 goto virtualinvoke r122.<java.io.BufferedWriter: void close()>()"
    "$r53 = new java.lang.StringBuilder"
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"
    "$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47)"
    "$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")"
    "$d1 = r118[i47]"
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1)"
    "$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")"
    "$d2 = r119[i47]"
    "$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2)"
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke r122.<java.io.BufferedWriter: void write(java.lang.String)>($r60)"
    "i47 = i47 + 1"
    "goto [?= $i16 = lengthof r118]"
    "virtualinvoke r122.<java.io.BufferedWriter: void close()>()"
    "return"
    "r6 := @parameter0: double[]"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i2 := @parameter3: int";
    "i2 := @parameter3: int"->"r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy";
    "r7 := @parameter4: net.seninp.jmotif.sax.NumerosityReductionStrategy"->"i10 := @parameter5: int";
    "i10 := @parameter5: int"->"r3 := @parameter6: net.seninp.gi.GIAlgorithm";
    "r3 := @parameter6: net.seninp.gi.GIAlgorithm"->"r30 := @parameter7: java.lang.String";
    "r30 := @parameter7: java.lang.String"->"d0 := @parameter8: double";
    "d0 := @parameter8: double"->"$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r0 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA algorithm...\")";
    "interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>(\"running RRA algorithm...\")"->"$r1 = new java.util.Date";
    "$r1 = new java.util.Date"->"specialinvoke $r1.<java.util.Date: void <init>()>()";
    "specialinvoke $r1.<java.util.Date: void <init>()>()"->"r2 = $r1";
    "r2 = $r1"->"$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>";
    "$r4 = <net.seninp.gi.GIAlgorithm: net.seninp.gi.GIAlgorithm SEQUITUR>"->"$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3)";
    "$z0 = virtualinvoke $r4.<net.seninp.gi.GIAlgorithm: boolean equals(java.lang.Object)>(r3)"->"if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation";
    "if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"->"r94 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0)";
    "if $z0 == 0 goto $r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"->"$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation";
    "r94 = staticinvoke <net.seninp.gi.sequitur.SequiturFactory: net.seninp.gi.logic.GrammarRules series2SequiturRules(double[],int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, i0, i1, i2, r7, d0)"->"$r86 = new java.util.Date";
    "$r86 = new java.util.Date"->"specialinvoke $r86.<java.util.Date: void <init>()>()";
    "specialinvoke $r86.<java.util.Date: void <init>()>()"->"r95 = $r86";
    "r95 = $r86"->"$r88 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r88 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r87 = new java.lang.StringBuilder";
    "$r87 = new java.lang.StringBuilder"->"specialinvoke $r87.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r87.<java.lang.StringBuilder: void <init>()>()"->"$i37 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()";
    "$i37 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"->"$r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37)";
    "$r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37)"->"$r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" Sequitur rules inferred in \")";
    "$r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" Sequitur rules inferred in \")"->"$l38 = virtualinvoke r2.<java.util.Date: long getTime()>()";
    "$l38 = virtualinvoke r2.<java.util.Date: long getTime()>()"->"$l39 = virtualinvoke r95.<java.util.Date: long getTime()>()";
    "$l39 = virtualinvoke r95.<java.util.Date: long getTime()>()"->"$r91 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l38, $l39)";
    "$r91 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l38, $l39)"->"$r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91)";
    "$r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91)"->"$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke $r88.<org.slf4j.Logger: void info(java.lang.String)>($r93)";
    "interfaceinvoke $r88.<org.slf4j.Logger: void info(java.lang.String)>($r93)"->"goto [?= $r16 = new java.util.ArrayList]";
    "goto [?= $r16 = new java.util.ArrayList]"->"$r16 = new java.util.ArrayList";
    "$r5 = new net.seninp.jmotif.sax.parallel.ParallelSAXImplementation"->"specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()";
    "specialinvoke $r5.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: void <init>()>()"->"r96 = $r5";
    "r96 = $r5"->"r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0)";
    "r97 = virtualinvoke r96.<net.seninp.jmotif.sax.parallel.ParallelSAXImplementation: net.seninp.jmotif.sax.datastructure.SAXRecords process(double[],int,int,int,int,net.seninp.jmotif.sax.NumerosityReductionStrategy,double)>(r6, 2, i0, i1, i2, r7, d0)"->"r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97)";
    "r98 = staticinvoke <net.seninp.gi.repair.RePairFactory: net.seninp.gi.repair.RePairGrammar buildGrammar(net.seninp.jmotif.sax.datastructure.SAXRecords)>(r97)"->"virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()";
    "virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void expandRules()>()"->"virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0)";
    "virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: void buildIntervals(net.seninp.jmotif.sax.datastructure.SAXRecords,double[],int)>(r97, r6, i0)"->"r94 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()";
    "r94 = virtualinvoke r98.<net.seninp.gi.repair.RePairGrammar: net.seninp.gi.logic.GrammarRules toGrammarRulesData()>()"->"$r8 = new java.util.Date";
    "$r8 = new java.util.Date"->"specialinvoke $r8.<java.util.Date: void <init>()>()";
    "specialinvoke $r8.<java.util.Date: void <init>()>()"->"r99 = $r8";
    "r99 = $r8"->"$r10 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r10 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r9 = new java.lang.StringBuilder";
    "$r9 = new java.lang.StringBuilder"->"specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()"->"$i3 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()";
    "$i3 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"->"$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)";
    "$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" RePair rules inferred in \")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" RePair rules inferred in \")"->"$l4 = virtualinvoke r2.<java.util.Date: long getTime()>()";
    "$l4 = virtualinvoke r2.<java.util.Date: long getTime()>()"->"$l5 = virtualinvoke r99.<java.util.Date: long getTime()>()";
    "$l5 = virtualinvoke r99.<java.util.Date: long getTime()>()"->"$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5)";
    "$r13 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l4, $l5)"->"$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)";
    "$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r15)";
    "interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r15)"->"$r16 = new java.util.ArrayList";
    "$r16 = new java.util.ArrayList"->"$i6 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()";
    "$i6 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: int size()>()"->"$i7 = $i6 * 2";
    "$i7 = $i6 * 2"->"specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i7)";
    "specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i7)"->"r100 = $r16";
    "r100 = $r16"->"r101 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()";
    "r101 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()";
    "$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()"->"if $z7 == 0 goto $i8 = lengthof r6";
    "if $z7 == 0 goto $i8 = lengthof r6"->"$r81 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>()";
    "if $z7 == 0 goto $i8 = lengthof r6"->"$i8 = lengthof r6";
    "$r81 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>()"->"r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r81";
    "r102 = (net.seninp.gi.logic.GrammarRuleRecord) $r81"->"$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "$i34 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"if 0 != $i34 goto $r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "if 0 != $i34 goto $r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]";
    "if 0 != $i34 goto $r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]"->"$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()";
    "$r82 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r103 = virtualinvoke $r82.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r103 = virtualinvoke $r82.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()";
    "$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()"->"if $z5 == 0 goto (branch)";
    "if $z5 == 0 goto (branch)"->"$r83 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>()";
    "if $z5 == 0 goto (branch)"->"goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]";
    "$r83 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>()"->"r104 = (net.seninp.gi.logic.RuleInterval) $r83";
    "r104 = (net.seninp.gi.logic.RuleInterval) $r83"->"$r84 = virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: java.lang.Object clone()>()";
    "$r84 = virtualinvoke r104.<net.seninp.gi.logic.RuleInterval: java.lang.Object clone()>()"->"r105 = (net.seninp.gi.logic.RuleInterval) $r84";
    "r105 = (net.seninp.gi.logic.RuleInterval) $r84"->"$r85 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "$r85 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"$i35 = virtualinvoke $r85.<java.util.ArrayList: int size()>()";
    "$i35 = virtualinvoke $r85.<java.util.ArrayList: int size()>()"->"$d5 = (double) $i35";
    "$d5 = (double) $i35"->"virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5)";
    "virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setCoverage(double)>($d5)"->"$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "$i36 = virtualinvoke r102.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36)";
    "virtualinvoke r105.<net.seninp.gi.logic.RuleInterval: void setId(int)>($i36)"->"virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)";
    "virtualinvoke r100.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)"->"goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]"->"$z7 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()";
    "$i8 = lengthof r6"->"r106 = newarray (int)[$i8]";
    "r106 = newarray (int)[$i8]"->"r107 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()";
    "r107 = virtualinvoke r94.<net.seninp.gi.logic.GrammarRules: java.util.Iterator iterator()>()"->"$z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()";
    "$z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()"->"if $z8 == 0 goto r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)";
    "if $z8 == 0 goto r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)"->"$r79 = interfaceinvoke r107.<java.util.Iterator: java.lang.Object next()>()";
    "if $z8 == 0 goto r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)"->"r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)";
    "$r79 = interfaceinvoke r107.<java.util.Iterator: java.lang.Object next()>()"->"r108 = (net.seninp.gi.logic.GrammarRuleRecord) $r79";
    "r108 = (net.seninp.gi.logic.GrammarRuleRecord) $r79"->"$i31 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()";
    "$i31 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: int ruleNumber()>()"->"if 0 != $i31 goto r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "if 0 != $i31 goto r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"goto [?= $z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()]";
    "if 0 != $i31 goto r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()";
    "goto [?= $z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()";
    "r109 = virtualinvoke r108.<net.seninp.gi.logic.GrammarRuleRecord: java.util.ArrayList getRuleIntervals()>()"->"r110 = virtualinvoke r109.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r110 = virtualinvoke r109.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()";
    "$z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()"->"if $z4 == 0 goto (branch)";
    "if $z4 == 0 goto (branch)"->"$r80 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>()";
    "if $z4 == 0 goto (branch)"->"goto [?= $z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()]";
    "$r80 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>()"->"r111 = (net.seninp.gi.logic.RuleInterval) $r80";
    "r111 = (net.seninp.gi.logic.RuleInterval) $r80"->"i40 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getStart()>()";
    "i40 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getStart()>()"->"i41 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getEnd()>()";
    "i41 = virtualinvoke r111.<net.seninp.gi.logic.RuleInterval: int getEnd()>()"->"i42 = i40";
    "i42 = i40"->"if i42 >= i41 goto (branch)";
    "if i42 >= i41 goto (branch)"->"$i32 = r106[i42]";
    "if i42 >= i41 goto (branch)"->"goto [?= $z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()]";
    "$i32 = r106[i42]"->"$i33 = $i32 + 1";
    "$i33 = $i32 + 1"->"r106[i42] = $i33";
    "r106[i42] = $i33"->"i42 = i42 + 1";
    "i42 = i42 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i42 >= i41 goto (branch)";
    "goto [?= $z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()]"->"$z4 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>()";
    "r112 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.util.List getZeroIntervals(int[])>(r106)"->"$i9 = interfaceinvoke r112.<java.util.List: int size()>()";
    "$i9 = interfaceinvoke r112.<java.util.List: int size()>()"->"if $i9 <= 0 goto $r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "if $i9 <= 0 goto $r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "if $i9 <= 0 goto $r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>";
    "$r72 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"$r71 = new java.lang.StringBuilder";
    "$r71 = new java.lang.StringBuilder"->"specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()"->"$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")";
    "$r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"found \")"->"$i30 = interfaceinvoke r112.<java.util.List: int size()>()";
    "$i30 = interfaceinvoke r112.<java.util.List: int size()>()"->"$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30)";
    "$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30)"->"$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")";
    "$r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" intervals not covered by rules: \")"->"$r76 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r112)";
    "$r76 = staticinvoke <net.seninp.grammarviz.GrammarVizAnomaly: java.lang.String intervalsToString(java.util.List)>(r112)"->"$r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76)";
    "$r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76)"->"$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>()"->"interfaceinvoke $r72.<org.slf4j.Logger: void info(java.lang.String)>($r78)";
    "interfaceinvoke $r72.<org.slf4j.Logger: void info(java.lang.String)>($r78)"->"virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r112)";
    "virtualinvoke r100.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r112)"->"goto [?= r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)]";
    "goto [?= r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)]"->"r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)";
    "$r17 = <net.seninp.grammarviz.GrammarVizAnomaly: org.slf4j.Logger LOGGER>"->"interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\")";
    "interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>(\"the whole timeseries is covered by rule intervals ...\")"->"r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)";
    "r113 = staticinvoke <net.seninp.grammarviz.anomaly.RRAImplementation: net.seninp.jmotif.sax.discord.DiscordRecords series2RRAAnomalies(double[],int,java.util.ArrayList,double)>(r6, i10, r100, d0)"->"$r18 = new java.util.Date";
    "$r18 = new java.util.Date"->"specialinvoke $r18.<java.util.Date: void <init>()>()";
    "specialinvoke $r18.<java.util.Date: void <init>()>()"->"r114 = $r18";
    "r114 = $r18"->"$r20 = <java.lang.System: java.io.PrintStream out>";
    "$r20 = <java.lang.System: java.io.PrintStream out>"->"$r19 = new java.lang.StringBuilder";
    "$r19 = new java.lang.StringBuilder"->"specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()"->"$r21 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>()";
    "$r21 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: java.lang.String toString()>()"->"$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)";
    "$r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)"->"$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$i11 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()";
    "$i11 = virtualinvoke r113.<net.seninp.jmotif.sax.discord.DiscordRecords: int getSize()>()"->"$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11)";
    "$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11)"->"$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" discords found in \")";
    "$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" discords found in \")"->"$l12 = virtualinvoke r2.<java.util.Date: long getTime()>()";
    "$l12 = virtualinvoke r2.<java.util.Date: long getTime()>()"->"$l13 = virtualinvoke r114.<java.util.Date: long getTime()>()";
    "$l13 = virtualinvoke r114.<java.util.Date: long getTime()>()"->"$r26 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13)";
    "$r26 = staticinvoke <net.seninp.jmotif.sax.SAXProcessor: java.lang.String timeToString(long,long)>($l12, $l13)"->"$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)";
    "$r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)";
    "virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r29)"->"$z1 = virtualinvoke r30.<java.lang.String: boolean isEmpty()>()";
    "$z1 = virtualinvoke r30.<java.lang.String: boolean isEmpty()>()"->"if $z1 != 0 goto return";
    "if $z1 != 0 goto return"->"$r31 = new java.io.File";
    "if $z1 != 0 goto return"->"return";
    "$r31 = new java.io.File"->"specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(\".\")";
    "specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(\".\")"->"r115 = virtualinvoke $r31.<java.io.File: java.lang.String getCanonicalPath()>()";
    "r115 = virtualinvoke $r31.<java.io.File: java.lang.String getCanonicalPath()>()"->"$r32 = new java.io.BufferedWriter";
    "$r32 = new java.io.BufferedWriter"->"$r33 = new java.io.FileWriter";
    "$r33 = new java.io.FileWriter"->"$r34 = new java.io.File";
    "$r34 = new java.io.File"->"$r35 = new java.lang.StringBuilder";
    "$r35 = new java.lang.StringBuilder"->"specialinvoke $r35.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r35.<java.lang.StringBuilder: void <init>()>()"->"$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)"->"$r37 = <java.io.File: java.lang.String separator>";
    "$r37 = <java.io.File: java.lang.String separator>"->"$r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)";
    "$r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)"->"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\")";
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_coverage.txt\")"->"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r41)";
    "specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r41)"->"specialinvoke $r33.<java.io.FileWriter: void <init>(java.io.File)>($r34)";
    "specialinvoke $r33.<java.io.FileWriter: void <init>(java.io.File)>($r34)"->"specialinvoke $r32.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r33)";
    "specialinvoke $r32.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r33)"->"r116 = $r32";
    "r116 = $r32"->"r117 = r106";
    "r117 = r106"->"i43 = lengthof r117";
    "i43 = lengthof r117"->"i44 = 0";
    "i44 = 0"->"if i44 >= i43 goto virtualinvoke r116.<java.io.BufferedWriter: void close()>()";
    "if i44 >= i43 goto virtualinvoke r116.<java.io.BufferedWriter: void close()>()"->"i45 = r117[i44]";
    "if i44 >= i43 goto virtualinvoke r116.<java.io.BufferedWriter: void close()>()"->"virtualinvoke r116.<java.io.BufferedWriter: void close()>()";
    "i45 = r117[i44]"->"$r67 = new java.lang.StringBuilder";
    "$r67 = new java.lang.StringBuilder"->"specialinvoke $r67.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r67.<java.lang.StringBuilder: void <init>()>()"->"$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45)";
    "$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45)"->"$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r116.<java.io.BufferedWriter: void write(java.lang.String)>($r70)";
    "virtualinvoke r116.<java.io.BufferedWriter: void write(java.lang.String)>($r70)"->"i44 = i44 + 1";
    "i44 = i44 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i44 >= i43 goto virtualinvoke r116.<java.io.BufferedWriter: void close()>()";
    "virtualinvoke r116.<java.io.BufferedWriter: void close()>()"->"$r42 = new net.seninp.grammarviz.GrammarVizAnomaly$2";
    "$r42 = new net.seninp.grammarviz.GrammarVizAnomaly$2"->"specialinvoke $r42.<net.seninp.grammarviz.GrammarVizAnomaly$2: void <init>()>()";
    "specialinvoke $r42.<net.seninp.grammarviz.GrammarVizAnomaly$2: void <init>()>()"->"staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r42)";
    "staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r100, $r42)"->"$i14 = lengthof r6";
    "$i14 = lengthof r6"->"r118 = newarray (double)[$i14]";
    "r118 = newarray (double)[$i14]"->"$i15 = lengthof r6";
    "$i15 = lengthof r6"->"r119 = newarray (double)[$i15]";
    "r119 = newarray (double)[$i15]"->"r120 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r120 = virtualinvoke r100.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()";
    "$z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()"->"if $z2 == 0 goto $r43 = new java.io.BufferedWriter";
    "if $z2 == 0 goto $r43 = new java.io.BufferedWriter"->"$r61 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 == 0 goto $r43 = new java.io.BufferedWriter"->"$r43 = new java.io.BufferedWriter";
    "$r61 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>()"->"r121 = (net.seninp.gi.logic.RuleInterval) $r61";
    "r121 = (net.seninp.gi.logic.RuleInterval) $r61"->"i17 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getStart()>()";
    "i17 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getStart()>()"->"$i18 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()";
    "$i18 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()"->"i19 = i17 + $i18";
    "i19 = i17 + $i18"->"i20 = i19 - i17";
    "i20 = i19 - i17"->"$r62 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>";
    "$r62 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>"->"$i21 = i17 + i20";
    "$i21 = i17 + i20"->"r63 = virtualinvoke $r62.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21)";
    "r63 = virtualinvoke $r62.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i17, $i21)"->"d6 = 1.7976931348623157E308";
    "d6 = 1.7976931348623157E308"->"i46 = 0";
    "i46 = 0"->"$i22 = lengthof r6";
    "$i22 = lengthof r6"->"$i23 = $i22 - i20";
    "$i23 = $i22 - i20"->"$i24 = $i23 - 1";
    "$i24 = $i23 - 1"->"if i46 >= $i24 goto r118[i17] = d6";
    "if i46 >= $i24 goto r118[i17] = d6"->"$i26 = i17 - i46";
    "if i46 >= $i24 goto r118[i17] = d6"->"r118[i17] = d6";
    "$i26 = i17 - i46"->"$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26)";
    "$i27 = staticinvoke <java.lang.Math: int abs(int)>($i26)"->"if $i27 <= i20 goto i46 = i46 + 1";
    "if $i27 <= i20 goto i46 = i46 + 1"->"$r64 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>";
    "if $i27 <= i20 goto i46 = i46 + 1"->"i46 = i46 + 1";
    "$r64 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.sax.TSProcessor tp>"->"$i28 = i46 + i20";
    "$i28 = i46 + i20"->"r65 = virtualinvoke $r64.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i46, $i28)";
    "r65 = virtualinvoke $r64.<net.seninp.jmotif.sax.TSProcessor: double[] subseriesByCopy(double[],int,int)>(r6, i46, $i28)"->"$r66 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>";
    "$r66 = <net.seninp.grammarviz.GrammarVizAnomaly: net.seninp.jmotif.distance.EuclideanDistance ed>"->"d4 = virtualinvoke $r66.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r63, r65)";
    "d4 = virtualinvoke $r66.<net.seninp.jmotif.distance.EuclideanDistance: double distance(double[],double[])>(r63, r65)"->"$b29 = d4 cmpg d6";
    "$b29 = d4 cmpg d6"->"if $b29 >= 0 goto i46 = i46 + 1";
    "if $b29 >= 0 goto i46 = i46 + 1"->"d6 = d4";
    "if $b29 >= 0 goto i46 = i46 + 1"->"i46 = i46 + 1";
    "d6 = d4"->"i46 = i46 + 1";
    "i46 = i46 + 1"->"goto [?= $i22 = lengthof r6]";
    "goto [?= $i22 = lengthof r6]"->"$i22 = lengthof r6";
    "r118[i17] = d6"->"$i25 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()";
    "$i25 = virtualinvoke r121.<net.seninp.gi.logic.RuleInterval: int getLength()>()"->"$d3 = (double) $i25";
    "$d3 = (double) $i25"->"r119[i17] = $d3";
    "r119[i17] = $d3"->"goto [?= $z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>()";
    "$r43 = new java.io.BufferedWriter"->"$r44 = new java.io.FileWriter";
    "$r44 = new java.io.FileWriter"->"$r45 = new java.io.File";
    "$r45 = new java.io.File"->"$r46 = new java.lang.StringBuilder";
    "$r46 = new java.lang.StringBuilder"->"specialinvoke $r46.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r46.<java.lang.StringBuilder: void <init>()>()"->"$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)";
    "$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115)"->"$r48 = <java.io.File: java.lang.String separator>";
    "$r48 = <java.io.File: java.lang.String separator>"->"$r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48)";
    "$r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48)"->"$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)";
    "$r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30)"->"$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\")";
    "$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"_distances.txt\")"->"$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r52)";
    "specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r52)"->"specialinvoke $r44.<java.io.FileWriter: void <init>(java.io.File)>($r45)";
    "specialinvoke $r44.<java.io.FileWriter: void <init>(java.io.File)>($r45)"->"specialinvoke $r43.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r44)";
    "specialinvoke $r43.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r44)"->"r122 = $r43";
    "r122 = $r43"->"i47 = 0";
    "i47 = 0"->"$i16 = lengthof r118";
    "$i16 = lengthof r118"->"if i47 >= $i16 goto virtualinvoke r122.<java.io.BufferedWriter: void close()>()";
    "if i47 >= $i16 goto virtualinvoke r122.<java.io.BufferedWriter: void close()>()"->"$r53 = new java.lang.StringBuilder";
    "if i47 >= $i16 goto virtualinvoke r122.<java.io.BufferedWriter: void close()>()"->"virtualinvoke r122.<java.io.BufferedWriter: void close()>()";
    "$r53 = new java.lang.StringBuilder"->"specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r53.<java.lang.StringBuilder: void <init>()>()"->"$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47)";
    "$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47)"->"$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")";
    "$r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")"->"$d1 = r118[i47]";
    "$d1 = r118[i47]"->"$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1)";
    "$r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1)"->"$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")";
    "$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\",\")"->"$d2 = r119[i47]";
    "$d2 = r119[i47]"->"$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2)";
    "$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2)"->"$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")";
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\")"->"$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke r122.<java.io.BufferedWriter: void write(java.lang.String)>($r60)";
    "virtualinvoke r122.<java.io.BufferedWriter: void write(java.lang.String)>($r60)"->"i47 = i47 + 1";
    "i47 = i47 + 1"->"goto [?= $i16 = lengthof r118]";
    "goto [?= $i16 = lengthof r118]"->"$i16 = lengthof r118";
    "virtualinvoke r122.<java.io.BufferedWriter: void close()>()"->"return";
}
