digraph "unitGraph" {
    "r0 := @this: com.linkedin.mlease.regression.liblinearfunc.LibLinear"
    "$r1 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"
    "if $r1 != null goto $d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>"
    "$r6 = new java.lang.Exception"
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"This model has not been built.  Please call train() before calling getLinearModel().\")"
    "throw $r6"
    "$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>"
    "$b0 = $d0 cmpl 0.0"
    "if $b0 <= 0 goto $r2 = new com.linkedin.mlease.models.LinearModel"
    "$r4 = new com.linkedin.mlease.models.LinearModel"
    "$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"
    "specialinvoke $r4.<com.linkedin.mlease.models.LinearModel: void <init>(java.lang.String,java.util.Map)>(\"(INTERCEPT)\", $r5)"
    "r7 = $r4"
    "goto [?= return r7]"
    "$r2 = new com.linkedin.mlease.models.LinearModel"
    "$r3 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"
    "specialinvoke $r2.<com.linkedin.mlease.models.LinearModel: void <init>(double,java.util.Map)>(0.0, $r3)"
    "r7 = $r2"
    "return r7"
    "r0 := @this: com.linkedin.mlease.regression.liblinearfunc.LibLinear"->"$r1 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>";
    "$r1 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"->"if $r1 != null goto $d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>";
    "if $r1 != null goto $d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>"->"$r6 = new java.lang.Exception";
    "if $r1 != null goto $d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>"->"$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>";
    "$r6 = new java.lang.Exception"->"specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"This model has not been built.  Please call train() before calling getLinearModel().\")";
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"This model has not been built.  Please call train() before calling getLinearModel().\")"->"throw $r6";
    "$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: double bias>"->"$b0 = $d0 cmpl 0.0";
    "$b0 = $d0 cmpl 0.0"->"if $b0 <= 0 goto $r2 = new com.linkedin.mlease.models.LinearModel";
    "if $b0 <= 0 goto $r2 = new com.linkedin.mlease.models.LinearModel"->"$r4 = new com.linkedin.mlease.models.LinearModel";
    "if $b0 <= 0 goto $r2 = new com.linkedin.mlease.models.LinearModel"->"$r2 = new com.linkedin.mlease.models.LinearModel";
    "$r4 = new com.linkedin.mlease.models.LinearModel"->"$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>";
    "$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"->"specialinvoke $r4.<com.linkedin.mlease.models.LinearModel: void <init>(java.lang.String,java.util.Map)>(\"(INTERCEPT)\", $r5)";
    "specialinvoke $r4.<com.linkedin.mlease.models.LinearModel: void <init>(java.lang.String,java.util.Map)>(\"(INTERCEPT)\", $r5)"->"r7 = $r4";
    "r7 = $r4"->"goto [?= return r7]";
    "goto [?= return r7]"->"return r7";
    "$r2 = new com.linkedin.mlease.models.LinearModel"->"$r3 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>";
    "$r3 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map coeff>"->"specialinvoke $r2.<com.linkedin.mlease.models.LinearModel: void <init>(double,java.util.Map)>(0.0, $r3)";
    "specialinvoke $r2.<com.linkedin.mlease.models.LinearModel: void <init>(double,java.util.Map)>(0.0, $r3)"->"r7 = $r2";
    "r7 = $r2"->"return r7";
}
