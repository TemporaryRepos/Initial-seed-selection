digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.linkedin.mlease.regression.jobs.Regression;
r1 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: com.linkedin.mapred.JobConfig getJobConfig()>();
$r2 = new org.apache.hadoop.fs.Path;
$r3 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"output.base.path\");
specialinvoke $r2.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r3);
r4 = $r2;
r5 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: org.apache.hadoop.mapred.JobConf createJobConf()>();
$z0 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean getBoolean(java.lang.String,boolean)>(\"force.output.overwrite\", 0);
if $z0 == 0 goto $r6 = new java.lang.StringBuilder;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
r28 = virtualinvoke r4.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r5);
virtualinvoke r28.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r4, 1);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/tmp-data\");
r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
r9 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r9.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.path\", r29);
$r10 = new com.linkedin.mlease.regression.jobs.RegressionPrepare;
specialinvoke $r10.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Prepare\", r9);
r11 = $r10;
virtualinvoke r11.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void run()>();
r12 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r12.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", r29);
$r13 = new com.linkedin.mlease.regression.jobs.RegressionAdmmTrain;
specialinvoke $r13.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Admm-Train\", r12);
r14 = $r13;
virtualinvoke r14.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void run()>();
$z1 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean containsKey(java.lang.String)>(\"test.path\");
if $z1 == 0 goto return;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
r15 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
$r16 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"test.path\");
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", $r16);
$r17 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"model.base.path\", $r17);
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/test\");
r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r23 = new com.linkedin.mlease.regression.jobs.RegressionTest;
specialinvoke $r23.<com.linkedin.mlease.regression.jobs.RegressionTest: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test\", r15);
r24 = $r23;
virtualinvoke r24.<com.linkedin.mlease.regression.jobs.RegressionTest: void run()>();
r25 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.base.paths\", r22);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r26 = new com.linkedin.mlease.regression.jobs.RegressionTestLoglik;
specialinvoke $r26.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test-Loglik\", r25);
r27 = $r26;
virtualinvoke r27.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void run()>();
"
    "Block 4:
[preds: 2 3 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.linkedin.mlease.regression.jobs.Regression;
r1 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: com.linkedin.mapred.JobConfig getJobConfig()>();
$r2 = new org.apache.hadoop.fs.Path;
$r3 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"output.base.path\");
specialinvoke $r2.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r3);
r4 = $r2;
r5 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: org.apache.hadoop.mapred.JobConf createJobConf()>();
$z0 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean getBoolean(java.lang.String,boolean)>(\"force.output.overwrite\", 0);
if $z0 == 0 goto $r6 = new java.lang.StringBuilder;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
r28 = virtualinvoke r4.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r5);
virtualinvoke r28.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r4, 1);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @this: com.linkedin.mlease.regression.jobs.Regression;
r1 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: com.linkedin.mapred.JobConfig getJobConfig()>();
$r2 = new org.apache.hadoop.fs.Path;
$r3 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"output.base.path\");
specialinvoke $r2.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r3);
r4 = $r2;
r5 = specialinvoke r0.<com.linkedin.mapred.AbstractAvroJob: org.apache.hadoop.mapred.JobConf createJobConf()>();
$z0 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean getBoolean(java.lang.String,boolean)>(\"force.output.overwrite\", 0);
if $z0 == 0 goto $r6 = new java.lang.StringBuilder;
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/tmp-data\");
r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
r9 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r9.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.path\", r29);
$r10 = new com.linkedin.mlease.regression.jobs.RegressionPrepare;
specialinvoke $r10.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Prepare\", r9);
r11 = $r10;
virtualinvoke r11.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void run()>();
r12 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r12.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", r29);
$r13 = new com.linkedin.mlease.regression.jobs.RegressionAdmmTrain;
specialinvoke $r13.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Admm-Train\", r12);
r14 = $r13;
virtualinvoke r14.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void run()>();
$z1 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean containsKey(java.lang.String)>(\"test.path\");
if $z1 == 0 goto return;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
r28 = virtualinvoke r4.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r5);
virtualinvoke r28.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r4, 1);
"->"Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/tmp-data\");
r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
r9 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r9.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.path\", r29);
$r10 = new com.linkedin.mlease.regression.jobs.RegressionPrepare;
specialinvoke $r10.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Prepare\", r9);
r11 = $r10;
virtualinvoke r11.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void run()>();
r12 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r12.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", r29);
$r13 = new com.linkedin.mlease.regression.jobs.RegressionAdmmTrain;
specialinvoke $r13.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Admm-Train\", r12);
r14 = $r13;
virtualinvoke r14.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void run()>();
$z1 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean containsKey(java.lang.String)>(\"test.path\");
if $z1 == 0 goto return;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/tmp-data\");
r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
r9 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r9.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.path\", r29);
$r10 = new com.linkedin.mlease.regression.jobs.RegressionPrepare;
specialinvoke $r10.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Prepare\", r9);
r11 = $r10;
virtualinvoke r11.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void run()>();
r12 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r12.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", r29);
$r13 = new com.linkedin.mlease.regression.jobs.RegressionAdmmTrain;
specialinvoke $r13.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Admm-Train\", r12);
r14 = $r13;
virtualinvoke r14.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void run()>();
$z1 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean containsKey(java.lang.String)>(\"test.path\");
if $z1 == 0 goto return;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
r15 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
$r16 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"test.path\");
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", $r16);
$r17 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"model.base.path\", $r17);
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/test\");
r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r23 = new com.linkedin.mlease.regression.jobs.RegressionTest;
specialinvoke $r23.<com.linkedin.mlease.regression.jobs.RegressionTest: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test\", r15);
r24 = $r23;
virtualinvoke r24.<com.linkedin.mlease.regression.jobs.RegressionTest: void run()>();
r25 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.base.paths\", r22);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r26 = new com.linkedin.mlease.regression.jobs.RegressionTestLoglik;
specialinvoke $r26.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test-Loglik\", r25);
r27 = $r26;
virtualinvoke r27.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void run()>();
";
    "Block 2:
[preds: 0 1 ] [succs: 3 4 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/tmp-data\");
r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
r9 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r9.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.path\", r29);
$r10 = new com.linkedin.mlease.regression.jobs.RegressionPrepare;
specialinvoke $r10.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Prepare\", r9);
r11 = $r10;
virtualinvoke r11.<com.linkedin.mlease.regression.jobs.RegressionPrepare: void run()>();
r12 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r12.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", r29);
$r13 = new com.linkedin.mlease.regression.jobs.RegressionAdmmTrain;
specialinvoke $r13.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Admm-Train\", r12);
r14 = $r13;
virtualinvoke r14.<com.linkedin.mlease.regression.jobs.RegressionAdmmTrain: void run()>();
$z1 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: boolean containsKey(java.lang.String)>(\"test.path\");
if $z1 == 0 goto return;
"->"Block 4:
[preds: 2 3 ] [succs: ]
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
r15 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
$r16 = virtualinvoke r1.<com.linkedin.mapred.JobConfig: java.lang.String get(java.lang.String)>(\"test.path\");
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.paths\", $r16);
$r17 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"model.base.path\", $r17);
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r19 = virtualinvoke r4.<org.apache.hadoop.fs.Path: java.lang.String toString()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"/test\");
r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke r15.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r23 = new com.linkedin.mlease.regression.jobs.RegressionTest;
specialinvoke $r23.<com.linkedin.mlease.regression.jobs.RegressionTest: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test\", r15);
r24 = $r23;
virtualinvoke r24.<com.linkedin.mlease.regression.jobs.RegressionTest: void run()>();
r25 = staticinvoke <com.linkedin.mapred.JobConfig: com.linkedin.mapred.JobConfig clone(com.linkedin.mapred.JobConfig)>(r1);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"input.base.paths\", r22);
virtualinvoke r25.<com.linkedin.mapred.JobConfig: void put(java.lang.String,java.lang.Object)>(\"output.base.path\", r22);
$r26 = new com.linkedin.mlease.regression.jobs.RegressionTestLoglik;
specialinvoke $r26.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void <init>(java.lang.String,com.linkedin.mapred.JobConfig)>(\"Regression-Test-Loglik\", r25);
r27 = $r26;
virtualinvoke r27.<com.linkedin.mlease.regression.jobs.RegressionTestLoglik: void run()>();
"->"Block 4:
[preds: 2 3 ] [succs: ]
return;
";
}
