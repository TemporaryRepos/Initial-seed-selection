digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = \"Input parameters (separated by space): \n   run:<command>      (required) train or predict\n   ftype:<file_type>  (required) libsvm or json\n   data:<file_name>   (required) Input data file of the specified type\n   out:<file_name>    (required) Output file\n   bias:<bias>        (optional) Set to 0 if you do not want to add an\n                                 bias/intercept term\n                                 Set to 1 if you want to add a feature with\n                                 value 1 to every instance\n                                 Default: 0\n   param:<file_name>  (optional) for run:train, it specifies the prior mean\n                      (required) for run:predict, it specifies the model\n                                 File format: <featureName>=<value> per line\n   priorVar:<var>     (required) for run:train, <var> is the a number\n                      (not used) for run:predict\n   init:<file_name>   (optional) for run:train, it specifies the initial value\n                                 File format: <featureName>=<value> per line\n   posteriorVar:1/0   (optional) Whether to compute posterior variances\n                                 Default: 1\n   posteriorCov:1/0   (optional) Whether to compute posterior covariances\n                                 Default: 0\n   binaryFeature:1/0  (optional) Whether all of the input features are binary\n   useShort:1/0       (optional) Whether to use short to store feature indices\n   option:<options>   (optional) Comma-separated list of options\n                                 No space is allowed in <options>\n                                 Eg: max_iter=5,epsilon=0.01,positive_weight=2\n                      (not used) for run:predict\n\";
$i0 = lengthof r1;
if $i0 >= 3 goto r99 = null;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r95 = <java.lang.System: java.io.PrintStream out>;
$r94 = new java.lang.StringBuilder;
specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();
$r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r95.<java.io.PrintStream: void println(java.lang.String)>($r98);
staticinvoke <java.lang.System: void exit(int)>(0);
"
    "Block 2:
[preds: 0 1 ] [succs: 3 ]
r99 = null;
r100 = null;
r101 = null;
r102 = null;
d0 = 0.0;
r103 = null;
r104 = null;
d1 = #NaN;
r105 = null;
z19 = 0;
z20 = 0;
z21 = 1;
z22 = 0;
i3 = 0;
"
    "Block 3:
[preds: 2 38 ] [succs: 4 39 ]
$i4 = lengthof r1;
if i3 >= $i4 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r46 = r1[i3];
if $r46 != null goto $r47 = r1[i3];
"
    "Block 5:
[preds: 4 ] [succs: 38 ]
goto [?= i3 = i3 + 1];
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r47 = r1[i3];
r106 = virtualinvoke $r47.<java.lang.String: java.lang.String[] split(java.lang.String)>(\":\");
$i1 = lengthof r106;
if $i1 >= 2 goto i5 = 2;
"
    "Block 7:
[preds: 6 ] [succs: 8 ]
$r88 = new java.lang.StringBuilder;
specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();
$r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r90 = r1[i3];
$r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);
$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r93, r0);
"
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
i5 = 2;
"
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i6 = lengthof r106;
if i5 >= $i6 goto $r48 = r106[0];
"
    "Block 10:
[preds: 9 ] [succs: 9 ]
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r82 = r106[1];
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$r85 = r106[i5];
$r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);
$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();
r106[1] = $r87;
i5 = i5 + 1;
goto [?= $i6 = lengthof r106];
"
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$r48 = r106[0];
$z6 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(\"run\");
if $z6 == 0 goto $r49 = r106[0];
"
    "Block 12:
[preds: 11 ] [succs: 38 ]
r99 = r106[1];
goto [?= i3 = i3 + 1];
"
    "Block 13:
[preds: 11 ] [succs: 14 15 ]
$r49 = r106[0];
$z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(\"ftype\");
if $z7 == 0 goto $r50 = r106[0];
"
    "Block 14:
[preds: 13 ] [succs: 38 ]
r100 = r106[1];
goto [?= i3 = i3 + 1];
"
    "Block 15:
[preds: 13 ] [succs: 16 17 ]
$r50 = r106[0];
$z8 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"data\");
if $z8 == 0 goto $r51 = r106[0];
"
    "Block 16:
[preds: 15 ] [succs: 38 ]
$r79 = new java.io.File;
$r80 = r106[1];
specialinvoke $r79.<java.io.File: void <init>(java.lang.String)>($r80);
r101 = $r79;
goto [?= i3 = i3 + 1];
"
    "Block 17:
[preds: 15 ] [succs: 18 19 ]
$r51 = r106[0];
$z9 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(\"out\");
if $z9 == 0 goto $r52 = r106[0];
"
    "Block 18:
[preds: 17 ] [succs: 38 ]
$r77 = new java.io.File;
$r78 = r106[1];
specialinvoke $r77.<java.io.File: void <init>(java.lang.String)>($r78);
r102 = $r77;
goto [?= i3 = i3 + 1];
"
    "Block 19:
[preds: 17 ] [succs: 20 21 ]
$r52 = r106[0];
$z10 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(\"bias\");
if $z10 == 0 goto $r53 = r106[0];
"
    "Block 20:
[preds: 19 ] [succs: 38 ]
$r76 = r106[1];
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r76);
goto [?= i3 = i3 + 1];
"
    "Block 21:
[preds: 19 ] [succs: 22 23 ]
$r53 = r106[0];
$z11 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>(\"param\");
if $z11 == 0 goto $r54 = r106[0];
"
    "Block 22:
[preds: 21 ] [succs: 38 ]
$r74 = new java.io.File;
$r75 = r106[1];
specialinvoke $r74.<java.io.File: void <init>(java.lang.String)>($r75);
r103 = $r74;
goto [?= i3 = i3 + 1];
"
    "Block 23:
[preds: 21 ] [succs: 24 25 ]
$r54 = r106[0];
$z12 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>(\"init\");
if $z12 == 0 goto $r55 = r106[0];
"
    "Block 24:
[preds: 23 ] [succs: 38 ]
$r72 = new java.io.File;
$r73 = r106[1];
specialinvoke $r72.<java.io.File: void <init>(java.lang.String)>($r73);
r104 = $r72;
goto [?= i3 = i3 + 1];
"
    "Block 25:
[preds: 23 ] [succs: 26 27 ]
$r55 = r106[0];
$z13 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"priorVar\");
if $z13 == 0 goto $r56 = r106[0];
"
    "Block 26:
[preds: 25 ] [succs: 38 ]
$r71 = r106[1];
d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r71);
goto [?= i3 = i3 + 1];
"
    "Block 27:
[preds: 25 ] [succs: 28 29 ]
$r56 = r106[0];
$z14 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(\"option\");
if $z14 == 0 goto $r57 = r106[0];
"
    "Block 28:
[preds: 27 ] [succs: 38 ]
r105 = r106[1];
goto [?= i3 = i3 + 1];
"
    "Block 29:
[preds: 27 ] [succs: 30 31 ]
$r57 = r106[0];
$z15 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>(\"binaryFeature\");
if $z15 == 0 goto $r58 = r106[0];
"
    "Block 30:
[preds: 29 ] [succs: 38 ]
$r70 = r106[1];
z19 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r70);
goto [?= i3 = i3 + 1];
"
    "Block 31:
[preds: 29 ] [succs: 32 33 ]
$r58 = r106[0];
$z16 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(\"useShort\");
if $z16 == 0 goto $r59 = r106[0];
"
    "Block 32:
[preds: 31 ] [succs: 38 ]
$r69 = r106[1];
z20 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r69);
goto [?= i3 = i3 + 1];
"
    "Block 33:
[preds: 31 ] [succs: 34 35 ]
$r59 = r106[0];
$z17 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorVar\");
if $z17 == 0 goto $r60 = r106[0];
"
    "Block 34:
[preds: 33 ] [succs: 38 ]
$r68 = r106[1];
z21 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r68);
goto [?= i3 = i3 + 1];
"
    "Block 35:
[preds: 33 ] [succs: 36 37 ]
$r60 = r106[0];
$z18 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorCov\");
if $z18 == 0 goto $r61 = new java.lang.StringBuilder;
"
    "Block 36:
[preds: 35 ] [succs: 38 ]
$r67 = r106[1];
z22 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r67);
goto [?= i3 = i3 + 1];
"
    "Block 37:
[preds: 35 ] [succs: 38 ]
$r61 = new java.lang.StringBuilder;
specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r63 = r1[i3];
$r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r66, r0);
"
    "Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
"
    "Block 39:
[preds: 3 ] [succs: 40 41 ]
if r99 != null goto (branch);
"
    "Block 40:
[preds: 39 ] [succs: 41 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify run:<command>\", r0);
"
    "Block 41:
[preds: 39 40 ] [succs: 42 43 ]
if r100 != null goto (branch);
"
    "Block 42:
[preds: 41 ] [succs: 43 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify ftype:<file_type>\", r0);
"
    "Block 43:
[preds: 41 42 ] [succs: 44 45 ]
if r101 != null goto (branch);
"
    "Block 44:
[preds: 43 ] [succs: 45 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify data:<file_name>\", r0);
"
    "Block 45:
[preds: 43 44 ] [succs: 46 47 ]
if r102 != null goto $z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
"
    "Block 46:
[preds: 45 ] [succs: 47 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify out:<file_name>\", r0);
"
    "Block 47:
[preds: 45 46 ] [succs: 48 73 ]
$z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
if $z0 == 0 goto $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
"
    "Block 48:
[preds: 47 ] [succs: 49 52 ]
r107 = null;
r108 = null;
if r103 == null goto (branch);
"
    "Block 49:
[preds: 48 ] [succs: 50 51 ]
$z5 = virtualinvoke r103.<java.io.File: boolean exists()>();
if $z5 != 0 goto r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
"
    "Block 50:
[preds: 49 ] [succs: 51 ]
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Param File \'\");
$r42 = virtualinvoke r103.<java.io.File: java.lang.String getPath()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r45, r0);
"
    "Block 51:
[preds: 49 50 ] [succs: 52 ]
r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
"
    "Block 52:
[preds: 48 51 ] [succs: 53 56 ]
if r104 == null goto $b7 = d1 cmpl #NaN;
"
    "Block 53:
[preds: 52 ] [succs: 54 55 ]
$z4 = virtualinvoke r104.<java.io.File: boolean exists()>();
if $z4 != 0 goto r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
"
    "Block 54:
[preds: 53 ] [succs: 55 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Init File \'\");
$r36 = virtualinvoke r104.<java.io.File: java.lang.String getPath()>();
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r39, r0);
"
    "Block 55:
[preds: 53 54 ] [succs: 56 ]
r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
"
    "Block 56:
[preds: 52 55 ] [succs: 57 58 ]
$b7 = d1 cmpl #NaN;
if $b7 != 0 goto $z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
"
    "Block 57:
[preds: 56 ] [succs: 58 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify priorVar:<var>\", r0);
"
    "Block 58:
[preds: 56 57 ] [succs: 59 60 ]
$z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
if $z2 != 0 goto (branch);
"
    "Block 59:
[preds: 58 ] [succs: 60 ]
$r28 = new java.lang.StringBuilder;
specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Data File \'\");
$r30 = virtualinvoke r101.<java.io.File: java.lang.String getPath()>();
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r33, r0);
"
    "Block 60:
[preds: 58 59 ] [succs: 61 62 ]
if z19 == 0 goto $r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
"
    "Block 61:
[preds: 60 ] [succs: 63 ]
$r27 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset;
specialinvoke $r27.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: void <init>(double,boolean)>(d0, z20);
r109 = $r27;
goto [?= $r8 = \"libsvm\"];
"
    "Block 62:
[preds: 60 ] [succs: 63 ]
$r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
specialinvoke $r7.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void <init>(double)>(d0);
r109 = $r7;
"
    "Block 63:
[preds: 61 62 ] [succs: 64 65 ]
$r8 = \"libsvm\";
$z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r100);
if $z3 == 0 goto $r9 = new java.lang.StringBuilder;
"
    "Block 64:
[preds: 63 ] [succs: 66 ]
virtualinvoke r109.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void readFromLibSVM(java.io.File)>(r101);
goto [?= (branch)];
"
    "Block 65:
[preds: 63 ] [succs: 66 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown file type \'ftype:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r13, r0);
"
    "Block 66:
[preds: 64 65 ] [succs: 67 69 ]
if z22 != 1 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"
    "Block 67:
[preds: 66 ] [succs: 68 69 ]
if z21 != 0 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"
    "Block 68:
[preds: 67 ] [succs: 69 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Cannot compute posterior covariances with posteriorVar:0\", r0);
"
    "Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
"
    "Block 70:
[preds: 69 ] [succs: 71 72 ]
$r15 = new java.io.PrintStream;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".var\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.io.PrintStream: void <init>(java.lang.String)>($r19);
r114 = $r15;
$r20 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r114, $r20, \"=\", 1);
virtualinvoke r114.<java.io.PrintStream: void close()>();
if z22 == 0 goto (branch);
"
    "Block 71:
[preds: 70 ] [succs: 72 ]
$r21 = new java.io.PrintStream;
$r22 = new java.lang.StringBuilder;
specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".cov\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r21.<java.io.PrintStream: void <init>(java.lang.String)>($r25);
r115 = $r21;
$r26 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMatrixMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringListDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String)>(r115, $r26, \"=\");
virtualinvoke r115.<java.io.PrintStream: void close()>();
"
    "Block 72:
[preds: 69 70 71 ] [succs: 76 ]
goto [?= return];
"
    "Block 73:
[preds: 47 ] [succs: 74 75 ]
$z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
if $z1 == 0 goto $r2 = new java.lang.StringBuilder;
"
    "Block 74:
[preds: 73 ] [succs: ]
$r6 = new java.lang.Exception;
specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"run:predict is not supported yet :(\");
throw $r6;
"
    "Block 75:
[preds: 73 ] [succs: 76 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown run:\");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r99);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r5, r0);
"
    "Block 76:
[preds: 72 75 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = \"Input parameters (separated by space): \n   run:<command>      (required) train or predict\n   ftype:<file_type>  (required) libsvm or json\n   data:<file_name>   (required) Input data file of the specified type\n   out:<file_name>    (required) Output file\n   bias:<bias>        (optional) Set to 0 if you do not want to add an\n                                 bias/intercept term\n                                 Set to 1 if you want to add a feature with\n                                 value 1 to every instance\n                                 Default: 0\n   param:<file_name>  (optional) for run:train, it specifies the prior mean\n                      (required) for run:predict, it specifies the model\n                                 File format: <featureName>=<value> per line\n   priorVar:<var>     (required) for run:train, <var> is the a number\n                      (not used) for run:predict\n   init:<file_name>   (optional) for run:train, it specifies the initial value\n                                 File format: <featureName>=<value> per line\n   posteriorVar:1/0   (optional) Whether to compute posterior variances\n                                 Default: 1\n   posteriorCov:1/0   (optional) Whether to compute posterior covariances\n                                 Default: 0\n   binaryFeature:1/0  (optional) Whether all of the input features are binary\n   useShort:1/0       (optional) Whether to use short to store feature indices\n   option:<options>   (optional) Comma-separated list of options\n                                 No space is allowed in <options>\n                                 Eg: max_iter=5,epsilon=0.01,positive_weight=2\n                      (not used) for run:predict\n\";
$i0 = lengthof r1;
if $i0 >= 3 goto r99 = null;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
$r95 = <java.lang.System: java.io.PrintStream out>;
$r94 = new java.lang.StringBuilder;
specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();
$r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r95.<java.io.PrintStream: void println(java.lang.String)>($r98);
staticinvoke <java.lang.System: void exit(int)>(0);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.lang.String[];
r0 = \"Input parameters (separated by space): \n   run:<command>      (required) train or predict\n   ftype:<file_type>  (required) libsvm or json\n   data:<file_name>   (required) Input data file of the specified type\n   out:<file_name>    (required) Output file\n   bias:<bias>        (optional) Set to 0 if you do not want to add an\n                                 bias/intercept term\n                                 Set to 1 if you want to add a feature with\n                                 value 1 to every instance\n                                 Default: 0\n   param:<file_name>  (optional) for run:train, it specifies the prior mean\n                      (required) for run:predict, it specifies the model\n                                 File format: <featureName>=<value> per line\n   priorVar:<var>     (required) for run:train, <var> is the a number\n                      (not used) for run:predict\n   init:<file_name>   (optional) for run:train, it specifies the initial value\n                                 File format: <featureName>=<value> per line\n   posteriorVar:1/0   (optional) Whether to compute posterior variances\n                                 Default: 1\n   posteriorCov:1/0   (optional) Whether to compute posterior covariances\n                                 Default: 0\n   binaryFeature:1/0  (optional) Whether all of the input features are binary\n   useShort:1/0       (optional) Whether to use short to store feature indices\n   option:<options>   (optional) Comma-separated list of options\n                                 No space is allowed in <options>\n                                 Eg: max_iter=5,epsilon=0.01,positive_weight=2\n                      (not used) for run:predict\n\";
$i0 = lengthof r1;
if $i0 >= 3 goto r99 = null;
"->"Block 2:
[preds: 0 1 ] [succs: 3 ]
r99 = null;
r100 = null;
r101 = null;
r102 = null;
d0 = 0.0;
r103 = null;
r104 = null;
d1 = #NaN;
r105 = null;
z19 = 0;
z20 = 0;
z21 = 1;
z22 = 0;
i3 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
$r95 = <java.lang.System: java.io.PrintStream out>;
$r94 = new java.lang.StringBuilder;
specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();
$r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n\");
$r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
$r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r95.<java.io.PrintStream: void println(java.lang.String)>($r98);
staticinvoke <java.lang.System: void exit(int)>(0);
"->"Block 2:
[preds: 0 1 ] [succs: 3 ]
r99 = null;
r100 = null;
r101 = null;
r102 = null;
d0 = 0.0;
r103 = null;
r104 = null;
d1 = #NaN;
r105 = null;
z19 = 0;
z20 = 0;
z21 = 1;
z22 = 0;
i3 = 0;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 ]
r99 = null;
r100 = null;
r101 = null;
r102 = null;
d0 = 0.0;
r103 = null;
r104 = null;
d1 = #NaN;
r105 = null;
z19 = 0;
z20 = 0;
z21 = 1;
z22 = 0;
i3 = 0;
"->"Block 3:
[preds: 2 38 ] [succs: 4 39 ]
$i4 = lengthof r1;
if i3 >= $i4 goto (branch);
";
    "Block 3:
[preds: 2 38 ] [succs: 4 39 ]
$i4 = lengthof r1;
if i3 >= $i4 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r46 = r1[i3];
if $r46 != null goto $r47 = r1[i3];
";
    "Block 3:
[preds: 2 38 ] [succs: 4 39 ]
$i4 = lengthof r1;
if i3 >= $i4 goto (branch);
"->"Block 39:
[preds: 3 ] [succs: 40 41 ]
if r99 != null goto (branch);
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r46 = r1[i3];
if $r46 != null goto $r47 = r1[i3];
"->"Block 5:
[preds: 4 ] [succs: 38 ]
goto [?= i3 = i3 + 1];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r46 = r1[i3];
if $r46 != null goto $r47 = r1[i3];
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
$r47 = r1[i3];
r106 = virtualinvoke $r47.<java.lang.String: java.lang.String[] split(java.lang.String)>(\":\");
$i1 = lengthof r106;
if $i1 >= 2 goto i5 = 2;
";
    "Block 5:
[preds: 4 ] [succs: 38 ]
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r47 = r1[i3];
r106 = virtualinvoke $r47.<java.lang.String: java.lang.String[] split(java.lang.String)>(\":\");
$i1 = lengthof r106;
if $i1 >= 2 goto i5 = 2;
"->"Block 7:
[preds: 6 ] [succs: 8 ]
$r88 = new java.lang.StringBuilder;
specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();
$r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r90 = r1[i3];
$r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);
$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r93, r0);
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r47 = r1[i3];
r106 = virtualinvoke $r47.<java.lang.String: java.lang.String[] split(java.lang.String)>(\":\");
$i1 = lengthof r106;
if $i1 >= 2 goto i5 = 2;
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
i5 = 2;
";
    "Block 7:
[preds: 6 ] [succs: 8 ]
$r88 = new java.lang.StringBuilder;
specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();
$r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r90 = r1[i3];
$r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);
$r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r93, r0);
"->"Block 8:
[preds: 6 7 ] [succs: 9 ]
i5 = 2;
";
    "Block 8:
[preds: 6 7 ] [succs: 9 ]
i5 = 2;
"->"Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i6 = lengthof r106;
if i5 >= $i6 goto $r48 = r106[0];
";
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i6 = lengthof r106;
if i5 >= $i6 goto $r48 = r106[0];
"->"Block 10:
[preds: 9 ] [succs: 9 ]
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r82 = r106[1];
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$r85 = r106[i5];
$r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);
$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();
r106[1] = $r87;
i5 = i5 + 1;
goto [?= $i6 = lengthof r106];
";
    "Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i6 = lengthof r106;
if i5 >= $i6 goto $r48 = r106[0];
"->"Block 11:
[preds: 9 ] [succs: 12 13 ]
$r48 = r106[0];
$z6 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(\"run\");
if $z6 == 0 goto $r49 = r106[0];
";
    "Block 10:
[preds: 9 ] [succs: 9 ]
$r81 = new java.lang.StringBuilder;
specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();
$r82 = r106[1];
$r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);
$r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$r85 = r106[i5];
$r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);
$r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();
r106[1] = $r87;
i5 = i5 + 1;
goto [?= $i6 = lengthof r106];
"->"Block 9:
[preds: 8 10 ] [succs: 10 11 ]
$i6 = lengthof r106;
if i5 >= $i6 goto $r48 = r106[0];
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$r48 = r106[0];
$z6 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(\"run\");
if $z6 == 0 goto $r49 = r106[0];
"->"Block 12:
[preds: 11 ] [succs: 38 ]
r99 = r106[1];
goto [?= i3 = i3 + 1];
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$r48 = r106[0];
$z6 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(\"run\");
if $z6 == 0 goto $r49 = r106[0];
"->"Block 13:
[preds: 11 ] [succs: 14 15 ]
$r49 = r106[0];
$z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(\"ftype\");
if $z7 == 0 goto $r50 = r106[0];
";
    "Block 12:
[preds: 11 ] [succs: 38 ]
r99 = r106[1];
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 13:
[preds: 11 ] [succs: 14 15 ]
$r49 = r106[0];
$z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(\"ftype\");
if $z7 == 0 goto $r50 = r106[0];
"->"Block 14:
[preds: 13 ] [succs: 38 ]
r100 = r106[1];
goto [?= i3 = i3 + 1];
";
    "Block 13:
[preds: 11 ] [succs: 14 15 ]
$r49 = r106[0];
$z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(\"ftype\");
if $z7 == 0 goto $r50 = r106[0];
"->"Block 15:
[preds: 13 ] [succs: 16 17 ]
$r50 = r106[0];
$z8 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"data\");
if $z8 == 0 goto $r51 = r106[0];
";
    "Block 14:
[preds: 13 ] [succs: 38 ]
r100 = r106[1];
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 15:
[preds: 13 ] [succs: 16 17 ]
$r50 = r106[0];
$z8 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"data\");
if $z8 == 0 goto $r51 = r106[0];
"->"Block 16:
[preds: 15 ] [succs: 38 ]
$r79 = new java.io.File;
$r80 = r106[1];
specialinvoke $r79.<java.io.File: void <init>(java.lang.String)>($r80);
r101 = $r79;
goto [?= i3 = i3 + 1];
";
    "Block 15:
[preds: 13 ] [succs: 16 17 ]
$r50 = r106[0];
$z8 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(\"data\");
if $z8 == 0 goto $r51 = r106[0];
"->"Block 17:
[preds: 15 ] [succs: 18 19 ]
$r51 = r106[0];
$z9 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(\"out\");
if $z9 == 0 goto $r52 = r106[0];
";
    "Block 16:
[preds: 15 ] [succs: 38 ]
$r79 = new java.io.File;
$r80 = r106[1];
specialinvoke $r79.<java.io.File: void <init>(java.lang.String)>($r80);
r101 = $r79;
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 17:
[preds: 15 ] [succs: 18 19 ]
$r51 = r106[0];
$z9 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(\"out\");
if $z9 == 0 goto $r52 = r106[0];
"->"Block 18:
[preds: 17 ] [succs: 38 ]
$r77 = new java.io.File;
$r78 = r106[1];
specialinvoke $r77.<java.io.File: void <init>(java.lang.String)>($r78);
r102 = $r77;
goto [?= i3 = i3 + 1];
";
    "Block 17:
[preds: 15 ] [succs: 18 19 ]
$r51 = r106[0];
$z9 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(\"out\");
if $z9 == 0 goto $r52 = r106[0];
"->"Block 19:
[preds: 17 ] [succs: 20 21 ]
$r52 = r106[0];
$z10 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(\"bias\");
if $z10 == 0 goto $r53 = r106[0];
";
    "Block 18:
[preds: 17 ] [succs: 38 ]
$r77 = new java.io.File;
$r78 = r106[1];
specialinvoke $r77.<java.io.File: void <init>(java.lang.String)>($r78);
r102 = $r77;
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 19:
[preds: 17 ] [succs: 20 21 ]
$r52 = r106[0];
$z10 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(\"bias\");
if $z10 == 0 goto $r53 = r106[0];
"->"Block 20:
[preds: 19 ] [succs: 38 ]
$r76 = r106[1];
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r76);
goto [?= i3 = i3 + 1];
";
    "Block 19:
[preds: 17 ] [succs: 20 21 ]
$r52 = r106[0];
$z10 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(\"bias\");
if $z10 == 0 goto $r53 = r106[0];
"->"Block 21:
[preds: 19 ] [succs: 22 23 ]
$r53 = r106[0];
$z11 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>(\"param\");
if $z11 == 0 goto $r54 = r106[0];
";
    "Block 20:
[preds: 19 ] [succs: 38 ]
$r76 = r106[1];
d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r76);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 21:
[preds: 19 ] [succs: 22 23 ]
$r53 = r106[0];
$z11 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>(\"param\");
if $z11 == 0 goto $r54 = r106[0];
"->"Block 22:
[preds: 21 ] [succs: 38 ]
$r74 = new java.io.File;
$r75 = r106[1];
specialinvoke $r74.<java.io.File: void <init>(java.lang.String)>($r75);
r103 = $r74;
goto [?= i3 = i3 + 1];
";
    "Block 21:
[preds: 19 ] [succs: 22 23 ]
$r53 = r106[0];
$z11 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>(\"param\");
if $z11 == 0 goto $r54 = r106[0];
"->"Block 23:
[preds: 21 ] [succs: 24 25 ]
$r54 = r106[0];
$z12 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>(\"init\");
if $z12 == 0 goto $r55 = r106[0];
";
    "Block 22:
[preds: 21 ] [succs: 38 ]
$r74 = new java.io.File;
$r75 = r106[1];
specialinvoke $r74.<java.io.File: void <init>(java.lang.String)>($r75);
r103 = $r74;
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 23:
[preds: 21 ] [succs: 24 25 ]
$r54 = r106[0];
$z12 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>(\"init\");
if $z12 == 0 goto $r55 = r106[0];
"->"Block 24:
[preds: 23 ] [succs: 38 ]
$r72 = new java.io.File;
$r73 = r106[1];
specialinvoke $r72.<java.io.File: void <init>(java.lang.String)>($r73);
r104 = $r72;
goto [?= i3 = i3 + 1];
";
    "Block 23:
[preds: 21 ] [succs: 24 25 ]
$r54 = r106[0];
$z12 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>(\"init\");
if $z12 == 0 goto $r55 = r106[0];
"->"Block 25:
[preds: 23 ] [succs: 26 27 ]
$r55 = r106[0];
$z13 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"priorVar\");
if $z13 == 0 goto $r56 = r106[0];
";
    "Block 24:
[preds: 23 ] [succs: 38 ]
$r72 = new java.io.File;
$r73 = r106[1];
specialinvoke $r72.<java.io.File: void <init>(java.lang.String)>($r73);
r104 = $r72;
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 25:
[preds: 23 ] [succs: 26 27 ]
$r55 = r106[0];
$z13 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"priorVar\");
if $z13 == 0 goto $r56 = r106[0];
"->"Block 26:
[preds: 25 ] [succs: 38 ]
$r71 = r106[1];
d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r71);
goto [?= i3 = i3 + 1];
";
    "Block 25:
[preds: 23 ] [succs: 26 27 ]
$r55 = r106[0];
$z13 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>(\"priorVar\");
if $z13 == 0 goto $r56 = r106[0];
"->"Block 27:
[preds: 25 ] [succs: 28 29 ]
$r56 = r106[0];
$z14 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(\"option\");
if $z14 == 0 goto $r57 = r106[0];
";
    "Block 26:
[preds: 25 ] [succs: 38 ]
$r71 = r106[1];
d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r71);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 27:
[preds: 25 ] [succs: 28 29 ]
$r56 = r106[0];
$z14 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(\"option\");
if $z14 == 0 goto $r57 = r106[0];
"->"Block 28:
[preds: 27 ] [succs: 38 ]
r105 = r106[1];
goto [?= i3 = i3 + 1];
";
    "Block 27:
[preds: 25 ] [succs: 28 29 ]
$r56 = r106[0];
$z14 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(\"option\");
if $z14 == 0 goto $r57 = r106[0];
"->"Block 29:
[preds: 27 ] [succs: 30 31 ]
$r57 = r106[0];
$z15 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>(\"binaryFeature\");
if $z15 == 0 goto $r58 = r106[0];
";
    "Block 28:
[preds: 27 ] [succs: 38 ]
r105 = r106[1];
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 29:
[preds: 27 ] [succs: 30 31 ]
$r57 = r106[0];
$z15 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>(\"binaryFeature\");
if $z15 == 0 goto $r58 = r106[0];
"->"Block 30:
[preds: 29 ] [succs: 38 ]
$r70 = r106[1];
z19 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r70);
goto [?= i3 = i3 + 1];
";
    "Block 29:
[preds: 27 ] [succs: 30 31 ]
$r57 = r106[0];
$z15 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>(\"binaryFeature\");
if $z15 == 0 goto $r58 = r106[0];
"->"Block 31:
[preds: 29 ] [succs: 32 33 ]
$r58 = r106[0];
$z16 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(\"useShort\");
if $z16 == 0 goto $r59 = r106[0];
";
    "Block 30:
[preds: 29 ] [succs: 38 ]
$r70 = r106[1];
z19 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r70);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 31:
[preds: 29 ] [succs: 32 33 ]
$r58 = r106[0];
$z16 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(\"useShort\");
if $z16 == 0 goto $r59 = r106[0];
"->"Block 32:
[preds: 31 ] [succs: 38 ]
$r69 = r106[1];
z20 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r69);
goto [?= i3 = i3 + 1];
";
    "Block 31:
[preds: 29 ] [succs: 32 33 ]
$r58 = r106[0];
$z16 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(\"useShort\");
if $z16 == 0 goto $r59 = r106[0];
"->"Block 33:
[preds: 31 ] [succs: 34 35 ]
$r59 = r106[0];
$z17 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorVar\");
if $z17 == 0 goto $r60 = r106[0];
";
    "Block 32:
[preds: 31 ] [succs: 38 ]
$r69 = r106[1];
z20 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r69);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 33:
[preds: 31 ] [succs: 34 35 ]
$r59 = r106[0];
$z17 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorVar\");
if $z17 == 0 goto $r60 = r106[0];
"->"Block 34:
[preds: 33 ] [succs: 38 ]
$r68 = r106[1];
z21 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r68);
goto [?= i3 = i3 + 1];
";
    "Block 33:
[preds: 31 ] [succs: 34 35 ]
$r59 = r106[0];
$z17 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorVar\");
if $z17 == 0 goto $r60 = r106[0];
"->"Block 35:
[preds: 33 ] [succs: 36 37 ]
$r60 = r106[0];
$z18 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorCov\");
if $z18 == 0 goto $r61 = new java.lang.StringBuilder;
";
    "Block 34:
[preds: 33 ] [succs: 38 ]
$r68 = r106[1];
z21 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r68);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 35:
[preds: 33 ] [succs: 36 37 ]
$r60 = r106[0];
$z18 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorCov\");
if $z18 == 0 goto $r61 = new java.lang.StringBuilder;
"->"Block 36:
[preds: 35 ] [succs: 38 ]
$r67 = r106[1];
z22 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r67);
goto [?= i3 = i3 + 1];
";
    "Block 35:
[preds: 33 ] [succs: 36 37 ]
$r60 = r106[0];
$z18 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>(\"posteriorCov\");
if $z18 == 0 goto $r61 = new java.lang.StringBuilder;
"->"Block 37:
[preds: 35 ] [succs: 38 ]
$r61 = new java.lang.StringBuilder;
specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r63 = r1[i3];
$r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r66, r0);
";
    "Block 36:
[preds: 35 ] [succs: 38 ]
$r67 = r106[1];
z22 = staticinvoke <com.linkedin.mlease.utils.Util: boolean atob(java.lang.String)>($r67);
goto [?= i3 = i3 + 1];
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 37:
[preds: 35 ] [succs: 38 ]
$r61 = new java.lang.StringBuilder;
specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r63 = r1[i3];
$r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);
$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' is not a valid input parameter string!\");
$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r66, r0);
"->"Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
";
    "Block 38:
[preds: 5 12 14 16 18 20 22 24 26 28 30 32 34 36 37 ] [succs: 3 ]
i3 = i3 + 1;
goto [?= $i4 = lengthof r1];
"->"Block 3:
[preds: 2 38 ] [succs: 4 39 ]
$i4 = lengthof r1;
if i3 >= $i4 goto (branch);
";
    "Block 39:
[preds: 3 ] [succs: 40 41 ]
if r99 != null goto (branch);
"->"Block 40:
[preds: 39 ] [succs: 41 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify run:<command>\", r0);
";
    "Block 39:
[preds: 3 ] [succs: 40 41 ]
if r99 != null goto (branch);
"->"Block 41:
[preds: 39 40 ] [succs: 42 43 ]
if r100 != null goto (branch);
";
    "Block 40:
[preds: 39 ] [succs: 41 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify run:<command>\", r0);
"->"Block 41:
[preds: 39 40 ] [succs: 42 43 ]
if r100 != null goto (branch);
";
    "Block 41:
[preds: 39 40 ] [succs: 42 43 ]
if r100 != null goto (branch);
"->"Block 42:
[preds: 41 ] [succs: 43 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify ftype:<file_type>\", r0);
";
    "Block 41:
[preds: 39 40 ] [succs: 42 43 ]
if r100 != null goto (branch);
"->"Block 43:
[preds: 41 42 ] [succs: 44 45 ]
if r101 != null goto (branch);
";
    "Block 42:
[preds: 41 ] [succs: 43 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify ftype:<file_type>\", r0);
"->"Block 43:
[preds: 41 42 ] [succs: 44 45 ]
if r101 != null goto (branch);
";
    "Block 43:
[preds: 41 42 ] [succs: 44 45 ]
if r101 != null goto (branch);
"->"Block 44:
[preds: 43 ] [succs: 45 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify data:<file_name>\", r0);
";
    "Block 43:
[preds: 41 42 ] [succs: 44 45 ]
if r101 != null goto (branch);
"->"Block 45:
[preds: 43 44 ] [succs: 46 47 ]
if r102 != null goto $z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
";
    "Block 44:
[preds: 43 ] [succs: 45 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify data:<file_name>\", r0);
"->"Block 45:
[preds: 43 44 ] [succs: 46 47 ]
if r102 != null goto $z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
";
    "Block 45:
[preds: 43 44 ] [succs: 46 47 ]
if r102 != null goto $z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
"->"Block 46:
[preds: 45 ] [succs: 47 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify out:<file_name>\", r0);
";
    "Block 45:
[preds: 43 44 ] [succs: 46 47 ]
if r102 != null goto $z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
"->"Block 47:
[preds: 45 46 ] [succs: 48 73 ]
$z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
if $z0 == 0 goto $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
";
    "Block 46:
[preds: 45 ] [succs: 47 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify out:<file_name>\", r0);
"->"Block 47:
[preds: 45 46 ] [succs: 48 73 ]
$z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
if $z0 == 0 goto $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
";
    "Block 47:
[preds: 45 46 ] [succs: 48 73 ]
$z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
if $z0 == 0 goto $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
"->"Block 48:
[preds: 47 ] [succs: 49 52 ]
r107 = null;
r108 = null;
if r103 == null goto (branch);
";
    "Block 47:
[preds: 45 46 ] [succs: 48 73 ]
$z0 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"train\");
if $z0 == 0 goto $z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
"->"Block 73:
[preds: 47 ] [succs: 74 75 ]
$z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
if $z1 == 0 goto $r2 = new java.lang.StringBuilder;
";
    "Block 48:
[preds: 47 ] [succs: 49 52 ]
r107 = null;
r108 = null;
if r103 == null goto (branch);
"->"Block 49:
[preds: 48 ] [succs: 50 51 ]
$z5 = virtualinvoke r103.<java.io.File: boolean exists()>();
if $z5 != 0 goto r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
";
    "Block 48:
[preds: 47 ] [succs: 49 52 ]
r107 = null;
r108 = null;
if r103 == null goto (branch);
"->"Block 52:
[preds: 48 51 ] [succs: 53 56 ]
if r104 == null goto $b7 = d1 cmpl #NaN;
";
    "Block 49:
[preds: 48 ] [succs: 50 51 ]
$z5 = virtualinvoke r103.<java.io.File: boolean exists()>();
if $z5 != 0 goto r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
"->"Block 50:
[preds: 49 ] [succs: 51 ]
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Param File \'\");
$r42 = virtualinvoke r103.<java.io.File: java.lang.String getPath()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r45, r0);
";
    "Block 49:
[preds: 48 ] [succs: 50 51 ]
$z5 = virtualinvoke r103.<java.io.File: boolean exists()>();
if $z5 != 0 goto r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
"->"Block 51:
[preds: 49 50 ] [succs: 52 ]
r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
";
    "Block 50:
[preds: 49 ] [succs: 51 ]
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Param File \'\");
$r42 = virtualinvoke r103.<java.io.File: java.lang.String getPath()>();
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r45, r0);
"->"Block 51:
[preds: 49 50 ] [succs: 52 ]
r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
";
    "Block 51:
[preds: 49 50 ] [succs: 52 ]
r107 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r103, \"=\");
"->"Block 52:
[preds: 48 51 ] [succs: 53 56 ]
if r104 == null goto $b7 = d1 cmpl #NaN;
";
    "Block 52:
[preds: 48 51 ] [succs: 53 56 ]
if r104 == null goto $b7 = d1 cmpl #NaN;
"->"Block 53:
[preds: 52 ] [succs: 54 55 ]
$z4 = virtualinvoke r104.<java.io.File: boolean exists()>();
if $z4 != 0 goto r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
";
    "Block 52:
[preds: 48 51 ] [succs: 53 56 ]
if r104 == null goto $b7 = d1 cmpl #NaN;
"->"Block 56:
[preds: 52 55 ] [succs: 57 58 ]
$b7 = d1 cmpl #NaN;
if $b7 != 0 goto $z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
";
    "Block 53:
[preds: 52 ] [succs: 54 55 ]
$z4 = virtualinvoke r104.<java.io.File: boolean exists()>();
if $z4 != 0 goto r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
"->"Block 54:
[preds: 53 ] [succs: 55 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Init File \'\");
$r36 = virtualinvoke r104.<java.io.File: java.lang.String getPath()>();
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r39, r0);
";
    "Block 53:
[preds: 52 ] [succs: 54 55 ]
$z4 = virtualinvoke r104.<java.io.File: boolean exists()>();
if $z4 != 0 goto r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
"->"Block 55:
[preds: 53 54 ] [succs: 56 ]
r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
";
    "Block 54:
[preds: 53 ] [succs: 55 ]
$r34 = new java.lang.StringBuilder;
specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Init File \'\");
$r36 = virtualinvoke r104.<java.io.File: java.lang.String getPath()>();
$r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r39, r0);
"->"Block 55:
[preds: 53 54 ] [succs: 56 ]
r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
";
    "Block 55:
[preds: 53 54 ] [succs: 56 ]
r108 = staticinvoke <com.linkedin.mlease.utils.Util: java.util.Map readStringDoubleMap(java.io.File,java.lang.String)>(r104, \"=\");
"->"Block 56:
[preds: 52 55 ] [succs: 57 58 ]
$b7 = d1 cmpl #NaN;
if $b7 != 0 goto $z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
";
    "Block 56:
[preds: 52 55 ] [succs: 57 58 ]
$b7 = d1 cmpl #NaN;
if $b7 != 0 goto $z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
"->"Block 57:
[preds: 56 ] [succs: 58 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify priorVar:<var>\", r0);
";
    "Block 56:
[preds: 52 55 ] [succs: 57 58 ]
$b7 = d1 cmpl #NaN;
if $b7 != 0 goto $z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
"->"Block 58:
[preds: 56 57 ] [succs: 59 60 ]
$z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
if $z2 != 0 goto (branch);
";
    "Block 57:
[preds: 56 ] [succs: 58 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Please specify priorVar:<var>\", r0);
"->"Block 58:
[preds: 56 57 ] [succs: 59 60 ]
$z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
if $z2 != 0 goto (branch);
";
    "Block 58:
[preds: 56 57 ] [succs: 59 60 ]
$z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
if $z2 != 0 goto (branch);
"->"Block 59:
[preds: 58 ] [succs: 60 ]
$r28 = new java.lang.StringBuilder;
specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Data File \'\");
$r30 = virtualinvoke r101.<java.io.File: java.lang.String getPath()>();
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r33, r0);
";
    "Block 58:
[preds: 56 57 ] [succs: 59 60 ]
$z2 = virtualinvoke r101.<java.io.File: boolean exists()>();
if $z2 != 0 goto (branch);
"->"Block 60:
[preds: 58 59 ] [succs: 61 62 ]
if z19 == 0 goto $r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
";
    "Block 59:
[preds: 58 ] [succs: 60 ]
$r28 = new java.lang.StringBuilder;
specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Data File \'\");
$r30 = virtualinvoke r101.<java.io.File: java.lang.String getPath()>();
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' does not exist\");
$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r33, r0);
"->"Block 60:
[preds: 58 59 ] [succs: 61 62 ]
if z19 == 0 goto $r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
";
    "Block 60:
[preds: 58 59 ] [succs: 61 62 ]
if z19 == 0 goto $r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
"->"Block 61:
[preds: 60 ] [succs: 63 ]
$r27 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset;
specialinvoke $r27.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: void <init>(double,boolean)>(d0, z20);
r109 = $r27;
goto [?= $r8 = \"libsvm\"];
";
    "Block 60:
[preds: 58 59 ] [succs: 61 62 ]
if z19 == 0 goto $r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
"->"Block 62:
[preds: 60 ] [succs: 63 ]
$r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
specialinvoke $r7.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void <init>(double)>(d0);
r109 = $r7;
";
    "Block 61:
[preds: 60 ] [succs: 63 ]
$r27 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset;
specialinvoke $r27.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: void <init>(double,boolean)>(d0, z20);
r109 = $r27;
goto [?= $r8 = \"libsvm\"];
"->"Block 63:
[preds: 61 62 ] [succs: 64 65 ]
$r8 = \"libsvm\";
$z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r100);
if $z3 == 0 goto $r9 = new java.lang.StringBuilder;
";
    "Block 62:
[preds: 60 ] [succs: 63 ]
$r7 = new com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset;
specialinvoke $r7.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void <init>(double)>(d0);
r109 = $r7;
"->"Block 63:
[preds: 61 62 ] [succs: 64 65 ]
$r8 = \"libsvm\";
$z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r100);
if $z3 == 0 goto $r9 = new java.lang.StringBuilder;
";
    "Block 63:
[preds: 61 62 ] [succs: 64 65 ]
$r8 = \"libsvm\";
$z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r100);
if $z3 == 0 goto $r9 = new java.lang.StringBuilder;
"->"Block 64:
[preds: 63 ] [succs: 66 ]
virtualinvoke r109.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void readFromLibSVM(java.io.File)>(r101);
goto [?= (branch)];
";
    "Block 63:
[preds: 61 62 ] [succs: 64 65 ]
$r8 = \"libsvm\";
$z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r100);
if $z3 == 0 goto $r9 = new java.lang.StringBuilder;
"->"Block 65:
[preds: 63 ] [succs: 66 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown file type \'ftype:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r13, r0);
";
    "Block 64:
[preds: 63 ] [succs: 66 ]
virtualinvoke r109.<com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset: void readFromLibSVM(java.io.File)>(r101);
goto [?= (branch)];
"->"Block 66:
[preds: 64 65 ] [succs: 67 69 ]
if z22 != 1 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
";
    "Block 65:
[preds: 63 ] [succs: 66 ]
$r9 = new java.lang.StringBuilder;
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown file type \'ftype:\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r100);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\'\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r13, r0);
"->"Block 66:
[preds: 64 65 ] [succs: 67 69 ]
if z22 != 1 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
";
    "Block 66:
[preds: 64 65 ] [succs: 67 69 ]
if z22 != 1 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"->"Block 67:
[preds: 66 ] [succs: 68 69 ]
if z21 != 0 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
";
    "Block 66:
[preds: 64 65 ] [succs: 67 69 ]
if z22 != 1 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"->"Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
";
    "Block 67:
[preds: 66 ] [succs: 68 69 ]
if z21 != 0 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"->"Block 68:
[preds: 67 ] [succs: 69 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Cannot compute posterior covariances with posteriorVar:0\", r0);
";
    "Block 67:
[preds: 66 ] [succs: 68 69 ]
if z21 != 0 goto $r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
"->"Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
";
    "Block 68:
[preds: 67 ] [succs: 69 ]
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>(\"Cannot compute posterior covariances with posteriorVar:0\", r0);
"->"Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
";
    "Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
"->"Block 70:
[preds: 69 ] [succs: 71 72 ]
$r15 = new java.io.PrintStream;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".var\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.io.PrintStream: void <init>(java.lang.String)>($r19);
r114 = $r15;
$r20 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r114, $r20, \"=\", 1);
virtualinvoke r114.<java.io.PrintStream: void close()>();
if z22 == 0 goto (branch);
";
    "Block 69:
[preds: 66 67 68 ] [succs: 70 72 ]
$r110 = new com.linkedin.mlease.regression.liblinearfunc.LibLinear;
specialinvoke $r110.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void <init>()>();
r14 = $r110;
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void setComputeFullPostVar(boolean)>(z22);
virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: void train(com.linkedin.mlease.regression.liblinearfunc.LibLinearDataset,java.util.Map,java.util.Map,java.util.Map,double,double,java.lang.String,boolean)>(r109, r108, r107, null, 0.0, d1, r105, z21);
$r111 = new java.io.PrintStream;
specialinvoke $r111.<java.io.PrintStream: void <init>(java.io.File)>(r102);
r112 = $r111;
$r113 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getParamMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r112, $r113, \"=\", 1);
virtualinvoke r112.<java.io.PrintStream: void close()>();
if z21 == 0 goto (branch);
"->"Block 72:
[preds: 69 70 71 ] [succs: 76 ]
goto [?= return];
";
    "Block 70:
[preds: 69 ] [succs: 71 72 ]
$r15 = new java.io.PrintStream;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".var\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.io.PrintStream: void <init>(java.lang.String)>($r19);
r114 = $r15;
$r20 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r114, $r20, \"=\", 1);
virtualinvoke r114.<java.io.PrintStream: void close()>();
if z22 == 0 goto (branch);
"->"Block 71:
[preds: 70 ] [succs: 72 ]
$r21 = new java.io.PrintStream;
$r22 = new java.lang.StringBuilder;
specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".cov\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r21.<java.io.PrintStream: void <init>(java.lang.String)>($r25);
r115 = $r21;
$r26 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMatrixMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringListDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String)>(r115, $r26, \"=\");
virtualinvoke r115.<java.io.PrintStream: void close()>();
";
    "Block 70:
[preds: 69 ] [succs: 71 72 ]
$r15 = new java.io.PrintStream;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".var\");
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r15.<java.io.PrintStream: void <init>(java.lang.String)>($r19);
r114 = $r15;
$r20 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String,boolean)>(r114, $r20, \"=\", 1);
virtualinvoke r114.<java.io.PrintStream: void close()>();
if z22 == 0 goto (branch);
"->"Block 72:
[preds: 69 70 71 ] [succs: 76 ]
goto [?= return];
";
    "Block 71:
[preds: 70 ] [succs: 72 ]
$r21 = new java.io.PrintStream;
$r22 = new java.lang.StringBuilder;
specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\".cov\");
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r21.<java.io.PrintStream: void <init>(java.lang.String)>($r25);
r115 = $r21;
$r26 = virtualinvoke r14.<com.linkedin.mlease.regression.liblinearfunc.LibLinear: java.util.Map getPostVarMatrixMap()>();
staticinvoke <com.linkedin.mlease.utils.Util: void printStringListDoubleMap(java.io.PrintStream,java.util.Map,java.lang.String)>(r115, $r26, \"=\");
virtualinvoke r115.<java.io.PrintStream: void close()>();
"->"Block 72:
[preds: 69 70 71 ] [succs: 76 ]
goto [?= return];
";
    "Block 72:
[preds: 69 70 71 ] [succs: 76 ]
goto [?= return];
"->"Block 76:
[preds: 72 75 ] [succs: ]
return;
";
    "Block 73:
[preds: 47 ] [succs: 74 75 ]
$z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
if $z1 == 0 goto $r2 = new java.lang.StringBuilder;
"->"Block 74:
[preds: 73 ] [succs: ]
$r6 = new java.lang.Exception;
specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"run:predict is not supported yet :(\");
throw $r6;
";
    "Block 73:
[preds: 47 ] [succs: 74 75 ]
$z1 = virtualinvoke r99.<java.lang.String: boolean equals(java.lang.Object)>(\"predict\");
if $z1 == 0 goto $r2 = new java.lang.StringBuilder;
"->"Block 75:
[preds: 73 ] [succs: 76 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown run:\");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r99);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r5, r0);
";
    "Block 75:
[preds: 73 ] [succs: 76 ]
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Unknown run:\");
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r99);
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
staticinvoke <com.linkedin.mlease.regression.liblinearfunc.LibLinear: void cmd_line_error(java.lang.String,java.lang.String)>($r5, r0);
"->"Block 76:
[preds: 72 75 ] [succs: ]
return;
";
}
