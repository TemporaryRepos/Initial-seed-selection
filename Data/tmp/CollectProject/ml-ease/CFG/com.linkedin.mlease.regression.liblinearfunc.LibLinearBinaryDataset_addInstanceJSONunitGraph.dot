digraph "unitGraph" {
    "r0 := @this: com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset"
    "r1 := @parameter0: java.util.Map"
    "$z0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean finished>"
    "if $z0 == 0 goto i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")"
    "$r69 = new java.io.IOException"
    "specialinvoke $r69.<java.io.IOException: void <init>(java.lang.String)>(\"Cannot add instances to a finished dataset.\")"
    "throw $r69"
    "i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")"
    "if i27 == 1 goto (branch)"
    "if i27 == 0 goto (branch)"
    "if i27 == -1 goto (branch)"
    "$r63 = new java.io.IOException"
    "$r64 = new java.lang.StringBuilder"
    "specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()"
    "$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"response = \")"
    "$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27)"
    "$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (only 1, 0, -1 are allowed)\")"
    "$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r63.<java.io.IOException: void <init>(java.lang.String)>($r68)"
    "throw $r63"
    "if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"
    "i27 = -1"
    "$r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27)"
    "virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)"
    "d1 = 1.0"
    "$z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"weight\")"
    "if $z2 == 0 goto $b0 = d1 cmpl 1.0"
    "d1 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"weight\")"
    "$b0 = d1 cmpl 1.0"
    "if $b0 == 0 goto d2 = 0.0"
    "$b23 = d1 cmpg 0.0"
    "if $b23 >= 0 goto $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"
    "$r57 = new java.io.IOException"
    "$r58 = new java.lang.StringBuilder"
    "specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()"
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"weight = \")"
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (weight cannot < 0)\")"
    "$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>($r62)"
    "throw $r57"
    "$r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"
    "$i24 = virtualinvoke $r51.<java.util.ArrayList: int size()>()"
    "$r52 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"
    "$i25 = virtualinvoke $r52.<java.util.ArrayList: int size()>()"
    "$i26 = $i25 - 1"
    "if $i24 >= $i26 goto $r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"
    "$r55 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"
    "$r56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"
    "virtualinvoke $r55.<java.util.ArrayList: boolean add(java.lang.Object)>($r56)"
    "goto [?= $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>]"
    "$r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"
    "$r54 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1)"
    "virtualinvoke $r53.<java.util.ArrayList: boolean add(java.lang.Object)>($r54)"
    "d2 = 0.0"
    "$z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"offset\")"
    "if $z3 == 0 goto $b1 = d2 cmpl 0.0"
    "d2 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"offset\")"
    "$b1 = d2 cmpl 0.0"
    "if $b1 == 0 goto r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")"
    "$r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"
    "$i20 = virtualinvoke $r45.<java.util.ArrayList: int size()>()"
    "$r46 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"
    "$i21 = virtualinvoke $r46.<java.util.ArrayList: int size()>()"
    "$i22 = $i21 - 1"
    "if $i20 >= $i22 goto $r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"
    "$r49 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"
    "$r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0)"
    "virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>($r50)"
    "goto [?= $r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>]"
    "$r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"
    "$r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)"
    "virtualinvoke $r47.<java.util.ArrayList: boolean add(java.lang.Object)>($r48)"
    "r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")"
    "if r70 != null goto $z4 = r70 instanceof java.util.List"
    "$r44 = new java.io.IOException"
    "specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>(\"features is null\")"
    "throw $r44"
    "$z4 = r70 instanceof java.util.List"
    "if $z4 != 0 goto r4 = (java.util.List) r70"
    "$r43 = new java.io.IOException"
    "specialinvoke $r43.<java.io.IOException: void <init>(java.lang.String)>(\"features is not a list\")"
    "throw $r43"
    "r4 = (java.util.List) r70"
    "i2 = interfaceinvoke r4.<java.util.List: int size()>()"
    "$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: double bias>"
    "$b3 = $d0 cmpl 0.0"
    "if $b3 <= 0 goto r71 = newarray (int)[i2]"
    "$i19 = i2 + 1"
    "r71 = newarray (int)[$i19]"
    "r71[i2] = -1"
    "goto [?= i28 = 0]"
    "r71 = newarray (int)[i2]"
    "i28 = 0"
    "if i28 >= i2 goto (branch)"
    "r72 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i28)"
    "$z8 = r72 instanceof java.util.Map"
    "if $z8 != 0 goto r73 = (java.util.Map) r72"
    "$r37 = new java.io.IOException"
    "$r38 = new java.lang.StringBuilder"
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"features[\")"
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28)"
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] is not a map\")"
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r42)"
    "throw $r37"
    "r73 = (java.util.Map) r72"
    "r74 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"name\", 0)"
    "r8 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"term\", 1)"
    "$r9 = \"\""
    "$z9 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)"
    "if $z9 != 0 goto $z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")"
    "$r33 = new java.lang.StringBuilder"
    "specialinvoke $r33.<java.lang.StringBuilder: void <init>()>()"
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74)"
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\u0001\")"
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)"
    "r74 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")"
    "if $z10 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "d3 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r73, \"value\")"
    "$b18 = d3 cmpl 1.0"
    "if $b18 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$r27 = new java.io.IOException"
    "$r28 = new java.lang.StringBuilder"
    "specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot handle non-binary feature value (all feature values have to be 1; or just do not specify the value): \")"
    "$r30 = virtualinvoke r73.<java.lang.Object: java.lang.String toString()>()"
    "$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30)"
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32)"
    "throw $r27"
    "$r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "if $r10 != null goto $r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"
    "$r26 = new java.util.HashMap"
    "specialinvoke $r26.<java.util.HashMap: void <init>()>()"
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex> = $r26"
    "$r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"
    "if $r11 != null goto $r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$r25 = new java.util.ArrayList"
    "specialinvoke $r25.<java.util.ArrayList: void <init>()>()"
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName> = $r25"
    "$r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$i9 = virtualinvoke $r12.<java.util.HashMap: int size()>()"
    "$r13 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"
    "$i10 = virtualinvoke $r13.<java.util.ArrayList: int size()>()"
    "if $i9 == $i10 goto $r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$r24 = new java.io.IOException"
    "specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>(\"featureIndex.size() != featureName.size()\")"
    "throw $r24"
    "$r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r74)"
    "r75 = (java.lang.Integer) $r15"
    "if r75 != null goto $i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()"
    "$r16 = \"(INTERCEPT)\""
    "$z11 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r74)"
    "if $z11 == 0 goto $i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "$r23 = new java.io.IOException"
    "specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>(\"feature name cannot be (INTERCEPT)\")"
    "throw $r23"
    "$i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "$i13 = $i12 + 1"
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex> = $i13"
    "$r17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"
    "$i14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)"
    "virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r74, $r18)"
    "$r20 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"
    "virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r74)"
    "$r21 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"
    "$i15 = virtualinvoke $r21.<java.util.ArrayList: int size()>()"
    "$i16 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "if $i15 == $i16 goto $i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "$r22 = new java.io.IOException"
    "specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>(\"featureName.size() != maxFeatureIndex\")"
    "throw $r22"
    "$i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17)"
    "$i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()"
    "r71[i28] = $i11"
    "i28 = i28 + 1"
    "goto [?= (branch)]"
    "if i2 <= 1 goto $z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>"
    "staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r71, 0, i2)"
    "$z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>"
    "if $z5 == 0 goto $r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>"
    "$i4 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"
    "if $i4 < 32767 goto $i5 = lengthof r71"
    "$r7 = new java.io.IOException"
    "specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>(\"When using short to store feature indices, you cannot have more than 32766 features!!\")"
    "throw $r7"
    "$i5 = lengthof r71"
    "r76 = newarray (short)[$i5]"
    "i29 = 0"
    "$i6 = lengthof r76"
    "if i29 >= $i6 goto $r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>"
    "$i7 = r71[i29]"
    "$s8 = (short) $i7"
    "r76[i29] = $s8"
    "i29 = i29 + 1"
    "goto [?= $i6 = lengthof r76]"
    "$r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>"
    "virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r76)"
    "goto [?= return]"
    "$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>"
    "virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r71)"
    "return"
    "r0 := @this: com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset"->"r1 := @parameter0: java.util.Map";
    "r1 := @parameter0: java.util.Map"->"$z0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean finished>";
    "$z0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean finished>"->"if $z0 == 0 goto i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")";
    "if $z0 == 0 goto i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")"->"$r69 = new java.io.IOException";
    "if $z0 == 0 goto i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")"->"i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")";
    "$r69 = new java.io.IOException"->"specialinvoke $r69.<java.io.IOException: void <init>(java.lang.String)>(\"Cannot add instances to a finished dataset.\")";
    "specialinvoke $r69.<java.io.IOException: void <init>(java.lang.String)>(\"Cannot add instances to a finished dataset.\")"->"throw $r69";
    "i27 = staticinvoke <com.linkedin.mlease.utils.Util: int getInt(java.util.Map,java.lang.String)>(r1, \"response\")"->"if i27 == 1 goto (branch)";
    "if i27 == 1 goto (branch)"->"if i27 == 0 goto (branch)";
    "if i27 == 1 goto (branch)"->"if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "if i27 == 0 goto (branch)"->"if i27 == -1 goto (branch)";
    "if i27 == 0 goto (branch)"->"if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "if i27 == -1 goto (branch)"->"$r63 = new java.io.IOException";
    "if i27 == -1 goto (branch)"->"if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "$r63 = new java.io.IOException"->"$r64 = new java.lang.StringBuilder";
    "$r64 = new java.lang.StringBuilder"->"specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()"->"$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"response = \")";
    "$r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"response = \")"->"$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27)";
    "$r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27)"->"$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (only 1, 0, -1 are allowed)\")";
    "$r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (only 1, 0, -1 are allowed)\")"->"$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r63.<java.io.IOException: void <init>(java.lang.String)>($r68)";
    "specialinvoke $r63.<java.io.IOException: void <init>(java.lang.String)>($r68)"->"throw $r63";
    "if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"->"i27 = -1";
    "if i27 != 0 goto $r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"->"$r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "i27 = -1"->"$r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "$r2 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27)"->"virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)";
    "virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)"->"d1 = 1.0";
    "d1 = 1.0"->"$z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"weight\")";
    "$z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"weight\")"->"if $z2 == 0 goto $b0 = d1 cmpl 1.0";
    "if $z2 == 0 goto $b0 = d1 cmpl 1.0"->"d1 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"weight\")";
    "if $z2 == 0 goto $b0 = d1 cmpl 1.0"->"$b0 = d1 cmpl 1.0";
    "d1 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"weight\")"->"$b0 = d1 cmpl 1.0";
    "$b0 = d1 cmpl 1.0"->"if $b0 == 0 goto d2 = 0.0";
    "if $b0 == 0 goto d2 = 0.0"->"$b23 = d1 cmpg 0.0";
    "if $b0 == 0 goto d2 = 0.0"->"d2 = 0.0";
    "$b23 = d1 cmpg 0.0"->"if $b23 >= 0 goto $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "if $b23 >= 0 goto $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r57 = new java.io.IOException";
    "if $b23 >= 0 goto $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "$r57 = new java.io.IOException"->"$r58 = new java.lang.StringBuilder";
    "$r58 = new java.lang.StringBuilder"->"specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r58.<java.lang.StringBuilder: void <init>()>()"->"$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"weight = \")";
    "$r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"weight = \")"->"$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)";
    "$r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1)"->"$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (weight cannot < 0)\")";
    "$r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" (weight cannot < 0)\")"->"$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>($r62)";
    "specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>($r62)"->"throw $r57";
    "$r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$i24 = virtualinvoke $r51.<java.util.ArrayList: int size()>()";
    "$i24 = virtualinvoke $r51.<java.util.ArrayList: int size()>()"->"$r52 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "$r52 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"->"$i25 = virtualinvoke $r52.<java.util.ArrayList: int size()>()";
    "$i25 = virtualinvoke $r52.<java.util.ArrayList: int size()>()"->"$i26 = $i25 - 1";
    "$i26 = $i25 - 1"->"if $i24 >= $i26 goto $r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "if $i24 >= $i26 goto $r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r55 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "if $i24 >= $i26 goto $r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "$r55 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)";
    "$r56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0)"->"virtualinvoke $r55.<java.util.ArrayList: boolean add(java.lang.Object)>($r56)";
    "virtualinvoke $r55.<java.util.ArrayList: boolean add(java.lang.Object)>($r56)"->"goto [?= $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>]";
    "goto [?= $r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>]"->"$r51 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>";
    "$r53 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList weight_temp>"->"$r54 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1)";
    "$r54 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1)"->"virtualinvoke $r53.<java.util.ArrayList: boolean add(java.lang.Object)>($r54)";
    "virtualinvoke $r53.<java.util.ArrayList: boolean add(java.lang.Object)>($r54)"->"d2 = 0.0";
    "d2 = 0.0"->"$z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"offset\")";
    "$z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(\"offset\")"->"if $z3 == 0 goto $b1 = d2 cmpl 0.0";
    "if $z3 == 0 goto $b1 = d2 cmpl 0.0"->"d2 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"offset\")";
    "if $z3 == 0 goto $b1 = d2 cmpl 0.0"->"$b1 = d2 cmpl 0.0";
    "d2 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r1, \"offset\")"->"$b1 = d2 cmpl 0.0";
    "$b1 = d2 cmpl 0.0"->"if $b1 == 0 goto r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")";
    "if $b1 == 0 goto r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")"->"$r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>";
    "if $b1 == 0 goto r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")"->"r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")";
    "$r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"->"$i20 = virtualinvoke $r45.<java.util.ArrayList: int size()>()";
    "$i20 = virtualinvoke $r45.<java.util.ArrayList: int size()>()"->"$r46 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>";
    "$r46 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList y_temp>"->"$i21 = virtualinvoke $r46.<java.util.ArrayList: int size()>()";
    "$i21 = virtualinvoke $r46.<java.util.ArrayList: int size()>()"->"$i22 = $i21 - 1";
    "$i22 = $i21 - 1"->"if $i20 >= $i22 goto $r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>";
    "if $i20 >= $i22 goto $r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"->"$r49 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>";
    "if $i20 >= $i22 goto $r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"->"$r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>";
    "$r49 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"->"$r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0)";
    "$r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0)"->"virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>($r50)";
    "virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>($r50)"->"goto [?= $r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>]";
    "goto [?= $r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>]"->"$r45 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>";
    "$r47 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList offset_temp>"->"$r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)";
    "$r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)"->"virtualinvoke $r47.<java.util.ArrayList: boolean add(java.lang.Object)>($r48)";
    "virtualinvoke $r47.<java.util.ArrayList: boolean add(java.lang.Object)>($r48)"->"r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")";
    "r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"features\")"->"if r70 != null goto $z4 = r70 instanceof java.util.List";
    "if r70 != null goto $z4 = r70 instanceof java.util.List"->"$r44 = new java.io.IOException";
    "if r70 != null goto $z4 = r70 instanceof java.util.List"->"$z4 = r70 instanceof java.util.List";
    "$r44 = new java.io.IOException"->"specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>(\"features is null\")";
    "specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>(\"features is null\")"->"throw $r44";
    "$z4 = r70 instanceof java.util.List"->"if $z4 != 0 goto r4 = (java.util.List) r70";
    "if $z4 != 0 goto r4 = (java.util.List) r70"->"$r43 = new java.io.IOException";
    "if $z4 != 0 goto r4 = (java.util.List) r70"->"r4 = (java.util.List) r70";
    "$r43 = new java.io.IOException"->"specialinvoke $r43.<java.io.IOException: void <init>(java.lang.String)>(\"features is not a list\")";
    "specialinvoke $r43.<java.io.IOException: void <init>(java.lang.String)>(\"features is not a list\")"->"throw $r43";
    "r4 = (java.util.List) r70"->"i2 = interfaceinvoke r4.<java.util.List: int size()>()";
    "i2 = interfaceinvoke r4.<java.util.List: int size()>()"->"$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: double bias>";
    "$d0 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: double bias>"->"$b3 = $d0 cmpl 0.0";
    "$b3 = $d0 cmpl 0.0"->"if $b3 <= 0 goto r71 = newarray (int)[i2]";
    "if $b3 <= 0 goto r71 = newarray (int)[i2]"->"$i19 = i2 + 1";
    "if $b3 <= 0 goto r71 = newarray (int)[i2]"->"r71 = newarray (int)[i2]";
    "$i19 = i2 + 1"->"r71 = newarray (int)[$i19]";
    "r71 = newarray (int)[$i19]"->"r71[i2] = -1";
    "r71[i2] = -1"->"goto [?= i28 = 0]";
    "goto [?= i28 = 0]"->"i28 = 0";
    "r71 = newarray (int)[i2]"->"i28 = 0";
    "i28 = 0"->"if i28 >= i2 goto (branch)";
    "if i28 >= i2 goto (branch)"->"r72 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i28)";
    "if i28 >= i2 goto (branch)"->"if i2 <= 1 goto $z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>";
    "r72 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i28)"->"$z8 = r72 instanceof java.util.Map";
    "$z8 = r72 instanceof java.util.Map"->"if $z8 != 0 goto r73 = (java.util.Map) r72";
    "if $z8 != 0 goto r73 = (java.util.Map) r72"->"$r37 = new java.io.IOException";
    "if $z8 != 0 goto r73 = (java.util.Map) r72"->"r73 = (java.util.Map) r72";
    "$r37 = new java.io.IOException"->"$r38 = new java.lang.StringBuilder";
    "$r38 = new java.lang.StringBuilder"->"specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()"->"$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"features[\")";
    "$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"features[\")"->"$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28)";
    "$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28)"->"$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] is not a map\")";
    "$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"] is not a map\")"->"$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r42)";
    "specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r42)"->"throw $r37";
    "r73 = (java.util.Map) r72"->"r74 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"name\", 0)";
    "r74 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"name\", 0)"->"r8 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"term\", 1)";
    "r8 = staticinvoke <com.linkedin.mlease.utils.Util: java.lang.String getString(java.util.Map,java.lang.String,boolean)>(r73, \"term\", 1)"->"$r9 = \"\"";
    "$r9 = \"\""->"$z9 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)";
    "$z9 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r8)"->"if $z9 != 0 goto $z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")";
    "if $z9 != 0 goto $z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")"->"$r33 = new java.lang.StringBuilder";
    "if $z9 != 0 goto $z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")"->"$z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")";
    "$r33 = new java.lang.StringBuilder"->"specialinvoke $r33.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r33.<java.lang.StringBuilder: void <init>()>()"->"$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74)";
    "$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74)"->"$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\u0001\")";
    "$r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\u0001\")"->"$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)";
    "$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)"->"r74 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r74 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()"->"$z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")";
    "$z10 = interfaceinvoke r73.<java.util.Map: boolean containsKey(java.lang.Object)>(\"value\")"->"if $z10 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "if $z10 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"d3 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r73, \"value\")";
    "if $z10 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "d3 = staticinvoke <com.linkedin.mlease.utils.Util: double getDouble(java.util.Map,java.lang.String)>(r73, \"value\")"->"$b18 = d3 cmpl 1.0";
    "$b18 = d3 cmpl 1.0"->"if $b18 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "if $b18 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r27 = new java.io.IOException";
    "if $b18 == 0 goto $r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "$r27 = new java.io.IOException"->"$r28 = new java.lang.StringBuilder";
    "$r28 = new java.lang.StringBuilder"->"specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot handle non-binary feature value (all feature values have to be 1; or just do not specify the value): \")";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot handle non-binary feature value (all feature values have to be 1; or just do not specify the value): \")"->"$r30 = virtualinvoke r73.<java.lang.Object: java.lang.String toString()>()";
    "$r30 = virtualinvoke r73.<java.lang.Object: java.lang.String toString()>()"->"$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30)";
    "$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30)"->"$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32)";
    "specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32)"->"throw $r27";
    "$r10 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"if $r10 != null goto $r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "if $r10 != null goto $r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"$r26 = new java.util.HashMap";
    "if $r10 != null goto $r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"$r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "$r26 = new java.util.HashMap"->"specialinvoke $r26.<java.util.HashMap: void <init>()>()";
    "specialinvoke $r26.<java.util.HashMap: void <init>()>()"->"r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex> = $r26";
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex> = $r26"->"$r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "$r11 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"if $r11 != null goto $r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "if $r11 != null goto $r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r25 = new java.util.ArrayList";
    "if $r11 != null goto $r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "$r25 = new java.util.ArrayList"->"specialinvoke $r25.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r25.<java.util.ArrayList: void <init>()>()"->"r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName> = $r25";
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName> = $r25"->"$r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "$r12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$i9 = virtualinvoke $r12.<java.util.HashMap: int size()>()";
    "$i9 = virtualinvoke $r12.<java.util.HashMap: int size()>()"->"$r13 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "$r13 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"$i10 = virtualinvoke $r13.<java.util.ArrayList: int size()>()";
    "$i10 = virtualinvoke $r13.<java.util.ArrayList: int size()>()"->"if $i9 == $i10 goto $r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "if $i9 == $i10 goto $r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r24 = new java.io.IOException";
    "if $i9 == $i10 goto $r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "$r24 = new java.io.IOException"->"specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>(\"featureIndex.size() != featureName.size()\")";
    "specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>(\"featureIndex.size() != featureName.size()\")"->"throw $r24";
    "$r14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r74)";
    "$r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r74)"->"r75 = (java.lang.Integer) $r15";
    "r75 = (java.lang.Integer) $r15"->"if r75 != null goto $i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()";
    "if r75 != null goto $i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()"->"$r16 = \"(INTERCEPT)\"";
    "if r75 != null goto $i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()"->"$i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()";
    "$r16 = \"(INTERCEPT)\""->"$z11 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r74)";
    "$z11 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r74)"->"if $z11 == 0 goto $i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "if $z11 == 0 goto $i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$r23 = new java.io.IOException";
    "if $z11 == 0 goto $i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "$r23 = new java.io.IOException"->"specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>(\"feature name cannot be (INTERCEPT)\")";
    "specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>(\"feature name cannot be (INTERCEPT)\")"->"throw $r23";
    "$i12 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$i13 = $i12 + 1";
    "$i13 = $i12 + 1"->"r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex> = $i13";
    "r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex> = $i13"->"$r17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>";
    "$r17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.HashMap featureIndex>"->"$i14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "$i14 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)"->"virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r74, $r18)";
    "virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r74, $r18)"->"$r20 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "$r20 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r74)";
    "virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r74)"->"$r21 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>";
    "$r21 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList featureName>"->"$i15 = virtualinvoke $r21.<java.util.ArrayList: int size()>()";
    "$i15 = virtualinvoke $r21.<java.util.ArrayList: int size()>()"->"$i16 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "$i16 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"if $i15 == $i16 goto $i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "if $i15 == $i16 goto $i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$r22 = new java.io.IOException";
    "if $i15 == $i16 goto $i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"$i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "$r22 = new java.io.IOException"->"specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>(\"featureName.size() != maxFeatureIndex\")";
    "specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>(\"featureName.size() != maxFeatureIndex\")"->"throw $r22";
    "$i17 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17)";
    "r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17)"->"$i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()";
    "$i11 = virtualinvoke r75.<java.lang.Integer: int intValue()>()"->"r71[i28] = $i11";
    "r71[i28] = $i11"->"i28 = i28 + 1";
    "i28 = i28 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i28 >= i2 goto (branch)";
    "if i2 <= 1 goto $z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>"->"staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r71, 0, i2)";
    "if i2 <= 1 goto $z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>"->"$z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>";
    "staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r71, 0, i2)"->"$z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>";
    "$z5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: boolean useShort>"->"if $z5 == 0 goto $r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>";
    "if $z5 == 0 goto $r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>"->"$i4 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>";
    "if $z5 == 0 goto $r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>"->"$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>";
    "$i4 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: int maxFeatureIndex>"->"if $i4 < 32767 goto $i5 = lengthof r71";
    "if $i4 < 32767 goto $i5 = lengthof r71"->"$r7 = new java.io.IOException";
    "if $i4 < 32767 goto $i5 = lengthof r71"->"$i5 = lengthof r71";
    "$r7 = new java.io.IOException"->"specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>(\"When using short to store feature indices, you cannot have more than 32766 features!!\")";
    "specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>(\"When using short to store feature indices, you cannot have more than 32766 features!!\")"->"throw $r7";
    "$i5 = lengthof r71"->"r76 = newarray (short)[$i5]";
    "r76 = newarray (short)[$i5]"->"i29 = 0";
    "i29 = 0"->"$i6 = lengthof r76";
    "$i6 = lengthof r76"->"if i29 >= $i6 goto $r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>";
    "if i29 >= $i6 goto $r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>"->"$i7 = r71[i29]";
    "if i29 >= $i6 goto $r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>"->"$r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>";
    "$i7 = r71[i29]"->"$s8 = (short) $i7";
    "$s8 = (short) $i7"->"r76[i29] = $s8";
    "r76[i29] = $s8"->"i29 = i29 + 1";
    "i29 = i29 + 1"->"goto [?= $i6 = lengthof r76]";
    "goto [?= $i6 = lengthof r76]"->"$i6 = lengthof r76";
    "$r6 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_short>"->"virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r76)";
    "virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r76)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r5 = r0.<com.linkedin.mlease.regression.liblinearfunc.LibLinearBinaryDataset: java.util.ArrayList x_int>"->"virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r71)";
    "virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r71)"->"return";
}
