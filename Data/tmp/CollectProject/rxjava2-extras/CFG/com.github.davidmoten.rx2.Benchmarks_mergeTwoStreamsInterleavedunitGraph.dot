digraph "unitGraph" {
    "r11 := @this: com.github.davidmoten.rx2.Benchmarks"
    "$r2 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"
    "$r1 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"
    "$r0 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"
    "$r3 = staticinvoke <io.reactivex.Flowable: io.reactivex.Flowable just(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, $r0)"
    "$r12 = (org.reactivestreams.Publisher) $r3"
    "$r4 = staticinvoke <com.github.davidmoten.rx2.Flowables: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder mergeInterleaved(org.reactivestreams.Publisher)>($r12)"
    "$r5 = virtualinvoke $r4.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder maxConcurrency(int)>(4)"
    "$r6 = virtualinvoke $r5.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder batchSize(int)>(128)"
    "$r7 = virtualinvoke $r6.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: io.reactivex.Flowable build()>()"
    "$r8 = virtualinvoke $r7.<io.reactivex.Flowable: io.reactivex.Single count()>()"
    "$r9 = virtualinvoke $r8.<io.reactivex.Single: java.lang.Object blockingGet()>()"
    "$r10 = (java.lang.Long) $r9"
    "return $r10"
    "r11 := @this: com.github.davidmoten.rx2.Benchmarks"->"$r2 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>";
    "$r2 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"->"$r1 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>";
    "$r1 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"->"$r0 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>";
    "$r0 = <com.github.davidmoten.rx2.Benchmarks: io.reactivex.Flowable range>"->"$r3 = staticinvoke <io.reactivex.Flowable: io.reactivex.Flowable just(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, $r0)";
    "$r3 = staticinvoke <io.reactivex.Flowable: io.reactivex.Flowable just(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, $r0)"->"$r12 = (org.reactivestreams.Publisher) $r3";
    "$r12 = (org.reactivestreams.Publisher) $r3"->"$r4 = staticinvoke <com.github.davidmoten.rx2.Flowables: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder mergeInterleaved(org.reactivestreams.Publisher)>($r12)";
    "$r4 = staticinvoke <com.github.davidmoten.rx2.Flowables: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder mergeInterleaved(org.reactivestreams.Publisher)>($r12)"->"$r5 = virtualinvoke $r4.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder maxConcurrency(int)>(4)";
    "$r5 = virtualinvoke $r4.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder maxConcurrency(int)>(4)"->"$r6 = virtualinvoke $r5.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder batchSize(int)>(128)";
    "$r6 = virtualinvoke $r5.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder batchSize(int)>(128)"->"$r7 = virtualinvoke $r6.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: io.reactivex.Flowable build()>()";
    "$r7 = virtualinvoke $r6.<com.github.davidmoten.rx2.Flowables$MergeInterleaveBuilder: io.reactivex.Flowable build()>()"->"$r8 = virtualinvoke $r7.<io.reactivex.Flowable: io.reactivex.Single count()>()";
    "$r8 = virtualinvoke $r7.<io.reactivex.Flowable: io.reactivex.Single count()>()"->"$r9 = virtualinvoke $r8.<io.reactivex.Single: java.lang.Object blockingGet()>()";
    "$r9 = virtualinvoke $r8.<io.reactivex.Single: java.lang.Object blockingGet()>()"->"$r10 = (java.lang.Long) $r9";
    "$r10 = (java.lang.Long) $r9"->"return $r10";
}
