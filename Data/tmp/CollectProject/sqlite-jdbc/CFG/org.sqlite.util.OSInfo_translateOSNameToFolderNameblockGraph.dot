digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
$z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Windows\");
if $z0 == 0 goto $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
"
    "Block 1:
[preds: 0 ] [succs: ]
return \"Windows\";
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
if $z1 != 0 goto return \"Mac\";
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Darwin\");
if $z2 == 0 goto $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
"
    "Block 4:
[preds: 2 3 ] [succs: ]
return \"Mac\";
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
if $z3 == 0 goto $z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
"
    "Block 6:
[preds: 5 ] [succs: ]
return \"AIX\";
"
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
if $z4 == 0 goto $z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
"
    "Block 8:
[preds: 7 ] [succs: ]
return \"Linux-Musl\";
"
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
if $z5 == 0 goto $z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
"
    "Block 10:
[preds: 9 ] [succs: ]
return \"Linux-Android\";
"
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
if $z6 == 0 goto $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
"
    "Block 12:
[preds: 11 ] [succs: ]
return \"Linux\";
"
    "Block 13:
[preds: 11 ] [succs: ]
$r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
return $r1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
$z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Windows\");
if $z0 == 0 goto $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
"->"Block 1:
[preds: 0 ] [succs: ]
return \"Windows\";
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String;
$z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Windows\");
if $z0 == 0 goto $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
if $z1 != 0 goto return \"Mac\";
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
if $z1 != 0 goto return \"Mac\";
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Darwin\");
if $z2 == 0 goto $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Mac\");
if $z1 != 0 goto return \"Mac\";
"->"Block 4:
[preds: 2 3 ] [succs: ]
return \"Mac\";
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Darwin\");
if $z2 == 0 goto $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
"->"Block 4:
[preds: 2 3 ] [succs: ]
return \"Mac\";
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Darwin\");
if $z2 == 0 goto $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
$z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
if $z3 == 0 goto $z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
if $z3 == 0 goto $z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
"->"Block 6:
[preds: 5 ] [succs: ]
return \"AIX\";
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"AIX\");
if $z3 == 0 goto $z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
"->"Block 7:
[preds: 5 ] [succs: 8 9 ]
$z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
if $z4 == 0 goto $z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
if $z4 == 0 goto $z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
"->"Block 8:
[preds: 7 ] [succs: ]
return \"Linux-Musl\";
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z4 = staticinvoke <org.sqlite.util.OSInfo: boolean isMusl()>();
if $z4 == 0 goto $z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
"->"Block 9:
[preds: 7 ] [succs: 10 11 ]
$z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
if $z5 == 0 goto $z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
if $z5 == 0 goto $z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
"->"Block 10:
[preds: 9 ] [succs: ]
return \"Linux-Android\";
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z5 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>();
if $z5 == 0 goto $z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
"->"Block 11:
[preds: 9 ] [succs: 12 13 ]
$z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
if $z6 == 0 goto $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
if $z6 == 0 goto $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
"->"Block 12:
[preds: 11 ] [succs: ]
return \"Linux\";
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$z6 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\");
if $z6 == 0 goto $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
"->"Block 13:
[preds: 11 ] [succs: ]
$r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\\W\", \"\");
return $r1;
";
}
