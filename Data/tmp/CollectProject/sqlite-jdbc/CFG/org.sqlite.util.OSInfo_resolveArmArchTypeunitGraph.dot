digraph "unitGraph" {
    "$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"
    "$z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\")"
    "if $z0 == 0 goto return \"arm\""
    "r1 = staticinvoke <org.sqlite.util.OSInfo: java.lang.String getHardwareName()>()"
    "$z1 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>()"
    "if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")"
    "$z7 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"
    "if $z7 == 0 goto return \"arm\""
    "return \"aarch64\""
    "return \"arm\""
    "$z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")"
    "if $z2 == 0 goto $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")"
    "return \"armv6\""
    "$z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")"
    "if $z3 == 0 goto $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")"
    "return \"armv7\""
    "$z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")"
    "if $z4 == 0 goto $z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"
    "$z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"
    "if $z5 == 0 goto r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")"
    "r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")"
    "if r2 == null goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"
    "$z6 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"gnueabihf\")"
    "if $z6 == 0 goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"
    "r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"
    "$r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"
    "$r5 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(\"which readelf\")"
    "i0 = virtualinvoke $r5.<java.lang.Process: int waitFor()>()"
    "if i0 != 0 goto $r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"
    "$r7 = newarray (java.lang.String)[3]"
    "$r7[0] = \"/bin/sh\""
    "$r7[1] = \"-c\""
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"find \'\")"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' -name \'libjvm.so\' | head -1 | xargs readelf -A | grep \'Tag_ABI_VFP_args: VFP registers\'\")"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r7[2] = $r12"
    "r13 = $r7"
    "$r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"
    "$r15 = virtualinvoke $r14.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r13)"
    "i1 = virtualinvoke $r15.<java.lang.Process: int waitFor()>()"
    "if i1 != 0 goto (branch)"
    "goto [?= (branch)]"
    "$r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"
    "interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>(\"readelf not found. Cannot check if running on an armhf system, armel architecture will be presumed\")"
    "goto [?= return \"arm\"]"
    "$r16 := @caughtexception"
    "r17 = $r16"
    "$r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"os.name\")"->"$z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\")";
    "$z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"Linux\")"->"if $z0 == 0 goto return \"arm\"";
    "if $z0 == 0 goto return \"arm\""->"r1 = staticinvoke <org.sqlite.util.OSInfo: java.lang.String getHardwareName()>()";
    "if $z0 == 0 goto return \"arm\""->"return \"arm\"";
    "r1 = staticinvoke <org.sqlite.util.OSInfo: java.lang.String getHardwareName()>()"->"$z1 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>()";
    "$z1 = staticinvoke <org.sqlite.util.OSInfo: boolean isAndroid()>()"->"if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")";
    "if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")"->"$z7 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")";
    "if $z1 == 0 goto $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")"->"$z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")";
    "$z7 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"->"if $z7 == 0 goto return \"arm\"";
    "if $z7 == 0 goto return \"arm\""->"return \"aarch64\"";
    "if $z7 == 0 goto return \"arm\""->"return \"arm\"";
    "$z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv6\")"->"if $z2 == 0 goto $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")";
    "if $z2 == 0 goto $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")"->"return \"armv6\"";
    "if $z2 == 0 goto $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")"->"$z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")";
    "$z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv7\")"->"if $z3 == 0 goto $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")";
    "if $z3 == 0 goto $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")"->"return \"armv7\"";
    "if $z3 == 0 goto $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")"->"$z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")";
    "$z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"armv5\")"->"if $z4 == 0 goto $z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")";
    "if $z4 == 0 goto $z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"->"return \"arm\"";
    "if $z4 == 0 goto $z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"->"$z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")";
    "$z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(\"aarch64\")"->"if $z5 == 0 goto r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")";
    "if $z5 == 0 goto r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")"->"return \"aarch64\"";
    "if $z5 == 0 goto r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")"->"r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")";
    "r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"sun.arch.abi\")"->"if r2 == null goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")";
    "if r2 == null goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"$z6 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"gnueabihf\")";
    "if r2 == null goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")";
    "$z6 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(\"gnueabihf\")"->"if $z6 == 0 goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")";
    "if $z6 == 0 goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"return \"armv7\"";
    "if $z6 == 0 goto r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")";
    "r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"$r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()";
    "r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(\"java.home\")"->"$r16 := @caughtexception";
    "$r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"->"$r5 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(\"which readelf\")";
    "$r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"->"$r16 := @caughtexception";
    "$r5 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(\"which readelf\")"->"i0 = virtualinvoke $r5.<java.lang.Process: int waitFor()>()";
    "$r5 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(\"which readelf\")"->"$r16 := @caughtexception";
    "i0 = virtualinvoke $r5.<java.lang.Process: int waitFor()>()"->"if i0 != 0 goto $r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()";
    "i0 = virtualinvoke $r5.<java.lang.Process: int waitFor()>()"->"$r16 := @caughtexception";
    "if i0 != 0 goto $r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"->"$r7 = newarray (java.lang.String)[3]";
    "if i0 != 0 goto $r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"->"$r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()";
    "if i0 != 0 goto $r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"->"$r16 := @caughtexception";
    "$r7 = newarray (java.lang.String)[3]"->"$r7[0] = \"/bin/sh\"";
    "$r7 = newarray (java.lang.String)[3]"->"$r16 := @caughtexception";
    "$r7[0] = \"/bin/sh\""->"$r7[1] = \"-c\"";
    "$r7[0] = \"/bin/sh\""->"$r16 := @caughtexception";
    "$r7[1] = \"-c\""->"$r8 = new java.lang.StringBuilder";
    "$r7[1] = \"-c\""->"$r16 := @caughtexception";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "$r8 = new java.lang.StringBuilder"->"$r16 := @caughtexception";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"find \'\")";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r16 := @caughtexception";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"find \'\")"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"find \'\")"->"$r16 := @caughtexception";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' -name \'libjvm.so\' | head -1 | xargs readelf -A | grep \'Tag_ABI_VFP_args: VFP registers\'\")";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)"->"$r16 := @caughtexception";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' -name \'libjvm.so\' | head -1 | xargs readelf -A | grep \'Tag_ABI_VFP_args: VFP registers\'\")"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\' -name \'libjvm.so\' | head -1 | xargs readelf -A | grep \'Tag_ABI_VFP_args: VFP registers\'\")"->"$r16 := @caughtexception";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r7[2] = $r12";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r16 := @caughtexception";
    "$r7[2] = $r12"->"r13 = $r7";
    "$r7[2] = $r12"->"$r16 := @caughtexception";
    "r13 = $r7"->"$r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()";
    "r13 = $r7"->"$r16 := @caughtexception";
    "$r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"->"$r15 = virtualinvoke $r14.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r13)";
    "$r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()"->"$r16 := @caughtexception";
    "$r15 = virtualinvoke $r14.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r13)"->"i1 = virtualinvoke $r15.<java.lang.Process: int waitFor()>()";
    "$r15 = virtualinvoke $r14.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r13)"->"$r16 := @caughtexception";
    "i1 = virtualinvoke $r15.<java.lang.Process: int waitFor()>()"->"if i1 != 0 goto (branch)";
    "i1 = virtualinvoke $r15.<java.lang.Process: int waitFor()>()"->"$r16 := @caughtexception";
    "if i1 != 0 goto (branch)"->"return \"armv7\"";
    "if i1 != 0 goto (branch)"->"goto [?= (branch)]";
    "if i1 != 0 goto (branch)"->"$r16 := @caughtexception";
    "goto [?= (branch)]"->"goto [?= return \"arm\"]";
    "goto [?= (branch)]"->"$r16 := @caughtexception";
    "$r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"->"interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>(\"readelf not found. Cannot check if running on an armhf system, armel architecture will be presumed\")";
    "$r6 = staticinvoke <org.sqlite.util.OSInfo$LogHolder: org.slf4j.Logger access$000()>()"->"$r16 := @caughtexception";
    "interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>(\"readelf not found. Cannot check if running on an armhf system, armel architecture will be presumed\")"->"goto [?= return \"arm\"]";
    "interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>(\"readelf not found. Cannot check if running on an armhf system, armel architecture will be presumed\")"->"$r16 := @caughtexception";
    "goto [?= return \"arm\"]"->"return \"arm\"";
    "$r16 := @caughtexception"->"r17 = $r16";
    "r17 = $r16"->"return \"arm\"";
}
