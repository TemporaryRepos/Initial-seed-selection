digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 6 ]
r6 := @parameter0: org.yinwang.pysonar.ast.Node;
r0 := @parameter1: org.yinwang.pysonar.Binding;
r14 := @parameter2: com.fasterxml.jackson.core.JsonGenerator;
$r1 = virtualinvoke r0.<org.yinwang.pysonar.Binding: java.lang.String getFile()>();
if $r1 == null goto return;
"
    "Block 1:
[preds: 0 ] [succs: 2 6 ]
$r2 = r0.<org.yinwang.pysonar.Binding: java.lang.String qname>;
$r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\".\", \"/\");
r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\"%20\", \".\");
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r7 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$i0 = r6.<org.yinwang.pysonar.ast.Node: int start>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
$z0 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r11);
if $z0 != 0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
$r13 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r11);
$i1 = r0.<org.yinwang.pysonar.Binding: int start>;
if $i1 < 0 goto return;
"
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
$i2 = r6.<org.yinwang.pysonar.ast.Node: int start>;
if $i2 < 0 goto return;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z2 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
if $z2 != 0 goto return;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"sym\", r4);
$r15 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"file\", $r15);
$i3 = r6.<org.yinwang.pysonar.ast.Node: int start>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"start\", $i3);
$i4 = r6.<org.yinwang.pysonar.ast.Node: int end>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"end\", $i4);
$z3 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeBooleanField(java.lang.String,boolean)>(\"builtin\", $z3);
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
"
    "Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 6 ]
r6 := @parameter0: org.yinwang.pysonar.ast.Node;
r0 := @parameter1: org.yinwang.pysonar.Binding;
r14 := @parameter2: com.fasterxml.jackson.core.JsonGenerator;
$r1 = virtualinvoke r0.<org.yinwang.pysonar.Binding: java.lang.String getFile()>();
if $r1 == null goto return;
"->"Block 1:
[preds: 0 ] [succs: 2 6 ]
$r2 = r0.<org.yinwang.pysonar.Binding: java.lang.String qname>;
$r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\".\", \"/\");
r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\"%20\", \".\");
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r7 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$i0 = r6.<org.yinwang.pysonar.ast.Node: int start>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
$z0 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r11);
if $z0 != 0 goto return;
";
    "Block 0:
[preds: ] [succs: 1 6 ]
r6 := @parameter0: org.yinwang.pysonar.ast.Node;
r0 := @parameter1: org.yinwang.pysonar.Binding;
r14 := @parameter2: com.fasterxml.jackson.core.JsonGenerator;
$r1 = virtualinvoke r0.<org.yinwang.pysonar.Binding: java.lang.String getFile()>();
if $r1 == null goto return;
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
    "Block 1:
[preds: 0 ] [succs: 2 6 ]
$r2 = r0.<org.yinwang.pysonar.Binding: java.lang.String qname>;
$r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\".\", \"/\");
r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\"%20\", \".\");
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r7 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$i0 = r6.<org.yinwang.pysonar.ast.Node: int start>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
$z0 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r11);
if $z0 != 0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 6 ]
$r13 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r11);
$i1 = r0.<org.yinwang.pysonar.Binding: int start>;
if $i1 < 0 goto return;
";
    "Block 1:
[preds: 0 ] [succs: 2 6 ]
$r2 = r0.<org.yinwang.pysonar.Binding: java.lang.String qname>;
$r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\".\", \"/\");
r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\"%20\", \".\");
$r5 = new java.lang.StringBuilder;
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
$r7 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\":\");
$i0 = r6.<org.yinwang.pysonar.ast.Node: int start>;
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
$r12 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
$z0 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>(r11);
if $z0 != 0 goto return;
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
$r13 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r11);
$i1 = r0.<org.yinwang.pysonar.Binding: int start>;
if $i1 < 0 goto return;
"->"Block 3:
[preds: 2 ] [succs: 4 6 ]
$i2 = r6.<org.yinwang.pysonar.ast.Node: int start>;
if $i2 < 0 goto return;
";
    "Block 2:
[preds: 1 ] [succs: 3 6 ]
$r13 = <org.yinwang.pysonar.JSONDump: java.util.Set seenRef>;
interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r11);
$i1 = r0.<org.yinwang.pysonar.Binding: int start>;
if $i1 < 0 goto return;
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
$i2 = r6.<org.yinwang.pysonar.ast.Node: int start>;
if $i2 < 0 goto return;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$z2 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
if $z2 != 0 goto return;
";
    "Block 3:
[preds: 2 ] [succs: 4 6 ]
$i2 = r6.<org.yinwang.pysonar.ast.Node: int start>;
if $i2 < 0 goto return;
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z2 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
if $z2 != 0 goto return;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"sym\", r4);
$r15 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"file\", $r15);
$i3 = r6.<org.yinwang.pysonar.ast.Node: int start>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"start\", $i3);
$i4 = r6.<org.yinwang.pysonar.ast.Node: int end>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"end\", $i4);
$z3 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeBooleanField(java.lang.String,boolean)>(\"builtin\", $z3);
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z2 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
if $z2 != 0 goto return;
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"sym\", r4);
$r15 = r6.<org.yinwang.pysonar.ast.Node: java.lang.String file>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(\"file\", $r15);
$i3 = r6.<org.yinwang.pysonar.ast.Node: int start>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"start\", $i3);
$i4 = r6.<org.yinwang.pysonar.ast.Node: int end>;
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeNumberField(java.lang.String,int)>(\"end\", $i4);
$z3 = virtualinvoke r0.<org.yinwang.pysonar.Binding: boolean isBuiltin()>();
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeBooleanField(java.lang.String,boolean)>(\"builtin\", $z3);
virtualinvoke r14.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
"->"Block 6:
[preds: 0 1 2 3 4 5 ] [succs: ]
return;
";
}
