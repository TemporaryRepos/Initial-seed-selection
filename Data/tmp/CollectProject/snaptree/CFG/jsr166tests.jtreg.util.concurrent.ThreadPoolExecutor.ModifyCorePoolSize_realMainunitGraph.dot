digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "b0 = 10"
    "$r0 = new java.util.concurrent.ScheduledThreadPoolExecutor"
    "specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(10)"
    "r1 = $r0"
    "$r2 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1"
    "specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1: void <init>()>()"
    "r3 = $r2"
    "i4 = 0"
    "if i4 >= 10 goto staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)"
    "$i1 = i4 + 1"
    "$l2 = (long) $i1"
    "$l3 = 100L * $l2"
    "$r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>"
    "virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, $l3, 1000L, $r6)"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 7)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 13)"
    "virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>()"
    "$r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>"
    "$z0 = virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(1L, $r5)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void check(boolean)>($z0)"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"b0 = 10";
    "b0 = 10"->"$r0 = new java.util.concurrent.ScheduledThreadPoolExecutor";
    "$r0 = new java.util.concurrent.ScheduledThreadPoolExecutor"->"specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(10)";
    "specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(10)"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1";
    "$r2 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1"->"specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1: void <init>()>()";
    "specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize$1: void <init>()>()"->"r3 = $r2";
    "r3 = $r2"->"i4 = 0";
    "i4 = 0"->"if i4 >= 10 goto staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)";
    "if i4 >= 10 goto staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)"->"$i1 = i4 + 1";
    "if i4 >= 10 goto staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)";
    "$i1 = i4 + 1"->"$l2 = (long) $i1";
    "$l2 = (long) $i1"->"$l3 = 100L * $l2";
    "$l3 = 100L * $l2"->"$r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>";
    "$r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>"->"virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, $l3, 1000L, $r6)";
    "virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, $l3, 1000L, $r6)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= 10 goto staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 7)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 7)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 13)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void setCorePoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r1, 13)"->"virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>()";
    "virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>()"->"$r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>";
    "$r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>"->"$z0 = virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(1L, $r5)";
    "$z0 = virtualinvoke r1.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(1L, $r5)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void check(boolean)>($z0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void check(boolean)>($z0)"->"return";
}
