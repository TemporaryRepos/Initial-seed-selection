digraph "unitGraph" {
    "r2 := @parameter0: jsr166tests.loops.MapMicroBenchmark$Job[]"
    "i2 := @parameter1: int"
    "i3 := @parameter2: int"
    "l4 := @parameter3: long"
    "i6 = 0"
    "if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>"
    "$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"
    "i0 = $r1[i6]"
    "i7 = 0"
    "$i1 = lengthof r2"
    "if i7 >= $i1 goto i6 = i6 + 1"
    "staticinvoke <java.lang.Thread: void sleep(long)>(50L)"
    "$r3 = r2[i7]"
    "$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>"
    "$r4 = r2[i7]"
    "$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4)"
    "$r5[i6] = $l5"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\")"
    "i7 = i7 + 1"
    "goto [?= $i1 = lengthof r2]"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "$r0 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r0.<java.io.PrintStream: void println()>()"
    "return"
    "r2 := @parameter0: jsr166tests.loops.MapMicroBenchmark$Job[]"->"i2 := @parameter1: int";
    "i2 := @parameter1: int"->"i3 := @parameter2: int";
    "i3 := @parameter2: int"->"l4 := @parameter3: long";
    "l4 := @parameter3: long"->"i6 = 0";
    "i6 = 0"->"if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>";
    "if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>"->"$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
    "if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>"->"$r0 = <java.lang.System: java.io.PrintStream out>";
    "$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"i0 = $r1[i6]";
    "i0 = $r1[i6]"->"i7 = 0";
    "i7 = 0"->"$i1 = lengthof r2";
    "$i1 = lengthof r2"->"if i7 >= $i1 goto i6 = i6 + 1";
    "if i7 >= $i1 goto i6 = i6 + 1"->"staticinvoke <java.lang.Thread: void sleep(long)>(50L)";
    "if i7 >= $i1 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "staticinvoke <java.lang.Thread: void sleep(long)>(50L)"->"$r3 = r2[i7]";
    "$r3 = r2[i7]"->"$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>";
    "$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>"->"$r4 = r2[i7]";
    "$r4 = r2[i7]"->"$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4)";
    "$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4)"->"$r5[i6] = $l5";
    "$r5[i6] = $l5"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\")";
    "virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\")"->"i7 = i7 + 1";
    "i7 = i7 + 1"->"goto [?= $i1 = lengthof r2]";
    "goto [?= $i1 = lengthof r2]"->"$i1 = lengthof r2";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>";
    "$r0 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r0.<java.io.PrintStream: void println()>()";
    "virtualinvoke $r0.<java.io.PrintStream: void println()>()"->"return";
}
