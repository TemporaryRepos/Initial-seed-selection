digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r33 := @parameter0: java.lang.String[];
$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE;
specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void <init>()>();
r1 = $r0;
$i0 = virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: int getCorePoolSize()>();
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r2, $r3);
$i1 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r4, $r5);
i11 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1;
specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>();
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31);
i11 = i11 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7);
$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>;
$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10);
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>();
$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13);
$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE;
specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>();
r34 = $r14;
i12 = 0;
"
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
"
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2;
specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>();
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29);
i12 = i12 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17);
$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19);
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>();
$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22);
$r24 = <java.lang.System: java.io.PrintStream out>;
$r23 = newarray (java.lang.Object)[2];
$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>;
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
$r23[0] = $r25;
$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);
$r23[1] = $r26;
virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23);
$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
if $i10 <= 0 goto return;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r28 = new java.lang.Exception;
specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r28;
"
    "Block 8:
[preds: 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r33 := @parameter0: java.lang.String[];
$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE;
specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void <init>()>();
r1 = $r0;
$i0 = virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: int getCorePoolSize()>();
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r2, $r3);
$i1 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r4, $r5);
i11 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1;
specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>();
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31);
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7);
$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>;
$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10);
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>();
$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13);
$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE;
specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>();
r34 = $r14;
i12 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1;
specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>();
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31);
i11 = i11 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7);
$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>;
$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10);
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>();
$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13);
$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE;
specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>();
r34 = $r14;
i12 = 0;
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
"->"Block 5:
[preds: 4 ] [succs: 4 ]
$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2;
specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>();
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29);
i12 = i12 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17);
$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19);
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>();
$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22);
$r24 = <java.lang.System: java.io.PrintStream out>;
$r23 = newarray (java.lang.Object)[2];
$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>;
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
$r23[0] = $r25;
$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);
$r23[1] = $r26;
virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23);
$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
if $i10 <= 0 goto return;
";
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2;
specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>();
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29);
i12 = i12 + 1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17);
$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19);
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>();
$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22);
$r24 = <java.lang.System: java.io.PrintStream out>;
$r23 = newarray (java.lang.Object)[2];
$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>;
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
$r23[0] = $r25;
$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);
$r23[1] = $r26;
virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23);
$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
if $i10 <= 0 goto return;
"->"Block 7:
[preds: 6 ] [succs: ]
$r28 = new java.lang.Exception;
specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>(\"Some tests failed\");
throw $r28;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>;
$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17);
$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19);
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>();
$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20);
staticinvoke <java.lang.Thread: void sleep(long)>(10L);
$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>();
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22);
$r24 = <java.lang.System: java.io.PrintStream out>;
$r23 = newarray (java.lang.Object)[2];
$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>;
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
$r23[0] = $r25;
$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);
$r23[1] = $r26;
virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23);
$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>;
if $i10 <= 0 goto return;
"->"Block 8:
[preds: 6 ] [succs: ]
return;
";
}
