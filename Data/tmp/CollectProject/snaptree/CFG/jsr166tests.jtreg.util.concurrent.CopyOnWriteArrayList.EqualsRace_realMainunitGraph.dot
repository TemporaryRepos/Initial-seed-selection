digraph "unitGraph" {
    "r8 := @parameter0: java.lang.String[]"
    "i0 = 100000"
    "$r0 = new java.util.concurrent.CopyOnWriteArrayList"
    "specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()"
    "r1 = $r0"
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "$r3 = newarray (java.lang.Integer)[1]"
    "$r3[0] = r2"
    "r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3)"
    "$r5 = new jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1"
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1: void <init>(java.util.List,java.lang.Integer)>(r1, r2)"
    "r6 = $r5"
    "virtualinvoke r6.<java.lang.Thread: void start()>()"
    "i2 = 0"
    "if i2 >= 100000 goto virtualinvoke r6.<java.lang.Thread: void join()>()"
    "interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>(r4)"
    "$r7 = <java.util.Collections: java.util.List EMPTY_LIST>"
    "interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>($r7)"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r6.<java.lang.Thread: void join()>()"
    "$i1 = interfaceinvoke r1.<java.util.List: int size()>()"
    "if $i1 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)]"
    "$z2 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)"
    "return"
    "r8 := @parameter0: java.lang.String[]"->"i0 = 100000";
    "i0 = 100000"->"$r0 = new java.util.concurrent.CopyOnWriteArrayList";
    "$r0 = new java.util.concurrent.CopyOnWriteArrayList"->"specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r3 = newarray (java.lang.Integer)[1]";
    "$r3 = newarray (java.lang.Integer)[1]"->"$r3[0] = r2";
    "$r3[0] = r2"->"r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3)";
    "r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3)"->"$r5 = new jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1";
    "$r5 = new jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1"->"specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1: void <init>(java.util.List,java.lang.Integer)>(r1, r2)";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace$1: void <init>(java.util.List,java.lang.Integer)>(r1, r2)"->"r6 = $r5";
    "r6 = $r5"->"virtualinvoke r6.<java.lang.Thread: void start()>()";
    "virtualinvoke r6.<java.lang.Thread: void start()>()"->"i2 = 0";
    "i2 = 0"->"if i2 >= 100000 goto virtualinvoke r6.<java.lang.Thread: void join()>()";
    "if i2 >= 100000 goto virtualinvoke r6.<java.lang.Thread: void join()>()"->"interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>(r4)";
    "if i2 >= 100000 goto virtualinvoke r6.<java.lang.Thread: void join()>()"->"virtualinvoke r6.<java.lang.Thread: void join()>()";
    "interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>(r4)"->"$r7 = <java.util.Collections: java.util.List EMPTY_LIST>";
    "$r7 = <java.util.Collections: java.util.List EMPTY_LIST>"->"interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>($r7)";
    "interfaceinvoke r1.<java.util.List: boolean equals(java.lang.Object)>($r7)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= 100000 goto virtualinvoke r6.<java.lang.Thread: void join()>()";
    "virtualinvoke r6.<java.lang.Thread: void join()>()"->"$i1 = interfaceinvoke r1.<java.util.List: int size()>()";
    "$i1 = interfaceinvoke r1.<java.util.List: int size()>()"->"if $i1 != 0 goto $z2 = 0";
    "if $i1 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $i1 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)";
    "$z2 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CopyOnWriteArrayList.EqualsRace: void check(boolean)>($z2)"->"return";
}
