digraph "unitGraph" {
    "r2 := @this: jsr166tests.jtreg.util.Hashtable.ReadObject"
    "r4 := @parameter0: java.lang.Object"
    "r0 := @parameter1: java.lang.Object"
    "$z0 = r0 instanceof jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"
    "if $z0 == 0 goto $r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"
    "$r6 = new java.lang.RuntimeException"
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Hashtable.put bug: value is already wrapped\")"
    "throw $r6"
    "$r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"
    "specialinvoke $r1.<jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper: void <init>(jsr166tests.jtreg.util.Hashtable.ReadObject,java.lang.Object)>(r2, r0)"
    "r3 = $r1"
    "specialinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r3)"
    "return r0"
    "r2 := @this: jsr166tests.jtreg.util.Hashtable.ReadObject"->"r4 := @parameter0: java.lang.Object";
    "r4 := @parameter0: java.lang.Object"->"r0 := @parameter1: java.lang.Object";
    "r0 := @parameter1: java.lang.Object"->"$z0 = r0 instanceof jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper";
    "$z0 = r0 instanceof jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"->"if $z0 == 0 goto $r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper";
    "if $z0 == 0 goto $r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"->"$r6 = new java.lang.RuntimeException";
    "if $z0 == 0 goto $r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"->"$r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper";
    "$r6 = new java.lang.RuntimeException"->"specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Hashtable.put bug: value is already wrapped\")";
    "specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(\"Hashtable.put bug: value is already wrapped\")"->"throw $r6";
    "$r1 = new jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper"->"specialinvoke $r1.<jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper: void <init>(jsr166tests.jtreg.util.Hashtable.ReadObject,java.lang.Object)>(r2, r0)";
    "specialinvoke $r1.<jsr166tests.jtreg.util.Hashtable.ReadObject$ValueWrapper: void <init>(jsr166tests.jtreg.util.Hashtable.ReadObject,java.lang.Object)>(r2, r0)"->"r3 = $r1";
    "r3 = $r1"->"specialinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r3)";
    "specialinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r3)"->"return r0";
}
