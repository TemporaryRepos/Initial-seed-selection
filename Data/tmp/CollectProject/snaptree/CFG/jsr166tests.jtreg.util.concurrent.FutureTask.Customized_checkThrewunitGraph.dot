digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.FutureTask"
    "$z0 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isDone()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z0)"
    "$z1 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isCancelled()>()"
    "if $z1 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)]"
    "$z2 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)"
    "$r1 = newarray (jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun)[2]"
    "$r2 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4"
    "specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4: void <init>(java.util.concurrent.FutureTask)>(r0)"
    "$r1[0] = $r2"
    "$r3 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5"
    "specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5: void <init>(java.util.concurrent.FutureTask)>(r0)"
    "$r1[1] = $r3"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[])>(class \"Ljava/util/concurrent/ExecutionException;\", $r1)"
    "return"
    "r0 := @parameter0: java.util.concurrent.FutureTask"->"$z0 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isDone()>()";
    "$z0 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isDone()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z0)"->"$z1 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isCancelled()>()";
    "$z1 = virtualinvoke r0.<java.util.concurrent.FutureTask: boolean isCancelled()>()"->"if $z1 != 0 goto $z2 = 0";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)";
    "$z2 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void check(boolean)>($z2)"->"$r1 = newarray (jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun)[2]";
    "$r1 = newarray (jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun)[2]"->"$r2 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4";
    "$r2 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4"->"specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4: void <init>(java.util.concurrent.FutureTask)>(r0)";
    "specialinvoke $r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$4: void <init>(java.util.concurrent.FutureTask)>(r0)"->"$r1[0] = $r2";
    "$r1[0] = $r2"->"$r3 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5";
    "$r3 = new jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5"->"specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5: void <init>(java.util.concurrent.FutureTask)>(r0)";
    "specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$5: void <init>(java.util.concurrent.FutureTask)>(r0)"->"$r1[1] = $r3";
    "$r1[1] = $r3"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[])>(class \"Ljava/util/concurrent/ExecutionException;\", $r1)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[])>(class \"Ljava/util/concurrent/ExecutionException;\", $r1)"->"return";
}
