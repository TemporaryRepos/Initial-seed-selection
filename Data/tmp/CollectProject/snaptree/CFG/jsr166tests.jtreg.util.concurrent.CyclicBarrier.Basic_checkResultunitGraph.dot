digraph "unitGraph" {
    "r0 := @parameter0: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter"
    "r2 := @parameter1: java.lang.Class"
    "r1 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.Throwable result()>()"
    "if r1 != null goto (branch)"
    "if r2 == null goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"
    "if r2 == null goto $r3 = new java.lang.StringBuilder"
    "$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1)"
    "if $z0 != 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch in thread \")"
    "$r5 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.String getName()>()"
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"
    "if r2 != null goto $r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()"
    "$r12 = \"<null>\""
    "goto [?= $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)]"
    "$r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>($r11)"
    "goto [?= return]"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"
    "return"
    "r0 := @parameter0: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter"->"r2 := @parameter1: java.lang.Class";
    "r2 := @parameter1: java.lang.Class"->"r1 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.Throwable result()>()";
    "r1 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.Throwable result()>()"->"if r1 != null goto (branch)";
    "if r1 != null goto (branch)"->"if r2 == null goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "if r1 != null goto (branch)"->"if r2 == null goto $r3 = new java.lang.StringBuilder";
    "if r2 == null goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"if r2 == null goto $r3 = new java.lang.StringBuilder";
    "if r2 == null goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "if r2 == null goto $r3 = new java.lang.StringBuilder"->"$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1)";
    "if r2 == null goto $r3 = new java.lang.StringBuilder"->"$r3 = new java.lang.StringBuilder";
    "$z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1)"->"if $z0 != 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "if $z0 != 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"$r3 = new java.lang.StringBuilder";
    "if $z0 != 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch in thread \")";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Mismatch in thread \")"->"$r5 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.String getName()>()";
    "$r5 = virtualinvoke r0.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: java.lang.String getName()>()"->"$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)";
    "$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)"->"$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")";
    "$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\": \")"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\", \")"->"if r2 != null goto $r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()";
    "if r2 != null goto $r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()"->"$r12 = \"<null>\"";
    "if r2 != null goto $r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()"->"$r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()";
    "$r12 = \"<null>\""->"goto [?= $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)]";
    "goto [?= $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)]"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)";
    "$r12 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>($r11)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>($r11)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"return";
}
