digraph "unitGraph" {
    "r13 := @this: jsr166tests.jtreg.util.Map.LockStep"
    "r16 := @parameter0: java.lang.String[]"
    "b0 = 100"
    "$r0 = new java.util.Random"
    "specialinvoke $r0.<java.util.Random: void <init>()>()"
    "r1 = $r0"
    "i3 = 0"
    "if i3 >= 100 goto return"
    "$r2 = newarray (java.util.Map)[9]"
    "$r3 = new java.util.IdentityHashMap"
    "specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11)"
    "$r2[0] = $r3"
    "$r4 = new java.util.HashMap"
    "specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16)"
    "$r2[1] = $r4"
    "$r5 = new java.util.LinkedHashMap"
    "specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16)"
    "$r2[2] = $r5"
    "$r6 = new java.util.WeakHashMap"
    "specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16)"
    "$r2[3] = $r6"
    "$r7 = new java.util.Hashtable"
    "specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16)"
    "$r2[4] = $r7"
    "$r8 = new java.util.TreeMap"
    "specialinvoke $r8.<java.util.TreeMap: void <init>()>()"
    "$r2[5] = $r8"
    "$r9 = new java.util.concurrent.ConcurrentHashMap"
    "specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16)"
    "$r2[6] = $r9"
    "$r10 = new java.util.concurrent.ConcurrentSkipListMap"
    "specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>()"
    "$r2[7] = $r10"
    "$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap"
    "specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>()"
    "$r2[8] = $r11"
    "r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)"
    "i4 = 0"
    "if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)"
    "$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15)"
    "i4 = i4 + 1"
    "goto [?= (branch)]"
    "virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)"
    "i3 = i3 + 1"
    "return"
    "r13 := @this: jsr166tests.jtreg.util.Map.LockStep"->"r16 := @parameter0: java.lang.String[]";
    "r16 := @parameter0: java.lang.String[]"->"b0 = 100";
    "b0 = 100"->"$r0 = new java.util.Random";
    "$r0 = new java.util.Random"->"specialinvoke $r0.<java.util.Random: void <init>()>()";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"i3 = 0";
    "i3 = 0"->"if i3 >= 100 goto return";
    "if i3 >= 100 goto return"->"$r2 = newarray (java.util.Map)[9]";
    "if i3 >= 100 goto return"->"return";
    "$r2 = newarray (java.util.Map)[9]"->"$r3 = new java.util.IdentityHashMap";
    "$r3 = new java.util.IdentityHashMap"->"specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11)";
    "specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11)"->"$r2[0] = $r3";
    "$r2[0] = $r3"->"$r4 = new java.util.HashMap";
    "$r4 = new java.util.HashMap"->"specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16)";
    "specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16)"->"$r2[1] = $r4";
    "$r2[1] = $r4"->"$r5 = new java.util.LinkedHashMap";
    "$r5 = new java.util.LinkedHashMap"->"specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16)";
    "specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16)"->"$r2[2] = $r5";
    "$r2[2] = $r5"->"$r6 = new java.util.WeakHashMap";
    "$r6 = new java.util.WeakHashMap"->"specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16)";
    "specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16)"->"$r2[3] = $r6";
    "$r2[3] = $r6"->"$r7 = new java.util.Hashtable";
    "$r7 = new java.util.Hashtable"->"specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16)";
    "specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16)"->"$r2[4] = $r7";
    "$r2[4] = $r7"->"$r8 = new java.util.TreeMap";
    "$r8 = new java.util.TreeMap"->"specialinvoke $r8.<java.util.TreeMap: void <init>()>()";
    "specialinvoke $r8.<java.util.TreeMap: void <init>()>()"->"$r2[5] = $r8";
    "$r2[5] = $r8"->"$r9 = new java.util.concurrent.ConcurrentHashMap";
    "$r9 = new java.util.concurrent.ConcurrentHashMap"->"specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16)";
    "specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16)"->"$r2[6] = $r9";
    "$r2[6] = $r9"->"$r10 = new java.util.concurrent.ConcurrentSkipListMap";
    "$r10 = new java.util.concurrent.ConcurrentSkipListMap"->"specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>()";
    "specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>()"->"$r2[7] = $r10";
    "$r2[7] = $r10"->"$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap";
    "$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap"->"specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>()";
    "specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>()"->"$r2[8] = $r11";
    "$r2[8] = $r11"->"r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)";
    "r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)"->"i4 = 0";
    "i4 = 0"->"if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)";
    "if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)"->"$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)";
    "if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)"->"virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)";
    "$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"->"$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)";
    "$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)"->"$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15)";
    "virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15)"->"i4 = i4 + 1";
    "i4 = i4 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)";
    "virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= 100 goto return";
}
