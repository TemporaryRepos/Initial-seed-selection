digraph "unitGraph" {
    "z0 := @parameter0: boolean"
    "z1 := @parameter1: boolean"
    "i6 = 0"
    "if i6 >= 1000 goto return"
    "$r39 = new java.util.concurrent.Semaphore"
    "specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0)"
    "r1 = $r39"
    "r2 = newarray (java.lang.Throwable)[1]"
    "if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2"
    "$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1"
    "$r33 = $r40"
    "specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"
    "goto [?= r3 = $r33]"
    "$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2"
    "$r33 = $r41"
    "specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"
    "r3 = $r33"
    "$r42 = new java.lang.Thread"
    "specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)"
    "r5 = $r42"
    "$r43 = new java.lang.Thread"
    "specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)"
    "r7 = $r43"
    "$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3"
    "specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"
    "r9 = $r44"
    "$r45 = new java.lang.Thread"
    "specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)"
    "r11 = $r45"
    "$r46 = new java.lang.Thread"
    "specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)"
    "r13 = $r46"
    "$r14 = newarray (java.lang.Thread)[4]"
    "$r14[0] = r5"
    "$r14[1] = r7"
    "$r14[2] = r11"
    "$r14[3] = r13"
    "r15 = $r14"
    "$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15)"
    "staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16)"
    "r34 = r15"
    "i7 = lengthof r34"
    "i8 = 0"
    "if i8 >= i7 goto r36 = r15"
    "r35 = r34[i8]"
    "virtualinvoke r35.<java.lang.Thread: void start()>()"
    "i8 = i8 + 1"
    "goto [?= (branch)]"
    "r36 = r15"
    "i9 = lengthof r36"
    "i10 = 0"
    "if i10 >= i9 goto $r17 = r2[0]"
    "r37 = r36[i10]"
    "virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L)"
    "$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>()"
    "if $z6 == 0 goto i10 = i10 + 1"
    "$r47 = new java.lang.Error"
    "$r29 = newarray (java.lang.Object)[2]"
    "$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"
    "$r29[0] = $r31"
    "$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"
    "if $z7 == 0 goto $r38 = \"false\""
    "$r38 = \"true\""
    "goto [?= $r29[1] = $r38]"
    "$r38 = \"false\""
    "$r29[1] = $r38"
    "$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29)"
    "specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32)"
    "throw $r47"
    "i10 = i10 + 1"
    "$r17 = r2[0]"
    "if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"
    "$r48 = new java.lang.Error"
    "$r27 = r2[0]"
    "specialinvoke $r48.<java.lang.Error: void <init>(java.lang.Throwable)>($r27)"
    "throw $r48"
    "$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"
    "if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"
    "$r49 = new java.lang.Error"
    "$i3 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"
    "$r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3)"
    "specialinvoke $r49.<java.lang.Error: void <init>(java.lang.String)>($r25)"
    "throw $r49"
    "$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"
    "if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"
    "$r50 = new java.lang.Error"
    "$z5 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"
    "$r23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5)"
    "specialinvoke $r50.<java.lang.Error: void <init>(java.lang.String)>($r23)"
    "throw $r50"
    "$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"
    "if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"
    "$r51 = new java.lang.Error"
    "$i2 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"
    "$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2)"
    "specialinvoke $r51.<java.lang.Error: void <init>(java.lang.String)>($r21)"
    "throw $r51"
    "$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"
    "if $z3 == z0 goto i6 = i6 + 1"
    "$r52 = new java.lang.Error"
    "$z4 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"
    "$r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4)"
    "specialinvoke $r52.<java.lang.Error: void <init>(java.lang.String)>($r19)"
    "throw $r52"
    "i6 = i6 + 1"
    "return"
    "z0 := @parameter0: boolean"->"z1 := @parameter1: boolean";
    "z1 := @parameter1: boolean"->"i6 = 0";
    "i6 = 0"->"if i6 >= 1000 goto return";
    "if i6 >= 1000 goto return"->"$r39 = new java.util.concurrent.Semaphore";
    "if i6 >= 1000 goto return"->"return";
    "$r39 = new java.util.concurrent.Semaphore"->"specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0)";
    "specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0)"->"r1 = $r39";
    "r1 = $r39"->"r2 = newarray (java.lang.Throwable)[1]";
    "r2 = newarray (java.lang.Throwable)[1]"->"if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2";
    "if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2"->"$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1";
    "if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2"->"$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2";
    "$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1"->"$r33 = $r40";
    "$r33 = $r40"->"specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)";
    "specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"->"goto [?= r3 = $r33]";
    "goto [?= r3 = $r33]"->"r3 = $r33";
    "$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2"->"$r33 = $r41";
    "$r33 = $r41"->"specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)";
    "specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"->"r3 = $r33";
    "r3 = $r33"->"$r42 = new java.lang.Thread";
    "$r42 = new java.lang.Thread"->"specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)";
    "specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)"->"r5 = $r42";
    "r5 = $r42"->"$r43 = new java.lang.Thread";
    "$r43 = new java.lang.Thread"->"specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)";
    "specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3)"->"r7 = $r43";
    "r7 = $r43"->"$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3";
    "$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3"->"specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)";
    "specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2)"->"r9 = $r44";
    "r9 = $r44"->"$r45 = new java.lang.Thread";
    "$r45 = new java.lang.Thread"->"specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)";
    "specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)"->"r11 = $r45";
    "r11 = $r45"->"$r46 = new java.lang.Thread";
    "$r46 = new java.lang.Thread"->"specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)";
    "specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9)"->"r13 = $r46";
    "r13 = $r46"->"$r14 = newarray (java.lang.Thread)[4]";
    "$r14 = newarray (java.lang.Thread)[4]"->"$r14[0] = r5";
    "$r14[0] = r5"->"$r14[1] = r7";
    "$r14[1] = r7"->"$r14[2] = r11";
    "$r14[2] = r11"->"$r14[3] = r13";
    "$r14[3] = r13"->"r15 = $r14";
    "r15 = $r14"->"$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15)";
    "$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15)"->"staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16)";
    "staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16)"->"r34 = r15";
    "r34 = r15"->"i7 = lengthof r34";
    "i7 = lengthof r34"->"i8 = 0";
    "i8 = 0"->"if i8 >= i7 goto r36 = r15";
    "if i8 >= i7 goto r36 = r15"->"r35 = r34[i8]";
    "if i8 >= i7 goto r36 = r15"->"r36 = r15";
    "r35 = r34[i8]"->"virtualinvoke r35.<java.lang.Thread: void start()>()";
    "virtualinvoke r35.<java.lang.Thread: void start()>()"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i8 >= i7 goto r36 = r15";
    "r36 = r15"->"i9 = lengthof r36";
    "i9 = lengthof r36"->"i10 = 0";
    "i10 = 0"->"if i10 >= i9 goto $r17 = r2[0]";
    "if i10 >= i9 goto $r17 = r2[0]"->"r37 = r36[i10]";
    "if i10 >= i9 goto $r17 = r2[0]"->"$r17 = r2[0]";
    "r37 = r36[i10]"->"virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L)";
    "virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L)"->"$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>()";
    "$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>()"->"if $z6 == 0 goto i10 = i10 + 1";
    "if $z6 == 0 goto i10 = i10 + 1"->"$r47 = new java.lang.Error";
    "if $z6 == 0 goto i10 = i10 + 1"->"i10 = i10 + 1";
    "$r47 = new java.lang.Error"->"$r29 = newarray (java.lang.Object)[2]";
    "$r29 = newarray (java.lang.Object)[2]"->"$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()";
    "$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"->"$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)";
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"->"$r29[0] = $r31";
    "$r29[0] = $r31"->"$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()";
    "$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"->"if $z7 == 0 goto $r38 = \"false\"";
    "if $z7 == 0 goto $r38 = \"false\""->"$r38 = \"true\"";
    "if $z7 == 0 goto $r38 = \"false\""->"$r38 = \"false\"";
    "$r38 = \"true\""->"goto [?= $r29[1] = $r38]";
    "goto [?= $r29[1] = $r38]"->"$r29[1] = $r38";
    "$r38 = \"false\""->"$r29[1] = $r38";
    "$r29[1] = $r38"->"$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29)";
    "$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29)"->"specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32)";
    "specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32)"->"throw $r47";
    "i10 = i10 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 >= i9 goto $r17 = r2[0]";
    "$r17 = r2[0]"->"if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()";
    "if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"->"$r48 = new java.lang.Error";
    "if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"->"$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()";
    "$r48 = new java.lang.Error"->"$r27 = r2[0]";
    "$r27 = r2[0]"->"specialinvoke $r48.<java.lang.Error: void <init>(java.lang.Throwable)>($r27)";
    "specialinvoke $r48.<java.lang.Error: void <init>(java.lang.Throwable)>($r27)"->"throw $r48";
    "$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"->"if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()";
    "if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"->"$r49 = new java.lang.Error";
    "if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"->"$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()";
    "$r49 = new java.lang.Error"->"$i3 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()";
    "$i3 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>()"->"$r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3)";
    "$r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3)"->"specialinvoke $r49.<java.lang.Error: void <init>(java.lang.String)>($r25)";
    "specialinvoke $r49.<java.lang.Error: void <init>(java.lang.String)>($r25)"->"throw $r49";
    "$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"->"if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()";
    "if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"->"$r50 = new java.lang.Error";
    "if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"->"$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()";
    "$r50 = new java.lang.Error"->"$z5 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()";
    "$z5 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>()"->"$r23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5)";
    "$r23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5)"->"specialinvoke $r50.<java.lang.Error: void <init>(java.lang.String)>($r23)";
    "specialinvoke $r50.<java.lang.Error: void <init>(java.lang.String)>($r23)"->"throw $r50";
    "$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"->"if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()";
    "if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"->"$r51 = new java.lang.Error";
    "if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"->"$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()";
    "$r51 = new java.lang.Error"->"$i2 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()";
    "$i2 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>()"->"$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2)";
    "$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2)"->"specialinvoke $r51.<java.lang.Error: void <init>(java.lang.String)>($r21)";
    "specialinvoke $r51.<java.lang.Error: void <init>(java.lang.String)>($r21)"->"throw $r51";
    "$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"->"if $z3 == z0 goto i6 = i6 + 1";
    "if $z3 == z0 goto i6 = i6 + 1"->"$r52 = new java.lang.Error";
    "if $z3 == z0 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "$r52 = new java.lang.Error"->"$z4 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()";
    "$z4 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>()"->"$r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4)";
    "$r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4)"->"specialinvoke $r52.<java.lang.Error: void <init>(java.lang.String)>($r19)";
    "specialinvoke $r52.<java.lang.Error: void <init>(java.lang.String)>($r19)"->"throw $r52";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= 1000 goto return";
}
