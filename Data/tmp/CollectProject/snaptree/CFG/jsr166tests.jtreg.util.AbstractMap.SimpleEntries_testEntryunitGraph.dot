digraph "unitGraph" {
    "r0 := @parameter0: java.util.Map$Entry"
    "$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "$r2 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"
    "$r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r4 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r3, $r4)"
    "$r5 = new java.util.AbstractMap$SimpleEntry"
    "$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"
    "$r6 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "specialinvoke $r5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r6)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r5)"
    "$r8 = new java.util.AbstractMap$SimpleEntry"
    "$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"
    "$r9 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "specialinvoke $r8.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r10, $r9)"
    "$z0 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>($r8)"
    "if $z0 != 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)]"
    "$z3 = 0"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)"
    "$z1 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>(null)"
    "if $z1 != 0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)]"
    "$z4 = 0"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)"
    "$r11 = new java.util.AbstractMap$SimpleImmutableEntry"
    "$r13 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"
    "$r12 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "specialinvoke $r11.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r13, $r12)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r11)"
    "$r14 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()"
    "$r15 = new java.lang.StringBuilder"
    "specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()"
    "$r16 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"
    "$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=\")"
    "$r19 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19)"
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r14, $r21)"
    "$z2 = r0 instanceof java.util.AbstractMap$SimpleEntry"
    "if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "$r24 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "$r25 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r24)"
    "$r26 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r25, $r26)"
    "$r27 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r28 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r27, $r28)"
    "$r29 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"
    "$r30 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r29, $r30)"
    "$r31 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r31, null)"
    "goto [?= return]"
    "$r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r22)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"
    "$r33 := @caughtexception"
    "r34 = $r33"
    "$r32 := @caughtexception"
    "r35 = $r32"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r35)"
    "return"
    "r0 := @parameter0: java.util.Map$Entry"->"$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()"->"$r2 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>";
    "$r2 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"->"$r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r4 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r4 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r3, $r4)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r3, $r4)"->"$r5 = new java.util.AbstractMap$SimpleEntry";
    "$r5 = new java.util.AbstractMap$SimpleEntry"->"$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>";
    "$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"->"$r6 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r6 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"specialinvoke $r5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r6)";
    "specialinvoke $r5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r6)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r5)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r5)"->"$r8 = new java.util.AbstractMap$SimpleEntry";
    "$r8 = new java.util.AbstractMap$SimpleEntry"->"$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>";
    "$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"->"$r9 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "$r9 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"specialinvoke $r8.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r10, $r9)";
    "specialinvoke $r8.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r10, $r9)"->"$z0 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>($r8)";
    "$z0 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>($r8)"->"if $z0 != 0 goto $z3 = 0";
    "if $z0 != 0 goto $z3 = 0"->"$z3 = 1";
    "if $z0 != 0 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)]"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)";
    "$z3 = 0"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z3)"->"$z1 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>(null)";
    "$z1 = interfaceinvoke r0.<java.util.Map$Entry: boolean equals(java.lang.Object)>(null)"->"if $z1 != 0 goto $z4 = 0";
    "if $z1 != 0 goto $z4 = 0"->"$z4 = 1";
    "if $z1 != 0 goto $z4 = 0"->"$z4 = 0";
    "$z4 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)]"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)";
    "$z4 = 0"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void check(boolean)>($z4)"->"$r11 = new java.util.AbstractMap$SimpleImmutableEntry";
    "$r11 = new java.util.AbstractMap$SimpleImmutableEntry"->"$r13 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>";
    "$r13 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"->"$r12 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r12 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"specialinvoke $r11.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r13, $r12)";
    "specialinvoke $r11.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r13, $r12)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r11)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r11)"->"$r14 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()";
    "$r14 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()"->"$r15 = new java.lang.StringBuilder";
    "$r15 = new java.lang.StringBuilder"->"specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()"->"$r16 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>";
    "$r16 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.String k>"->"$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)";
    "$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=\")";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=\")"->"$r19 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r19 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19)";
    "$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19)"->"$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r14, $r21)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r14, $r21)"->"$z2 = r0 instanceof java.util.AbstractMap$SimpleEntry";
    "$z2 = r0 instanceof java.util.AbstractMap$SimpleEntry"->"if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r24 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r33 := @caughtexception";
    "if $z2 == 0 goto $r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r32 := @caughtexception";
    "$r24 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r25 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r24)";
    "$r25 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r24)"->"$r26 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r26 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r25, $r26)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r25, $r26)"->"$r27 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r27 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r28 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "$r28 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r27, $r28)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r27, $r28)"->"$r29 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)";
    "$r29 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r30 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>";
    "$r30 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r29, $r30)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r29, $r30)"->"$r31 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r31 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r31, null)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r31, null)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r33 := @caughtexception";
    "$r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"$r32 := @caughtexception";
    "$r22 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v2>"->"interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r22)";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r22)"->"$r33 := @caughtexception";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r22)"->"$r32 := @caughtexception";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r22)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r33 := @caughtexception"->"r34 = $r33";
    "r34 = $r33"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r32 := @caughtexception"->"r35 = $r32";
    "r35 = $r32"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r35)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r35)"->"return";
}
