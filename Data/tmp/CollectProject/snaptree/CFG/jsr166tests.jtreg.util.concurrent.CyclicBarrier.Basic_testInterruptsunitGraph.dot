digraph "unitGraph" {
    "b0 = 10"
    "$r0 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r0.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)"
    "r1 = $r0"
    "$r2 = new java.util.concurrent.CountDownLatch"
    "specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"
    "r33 = $r2"
    "$r3 = new java.util.ArrayList"
    "specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(10)"
    "r34 = $r3"
    "r35 = newarray (java.lang.Runnable)[1]"
    "$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8"
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8: void <init>(java.lang.Runnable[])>(r35)"
    "r36 = $r4"
    "$r5 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(11, r36)"
    "r37 = $r5"
    "$r6 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9"
    "specialinvoke $r6.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9: void <init>(java.util.List)>(r34)"
    "r35[0] = $r6"
    "i6 = 0"
    "if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"
    "$r30 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"
    "if i6 >= 5 goto $z9 = 0"
    "$z9 = 1"
    "goto [?= specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)]"
    "$z9 = 0"
    "specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)"
    "r38 = $r30"
    "virtualinvoke r38.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"
    "interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>(r38)"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r7)"
    "$i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "if $i2 >= 10 goto virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"
    "staticinvoke <java.lang.Thread: void yield()>()"
    "goto [?= $i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"
    "virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"
    "virtualinvoke r33.<java.util.concurrent.CountDownLatch: void countDown()>()"
    "i7 = 0"
    "z10 = 0"
    "z11 = 0"
    "r8 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"
    "$r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"
    "r28 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r27"
    "virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"
    "$r29 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r29, null)"
    "$z7 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"
    "if $z7 == 0 goto (branch)"
    "i7 = i7 + 1"
    "goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"
    "$z1 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "if $z1 != 0 goto $z12 = 0"
    "$z12 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)]"
    "$z12 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)"
    "goto [?= $r11 = new java.util.concurrent.CountDownLatch]"
    "$r32 := @caughtexception"
    "r39 = $r32"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r39)"
    "$r11 = new java.util.concurrent.CountDownLatch"
    "specialinvoke $r11.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"
    "r40 = $r11"
    "$r12 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r12.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)"
    "r41 = $r12"
    "$r13 = new java.util.ArrayList"
    "specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(10)"
    "r42 = $r13"
    "i8 = 0"
    "if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"
    "$r26 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"
    "if i8 >= 5 goto $z13 = 0"
    "$z13 = 1"
    "goto [?= specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)]"
    "$z13 = 0"
    "specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)"
    "r43 = $r26"
    "virtualinvoke r43.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"
    "interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>(r43)"
    "i8 = i8 + 1"
    "$r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r14)"
    "$i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "if $i5 >= 10 goto i9 = 0"
    "goto [?= $i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"
    "i9 = 0"
    "if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"
    "$r24 = interfaceinvoke r42.<java.util.List: java.lang.Object get(int)>(i9)"
    "$r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r24"
    "virtualinvoke $r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void interrupt()>()"
    "i9 = i9 + 1"
    "virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"
    "i10 = 0"
    "i11 = 0"
    "i12 = 0"
    "r44 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>()"
    "$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 == 0 goto $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"
    "$r21 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>()"
    "r45 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r21"
    "virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"
    "$r22 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"
    "$z3 = $r22 instanceof java.lang.InterruptedException"
    "if $z3 == 0 goto $r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"
    "i11 = i11 + 1"
    "$r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"
    "$z4 = $r23 instanceof java.util.concurrent.BrokenBarrierException"
    "if $z4 == 0 goto $z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"
    "i12 = i12 + 1"
    "$z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"
    "if $z5 == 0 goto (branch)"
    "i10 = i10 + 1"
    "goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]"
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"
    "$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r15, $r16)"
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r17, $r18)"
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12)"
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r19, $r20)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r41)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r41)"
    "goto [?= return]"
    "$r31 := @caughtexception"
    "r46 = $r31"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r46)"
    "return"
    "b0 = 10"->"$r0 = new java.util.concurrent.CyclicBarrier";
    "$r0 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r0.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)";
    "specialinvoke $r0.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)"->"r1 = $r0";
    "r1 = $r0"->"$r2 = new java.util.concurrent.CountDownLatch";
    "r1 = $r0"->"$r32 := @caughtexception";
    "$r2 = new java.util.concurrent.CountDownLatch"->"specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)";
    "$r2 = new java.util.concurrent.CountDownLatch"->"$r32 := @caughtexception";
    "specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"->"r33 = $r2";
    "specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"->"$r32 := @caughtexception";
    "r33 = $r2"->"$r3 = new java.util.ArrayList";
    "r33 = $r2"->"$r32 := @caughtexception";
    "$r3 = new java.util.ArrayList"->"specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(10)";
    "$r3 = new java.util.ArrayList"->"$r32 := @caughtexception";
    "specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(10)"->"r34 = $r3";
    "specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(10)"->"$r32 := @caughtexception";
    "r34 = $r3"->"r35 = newarray (java.lang.Runnable)[1]";
    "r34 = $r3"->"$r32 := @caughtexception";
    "r35 = newarray (java.lang.Runnable)[1]"->"$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8";
    "r35 = newarray (java.lang.Runnable)[1]"->"$r32 := @caughtexception";
    "$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8"->"specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8: void <init>(java.lang.Runnable[])>(r35)";
    "$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8"->"$r32 := @caughtexception";
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8: void <init>(java.lang.Runnable[])>(r35)"->"r36 = $r4";
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$8: void <init>(java.lang.Runnable[])>(r35)"->"$r32 := @caughtexception";
    "r36 = $r4"->"$r5 = new java.util.concurrent.CyclicBarrier";
    "r36 = $r4"->"$r32 := @caughtexception";
    "$r5 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(11, r36)";
    "$r5 = new java.util.concurrent.CyclicBarrier"->"$r32 := @caughtexception";
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(11, r36)"->"r37 = $r5";
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(11, r36)"->"$r32 := @caughtexception";
    "r37 = $r5"->"$r6 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9";
    "r37 = $r5"->"$r32 := @caughtexception";
    "$r6 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9"->"specialinvoke $r6.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9: void <init>(java.util.List)>(r34)";
    "$r6 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9"->"$r32 := @caughtexception";
    "specialinvoke $r6.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9: void <init>(java.util.List)>(r34)"->"r35[0] = $r6";
    "specialinvoke $r6.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$9: void <init>(java.util.List)>(r34)"->"$r32 := @caughtexception";
    "r35[0] = $r6"->"i6 = 0";
    "r35[0] = $r6"->"$r32 := @caughtexception";
    "i6 = 0"->"if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "i6 = 0"->"$r32 := @caughtexception";
    "if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r30 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter";
    "if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r32 := @caughtexception";
    "$r30 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"->"if i6 >= 5 goto $z9 = 0";
    "$r30 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"->"$r32 := @caughtexception";
    "if i6 >= 5 goto $z9 = 0"->"$z9 = 1";
    "if i6 >= 5 goto $z9 = 0"->"$z9 = 0";
    "if i6 >= 5 goto $z9 = 0"->"$r32 := @caughtexception";
    "$z9 = 1"->"goto [?= specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)]";
    "$z9 = 1"->"$r32 := @caughtexception";
    "goto [?= specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)]"->"specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)";
    "goto [?= specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)]"->"$r32 := @caughtexception";
    "$z9 = 0"->"specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)";
    "$z9 = 0"->"$r32 := @caughtexception";
    "specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)"->"r38 = $r30";
    "specialinvoke $r30.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z9, r33, r37, r1)"->"$r32 := @caughtexception";
    "r38 = $r30"->"virtualinvoke r38.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()";
    "r38 = $r30"->"$r32 := @caughtexception";
    "virtualinvoke r38.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"->"interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>(r38)";
    "virtualinvoke r38.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"->"$r32 := @caughtexception";
    "interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>(r38)"->"i6 = i6 + 1";
    "interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>(r38)"->"$r32 := @caughtexception";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "i6 = i6 + 1"->"$r32 := @caughtexception";
    "goto [?= (branch)]"->"if i6 >= 10 goto $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "goto [?= (branch)]"->"$r32 := @caughtexception";
    "$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r7)";
    "$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r32 := @caughtexception";
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r7)"->"$i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r7)"->"$r32 := @caughtexception";
    "$i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"if $i2 >= 10 goto virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()";
    "$i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r32 := @caughtexception";
    "if $i2 >= 10 goto virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $i2 >= 10 goto virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"->"virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()";
    "if $i2 >= 10 goto virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r32 := @caughtexception";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]";
    "staticinvoke <java.lang.Thread: void yield()>()"->"$r32 := @caughtexception";
    "goto [?= $i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "goto [?= $i2 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$r32 := @caughtexception";
    "virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"->"virtualinvoke r33.<java.util.concurrent.CountDownLatch: void countDown()>()";
    "virtualinvoke r37.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r32 := @caughtexception";
    "virtualinvoke r33.<java.util.concurrent.CountDownLatch: void countDown()>()"->"i7 = 0";
    "virtualinvoke r33.<java.util.concurrent.CountDownLatch: void countDown()>()"->"$r32 := @caughtexception";
    "i7 = 0"->"z10 = 0";
    "i7 = 0"->"$r32 := @caughtexception";
    "z10 = 0"->"z11 = 0";
    "z10 = 0"->"$r32 := @caughtexception";
    "z11 = 0"->"r8 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>()";
    "z11 = 0"->"$r32 := @caughtexception";
    "r8 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "r8 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>()"->"$r32 := @caughtexception";
    "$z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)";
    "$z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()"->"$r32 := @caughtexception";
    "if $z0 == 0 goto $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"->"$r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)";
    "if $z0 == 0 goto $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"->"$r32 := @caughtexception";
    "$r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"r28 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r27";
    "$r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()"->"$r32 := @caughtexception";
    "r28 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r27"->"virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()";
    "r28 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r27"->"$r32 := @caughtexception";
    "virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"->"$r29 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()";
    "virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"->"$r32 := @caughtexception";
    "$r29 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r29, null)";
    "$r29 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r29, null)"->"$z7 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r29, null)"->"$r32 := @caughtexception";
    "$z7 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"if $z7 == 0 goto (branch)";
    "$z7 = virtualinvoke r28.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"$r32 := @caughtexception";
    "if $z7 == 0 goto (branch)"->"i7 = i7 + 1";
    "if $z7 == 0 goto (branch)"->"goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]";
    "if $z7 == 0 goto (branch)"->"$r32 := @caughtexception";
    "i7 = i7 + 1"->"goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]";
    "i7 = i7 + 1"->"$r32 := @caughtexception";
    "goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]"->"$r32 := @caughtexception";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)"->"$r32 := @caughtexception";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$z1 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"->"$r32 := @caughtexception";
    "$z1 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"if $z1 != 0 goto $z12 = 0";
    "$z1 = virtualinvoke r37.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"$r32 := @caughtexception";
    "if $z1 != 0 goto $z12 = 0"->"$z12 = 1";
    "if $z1 != 0 goto $z12 = 0"->"$z12 = 0";
    "if $z1 != 0 goto $z12 = 0"->"$r32 := @caughtexception";
    "$z12 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)]";
    "$z12 = 1"->"$r32 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)]"->"$r32 := @caughtexception";
    "$z12 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)";
    "$z12 = 0"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)"->"goto [?= $r11 = new java.util.concurrent.CountDownLatch]";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z12)"->"$r32 := @caughtexception";
    "goto [?= $r11 = new java.util.concurrent.CountDownLatch]"->"$r11 = new java.util.concurrent.CountDownLatch";
    "goto [?= $r11 = new java.util.concurrent.CountDownLatch]"->"$r31 := @caughtexception";
    "$r32 := @caughtexception"->"r39 = $r32";
    "r39 = $r32"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r39)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r39)"->"$r11 = new java.util.concurrent.CountDownLatch";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r39)"->"$r31 := @caughtexception";
    "$r11 = new java.util.concurrent.CountDownLatch"->"specialinvoke $r11.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)";
    "$r11 = new java.util.concurrent.CountDownLatch"->"$r31 := @caughtexception";
    "specialinvoke $r11.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"->"r40 = $r11";
    "specialinvoke $r11.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)"->"$r31 := @caughtexception";
    "r40 = $r11"->"$r12 = new java.util.concurrent.CyclicBarrier";
    "r40 = $r11"->"$r31 := @caughtexception";
    "$r12 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r12.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)";
    "$r12 = new java.util.concurrent.CyclicBarrier"->"$r31 := @caughtexception";
    "specialinvoke $r12.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)"->"r41 = $r12";
    "specialinvoke $r12.<java.util.concurrent.CyclicBarrier: void <init>(int)>(11)"->"$r31 := @caughtexception";
    "r41 = $r12"->"$r13 = new java.util.ArrayList";
    "r41 = $r12"->"$r31 := @caughtexception";
    "$r13 = new java.util.ArrayList"->"specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(10)";
    "$r13 = new java.util.ArrayList"->"$r31 := @caughtexception";
    "specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(10)"->"r42 = $r13";
    "specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(10)"->"$r31 := @caughtexception";
    "r42 = $r13"->"i8 = 0";
    "r42 = $r13"->"$r31 := @caughtexception";
    "i8 = 0"->"if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "i8 = 0"->"$r31 := @caughtexception";
    "if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r26 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter";
    "if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r31 := @caughtexception";
    "$r26 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"->"if i8 >= 5 goto $z13 = 0";
    "$r26 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter"->"$r31 := @caughtexception";
    "if i8 >= 5 goto $z13 = 0"->"$z13 = 1";
    "if i8 >= 5 goto $z13 = 0"->"$z13 = 0";
    "if i8 >= 5 goto $z13 = 0"->"$r31 := @caughtexception";
    "$z13 = 1"->"goto [?= specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)]";
    "$z13 = 1"->"$r31 := @caughtexception";
    "goto [?= specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)]"->"specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)";
    "goto [?= specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)]"->"$r31 := @caughtexception";
    "$z13 = 0"->"specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)";
    "$z13 = 0"->"$r31 := @caughtexception";
    "specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)"->"r43 = $r26";
    "specialinvoke $r26.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void <init>(boolean,java.util.concurrent.CountDownLatch,java.util.concurrent.CyclicBarrier,java.util.concurrent.CyclicBarrier)>($z13, r40, r41, r1)"->"$r31 := @caughtexception";
    "r43 = $r26"->"virtualinvoke r43.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()";
    "r43 = $r26"->"$r31 := @caughtexception";
    "virtualinvoke r43.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"->"interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>(r43)";
    "virtualinvoke r43.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void start()>()"->"$r31 := @caughtexception";
    "interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>(r43)"->"i8 = i8 + 1";
    "interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>(r43)"->"$r31 := @caughtexception";
    "i8 = i8 + 1"->"goto [?= (branch)]";
    "i8 = i8 + 1"->"$r31 := @caughtexception";
    "goto [?= (branch)]"->"if i8 >= 10 goto $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "goto [?= (branch)]"->"$r31 := @caughtexception";
    "$r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r14)";
    "$r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r31 := @caughtexception";
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r14)"->"$i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "virtualinvoke r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r14)"->"$r31 := @caughtexception";
    "$i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"if $i5 >= 10 goto i9 = 0";
    "$i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r31 := @caughtexception";
    "if $i5 >= 10 goto i9 = 0"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $i5 >= 10 goto i9 = 0"->"i9 = 0";
    "if $i5 >= 10 goto i9 = 0"->"$r31 := @caughtexception";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]";
    "staticinvoke <java.lang.Thread: void yield()>()"->"$r31 := @caughtexception";
    "goto [?= $i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "goto [?= $i5 = virtualinvoke r41.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$r31 := @caughtexception";
    "i9 = 0"->"if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()";
    "i9 = 0"->"$r31 := @caughtexception";
    "if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"->"$r24 = interfaceinvoke r42.<java.util.List: java.lang.Object get(int)>(i9)";
    "if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"->"virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()";
    "if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"->"$r31 := @caughtexception";
    "$r24 = interfaceinvoke r42.<java.util.List: java.lang.Object get(int)>(i9)"->"$r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r24";
    "$r24 = interfaceinvoke r42.<java.util.List: java.lang.Object get(int)>(i9)"->"$r31 := @caughtexception";
    "$r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r24"->"virtualinvoke $r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void interrupt()>()";
    "$r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r24"->"$r31 := @caughtexception";
    "virtualinvoke $r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void interrupt()>()"->"i9 = i9 + 1";
    "virtualinvoke $r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void interrupt()>()"->"$r31 := @caughtexception";
    "i9 = i9 + 1"->"goto [?= (branch)]";
    "i9 = i9 + 1"->"$r31 := @caughtexception";
    "goto [?= (branch)]"->"if i9 >= 5 goto virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()";
    "goto [?= (branch)]"->"$r31 := @caughtexception";
    "virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"->"i10 = 0";
    "virtualinvoke r40.<java.util.concurrent.CountDownLatch: void countDown()>()"->"$r31 := @caughtexception";
    "i10 = 0"->"i11 = 0";
    "i10 = 0"->"$r31 := @caughtexception";
    "i11 = 0"->"i12 = 0";
    "i11 = 0"->"$r31 := @caughtexception";
    "i12 = 0"->"r44 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>()";
    "i12 = 0"->"$r31 := @caughtexception";
    "r44 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>()"->"$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()";
    "r44 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>()"->"$r31 := @caughtexception";
    "$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()"->"if $z2 == 0 goto $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)";
    "$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()"->"$r31 := @caughtexception";
    "if $z2 == 0 goto $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r21 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 == 0 goto $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)";
    "if $z2 == 0 goto $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r31 := @caughtexception";
    "$r21 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>()"->"r45 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r21";
    "$r21 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>()"->"$r31 := @caughtexception";
    "r45 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r21"->"virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()";
    "r45 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter) $r21"->"$r31 := @caughtexception";
    "virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"->"$r22 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()";
    "virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: void join()>()"->"$r31 := @caughtexception";
    "$r22 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$z3 = $r22 instanceof java.lang.InterruptedException";
    "$r22 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$r31 := @caughtexception";
    "$z3 = $r22 instanceof java.lang.InterruptedException"->"if $z3 == 0 goto $r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()";
    "$z3 = $r22 instanceof java.lang.InterruptedException"->"$r31 := @caughtexception";
    "if $z3 == 0 goto $r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"i11 = i11 + 1";
    "if $z3 == 0 goto $r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()";
    "if $z3 == 0 goto $r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$r31 := @caughtexception";
    "i11 = i11 + 1"->"$r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()";
    "i11 = i11 + 1"->"$r31 := @caughtexception";
    "$r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$z4 = $r23 instanceof java.util.concurrent.BrokenBarrierException";
    "$r23 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: java.lang.Throwable throwable()>()"->"$r31 := @caughtexception";
    "$z4 = $r23 instanceof java.util.concurrent.BrokenBarrierException"->"if $z4 == 0 goto $z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()";
    "$z4 = $r23 instanceof java.util.concurrent.BrokenBarrierException"->"$r31 := @caughtexception";
    "if $z4 == 0 goto $z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"i12 = i12 + 1";
    "if $z4 == 0 goto $z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"$z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()";
    "if $z4 == 0 goto $z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"$r31 := @caughtexception";
    "i12 = i12 + 1"->"$z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()";
    "i12 = i12 + 1"->"$r31 := @caughtexception";
    "$z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"if $z5 == 0 goto (branch)";
    "$z5 = virtualinvoke r45.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1Waiter: boolean interruptBit()>()"->"$r31 := @caughtexception";
    "if $z5 == 0 goto (branch)"->"i10 = i10 + 1";
    "if $z5 == 0 goto (branch)"->"goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]";
    "if $z5 == 0 goto (branch)"->"$r31 := @caughtexception";
    "i10 = i10 + 1"->"goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]";
    "i10 = i10 + 1"->"$r31 := @caughtexception";
    "goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]"->"$r31 := @caughtexception";
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)";
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)"->"$r31 := @caughtexception";
    "$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r15, $r16)";
    "$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)"->"$r31 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r15, $r16)"->"$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r15, $r16)"->"$r31 := @caughtexception";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)"->"$r31 := @caughtexception";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r17, $r18)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r31 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r17, $r18)"->"$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r17, $r18)"->"$r31 := @caughtexception";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12)"->"$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12)"->"$r31 := @caughtexception";
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r19, $r20)";
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)"->"$r31 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r19, $r20)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r41)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r19, $r20)"->"$r31 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r41)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r41)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r41)"->"$r31 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r41)"->"goto [?= return]";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r41)"->"$r31 := @caughtexception";
    "goto [?= return]"->"return";
    "$r31 := @caughtexception"->"r46 = $r31";
    "r46 = $r31"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r46)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r46)"->"return";
}
