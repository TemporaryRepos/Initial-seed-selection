digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: jsr166tests.jtreg.util.Map.LockStep;
r0 := @parameter0: java.util.Map;
r1 := @parameter1: java.util.Iterator;
i0 = interfaceinvoke r0.<java.util.Map: int size()>();
interfaceinvoke r1.<java.util.Iterator: void remove()>();
$i1 = interfaceinvoke r0.<java.util.Map: int size()>();
$i2 = i0 - 1;
if $i1 == $i2 goto return;
"
    "Block 1:
[preds: 0 ] [succs: ]
$r2 = new java.lang.Error;
$r3 = newarray (java.lang.Object)[2];
$r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
$r3[0] = $r4;
$i3 = interfaceinvoke r0.<java.util.Map: int size()>();
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
$r3[1] = $r5;
$r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Incorrect size!%nmap=%s, size=%d%n\", $r3);
specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>($r6);
throw $r2;
"
    "Block 2:
[preds: 0 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: jsr166tests.jtreg.util.Map.LockStep;
r0 := @parameter0: java.util.Map;
r1 := @parameter1: java.util.Iterator;
i0 = interfaceinvoke r0.<java.util.Map: int size()>();
interfaceinvoke r1.<java.util.Iterator: void remove()>();
$i1 = interfaceinvoke r0.<java.util.Map: int size()>();
$i2 = i0 - 1;
if $i1 == $i2 goto return;
"->"Block 1:
[preds: 0 ] [succs: ]
$r2 = new java.lang.Error;
$r3 = newarray (java.lang.Object)[2];
$r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
$r3[0] = $r4;
$i3 = interfaceinvoke r0.<java.util.Map: int size()>();
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
$r3[1] = $r5;
$r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Incorrect size!%nmap=%s, size=%d%n\", $r3);
specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>($r6);
throw $r2;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: jsr166tests.jtreg.util.Map.LockStep;
r0 := @parameter0: java.util.Map;
r1 := @parameter1: java.util.Iterator;
i0 = interfaceinvoke r0.<java.util.Map: int size()>();
interfaceinvoke r1.<java.util.Iterator: void remove()>();
$i1 = interfaceinvoke r0.<java.util.Map: int size()>();
$i2 = i0 - 1;
if $i1 == $i2 goto return;
"->"Block 2:
[preds: 0 ] [succs: ]
return;
";
}
