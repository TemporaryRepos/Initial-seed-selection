digraph "unitGraph" {
    "r33 := @parameter0: java.lang.String[]"
    "$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE"
    "specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void <init>()>()"
    "r1 = $r0"
    "$i0 = virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: int getCorePoolSize()>()"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)"
    "$i1 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r4, $r5)"
    "i11 = 0"
    "if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1"
    "specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>()"
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31)"
    "i11 = i11 + 1"
    "goto [?= (branch)]"
    "$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7)"
    "$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>"
    "$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>()"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>()"
    "$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>"
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11)"
    "staticinvoke <java.lang.Thread: void sleep(long)>(10L)"
    "$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"
    "$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE"
    "specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>()"
    "r34 = $r14"
    "i12 = 0"
    "if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>"
    "$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2"
    "specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>()"
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29)"
    "i12 = i12 + 1"
    "$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>"
    "$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>()"
    "$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17)"
    "$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)"
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>()"
    "$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>"
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20)"
    "$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)"
    "$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22)"
    "$r24 = <java.lang.System: java.io.PrintStream out>"
    "$r23 = newarray (java.lang.Object)[2]"
    "$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>"
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)"
    "$r23[0] = $r25"
    "$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>"
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)"
    "$r23[1] = $r26"
    "virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23)"
    "$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>"
    "if $i10 <= 0 goto return"
    "$r28 = new java.lang.Exception"
    "specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>(\"Some tests failed\")"
    "throw $r28"
    "return"
    "r33 := @parameter0: java.lang.String[]"->"$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE";
    "$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE"->"specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void <init>()>()";
    "specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$i0 = virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: int getCorePoolSize()>()";
    "$i0 = virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: int getCorePoolSize()>()"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)"->"$i1 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$i1 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r4, $r5)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r4, $r5)"->"i11 = 0";
    "i11 = 0"->"if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1";
    "if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$r31 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1"->"specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>()";
    "specialinvoke $r31.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$1: void <init>()>()"->"virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31)";
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r31)"->"i11 = i11 + 1";
    "i11 = i11 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i11 >= 10 goto $i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$i2 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r6, $r7)"->"$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>";
    "$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTask: java.util.concurrent.atomic.AtomicInteger births>"->"$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>()";
    "$i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>()"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"->"virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>()";
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: void shutdown()>()"->"$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>";
    "$r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>"->"virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11)";
    "virtualinvoke r1.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11)"->"staticinvoke <java.lang.Thread: void sleep(long)>(10L)";
    "staticinvoke <java.lang.Thread: void sleep(long)>(10L)"->"$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$i4 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"->"$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE";
    "$r14 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE"->"specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>()";
    "specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void <init>()>()"->"r34 = $r14";
    "r34 = $r14"->"i12 = 0";
    "i12 = 0"->"if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>";
    "if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>"->"$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2";
    "if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>"->"$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>";
    "$r29 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2"->"specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>()";
    "specialinvoke $r29.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$2: void <init>()>()"->"virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29)";
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.Future submit(java.lang.Runnable)>($r29)"->"i12 = i12 + 1";
    "i12 = i12 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i12 >= 10 goto $r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>";
    "$r15 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: java.util.concurrent.atomic.AtomicInteger decorations>"->"$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>()";
    "$i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>()"->"$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)";
    "$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"->"$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r16, $r17)"->"$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$i6 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"->"$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)"->"virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>()";
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: void shutdown()>()"->"$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>";
    "$r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>"->"virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20)";
    "virtualinvoke r34.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom$CustomSTPE: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r20)"->"staticinvoke <java.lang.Thread: void sleep(long)>(10L)";
    "staticinvoke <java.lang.Thread: void sleep(long)>(10L)"->"$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()";
    "$i7 = staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int countExecutorThreads()>()"->"$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)";
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)"->"$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: void equal(java.lang.Object,java.lang.Object)>($r21, $r22)"->"$r24 = <java.lang.System: java.io.PrintStream out>";
    "$r24 = <java.lang.System: java.io.PrintStream out>"->"$r23 = newarray (java.lang.Object)[2]";
    "$r23 = newarray (java.lang.Object)[2]"->"$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>";
    "$i8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int passed>"->"$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)";
    "$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)"->"$r23[0] = $r25";
    "$r23[0] = $r25"->"$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>";
    "$i9 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>"->"$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)";
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)"->"$r23[1] = $r26";
    "$r23[1] = $r26"->"virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23)";
    "virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r23)"->"$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>";
    "$i10 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.Custom: int failed>"->"if $i10 <= 0 goto return";
    "if $i10 <= 0 goto return"->"$r28 = new java.lang.Exception";
    "if $i10 <= 0 goto return"->"return";
    "$r28 = new java.lang.Exception"->"specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>(\"Some tests failed\")";
    "specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>(\"Some tests failed\")"->"throw $r28";
}
