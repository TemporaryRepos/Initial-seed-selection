digraph "unitGraph" {
    "r51 := @parameter0: java.lang.String[]"
    "$r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()"
    "virtualinvoke $r0.<java.lang.Thread: void setName(java.lang.String)>(\"mainThread\")"
    "$r1 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r1.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"
    "r52 = $r1"
    "$i0 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)"
    "r53 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r52)"
    "$r4 = newarray (boolean)[2]"
    "$r4[0] = 0"
    "$r4[1] = 1"
    "r54 = $r4"
    "i16 = lengthof r54"
    "i17 = 0"
    "if i17 >= i16 goto (branch)"
    "z3 = r54[i17]"
    "i18 = 0"
    "if i18 >= 4 goto i17 = i17 + 1"
    "$r36 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"
    "r55 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r36"
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r37 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"
    "r56 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r37"
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"
    "virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int await()>()"
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r55, null)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r56, null)"
    "$z2 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "if $z2 != 0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)]"
    "$z4 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)"
    "$i14 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"
    "$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)"
    "$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r38, $r39)"
    "$i15 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15)"
    "$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r40, $r41)"
    "if z3 == 0 goto i18 = i18 + 1"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r52)"
    "i18 = i18 + 1"
    "goto [?= (branch)]"
    "i17 = i17 + 1"
    "goto [?= $r5 = new java.util.concurrent.CyclicBarrier]"
    "$r50 := @caughtexception"
    "r57 = $r50"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r57)"
    "$r5 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"
    "r58 = $r5"
    "r59 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r58)"
    "i19 = 0"
    "if i19 >= 4 goto (branch)"
    "$r34 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"
    "r60 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r34"
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r35 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"
    "r61 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r35"
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void interrupt()>()"
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r60, class \"Ljava/lang/InterruptedException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r61, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r58)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r58)"
    "i19 = i19 + 1"
    "goto [?= $r6 = new java.util.concurrent.CyclicBarrier]"
    "$r49 := @caughtexception"
    "r62 = $r49"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r62)"
    "$r6 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r6.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"
    "r63 = $r6"
    "r64 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r63)"
    "i20 = 0"
    "if i20 >= 4 goto (branch)"
    "$r28 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"
    "r65 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r28"
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r29 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"
    "r66 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r29"
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "if $i10 >= 2 goto virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"
    "staticinvoke <java.lang.Thread: void yield()>()"
    "goto [?= $i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"
    "virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r65, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r66, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "$z1 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "if $z1 != 0 goto $z5 = 0"
    "$z5 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)]"
    "$z5 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)"
    "$i11 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getParties()>()"
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11)"
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"
    "$i12 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12)"
    "$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r32, $r33)"
    "i20 = i20 + 1"
    "goto [?= $r7 = new java.util.concurrent.CyclicBarrier]"
    "$r48 := @caughtexception"
    "r67 = $r48"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r67)"
    "$r7 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"
    "r68 = $r7"
    "r69 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r68)"
    "$r8 = newarray (long)[2]"
    "$r8[0] = 0L"
    "$r8[1] = 10L"
    "r70 = $r8"
    "i21 = lengthof r70"
    "i22 = 0"
    "if i22 >= i21 goto (branch)"
    "l23 = r70[i22]"
    "i24 = 0"
    "if i24 >= 2 goto i22 = i22 + 1"
    "r71 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter awaiter(java.util.concurrent.CyclicBarrier,long)>(r68, l23)"
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r24 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>()"
    "r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r24"
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r71, class \"Ljava/util/concurrent/TimeoutException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r25, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r68)"
    "$i9 = virtualinvoke r68.<java.util.concurrent.CyclicBarrier: int getParties()>()"
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)"
    "$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r26, $r27)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r68)"
    "i24 = i24 + 1"
    "i22 = i22 + 1"
    "goto [?= $r9 = new java.util.concurrent.atomic.AtomicInteger]"
    "$r47 := @caughtexception"
    "r72 = $r47"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r72)"
    "$r9 = new java.util.concurrent.atomic.AtomicInteger"
    "specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0)"
    "r73 = $r9"
    "r74 = newarray (java.util.concurrent.CyclicBarrier)[1]"
    "$r10 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6"
    "specialinvoke $r10.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6: void <init>(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.CyclicBarrier[])>(r73, r74)"
    "r75 = $r10"
    "$r11 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r11.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r75)"
    "r76 = $r11"
    "r74[0] = r76"
    "$i1 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getParties()>()"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"
    "r77 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r76)"
    "i25 = 0"
    "if i25 >= 4 goto (branch)"
    "$r18 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"
    "r78 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r18"
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r19 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"
    "r79 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r19"
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"
    "goto [?= $i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"
    "virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"
    "goto [?= virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"
    "$r46 := @caughtexception"
    "r80 = $r46"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r80)"
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r78, null)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r79, null)"
    "$z0 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "if $z0 != 0 goto $z6 = 0"
    "$z6 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)]"
    "$z6 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)"
    "$i6 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r20, $r21)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r76)"
    "$i7 = virtualinvoke r73.<java.util.concurrent.atomic.AtomicInteger: int get()>()"
    "$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)"
    "$i8 = i25 + 1"
    "$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r22, $r23)"
    "i25 = i25 + 1"
    "goto [?= $r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7]"
    "$r45 := @caughtexception"
    "r81 = $r45"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r81)"
    "$r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7"
    "specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7: void <init>()>()"
    "r82 = $r14"
    "$r15 = new java.util.concurrent.CyclicBarrier"
    "specialinvoke $r15.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r82)"
    "r83 = $r15"
    "r84 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r83)"
    "i26 = 0"
    "if i26 >= 4 goto (branch)"
    "$r16 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"
    "r85 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r16"
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$r17 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"
    "r86 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r17"
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"
    "$i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"
    "goto [?= $i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"
    "virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")"
    "goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"
    "$r44 := @caughtexception"
    "r87 = $r44"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"
    "$r43 := @caughtexception"
    "r88 = $r43"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r88)"
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r85, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r86, class \"Ljava/util/concurrent/BrokenBarrierException;\")"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r83)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r83)"
    "i26 = i26 + 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()]"
    "$r42 := @caughtexception"
    "r89 = $r42"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r89)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()"
    "return"
    "r51 := @parameter0: java.lang.String[]"->"$r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()";
    "$r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()"->"virtualinvoke $r0.<java.lang.Thread: void setName(java.lang.String)>(\"mainThread\")";
    "virtualinvoke $r0.<java.lang.Thread: void setName(java.lang.String)>(\"mainThread\")"->"$r1 = new java.util.concurrent.CyclicBarrier";
    "virtualinvoke $r0.<java.lang.Thread: void setName(java.lang.String)>(\"mainThread\")"->"$r50 := @caughtexception";
    "$r1 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r1.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)";
    "$r1 = new java.util.concurrent.CyclicBarrier"->"$r50 := @caughtexception";
    "specialinvoke $r1.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"r52 = $r1";
    "specialinvoke $r1.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"$r50 := @caughtexception";
    "r52 = $r1"->"$i0 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()";
    "r52 = $r1"->"$r50 := @caughtexception";
    "$i0 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$i0 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r50 := @caughtexception";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r50 := @caughtexception";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)";
    "$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)"->"r53 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r52)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r2, $r3)"->"$r50 := @caughtexception";
    "r53 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r52)"->"$r4 = newarray (boolean)[2]";
    "r53 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r52)"->"$r50 := @caughtexception";
    "$r4 = newarray (boolean)[2]"->"$r4[0] = 0";
    "$r4 = newarray (boolean)[2]"->"$r50 := @caughtexception";
    "$r4[0] = 0"->"$r4[1] = 1";
    "$r4[0] = 0"->"$r50 := @caughtexception";
    "$r4[1] = 1"->"r54 = $r4";
    "$r4[1] = 1"->"$r50 := @caughtexception";
    "r54 = $r4"->"i16 = lengthof r54";
    "r54 = $r4"->"$r50 := @caughtexception";
    "i16 = lengthof r54"->"i17 = 0";
    "i16 = lengthof r54"->"$r50 := @caughtexception";
    "i17 = 0"->"if i17 >= i16 goto (branch)";
    "i17 = 0"->"$r50 := @caughtexception";
    "if i17 >= i16 goto (branch)"->"z3 = r54[i17]";
    "if i17 >= i16 goto (branch)"->"goto [?= $r5 = new java.util.concurrent.CyclicBarrier]";
    "if i17 >= i16 goto (branch)"->"$r50 := @caughtexception";
    "z3 = r54[i17]"->"i18 = 0";
    "z3 = r54[i17]"->"$r50 := @caughtexception";
    "i18 = 0"->"if i18 >= 4 goto i17 = i17 + 1";
    "i18 = 0"->"$r50 := @caughtexception";
    "if i18 >= 4 goto i17 = i17 + 1"->"$r36 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()";
    "if i18 >= 4 goto i17 = i17 + 1"->"i17 = i17 + 1";
    "if i18 >= 4 goto i17 = i17 + 1"->"$r50 := @caughtexception";
    "$r36 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"->"r55 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r36";
    "$r36 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"->"$r50 := @caughtexception";
    "r55 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r36"->"virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r55 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r36"->"$r50 := @caughtexception";
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r37 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r50 := @caughtexception";
    "$r37 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"->"r56 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r37";
    "$r37 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>()"->"$r50 := @caughtexception";
    "r56 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r37"->"virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r56 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r37"->"$r50 := @caughtexception";
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int await()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r50 := @caughtexception";
    "virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int await()>()"->"virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r50 := @caughtexception";
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r55.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r50 := @caughtexception";
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r55, null)";
    "virtualinvoke r56.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r55, null)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r56, null)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r55, null)"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r56, null)"->"$z2 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r56, null)"->"$r50 := @caughtexception";
    "$z2 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"if $z2 != 0 goto $z4 = 0";
    "$z2 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"$r50 := @caughtexception";
    "if $z2 != 0 goto $z4 = 0"->"$z4 = 1";
    "if $z2 != 0 goto $z4 = 0"->"$z4 = 0";
    "if $z2 != 0 goto $z4 = 0"->"$r50 := @caughtexception";
    "$z4 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)]";
    "$z4 = 1"->"$r50 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)]"->"$r50 := @caughtexception";
    "$z4 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)";
    "$z4 = 0"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)"->"$i14 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z4)"->"$r50 := @caughtexception";
    "$i14 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)";
    "$i14 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r50 := @caughtexception";
    "$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)"->"$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14)"->"$r50 := @caughtexception";
    "$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r38, $r39)";
    "$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r38, $r39)"->"$i15 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r38, $r39)"->"$r50 := @caughtexception";
    "$i15 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15)";
    "$i15 = virtualinvoke r52.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r50 := @caughtexception";
    "$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15)"->"$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15)"->"$r50 := @caughtexception";
    "$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r40, $r41)";
    "$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r40, $r41)"->"if z3 == 0 goto i18 = i18 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r40, $r41)"->"$r50 := @caughtexception";
    "if z3 == 0 goto i18 = i18 + 1"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r52)";
    "if z3 == 0 goto i18 = i18 + 1"->"i18 = i18 + 1";
    "if z3 == 0 goto i18 = i18 + 1"->"$r50 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r52)"->"i18 = i18 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r52)"->"$r50 := @caughtexception";
    "i18 = i18 + 1"->"goto [?= (branch)]";
    "i18 = i18 + 1"->"$r50 := @caughtexception";
    "goto [?= (branch)]"->"if i18 >= 4 goto i17 = i17 + 1";
    "goto [?= (branch)]"->"$r50 := @caughtexception";
    "i17 = i17 + 1"->"goto [?= (branch)]";
    "i17 = i17 + 1"->"$r50 := @caughtexception";
    "goto [?= (branch)]"->"if i17 >= i16 goto (branch)";
    "goto [?= (branch)]"->"$r50 := @caughtexception";
    "goto [?= $r5 = new java.util.concurrent.CyclicBarrier]"->"$r5 = new java.util.concurrent.CyclicBarrier";
    "goto [?= $r5 = new java.util.concurrent.CyclicBarrier]"->"$r49 := @caughtexception";
    "$r50 := @caughtexception"->"r57 = $r50";
    "r57 = $r50"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r57)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r57)"->"$r5 = new java.util.concurrent.CyclicBarrier";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r57)"->"$r49 := @caughtexception";
    "$r5 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)";
    "$r5 = new java.util.concurrent.CyclicBarrier"->"$r49 := @caughtexception";
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"r58 = $r5";
    "specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"$r49 := @caughtexception";
    "r58 = $r5"->"r59 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r58)";
    "r58 = $r5"->"$r49 := @caughtexception";
    "r59 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r58)"->"i19 = 0";
    "r59 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r58)"->"$r49 := @caughtexception";
    "i19 = 0"->"if i19 >= 4 goto (branch)";
    "i19 = 0"->"$r49 := @caughtexception";
    "if i19 >= 4 goto (branch)"->"$r34 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()";
    "if i19 >= 4 goto (branch)"->"goto [?= $r6 = new java.util.concurrent.CyclicBarrier]";
    "if i19 >= 4 goto (branch)"->"$r49 := @caughtexception";
    "$r34 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"->"r60 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r34";
    "$r34 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"->"$r49 := @caughtexception";
    "r60 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r34"->"virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r60 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r34"->"$r49 := @caughtexception";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r35 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r49 := @caughtexception";
    "$r35 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"->"r61 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r35";
    "$r35 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>()"->"$r49 := @caughtexception";
    "r61 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r35"->"virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r61 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r35"->"$r49 := @caughtexception";
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r49 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void interrupt()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r49 := @caughtexception";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void interrupt()>()"->"virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void interrupt()>()"->"$r49 := @caughtexception";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r60.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r49 := @caughtexception";
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r60, class \"Ljava/lang/InterruptedException;\")";
    "virtualinvoke r61.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r49 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r60, class \"Ljava/lang/InterruptedException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r61, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r60, class \"Ljava/lang/InterruptedException;\")"->"$r49 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r61, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r58)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r61, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r49 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r58)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r58)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r58)"->"$r49 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r58)"->"i19 = i19 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r58)"->"$r49 := @caughtexception";
    "i19 = i19 + 1"->"goto [?= (branch)]";
    "i19 = i19 + 1"->"$r49 := @caughtexception";
    "goto [?= (branch)]"->"if i19 >= 4 goto (branch)";
    "goto [?= (branch)]"->"$r49 := @caughtexception";
    "goto [?= $r6 = new java.util.concurrent.CyclicBarrier]"->"$r6 = new java.util.concurrent.CyclicBarrier";
    "goto [?= $r6 = new java.util.concurrent.CyclicBarrier]"->"$r48 := @caughtexception";
    "$r49 := @caughtexception"->"r62 = $r49";
    "r62 = $r49"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r62)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r62)"->"$r6 = new java.util.concurrent.CyclicBarrier";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r62)"->"$r48 := @caughtexception";
    "$r6 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r6.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)";
    "$r6 = new java.util.concurrent.CyclicBarrier"->"$r48 := @caughtexception";
    "specialinvoke $r6.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"r63 = $r6";
    "specialinvoke $r6.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"$r48 := @caughtexception";
    "r63 = $r6"->"r64 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r63)";
    "r63 = $r6"->"$r48 := @caughtexception";
    "r64 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r63)"->"i20 = 0";
    "r64 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r63)"->"$r48 := @caughtexception";
    "i20 = 0"->"if i20 >= 4 goto (branch)";
    "i20 = 0"->"$r48 := @caughtexception";
    "if i20 >= 4 goto (branch)"->"$r28 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()";
    "if i20 >= 4 goto (branch)"->"goto [?= $r7 = new java.util.concurrent.CyclicBarrier]";
    "if i20 >= 4 goto (branch)"->"$r48 := @caughtexception";
    "$r28 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"->"r65 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r28";
    "$r28 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"->"$r48 := @caughtexception";
    "r65 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r28"->"virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r65 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r28"->"$r48 := @caughtexception";
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r29 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r48 := @caughtexception";
    "$r29 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"->"r66 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r29";
    "$r29 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>()"->"$r48 := @caughtexception";
    "r66 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r29"->"virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r66 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r29"->"$r48 := @caughtexception";
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r48 := @caughtexception";
    "$i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"if $i10 >= 2 goto virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()";
    "$i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r48 := @caughtexception";
    "if $i10 >= 2 goto virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $i10 >= 2 goto virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"->"virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()";
    "if $i10 >= 2 goto virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"->"$r48 := @caughtexception";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]";
    "staticinvoke <java.lang.Thread: void yield()>()"->"$r48 := @caughtexception";
    "goto [?= $i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "goto [?= $i10 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$r48 := @caughtexception";
    "virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"->"virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r63.<java.util.concurrent.CyclicBarrier: void reset()>()"->"$r48 := @caughtexception";
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r65.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r48 := @caughtexception";
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r65, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "virtualinvoke r66.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r65, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r66, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r65, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r66, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$z1 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r66, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r48 := @caughtexception";
    "$z1 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"if $z1 != 0 goto $z5 = 0";
    "$z1 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"$r48 := @caughtexception";
    "if $z1 != 0 goto $z5 = 0"->"$z5 = 1";
    "if $z1 != 0 goto $z5 = 0"->"$z5 = 0";
    "if $z1 != 0 goto $z5 = 0"->"$r48 := @caughtexception";
    "$z5 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)]";
    "$z5 = 1"->"$r48 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)]"->"$r48 := @caughtexception";
    "$z5 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)";
    "$z5 = 0"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)"->"$i11 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getParties()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z5)"->"$r48 := @caughtexception";
    "$i11 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11)";
    "$i11 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r48 := @caughtexception";
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11)"->"$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11)"->"$r48 := @caughtexception";
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)";
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"->"$i12 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"->"$r48 := @caughtexception";
    "$i12 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12)";
    "$i12 = virtualinvoke r63.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r48 := @caughtexception";
    "$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12)"->"$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12)"->"$r48 := @caughtexception";
    "$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r32, $r33)";
    "$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r48 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r32, $r33)"->"i20 = i20 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r32, $r33)"->"$r48 := @caughtexception";
    "i20 = i20 + 1"->"goto [?= (branch)]";
    "i20 = i20 + 1"->"$r48 := @caughtexception";
    "goto [?= (branch)]"->"if i20 >= 4 goto (branch)";
    "goto [?= (branch)]"->"$r48 := @caughtexception";
    "goto [?= $r7 = new java.util.concurrent.CyclicBarrier]"->"$r7 = new java.util.concurrent.CyclicBarrier";
    "goto [?= $r7 = new java.util.concurrent.CyclicBarrier]"->"$r47 := @caughtexception";
    "$r48 := @caughtexception"->"r67 = $r48";
    "r67 = $r48"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r67)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r67)"->"$r7 = new java.util.concurrent.CyclicBarrier";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r67)"->"$r47 := @caughtexception";
    "$r7 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)";
    "$r7 = new java.util.concurrent.CyclicBarrier"->"$r47 := @caughtexception";
    "specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"r68 = $r7";
    "specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(3)"->"$r47 := @caughtexception";
    "r68 = $r7"->"r69 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r68)";
    "r68 = $r7"->"$r47 := @caughtexception";
    "r69 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r68)"->"$r8 = newarray (long)[2]";
    "r69 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r68)"->"$r47 := @caughtexception";
    "$r8 = newarray (long)[2]"->"$r8[0] = 0L";
    "$r8 = newarray (long)[2]"->"$r47 := @caughtexception";
    "$r8[0] = 0L"->"$r8[1] = 10L";
    "$r8[0] = 0L"->"$r47 := @caughtexception";
    "$r8[1] = 10L"->"r70 = $r8";
    "$r8[1] = 10L"->"$r47 := @caughtexception";
    "r70 = $r8"->"i21 = lengthof r70";
    "r70 = $r8"->"$r47 := @caughtexception";
    "i21 = lengthof r70"->"i22 = 0";
    "i21 = lengthof r70"->"$r47 := @caughtexception";
    "i22 = 0"->"if i22 >= i21 goto (branch)";
    "i22 = 0"->"$r47 := @caughtexception";
    "if i22 >= i21 goto (branch)"->"l23 = r70[i22]";
    "if i22 >= i21 goto (branch)"->"goto [?= $r9 = new java.util.concurrent.atomic.AtomicInteger]";
    "if i22 >= i21 goto (branch)"->"$r47 := @caughtexception";
    "l23 = r70[i22]"->"i24 = 0";
    "l23 = r70[i22]"->"$r47 := @caughtexception";
    "i24 = 0"->"if i24 >= 2 goto i22 = i22 + 1";
    "i24 = 0"->"$r47 := @caughtexception";
    "if i24 >= 2 goto i22 = i22 + 1"->"r71 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter awaiter(java.util.concurrent.CyclicBarrier,long)>(r68, l23)";
    "if i24 >= 2 goto i22 = i22 + 1"->"i22 = i22 + 1";
    "if i24 >= 2 goto i22 = i22 + 1"->"$r47 := @caughtexception";
    "r71 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter awaiter(java.util.concurrent.CyclicBarrier,long)>(r68, l23)"->"virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r71 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter awaiter(java.util.concurrent.CyclicBarrier,long)>(r68, l23)"->"$r47 := @caughtexception";
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r24 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r47 := @caughtexception";
    "$r24 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>()"->"r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r24";
    "$r24 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>()"->"$r47 := @caughtexception";
    "r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r24"->"virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r25 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r24"->"$r47 := @caughtexception";
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r47 := @caughtexception";
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r71.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r47 := @caughtexception";
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r71, class \"Ljava/util/concurrent/TimeoutException;\")";
    "virtualinvoke r25.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r71, class \"Ljava/util/concurrent/TimeoutException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r25, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r71, class \"Ljava/util/concurrent/TimeoutException;\")"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r25, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r68)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r25, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r68)"->"$i9 = virtualinvoke r68.<java.util.concurrent.CyclicBarrier: int getParties()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r68)"->"$r47 := @caughtexception";
    "$i9 = virtualinvoke r68.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)";
    "$i9 = virtualinvoke r68.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r47 := @caughtexception";
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)"->"$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9)"->"$r47 := @caughtexception";
    "$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r26, $r27)";
    "$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r26, $r27)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r68)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r26, $r27)"->"$r47 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r68)"->"i24 = i24 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r68)"->"$r47 := @caughtexception";
    "i24 = i24 + 1"->"goto [?= (branch)]";
    "i24 = i24 + 1"->"$r47 := @caughtexception";
    "goto [?= (branch)]"->"if i24 >= 2 goto i22 = i22 + 1";
    "goto [?= (branch)]"->"$r47 := @caughtexception";
    "i22 = i22 + 1"->"goto [?= (branch)]";
    "i22 = i22 + 1"->"$r47 := @caughtexception";
    "goto [?= (branch)]"->"if i22 >= i21 goto (branch)";
    "goto [?= (branch)]"->"$r47 := @caughtexception";
    "goto [?= $r9 = new java.util.concurrent.atomic.AtomicInteger]"->"$r9 = new java.util.concurrent.atomic.AtomicInteger";
    "goto [?= $r9 = new java.util.concurrent.atomic.AtomicInteger]"->"$r45 := @caughtexception";
    "$r47 := @caughtexception"->"r72 = $r47";
    "r72 = $r47"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r72)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r72)"->"$r9 = new java.util.concurrent.atomic.AtomicInteger";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r72)"->"$r45 := @caughtexception";
    "$r9 = new java.util.concurrent.atomic.AtomicInteger"->"specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0)";
    "$r9 = new java.util.concurrent.atomic.AtomicInteger"->"$r45 := @caughtexception";
    "specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0)"->"r73 = $r9";
    "specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0)"->"$r45 := @caughtexception";
    "r73 = $r9"->"r74 = newarray (java.util.concurrent.CyclicBarrier)[1]";
    "r73 = $r9"->"$r45 := @caughtexception";
    "r74 = newarray (java.util.concurrent.CyclicBarrier)[1]"->"$r10 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6";
    "r74 = newarray (java.util.concurrent.CyclicBarrier)[1]"->"$r45 := @caughtexception";
    "$r10 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6"->"specialinvoke $r10.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6: void <init>(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.CyclicBarrier[])>(r73, r74)";
    "$r10 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6"->"$r45 := @caughtexception";
    "specialinvoke $r10.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6: void <init>(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.CyclicBarrier[])>(r73, r74)"->"r75 = $r10";
    "specialinvoke $r10.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$6: void <init>(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.CyclicBarrier[])>(r73, r74)"->"$r45 := @caughtexception";
    "r75 = $r10"->"$r11 = new java.util.concurrent.CyclicBarrier";
    "r75 = $r10"->"$r45 := @caughtexception";
    "$r11 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r11.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r75)";
    "$r11 = new java.util.concurrent.CyclicBarrier"->"$r45 := @caughtexception";
    "specialinvoke $r11.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r75)"->"r76 = $r11";
    "specialinvoke $r11.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r75)"->"$r45 := @caughtexception";
    "r76 = $r11"->"r74[0] = r76";
    "r76 = $r11"->"$r45 := @caughtexception";
    "r74[0] = r76"->"$i1 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getParties()>()";
    "r74[0] = r76"->"$r45 := @caughtexception";
    "$i1 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$i1 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getParties()>()"->"$r45 := @caughtexception";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r45 := @caughtexception";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"->"r77 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r76)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"->"$r45 := @caughtexception";
    "r77 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r76)"->"i25 = 0";
    "r77 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r76)"->"$r45 := @caughtexception";
    "i25 = 0"->"if i25 >= 4 goto (branch)";
    "i25 = 0"->"$r45 := @caughtexception";
    "if i25 >= 4 goto (branch)"->"$r18 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()";
    "if i25 >= 4 goto (branch)"->"goto [?= $r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7]";
    "if i25 >= 4 goto (branch)"->"$r45 := @caughtexception";
    "$r18 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"->"r78 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r18";
    "$r18 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"->"$r45 := @caughtexception";
    "r78 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r18"->"virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r78 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r18"->"$r45 := @caughtexception";
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r19 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r45 := @caughtexception";
    "$r19 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"->"r79 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r19";
    "$r19 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>()"->"$r45 := @caughtexception";
    "r79 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r19"->"virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r79 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r19"->"$r45 := @caughtexception";
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r45 := @caughtexception";
    "$i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()";
    "$i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r45 := @caughtexception";
    "if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()";
    "if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r46 := @caughtexception";
    "if $i4 >= 2 goto virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r45 := @caughtexception";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]";
    "staticinvoke <java.lang.Thread: void yield()>()"->"$r45 := @caughtexception";
    "goto [?= $i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "goto [?= $i4 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$r45 := @caughtexception";
    "virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r46 := @caughtexception";
    "virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r45 := @caughtexception";
    "virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int await()>()"->"goto [?= virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]";
    "goto [?= virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "goto [?= virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"$r45 := @caughtexception";
    "$r46 := @caughtexception"->"r80 = $r46";
    "$r46 := @caughtexception"->"$r45 := @caughtexception";
    "r80 = $r46"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r80)";
    "r80 = $r46"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r80)"->"virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r80)"->"$r45 := @caughtexception";
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r78.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r45 := @caughtexception";
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r78, null)";
    "virtualinvoke r79.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r78, null)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r79, null)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r78, null)"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r79, null)"->"$z0 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r79, null)"->"$r45 := @caughtexception";
    "$z0 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"if $z0 != 0 goto $z6 = 0";
    "$z0 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"$r45 := @caughtexception";
    "if $z0 != 0 goto $z6 = 0"->"$z6 = 1";
    "if $z0 != 0 goto $z6 = 0"->"$z6 = 0";
    "if $z0 != 0 goto $z6 = 0"->"$r45 := @caughtexception";
    "$z6 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)]";
    "$z6 = 1"->"$r45 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)]"->"$r45 := @caughtexception";
    "$z6 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)";
    "$z6 = 0"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)"->"$i6 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z6)"->"$r45 := @caughtexception";
    "$i6 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)";
    "$i6 = virtualinvoke r76.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r45 := @caughtexception";
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"->"$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)"->"$r45 := @caughtexception";
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r20, $r21)";
    "$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r20, $r21)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r76)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r20, $r21)"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r76)"->"$i7 = virtualinvoke r73.<java.util.concurrent.atomic.AtomicInteger: int get()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r76)"->"$r45 := @caughtexception";
    "$i7 = virtualinvoke r73.<java.util.concurrent.atomic.AtomicInteger: int get()>()"->"$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)";
    "$i7 = virtualinvoke r73.<java.util.concurrent.atomic.AtomicInteger: int get()>()"->"$r45 := @caughtexception";
    "$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)"->"$i8 = i25 + 1";
    "$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)"->"$r45 := @caughtexception";
    "$i8 = i25 + 1"->"$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)";
    "$i8 = i25 + 1"->"$r45 := @caughtexception";
    "$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r22, $r23)";
    "$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)"->"$r45 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r22, $r23)"->"i25 = i25 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r22, $r23)"->"$r45 := @caughtexception";
    "i25 = i25 + 1"->"goto [?= (branch)]";
    "i25 = i25 + 1"->"$r45 := @caughtexception";
    "goto [?= (branch)]"->"if i25 >= 4 goto (branch)";
    "goto [?= (branch)]"->"$r45 := @caughtexception";
    "goto [?= $r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7]"->"$r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7";
    "goto [?= $r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7]"->"$r42 := @caughtexception";
    "$r45 := @caughtexception"->"r81 = $r45";
    "r81 = $r45"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r81)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r81)"->"$r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r81)"->"$r42 := @caughtexception";
    "$r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7"->"specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7: void <init>()>()";
    "$r14 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7"->"$r42 := @caughtexception";
    "specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7: void <init>()>()"->"r82 = $r14";
    "specialinvoke $r14.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$7: void <init>()>()"->"$r42 := @caughtexception";
    "r82 = $r14"->"$r15 = new java.util.concurrent.CyclicBarrier";
    "r82 = $r14"->"$r42 := @caughtexception";
    "$r15 = new java.util.concurrent.CyclicBarrier"->"specialinvoke $r15.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r82)";
    "$r15 = new java.util.concurrent.CyclicBarrier"->"$r42 := @caughtexception";
    "specialinvoke $r15.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r82)"->"r83 = $r15";
    "specialinvoke $r15.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(3, r82)"->"$r42 := @caughtexception";
    "r83 = $r15"->"r84 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r83)";
    "r83 = $r15"->"$r42 := @caughtexception";
    "r84 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r83)"->"i26 = 0";
    "r84 = staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.Iterator awaiterIterator(java.util.concurrent.CyclicBarrier)>(r83)"->"$r42 := @caughtexception";
    "i26 = 0"->"if i26 >= 4 goto (branch)";
    "i26 = 0"->"$r42 := @caughtexception";
    "if i26 >= 4 goto (branch)"->"$r16 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()";
    "if i26 >= 4 goto (branch)"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()]";
    "if i26 >= 4 goto (branch)"->"$r42 := @caughtexception";
    "$r16 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"r85 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r16";
    "$r16 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"$r42 := @caughtexception";
    "r85 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r16"->"virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r85 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r16"->"$r42 := @caughtexception";
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r17 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()";
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r42 := @caughtexception";
    "$r17 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"r86 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r17";
    "$r17 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>()"->"$r42 := @caughtexception";
    "r86 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r17"->"virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()";
    "r86 = (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter) $r17"->"$r42 := @caughtexception";
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()";
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void start()>()"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void toTheStartingGate()>()"->"$r42 := @caughtexception";
    "$i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()";
    "$i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r42 := @caughtexception";
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r44 := @caughtexception";
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r43 := @caughtexception";
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r42 := @caughtexception";
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $i2 >= 2 goto virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]";
    "staticinvoke <java.lang.Thread: void yield()>()"->"$r42 := @caughtexception";
    "goto [?= $i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "goto [?= $i2 = virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()]"->"$r42 := @caughtexception";
    "virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r44 := @caughtexception";
    "virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r43 := @caughtexception";
    "virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"$r42 := @caughtexception";
    "virtualinvoke r83.<java.util.concurrent.CyclicBarrier: int await()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")"->"$r44 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")"->"$r43 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void fail(java.lang.String)>(\"Expected Error not thrown\")"->"goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]";
    "goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"$r42 := @caughtexception";
    "$r44 := @caughtexception"->"r87 = $r44";
    "$r44 := @caughtexception"->"$r42 := @caughtexception";
    "r87 = $r44"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "r87 = $r44"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"$r42 := @caughtexception";
    "goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "goto [?= virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()]"->"$r42 := @caughtexception";
    "$r43 := @caughtexception"->"r88 = $r43";
    "$r43 := @caughtexception"->"$r42 := @caughtexception";
    "r88 = $r43"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r88)";
    "r88 = $r43"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r88)"->"virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r88)"->"$r42 := @caughtexception";
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()";
    "virtualinvoke r85.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r42 := @caughtexception";
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r85, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "virtualinvoke r86.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter: void join()>()"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r85, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r86, class \"Ljava/util/concurrent/BrokenBarrierException;\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r85, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r86, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r83)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkResult(jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Awaiter,java.lang.Class)>(r86, class \"Ljava/util/concurrent/BrokenBarrierException;\")"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r83)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r83)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void checkBroken(java.util.concurrent.CyclicBarrier)>(r83)"->"$r42 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r83)"->"i26 = i26 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>(r83)"->"$r42 := @caughtexception";
    "i26 = i26 + 1"->"goto [?= (branch)]";
    "i26 = i26 + 1"->"$r42 := @caughtexception";
    "goto [?= (branch)]"->"if i26 >= 4 goto (branch)";
    "goto [?= (branch)]"->"$r42 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()";
    "$r42 := @caughtexception"->"r89 = $r42";
    "r89 = $r42"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r89)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r89)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void testInterrupts()>()"->"return";
}
