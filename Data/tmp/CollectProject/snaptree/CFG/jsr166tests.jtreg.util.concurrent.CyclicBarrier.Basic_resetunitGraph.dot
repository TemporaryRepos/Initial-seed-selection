digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.CyclicBarrier"
    "virtualinvoke r0.<java.util.concurrent.CyclicBarrier: void reset()>()"
    "$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "if $z0 != 0 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)]"
    "$z1 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)"
    "$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"
    "return"
    "r0 := @parameter0: java.util.concurrent.CyclicBarrier"->"virtualinvoke r0.<java.util.concurrent.CyclicBarrier: void reset()>()";
    "virtualinvoke r0.<java.util.concurrent.CyclicBarrier: void reset()>()"->"$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"if $z0 != 0 goto $z1 = 0";
    "if $z0 != 0 goto $z1 = 0"->"$z1 = 1";
    "if $z0 != 0 goto $z1 = 0"->"$z1 = 0";
    "$z1 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)";
    "$z1 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z1)"->"$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"->"return";
}
