digraph "unitGraph" {
    "r0 := @parameter0: java.util.Map$Entry"
    "$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, null)"
    "$r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r2, null)"
    "$r3 = new java.util.AbstractMap$SimpleEntry"
    "specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r3)"
    "$r4 = new java.util.AbstractMap$SimpleImmutableEntry"
    "specialinvoke $r4.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r4)"
    "$r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r5, \"null=null\")"
    "$z0 = r0 instanceof java.util.AbstractMap$SimpleEntry"
    "if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"
    "$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "$r8 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r7)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r8, null)"
    "$r9 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"
    "$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"
    "goto [?= return]"
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"
    "$r12 := @caughtexception"
    "r13 = $r12"
    "$r11 := @caughtexception"
    "r14 = $r11"
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r14)"
    "return"
    "r0 := @parameter0: java.util.Map$Entry"->"$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()";
    "$r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>()"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, null)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r1, null)"->"$r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r2, null)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r2, null)"->"$r3 = new java.util.AbstractMap$SimpleEntry";
    "$r3 = new java.util.AbstractMap$SimpleEntry"->"specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)";
    "specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r3)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r3)"->"$r4 = new java.util.AbstractMap$SimpleImmutableEntry";
    "$r4 = new java.util.AbstractMap$SimpleImmutableEntry"->"specialinvoke $r4.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)";
    "specialinvoke $r4.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(null, null)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r4)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>(r0, $r4)"->"$r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()";
    "$r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r5, \"null=null\")";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r5, \"null=null\")"->"$z0 = r0 instanceof java.util.AbstractMap$SimpleEntry";
    "$z0 = r0 instanceof java.util.AbstractMap$SimpleEntry"->"if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)";
    "if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)";
    "if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r12 := @caughtexception";
    "if $z0 == 0 goto interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r11 := @caughtexception";
    "$r7 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"$r8 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r7)";
    "$r8 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r7)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r8, null)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r8, null)"->"$r9 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()";
    "$r9 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>()"->"$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>";
    "$r10 = <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: java.lang.Long v>"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void equal(java.lang.Object,java.lang.Object)>($r9, $r10)"->"goto [?= return]";
    "goto [?= return]"->"return";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r12 := @caughtexception";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"$r11 := @caughtexception";
    "interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null)"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"$r12 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void fail()>()"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r12 := @caughtexception"->"r13 = $r12";
    "r13 = $r12"->"goto [?= return]";
    "goto [?= return]"->"return";
    "$r11 := @caughtexception"->"r14 = $r11";
    "r14 = $r11"->"staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r14)";
    "staticinvoke <jsr166tests.jtreg.util.AbstractMap.SimpleEntries: void unexpected(java.lang.Throwable)>(r14)"->"return";
}
