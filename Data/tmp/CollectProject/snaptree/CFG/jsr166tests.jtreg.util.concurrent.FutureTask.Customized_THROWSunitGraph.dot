digraph "unitGraph" {
    "r5 := @parameter0: java.lang.Class"
    "r0 := @parameter1: jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[]"
    "r1 = r0"
    "i0 = lengthof r1"
    "i1 = 0"
    "if i1 >= i0 goto return"
    "r2 = r1[i1]"
    "virtualinvoke r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun: void f()>()"
    "$r3 = new java.lang.StringBuilder"
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Expected \")"
    "$r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>()"
    "$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)"
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not thrown\")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void fail(java.lang.String)>($r9)"
    "goto [?= i1 = i1 + 1]"
    "$r10 := @caughtexception"
    "r11 = $r10"
    "$r12 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>()"
    "$z0 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12)"
    "if $z0 == 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void pass()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "return"
    "r5 := @parameter0: java.lang.Class"->"r0 := @parameter1: jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[]";
    "r0 := @parameter1: jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun[]"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i1 = 0";
    "i1 = 0"->"if i1 >= i0 goto return";
    "if i1 >= i0 goto return"->"r2 = r1[i1]";
    "if i1 >= i0 goto return"->"return";
    "r2 = r1[i1]"->"virtualinvoke r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun: void f()>()";
    "r2 = r1[i1]"->"$r10 := @caughtexception";
    "virtualinvoke r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun: void f()>()"->"$r3 = new java.lang.StringBuilder";
    "virtualinvoke r2.<jsr166tests.jtreg.util.concurrent.FutureTask.Customized$Fun: void f()>()"->"$r10 := @caughtexception";
    "$r3 = new java.lang.StringBuilder"->"specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()";
    "$r3 = new java.lang.StringBuilder"->"$r10 := @caughtexception";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Expected \")";
    "specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()"->"$r10 := @caughtexception";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Expected \")"->"$r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>()";
    "$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Expected \")"->"$r10 := @caughtexception";
    "$r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>()"->"$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)";
    "$r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>()"->"$r10 := @caughtexception";
    "$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)"->"$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not thrown\")";
    "$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)"->"$r10 := @caughtexception";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not thrown\")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" not thrown\")"->"$r10 := @caughtexception";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void fail(java.lang.String)>($r9)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r10 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void fail(java.lang.String)>($r9)"->"goto [?= i1 = i1 + 1]";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void fail(java.lang.String)>($r9)"->"$r10 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r10 := @caughtexception"->"r11 = $r10";
    "r11 = $r10"->"$r12 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>()";
    "$r12 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>()"->"$z0 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12)";
    "$z0 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12)"->"if $z0 == 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)";
    "if $z0 == 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void pass()>()";
    "if $z0 == 0 goto staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void pass()>()"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.FutureTask.Customized: void unexpected(java.lang.Throwable)>(r11)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= i0 goto return";
}
