digraph "unitGraph" {
    "r9 := @parameter0: java.lang.String[]"
    "s0 = 256"
    "$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2"
    "specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2: void <init>()>()"
    "r1 = $r0"
    "virtualinvoke r1.<java.lang.Thread: void start()>()"
    "i1 = 0"
    "if i1 >= 256 goto <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1"
    "$r2 = new java.util.concurrent.ThreadPoolExecutor"
    "$r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>"
    "$r3 = new java.util.concurrent.ArrayBlockingQueue"
    "specialinvoke $r3.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10)"
    "specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(10, 10, 3L, $r4, $r3)"
    "<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool> = $r2"
    "$r5 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>"
    "virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>()"
    "$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>"
    "$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>"
    "$z0 = virtualinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(3L, $r7)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: void check(boolean)>($z0)"
    "i1 = i1 + 1"
    "goto [?= (branch)]"
    "<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1"
    "virtualinvoke r1.<java.lang.Thread: void join()>()"
    "return"
    "r9 := @parameter0: java.lang.String[]"->"s0 = 256";
    "s0 = 256"->"$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2";
    "$r0 = new jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2"->"specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2: void <init>()>()";
    "specialinvoke $r0.<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace$2: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"virtualinvoke r1.<java.lang.Thread: void start()>()";
    "virtualinvoke r1.<java.lang.Thread: void start()>()"->"i1 = 0";
    "i1 = 0"->"if i1 >= 256 goto <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1";
    "if i1 >= 256 goto <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1"->"$r2 = new java.util.concurrent.ThreadPoolExecutor";
    "if i1 >= 256 goto <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1"->"<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1";
    "$r2 = new java.util.concurrent.ThreadPoolExecutor"->"$r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>";
    "$r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>"->"$r3 = new java.util.concurrent.ArrayBlockingQueue";
    "$r3 = new java.util.concurrent.ArrayBlockingQueue"->"specialinvoke $r3.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10)";
    "specialinvoke $r3.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10)"->"specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(10, 10, 3L, $r4, $r3)";
    "specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(10, 10, 3L, $r4, $r3)"->"<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool> = $r2";
    "<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool> = $r2"->"$r5 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>";
    "$r5 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>"->"virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>()";
    "virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>()"->"$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>";
    "$r8 = <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: java.util.concurrent.ThreadPoolExecutor pool>"->"$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>";
    "$r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>"->"$z0 = virtualinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(3L, $r7)";
    "$z0 = virtualinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(3L, $r7)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: void check(boolean)>($z0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: void check(boolean)>($z0)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i1 >= 256 goto <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1";
    "<jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ShutdownNowExecuteRace: boolean quit> = 1"->"virtualinvoke r1.<java.lang.Thread: void join()>()";
    "virtualinvoke r1.<java.lang.Thread: void join()>()"->"return";
}
