digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r3 := @this: jsr166tests.loops.ReadHoldingWriteLock;
$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
r1 = $r0;
$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();
$r4 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();
$z0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock()>();
virtualinvoke r3.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z0);
$r5 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();
virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();
$r6 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();
return;
"
}
