digraph "unitGraph" {
    "r34 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.ArrayDeque"
    "specialinvoke $r0.<java.util.ArrayDeque: void <init>()>()"
    "r35 = $r0"
    "$r1 = newarray (java.lang.String)[3]"
    "$r1[0] = \"b\""
    "$r1[1] = \"a\""
    "$r1[2] = \"c\""
    "$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)"
    "$z0 = interfaceinvoke r35.<java.util.Deque: boolean addAll(java.util.Collection)>($r2)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z0)"
    "$r3 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r3, \"[b, a, c]\")"
    "$z1 = interfaceinvoke r35.<java.util.Deque: boolean add(java.lang.Object)>(\"d\")"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z1)"
    "$r4 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r4, \"[b, a, c, d]\")"
    "r5 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>(r35)"
    "$z2 = interfaceinvoke r5.<java.util.Queue: boolean add(java.lang.Object)>(\"e\")"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z2)"
    "$r6 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r6, \"[e, b, a, c, d]\")"
    "goto [?= $r7 = new java.util.concurrent.LinkedBlockingDeque]"
    "$r33 := @caughtexception"
    "r36 = $r33"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r36)"
    "$r7 = new java.util.concurrent.LinkedBlockingDeque"
    "specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(3)"
    "r37 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>($r7)"
    "$z3 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z3)"
    "$i0 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"
    "$z4 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"a\")"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z4)"
    "$z5 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"
    "if $z5 != 0 goto $z10 = 0"
    "$z10 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)]"
    "$z10 = 0"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)"
    "$i1 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r10, $r11)"
    "$z6 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"b\")"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z6)"
    "$z7 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"c\")"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z7)"
    "$i2 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"
    "$z8 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"d\")"
    "if $z8 != 0 goto $z11 = 0"
    "$z11 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)]"
    "$z11 = 0"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)"
    "$i3 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r14, $r15)"
    "$r16 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"
    "$r17 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$1"
    "specialinvoke $r17.<jsr166tests.jtreg.util.Collections.AsLifoQueue$1: void <init>(java.util.Queue)>(r37)"
    "$r16[0] = $r17"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/lang/IllegalStateException;\", $r16)"
    "$i4 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)"
    "$r20 = virtualinvoke r37.<java.lang.Object: java.lang.String toString()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r20, \"[c, b, a]\")"
    "$r21 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r21, \"c\")"
    "$r22 = interfaceinvoke r37.<java.util.Queue: java.lang.Object element()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r22, \"c\")"
    "$r23 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r23, \"c\")"
    "$r24 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r24, \"b\")"
    "$r25 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r25, \"a\")"
    "$r26 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r26, \"a\")"
    "$r27 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"
    "$r28 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$2"
    "specialinvoke $r28.<jsr166tests.jtreg.util.Collections.AsLifoQueue$2: void <init>(java.util.Queue)>(r37)"
    "$r27[0] = $r28"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/util/NoSuchElementException;\", $r27)"
    "$r29 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r29, null)"
    "$z9 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z9)"
    "$i5 = interfaceinvoke r37.<java.util.Queue: int size()>()"
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"
    "goto [?= return]"
    "$r32 := @caughtexception"
    "r38 = $r32"
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r38)"
    "return"
    "r34 := @parameter0: java.lang.String[]"->"$r0 = new java.util.ArrayDeque";
    "r34 := @parameter0: java.lang.String[]"->"$r33 := @caughtexception";
    "$r0 = new java.util.ArrayDeque"->"specialinvoke $r0.<java.util.ArrayDeque: void <init>()>()";
    "$r0 = new java.util.ArrayDeque"->"$r33 := @caughtexception";
    "specialinvoke $r0.<java.util.ArrayDeque: void <init>()>()"->"r35 = $r0";
    "specialinvoke $r0.<java.util.ArrayDeque: void <init>()>()"->"$r33 := @caughtexception";
    "r35 = $r0"->"$r1 = newarray (java.lang.String)[3]";
    "r35 = $r0"->"$r33 := @caughtexception";
    "$r1 = newarray (java.lang.String)[3]"->"$r1[0] = \"b\"";
    "$r1 = newarray (java.lang.String)[3]"->"$r33 := @caughtexception";
    "$r1[0] = \"b\""->"$r1[1] = \"a\"";
    "$r1[0] = \"b\""->"$r33 := @caughtexception";
    "$r1[1] = \"a\""->"$r1[2] = \"c\"";
    "$r1[1] = \"a\""->"$r33 := @caughtexception";
    "$r1[2] = \"c\""->"$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)";
    "$r1[2] = \"c\""->"$r33 := @caughtexception";
    "$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)"->"$z0 = interfaceinvoke r35.<java.util.Deque: boolean addAll(java.util.Collection)>($r2)";
    "$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)"->"$r33 := @caughtexception";
    "$z0 = interfaceinvoke r35.<java.util.Deque: boolean addAll(java.util.Collection)>($r2)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z0)";
    "$z0 = interfaceinvoke r35.<java.util.Deque: boolean addAll(java.util.Collection)>($r2)"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z0)"->"$r3 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z0)"->"$r33 := @caughtexception";
    "$r3 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r3, \"[b, a, c]\")";
    "$r3 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r3, \"[b, a, c]\")"->"$z1 = interfaceinvoke r35.<java.util.Deque: boolean add(java.lang.Object)>(\"d\")";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r3, \"[b, a, c]\")"->"$r33 := @caughtexception";
    "$z1 = interfaceinvoke r35.<java.util.Deque: boolean add(java.lang.Object)>(\"d\")"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z1)";
    "$z1 = interfaceinvoke r35.<java.util.Deque: boolean add(java.lang.Object)>(\"d\")"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z1)"->"$r4 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z1)"->"$r33 := @caughtexception";
    "$r4 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r4, \"[b, a, c, d]\")";
    "$r4 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r4, \"[b, a, c, d]\")"->"r5 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>(r35)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r4, \"[b, a, c, d]\")"->"$r33 := @caughtexception";
    "r5 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>(r35)"->"$z2 = interfaceinvoke r5.<java.util.Queue: boolean add(java.lang.Object)>(\"e\")";
    "r5 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>(r35)"->"$r33 := @caughtexception";
    "$z2 = interfaceinvoke r5.<java.util.Queue: boolean add(java.lang.Object)>(\"e\")"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z2)";
    "$z2 = interfaceinvoke r5.<java.util.Queue: boolean add(java.lang.Object)>(\"e\")"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z2)"->"$r6 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z2)"->"$r33 := @caughtexception";
    "$r6 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r6, \"[e, b, a, c, d]\")";
    "$r6 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>()"->"$r33 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r6, \"[e, b, a, c, d]\")"->"goto [?= $r7 = new java.util.concurrent.LinkedBlockingDeque]";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r6, \"[e, b, a, c, d]\")"->"$r33 := @caughtexception";
    "goto [?= $r7 = new java.util.concurrent.LinkedBlockingDeque]"->"$r7 = new java.util.concurrent.LinkedBlockingDeque";
    "goto [?= $r7 = new java.util.concurrent.LinkedBlockingDeque]"->"$r32 := @caughtexception";
    "$r33 := @caughtexception"->"r36 = $r33";
    "r36 = $r33"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r36)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r36)"->"$r7 = new java.util.concurrent.LinkedBlockingDeque";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r36)"->"$r32 := @caughtexception";
    "$r7 = new java.util.concurrent.LinkedBlockingDeque"->"specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(3)";
    "$r7 = new java.util.concurrent.LinkedBlockingDeque"->"$r32 := @caughtexception";
    "specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(3)"->"r37 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>($r7)";
    "specialinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(3)"->"$r32 := @caughtexception";
    "r37 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>($r7)"->"$z3 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()";
    "r37 = staticinvoke <java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>($r7)"->"$r32 := @caughtexception";
    "$z3 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z3)";
    "$z3 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z3)"->"$i0 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z3)"->"$r32 := @caughtexception";
    "$i0 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$i0 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r32 := @caughtexception";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"->"$z4 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"a\")";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"->"$r32 := @caughtexception";
    "$z4 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"a\")"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z4)";
    "$z4 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"a\")"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z4)"->"$z5 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z4)"->"$r32 := @caughtexception";
    "$z5 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"if $z5 != 0 goto $z10 = 0";
    "$z5 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"$r32 := @caughtexception";
    "if $z5 != 0 goto $z10 = 0"->"$z10 = 1";
    "if $z5 != 0 goto $z10 = 0"->"$z10 = 0";
    "if $z5 != 0 goto $z10 = 0"->"$r32 := @caughtexception";
    "$z10 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)]";
    "$z10 = 1"->"$r32 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)]"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)]"->"$r32 := @caughtexception";
    "$z10 = 0"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)";
    "$z10 = 0"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)"->"$i1 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z10)"->"$r32 := @caughtexception";
    "$i1 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$i1 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r32 := @caughtexception";
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r10, $r11)";
    "$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r10, $r11)"->"$z6 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"b\")";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r10, $r11)"->"$r32 := @caughtexception";
    "$z6 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"b\")"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z6)";
    "$z6 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"b\")"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z6)"->"$z7 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"c\")";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z6)"->"$r32 := @caughtexception";
    "$z7 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"c\")"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z7)";
    "$z7 = interfaceinvoke r37.<java.util.Queue: boolean add(java.lang.Object)>(\"c\")"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z7)"->"$i2 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z7)"->"$r32 := @caughtexception";
    "$i2 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "$i2 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"$r32 := @caughtexception";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"->"$z8 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"d\")";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r12, $r13)"->"$r32 := @caughtexception";
    "$z8 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"d\")"->"if $z8 != 0 goto $z11 = 0";
    "$z8 = interfaceinvoke r37.<java.util.Queue: boolean offer(java.lang.Object)>(\"d\")"->"$r32 := @caughtexception";
    "if $z8 != 0 goto $z11 = 0"->"$z11 = 1";
    "if $z8 != 0 goto $z11 = 0"->"$z11 = 0";
    "if $z8 != 0 goto $z11 = 0"->"$r32 := @caughtexception";
    "$z11 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)]";
    "$z11 = 1"->"$r32 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)]"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)]"->"$r32 := @caughtexception";
    "$z11 = 0"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)";
    "$z11 = 0"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)"->"$i3 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z11)"->"$r32 := @caughtexception";
    "$i3 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)";
    "$i3 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"->"$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)"->"$r32 := @caughtexception";
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r14, $r15)";
    "$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r14, $r15)"->"$r16 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r14, $r15)"->"$r32 := @caughtexception";
    "$r16 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"->"$r17 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$1";
    "$r16 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"->"$r32 := @caughtexception";
    "$r17 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$1"->"specialinvoke $r17.<jsr166tests.jtreg.util.Collections.AsLifoQueue$1: void <init>(java.util.Queue)>(r37)";
    "$r17 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$1"->"$r32 := @caughtexception";
    "specialinvoke $r17.<jsr166tests.jtreg.util.Collections.AsLifoQueue$1: void <init>(java.util.Queue)>(r37)"->"$r16[0] = $r17";
    "specialinvoke $r17.<jsr166tests.jtreg.util.Collections.AsLifoQueue$1: void <init>(java.util.Queue)>(r37)"->"$r32 := @caughtexception";
    "$r16[0] = $r17"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/lang/IllegalStateException;\", $r16)";
    "$r16[0] = $r17"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/lang/IllegalStateException;\", $r16)"->"$i4 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/lang/IllegalStateException;\", $r16)"->"$r32 := @caughtexception";
    "$i4 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)";
    "$i4 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"->"$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)"->"$r32 := @caughtexception";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)";
    "$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)"->"$r20 = virtualinvoke r37.<java.lang.Object: java.lang.String toString()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r18, $r19)"->"$r32 := @caughtexception";
    "$r20 = virtualinvoke r37.<java.lang.Object: java.lang.String toString()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r20, \"[c, b, a]\")";
    "$r20 = virtualinvoke r37.<java.lang.Object: java.lang.String toString()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r20, \"[c, b, a]\")"->"$r21 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r20, \"[c, b, a]\")"->"$r32 := @caughtexception";
    "$r21 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r21, \"c\")";
    "$r21 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r21, \"c\")"->"$r22 = interfaceinvoke r37.<java.util.Queue: java.lang.Object element()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r21, \"c\")"->"$r32 := @caughtexception";
    "$r22 = interfaceinvoke r37.<java.util.Queue: java.lang.Object element()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r22, \"c\")";
    "$r22 = interfaceinvoke r37.<java.util.Queue: java.lang.Object element()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r22, \"c\")"->"$r23 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r22, \"c\")"->"$r32 := @caughtexception";
    "$r23 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r23, \"c\")";
    "$r23 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r23, \"c\")"->"$r24 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r23, \"c\")"->"$r32 := @caughtexception";
    "$r24 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r24, \"b\")";
    "$r24 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r24, \"b\")"->"$r25 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r24, \"b\")"->"$r32 := @caughtexception";
    "$r25 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r25, \"a\")";
    "$r25 = interfaceinvoke r37.<java.util.Queue: java.lang.Object peek()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r25, \"a\")"->"$r26 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r25, \"a\")"->"$r32 := @caughtexception";
    "$r26 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r26, \"a\")";
    "$r26 = interfaceinvoke r37.<java.util.Queue: java.lang.Object remove()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r26, \"a\")"->"$r27 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r26, \"a\")"->"$r32 := @caughtexception";
    "$r27 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"->"$r28 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$2";
    "$r27 = newarray (jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun)[1]"->"$r32 := @caughtexception";
    "$r28 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$2"->"specialinvoke $r28.<jsr166tests.jtreg.util.Collections.AsLifoQueue$2: void <init>(java.util.Queue)>(r37)";
    "$r28 = new jsr166tests.jtreg.util.Collections.AsLifoQueue$2"->"$r32 := @caughtexception";
    "specialinvoke $r28.<jsr166tests.jtreg.util.Collections.AsLifoQueue$2: void <init>(java.util.Queue)>(r37)"->"$r27[0] = $r28";
    "specialinvoke $r28.<jsr166tests.jtreg.util.Collections.AsLifoQueue$2: void <init>(java.util.Queue)>(r37)"->"$r32 := @caughtexception";
    "$r27[0] = $r28"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/util/NoSuchElementException;\", $r27)";
    "$r27[0] = $r28"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/util/NoSuchElementException;\", $r27)"->"$r29 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void THROWS(java.lang.Class,jsr166tests.jtreg.util.Collections.AsLifoQueue$Fun[])>(class \"Ljava/util/NoSuchElementException;\", $r27)"->"$r32 := @caughtexception";
    "$r29 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r29, null)";
    "$r29 = interfaceinvoke r37.<java.util.Queue: java.lang.Object poll()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r29, null)"->"$z9 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r29, null)"->"$r32 := @caughtexception";
    "$z9 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z9)";
    "$z9 = interfaceinvoke r37.<java.util.Queue: boolean isEmpty()>()"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z9)"->"$i5 = interfaceinvoke r37.<java.util.Queue: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void check(boolean)>($z9)"->"$r32 := @caughtexception";
    "$i5 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)";
    "$i5 = interfaceinvoke r37.<java.util.Queue: int size()>()"->"$r32 := @caughtexception";
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"->"$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)"->"$r32 := @caughtexception";
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)";
    "$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"$r32 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"->"goto [?= return]";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void equal(java.lang.Object,java.lang.Object)>($r30, $r31)"->"$r32 := @caughtexception";
    "goto [?= return]"->"return";
    "$r32 := @caughtexception"->"r38 = $r32";
    "r38 = $r32"->"staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r38)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.AsLifoQueue: void unexpected(java.lang.Throwable)>(r38)"->"return";
}
