digraph "unitGraph" {
    "r0 := @parameter0: java.util.Map"
    "r1 := @parameter1: java.util.Map"
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"
    "r7 = <jsr166tests.jtreg.util.Collection.BiggernYours: jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber[] putters>"
    "i0 = lengthof r7"
    "i2 = 0"
    "if i2 >= i0 goto (branch)"
    "r2 = r7[i2]"
    "$r3 = newarray (java.util.Map)[2]"
    "$r3[0] = r0"
    "$r3[1] = r1"
    "r4 = $r3"
    "i1 = lengthof r4"
    "i3 = 0"
    "if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"
    "r5 = r4[i3]"
    "virtualinvoke r2.<jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber: void frob(java.util.Map)>(r5)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "i2 = i2 + 1"
    "goto [?= return]"
    "$r6 := @caughtexception"
    "r8 = $r6"
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void unexpected(java.lang.Throwable,java.lang.Object)>(r8, r0)"
    "return"
    "r0 := @parameter0: java.util.Map"->"r1 := @parameter1: java.util.Map";
    "r1 := @parameter1: java.util.Map"->"staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)";
    "r1 := @parameter1: java.util.Map"->"$r6 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"r7 = <jsr166tests.jtreg.util.Collection.BiggernYours: jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber[] putters>";
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"$r6 := @caughtexception";
    "r7 = <jsr166tests.jtreg.util.Collection.BiggernYours: jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber[] putters>"->"i0 = lengthof r7";
    "r7 = <jsr166tests.jtreg.util.Collection.BiggernYours: jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber[] putters>"->"$r6 := @caughtexception";
    "i0 = lengthof r7"->"i2 = 0";
    "i0 = lengthof r7"->"$r6 := @caughtexception";
    "i2 = 0"->"if i2 >= i0 goto (branch)";
    "i2 = 0"->"$r6 := @caughtexception";
    "if i2 >= i0 goto (branch)"->"r2 = r7[i2]";
    "if i2 >= i0 goto (branch)"->"goto [?= return]";
    "if i2 >= i0 goto (branch)"->"$r6 := @caughtexception";
    "r2 = r7[i2]"->"$r3 = newarray (java.util.Map)[2]";
    "r2 = r7[i2]"->"$r6 := @caughtexception";
    "$r3 = newarray (java.util.Map)[2]"->"$r3[0] = r0";
    "$r3 = newarray (java.util.Map)[2]"->"$r6 := @caughtexception";
    "$r3[0] = r0"->"$r3[1] = r1";
    "$r3[0] = r0"->"$r6 := @caughtexception";
    "$r3[1] = r1"->"r4 = $r3";
    "$r3[1] = r1"->"$r6 := @caughtexception";
    "r4 = $r3"->"i1 = lengthof r4";
    "r4 = $r3"->"$r6 := @caughtexception";
    "i1 = lengthof r4"->"i3 = 0";
    "i1 = lengthof r4"->"$r6 := @caughtexception";
    "i3 = 0"->"if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)";
    "i3 = 0"->"$r6 := @caughtexception";
    "if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"r5 = r4[i3]";
    "if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)";
    "if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"$r6 := @caughtexception";
    "r5 = r4[i3]"->"virtualinvoke r2.<jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber: void frob(java.util.Map)>(r5)";
    "r5 = r4[i3]"->"$r6 := @caughtexception";
    "virtualinvoke r2.<jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber: void frob(java.util.Map)>(r5)"->"i3 = i3 + 1";
    "virtualinvoke r2.<jsr166tests.jtreg.util.Collection.BiggernYours$MapFrobber: void frob(java.util.Map)>(r5)"->"$r6 := @caughtexception";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "i3 = i3 + 1"->"$r6 := @caughtexception";
    "goto [?= (branch)]"->"if i3 >= i1 goto staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)";
    "goto [?= (branch)]"->"$r6 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"i2 = i2 + 1";
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void compareMaps(java.util.Map,java.util.Map)>(r0, r1)"->"$r6 := @caughtexception";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "i2 = i2 + 1"->"$r6 := @caughtexception";
    "goto [?= (branch)]"->"if i2 >= i0 goto (branch)";
    "goto [?= (branch)]"->"$r6 := @caughtexception";
    "goto [?= return]"->"return";
    "$r6 := @caughtexception"->"r8 = $r6";
    "r8 = $r6"->"staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void unexpected(java.lang.Throwable,java.lang.Object)>(r8, r0)";
    "staticinvoke <jsr166tests.jtreg.util.Collection.BiggernYours: void unexpected(java.lang.Throwable,java.lang.Object)>(r8, r0)"->"return";
}
