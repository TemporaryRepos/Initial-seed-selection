digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor"
    "i0 := @parameter1: int"
    "virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i0)"
    "$i1 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>()"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r0, i0)"
    "return"
    "r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i0)";
    "virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i0)"->"$i1 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>()";
    "$i1 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>()"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r0, i0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ThreadPoolExecutor.ModifyCorePoolSize: void awaitPoolSize(java.util.concurrent.ThreadPoolExecutor,int)>(r0, i0)"->"return";
}
