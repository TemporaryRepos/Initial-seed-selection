digraph "unitGraph" {
    "r3 := @parameter0: java.util.List"
    "i0 := @parameter1: int"
    "i6 = 0"
    "if i6 >= i0 goto return"
    "$r0 = <jsr166tests.jtreg.util.Collections.CheckedListBash: java.util.Random rnd>"
    "$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()"
    "i2 = $i1 % i0"
    "$r1 = new java.lang.Integer"
    "if i2 >= 0 goto $i7 = i2"
    "$i7 = neg i2"
    "goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)]"
    "$i7 = i2"
    "specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)"
    "r2 = $r1"
    "i3 = interfaceinvoke r3.<java.util.List: int size()>()"
    "$z0 = interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2)"
    "if $z0 != 0 goto i4 = interfaceinvoke r3.<java.util.List: int size()>()"
    "staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add failed.\")"
    "i4 = interfaceinvoke r3.<java.util.List: int size()>()"
    "$i5 = i4 - i3"
    "if $i5 == 1 goto i6 = i6 + 1"
    "staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add didn\'t increase size by 1.\")"
    "i6 = i6 + 1"
    "goto [?= (branch)]"
    "return"
    "r3 := @parameter0: java.util.List"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i6 = 0";
    "i6 = 0"->"if i6 >= i0 goto return";
    "if i6 >= i0 goto return"->"$r0 = <jsr166tests.jtreg.util.Collections.CheckedListBash: java.util.Random rnd>";
    "if i6 >= i0 goto return"->"return";
    "$r0 = <jsr166tests.jtreg.util.Collections.CheckedListBash: java.util.Random rnd>"->"$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()";
    "$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()"->"i2 = $i1 % i0";
    "i2 = $i1 % i0"->"$r1 = new java.lang.Integer";
    "$r1 = new java.lang.Integer"->"if i2 >= 0 goto $i7 = i2";
    "if i2 >= 0 goto $i7 = i2"->"$i7 = neg i2";
    "if i2 >= 0 goto $i7 = i2"->"$i7 = i2";
    "$i7 = neg i2"->"goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)]";
    "goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)]"->"specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)";
    "$i7 = i2"->"specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)";
    "specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i7)"->"r2 = $r1";
    "r2 = $r1"->"i3 = interfaceinvoke r3.<java.util.List: int size()>()";
    "i3 = interfaceinvoke r3.<java.util.List: int size()>()"->"$z0 = interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2)";
    "$z0 = interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2)"->"if $z0 != 0 goto i4 = interfaceinvoke r3.<java.util.List: int size()>()";
    "if $z0 != 0 goto i4 = interfaceinvoke r3.<java.util.List: int size()>()"->"staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add failed.\")";
    "if $z0 != 0 goto i4 = interfaceinvoke r3.<java.util.List: int size()>()"->"i4 = interfaceinvoke r3.<java.util.List: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add failed.\")"->"i4 = interfaceinvoke r3.<java.util.List: int size()>()";
    "i4 = interfaceinvoke r3.<java.util.List: int size()>()"->"$i5 = i4 - i3";
    "$i5 = i4 - i3"->"if $i5 == 1 goto i6 = i6 + 1";
    "if $i5 == 1 goto i6 = i6 + 1"->"staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add didn\'t increase size by 1.\")";
    "if $i5 == 1 goto i6 = i6 + 1"->"i6 = i6 + 1";
    "staticinvoke <jsr166tests.jtreg.util.Collections.CheckedListBash: void fail(java.lang.String)>(\"Add didn\'t increase size by 1.\")"->"i6 = i6 + 1";
    "i6 = i6 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i6 >= i0 goto return";
}
