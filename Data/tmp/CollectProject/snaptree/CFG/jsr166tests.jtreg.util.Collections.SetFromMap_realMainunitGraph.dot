digraph "unitGraph" {
    "$r0 = new java.util.IdentityHashMap"
    "specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>()"
    "r12 = $r0"
    "r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(r12)"
    "$r2 = new java.lang.String"
    "specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"
    "r3 = $r2"
    "$r4 = new java.lang.String"
    "specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"
    "r5 = $r4"
    "$r6 = new java.lang.String"
    "specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>(\"bar\")"
    "r7 = $r6"
    "$z0 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z0)"
    "$z1 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z1)"
    "$z2 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z2)"
    "$i0 = interfaceinvoke r1.<java.util.Set: int size()>()"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"
    "$z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z3)"
    "$z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5)"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z4)"
    "$r10 = new java.lang.String"
    "specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>(r3)"
    "$z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)"
    "if $z5 != 0 goto $z6 = 0"
    "$z6 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)]"
    "$z6 = 0"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)"
    "goto [?= return]"
    "$r11 := @caughtexception"
    "r13 = $r11"
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void unexpected(java.lang.Throwable)>(r13)"
    "return"
    "$r0 = new java.util.IdentityHashMap"->"specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>()";
    "$r0 = new java.util.IdentityHashMap"->"$r11 := @caughtexception";
    "specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>()"->"r12 = $r0";
    "specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>()"->"$r11 := @caughtexception";
    "r12 = $r0"->"r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(r12)";
    "r12 = $r0"->"$r11 := @caughtexception";
    "r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(r12)"->"$r2 = new java.lang.String";
    "r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(r12)"->"$r11 := @caughtexception";
    "$r2 = new java.lang.String"->"specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>(\"foo\")";
    "$r2 = new java.lang.String"->"$r11 := @caughtexception";
    "specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"->"r3 = $r2";
    "specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"->"$r11 := @caughtexception";
    "r3 = $r2"->"$r4 = new java.lang.String";
    "r3 = $r2"->"$r11 := @caughtexception";
    "$r4 = new java.lang.String"->"specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(\"foo\")";
    "$r4 = new java.lang.String"->"$r11 := @caughtexception";
    "specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"->"r5 = $r4";
    "specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(\"foo\")"->"$r11 := @caughtexception";
    "r5 = $r4"->"$r6 = new java.lang.String";
    "r5 = $r4"->"$r11 := @caughtexception";
    "$r6 = new java.lang.String"->"specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>(\"bar\")";
    "$r6 = new java.lang.String"->"$r11 := @caughtexception";
    "specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>(\"bar\")"->"r7 = $r6";
    "specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>(\"bar\")"->"$r11 := @caughtexception";
    "r7 = $r6"->"$z0 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r3)";
    "r7 = $r6"->"$r11 := @caughtexception";
    "$z0 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z0)";
    "$z0 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r3)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z0)"->"$z1 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z0)"->"$r11 := @caughtexception";
    "$z1 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z1)";
    "$z1 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z1)"->"$z2 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z1)"->"$r11 := @caughtexception";
    "$z2 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z2)";
    "$z2 = interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z2)"->"$i0 = interfaceinvoke r1.<java.util.Set: int size()>()";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z2)"->"$r11 := @caughtexception";
    "$i0 = interfaceinvoke r1.<java.util.Set: int size()>()"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$i0 = interfaceinvoke r1.<java.util.Set: int size()>()"->"$r11 := @caughtexception";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r11 := @caughtexception";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"->"$z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void equal(java.lang.Object,java.lang.Object)>($r8, $r9)"->"$r11 := @caughtexception";
    "$z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z3)";
    "$z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z3)"->"$z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z3)"->"$r11 := @caughtexception";
    "$z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5)"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z4)";
    "$z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5)"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z4)"->"$r10 = new java.lang.String";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z4)"->"$r11 := @caughtexception";
    "$r10 = new java.lang.String"->"specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>(r3)";
    "$r10 = new java.lang.String"->"$r11 := @caughtexception";
    "specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>(r3)"->"$z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)";
    "specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>(r3)"->"$r11 := @caughtexception";
    "$z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)"->"if $z5 != 0 goto $z6 = 0";
    "$z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)"->"$r11 := @caughtexception";
    "if $z5 != 0 goto $z6 = 0"->"$z6 = 1";
    "if $z5 != 0 goto $z6 = 0"->"$z6 = 0";
    "if $z5 != 0 goto $z6 = 0"->"$r11 := @caughtexception";
    "$z6 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)]";
    "$z6 = 1"->"$r11 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)]"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)]"->"$r11 := @caughtexception";
    "$z6 = 0"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)";
    "$z6 = 0"->"$r11 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)"->"goto [?= return]";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void check(boolean)>($z6)"->"$r11 := @caughtexception";
    "goto [?= return]"->"return";
    "$r11 := @caughtexception"->"r13 = $r11";
    "r13 = $r11"->"staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void unexpected(java.lang.Throwable)>(r13)";
    "staticinvoke <jsr166tests.jtreg.util.Collections.SetFromMap: void unexpected(java.lang.Throwable)>(r13)"->"return";
}
