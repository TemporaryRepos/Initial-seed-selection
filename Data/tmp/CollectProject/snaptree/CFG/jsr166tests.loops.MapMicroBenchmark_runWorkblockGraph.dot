digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: jsr166tests.loops.MapMicroBenchmark$Job[];
i2 := @parameter1: int;
i3 := @parameter2: int;
l4 := @parameter3: long;
i6 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
i0 = $r1[i6];
i7 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r2;
if i7 >= $i1 goto i6 = i6 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r3 = r2[i7];
$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>;
$r4 = r2[i7];
$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4);
$r5[i6] = $l5;
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\");
i7 = i7 + 1;
goto [?= $i1 = lengthof r2];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println()>();
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: jsr166tests.loops.MapMicroBenchmark$Job[];
i2 := @parameter1: int;
i3 := @parameter2: int;
l4 := @parameter3: long;
i6 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
i0 = $r1[i6];
i7 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>;
"->"Block 6:
[preds: 1 ] [succs: ]
$r0 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r0.<java.io.PrintStream: void println()>();
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
i0 = $r1[i6];
i7 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r2;
if i7 >= $i1 goto i6 = i6 + 1;
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r2;
if i7 >= $i1 goto i6 = i6 + 1;
"->"Block 4:
[preds: 3 ] [succs: 3 ]
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r3 = r2[i7];
$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>;
$r4 = r2[i7];
$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4);
$r5[i6] = $l5;
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\");
i7 = i7 + 1;
goto [?= $i1 = lengthof r2];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r2;
if i7 >= $i1 goto i6 = i6 + 1;
"->"Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r3 = r2[i7];
$r5 = $r3.<jsr166tests.loops.MapMicroBenchmark$Job: long[] nanos>;
$r4 = r2[i7];
$l5 = virtualinvoke $r4.<jsr166tests.loops.MapMicroBenchmark$Job: long work(int,int,int,long)>(i0, i2, i3, l4);
$r5[i6] = $l5;
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(\".\");
i7 = i7 + 1;
goto [?= $i1 = lengthof r2];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
$i1 = lengthof r2;
if i7 >= $i1 goto i6 = i6 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i6 >= 9 goto $r0 = <java.lang.System: java.io.PrintStream out>;
";
}
