digraph "unitGraph" {
    "r0 := @parameter0: java.lang.Iterable"
    "r4 := @parameter1: java.util.concurrent.Executor"
    "r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto return"
    "$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()"
    "r3 = (jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun) $r2"
    "$r5 = new jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1"
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1: void <init>()>()"
    "interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5)"
    "virtualinvoke r3.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun: void f()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void fail(java.lang.String)>(\"Expected InterruptedException not thrown\")"
    "goto [?= (branch)]"
    "$r7 := @caughtexception"
    "r8 = $r7"
    "$z1 = staticinvoke <java.lang.Thread: boolean interrupted()>()"
    "if $z1 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)]"
    "$z2 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)"
    "$r6 := @caughtexception"
    "r9 = $r6"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void unexpected(java.lang.Throwable)>(r9)"
    "goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]"
    "return"
    "r0 := @parameter0: java.lang.Iterable"->"r4 := @parameter1: java.util.concurrent.Executor";
    "r4 := @parameter1: java.util.concurrent.Executor"->"r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()";
    "r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto return";
    "if $z0 == 0 goto return"->"$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto return"->"return";
    "$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()"->"r3 = (jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun) $r2";
    "r3 = (jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun) $r2"->"$r7 := @caughtexception";
    "r3 = (jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun) $r2"->"$r6 := @caughtexception";
    "r3 = (jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun) $r2"->"$r5 = new jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1";
    "$r5 = new jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1"->"$r7 := @caughtexception";
    "$r5 = new jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1"->"$r6 := @caughtexception";
    "$r5 = new jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1"->"specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1: void <init>()>()";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1: void <init>()>()"->"$r7 := @caughtexception";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1: void <init>()>()"->"$r6 := @caughtexception";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$1: void <init>()>()"->"interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5)";
    "interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5)"->"$r7 := @caughtexception";
    "interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5)"->"$r6 := @caughtexception";
    "interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5)"->"virtualinvoke r3.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun: void f()>()";
    "virtualinvoke r3.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun: void f()>()"->"$r7 := @caughtexception";
    "virtualinvoke r3.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun: void f()>()"->"$r6 := @caughtexception";
    "virtualinvoke r3.<jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt$Fun: void f()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void fail(java.lang.String)>(\"Expected InterruptedException not thrown\")";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void fail(java.lang.String)>(\"Expected InterruptedException not thrown\")"->"$r7 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void fail(java.lang.String)>(\"Expected InterruptedException not thrown\")"->"$r6 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void fail(java.lang.String)>(\"Expected InterruptedException not thrown\")"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]";
    "$r7 := @caughtexception"->"r8 = $r7";
    "r8 = $r7"->"$z1 = staticinvoke <java.lang.Thread: boolean interrupted()>()";
    "$z1 = staticinvoke <java.lang.Thread: boolean interrupted()>()"->"if $z1 != 0 goto $z2 = 0";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $z1 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)]";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)";
    "$z2 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void check(boolean)>($z2)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]";
    "$r6 := @caughtexception"->"r9 = $r6";
    "r9 = $r6"->"staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void unexpected(java.lang.Throwable)>(r9)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.BlockingQueue.Interrupt: void unexpected(java.lang.Throwable)>(r9)"->"goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()";
}
