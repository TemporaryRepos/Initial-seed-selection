digraph "unitGraph" {
    "r3 := @parameter0: java.util.Set"
    "i0 := @parameter1: int"
    "i5 = 0"
    "if i5 >= i0 goto return"
    "$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>"
    "$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()"
    "i2 = $i1 % i0"
    "$r1 = new java.lang.Integer"
    "if i2 >= 0 goto $i6 = i2"
    "$i6 = neg i2"
    "goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)]"
    "$i6 = i2"
    "specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)"
    "r2 = $r1"
    "i3 = interfaceinvoke r3.<java.util.Set: int size()>()"
    "z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)"
    "z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)"
    "$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)"
    "if $z2 != 0 goto (branch)"
    "$r7 = new java.lang.Exception"
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Element not present after addition.\")"
    "throw $r7"
    "if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>()"
    "$r6 = new java.lang.Exception"
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"added == alreadyPresent\")"
    "throw $r6"
    "i4 = interfaceinvoke r3.<java.util.Set: int size()>()"
    "if z1 == 0 goto (branch)"
    "if i3 != i4 goto (branch)"
    "$r5 = new java.lang.Exception"
    "specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned true, but size didn\'t change.\")"
    "throw $r5"
    "if z1 != 0 goto i5 = i5 + 1"
    "if i3 == i4 goto i5 = i5 + 1"
    "$r4 = new java.lang.Exception"
    "specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned false, but size changed.\")"
    "throw $r4"
    "i5 = i5 + 1"
    "goto [?= (branch)]"
    "return"
    "r3 := @parameter0: java.util.Set"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i5 = 0";
    "i5 = 0"->"if i5 >= i0 goto return";
    "if i5 >= i0 goto return"->"$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>";
    "if i5 >= i0 goto return"->"return";
    "$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>"->"$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()";
    "$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()"->"i2 = $i1 % i0";
    "i2 = $i1 % i0"->"$r1 = new java.lang.Integer";
    "$r1 = new java.lang.Integer"->"if i2 >= 0 goto $i6 = i2";
    "if i2 >= 0 goto $i6 = i2"->"$i6 = neg i2";
    "if i2 >= 0 goto $i6 = i2"->"$i6 = i2";
    "$i6 = neg i2"->"goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)]";
    "goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)]"->"specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)";
    "$i6 = i2"->"specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)";
    "specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)"->"r2 = $r1";
    "r2 = $r1"->"i3 = interfaceinvoke r3.<java.util.Set: int size()>()";
    "i3 = interfaceinvoke r3.<java.util.Set: int size()>()"->"z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)";
    "z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)"->"z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)";
    "z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)"->"$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)";
    "$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2)"->"if $z2 != 0 goto (branch)";
    "if $z2 != 0 goto (branch)"->"$r7 = new java.lang.Exception";
    "if $z2 != 0 goto (branch)"->"if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>()";
    "$r7 = new java.lang.Exception"->"specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Element not present after addition.\")";
    "specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Element not present after addition.\")"->"throw $r7";
    "if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>()"->"$r6 = new java.lang.Exception";
    "if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>()"->"i4 = interfaceinvoke r3.<java.util.Set: int size()>()";
    "$r6 = new java.lang.Exception"->"specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"added == alreadyPresent\")";
    "specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"added == alreadyPresent\")"->"throw $r6";
    "i4 = interfaceinvoke r3.<java.util.Set: int size()>()"->"if z1 == 0 goto (branch)";
    "if z1 == 0 goto (branch)"->"if i3 != i4 goto (branch)";
    "if z1 == 0 goto (branch)"->"if z1 != 0 goto i5 = i5 + 1";
    "if i3 != i4 goto (branch)"->"$r5 = new java.lang.Exception";
    "if i3 != i4 goto (branch)"->"if z1 != 0 goto i5 = i5 + 1";
    "$r5 = new java.lang.Exception"->"specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned true, but size didn\'t change.\")";
    "specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned true, but size didn\'t change.\")"->"throw $r5";
    "if z1 != 0 goto i5 = i5 + 1"->"if i3 == i4 goto i5 = i5 + 1";
    "if z1 != 0 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "if i3 == i4 goto i5 = i5 + 1"->"$r4 = new java.lang.Exception";
    "if i3 == i4 goto i5 = i5 + 1"->"i5 = i5 + 1";
    "$r4 = new java.lang.Exception"->"specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned false, but size changed.\")";
    "specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned false, but size changed.\")"->"throw $r4";
    "i5 = i5 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i5 >= i0 goto return";
}
