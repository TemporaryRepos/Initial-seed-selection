digraph "unitGraph" {
    "$r1 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>"
    "$r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"
    "virtualinvoke $r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"
    "goto [?= return]"
    "$r2 := @caughtexception"
    "r3 = $r2"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r3)"
    "$r4 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>($r4)"
    "$r5 = new java.lang.Error"
    "specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r3)"
    "throw $r5"
    "return"
    "$r1 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>"->"$r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>";
    "$r1 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>"->"$r2 := @caughtexception";
    "$r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"virtualinvoke $r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r0)";
    "$r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>"->"$r2 := @caughtexception";
    "virtualinvoke $r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()";
    "virtualinvoke $r1.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(10L, $r0)"->"$r2 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"goto [?= return]";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void pass()>()"->"$r2 := @caughtexception";
    "goto [?= return]"->"return";
    "$r2 := @caughtexception"->"r3 = $r2";
    "r3 = $r2"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r3)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void unexpected(java.lang.Throwable)>(r3)"->"$r4 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>";
    "$r4 = <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: java.util.concurrent.CyclicBarrier atTheStartingGate>"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>($r4)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void reset(java.util.concurrent.CyclicBarrier)>($r4)"->"$r5 = new java.lang.Error";
    "$r5 = new java.lang.Error"->"specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r3)";
    "specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r3)"->"throw $r5";
}
