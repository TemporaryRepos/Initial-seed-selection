digraph "unitGraph" {
    "r20 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.concurrent.atomic.AtomicLong"
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L)"
    "r21 = $r0"
    "r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5)"
    "$r2 = newarray (jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc)[3]"
    "$r3 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"
    "specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"
    "$r2[0] = $r3"
    "$r4 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"
    "$r2[1] = $r4"
    "$r5 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"
    "$r2[2] = $r5"
    "r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)"
    "r7 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(r6)"
    "$i0 = interfaceinvoke r7.<java.util.List: int size()>()"
    "$i1 = interfaceinvoke r6.<java.util.List: int size()>()"
    "if $i0 != $i1 goto $z0 = 0"
    "$z0 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)]"
    "$z0 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)"
    "$l2 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"
    "$i3 = interfaceinvoke r6.<java.util.List: int size()>()"
    "$l4 = (long) $i3"
    "$b5 = $l2 cmp $l4"
    "if $b5 != 0 goto $z1 = 0"
    "$z1 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)]"
    "$z1 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)"
    "l23 = 0L"
    "r22 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()"
    "$z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()"
    "if $z2 == 0 goto $i6 = interfaceinvoke r6.<java.util.List: int size()>()"
    "$r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>()"
    "r23 = (java.util.concurrent.Future) $r16"
    "$r17 = interfaceinvoke r23.<java.util.concurrent.Future: java.lang.Object get()>()"
    "$r18 = (java.lang.Long) $r17"
    "$l22 = virtualinvoke $r18.<java.lang.Long: long longValue()>()"
    "l23 = l23 + $l22"
    "goto [?= $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()]"
    "$i6 = interfaceinvoke r6.<java.util.List: int size()>()"
    "$i7 = $i6 + 1"
    "$i8 = interfaceinvoke r6.<java.util.List: int size()>()"
    "$i9 = $i7 * $i8"
    "$i10 = $i9 / 2"
    "$l11 = (long) $i10"
    "$b12 = l23 cmp $l11"
    "if $b12 != 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)]"
    "$z3 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)"
    "r24 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()"
    "l24 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"
    "$r8 = interfaceinvoke r24.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>(r6)"
    "$r9 = (java.lang.Long) $r8"
    "$l13 = virtualinvoke $r9.<java.lang.Long: long longValue()>()"
    "$l14 = l24 + 1L"
    "$b15 = $l13 cmp $l14"
    "if $b15 != 0 goto $z4 = 0"
    "$z4 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)]"
    "$z4 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)"
    "$l16 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"
    "$l17 = l24 + 1L"
    "$b18 = $l16 cmp $l17"
    "if $b18 != 0 goto $z5 = 0"
    "$z5 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)]"
    "$z5 = 0"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)"
    "interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>()"
    "interfaceinvoke r24.<java.util.concurrent.ExecutorService: void shutdown()>()"
    "goto [?= $r11 = <java.lang.System: java.io.PrintStream out>]"
    "$r19 := @caughtexception"
    "r25 = $r19"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void unexpected(java.lang.Throwable)>(r25)"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "$r10 = newarray (java.lang.Object)[2]"
    "$i19 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int passed>"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)"
    "$r10[0] = $r12"
    "$i20 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20)"
    "$r10[1] = $r13"
    "virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10)"
    "$i21 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>"
    "if $i21 <= 0 goto return"
    "$r15 = new java.lang.Error"
    "specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\")"
    "throw $r15"
    "return"
    "r20 := @parameter0: java.lang.String[]"->"$r0 = new java.util.concurrent.atomic.AtomicLong";
    "r20 := @parameter0: java.lang.String[]"->"$r19 := @caughtexception";
    "$r0 = new java.util.concurrent.atomic.AtomicLong"->"specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L)";
    "$r0 = new java.util.concurrent.atomic.AtomicLong"->"$r19 := @caughtexception";
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L)"->"r21 = $r0";
    "specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L)"->"$r19 := @caughtexception";
    "r21 = $r0"->"r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5)";
    "r21 = $r0"->"$r19 := @caughtexception";
    "r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5)"->"$r2 = newarray (jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc)[3]";
    "r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5)"->"$r19 := @caughtexception";
    "$r2 = newarray (jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc)[3]"->"$r3 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc";
    "$r2 = newarray (jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc)[3]"->"$r19 := @caughtexception";
    "$r3 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)";
    "$r3 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"$r19 := @caughtexception";
    "specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r2[0] = $r3";
    "specialinvoke $r3.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r19 := @caughtexception";
    "$r2[0] = $r3"->"$r4 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc";
    "$r2[0] = $r3"->"$r19 := @caughtexception";
    "$r4 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)";
    "$r4 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"$r19 := @caughtexception";
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r2[1] = $r4";
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r19 := @caughtexception";
    "$r2[1] = $r4"->"$r5 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc";
    "$r2[1] = $r4"->"$r19 := @caughtexception";
    "$r5 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)";
    "$r5 = new jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc"->"$r19 := @caughtexception";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r2[2] = $r5";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke$1Inc: void <init>(java.util.concurrent.atomic.AtomicLong)>(r21)"->"$r19 := @caughtexception";
    "$r2[2] = $r5"->"r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)";
    "$r2[2] = $r5"->"$r19 := @caughtexception";
    "r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)"->"r7 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(r6)";
    "r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)"->"$r19 := @caughtexception";
    "r7 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(r6)"->"$i0 = interfaceinvoke r7.<java.util.List: int size()>()";
    "r7 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(r6)"->"$r19 := @caughtexception";
    "$i0 = interfaceinvoke r7.<java.util.List: int size()>()"->"$i1 = interfaceinvoke r6.<java.util.List: int size()>()";
    "$i0 = interfaceinvoke r7.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "$i1 = interfaceinvoke r6.<java.util.List: int size()>()"->"if $i0 != $i1 goto $z0 = 0";
    "$i1 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "if $i0 != $i1 goto $z0 = 0"->"$z0 = 1";
    "if $i0 != $i1 goto $z0 = 0"->"$z0 = 0";
    "if $i0 != $i1 goto $z0 = 0"->"$r19 := @caughtexception";
    "$z0 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)]";
    "$z0 = 1"->"$r19 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)]"->"$r19 := @caughtexception";
    "$z0 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)";
    "$z0 = 0"->"$r19 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)"->"$l2 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z0)"->"$r19 := @caughtexception";
    "$l2 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$i3 = interfaceinvoke r6.<java.util.List: int size()>()";
    "$l2 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$r19 := @caughtexception";
    "$i3 = interfaceinvoke r6.<java.util.List: int size()>()"->"$l4 = (long) $i3";
    "$i3 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "$l4 = (long) $i3"->"$b5 = $l2 cmp $l4";
    "$l4 = (long) $i3"->"$r19 := @caughtexception";
    "$b5 = $l2 cmp $l4"->"if $b5 != 0 goto $z1 = 0";
    "$b5 = $l2 cmp $l4"->"$r19 := @caughtexception";
    "if $b5 != 0 goto $z1 = 0"->"$z1 = 1";
    "if $b5 != 0 goto $z1 = 0"->"$z1 = 0";
    "if $b5 != 0 goto $z1 = 0"->"$r19 := @caughtexception";
    "$z1 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)]";
    "$z1 = 1"->"$r19 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)]"->"$r19 := @caughtexception";
    "$z1 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)";
    "$z1 = 0"->"$r19 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)"->"l23 = 0L";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z1)"->"$r19 := @caughtexception";
    "l23 = 0L"->"r22 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()";
    "l23 = 0L"->"$r19 := @caughtexception";
    "r22 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()"->"$z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()";
    "r22 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()"->"$r19 := @caughtexception";
    "$z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()"->"if $z2 == 0 goto $i6 = interfaceinvoke r6.<java.util.List: int size()>()";
    "$z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()"->"$r19 := @caughtexception";
    "if $z2 == 0 goto $i6 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>()";
    "if $z2 == 0 goto $i6 = interfaceinvoke r6.<java.util.List: int size()>()"->"$i6 = interfaceinvoke r6.<java.util.List: int size()>()";
    "if $z2 == 0 goto $i6 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "$r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>()"->"r23 = (java.util.concurrent.Future) $r16";
    "$r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>()"->"$r19 := @caughtexception";
    "r23 = (java.util.concurrent.Future) $r16"->"$r17 = interfaceinvoke r23.<java.util.concurrent.Future: java.lang.Object get()>()";
    "r23 = (java.util.concurrent.Future) $r16"->"$r19 := @caughtexception";
    "$r17 = interfaceinvoke r23.<java.util.concurrent.Future: java.lang.Object get()>()"->"$r18 = (java.lang.Long) $r17";
    "$r17 = interfaceinvoke r23.<java.util.concurrent.Future: java.lang.Object get()>()"->"$r19 := @caughtexception";
    "$r18 = (java.lang.Long) $r17"->"$l22 = virtualinvoke $r18.<java.lang.Long: long longValue()>()";
    "$r18 = (java.lang.Long) $r17"->"$r19 := @caughtexception";
    "$l22 = virtualinvoke $r18.<java.lang.Long: long longValue()>()"->"l23 = l23 + $l22";
    "$l22 = virtualinvoke $r18.<java.lang.Long: long longValue()>()"->"$r19 := @caughtexception";
    "l23 = l23 + $l22"->"goto [?= $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()]";
    "l23 = l23 + $l22"->"$r19 := @caughtexception";
    "goto [?= $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()]"->"$z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()]"->"$r19 := @caughtexception";
    "$i6 = interfaceinvoke r6.<java.util.List: int size()>()"->"$i7 = $i6 + 1";
    "$i6 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "$i7 = $i6 + 1"->"$i8 = interfaceinvoke r6.<java.util.List: int size()>()";
    "$i7 = $i6 + 1"->"$r19 := @caughtexception";
    "$i8 = interfaceinvoke r6.<java.util.List: int size()>()"->"$i9 = $i7 * $i8";
    "$i8 = interfaceinvoke r6.<java.util.List: int size()>()"->"$r19 := @caughtexception";
    "$i9 = $i7 * $i8"->"$i10 = $i9 / 2";
    "$i9 = $i7 * $i8"->"$r19 := @caughtexception";
    "$i10 = $i9 / 2"->"$l11 = (long) $i10";
    "$i10 = $i9 / 2"->"$r19 := @caughtexception";
    "$l11 = (long) $i10"->"$b12 = l23 cmp $l11";
    "$l11 = (long) $i10"->"$r19 := @caughtexception";
    "$b12 = l23 cmp $l11"->"if $b12 != 0 goto $z3 = 0";
    "$b12 = l23 cmp $l11"->"$r19 := @caughtexception";
    "if $b12 != 0 goto $z3 = 0"->"$z3 = 1";
    "if $b12 != 0 goto $z3 = 0"->"$z3 = 0";
    "if $b12 != 0 goto $z3 = 0"->"$r19 := @caughtexception";
    "$z3 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)]";
    "$z3 = 1"->"$r19 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)]"->"$r19 := @caughtexception";
    "$z3 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)";
    "$z3 = 0"->"$r19 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)"->"r24 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z3)"->"$r19 := @caughtexception";
    "r24 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()"->"l24 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()";
    "r24 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()"->"$r19 := @caughtexception";
    "l24 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$r8 = interfaceinvoke r24.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>(r6)";
    "l24 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$r19 := @caughtexception";
    "$r8 = interfaceinvoke r24.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>(r6)"->"$r9 = (java.lang.Long) $r8";
    "$r8 = interfaceinvoke r24.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>(r6)"->"$r19 := @caughtexception";
    "$r9 = (java.lang.Long) $r8"->"$l13 = virtualinvoke $r9.<java.lang.Long: long longValue()>()";
    "$r9 = (java.lang.Long) $r8"->"$r19 := @caughtexception";
    "$l13 = virtualinvoke $r9.<java.lang.Long: long longValue()>()"->"$l14 = l24 + 1L";
    "$l13 = virtualinvoke $r9.<java.lang.Long: long longValue()>()"->"$r19 := @caughtexception";
    "$l14 = l24 + 1L"->"$b15 = $l13 cmp $l14";
    "$l14 = l24 + 1L"->"$r19 := @caughtexception";
    "$b15 = $l13 cmp $l14"->"if $b15 != 0 goto $z4 = 0";
    "$b15 = $l13 cmp $l14"->"$r19 := @caughtexception";
    "if $b15 != 0 goto $z4 = 0"->"$z4 = 1";
    "if $b15 != 0 goto $z4 = 0"->"$z4 = 0";
    "if $b15 != 0 goto $z4 = 0"->"$r19 := @caughtexception";
    "$z4 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)]";
    "$z4 = 1"->"$r19 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)]"->"$r19 := @caughtexception";
    "$z4 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)";
    "$z4 = 0"->"$r19 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)"->"$l16 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z4)"->"$r19 := @caughtexception";
    "$l16 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$l17 = l24 + 1L";
    "$l16 = virtualinvoke r21.<java.util.concurrent.atomic.AtomicLong: long get()>()"->"$r19 := @caughtexception";
    "$l17 = l24 + 1L"->"$b18 = $l16 cmp $l17";
    "$l17 = l24 + 1L"->"$r19 := @caughtexception";
    "$b18 = $l16 cmp $l17"->"if $b18 != 0 goto $z5 = 0";
    "$b18 = $l16 cmp $l17"->"$r19 := @caughtexception";
    "if $b18 != 0 goto $z5 = 0"->"$z5 = 1";
    "if $b18 != 0 goto $z5 = 0"->"$z5 = 0";
    "if $b18 != 0 goto $z5 = 0"->"$r19 := @caughtexception";
    "$z5 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)]";
    "$z5 = 1"->"$r19 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)]"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)]"->"$r19 := @caughtexception";
    "$z5 = 0"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)";
    "$z5 = 0"->"$r19 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)"->"interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>()";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void check(boolean)>($z5)"->"$r19 := @caughtexception";
    "interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>()"->"interfaceinvoke r24.<java.util.concurrent.ExecutorService: void shutdown()>()";
    "interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>()"->"$r19 := @caughtexception";
    "interfaceinvoke r24.<java.util.concurrent.ExecutorService: void shutdown()>()"->"goto [?= $r11 = <java.lang.System: java.io.PrintStream out>]";
    "interfaceinvoke r24.<java.util.concurrent.ExecutorService: void shutdown()>()"->"$r19 := @caughtexception";
    "goto [?= $r11 = <java.lang.System: java.io.PrintStream out>]"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r19 := @caughtexception"->"r25 = $r19";
    "r25 = $r19"->"staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void unexpected(java.lang.Throwable)>(r25)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: void unexpected(java.lang.Throwable)>(r25)"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"$r10 = newarray (java.lang.Object)[2]";
    "$r10 = newarray (java.lang.Object)[2]"->"$i19 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int passed>";
    "$i19 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int passed>"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)"->"$r10[0] = $r12";
    "$r10[0] = $r12"->"$i20 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>";
    "$i20 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20)"->"$r10[1] = $r13";
    "$r10[1] = $r13"->"virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10)";
    "virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r10)"->"$i21 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>";
    "$i21 = <jsr166tests.jtreg.util.concurrent.ExecutorService.Invoke: int failed>"->"if $i21 <= 0 goto return";
    "if $i21 <= 0 goto return"->"$r15 = new java.lang.Error";
    "if $i21 <= 0 goto return"->"return";
    "$r15 = new java.lang.Error"->"specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\")";
    "specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>(\"Some tests failed\")"->"throw $r15";
}
