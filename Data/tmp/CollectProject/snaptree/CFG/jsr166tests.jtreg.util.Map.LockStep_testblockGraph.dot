digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @this: jsr166tests.jtreg.util.Map.LockStep;
r16 := @parameter0: java.lang.String[];
b0 = 100;
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i3 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 100 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = newarray (java.util.Map)[9];
$r3 = new java.util.IdentityHashMap;
specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11);
$r2[0] = $r3;
$r4 = new java.util.HashMap;
specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16);
$r2[1] = $r4;
$r5 = new java.util.LinkedHashMap;
specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16);
$r2[2] = $r5;
$r6 = new java.util.WeakHashMap;
specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16);
$r2[3] = $r6;
$r7 = new java.util.Hashtable;
specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16);
$r2[4] = $r7;
$r8 = new java.util.TreeMap;
specialinvoke $r8.<java.util.TreeMap: void <init>()>();
$r2[5] = $r8;
$r9 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16);
$r2[6] = $r9;
$r10 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
$r2[7] = $r10;
$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap;
specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>();
$r2[8] = $r11;
r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);
i4 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15);
i4 = i4 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @this: jsr166tests.jtreg.util.Map.LockStep;
r16 := @parameter0: java.lang.String[];
b0 = 100;
$r0 = new java.util.Random;
specialinvoke $r0.<java.util.Random: void <init>()>();
r1 = $r0;
i3 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 100 goto return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 100 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = newarray (java.util.Map)[9];
$r3 = new java.util.IdentityHashMap;
specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11);
$r2[0] = $r3;
$r4 = new java.util.HashMap;
specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16);
$r2[1] = $r4;
$r5 = new java.util.LinkedHashMap;
specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16);
$r2[2] = $r5;
$r6 = new java.util.WeakHashMap;
specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16);
$r2[3] = $r6;
$r7 = new java.util.Hashtable;
specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16);
$r2[4] = $r7;
$r8 = new java.util.TreeMap;
specialinvoke $r8.<java.util.TreeMap: void <init>()>();
$r2[5] = $r8;
$r9 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16);
$r2[6] = $r9;
$r10 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
$r2[7] = $r10;
$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap;
specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>();
$r2[8] = $r11;
r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);
i4 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 100 goto return;
"->"Block 6:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r2 = newarray (java.util.Map)[9];
$r3 = new java.util.IdentityHashMap;
specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>(11);
$r2[0] = $r3;
$r4 = new java.util.HashMap;
specialinvoke $r4.<java.util.HashMap: void <init>(int)>(16);
$r2[1] = $r4;
$r5 = new java.util.LinkedHashMap;
specialinvoke $r5.<java.util.LinkedHashMap: void <init>(int)>(16);
$r2[2] = $r5;
$r6 = new java.util.WeakHashMap;
specialinvoke $r6.<java.util.WeakHashMap: void <init>(int)>(16);
$r2[3] = $r6;
$r7 = new java.util.Hashtable;
specialinvoke $r7.<java.util.Hashtable: void <init>(int)>(16);
$r2[4] = $r7;
$r8 = new java.util.TreeMap;
specialinvoke $r8.<java.util.TreeMap: void <init>()>();
$r2[5] = $r8;
$r9 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(16);
$r2[6] = $r9;
$r10 = new java.util.concurrent.ConcurrentSkipListMap;
specialinvoke $r10.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();
$r2[7] = $r10;
$r11 = new edu.stanford.ppl.concurrent.SnapTreeMap;
specialinvoke $r11.<edu.stanford.ppl.concurrent.SnapTreeMap: void <init>()>();
$r2[8] = $r11;
r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);
i4 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
"->"Block 4:
[preds: 3 ] [succs: 3 ]
$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15);
i4 = i4 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
"->"Block 5:
[preds: 3 ] [succs: 1 ]
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
$i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100);
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void put(java.util.List,java.lang.Object,java.lang.Object)>(r12, $r14, $r15);
i4 = i4 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i4 >= 10 goto virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
virtualinvoke r13.<jsr166tests.jtreg.util.Map.LockStep: void removeLastTwo(java.util.List)>(r12);
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i3 >= 100 goto return;
";
}
