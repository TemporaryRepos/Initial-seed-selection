digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "$r0 = new jsr166tests.loops.ReadHoldingWriteLock"
    "specialinvoke $r0.<jsr166tests.loops.ReadHoldingWriteLock: void <init>()>()"
    "r1 = $r0"
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadAfterWriteLock()>()"
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock()>()"
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock2()>()"
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair()>()"
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair2()>()"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"$r0 = new jsr166tests.loops.ReadHoldingWriteLock";
    "$r0 = new jsr166tests.loops.ReadHoldingWriteLock"->"specialinvoke $r0.<jsr166tests.loops.ReadHoldingWriteLock: void <init>()>()";
    "specialinvoke $r0.<jsr166tests.loops.ReadHoldingWriteLock: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadAfterWriteLock()>()";
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadAfterWriteLock()>()"->"virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock()>()";
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock()>()"->"virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock2()>()";
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLock2()>()"->"virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair()>()";
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair()>()"->"virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair2()>()";
    "virtualinvoke r1.<jsr166tests.loops.ReadHoldingWriteLock: void testReadHoldingWriteLockFair2()>()"->"return";
}
