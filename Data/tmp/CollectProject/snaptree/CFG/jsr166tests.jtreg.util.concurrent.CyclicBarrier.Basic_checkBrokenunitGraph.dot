digraph "unitGraph" {
    "r0 := @parameter0: java.util.concurrent.CyclicBarrier"
    "$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z0)"
    "$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"
    "$r3 = newarray (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun)[2]"
    "$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1"
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1: void <init>(java.util.concurrent.CyclicBarrier)>(r0)"
    "$r3[0] = $r4"
    "$r5 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2"
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2: void <init>(java.util.concurrent.CyclicBarrier)>(r0)"
    "$r3[1] = $r5"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun[])>(class \"Ljava/util/concurrent/BrokenBarrierException;\", $r3)"
    "return"
    "r0 := @parameter0: java.util.concurrent.CyclicBarrier"->"$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()";
    "$z0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: boolean isBroken()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void check(boolean)>($z0)"->"$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()";
    "$i0 = virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>()"->"$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)";
    "$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void equal(java.lang.Object,java.lang.Object)>($r1, $r2)"->"$r3 = newarray (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun)[2]";
    "$r3 = newarray (jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun)[2]"->"$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1";
    "$r4 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1"->"specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1: void <init>(java.util.concurrent.CyclicBarrier)>(r0)";
    "specialinvoke $r4.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$1: void <init>(java.util.concurrent.CyclicBarrier)>(r0)"->"$r3[0] = $r4";
    "$r3[0] = $r4"->"$r5 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2";
    "$r5 = new jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2"->"specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2: void <init>(java.util.concurrent.CyclicBarrier)>(r0)";
    "specialinvoke $r5.<jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$2: void <init>(java.util.concurrent.CyclicBarrier)>(r0)"->"$r3[1] = $r5";
    "$r3[1] = $r5"->"staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun[])>(class \"Ljava/util/concurrent/BrokenBarrierException;\", $r3)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic: void THROWS(java.lang.Class,jsr166tests.jtreg.util.concurrent.CyclicBarrier.Basic$Fun[])>(class \"Ljava/util/concurrent/BrokenBarrierException;\", $r3)"->"return";
}
