digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: java.lang.String[];
$r0 = newarray (boolean)[2];
$r0[0] = 1;
$r0[1] = 0;
r1 = $r0;
i0 = lengthof r1;
i2 = 0;
"
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i2 >= i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
z0 = r1[i2];
$r2 = newarray (boolean)[2];
$r2[0] = 1;
$r2[1] = 0;
r3 = $r2;
i1 = lengthof r3;
i3 = 0;
"
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i3 >= i1 goto i2 = i2 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 3 ]
z1 = r3[i3];
staticinvoke <jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases: void test(boolean,boolean)>(z0, z1);
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 3 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r4 := @parameter0: java.lang.String[];
$r0 = newarray (boolean)[2];
$r0[0] = 1;
$r0[1] = 0;
r1 = $r0;
i0 = lengthof r1;
i2 = 0;
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i2 >= i0 goto return;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i2 >= i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
z0 = r1[i2];
$r2 = newarray (boolean)[2];
$r2[0] = 1;
$r2[1] = 0;
r3 = $r2;
i1 = lengthof r3;
i3 = 0;
";
    "Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i2 >= i0 goto return;
"->"Block 6:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
z0 = r1[i2];
$r2 = newarray (boolean)[2];
$r2[0] = 1;
$r2[1] = 0;
r3 = $r2;
i1 = lengthof r3;
i3 = 0;
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i3 >= i1 goto i2 = i2 + 1;
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i3 >= i1 goto i2 = i2 + 1;
"->"Block 4:
[preds: 3 ] [succs: 3 ]
z1 = r3[i3];
staticinvoke <jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases: void test(boolean,boolean)>(z0, z1);
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i3 >= i1 goto i2 = i2 + 1;
"->"Block 5:
[preds: 3 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 3 ]
z1 = r3[i3];
staticinvoke <jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases: void test(boolean,boolean)>(z0, z1);
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 3:
[preds: 2 4 ] [succs: 4 5 ]
if i3 >= i1 goto i2 = i2 + 1;
";
    "Block 5:
[preds: 3 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 5 ] [succs: 2 6 ]
if i2 >= i0 goto return;
";
}
