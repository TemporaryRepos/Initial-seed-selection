digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
z0 := @parameter0: boolean;
z1 := @parameter1: boolean;
i6 = 0;
"
    "Block 1:
[preds: 0 26 ] [succs: 2 27 ]
if i6 >= 1000 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r39 = new java.util.concurrent.Semaphore;
specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0);
r1 = $r39;
r2 = newarray (java.lang.Throwable)[1];
if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1;
$r33 = $r40;
specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
goto [?= r3 = $r33];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
$r33 = $r41;
specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
"
    "Block 5:
[preds: 3 4 ] [succs: 6 ]
r3 = $r33;
$r42 = new java.lang.Thread;
specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r5 = $r42;
$r43 = new java.lang.Thread;
specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r7 = $r43;
$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3;
specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
r9 = $r44;
$r45 = new java.lang.Thread;
specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r11 = $r45;
$r46 = new java.lang.Thread;
specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r13 = $r46;
$r14 = newarray (java.lang.Thread)[4];
$r14[0] = r5;
$r14[1] = r7;
$r14[2] = r11;
$r14[3] = r13;
r15 = $r14;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15);
staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16);
r34 = r15;
i7 = lengthof r34;
i8 = 0;
"
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i8 >= i7 goto r36 = r15;
"
    "Block 7:
[preds: 6 ] [succs: 6 ]
r35 = r34[i8];
virtualinvoke r35.<java.lang.Thread: void start()>();
i8 = i8 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 6 ] [succs: 9 ]
r36 = r15;
i9 = lengthof r36;
i10 = 0;
"
    "Block 9:
[preds: 8 15 ] [succs: 10 16 ]
if i10 >= i9 goto $r17 = r2[0];
"
    "Block 10:
[preds: 9 ] [succs: 11 15 ]
r37 = r36[i10];
virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L);
$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>();
if $z6 == 0 goto i10 = i10 + 1;
"
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
$r47 = new java.lang.Error;
$r29 = newarray (java.lang.Object)[2];
$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r29[0] = $r31;
$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z7 == 0 goto $r38 = \"false\";
"
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r38 = \"true\";
goto [?= $r29[1] = $r38];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r38 = \"false\";
"
    "Block 14:
[preds: 12 13 ] [succs: ]
$r29[1] = $r38;
$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29);
specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32);
throw $r47;
"
    "Block 15:
[preds: 10 ] [succs: 9 ]
i10 = i10 + 1;
goto [?= (branch)];
"
    "Block 16:
[preds: 9 ] [succs: 17 18 ]
$r17 = r2[0];
if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
"
    "Block 17:
[preds: 16 ] [succs: ]
$r48 = new java.lang.Error;
$r27 = r2[0];
specialinvoke $r48.<java.lang.Error: void <init>(java.lang.Throwable)>($r27);
throw $r48;
"
    "Block 18:
[preds: 16 ] [succs: 19 20 ]
$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
"
    "Block 19:
[preds: 18 ] [succs: ]
$r49 = new java.lang.Error;
$i3 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);
specialinvoke $r49.<java.lang.Error: void <init>(java.lang.String)>($r25);
throw $r49;
"
    "Block 20:
[preds: 18 ] [succs: 21 22 ]
$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
"
    "Block 21:
[preds: 20 ] [succs: ]
$r50 = new java.lang.Error;
$z5 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
$r23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5);
specialinvoke $r50.<java.lang.Error: void <init>(java.lang.String)>($r23);
throw $r50;
"
    "Block 22:
[preds: 20 ] [succs: 23 24 ]
$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
"
    "Block 23:
[preds: 22 ] [succs: ]
$r51 = new java.lang.Error;
$i2 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);
specialinvoke $r51.<java.lang.Error: void <init>(java.lang.String)>($r21);
throw $r51;
"
    "Block 24:
[preds: 22 ] [succs: 25 26 ]
$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
if $z3 == z0 goto i6 = i6 + 1;
"
    "Block 25:
[preds: 24 ] [succs: ]
$r52 = new java.lang.Error;
$z4 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
$r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4);
specialinvoke $r52.<java.lang.Error: void <init>(java.lang.String)>($r19);
throw $r52;
"
    "Block 26:
[preds: 24 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"
    "Block 27:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
z0 := @parameter0: boolean;
z1 := @parameter1: boolean;
i6 = 0;
"->"Block 1:
[preds: 0 26 ] [succs: 2 27 ]
if i6 >= 1000 goto return;
";
    "Block 1:
[preds: 0 26 ] [succs: 2 27 ]
if i6 >= 1000 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r39 = new java.util.concurrent.Semaphore;
specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0);
r1 = $r39;
r2 = newarray (java.lang.Throwable)[1];
if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
";
    "Block 1:
[preds: 0 26 ] [succs: 2 27 ]
if i6 >= 1000 goto return;
"->"Block 27:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r39 = new java.util.concurrent.Semaphore;
specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0);
r1 = $r39;
r2 = newarray (java.lang.Throwable)[1];
if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1;
$r33 = $r40;
specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
goto [?= r3 = $r33];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r39 = new java.util.concurrent.Semaphore;
specialinvoke $r39.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, z0);
r1 = $r39;
r2 = newarray (java.lang.Throwable)[1];
if z1 == 0 goto $r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
"->"Block 4:
[preds: 2 ] [succs: 5 ]
$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
$r33 = $r41;
specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r40 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1;
$r33 = $r40;
specialinvoke $r40.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$1: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
goto [?= r3 = $r33];
"->"Block 5:
[preds: 3 4 ] [succs: 6 ]
r3 = $r33;
$r42 = new java.lang.Thread;
specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r5 = $r42;
$r43 = new java.lang.Thread;
specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r7 = $r43;
$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3;
specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
r9 = $r44;
$r45 = new java.lang.Thread;
specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r11 = $r45;
$r46 = new java.lang.Thread;
specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r13 = $r46;
$r14 = newarray (java.lang.Thread)[4];
$r14[0] = r5;
$r14[1] = r7;
$r14[2] = r11;
$r14[3] = r13;
r15 = $r14;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15);
staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16);
r34 = r15;
i7 = lengthof r34;
i8 = 0;
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r41 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2;
$r33 = $r41;
specialinvoke $r41.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$2: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
"->"Block 5:
[preds: 3 4 ] [succs: 6 ]
r3 = $r33;
$r42 = new java.lang.Thread;
specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r5 = $r42;
$r43 = new java.lang.Thread;
specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r7 = $r43;
$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3;
specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
r9 = $r44;
$r45 = new java.lang.Thread;
specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r11 = $r45;
$r46 = new java.lang.Thread;
specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r13 = $r46;
$r14 = newarray (java.lang.Thread)[4];
$r14[0] = r5;
$r14[1] = r7;
$r14[2] = r11;
$r14[3] = r13;
r15 = $r14;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15);
staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16);
r34 = r15;
i7 = lengthof r34;
i8 = 0;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 ]
r3 = $r33;
$r42 = new java.lang.Thread;
specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r5 = $r42;
$r43 = new java.lang.Thread;
specialinvoke $r43.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);
r7 = $r43;
$r44 = new jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3;
specialinvoke $r44.<jsr166tests.jtreg.util.concurrent.Semaphore.RacingReleases$3: void <init>(java.util.concurrent.Semaphore,java.lang.Throwable[])>(r1, r2);
r9 = $r44;
$r45 = new java.lang.Thread;
specialinvoke $r45.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r11 = $r45;
$r46 = new java.lang.Thread;
specialinvoke $r46.<java.lang.Thread: void <init>(java.lang.Runnable)>(r9);
r13 = $r46;
$r14 = newarray (java.lang.Thread)[4];
$r14[0] = r5;
$r14[1] = r7;
$r14[2] = r11;
$r14[3] = r13;
r15 = $r14;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r15);
staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r16);
r34 = r15;
i7 = lengthof r34;
i8 = 0;
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i8 >= i7 goto r36 = r15;
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i8 >= i7 goto r36 = r15;
"->"Block 7:
[preds: 6 ] [succs: 6 ]
r35 = r34[i8];
virtualinvoke r35.<java.lang.Thread: void start()>();
i8 = i8 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i8 >= i7 goto r36 = r15;
"->"Block 8:
[preds: 6 ] [succs: 9 ]
r36 = r15;
i9 = lengthof r36;
i10 = 0;
";
    "Block 7:
[preds: 6 ] [succs: 6 ]
r35 = r34[i8];
virtualinvoke r35.<java.lang.Thread: void start()>();
i8 = i8 + 1;
goto [?= (branch)];
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i8 >= i7 goto r36 = r15;
";
    "Block 8:
[preds: 6 ] [succs: 9 ]
r36 = r15;
i9 = lengthof r36;
i10 = 0;
"->"Block 9:
[preds: 8 15 ] [succs: 10 16 ]
if i10 >= i9 goto $r17 = r2[0];
";
    "Block 9:
[preds: 8 15 ] [succs: 10 16 ]
if i10 >= i9 goto $r17 = r2[0];
"->"Block 10:
[preds: 9 ] [succs: 11 15 ]
r37 = r36[i10];
virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L);
$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>();
if $z6 == 0 goto i10 = i10 + 1;
";
    "Block 9:
[preds: 8 15 ] [succs: 10 16 ]
if i10 >= i9 goto $r17 = r2[0];
"->"Block 16:
[preds: 9 ] [succs: 17 18 ]
$r17 = r2[0];
if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
";
    "Block 10:
[preds: 9 ] [succs: 11 15 ]
r37 = r36[i10];
virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L);
$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>();
if $z6 == 0 goto i10 = i10 + 1;
"->"Block 11:
[preds: 10 ] [succs: 12 13 ]
$r47 = new java.lang.Error;
$r29 = newarray (java.lang.Object)[2];
$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r29[0] = $r31;
$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z7 == 0 goto $r38 = \"false\";
";
    "Block 10:
[preds: 9 ] [succs: 11 15 ]
r37 = r36[i10];
virtualinvoke r37.<java.lang.Thread: void join(long)>(60000L);
$z6 = virtualinvoke r37.<java.lang.Thread: boolean isAlive()>();
if $z6 == 0 goto i10 = i10 + 1;
"->"Block 15:
[preds: 10 ] [succs: 9 ]
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
$r47 = new java.lang.Error;
$r29 = newarray (java.lang.Object)[2];
$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r29[0] = $r31;
$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z7 == 0 goto $r38 = \"false\";
"->"Block 12:
[preds: 11 ] [succs: 14 ]
$r38 = \"true\";
goto [?= $r29[1] = $r38];
";
    "Block 11:
[preds: 10 ] [succs: 12 13 ]
$r47 = new java.lang.Error;
$r29 = newarray (java.lang.Object)[2];
$i4 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
$r29[0] = $r31;
$z7 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z7 == 0 goto $r38 = \"false\";
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$r38 = \"false\";
";
    "Block 12:
[preds: 11 ] [succs: 14 ]
$r38 = \"true\";
goto [?= $r29[1] = $r38];
"->"Block 14:
[preds: 12 13 ] [succs: ]
$r29[1] = $r38;
$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29);
specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32);
throw $r47;
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r38 = \"false\";
"->"Block 14:
[preds: 12 13 ] [succs: ]
$r29[1] = $r38;
$r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Semaphore stuck: permits %d, thread waiting %s%n\", $r29);
specialinvoke $r47.<java.lang.Error: void <init>(java.lang.String)>($r32);
throw $r47;
";
    "Block 15:
[preds: 10 ] [succs: 9 ]
i10 = i10 + 1;
goto [?= (branch)];
"->"Block 9:
[preds: 8 15 ] [succs: 10 16 ]
if i10 >= i9 goto $r17 = r2[0];
";
    "Block 16:
[preds: 9 ] [succs: 17 18 ]
$r17 = r2[0];
if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
"->"Block 17:
[preds: 16 ] [succs: ]
$r48 = new java.lang.Error;
$r27 = r2[0];
specialinvoke $r48.<java.lang.Error: void <init>(java.lang.Throwable)>($r27);
throw $r48;
";
    "Block 16:
[preds: 9 ] [succs: 17 18 ]
$r17 = r2[0];
if $r17 == null goto $i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
"->"Block 18:
[preds: 16 ] [succs: 19 20 ]
$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
";
    "Block 18:
[preds: 16 ] [succs: 19 20 ]
$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
"->"Block 19:
[preds: 18 ] [succs: ]
$r49 = new java.lang.Error;
$i3 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
$r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);
specialinvoke $r49.<java.lang.Error: void <init>(java.lang.String)>($r25);
throw $r49;
";
    "Block 18:
[preds: 16 ] [succs: 19 20 ]
$i0 = virtualinvoke r1.<java.util.concurrent.Semaphore: int availablePermits()>();
if $i0 == 0 goto $z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
"->"Block 20:
[preds: 18 ] [succs: 21 22 ]
$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
";
    "Block 20:
[preds: 18 ] [succs: 21 22 ]
$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
"->"Block 21:
[preds: 20 ] [succs: ]
$r50 = new java.lang.Error;
$z5 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
$r23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5);
specialinvoke $r50.<java.lang.Error: void <init>(java.lang.String)>($r23);
throw $r50;
";
    "Block 20:
[preds: 18 ] [succs: 21 22 ]
$z2 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>();
if $z2 == 0 goto $i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
"->"Block 22:
[preds: 20 ] [succs: 23 24 ]
$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
";
    "Block 22:
[preds: 20 ] [succs: 23 24 ]
$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
"->"Block 23:
[preds: 22 ] [succs: ]
$r51 = new java.lang.Error;
$i2 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);
specialinvoke $r51.<java.lang.Error: void <init>(java.lang.String)>($r21);
throw $r51;
";
    "Block 22:
[preds: 20 ] [succs: 23 24 ]
$i1 = virtualinvoke r1.<java.util.concurrent.Semaphore: int getQueueLength()>();
if $i1 == 0 goto $z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
"->"Block 24:
[preds: 22 ] [succs: 25 26 ]
$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
if $z3 == z0 goto i6 = i6 + 1;
";
    "Block 24:
[preds: 22 ] [succs: 25 26 ]
$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
if $z3 == z0 goto i6 = i6 + 1;
"->"Block 25:
[preds: 24 ] [succs: ]
$r52 = new java.lang.Error;
$z4 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
$r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4);
specialinvoke $r52.<java.lang.Error: void <init>(java.lang.String)>($r19);
throw $r52;
";
    "Block 24:
[preds: 22 ] [succs: 25 26 ]
$z3 = virtualinvoke r1.<java.util.concurrent.Semaphore: boolean isFair()>();
if $z3 == z0 goto i6 = i6 + 1;
"->"Block 26:
[preds: 24 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
";
    "Block 26:
[preds: 24 ] [succs: 1 ]
i6 = i6 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 26 ] [succs: 2 27 ]
if i6 >= 1000 goto return;
";
}
