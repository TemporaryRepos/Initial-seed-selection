digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 != 0 goto $r1 = r0[0];
"
    "Block 1:
[preds: 0 ] [succs: ]
$r38 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>(\"Usage: java MapMicroBenchmark className [r|s]keys [r|s]searches\");
return;
"
    "Block 2:
[preds: 0 ] [succs: 3 7 ]
$r1 = r0[0];
$r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);
<jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass> = $r2;
$i1 = lengthof r0;
if $i1 <= 1 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r36 = r0[1];
$z0 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>(\"s\");
if $z0 == 0 goto $r37 = r0[1];
"
    "Block 4:
[preds: 3 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 0;
goto [?= $r39 = <java.lang.System: java.io.PrintStream out>];
"
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$r37 = r0[1];
$z1 = virtualinvoke $r37.<java.lang.String: boolean startsWith(java.lang.String)>(\"r\");
if $z1 == 0 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 6:
[preds: 5 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 1;
"
    "Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 8:
[preds: 7 ] [succs: 10 ]
$r35 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r35.<java.io.PrintStream: void print(java.lang.String)>(\" randomized searches\");
goto [?= $r4 = <java.lang.System: java.io.PrintStream out>];
"
    "Block 9:
[preds: 7 ] [succs: 10 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>(\" sequential searches\");
"
    "Block 10:
[preds: 8 9 ] [succs: 11 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r4.<java.io.PrintStream: void println()>();
i9 = 9;
i10 = 0;
"
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i10 >= 8 goto $r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
"
    "Block 12:
[preds: 11 ] [succs: 11 ]
$r34 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r34[i10] = i9;
i9 = i9 * 4;
i10 = i10 + 1;
goto [?= (branch)];
"
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r5[8] = i9;
b11 = 10;
r6 = newarray (jsr166tests.loops.MapMicroBenchmark$Job)[b11];
r7 = newarray (java.lang.Object)[i9];
i12 = 0;
"
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i12 >= i9 goto $r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 15:
[preds: 14 ] [succs: 14 ]
$r33 = new java.lang.Object;
specialinvoke $r33.<java.lang.Object: void <init>()>();
r7[i12] = $r33;
i12 = i12 + 1;
goto [?= (branch)];
"
    "Block 16:
[preds: 14 ] [succs: 17 ]
$r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r8.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Object    \", r7, class \"Ljava/lang/Object;\");
r6[0] = $r8;
r46 = newarray (java.lang.Object)[i9];
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void initStringKeys(java.lang.Object[],int)>(r46, i9);
$r9 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r9.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"String    \", r46, class \"Ljava/lang/String;\");
r6[1] = $r9;
r10 = newarray (java.lang.Object)[i9];
i13 = 0;
"
    "Block 17:
[preds: 16 18 ] [succs: 18 19 ]
if i13 >= i9 goto $r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 18:
[preds: 17 ] [succs: 17 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);
r10[i13] = $r32;
i13 = i13 + 1;
goto [?= (branch)];
"
    "Block 19:
[preds: 17 ] [succs: 20 ]
$r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r11.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Integer   \", r10, class \"Ljava/lang/Integer;\");
r6[2] = $r11;
r47 = newarray (java.lang.Object)[i9];
i14 = 0;
"
    "Block 20:
[preds: 19 21 ] [succs: 21 22 ]
if i14 >= i9 goto $r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 21:
[preds: 20 ] [succs: 20 ]
$l8 = (long) i14;
$r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);
r47[i14] = $r31;
i14 = i14 + 1;
goto [?= (branch)];
"
    "Block 22:
[preds: 20 ] [succs: 23 ]
$r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r12.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Long      \", r47, class \"Ljava/lang/Long;\");
r6[3] = $r12;
r48 = newarray (java.lang.Object)[i9];
i15 = 0;
"
    "Block 23:
[preds: 22 24 ] [succs: 24 25 ]
if i15 >= i9 goto $r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 24:
[preds: 23 ] [succs: 23 ]
$f0 = (float) i15;
$r30 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);
r48[i15] = $r30;
i15 = i15 + 1;
goto [?= (branch)];
"
    "Block 25:
[preds: 23 ] [succs: 26 ]
$r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r13.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Float     \", r48, class \"Ljava/lang/Float;\");
r6[4] = $r13;
r49 = newarray (java.lang.Object)[i9];
i16 = 0;
"
    "Block 26:
[preds: 25 27 ] [succs: 27 28 ]
if i16 >= i9 goto $r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 27:
[preds: 26 ] [succs: 26 ]
$d0 = (double) i16;
$r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
r49[i16] = $r29;
i16 = i16 + 1;
goto [?= (branch)];
"
    "Block 28:
[preds: 26 ] [succs: 29 ]
$r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r14.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Double    \", r49, class \"Ljava/lang/Double;\");
r6[5] = $r14;
r50 = newarray (java.lang.Object)[i9];
$i2 = neg i9;
l17 = (long) $i2;
i18 = 0;
"
    "Block 29:
[preds: 28 30 ] [succs: 30 31 ]
if i18 >= i9 goto $r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 30:
[preds: 29 ] [succs: 29 ]
$l7 = l17 + 3L;
l17 = $l7;
$r28 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);
r50[i18] = $r28;
i18 = i18 + 1;
goto [?= (branch)];
"
    "Block 31:
[preds: 29 ] [succs: 32 ]
$r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r15.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigInteger\", r50, class \"Ljava/math/BigInteger;\");
r6[6] = $r15;
r51 = newarray (java.lang.Object)[i9];
l19 = 2147483647L;
i20 = 0;
"
    "Block 32:
[preds: 31 33 ] [succs: 33 34 ]
if i20 >= i9 goto $r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 33:
[preds: 32 ] [succs: 32 ]
$l6 = l19 + 65536L;
l19 = $l6;
$r27 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l6);
r51[i20] = $r27;
i20 = i20 + 1;
goto [?= (branch)];
"
    "Block 34:
[preds: 32 ] [succs: 35 ]
$r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r16.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigDecimal\", r51, class \"Ljava/math/BigDecimal;\");
r6[7] = $r16;
r52 = newarray (java.lang.Object)[i9];
i21 = 0;
"
    "Block 35:
[preds: 34 36 ] [succs: 36 37 ]
if i21 >= i9 goto $r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 36:
[preds: 35 ] [succs: 35 ]
$r26 = new jsr166tests.loops.MapMicroBenchmark$RandomInt;
specialinvoke $r26.<jsr166tests.loops.MapMicroBenchmark$RandomInt: void <init>()>();
r52[i21] = $r26;
i21 = i21 + 1;
goto [?= (branch)];
"
    "Block 37:
[preds: 35 ] [succs: 38 ]
$r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r17.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"RandomInt \", r52, class \"Ljsr166tests/loops/MapMicroBenchmark$RandomInt;\");
r6[8] = $r17;
r53 = newarray (java.lang.Object)[i9];
i22 = 0;
"
    "Block 38:
[preds: 37 41 ] [succs: 39 42 ]
if i22 >= i9 goto $r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
"
    "Block 39:
[preds: 38 ] [succs: 40 41 ]
$r19 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>;
$i3 = b11 - 1;
i23 = virtualinvoke $r19.<java.util.Random: int nextInt(int)>($i3);
$r20 = r6[i23];
$r21 = $r20.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r22 = $r21[i22];
r53[i22] = $r22;
i24 = i23 + 1;
$i4 = b11 - 1;
if i24 < $i4 goto $i5 = i22 + 1;
"
    "Block 40:
[preds: 39 ] [succs: 41 ]
i24 = 0;
"
    "Block 41:
[preds: 39 40 ] [succs: 38 ]
$i5 = i22 + 1;
$r23 = r6[i24];
$r24 = $r23.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r25 = $r24[i22];
r53[$i5] = $r25;
i22 = i22 + 2;
goto [?= (branch)];
"
    "Block 42:
[preds: 38 ] [succs: ]
$r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r18.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Mixed     \", r53, class \"Ljava/lang/Object;\");
r6[9] = $r18;
r54 = r6[9];
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup1(jsr166tests.loops.MapMicroBenchmark$Job)>(r54);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup2(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup1(jsr166tests.loops.MapMicroBenchmark$Job)>(r54);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup3(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
staticinvoke <java.lang.Thread: void sleep(long)>(500L);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void time(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 != 0 goto $r1 = r0[0];
"->"Block 1:
[preds: 0 ] [succs: ]
$r38 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>(\"Usage: java MapMicroBenchmark className [r|s]keys [r|s]searches\");
return;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 != 0 goto $r1 = r0[0];
"->"Block 2:
[preds: 0 ] [succs: 3 7 ]
$r1 = r0[0];
$r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);
<jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass> = $r2;
$i1 = lengthof r0;
if $i1 <= 1 goto $r39 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 0 ] [succs: 3 7 ]
$r1 = r0[0];
$r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);
<jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass> = $r2;
$i1 = lengthof r0;
if $i1 <= 1 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
$r36 = r0[1];
$z0 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>(\"s\");
if $z0 == 0 goto $r37 = r0[1];
";
    "Block 2:
[preds: 0 ] [succs: 3 7 ]
$r1 = r0[0];
$r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);
<jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass> = $r2;
$i1 = lengthof r0;
if $i1 <= 1 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r36 = r0[1];
$z0 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>(\"s\");
if $z0 == 0 goto $r37 = r0[1];
"->"Block 4:
[preds: 3 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 0;
goto [?= $r39 = <java.lang.System: java.io.PrintStream out>];
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
$r36 = r0[1];
$z0 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>(\"s\");
if $z0 == 0 goto $r37 = r0[1];
"->"Block 5:
[preds: 3 ] [succs: 6 7 ]
$r37 = r0[1];
$z1 = virtualinvoke $r37.<java.lang.String: boolean startsWith(java.lang.String)>(\"r\");
if $z1 == 0 goto $r39 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 4:
[preds: 3 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 0;
goto [?= $r39 = <java.lang.System: java.io.PrintStream out>];
"->"Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$r37 = r0[1];
$z1 = virtualinvoke $r37.<java.lang.String: boolean startsWith(java.lang.String)>(\"r\");
if $z1 == 0 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"->"Block 6:
[preds: 5 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 1;
";
    "Block 5:
[preds: 3 ] [succs: 6 7 ]
$r37 = r0[1];
$z1 = virtualinvoke $r37.<java.lang.String: boolean startsWith(java.lang.String)>(\"r\");
if $z1 == 0 goto $r39 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 6:
[preds: 5 ] [succs: 7 ]
<jsr166tests.loops.MapMicroBenchmark: boolean randomSearches> = 1;
"->"Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 8:
[preds: 7 ] [succs: 10 ]
$r35 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r35.<java.io.PrintStream: void print(java.lang.String)>(\" randomized searches\");
goto [?= $r4 = <java.lang.System: java.io.PrintStream out>];
";
    "Block 7:
[preds: 2 4 5 6 ] [succs: 8 9 ]
$r39 = <java.lang.System: java.io.PrintStream out>;
$r40 = new java.lang.StringBuilder;
specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Class \");
$r42 = <jsr166tests.loops.MapMicroBenchmark: java.lang.Class mapClass>;
$r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();
$r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r45);
$z2 = <jsr166tests.loops.MapMicroBenchmark: boolean randomSearches>;
if $z2 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>;
"->"Block 9:
[preds: 7 ] [succs: 10 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>(\" sequential searches\");
";
    "Block 8:
[preds: 7 ] [succs: 10 ]
$r35 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r35.<java.io.PrintStream: void print(java.lang.String)>(\" randomized searches\");
goto [?= $r4 = <java.lang.System: java.io.PrintStream out>];
"->"Block 10:
[preds: 8 9 ] [succs: 11 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r4.<java.io.PrintStream: void println()>();
i9 = 9;
i10 = 0;
";
    "Block 9:
[preds: 7 ] [succs: 10 ]
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>(\" sequential searches\");
"->"Block 10:
[preds: 8 9 ] [succs: 11 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r4.<java.io.PrintStream: void println()>();
i9 = 9;
i10 = 0;
";
    "Block 10:
[preds: 8 9 ] [succs: 11 ]
$r4 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r4.<java.io.PrintStream: void println()>();
i9 = 9;
i10 = 0;
"->"Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i10 >= 8 goto $r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
";
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i10 >= 8 goto $r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
"->"Block 12:
[preds: 11 ] [succs: 11 ]
$r34 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r34[i10] = i9;
i9 = i9 * 4;
i10 = i10 + 1;
goto [?= (branch)];
";
    "Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i10 >= 8 goto $r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
"->"Block 13:
[preds: 11 ] [succs: 14 ]
$r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r5[8] = i9;
b11 = 10;
r6 = newarray (jsr166tests.loops.MapMicroBenchmark$Job)[b11];
r7 = newarray (java.lang.Object)[i9];
i12 = 0;
";
    "Block 12:
[preds: 11 ] [succs: 11 ]
$r34 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r34[i10] = i9;
i9 = i9 * 4;
i10 = i10 + 1;
goto [?= (branch)];
"->"Block 11:
[preds: 10 12 ] [succs: 12 13 ]
if i10 >= 8 goto $r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
";
    "Block 13:
[preds: 11 ] [succs: 14 ]
$r5 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>;
$r5[8] = i9;
b11 = 10;
r6 = newarray (jsr166tests.loops.MapMicroBenchmark$Job)[b11];
r7 = newarray (java.lang.Object)[i9];
i12 = 0;
"->"Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i12 >= i9 goto $r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i12 >= i9 goto $r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 15:
[preds: 14 ] [succs: 14 ]
$r33 = new java.lang.Object;
specialinvoke $r33.<java.lang.Object: void <init>()>();
r7[i12] = $r33;
i12 = i12 + 1;
goto [?= (branch)];
";
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i12 >= i9 goto $r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 16:
[preds: 14 ] [succs: 17 ]
$r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r8.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Object    \", r7, class \"Ljava/lang/Object;\");
r6[0] = $r8;
r46 = newarray (java.lang.Object)[i9];
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void initStringKeys(java.lang.Object[],int)>(r46, i9);
$r9 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r9.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"String    \", r46, class \"Ljava/lang/String;\");
r6[1] = $r9;
r10 = newarray (java.lang.Object)[i9];
i13 = 0;
";
    "Block 15:
[preds: 14 ] [succs: 14 ]
$r33 = new java.lang.Object;
specialinvoke $r33.<java.lang.Object: void <init>()>();
r7[i12] = $r33;
i12 = i12 + 1;
goto [?= (branch)];
"->"Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i12 >= i9 goto $r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 16:
[preds: 14 ] [succs: 17 ]
$r8 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r8.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Object    \", r7, class \"Ljava/lang/Object;\");
r6[0] = $r8;
r46 = newarray (java.lang.Object)[i9];
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void initStringKeys(java.lang.Object[],int)>(r46, i9);
$r9 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r9.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"String    \", r46, class \"Ljava/lang/String;\");
r6[1] = $r9;
r10 = newarray (java.lang.Object)[i9];
i13 = 0;
"->"Block 17:
[preds: 16 18 ] [succs: 18 19 ]
if i13 >= i9 goto $r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 17:
[preds: 16 18 ] [succs: 18 19 ]
if i13 >= i9 goto $r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 18:
[preds: 17 ] [succs: 17 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);
r10[i13] = $r32;
i13 = i13 + 1;
goto [?= (branch)];
";
    "Block 17:
[preds: 16 18 ] [succs: 18 19 ]
if i13 >= i9 goto $r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 19:
[preds: 17 ] [succs: 20 ]
$r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r11.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Integer   \", r10, class \"Ljava/lang/Integer;\");
r6[2] = $r11;
r47 = newarray (java.lang.Object)[i9];
i14 = 0;
";
    "Block 18:
[preds: 17 ] [succs: 17 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);
r10[i13] = $r32;
i13 = i13 + 1;
goto [?= (branch)];
"->"Block 17:
[preds: 16 18 ] [succs: 18 19 ]
if i13 >= i9 goto $r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 19:
[preds: 17 ] [succs: 20 ]
$r11 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r11.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Integer   \", r10, class \"Ljava/lang/Integer;\");
r6[2] = $r11;
r47 = newarray (java.lang.Object)[i9];
i14 = 0;
"->"Block 20:
[preds: 19 21 ] [succs: 21 22 ]
if i14 >= i9 goto $r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 20:
[preds: 19 21 ] [succs: 21 22 ]
if i14 >= i9 goto $r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 21:
[preds: 20 ] [succs: 20 ]
$l8 = (long) i14;
$r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);
r47[i14] = $r31;
i14 = i14 + 1;
goto [?= (branch)];
";
    "Block 20:
[preds: 19 21 ] [succs: 21 22 ]
if i14 >= i9 goto $r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 22:
[preds: 20 ] [succs: 23 ]
$r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r12.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Long      \", r47, class \"Ljava/lang/Long;\");
r6[3] = $r12;
r48 = newarray (java.lang.Object)[i9];
i15 = 0;
";
    "Block 21:
[preds: 20 ] [succs: 20 ]
$l8 = (long) i14;
$r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);
r47[i14] = $r31;
i14 = i14 + 1;
goto [?= (branch)];
"->"Block 20:
[preds: 19 21 ] [succs: 21 22 ]
if i14 >= i9 goto $r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 22:
[preds: 20 ] [succs: 23 ]
$r12 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r12.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Long      \", r47, class \"Ljava/lang/Long;\");
r6[3] = $r12;
r48 = newarray (java.lang.Object)[i9];
i15 = 0;
"->"Block 23:
[preds: 22 24 ] [succs: 24 25 ]
if i15 >= i9 goto $r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 23:
[preds: 22 24 ] [succs: 24 25 ]
if i15 >= i9 goto $r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 24:
[preds: 23 ] [succs: 23 ]
$f0 = (float) i15;
$r30 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);
r48[i15] = $r30;
i15 = i15 + 1;
goto [?= (branch)];
";
    "Block 23:
[preds: 22 24 ] [succs: 24 25 ]
if i15 >= i9 goto $r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 25:
[preds: 23 ] [succs: 26 ]
$r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r13.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Float     \", r48, class \"Ljava/lang/Float;\");
r6[4] = $r13;
r49 = newarray (java.lang.Object)[i9];
i16 = 0;
";
    "Block 24:
[preds: 23 ] [succs: 23 ]
$f0 = (float) i15;
$r30 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);
r48[i15] = $r30;
i15 = i15 + 1;
goto [?= (branch)];
"->"Block 23:
[preds: 22 24 ] [succs: 24 25 ]
if i15 >= i9 goto $r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 25:
[preds: 23 ] [succs: 26 ]
$r13 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r13.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Float     \", r48, class \"Ljava/lang/Float;\");
r6[4] = $r13;
r49 = newarray (java.lang.Object)[i9];
i16 = 0;
"->"Block 26:
[preds: 25 27 ] [succs: 27 28 ]
if i16 >= i9 goto $r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 26:
[preds: 25 27 ] [succs: 27 28 ]
if i16 >= i9 goto $r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 27:
[preds: 26 ] [succs: 26 ]
$d0 = (double) i16;
$r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
r49[i16] = $r29;
i16 = i16 + 1;
goto [?= (branch)];
";
    "Block 26:
[preds: 25 27 ] [succs: 27 28 ]
if i16 >= i9 goto $r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 28:
[preds: 26 ] [succs: 29 ]
$r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r14.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Double    \", r49, class \"Ljava/lang/Double;\");
r6[5] = $r14;
r50 = newarray (java.lang.Object)[i9];
$i2 = neg i9;
l17 = (long) $i2;
i18 = 0;
";
    "Block 27:
[preds: 26 ] [succs: 26 ]
$d0 = (double) i16;
$r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
r49[i16] = $r29;
i16 = i16 + 1;
goto [?= (branch)];
"->"Block 26:
[preds: 25 27 ] [succs: 27 28 ]
if i16 >= i9 goto $r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 28:
[preds: 26 ] [succs: 29 ]
$r14 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r14.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Double    \", r49, class \"Ljava/lang/Double;\");
r6[5] = $r14;
r50 = newarray (java.lang.Object)[i9];
$i2 = neg i9;
l17 = (long) $i2;
i18 = 0;
"->"Block 29:
[preds: 28 30 ] [succs: 30 31 ]
if i18 >= i9 goto $r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 29:
[preds: 28 30 ] [succs: 30 31 ]
if i18 >= i9 goto $r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 30:
[preds: 29 ] [succs: 29 ]
$l7 = l17 + 3L;
l17 = $l7;
$r28 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);
r50[i18] = $r28;
i18 = i18 + 1;
goto [?= (branch)];
";
    "Block 29:
[preds: 28 30 ] [succs: 30 31 ]
if i18 >= i9 goto $r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 31:
[preds: 29 ] [succs: 32 ]
$r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r15.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigInteger\", r50, class \"Ljava/math/BigInteger;\");
r6[6] = $r15;
r51 = newarray (java.lang.Object)[i9];
l19 = 2147483647L;
i20 = 0;
";
    "Block 30:
[preds: 29 ] [succs: 29 ]
$l7 = l17 + 3L;
l17 = $l7;
$r28 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);
r50[i18] = $r28;
i18 = i18 + 1;
goto [?= (branch)];
"->"Block 29:
[preds: 28 30 ] [succs: 30 31 ]
if i18 >= i9 goto $r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 31:
[preds: 29 ] [succs: 32 ]
$r15 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r15.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigInteger\", r50, class \"Ljava/math/BigInteger;\");
r6[6] = $r15;
r51 = newarray (java.lang.Object)[i9];
l19 = 2147483647L;
i20 = 0;
"->"Block 32:
[preds: 31 33 ] [succs: 33 34 ]
if i20 >= i9 goto $r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 32:
[preds: 31 33 ] [succs: 33 34 ]
if i20 >= i9 goto $r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 33:
[preds: 32 ] [succs: 32 ]
$l6 = l19 + 65536L;
l19 = $l6;
$r27 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l6);
r51[i20] = $r27;
i20 = i20 + 1;
goto [?= (branch)];
";
    "Block 32:
[preds: 31 33 ] [succs: 33 34 ]
if i20 >= i9 goto $r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 34:
[preds: 32 ] [succs: 35 ]
$r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r16.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigDecimal\", r51, class \"Ljava/math/BigDecimal;\");
r6[7] = $r16;
r52 = newarray (java.lang.Object)[i9];
i21 = 0;
";
    "Block 33:
[preds: 32 ] [succs: 32 ]
$l6 = l19 + 65536L;
l19 = $l6;
$r27 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l6);
r51[i20] = $r27;
i20 = i20 + 1;
goto [?= (branch)];
"->"Block 32:
[preds: 31 33 ] [succs: 33 34 ]
if i20 >= i9 goto $r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 34:
[preds: 32 ] [succs: 35 ]
$r16 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r16.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"BigDecimal\", r51, class \"Ljava/math/BigDecimal;\");
r6[7] = $r16;
r52 = newarray (java.lang.Object)[i9];
i21 = 0;
"->"Block 35:
[preds: 34 36 ] [succs: 36 37 ]
if i21 >= i9 goto $r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 35:
[preds: 34 36 ] [succs: 36 37 ]
if i21 >= i9 goto $r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 36:
[preds: 35 ] [succs: 35 ]
$r26 = new jsr166tests.loops.MapMicroBenchmark$RandomInt;
specialinvoke $r26.<jsr166tests.loops.MapMicroBenchmark$RandomInt: void <init>()>();
r52[i21] = $r26;
i21 = i21 + 1;
goto [?= (branch)];
";
    "Block 35:
[preds: 34 36 ] [succs: 36 37 ]
if i21 >= i9 goto $r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 37:
[preds: 35 ] [succs: 38 ]
$r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r17.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"RandomInt \", r52, class \"Ljsr166tests/loops/MapMicroBenchmark$RandomInt;\");
r6[8] = $r17;
r53 = newarray (java.lang.Object)[i9];
i22 = 0;
";
    "Block 36:
[preds: 35 ] [succs: 35 ]
$r26 = new jsr166tests.loops.MapMicroBenchmark$RandomInt;
specialinvoke $r26.<jsr166tests.loops.MapMicroBenchmark$RandomInt: void <init>()>();
r52[i21] = $r26;
i21 = i21 + 1;
goto [?= (branch)];
"->"Block 35:
[preds: 34 36 ] [succs: 36 37 ]
if i21 >= i9 goto $r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 37:
[preds: 35 ] [succs: 38 ]
$r17 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r17.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"RandomInt \", r52, class \"Ljsr166tests/loops/MapMicroBenchmark$RandomInt;\");
r6[8] = $r17;
r53 = newarray (java.lang.Object)[i9];
i22 = 0;
"->"Block 38:
[preds: 37 41 ] [succs: 39 42 ]
if i22 >= i9 goto $r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
    "Block 38:
[preds: 37 41 ] [succs: 39 42 ]
if i22 >= i9 goto $r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 39:
[preds: 38 ] [succs: 40 41 ]
$r19 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>;
$i3 = b11 - 1;
i23 = virtualinvoke $r19.<java.util.Random: int nextInt(int)>($i3);
$r20 = r6[i23];
$r21 = $r20.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r22 = $r21[i22];
r53[i22] = $r22;
i24 = i23 + 1;
$i4 = b11 - 1;
if i24 < $i4 goto $i5 = i22 + 1;
";
    "Block 38:
[preds: 37 41 ] [succs: 39 42 ]
if i22 >= i9 goto $r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
"->"Block 42:
[preds: 38 ] [succs: ]
$r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
specialinvoke $r18.<jsr166tests.loops.MapMicroBenchmark$Job: void <init>(java.lang.String,java.lang.Object[],java.lang.Class)>(\"Mixed     \", r53, class \"Ljava/lang/Object;\");
r6[9] = $r18;
r54 = r6[9];
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup1(jsr166tests.loops.MapMicroBenchmark$Job)>(r54);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup2(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup1(jsr166tests.loops.MapMicroBenchmark$Job)>(r54);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void warmup3(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
staticinvoke <java.lang.Thread: void sleep(long)>(500L);
staticinvoke <jsr166tests.loops.MapMicroBenchmark: void time(jsr166tests.loops.MapMicroBenchmark$Job[])>(r6);
return;
";
    "Block 39:
[preds: 38 ] [succs: 40 41 ]
$r19 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>;
$i3 = b11 - 1;
i23 = virtualinvoke $r19.<java.util.Random: int nextInt(int)>($i3);
$r20 = r6[i23];
$r21 = $r20.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r22 = $r21[i22];
r53[i22] = $r22;
i24 = i23 + 1;
$i4 = b11 - 1;
if i24 < $i4 goto $i5 = i22 + 1;
"->"Block 40:
[preds: 39 ] [succs: 41 ]
i24 = 0;
";
    "Block 39:
[preds: 38 ] [succs: 40 41 ]
$r19 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>;
$i3 = b11 - 1;
i23 = virtualinvoke $r19.<java.util.Random: int nextInt(int)>($i3);
$r20 = r6[i23];
$r21 = $r20.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r22 = $r21[i22];
r53[i22] = $r22;
i24 = i23 + 1;
$i4 = b11 - 1;
if i24 < $i4 goto $i5 = i22 + 1;
"->"Block 41:
[preds: 39 40 ] [succs: 38 ]
$i5 = i22 + 1;
$r23 = r6[i24];
$r24 = $r23.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r25 = $r24[i22];
r53[$i5] = $r25;
i22 = i22 + 2;
goto [?= (branch)];
";
    "Block 40:
[preds: 39 ] [succs: 41 ]
i24 = 0;
"->"Block 41:
[preds: 39 40 ] [succs: 38 ]
$i5 = i22 + 1;
$r23 = r6[i24];
$r24 = $r23.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r25 = $r24[i22];
r53[$i5] = $r25;
i22 = i22 + 2;
goto [?= (branch)];
";
    "Block 41:
[preds: 39 40 ] [succs: 38 ]
$i5 = i22 + 1;
$r23 = r6[i24];
$r24 = $r23.<jsr166tests.loops.MapMicroBenchmark$Job: java.lang.Object[] items>;
$r25 = $r24[i22];
r53[$i5] = $r25;
i22 = i22 + 2;
goto [?= (branch)];
"->"Block 38:
[preds: 37 41 ] [succs: 39 42 ]
if i22 >= i9 goto $r18 = new jsr166tests.loops.MapMicroBenchmark$Job;
";
}
