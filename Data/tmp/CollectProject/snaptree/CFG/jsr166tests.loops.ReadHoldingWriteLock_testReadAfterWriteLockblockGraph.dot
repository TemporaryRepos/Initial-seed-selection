digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: jsr166tests.loops.ReadHoldingWriteLock;
$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
r1 = $r0;
$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();
$r3 = new java.lang.Thread;
$r4 = new jsr166tests.loops.ReadHoldingWriteLock$1;
specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$1: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);
r6 = $r3;
$r7 = new java.lang.Thread;
$r8 = new jsr166tests.loops.ReadHoldingWriteLock$2;
specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$2: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);
r9 = $r7;
virtualinvoke r6.<java.lang.Thread: void start()>();
virtualinvoke r9.<java.lang.Thread: void start()>();
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();
virtualinvoke r6.<java.lang.Thread: void join(long)>(200L);
virtualinvoke r9.<java.lang.Thread: void join(long)>(200L);
$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>();
if $z0 != 0 goto $z2 = 0;
"
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z2 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)];
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z2 = 0;
"
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2);
$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>();
if $z1 != 0 goto $z3 = 0;
"
    "Block 4:
[preds: 3 ] [succs: 6 ]
$z3 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)];
"
    "Block 5:
[preds: 3 ] [succs: 6 ]
$z3 = 0;
"
    "Block 6:
[preds: 4 5 ] [succs: ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: jsr166tests.loops.ReadHoldingWriteLock;
$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
r1 = $r0;
$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();
$r3 = new java.lang.Thread;
$r4 = new jsr166tests.loops.ReadHoldingWriteLock$1;
specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$1: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);
r6 = $r3;
$r7 = new java.lang.Thread;
$r8 = new jsr166tests.loops.ReadHoldingWriteLock$2;
specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$2: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);
r9 = $r7;
virtualinvoke r6.<java.lang.Thread: void start()>();
virtualinvoke r9.<java.lang.Thread: void start()>();
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();
virtualinvoke r6.<java.lang.Thread: void join(long)>(200L);
virtualinvoke r9.<java.lang.Thread: void join(long)>(200L);
$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>();
if $z0 != 0 goto $z2 = 0;
"->"Block 1:
[preds: 0 ] [succs: 3 ]
$z2 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r5 := @this: jsr166tests.loops.ReadHoldingWriteLock;
$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
r1 = $r0;
$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();
$r3 = new java.lang.Thread;
$r4 = new jsr166tests.loops.ReadHoldingWriteLock$1;
specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$1: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);
r6 = $r3;
$r7 = new java.lang.Thread;
$r8 = new jsr166tests.loops.ReadHoldingWriteLock$2;
specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$2: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1);
specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);
r9 = $r7;
virtualinvoke r6.<java.lang.Thread: void start()>();
virtualinvoke r9.<java.lang.Thread: void start()>();
staticinvoke <java.lang.Thread: void sleep(long)>(50L);
$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();
virtualinvoke r6.<java.lang.Thread: void join(long)>(200L);
virtualinvoke r9.<java.lang.Thread: void join(long)>(200L);
$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>();
if $z0 != 0 goto $z2 = 0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
$z2 = 0;
";
    "Block 1:
[preds: 0 ] [succs: 3 ]
$z2 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)];
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2);
$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>();
if $z1 != 0 goto $z3 = 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
$z2 = 0;
"->"Block 3:
[preds: 1 2 ] [succs: 4 5 ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2);
$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>();
if $z1 != 0 goto $z3 = 0;
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2);
$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>();
if $z1 != 0 goto $z3 = 0;
"->"Block 4:
[preds: 3 ] [succs: 6 ]
$z3 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)];
";
    "Block 3:
[preds: 1 2 ] [succs: 4 5 ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2);
$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>();
if $z1 != 0 goto $z3 = 0;
"->"Block 5:
[preds: 3 ] [succs: 6 ]
$z3 = 0;
";
    "Block 4:
[preds: 3 ] [succs: 6 ]
$z3 = 1;
goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)];
"->"Block 6:
[preds: 4 5 ] [succs: ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3);
return;
";
    "Block 5:
[preds: 3 ] [succs: 6 ]
$z3 = 0;
"->"Block 6:
[preds: 4 5 ] [succs: ]
virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3);
return;
";
}
