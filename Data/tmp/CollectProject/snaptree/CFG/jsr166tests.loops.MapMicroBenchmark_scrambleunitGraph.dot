digraph "unitGraph" {
    "r3 := @parameter0: java.lang.Object[]"
    "i8 = 0"
    "$r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"
    "$i0 = lengthof $r0"
    "if i8 >= $i0 goto return"
    "if i8 != 0 goto $r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"
    "$i9 = 0"
    "goto [?= i2 = $i9]"
    "$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"
    "$i1 = i8 - 1"
    "$i9 = $r1[$i1]"
    "i2 = $i9"
    "$r2 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"
    "i10 = $r2[i8]"
    "$i11 = i2 + 1"
    "if i10 <= $i11 goto i8 = i8 + 1"
    "$i3 = i10 - 1"
    "r4 = r3[$i3]"
    "$r5 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>"
    "$i4 = i10 - i2"
    "$i5 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i4)"
    "i6 = $i5 + i2"
    "$i7 = i10 - 1"
    "$r6 = r3[i6]"
    "r3[$i7] = $r6"
    "r3[i6] = r4"
    "i10 = i10 + -1"
    "goto [?= $i11 = i2 + 1]"
    "i8 = i8 + 1"
    "goto [?= $r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>]"
    "return"
    "r3 := @parameter0: java.lang.Object[]"->"i8 = 0";
    "i8 = 0"->"$r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
    "$r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"$i0 = lengthof $r0";
    "$i0 = lengthof $r0"->"if i8 >= $i0 goto return";
    "if i8 >= $i0 goto return"->"if i8 != 0 goto $r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
    "if i8 >= $i0 goto return"->"return";
    "if i8 != 0 goto $r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"$i9 = 0";
    "if i8 != 0 goto $r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
    "$i9 = 0"->"goto [?= i2 = $i9]";
    "goto [?= i2 = $i9]"->"i2 = $i9";
    "$r1 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"$i1 = i8 - 1";
    "$i1 = i8 - 1"->"$i9 = $r1[$i1]";
    "$i9 = $r1[$i1]"->"i2 = $i9";
    "i2 = $i9"->"$r2 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
    "$r2 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>"->"i10 = $r2[i8]";
    "i10 = $r2[i8]"->"$i11 = i2 + 1";
    "$i11 = i2 + 1"->"if i10 <= $i11 goto i8 = i8 + 1";
    "if i10 <= $i11 goto i8 = i8 + 1"->"$i3 = i10 - 1";
    "if i10 <= $i11 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "$i3 = i10 - 1"->"r4 = r3[$i3]";
    "r4 = r3[$i3]"->"$r5 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>";
    "$r5 = <jsr166tests.loops.MapMicroBenchmark: java.util.Random rng>"->"$i4 = i10 - i2";
    "$i4 = i10 - i2"->"$i5 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i4)";
    "$i5 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i4)"->"i6 = $i5 + i2";
    "i6 = $i5 + i2"->"$i7 = i10 - 1";
    "$i7 = i10 - 1"->"$r6 = r3[i6]";
    "$r6 = r3[i6]"->"r3[$i7] = $r6";
    "r3[$i7] = $r6"->"r3[i6] = r4";
    "r3[i6] = r4"->"i10 = i10 + -1";
    "i10 = i10 + -1"->"goto [?= $i11 = i2 + 1]";
    "goto [?= $i11 = i2 + 1]"->"$i11 = i2 + 1";
    "i8 = i8 + 1"->"goto [?= $r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>]";
    "goto [?= $r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>]"->"$r0 = <jsr166tests.loops.MapMicroBenchmark: int[] sizes>";
}
