digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "$r0 = new java.util.concurrent.SynchronousQueue"
    "specialinvoke $r0.<java.util.concurrent.SynchronousQueue: void <init>()>()"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r0)"
    "$r1 = new java.util.concurrent.SynchronousQueue"
    "specialinvoke $r1.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(0)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r1)"
    "$r2 = new java.util.concurrent.SynchronousQueue"
    "specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(1)"
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(1, $r2)"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"$r0 = new java.util.concurrent.SynchronousQueue";
    "$r0 = new java.util.concurrent.SynchronousQueue"->"specialinvoke $r0.<java.util.concurrent.SynchronousQueue: void <init>()>()";
    "specialinvoke $r0.<java.util.concurrent.SynchronousQueue: void <init>()>()"->"staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r0)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r0)"->"$r1 = new java.util.concurrent.SynchronousQueue";
    "$r1 = new java.util.concurrent.SynchronousQueue"->"specialinvoke $r1.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(0)";
    "specialinvoke $r1.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(0)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r1)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(0, $r1)"->"$r2 = new java.util.concurrent.SynchronousQueue";
    "$r2 = new java.util.concurrent.SynchronousQueue"->"specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(1)";
    "specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(1)"->"staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(1, $r2)";
    "staticinvoke <jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness: void testFairness(boolean,java.util.concurrent.BlockingQueue)>(1, $r2)"->"return";
}
