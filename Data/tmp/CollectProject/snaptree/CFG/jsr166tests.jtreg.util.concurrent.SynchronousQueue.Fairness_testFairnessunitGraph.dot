digraph "unitGraph" {
    "z0 := @parameter0: boolean"
    "r7 := @parameter1: java.util.concurrent.BlockingQueue"
    "$r0 = new java.util.concurrent.locks.ReentrantLock"
    "specialinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>()"
    "r1 = $r0"
    "r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>()"
    "b0 = 10"
    "r3 = newarray (java.lang.Throwable)[1]"
    "virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>()"
    "i2 = 0"
    "if i2 >= 10 goto i3 = 0"
    "r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$r16 = new jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1"
    "specialinvoke $r16.<jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1: void <init>(java.util.concurrent.locks.ReentrantLock,java.util.concurrent.locks.Condition,java.util.concurrent.BlockingQueue,java.lang.Integer,java.lang.Throwable[])>(r1, r2, r7, r20, r3)"
    "r17 = $r16"
    "virtualinvoke r17.<java.lang.Thread: void start()>()"
    "interfaceinvoke r2.<java.util.concurrent.locks.Condition: void await()>()"
    "$r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()"
    "$r19 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>"
    "if $r18 != $r19 goto i2 = i2 + 1"
    "staticinvoke <java.lang.Thread: void yield()>()"
    "goto [?= $r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()]"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "i3 = 0"
    "if i3 >= 10 goto $r4 = r3[0]"
    "$r8 = interfaceinvoke r7.<java.util.concurrent.BlockingQueue: java.lang.Object take()>()"
    "$r9 = (java.lang.Integer) $r8"
    "i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()"
    "if z0 == 0 goto $i1 = 9 - i3"
    "if i4 == i3 goto i3 = i3 + 1"
    "goto [?= $r10 = new java.lang.Error]"
    "$i1 = 9 - i3"
    "if i4 == $i1 goto i3 = i3 + 1"
    "$r10 = new java.lang.Error"
    "$r11 = newarray (java.lang.Object)[3]"
    "$r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"
    "$r11[0] = $r12"
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)"
    "$r11[1] = $r13"
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4)"
    "$r11[2] = $r14"
    "$r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"fair=%b i=%d j=%d%n\", $r11)"
    "specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r15)"
    "throw $r10"
    "i3 = i3 + 1"
    "$r4 = r3[0]"
    "if $r4 == null goto return"
    "$r5 = new java.lang.Error"
    "$r6 = r3[0]"
    "specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>($r6)"
    "throw $r5"
    "return"
    "z0 := @parameter0: boolean"->"r7 := @parameter1: java.util.concurrent.BlockingQueue";
    "r7 := @parameter1: java.util.concurrent.BlockingQueue"->"$r0 = new java.util.concurrent.locks.ReentrantLock";
    "$r0 = new java.util.concurrent.locks.ReentrantLock"->"specialinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>()";
    "specialinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>()";
    "r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>()"->"b0 = 10";
    "b0 = 10"->"r3 = newarray (java.lang.Throwable)[1]";
    "r3 = newarray (java.lang.Throwable)[1]"->"virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>()";
    "virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>()"->"i2 = 0";
    "i2 = 0"->"if i2 >= 10 goto i3 = 0";
    "if i2 >= 10 goto i3 = 0"->"r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "if i2 >= 10 goto i3 = 0"->"i3 = 0";
    "r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r16 = new jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1";
    "$r16 = new jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1"->"specialinvoke $r16.<jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1: void <init>(java.util.concurrent.locks.ReentrantLock,java.util.concurrent.locks.Condition,java.util.concurrent.BlockingQueue,java.lang.Integer,java.lang.Throwable[])>(r1, r2, r7, r20, r3)";
    "specialinvoke $r16.<jsr166tests.jtreg.util.concurrent.SynchronousQueue.Fairness$1: void <init>(java.util.concurrent.locks.ReentrantLock,java.util.concurrent.locks.Condition,java.util.concurrent.BlockingQueue,java.lang.Integer,java.lang.Throwable[])>(r1, r2, r7, r20, r3)"->"r17 = $r16";
    "r17 = $r16"->"virtualinvoke r17.<java.lang.Thread: void start()>()";
    "virtualinvoke r17.<java.lang.Thread: void start()>()"->"interfaceinvoke r2.<java.util.concurrent.locks.Condition: void await()>()";
    "interfaceinvoke r2.<java.util.concurrent.locks.Condition: void await()>()"->"$r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()";
    "$r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()"->"$r19 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>";
    "$r19 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>"->"if $r18 != $r19 goto i2 = i2 + 1";
    "if $r18 != $r19 goto i2 = i2 + 1"->"staticinvoke <java.lang.Thread: void yield()>()";
    "if $r18 != $r19 goto i2 = i2 + 1"->"i2 = i2 + 1";
    "staticinvoke <java.lang.Thread: void yield()>()"->"goto [?= $r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()]";
    "goto [?= $r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()]"->"$r18 = virtualinvoke r17.<java.lang.Thread: java.lang.Thread$State getState()>()";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= 10 goto i3 = 0";
    "i3 = 0"->"if i3 >= 10 goto $r4 = r3[0]";
    "if i3 >= 10 goto $r4 = r3[0]"->"$r8 = interfaceinvoke r7.<java.util.concurrent.BlockingQueue: java.lang.Object take()>()";
    "if i3 >= 10 goto $r4 = r3[0]"->"$r4 = r3[0]";
    "$r8 = interfaceinvoke r7.<java.util.concurrent.BlockingQueue: java.lang.Object take()>()"->"$r9 = (java.lang.Integer) $r8";
    "$r9 = (java.lang.Integer) $r8"->"i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()";
    "i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()"->"if z0 == 0 goto $i1 = 9 - i3";
    "if z0 == 0 goto $i1 = 9 - i3"->"if i4 == i3 goto i3 = i3 + 1";
    "if z0 == 0 goto $i1 = 9 - i3"->"$i1 = 9 - i3";
    "if i4 == i3 goto i3 = i3 + 1"->"goto [?= $r10 = new java.lang.Error]";
    "if i4 == i3 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "goto [?= $r10 = new java.lang.Error]"->"$r10 = new java.lang.Error";
    "$i1 = 9 - i3"->"if i4 == $i1 goto i3 = i3 + 1";
    "if i4 == $i1 goto i3 = i3 + 1"->"$r10 = new java.lang.Error";
    "if i4 == $i1 goto i3 = i3 + 1"->"i3 = i3 + 1";
    "$r10 = new java.lang.Error"->"$r11 = newarray (java.lang.Object)[3]";
    "$r11 = newarray (java.lang.Object)[3]"->"$r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)";
    "$r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)"->"$r11[0] = $r12";
    "$r11[0] = $r12"->"$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)";
    "$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)"->"$r11[1] = $r13";
    "$r11[1] = $r13"->"$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4)";
    "$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4)"->"$r11[2] = $r14";
    "$r11[2] = $r14"->"$r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"fair=%b i=%d j=%d%n\", $r11)";
    "$r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"fair=%b i=%d j=%d%n\", $r11)"->"specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r15)";
    "specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r15)"->"throw $r10";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= 10 goto $r4 = r3[0]";
    "$r4 = r3[0]"->"if $r4 == null goto return";
    "if $r4 == null goto return"->"$r5 = new java.lang.Error";
    "if $r4 == null goto return"->"return";
    "$r5 = new java.lang.Error"->"$r6 = r3[0]";
    "$r6 = r3[0]"->"specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>($r6)";
    "specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>($r6)"->"throw $r5";
}
