digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Set;
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(3);
if i0 != 0 goto (branch);
"
    "Block 1:
[preds: 0 ] [succs: 5 ]
$r12 = (java.util.LinkedHashSet) r1;
$r13 = virtualinvoke $r12.<java.util.LinkedHashSet: java.lang.Object clone()>();
$r14 = (java.util.Set) $r13;
goto [?= r2 = $r14];
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 != 1 goto $r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r15 = new java.util.LinkedHashSet;
$r14 = $r15;
$r10 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray()>();
$r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);
specialinvoke $r15.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r11);
goto [?= r2 = $r14];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
"
    "Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
"
    "Block 6:
[preds: 5 ] [succs: ]
$r17 = new java.lang.Exception;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Set not equal to copy: \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r9);
throw $r17;
"
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
if $z0 != 0 goto $z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
"
    "Block 8:
[preds: 7 ] [succs: ]
$r18 = new java.lang.Exception;
specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"Set does not contain copy.\");
throw $r18;
"
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
if $z1 != 0 goto return r2;
"
    "Block 10:
[preds: 9 ] [succs: ]
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"Copy does not contain set.\");
throw $r19;
"
    "Block 11:
[preds: 9 ] [succs: ]
return r2;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Set;
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(3);
if i0 != 0 goto (branch);
"->"Block 1:
[preds: 0 ] [succs: 5 ]
$r12 = (java.util.LinkedHashSet) r1;
$r13 = virtualinvoke $r12.<java.util.LinkedHashSet: java.lang.Object clone()>();
$r14 = (java.util.Set) $r13;
goto [?= r2 = $r14];
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r1 := @parameter0: java.util.Set;
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(3);
if i0 != 0 goto (branch);
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 != 1 goto $r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
";
    "Block 1:
[preds: 0 ] [succs: 5 ]
$r12 = (java.util.LinkedHashSet) r1;
$r13 = virtualinvoke $r12.<java.util.LinkedHashSet: java.lang.Object clone()>();
$r14 = (java.util.Set) $r13;
goto [?= r2 = $r14];
"->"Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 != 1 goto $r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$r15 = new java.util.LinkedHashSet;
$r14 = $r15;
$r10 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray()>();
$r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);
specialinvoke $r15.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r11);
goto [?= r2 = $r14];
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
if i0 != 1 goto $r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
"->"Block 4:
[preds: 2 ] [succs: 5 ]
$r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$r15 = new java.util.LinkedHashSet;
$r14 = $r15;
$r10 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray()>();
$r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);
specialinvoke $r15.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r11);
goto [?= r2 = $r14];
"->"Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
$r14 = staticinvoke <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Set serClone(java.util.Set)>(r1);
"->"Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
";
    "Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
"->"Block 6:
[preds: 5 ] [succs: ]
$r17 = new java.lang.Exception;
$r16 = new java.lang.StringBuilder;
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Set not equal to copy: \");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r9);
throw $r17;
";
    "Block 5:
[preds: 1 3 4 ] [succs: 6 7 ]
r2 = $r14;
$z2 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);
if $z2 != 0 goto $z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
"->"Block 7:
[preds: 5 ] [succs: 8 9 ]
$z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
if $z0 != 0 goto $z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
if $z0 != 0 goto $z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
"->"Block 8:
[preds: 7 ] [succs: ]
$r18 = new java.lang.Exception;
specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>(\"Set does not contain copy.\");
throw $r18;
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
$z0 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);
if $z0 != 0 goto $z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
"->"Block 9:
[preds: 7 ] [succs: 10 11 ]
$z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
if $z1 != 0 goto return r2;
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
if $z1 != 0 goto return r2;
"->"Block 10:
[preds: 9 ] [succs: ]
$r19 = new java.lang.Exception;
specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>(\"Copy does not contain set.\");
throw $r19;
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
if $z1 != 0 goto return r2;
"->"Block 11:
[preds: 9 ] [succs: ]
return r2;
";
}
