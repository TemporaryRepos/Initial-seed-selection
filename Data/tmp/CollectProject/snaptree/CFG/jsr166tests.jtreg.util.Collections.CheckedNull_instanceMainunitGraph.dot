digraph "unitGraph" {
    "r0 := @this: jsr166tests.jtreg.util.Collections.CheckedNull"
    "r1 := @parameter0: java.lang.String[]"
    "virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void test(java.lang.String[])>(r1)"
    "goto [?= $r3 = <java.lang.System: java.io.PrintStream out>]"
    "$r8 := @caughtexception"
    "r9 = $r8"
    "virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void unexpected(java.lang.Throwable)>(r9)"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "$r2 = newarray (java.lang.Object)[2]"
    "$i0 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int passed>"
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r2[0] = $r4"
    "$i1 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>"
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r2[1] = $r5"
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2)"
    "$i2 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>"
    "if $i2 <= 0 goto return"
    "$r7 = new java.lang.AssertionError"
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Some tests failed\")"
    "throw $r7"
    "return"
    "r0 := @this: jsr166tests.jtreg.util.Collections.CheckedNull"->"r1 := @parameter0: java.lang.String[]";
    "r1 := @parameter0: java.lang.String[]"->"virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void test(java.lang.String[])>(r1)";
    "r1 := @parameter0: java.lang.String[]"->"$r8 := @caughtexception";
    "virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void test(java.lang.String[])>(r1)"->"goto [?= $r3 = <java.lang.System: java.io.PrintStream out>]";
    "virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void test(java.lang.String[])>(r1)"->"$r8 := @caughtexception";
    "goto [?= $r3 = <java.lang.System: java.io.PrintStream out>]"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "$r8 := @caughtexception"->"r9 = $r8";
    "r9 = $r8"->"virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void unexpected(java.lang.Throwable)>(r9)";
    "virtualinvoke r0.<jsr166tests.jtreg.util.Collections.CheckedNull: void unexpected(java.lang.Throwable)>(r9)"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"$r2 = newarray (java.lang.Object)[2]";
    "$r2 = newarray (java.lang.Object)[2]"->"$i0 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int passed>";
    "$i0 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int passed>"->"$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r2[0] = $r4";
    "$r2[0] = $r4"->"$i1 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>";
    "$i1 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>"->"$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r2[1] = $r5";
    "$r2[1] = $r5"->"virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2)";
    "virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%nPassed = %d, failed = %d%n%n\", $r2)"->"$i2 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>";
    "$i2 = r0.<jsr166tests.jtreg.util.Collections.CheckedNull: int failed>"->"if $i2 <= 0 goto return";
    "if $i2 <= 0 goto return"->"$r7 = new java.lang.AssertionError";
    "if $i2 <= 0 goto return"->"return";
    "$r7 = new java.lang.AssertionError"->"specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Some tests failed\")";
    "specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(\"Some tests failed\")"->"throw $r7";
}
