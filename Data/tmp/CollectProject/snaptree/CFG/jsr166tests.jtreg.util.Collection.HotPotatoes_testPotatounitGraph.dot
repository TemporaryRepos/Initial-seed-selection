digraph "unitGraph" {
    "r1 := @parameter0: java.lang.Class"
    "r4 := @parameter1: java.lang.Class"
    "$r2 = <java.lang.System: java.io.PrintStream out>"
    "$r0 = newarray (java.lang.Object)[2]"
    "$r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()"
    "$r0[0] = $r3"
    "$r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>()"
    "$r0[1] = $r5"
    "virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"implClazz=%s, argClazz=%s\n\", $r0)"
    "i2 = 100000"
    "$r7 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>()"
    "r8 = (java.util.List) $r7"
    "r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"
    "staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r9)"
    "$r11 = newarray (java.lang.Class)[1]"
    "$r11[0] = class \"Ljava/util/Collection;\""
    "r12 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11)"
    "$r13 = new jsr166tests.jtreg.util.Collection.HotPotatoes$1"
    "specialinvoke $r13.<jsr166tests.jtreg.util.Collection.HotPotatoes$1: void <init>(java.util.List,java.lang.Integer)>(r8, r9)"
    "r14 = $r13"
    "virtualinvoke r14.<java.lang.Thread: void setDaemon(boolean)>(1)"
    "virtualinvoke r14.<java.lang.Thread: void start()>()"
    "i3 = 0"
    "if i3 >= 100000 goto (branch)"
    "$r15 = newarray (java.lang.Object)[1]"
    "$r15[0] = r8"
    "$r16 = virtualinvoke r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r15)"
    "r17 = (java.util.Collection) $r16"
    "r18 = interfaceinvoke r17.<java.util.Collection: java.lang.Object[] toArray()>()"
    "$i0 = lengthof r18"
    "if $i0 == 0 goto $z0 = 1"
    "$i1 = lengthof r18"
    "if $i1 != 1 goto $z0 = 0"
    "$r19 = r18[0]"
    "if $r19 != r9 goto $z0 = 0"
    "$z0 = 1"
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)]"
    "$z0 = 0"
    "staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "goto [?= return]"
    "$r20 := @caughtexception"
    "r21 = $r20"
    "staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void unexpected(java.lang.Throwable)>(r21)"
    "return"
    "r1 := @parameter0: java.lang.Class"->"r4 := @parameter1: java.lang.Class";
    "r4 := @parameter1: java.lang.Class"->"$r2 = <java.lang.System: java.io.PrintStream out>";
    "r4 := @parameter1: java.lang.Class"->"$r20 := @caughtexception";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"$r0 = newarray (java.lang.Object)[2]";
    "$r2 = <java.lang.System: java.io.PrintStream out>"->"$r20 := @caughtexception";
    "$r0 = newarray (java.lang.Object)[2]"->"$r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()";
    "$r0 = newarray (java.lang.Object)[2]"->"$r20 := @caughtexception";
    "$r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()"->"$r0[0] = $r3";
    "$r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()"->"$r20 := @caughtexception";
    "$r0[0] = $r3"->"$r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>()";
    "$r0[0] = $r3"->"$r20 := @caughtexception";
    "$r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>()"->"$r0[1] = $r5";
    "$r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>()"->"$r20 := @caughtexception";
    "$r0[1] = $r5"->"virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"implClazz=%s, argClazz=%s\n\", $r0)";
    "$r0[1] = $r5"->"$r20 := @caughtexception";
    "virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"implClazz=%s, argClazz=%s\n\", $r0)"->"i2 = 100000";
    "virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"implClazz=%s, argClazz=%s\n\", $r0)"->"$r20 := @caughtexception";
    "i2 = 100000"->"$r7 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>()";
    "i2 = 100000"->"$r20 := @caughtexception";
    "$r7 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>()"->"r8 = (java.util.List) $r7";
    "$r7 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>()"->"$r20 := @caughtexception";
    "r8 = (java.util.List) $r7"->"r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)";
    "r8 = (java.util.List) $r7"->"$r20 := @caughtexception";
    "r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r9)";
    "r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)"->"$r20 := @caughtexception";
    "staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r9)"->"$r11 = newarray (java.lang.Class)[1]";
    "staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r9)"->"$r20 := @caughtexception";
    "$r11 = newarray (java.lang.Class)[1]"->"$r11[0] = class \"Ljava/util/Collection;\"";
    "$r11 = newarray (java.lang.Class)[1]"->"$r20 := @caughtexception";
    "$r11[0] = class \"Ljava/util/Collection;\""->"r12 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11)";
    "$r11[0] = class \"Ljava/util/Collection;\""->"$r20 := @caughtexception";
    "r12 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11)"->"$r13 = new jsr166tests.jtreg.util.Collection.HotPotatoes$1";
    "r12 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11)"->"$r20 := @caughtexception";
    "$r13 = new jsr166tests.jtreg.util.Collection.HotPotatoes$1"->"specialinvoke $r13.<jsr166tests.jtreg.util.Collection.HotPotatoes$1: void <init>(java.util.List,java.lang.Integer)>(r8, r9)";
    "$r13 = new jsr166tests.jtreg.util.Collection.HotPotatoes$1"->"$r20 := @caughtexception";
    "specialinvoke $r13.<jsr166tests.jtreg.util.Collection.HotPotatoes$1: void <init>(java.util.List,java.lang.Integer)>(r8, r9)"->"r14 = $r13";
    "specialinvoke $r13.<jsr166tests.jtreg.util.Collection.HotPotatoes$1: void <init>(java.util.List,java.lang.Integer)>(r8, r9)"->"$r20 := @caughtexception";
    "r14 = $r13"->"virtualinvoke r14.<java.lang.Thread: void setDaemon(boolean)>(1)";
    "r14 = $r13"->"$r20 := @caughtexception";
    "virtualinvoke r14.<java.lang.Thread: void setDaemon(boolean)>(1)"->"virtualinvoke r14.<java.lang.Thread: void start()>()";
    "virtualinvoke r14.<java.lang.Thread: void setDaemon(boolean)>(1)"->"$r20 := @caughtexception";
    "virtualinvoke r14.<java.lang.Thread: void start()>()"->"i3 = 0";
    "virtualinvoke r14.<java.lang.Thread: void start()>()"->"$r20 := @caughtexception";
    "i3 = 0"->"if i3 >= 100000 goto (branch)";
    "i3 = 0"->"$r20 := @caughtexception";
    "if i3 >= 100000 goto (branch)"->"$r15 = newarray (java.lang.Object)[1]";
    "if i3 >= 100000 goto (branch)"->"goto [?= return]";
    "if i3 >= 100000 goto (branch)"->"$r20 := @caughtexception";
    "$r15 = newarray (java.lang.Object)[1]"->"$r15[0] = r8";
    "$r15 = newarray (java.lang.Object)[1]"->"$r20 := @caughtexception";
    "$r15[0] = r8"->"$r16 = virtualinvoke r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r15)";
    "$r15[0] = r8"->"$r20 := @caughtexception";
    "$r16 = virtualinvoke r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r15)"->"r17 = (java.util.Collection) $r16";
    "$r16 = virtualinvoke r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r15)"->"$r20 := @caughtexception";
    "r17 = (java.util.Collection) $r16"->"r18 = interfaceinvoke r17.<java.util.Collection: java.lang.Object[] toArray()>()";
    "r17 = (java.util.Collection) $r16"->"$r20 := @caughtexception";
    "r18 = interfaceinvoke r17.<java.util.Collection: java.lang.Object[] toArray()>()"->"$i0 = lengthof r18";
    "r18 = interfaceinvoke r17.<java.util.Collection: java.lang.Object[] toArray()>()"->"$r20 := @caughtexception";
    "$i0 = lengthof r18"->"if $i0 == 0 goto $z0 = 1";
    "$i0 = lengthof r18"->"$r20 := @caughtexception";
    "if $i0 == 0 goto $z0 = 1"->"$i1 = lengthof r18";
    "if $i0 == 0 goto $z0 = 1"->"$z0 = 1";
    "if $i0 == 0 goto $z0 = 1"->"$r20 := @caughtexception";
    "$i1 = lengthof r18"->"if $i1 != 1 goto $z0 = 0";
    "$i1 = lengthof r18"->"$r20 := @caughtexception";
    "if $i1 != 1 goto $z0 = 0"->"$r19 = r18[0]";
    "if $i1 != 1 goto $z0 = 0"->"$z0 = 0";
    "if $i1 != 1 goto $z0 = 0"->"$r20 := @caughtexception";
    "$r19 = r18[0]"->"if $r19 != r9 goto $z0 = 0";
    "$r19 = r18[0]"->"$r20 := @caughtexception";
    "if $r19 != r9 goto $z0 = 0"->"$z0 = 1";
    "if $r19 != r9 goto $z0 = 0"->"$z0 = 0";
    "if $r19 != r9 goto $z0 = 0"->"$r20 := @caughtexception";
    "$z0 = 1"->"goto [?= staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)]";
    "$z0 = 1"->"$r20 := @caughtexception";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)]"->"staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)";
    "goto [?= staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)]"->"$r20 := @caughtexception";
    "$z0 = 0"->"staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)";
    "$z0 = 0"->"$r20 := @caughtexception";
    "staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)"->"i3 = i3 + 1";
    "staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void check(boolean)>($z0)"->"$r20 := @caughtexception";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "i3 = i3 + 1"->"$r20 := @caughtexception";
    "goto [?= (branch)]"->"if i3 >= 100000 goto (branch)";
    "goto [?= (branch)]"->"$r20 := @caughtexception";
    "goto [?= return]"->"return";
    "$r20 := @caughtexception"->"r21 = $r20";
    "r21 = $r20"->"staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void unexpected(java.lang.Throwable)>(r21)";
    "staticinvoke <jsr166tests.jtreg.util.Collection.HotPotatoes: void unexpected(java.lang.Throwable)>(r21)"->"return";
}
