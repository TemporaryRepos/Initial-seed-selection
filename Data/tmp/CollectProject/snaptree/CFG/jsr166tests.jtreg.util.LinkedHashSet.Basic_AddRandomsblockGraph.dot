digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.util.Set;
i0 := @parameter1: int;
i5 = 0;
"
    "Block 1:
[preds: 0 15 ] [succs: 2 16 ]
if i5 >= i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>();
i2 = $i1 % i0;
$r1 = new java.lang.Integer;
if i2 >= 0 goto $i6 = i2;
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
$i6 = neg i2;
goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)];
"
    "Block 4:
[preds: 2 ] [succs: 5 ]
$i6 = i2;
"
    "Block 5:
[preds: 3 4 ] [succs: 6 7 ]
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6);
r2 = $r1;
i3 = interfaceinvoke r3.<java.util.Set: int size()>();
z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2);
$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
if $z2 != 0 goto (branch);
"
    "Block 6:
[preds: 5 ] [succs: ]
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Element not present after addition.\");
throw $r7;
"
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>();
"
    "Block 8:
[preds: 7 ] [succs: ]
$r6 = new java.lang.Exception;
specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"added == alreadyPresent\");
throw $r6;
"
    "Block 9:
[preds: 7 ] [succs: 10 12 ]
i4 = interfaceinvoke r3.<java.util.Set: int size()>();
if z1 == 0 goto (branch);
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
if i3 != i4 goto (branch);
"
    "Block 11:
[preds: 10 ] [succs: ]
$r5 = new java.lang.Exception;
specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned true, but size didn\'t change.\");
throw $r5;
"
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
if z1 != 0 goto i5 = i5 + 1;
"
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
if i3 == i4 goto i5 = i5 + 1;
"
    "Block 14:
[preds: 13 ] [succs: ]
$r4 = new java.lang.Exception;
specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned false, but size changed.\");
throw $r4;
"
    "Block 15:
[preds: 12 13 ] [succs: 1 ]
i5 = i5 + 1;
goto [?= (branch)];
"
    "Block 16:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r3 := @parameter0: java.util.Set;
i0 := @parameter1: int;
i5 = 0;
"->"Block 1:
[preds: 0 15 ] [succs: 2 16 ]
if i5 >= i0 goto return;
";
    "Block 1:
[preds: 0 15 ] [succs: 2 16 ]
if i5 >= i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>();
i2 = $i1 % i0;
$r1 = new java.lang.Integer;
if i2 >= 0 goto $i6 = i2;
";
    "Block 1:
[preds: 0 15 ] [succs: 2 16 ]
if i5 >= i0 goto return;
"->"Block 16:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>();
i2 = $i1 % i0;
$r1 = new java.lang.Integer;
if i2 >= 0 goto $i6 = i2;
"->"Block 3:
[preds: 2 ] [succs: 5 ]
$i6 = neg i2;
goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r0 = <jsr166tests.jtreg.util.LinkedHashSet.Basic: java.util.Random rnd>;
$i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>();
i2 = $i1 % i0;
$r1 = new java.lang.Integer;
if i2 >= 0 goto $i6 = i2;
"->"Block 4:
[preds: 2 ] [succs: 5 ]
$i6 = i2;
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
$i6 = neg i2;
goto [?= specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6)];
"->"Block 5:
[preds: 3 4 ] [succs: 6 7 ]
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6);
r2 = $r1;
i3 = interfaceinvoke r3.<java.util.Set: int size()>();
z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2);
$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
if $z2 != 0 goto (branch);
";
    "Block 4:
[preds: 2 ] [succs: 5 ]
$i6 = i2;
"->"Block 5:
[preds: 3 4 ] [succs: 6 7 ]
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6);
r2 = $r1;
i3 = interfaceinvoke r3.<java.util.Set: int size()>();
z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2);
$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
if $z2 != 0 goto (branch);
";
    "Block 5:
[preds: 3 4 ] [succs: 6 7 ]
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6);
r2 = $r1;
i3 = interfaceinvoke r3.<java.util.Set: int size()>();
z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2);
$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
if $z2 != 0 goto (branch);
"->"Block 6:
[preds: 5 ] [succs: ]
$r7 = new java.lang.Exception;
specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>(\"Element not present after addition.\");
throw $r7;
";
    "Block 5:
[preds: 3 4 ] [succs: 6 7 ]
specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i6);
r2 = $r1;
i3 = interfaceinvoke r3.<java.util.Set: int size()>();
z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2);
$z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);
if $z2 != 0 goto (branch);
"->"Block 7:
[preds: 5 ] [succs: 8 9 ]
if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>();
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>();
"->"Block 8:
[preds: 7 ] [succs: ]
$r6 = new java.lang.Exception;
specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>(\"added == alreadyPresent\");
throw $r6;
";
    "Block 7:
[preds: 5 ] [succs: 8 9 ]
if z1 != z0 goto i4 = interfaceinvoke r3.<java.util.Set: int size()>();
"->"Block 9:
[preds: 7 ] [succs: 10 12 ]
i4 = interfaceinvoke r3.<java.util.Set: int size()>();
if z1 == 0 goto (branch);
";
    "Block 9:
[preds: 7 ] [succs: 10 12 ]
i4 = interfaceinvoke r3.<java.util.Set: int size()>();
if z1 == 0 goto (branch);
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
if i3 != i4 goto (branch);
";
    "Block 9:
[preds: 7 ] [succs: 10 12 ]
i4 = interfaceinvoke r3.<java.util.Set: int size()>();
if z1 == 0 goto (branch);
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
if z1 != 0 goto i5 = i5 + 1;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
if i3 != i4 goto (branch);
"->"Block 11:
[preds: 10 ] [succs: ]
$r5 = new java.lang.Exception;
specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned true, but size didn\'t change.\");
throw $r5;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
if i3 != i4 goto (branch);
"->"Block 12:
[preds: 9 10 ] [succs: 13 15 ]
if z1 != 0 goto i5 = i5 + 1;
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
if z1 != 0 goto i5 = i5 + 1;
"->"Block 13:
[preds: 12 ] [succs: 14 15 ]
if i3 == i4 goto i5 = i5 + 1;
";
    "Block 12:
[preds: 9 10 ] [succs: 13 15 ]
if z1 != 0 goto i5 = i5 + 1;
"->"Block 15:
[preds: 12 13 ] [succs: 1 ]
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
if i3 == i4 goto i5 = i5 + 1;
"->"Block 14:
[preds: 13 ] [succs: ]
$r4 = new java.lang.Exception;
specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>(\"Add returned false, but size changed.\");
throw $r4;
";
    "Block 13:
[preds: 12 ] [succs: 14 15 ]
if i3 == i4 goto i5 = i5 + 1;
"->"Block 15:
[preds: 12 13 ] [succs: 1 ]
i5 = i5 + 1;
goto [?= (branch)];
";
    "Block 15:
[preds: 12 13 ] [succs: 1 ]
i5 = i5 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 15 ] [succs: 2 16 ]
if i5 >= i0 goto return;
";
}
