digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r12 := @parameter0: java.lang.String[];
$r0 = new java.util.TreeSet;
specialinvoke $r0.<java.util.TreeSet: void <init>()>();
r1 = $r0;
i2 = 1;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i2 > 10 goto $r2 = new java.lang.Integer;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r11 = new java.lang.Integer;
specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i2);
interfaceinvoke r1.<java.util.SortedSet: boolean add(java.lang.Object)>($r11);
i2 = i2 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Integer;
specialinvoke $r2.<java.lang.Integer: void <init>(int)>(4);
$r3 = new java.lang.Integer;
specialinvoke $r3.<java.lang.Integer: void <init>(int)>(10);
r13 = interfaceinvoke r1.<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>($r2, $r3);
interfaceinvoke r13.<java.util.Set: void clear()>();
$r4 = newarray (int)[4];
$r4[0] = 1;
$r4[1] = 2;
$r4[2] = 3;
$r4[3] = 10;
r5 = $r4;
$r6 = new java.util.TreeSet;
specialinvoke $r6.<java.util.TreeSet: void <init>()>();
r7 = $r6;
i3 = 0;
"
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$i0 = lengthof r5;
if i3 >= $i0 goto $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
"
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = new java.lang.Integer;
$i1 = r5[i3];
specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i1);
interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r10);
i3 = i3 + 1;
goto [?= $i0 = lengthof r5];
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto return;
"
    "Block 7:
[preds: 6 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);
throw $r8;
"
    "Block 8:
[preds: 6 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r12 := @parameter0: java.lang.String[];
$r0 = new java.util.TreeSet;
specialinvoke $r0.<java.util.TreeSet: void <init>()>();
r1 = $r0;
i2 = 1;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i2 > 10 goto $r2 = new java.lang.Integer;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i2 > 10 goto $r2 = new java.lang.Integer;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r11 = new java.lang.Integer;
specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i2);
interfaceinvoke r1.<java.util.SortedSet: boolean add(java.lang.Object)>($r11);
i2 = i2 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i2 > 10 goto $r2 = new java.lang.Integer;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Integer;
specialinvoke $r2.<java.lang.Integer: void <init>(int)>(4);
$r3 = new java.lang.Integer;
specialinvoke $r3.<java.lang.Integer: void <init>(int)>(10);
r13 = interfaceinvoke r1.<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>($r2, $r3);
interfaceinvoke r13.<java.util.Set: void clear()>();
$r4 = newarray (int)[4];
$r4[0] = 1;
$r4[1] = 2;
$r4[2] = 3;
$r4[3] = 10;
r5 = $r4;
$r6 = new java.util.TreeSet;
specialinvoke $r6.<java.util.TreeSet: void <init>()>();
r7 = $r6;
i3 = 0;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r11 = new java.lang.Integer;
specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i2);
interfaceinvoke r1.<java.util.SortedSet: boolean add(java.lang.Object)>($r11);
i2 = i2 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i2 > 10 goto $r2 = new java.lang.Integer;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$r2 = new java.lang.Integer;
specialinvoke $r2.<java.lang.Integer: void <init>(int)>(4);
$r3 = new java.lang.Integer;
specialinvoke $r3.<java.lang.Integer: void <init>(int)>(10);
r13 = interfaceinvoke r1.<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>($r2, $r3);
interfaceinvoke r13.<java.util.Set: void clear()>();
$r4 = newarray (int)[4];
$r4[0] = 1;
$r4[1] = 2;
$r4[2] = 3;
$r4[3] = 10;
r5 = $r4;
$r6 = new java.util.TreeSet;
specialinvoke $r6.<java.util.TreeSet: void <init>()>();
r7 = $r6;
i3 = 0;
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$i0 = lengthof r5;
if i3 >= $i0 goto $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$i0 = lengthof r5;
if i3 >= $i0 goto $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
"->"Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = new java.lang.Integer;
$i1 = r5[i3];
specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i1);
interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r10);
i3 = i3 + 1;
goto [?= $i0 = lengthof r5];
";
    "Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$i0 = lengthof r5;
if i3 >= $i0 goto $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
$z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto return;
";
    "Block 5:
[preds: 4 ] [succs: 4 ]
$r10 = new java.lang.Integer;
$i1 = r5[i3];
specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i1);
interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r10);
i3 = i3 + 1;
goto [?= $i0 = lengthof r5];
"->"Block 4:
[preds: 3 5 ] [succs: 5 6 ]
$i0 = lengthof r5;
if i3 >= $i0 goto $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto return;
"->"Block 7:
[preds: 6 ] [succs: ]
$r8 = new java.lang.RuntimeException;
$r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);
throw $r8;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
$z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
if $z0 != 0 goto return;
"->"Block 8:
[preds: 6 ] [succs: ]
return;
";
}
