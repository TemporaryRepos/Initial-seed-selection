digraph "unitGraph" {
    "r5 := @this: jsr166tests.loops.ReadHoldingWriteLock"
    "$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock"
    "specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1)"
    "r1 = $r0"
    "$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()"
    "virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()"
    "$r3 = new java.lang.Thread"
    "$r4 = new jsr166tests.loops.ReadHoldingWriteLock$5"
    "specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$5: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)"
    "specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4)"
    "r6 = $r3"
    "$r7 = new java.lang.Thread"
    "$r8 = new jsr166tests.loops.ReadHoldingWriteLock$6"
    "specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$6: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)"
    "specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8)"
    "r9 = $r7"
    "virtualinvoke r6.<java.lang.Thread: void start()>()"
    "virtualinvoke r9.<java.lang.Thread: void start()>()"
    "$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"
    "virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()"
    "$r11 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"
    "virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()"
    "staticinvoke <java.lang.Thread: void sleep(long)>(50L)"
    "$r12 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"
    "virtualinvoke $r12.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()"
    "$r13 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"
    "virtualinvoke $r13.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()"
    "$r14 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()"
    "virtualinvoke $r14.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()"
    "virtualinvoke r6.<java.lang.Thread: void join(long)>(200L)"
    "virtualinvoke r9.<java.lang.Thread: void join(long)>(200L)"
    "$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>()"
    "if $z0 != 0 goto $z2 = 0"
    "$z2 = 1"
    "goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)]"
    "$z2 = 0"
    "virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)"
    "$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>()"
    "if $z1 != 0 goto $z3 = 0"
    "$z3 = 1"
    "goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)]"
    "$z3 = 0"
    "virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)"
    "return"
    "r5 := @this: jsr166tests.loops.ReadHoldingWriteLock"->"$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock";
    "$r0 = new java.util.concurrent.locks.ReentrantReadWriteLock"->"specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1)";
    "specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1)"->"r1 = $r0";
    "r1 = $r0"->"$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()";
    "$r2 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()"->"virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()";
    "virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()"->"$r3 = new java.lang.Thread";
    "$r3 = new java.lang.Thread"->"$r4 = new jsr166tests.loops.ReadHoldingWriteLock$5";
    "$r4 = new jsr166tests.loops.ReadHoldingWriteLock$5"->"specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$5: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)";
    "specialinvoke $r4.<jsr166tests.loops.ReadHoldingWriteLock$5: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)"->"specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4)";
    "specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4)"->"r6 = $r3";
    "r6 = $r3"->"$r7 = new java.lang.Thread";
    "$r7 = new java.lang.Thread"->"$r8 = new jsr166tests.loops.ReadHoldingWriteLock$6";
    "$r8 = new jsr166tests.loops.ReadHoldingWriteLock$6"->"specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$6: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)";
    "specialinvoke $r8.<jsr166tests.loops.ReadHoldingWriteLock$6: void <init>(jsr166tests.loops.ReadHoldingWriteLock,java.util.concurrent.locks.ReentrantReadWriteLock)>(r5, r1)"->"specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8)";
    "specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8)"->"r9 = $r7";
    "r9 = $r7"->"virtualinvoke r6.<java.lang.Thread: void start()>()";
    "virtualinvoke r6.<java.lang.Thread: void start()>()"->"virtualinvoke r9.<java.lang.Thread: void start()>()";
    "virtualinvoke r9.<java.lang.Thread: void start()>()"->"$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()";
    "$r10 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"->"virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()";
    "virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()"->"$r11 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()";
    "$r11 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"->"virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()";
    "virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()"->"staticinvoke <java.lang.Thread: void sleep(long)>(50L)";
    "staticinvoke <java.lang.Thread: void sleep(long)>(50L)"->"$r12 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()";
    "$r12 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"->"virtualinvoke $r12.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()";
    "virtualinvoke $r12.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()"->"$r13 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()";
    "$r13 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>()"->"virtualinvoke $r13.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()";
    "virtualinvoke $r13.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()"->"$r14 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()";
    "$r14 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>()"->"virtualinvoke $r14.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()";
    "virtualinvoke $r14.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()"->"virtualinvoke r6.<java.lang.Thread: void join(long)>(200L)";
    "virtualinvoke r6.<java.lang.Thread: void join(long)>(200L)"->"virtualinvoke r9.<java.lang.Thread: void join(long)>(200L)";
    "virtualinvoke r9.<java.lang.Thread: void join(long)>(200L)"->"$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>()";
    "$z0 = virtualinvoke r6.<java.lang.Thread: boolean isAlive()>()"->"if $z0 != 0 goto $z2 = 0";
    "if $z0 != 0 goto $z2 = 0"->"$z2 = 1";
    "if $z0 != 0 goto $z2 = 0"->"$z2 = 0";
    "$z2 = 1"->"goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)]";
    "goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)]"->"virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)";
    "$z2 = 0"->"virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)";
    "virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z2)"->"$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>()";
    "$z1 = virtualinvoke r9.<java.lang.Thread: boolean isAlive()>()"->"if $z1 != 0 goto $z3 = 0";
    "if $z1 != 0 goto $z3 = 0"->"$z3 = 1";
    "if $z1 != 0 goto $z3 = 0"->"$z3 = 0";
    "$z3 = 1"->"goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)]";
    "goto [?= virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)]"->"virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)";
    "$z3 = 0"->"virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)";
    "virtualinvoke r5.<jsr166tests.loops.ReadHoldingWriteLock: void assertTrue(boolean)>($z3)"->"return";
}
