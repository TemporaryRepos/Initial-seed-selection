digraph "unitGraph" {
    "d0 := @parameter0: double"
    "i10 = 0"
    "i11 = 0"
    "d10 = d0"
    "$b0 = d0 cmpg 0.0"
    "if $b0 >= 0 goto $b1 = d10 cmpl 0.0"
    "i10 = 1"
    "d10 = neg d10"
    "$b1 = d10 cmpl 0.0"
    "if $b1 != 0 goto $b2 = d10 cmpl d10"
    "l12 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)"
    "$b9 = l12 cmp 0L"
    "if $b9 >= 0 goto return 0.0"
    "return -0.0"
    "return 0.0"
    "$b2 = d10 cmpl d10"
    "if $b2 != 0 goto return #NaN"
    "$b3 = d10 cmpl #Infinity"
    "if $b3 != 0 goto d11 = 0.0"
    "return #NaN"
    "d11 = 0.0"
    "$b4 = d10 cmpl 3294198.0"
    "if $b4 <= 0 goto $b5 = d10 cmpl 1.5707963267948966"
    "r1 = newarray (double)[3]"
    "staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d10, r1)"
    "$d9 = r1[0]"
    "$i8 = (int) $d9"
    "i11 = $i8 & 3"
    "d10 = r1[1]"
    "d11 = r1[2]"
    "goto [?= $b13 = d10 cmpl 1.5]"
    "$b5 = d10 cmpl 1.5707963267948966"
    "if $b5 <= 0 goto $b13 = d10 cmpl 1.5"
    "$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite"
    "specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d10)"
    "r2 = $r0"
    "$i7 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>()"
    "i11 = $i7 & 3"
    "d10 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>()"
    "d11 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>()"
    "$b13 = d10 cmpl 1.5"
    "if $b13 <= 0 goto $i6 = i11 & 1"
    "d12 = 1.5707963267948966"
    "d2 = 6.123233995736766E-17"
    "d3 = 1.5707963267948966 - d10"
    "$d4 = d3 - 1.5707963267948966"
    "$d5 = $d4 + d10"
    "d13 = neg $d5"
    "$d6 = 6.123233995736766E-17 - d11"
    "d14 = d13 + $d6"
    "d10 = d3 + d14"
    "$d7 = d10 - d3"
    "$d8 = $d7 - d14"
    "d11 = neg $d8"
    "i11 = i11 ^ 1"
    "i10 = i10 ^ 1"
    "$i6 = i11 & 1"
    "if $i6 != 0 goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)"
    "d15 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 0)"
    "goto [?= (branch)]"
    "$d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)"
    "d15 = neg $d1"
    "if i10 == 0 goto return d15"
    "d15 = neg d15"
    "return d15"
    "d0 := @parameter0: double"->"i10 = 0";
    "i10 = 0"->"i11 = 0";
    "i11 = 0"->"d10 = d0";
    "d10 = d0"->"$b0 = d0 cmpg 0.0";
    "$b0 = d0 cmpg 0.0"->"if $b0 >= 0 goto $b1 = d10 cmpl 0.0";
    "if $b0 >= 0 goto $b1 = d10 cmpl 0.0"->"i10 = 1";
    "if $b0 >= 0 goto $b1 = d10 cmpl 0.0"->"$b1 = d10 cmpl 0.0";
    "i10 = 1"->"d10 = neg d10";
    "d10 = neg d10"->"$b1 = d10 cmpl 0.0";
    "$b1 = d10 cmpl 0.0"->"if $b1 != 0 goto $b2 = d10 cmpl d10";
    "if $b1 != 0 goto $b2 = d10 cmpl d10"->"l12 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)";
    "if $b1 != 0 goto $b2 = d10 cmpl d10"->"$b2 = d10 cmpl d10";
    "l12 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)"->"$b9 = l12 cmp 0L";
    "$b9 = l12 cmp 0L"->"if $b9 >= 0 goto return 0.0";
    "if $b9 >= 0 goto return 0.0"->"return -0.0";
    "if $b9 >= 0 goto return 0.0"->"return 0.0";
    "$b2 = d10 cmpl d10"->"if $b2 != 0 goto return #NaN";
    "if $b2 != 0 goto return #NaN"->"$b3 = d10 cmpl #Infinity";
    "if $b2 != 0 goto return #NaN"->"return #NaN";
    "$b3 = d10 cmpl #Infinity"->"if $b3 != 0 goto d11 = 0.0";
    "if $b3 != 0 goto d11 = 0.0"->"return #NaN";
    "if $b3 != 0 goto d11 = 0.0"->"d11 = 0.0";
    "d11 = 0.0"->"$b4 = d10 cmpl 3294198.0";
    "$b4 = d10 cmpl 3294198.0"->"if $b4 <= 0 goto $b5 = d10 cmpl 1.5707963267948966";
    "if $b4 <= 0 goto $b5 = d10 cmpl 1.5707963267948966"->"r1 = newarray (double)[3]";
    "if $b4 <= 0 goto $b5 = d10 cmpl 1.5707963267948966"->"$b5 = d10 cmpl 1.5707963267948966";
    "r1 = newarray (double)[3]"->"staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d10, r1)";
    "staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d10, r1)"->"$d9 = r1[0]";
    "$d9 = r1[0]"->"$i8 = (int) $d9";
    "$i8 = (int) $d9"->"i11 = $i8 & 3";
    "i11 = $i8 & 3"->"d10 = r1[1]";
    "d10 = r1[1]"->"d11 = r1[2]";
    "d11 = r1[2]"->"goto [?= $b13 = d10 cmpl 1.5]";
    "goto [?= $b13 = d10 cmpl 1.5]"->"$b13 = d10 cmpl 1.5";
    "$b5 = d10 cmpl 1.5707963267948966"->"if $b5 <= 0 goto $b13 = d10 cmpl 1.5";
    "if $b5 <= 0 goto $b13 = d10 cmpl 1.5"->"$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite";
    "if $b5 <= 0 goto $b13 = d10 cmpl 1.5"->"$b13 = d10 cmpl 1.5";
    "$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite"->"specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d10)";
    "specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d10)"->"r2 = $r0";
    "r2 = $r0"->"$i7 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>()";
    "$i7 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>()"->"i11 = $i7 & 3";
    "i11 = $i7 & 3"->"d10 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>()";
    "d10 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>()"->"d11 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>()";
    "d11 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>()"->"$b13 = d10 cmpl 1.5";
    "$b13 = d10 cmpl 1.5"->"if $b13 <= 0 goto $i6 = i11 & 1";
    "if $b13 <= 0 goto $i6 = i11 & 1"->"d12 = 1.5707963267948966";
    "if $b13 <= 0 goto $i6 = i11 & 1"->"$i6 = i11 & 1";
    "d12 = 1.5707963267948966"->"d2 = 6.123233995736766E-17";
    "d2 = 6.123233995736766E-17"->"d3 = 1.5707963267948966 - d10";
    "d3 = 1.5707963267948966 - d10"->"$d4 = d3 - 1.5707963267948966";
    "$d4 = d3 - 1.5707963267948966"->"$d5 = $d4 + d10";
    "$d5 = $d4 + d10"->"d13 = neg $d5";
    "d13 = neg $d5"->"$d6 = 6.123233995736766E-17 - d11";
    "$d6 = 6.123233995736766E-17 - d11"->"d14 = d13 + $d6";
    "d14 = d13 + $d6"->"d10 = d3 + d14";
    "d10 = d3 + d14"->"$d7 = d10 - d3";
    "$d7 = d10 - d3"->"$d8 = $d7 - d14";
    "$d8 = $d7 - d14"->"d11 = neg $d8";
    "d11 = neg $d8"->"i11 = i11 ^ 1";
    "i11 = i11 ^ 1"->"i10 = i10 ^ 1";
    "i10 = i10 ^ 1"->"$i6 = i11 & 1";
    "$i6 = i11 & 1"->"if $i6 != 0 goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)";
    "if $i6 != 0 goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)"->"d15 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 0)";
    "if $i6 != 0 goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)"->"$d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)";
    "d15 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 0)"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i10 == 0 goto return d15";
    "$d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1)"->"d15 = neg $d1";
    "d15 = neg $d1"->"if i10 == 0 goto return d15";
    "if i10 == 0 goto return d15"->"d15 = neg d15";
    "if i10 == 0 goto return d15"->"return d15";
    "d15 = neg d15"->"return d15";
}
