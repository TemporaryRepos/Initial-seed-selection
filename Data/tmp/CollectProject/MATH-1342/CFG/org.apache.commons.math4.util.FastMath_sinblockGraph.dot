digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
z0 = 0;
i9 = 0;
d8 = 0.0;
d9 = d0;
$b0 = d0 cmpg 0.0;
if $b0 >= 0 goto $b1 = d9 cmpl 0.0;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
z0 = 1;
d9 = neg d9;
"
    "Block 2:
[preds: 0 1 ] [succs: 3 6 ]
$b1 = d9 cmpl 0.0;
if $b1 != 0 goto $b2 = d9 cmpl d9;
"
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
$b8 = l10 cmp 0L;
if $b8 >= 0 goto return 0.0;
"
    "Block 4:
[preds: 3 ] [succs: ]
return -0.0;
"
    "Block 5:
[preds: 3 ] [succs: ]
return 0.0;
"
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$b2 = d9 cmpl d9;
if $b2 != 0 goto return #NaN;
"
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$b3 = d9 cmpl #Infinity;
if $b3 != 0 goto $b4 = d9 cmpl 3294198.0;
"
    "Block 8:
[preds: 6 7 ] [succs: ]
return #NaN;
"
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$b4 = d9 cmpl 3294198.0;
if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966;
"
    "Block 10:
[preds: 9 ] [succs: 13 ]
r1 = newarray (double)[3];
staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1);
$d7 = r1[0];
$i7 = (int) $d7;
i9 = $i7 & 3;
d9 = r1[1];
d8 = r1[2];
goto [?= (branch)];
"
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$b5 = d9 cmpl 1.5707963267948966;
if $b5 <= 0 goto (branch);
"
    "Block 12:
[preds: 11 ] [succs: 13 ]
$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite;
specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d9);
r2 = $r0;
$i6 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>();
i9 = $i6 & 3;
d9 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>();
d8 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>();
"
    "Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
"
    "Block 14:
[preds: 13 ] [succs: 15 ]
i9 = i9 ^ 2;
"
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"
    "Block 16:
[preds: 15 ] [succs: ]
$d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);
return $d6;
"
    "Block 17:
[preds: 15 ] [succs: ]
$d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);
return $d5;
"
    "Block 18:
[preds: 15 ] [succs: ]
$d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);
$d4 = neg $d3;
return $d4;
"
    "Block 19:
[preds: 15 ] [succs: ]
$d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);
$d2 = neg $d1;
return $d2;
"
    "Block 20:
[preds: 15 ] [succs: ]
return #NaN;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
z0 = 0;
i9 = 0;
d8 = 0.0;
d9 = d0;
$b0 = d0 cmpg 0.0;
if $b0 >= 0 goto $b1 = d9 cmpl 0.0;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
z0 = 1;
d9 = neg d9;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
z0 = 0;
i9 = 0;
d8 = 0.0;
d9 = d0;
$b0 = d0 cmpg 0.0;
if $b0 >= 0 goto $b1 = d9 cmpl 0.0;
"->"Block 2:
[preds: 0 1 ] [succs: 3 6 ]
$b1 = d9 cmpl 0.0;
if $b1 != 0 goto $b2 = d9 cmpl d9;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
z0 = 1;
d9 = neg d9;
"->"Block 2:
[preds: 0 1 ] [succs: 3 6 ]
$b1 = d9 cmpl 0.0;
if $b1 != 0 goto $b2 = d9 cmpl d9;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 6 ]
$b1 = d9 cmpl 0.0;
if $b1 != 0 goto $b2 = d9 cmpl d9;
"->"Block 3:
[preds: 2 ] [succs: 4 5 ]
l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
$b8 = l10 cmp 0L;
if $b8 >= 0 goto return 0.0;
";
    "Block 2:
[preds: 0 1 ] [succs: 3 6 ]
$b1 = d9 cmpl 0.0;
if $b1 != 0 goto $b2 = d9 cmpl d9;
"->"Block 6:
[preds: 2 ] [succs: 7 8 ]
$b2 = d9 cmpl d9;
if $b2 != 0 goto return #NaN;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
$b8 = l10 cmp 0L;
if $b8 >= 0 goto return 0.0;
"->"Block 4:
[preds: 3 ] [succs: ]
return -0.0;
";
    "Block 3:
[preds: 2 ] [succs: 4 5 ]
l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
$b8 = l10 cmp 0L;
if $b8 >= 0 goto return 0.0;
"->"Block 5:
[preds: 3 ] [succs: ]
return 0.0;
";
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$b2 = d9 cmpl d9;
if $b2 != 0 goto return #NaN;
"->"Block 7:
[preds: 6 ] [succs: 8 9 ]
$b3 = d9 cmpl #Infinity;
if $b3 != 0 goto $b4 = d9 cmpl 3294198.0;
";
    "Block 6:
[preds: 2 ] [succs: 7 8 ]
$b2 = d9 cmpl d9;
if $b2 != 0 goto return #NaN;
"->"Block 8:
[preds: 6 7 ] [succs: ]
return #NaN;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$b3 = d9 cmpl #Infinity;
if $b3 != 0 goto $b4 = d9 cmpl 3294198.0;
"->"Block 8:
[preds: 6 7 ] [succs: ]
return #NaN;
";
    "Block 7:
[preds: 6 ] [succs: 8 9 ]
$b3 = d9 cmpl #Infinity;
if $b3 != 0 goto $b4 = d9 cmpl 3294198.0;
"->"Block 9:
[preds: 7 ] [succs: 10 11 ]
$b4 = d9 cmpl 3294198.0;
if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966;
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$b4 = d9 cmpl 3294198.0;
if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966;
"->"Block 10:
[preds: 9 ] [succs: 13 ]
r1 = newarray (double)[3];
staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1);
$d7 = r1[0];
$i7 = (int) $d7;
i9 = $i7 & 3;
d9 = r1[1];
d8 = r1[2];
goto [?= (branch)];
";
    "Block 9:
[preds: 7 ] [succs: 10 11 ]
$b4 = d9 cmpl 3294198.0;
if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966;
"->"Block 11:
[preds: 9 ] [succs: 12 13 ]
$b5 = d9 cmpl 1.5707963267948966;
if $b5 <= 0 goto (branch);
";
    "Block 10:
[preds: 9 ] [succs: 13 ]
r1 = newarray (double)[3];
staticinvoke <org.apache.commons.math4.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1);
$d7 = r1[0];
$i7 = (int) $d7;
i9 = $i7 & 3;
d9 = r1[1];
d8 = r1[2];
goto [?= (branch)];
"->"Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$b5 = d9 cmpl 1.5707963267948966;
if $b5 <= 0 goto (branch);
"->"Block 12:
[preds: 11 ] [succs: 13 ]
$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite;
specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d9);
r2 = $r0;
$i6 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>();
i9 = $i6 & 3;
d9 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>();
d8 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>();
";
    "Block 11:
[preds: 9 ] [succs: 12 13 ]
$b5 = d9 cmpl 1.5707963267948966;
if $b5 <= 0 goto (branch);
"->"Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
";
    "Block 12:
[preds: 11 ] [succs: 13 ]
$r0 = new org.apache.commons.math4.util.FastMath$CodyWaite;
specialinvoke $r0.<org.apache.commons.math4.util.FastMath$CodyWaite: void <init>(double)>(d9);
r2 = $r0;
$i6 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: int getK()>();
i9 = $i6 & 3;
d9 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemA()>();
d8 = virtualinvoke r2.<org.apache.commons.math4.util.FastMath$CodyWaite: double getRemB()>();
"->"Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
";
    "Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
"->"Block 14:
[preds: 13 ] [succs: 15 ]
i9 = i9 ^ 2;
";
    "Block 13:
[preds: 10 11 12 ] [succs: 14 15 ]
if z0 == 0 goto (branch);
"->"Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
";
    "Block 14:
[preds: 13 ] [succs: 15 ]
i9 = i9 ^ 2;
"->"Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"->"Block 16:
[preds: 15 ] [succs: ]
$d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);
return $d6;
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"->"Block 17:
[preds: 15 ] [succs: ]
$d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);
return $d5;
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"->"Block 18:
[preds: 15 ] [succs: ]
$d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);
$d4 = neg $d3;
return $d4;
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"->"Block 19:
[preds: 15 ] [succs: ]
$d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);
$d2 = neg $d1;
return $d2;
";
    "Block 15:
[preds: 13 14 ] [succs: 16 17 18 19 20 ]
tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math4.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math4.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; };
"->"Block 20:
[preds: 15 ] [succs: ]
return #NaN;
";
}
