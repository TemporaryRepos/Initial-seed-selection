digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
l0 := @parameter1: long;
$b1 = l0 cmp 0L;
if $b1 != 0 goto $b2 = l0 cmp 0L;
"
    "Block 1:
[preds: 0 ] [succs: ]
return 1.0;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$b2 = l0 cmp 0L;
if $b2 <= 0 goto $r0 = new org.apache.commons.math4.util.FastMath$Split;
"
    "Block 3:
[preds: 2 ] [succs: ]
$r3 = new org.apache.commons.math4.util.FastMath$Split;
specialinvoke $r3.<org.apache.commons.math4.util.FastMath$Split: void <init>(double)>(d0);
$r4 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split access$500(org.apache.commons.math4.util.FastMath$Split,long)>($r3, l0);
$d2 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: double access$600(org.apache.commons.math4.util.FastMath$Split)>($r4);
return $d2;
"
    "Block 4:
[preds: 2 ] [succs: ]
$r0 = new org.apache.commons.math4.util.FastMath$Split;
specialinvoke $r0.<org.apache.commons.math4.util.FastMath$Split: void <init>(double)>(d0);
$r1 = virtualinvoke $r0.<org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split reciprocal()>();
$l3 = neg l0;
$r2 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split access$500(org.apache.commons.math4.util.FastMath$Split,long)>($r1, $l3);
$d1 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: double access$600(org.apache.commons.math4.util.FastMath$Split)>($r2);
return $d1;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
l0 := @parameter1: long;
$b1 = l0 cmp 0L;
if $b1 != 0 goto $b2 = l0 cmp 0L;
"->"Block 1:
[preds: 0 ] [succs: ]
return 1.0;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
l0 := @parameter1: long;
$b1 = l0 cmp 0L;
if $b1 != 0 goto $b2 = l0 cmp 0L;
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$b2 = l0 cmp 0L;
if $b2 <= 0 goto $r0 = new org.apache.commons.math4.util.FastMath$Split;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$b2 = l0 cmp 0L;
if $b2 <= 0 goto $r0 = new org.apache.commons.math4.util.FastMath$Split;
"->"Block 3:
[preds: 2 ] [succs: ]
$r3 = new org.apache.commons.math4.util.FastMath$Split;
specialinvoke $r3.<org.apache.commons.math4.util.FastMath$Split: void <init>(double)>(d0);
$r4 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split access$500(org.apache.commons.math4.util.FastMath$Split,long)>($r3, l0);
$d2 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: double access$600(org.apache.commons.math4.util.FastMath$Split)>($r4);
return $d2;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$b2 = l0 cmp 0L;
if $b2 <= 0 goto $r0 = new org.apache.commons.math4.util.FastMath$Split;
"->"Block 4:
[preds: 2 ] [succs: ]
$r0 = new org.apache.commons.math4.util.FastMath$Split;
specialinvoke $r0.<org.apache.commons.math4.util.FastMath$Split: void <init>(double)>(d0);
$r1 = virtualinvoke $r0.<org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split reciprocal()>();
$l3 = neg l0;
$r2 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: org.apache.commons.math4.util.FastMath$Split access$500(org.apache.commons.math4.util.FastMath$Split,long)>($r1, $l3);
$d1 = staticinvoke <org.apache.commons.math4.util.FastMath$Split: double access$600(org.apache.commons.math4.util.FastMath$Split)>($r2);
return $d1;
";
}
