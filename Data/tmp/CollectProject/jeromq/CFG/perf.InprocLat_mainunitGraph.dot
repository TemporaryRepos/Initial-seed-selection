digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String[]"
    "$i0 = lengthof r0"
    "if $i0 == 2 goto $r1 = r0[0]"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"usage: inproc_lat <message-size> <roundtrip-count>\n\")"
    "return"
    "$r1 = r0[0]"
    "i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1)"
    "$r2 = r0[1]"
    "i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2)"
    "r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1)"
    "if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in init:\")"
    "r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)"
    "if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in socket: \")"
    "z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")"
    "if z0 != 0 goto $r5 = new java.lang.Thread"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in bind: \")"
    "$r5 = new java.lang.Thread"
    "$r6 = new perf.InprocLat$Worker"
    "specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2)"
    "specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)"
    "r7 = $r5"
    "virtualinvoke r7.<java.lang.Thread: void start()>()"
    "r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1)"
    "$r9 = newarray (java.lang.Object)[1]"
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"
    "$r9[0] = $r10"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9)"
    "$r11 = newarray (java.lang.Object)[1]"
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"
    "$r11[0] = $r12"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11)"
    "l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>()"
    "i7 = 0"
    "if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)"
    "i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0)"
    "if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in sendmsg: %s\n\")"
    "r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)"
    "if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in recvmsg: %s\n\")"
    "$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)"
    "if $i6 == i1 goto i7 = i7 + 1"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"message of incorrect size received\n\")"
    "i7 = i7 + 1"
    "goto [?= (branch)]"
    "l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)"
    "$d1 = (double) l8"
    "$i4 = i2 * 2"
    "$d0 = (double) $i4"
    "d2 = $d1 / $d0"
    "virtualinvoke r7.<java.lang.Thread: void join()>()"
    "$r13 = newarray (java.lang.Object)[1]"
    "$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)"
    "$r13[0] = $r14"
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"average latency: %.3f [us]\n\", $r13)"
    "staticinvoke <zmq.ZMQ: void close(zmq.SocketBase)>(r4)"
    "staticinvoke <zmq.ZMQ: void term(zmq.Ctx)>(r3)"
    "r0 := @parameter0: java.lang.String[]"->"$i0 = lengthof r0";
    "$i0 = lengthof r0"->"if $i0 == 2 goto $r1 = r0[0]";
    "if $i0 == 2 goto $r1 = r0[0]"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"usage: inproc_lat <message-size> <roundtrip-count>\n\")";
    "if $i0 == 2 goto $r1 = r0[0]"->"$r1 = r0[0]";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"usage: inproc_lat <message-size> <roundtrip-count>\n\")"->"return";
    "$r1 = r0[0]"->"i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1)";
    "i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1)"->"$r2 = r0[1]";
    "$r2 = r0[1]"->"i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2)";
    "i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2)"->"r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1)";
    "r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1)"->"if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)";
    "if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in init:\")";
    "if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)"->"r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in init:\")"->"return";
    "r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3)"->"if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")";
    "if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in socket: \")";
    "if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")"->"z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in socket: \")"->"return";
    "z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\")"->"if z0 != 0 goto $r5 = new java.lang.Thread";
    "if z0 != 0 goto $r5 = new java.lang.Thread"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in bind: \")";
    "if z0 != 0 goto $r5 = new java.lang.Thread"->"$r5 = new java.lang.Thread";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in bind: \")"->"return";
    "$r5 = new java.lang.Thread"->"$r6 = new perf.InprocLat$Worker";
    "$r6 = new perf.InprocLat$Worker"->"specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2)";
    "specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2)"->"specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)";
    "specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)"->"r7 = $r5";
    "r7 = $r5"->"virtualinvoke r7.<java.lang.Thread: void start()>()";
    "virtualinvoke r7.<java.lang.Thread: void start()>()"->"r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1)";
    "r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1)"->"$r9 = newarray (java.lang.Object)[1]";
    "$r9 = newarray (java.lang.Object)[1]"->"$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)";
    "$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)"->"$r9[0] = $r10";
    "$r9[0] = $r10"->"staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9)"->"$r11 = newarray (java.lang.Object)[1]";
    "$r11 = newarray (java.lang.Object)[1]"->"$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)";
    "$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)"->"$r11[0] = $r12";
    "$r11[0] = $r12"->"staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11)"->"l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>()";
    "l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>()"->"i7 = 0";
    "i7 = 0"->"if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)";
    "if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)"->"i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0)";
    "if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)"->"l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)";
    "i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0)"->"if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)";
    "if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in sendmsg: %s\n\")";
    "if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)"->"r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in sendmsg: %s\n\")"->"return";
    "r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0)"->"if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)";
    "if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in recvmsg: %s\n\")";
    "if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)"->"$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in recvmsg: %s\n\")"->"return";
    "$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15)"->"if $i6 == i1 goto i7 = i7 + 1";
    "if $i6 == i1 goto i7 = i7 + 1"->"staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"message of incorrect size received\n\")";
    "if $i6 == i1 goto i7 = i7 + 1"->"i7 = i7 + 1";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"message of incorrect size received\n\")"->"return";
    "i7 = i7 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)";
    "l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3)"->"$d1 = (double) l8";
    "$d1 = (double) l8"->"$i4 = i2 * 2";
    "$i4 = i2 * 2"->"$d0 = (double) $i4";
    "$d0 = (double) $i4"->"d2 = $d1 / $d0";
    "d2 = $d1 / $d0"->"virtualinvoke r7.<java.lang.Thread: void join()>()";
    "virtualinvoke r7.<java.lang.Thread: void join()>()"->"$r13 = newarray (java.lang.Object)[1]";
    "$r13 = newarray (java.lang.Object)[1]"->"$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)";
    "$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2)"->"$r13[0] = $r14";
    "$r13[0] = $r14"->"staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"average latency: %.3f [us]\n\", $r13)";
    "staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"average latency: %.3f [us]\n\", $r13)"->"staticinvoke <zmq.ZMQ: void close(zmq.SocketBase)>(r4)";
    "staticinvoke <zmq.ZMQ: void close(zmq.SocketBase)>(r4)"->"staticinvoke <zmq.ZMQ: void term(zmq.Ctx)>(r3)";
    "staticinvoke <zmq.ZMQ: void term(zmq.Ctx)>(r3)"->"return";
}
