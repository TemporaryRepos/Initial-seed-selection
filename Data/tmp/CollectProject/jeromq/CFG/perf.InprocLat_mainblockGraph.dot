digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 == 2 goto $r1 = r0[0];
"
    "Block 1:
[preds: 0 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"usage: inproc_lat <message-size> <roundtrip-count>\n\");
return;
"
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0[0];
i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1);
$r2 = r0[1];
i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2);
r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1);
if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
"
    "Block 3:
[preds: 2 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in init:\");
return;
"
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
"
    "Block 5:
[preds: 4 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in socket: \");
return;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
if z0 != 0 goto $r5 = new java.lang.Thread;
"
    "Block 7:
[preds: 6 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in bind: \");
return;
"
    "Block 8:
[preds: 6 ] [succs: 9 ]
$r5 = new java.lang.Thread;
$r6 = new perf.InprocLat$Worker;
specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2);
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);
r7 = $r5;
virtualinvoke r7.<java.lang.Thread: void start()>();
r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1);
$r9 = newarray (java.lang.Object)[1];
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r9[0] = $r10;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9);
$r11 = newarray (java.lang.Object)[1];
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
$r11[0] = $r12;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11);
l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>();
i7 = 0;
"
    "Block 9:
[preds: 8 16 ] [succs: 10 17 ]
if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
"
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0);
if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
"
    "Block 11:
[preds: 10 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in sendmsg: %s\n\");
return;
"
    "Block 12:
[preds: 10 ] [succs: 13 14 ]
r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
"
    "Block 13:
[preds: 12 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in recvmsg: %s\n\");
return;
"
    "Block 14:
[preds: 12 ] [succs: 15 16 ]
$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
if $i6 == i1 goto i7 = i7 + 1;
"
    "Block 15:
[preds: 14 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"message of incorrect size received\n\");
return;
"
    "Block 16:
[preds: 14 ] [succs: 9 ]
i7 = i7 + 1;
goto [?= (branch)];
"
    "Block 17:
[preds: 9 ] [succs: ]
l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
$d1 = (double) l8;
$i4 = i2 * 2;
$d0 = (double) $i4;
d2 = $d1 / $d0;
virtualinvoke r7.<java.lang.Thread: void join()>();
$r13 = newarray (java.lang.Object)[1];
$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);
$r13[0] = $r14;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"average latency: %.3f [us]\n\", $r13);
staticinvoke <zmq.ZMQ: void close(zmq.SocketBase)>(r4);
staticinvoke <zmq.ZMQ: void term(zmq.Ctx)>(r3);
return;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 == 2 goto $r1 = r0[0];
"->"Block 1:
[preds: 0 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"usage: inproc_lat <message-size> <roundtrip-count>\n\");
return;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: java.lang.String[];
$i0 = lengthof r0;
if $i0 == 2 goto $r1 = r0[0];
"->"Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0[0];
i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1);
$r2 = r0[1];
i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2);
r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1);
if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0[0];
i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1);
$r2 = r0[1];
i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2);
r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1);
if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
"->"Block 3:
[preds: 2 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in init:\");
return;
";
    "Block 2:
[preds: 0 ] [succs: 3 4 ]
$r1 = r0[0];
i1 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r1);
$r2 = r0[1];
i2 = staticinvoke <perf.InprocLat: int atoi(java.lang.String)>($r2);
r3 = staticinvoke <zmq.ZMQ: zmq.Ctx init(int)>(1);
if r3 != null goto r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
"->"Block 4:
[preds: 2 ] [succs: 5 6 ]
r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
"->"Block 5:
[preds: 4 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in socket: \");
return;
";
    "Block 4:
[preds: 2 ] [succs: 5 6 ]
r4 = staticinvoke <zmq.ZMQ: zmq.SocketBase socket(zmq.Ctx,int)>(r3, 3);
if r4 != null goto z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
if z0 != 0 goto $r5 = new java.lang.Thread;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
if z0 != 0 goto $r5 = new java.lang.Thread;
"->"Block 7:
[preds: 6 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in bind: \");
return;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
z0 = staticinvoke <zmq.ZMQ: boolean bind(zmq.SocketBase,java.lang.String)>(r4, \"inproc://lat_test\");
if z0 != 0 goto $r5 = new java.lang.Thread;
"->"Block 8:
[preds: 6 ] [succs: 9 ]
$r5 = new java.lang.Thread;
$r6 = new perf.InprocLat$Worker;
specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2);
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);
r7 = $r5;
virtualinvoke r7.<java.lang.Thread: void start()>();
r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1);
$r9 = newarray (java.lang.Object)[1];
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r9[0] = $r10;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9);
$r11 = newarray (java.lang.Object)[1];
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
$r11[0] = $r12;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11);
l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>();
i7 = 0;
";
    "Block 8:
[preds: 6 ] [succs: 9 ]
$r5 = new java.lang.Thread;
$r6 = new perf.InprocLat$Worker;
specialinvoke $r6.<perf.InprocLat$Worker: void <init>(zmq.Ctx,int)>(r3, i2);
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);
r7 = $r5;
virtualinvoke r7.<java.lang.Thread: void start()>();
r8 = staticinvoke <zmq.ZMQ: zmq.Msg msgInitWithSize(int)>(i1);
$r9 = newarray (java.lang.Object)[1];
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r9[0] = $r10;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"message size: %d [B]\n\", $r9);
$r11 = newarray (java.lang.Object)[1];
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
$r11[0] = $r12;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"roundtrip count: %d\n\", $r11);
l3 = staticinvoke <zmq.ZMQ: long startStopwatch()>();
i7 = 0;
"->"Block 9:
[preds: 8 16 ] [succs: 10 17 ]
if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
";
    "Block 9:
[preds: 8 16 ] [succs: 10 17 ]
if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
"->"Block 10:
[preds: 9 ] [succs: 11 12 ]
i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0);
if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
";
    "Block 9:
[preds: 8 16 ] [succs: 10 17 ]
if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
"->"Block 17:
[preds: 9 ] [succs: ]
l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
$d1 = (double) l8;
$i4 = i2 * 2;
$d0 = (double) $i4;
d2 = $d1 / $d0;
virtualinvoke r7.<java.lang.Thread: void join()>();
$r13 = newarray (java.lang.Object)[1];
$r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);
$r13[0] = $r14;
staticinvoke <perf.InprocLat: void printf(java.lang.String,java.lang.Object[])>(\"average latency: %.3f [us]\n\", $r13);
staticinvoke <zmq.ZMQ: void close(zmq.SocketBase)>(r4);
staticinvoke <zmq.ZMQ: void term(zmq.Ctx)>(r3);
return;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0);
if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
"->"Block 11:
[preds: 10 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in sendmsg: %s\n\");
return;
";
    "Block 10:
[preds: 9 ] [succs: 11 12 ]
i5 = staticinvoke <zmq.ZMQ: int sendMsg(zmq.SocketBase,zmq.Msg,int)>(r4, r8, 0);
if i5 >= 0 goto r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
"->"Block 12:
[preds: 10 ] [succs: 13 14 ]
r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
";
    "Block 12:
[preds: 10 ] [succs: 13 14 ]
r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
"->"Block 13:
[preds: 12 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"error in recvmsg: %s\n\");
return;
";
    "Block 12:
[preds: 10 ] [succs: 13 14 ]
r15 = staticinvoke <zmq.ZMQ: zmq.Msg recvMsg(zmq.SocketBase,int)>(r4, 0);
if r15 != null goto $i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
"->"Block 14:
[preds: 12 ] [succs: 15 16 ]
$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
if $i6 == i1 goto i7 = i7 + 1;
";
    "Block 14:
[preds: 12 ] [succs: 15 16 ]
$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
if $i6 == i1 goto i7 = i7 + 1;
"->"Block 15:
[preds: 14 ] [succs: ]
staticinvoke <perf.InprocLat: void printf(java.lang.String)>(\"message of incorrect size received\n\");
return;
";
    "Block 14:
[preds: 12 ] [succs: 15 16 ]
$i6 = staticinvoke <zmq.ZMQ: int msgSize(zmq.Msg)>(r15);
if $i6 == i1 goto i7 = i7 + 1;
"->"Block 16:
[preds: 14 ] [succs: 9 ]
i7 = i7 + 1;
goto [?= (branch)];
";
    "Block 16:
[preds: 14 ] [succs: 9 ]
i7 = i7 + 1;
goto [?= (branch)];
"->"Block 9:
[preds: 8 16 ] [succs: 10 17 ]
if i7 == i2 goto l8 = staticinvoke <zmq.ZMQ: long stopStopwatch(long)>(l3);
";
}
