digraph "unitGraph" {
    "d0 := @parameter0: double"
    "l0 := @parameter1: long"
    "$b1 = l0 cmp 0L"
    "if $b1 != 0 goto $b2 = l0 cmp 0L"
    "return 1.0"
    "$b2 = l0 cmp 0L"
    "if $b2 <= 0 goto $r0 = new org.apache.commons.math3.util.FastMath$Split"
    "$r3 = new org.apache.commons.math3.util.FastMath$Split"
    "specialinvoke $r3.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)"
    "$r4 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r3, l0)"
    "$d2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r4)"
    "return $d2"
    "$r0 = new org.apache.commons.math3.util.FastMath$Split"
    "specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)"
    "$r1 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split reciprocal()>()"
    "$l3 = neg l0"
    "$r2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r1, $l3)"
    "$d1 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r2)"
    "return $d1"
    "d0 := @parameter0: double"->"l0 := @parameter1: long";
    "l0 := @parameter1: long"->"$b1 = l0 cmp 0L";
    "$b1 = l0 cmp 0L"->"if $b1 != 0 goto $b2 = l0 cmp 0L";
    "if $b1 != 0 goto $b2 = l0 cmp 0L"->"return 1.0";
    "if $b1 != 0 goto $b2 = l0 cmp 0L"->"$b2 = l0 cmp 0L";
    "$b2 = l0 cmp 0L"->"if $b2 <= 0 goto $r0 = new org.apache.commons.math3.util.FastMath$Split";
    "if $b2 <= 0 goto $r0 = new org.apache.commons.math3.util.FastMath$Split"->"$r3 = new org.apache.commons.math3.util.FastMath$Split";
    "if $b2 <= 0 goto $r0 = new org.apache.commons.math3.util.FastMath$Split"->"$r0 = new org.apache.commons.math3.util.FastMath$Split";
    "$r3 = new org.apache.commons.math3.util.FastMath$Split"->"specialinvoke $r3.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)";
    "specialinvoke $r3.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)"->"$r4 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r3, l0)";
    "$r4 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r3, l0)"->"$d2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r4)";
    "$d2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r4)"->"return $d2";
    "$r0 = new org.apache.commons.math3.util.FastMath$Split"->"specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)";
    "specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0)"->"$r1 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split reciprocal()>()";
    "$r1 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split reciprocal()>()"->"$l3 = neg l0";
    "$l3 = neg l0"->"$r2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r1, $l3)";
    "$r2 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r1, $l3)"->"$d1 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r2)";
    "$d1 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r2)"->"return $d1";
}
