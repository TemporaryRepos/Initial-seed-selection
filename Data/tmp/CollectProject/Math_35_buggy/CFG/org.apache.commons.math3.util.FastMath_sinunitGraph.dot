digraph "unitGraph" {
    "d0 := @parameter0: double"
    "z0 = 0"
    "i9 = 0"
    "d8 = 0.0"
    "d9 = d0"
    "$b0 = d0 cmpg 0.0"
    "if $b0 >= 0 goto $b1 = d9 cmpl 0.0"
    "z0 = 1"
    "d9 = neg d9"
    "$b1 = d9 cmpl 0.0"
    "if $b1 != 0 goto $b2 = d9 cmpl d9"
    "l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)"
    "$b8 = l10 cmp 0L"
    "if $b8 >= 0 goto return 0.0"
    "return -0.0"
    "return 0.0"
    "$b2 = d9 cmpl d9"
    "if $b2 != 0 goto return #NaN"
    "$b3 = d9 cmpl #Infinity"
    "if $b3 != 0 goto $b4 = d9 cmpl 3294198.0"
    "return #NaN"
    "$b4 = d9 cmpl 3294198.0"
    "if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966"
    "r1 = newarray (double)[3]"
    "staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1)"
    "$d7 = r1[0]"
    "$i7 = (int) $d7"
    "i9 = $i7 & 3"
    "d9 = r1[1]"
    "d8 = r1[2]"
    "goto [?= (branch)]"
    "$b5 = d9 cmpl 1.5707963267948966"
    "if $b5 <= 0 goto (branch)"
    "$r0 = new org.apache.commons.math3.util.FastMath$CodyWaite"
    "specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d9)"
    "r2 = $r0"
    "$i6 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>()"
    "i9 = $i6 & 3"
    "d9 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>()"
    "d8 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>()"
    "if z0 == 0 goto (branch)"
    "i9 = i9 ^ 2"
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"
    "$d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)"
    "return $d6"
    "$d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)"
    "return $d5"
    "$d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)"
    "$d4 = neg $d3"
    "return $d4"
    "$d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)"
    "$d2 = neg $d1"
    "return $d2"
    "d0 := @parameter0: double"->"z0 = 0";
    "z0 = 0"->"i9 = 0";
    "i9 = 0"->"d8 = 0.0";
    "d8 = 0.0"->"d9 = d0";
    "d9 = d0"->"$b0 = d0 cmpg 0.0";
    "$b0 = d0 cmpg 0.0"->"if $b0 >= 0 goto $b1 = d9 cmpl 0.0";
    "if $b0 >= 0 goto $b1 = d9 cmpl 0.0"->"z0 = 1";
    "if $b0 >= 0 goto $b1 = d9 cmpl 0.0"->"$b1 = d9 cmpl 0.0";
    "z0 = 1"->"d9 = neg d9";
    "d9 = neg d9"->"$b1 = d9 cmpl 0.0";
    "$b1 = d9 cmpl 0.0"->"if $b1 != 0 goto $b2 = d9 cmpl d9";
    "if $b1 != 0 goto $b2 = d9 cmpl d9"->"l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)";
    "if $b1 != 0 goto $b2 = d9 cmpl d9"->"$b2 = d9 cmpl d9";
    "l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0)"->"$b8 = l10 cmp 0L";
    "$b8 = l10 cmp 0L"->"if $b8 >= 0 goto return 0.0";
    "if $b8 >= 0 goto return 0.0"->"return -0.0";
    "if $b8 >= 0 goto return 0.0"->"return 0.0";
    "$b2 = d9 cmpl d9"->"if $b2 != 0 goto return #NaN";
    "if $b2 != 0 goto return #NaN"->"$b3 = d9 cmpl #Infinity";
    "if $b2 != 0 goto return #NaN"->"return #NaN";
    "$b3 = d9 cmpl #Infinity"->"if $b3 != 0 goto $b4 = d9 cmpl 3294198.0";
    "if $b3 != 0 goto $b4 = d9 cmpl 3294198.0"->"return #NaN";
    "if $b3 != 0 goto $b4 = d9 cmpl 3294198.0"->"$b4 = d9 cmpl 3294198.0";
    "$b4 = d9 cmpl 3294198.0"->"if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966";
    "if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966"->"r1 = newarray (double)[3]";
    "if $b4 <= 0 goto $b5 = d9 cmpl 1.5707963267948966"->"$b5 = d9 cmpl 1.5707963267948966";
    "r1 = newarray (double)[3]"->"staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1)";
    "staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d9, r1)"->"$d7 = r1[0]";
    "$d7 = r1[0]"->"$i7 = (int) $d7";
    "$i7 = (int) $d7"->"i9 = $i7 & 3";
    "i9 = $i7 & 3"->"d9 = r1[1]";
    "d9 = r1[1]"->"d8 = r1[2]";
    "d8 = r1[2]"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if z0 == 0 goto (branch)";
    "$b5 = d9 cmpl 1.5707963267948966"->"if $b5 <= 0 goto (branch)";
    "if $b5 <= 0 goto (branch)"->"$r0 = new org.apache.commons.math3.util.FastMath$CodyWaite";
    "if $b5 <= 0 goto (branch)"->"if z0 == 0 goto (branch)";
    "$r0 = new org.apache.commons.math3.util.FastMath$CodyWaite"->"specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d9)";
    "specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d9)"->"r2 = $r0";
    "r2 = $r0"->"$i6 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>()";
    "$i6 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>()"->"i9 = $i6 & 3";
    "i9 = $i6 & 3"->"d9 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>()";
    "d9 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>()"->"d8 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>()";
    "d8 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>()"->"if z0 == 0 goto (branch)";
    "if z0 == 0 goto (branch)"->"i9 = i9 ^ 2";
    "if z0 == 0 goto (branch)"->"tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }";
    "i9 = i9 ^ 2"->"tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }";
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"->"$d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)";
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"->"$d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)";
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"->"$d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)";
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"->"$d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)";
    "tableswitch(i9) {     case 0: goto $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 1: goto $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     case 2: goto $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8);     case 3: goto $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8);     default: goto return #NaN; }"->"return #NaN";
    "$d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)"->"return $d6";
    "$d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)"->"return $d5";
    "$d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d9, d8)"->"$d4 = neg $d3";
    "$d4 = neg $d3"->"return $d4";
    "$d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d9, d8)"->"$d2 = neg $d1";
    "$d2 = neg $d1"->"return $d2";
}
