digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
d1 := @parameter1: double;
$z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);
if $z0 != 0 goto return #Infinity;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
if $z1 == 0 goto $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return #Infinity;
"
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
if $z2 != 0 goto return #NaN;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);
if $z3 == 0 goto i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
"
    "Block 5:
[preds: 3 4 ] [succs: ]
return #NaN;
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d1);
$i2 = i1 + 27;
if i0 <= $i2 goto $i3 = i0 + 27;
"
    "Block 7:
[preds: 6 ] [succs: ]
$d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);
return $d10;
"
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i3 = i0 + 27;
if i1 <= $i3 goto $i4 = i0 + i1;
"
    "Block 9:
[preds: 8 ] [succs: ]
$d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);
return $d9;
"
    "Block 10:
[preds: 8 ] [succs: ]
$i4 = i0 + i1;
i5 = $i4 / 2;
$i6 = neg i5;
d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d0, $i6);
$i7 = neg i5;
d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d1, $i7);
$d5 = d2 * d2;
$d4 = d3 * d3;
$d6 = $d5 + $d4;
d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);
$d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d7, i5);
return $d8;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
d1 := @parameter1: double;
$z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);
if $z0 != 0 goto return #Infinity;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
if $z1 == 0 goto $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
";
    "Block 0:
[preds: ] [succs: 1 2 ]
d0 := @parameter0: double;
d1 := @parameter1: double;
$z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);
if $z0 != 0 goto return #Infinity;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return #Infinity;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
if $z1 == 0 goto $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
"->"Block 2:
[preds: 0 1 ] [succs: ]
return #Infinity;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
$z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
if $z1 == 0 goto $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
"->"Block 3:
[preds: 1 ] [succs: 4 5 ]
$z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
if $z2 != 0 goto return #NaN;
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
if $z2 != 0 goto return #NaN;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);
if $z3 == 0 goto i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
";
    "Block 3:
[preds: 1 ] [succs: 4 5 ]
$z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
if $z2 != 0 goto return #NaN;
"->"Block 5:
[preds: 3 4 ] [succs: ]
return #NaN;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);
if $z3 == 0 goto i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
"->"Block 5:
[preds: 3 4 ] [succs: ]
return #NaN;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);
if $z3 == 0 goto i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d1);
$i2 = i1 + 27;
if i0 <= $i2 goto $i3 = i0 + 27;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d1);
$i2 = i1 + 27;
if i0 <= $i2 goto $i3 = i0 + 27;
"->"Block 7:
[preds: 6 ] [succs: ]
$d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);
return $d10;
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);
i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d1);
$i2 = i1 + 27;
if i0 <= $i2 goto $i3 = i0 + 27;
"->"Block 8:
[preds: 6 ] [succs: 9 10 ]
$i3 = i0 + 27;
if i1 <= $i3 goto $i4 = i0 + i1;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i3 = i0 + 27;
if i1 <= $i3 goto $i4 = i0 + i1;
"->"Block 9:
[preds: 8 ] [succs: ]
$d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);
return $d9;
";
    "Block 8:
[preds: 6 ] [succs: 9 10 ]
$i3 = i0 + 27;
if i1 <= $i3 goto $i4 = i0 + i1;
"->"Block 10:
[preds: 8 ] [succs: ]
$i4 = i0 + i1;
i5 = $i4 / 2;
$i6 = neg i5;
d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d0, $i6);
$i7 = neg i5;
d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d1, $i7);
$d5 = d2 * d2;
$d4 = d3 * d3;
$d6 = $d5 + $d4;
d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);
$d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d7, i5);
return $d8;
";
}
