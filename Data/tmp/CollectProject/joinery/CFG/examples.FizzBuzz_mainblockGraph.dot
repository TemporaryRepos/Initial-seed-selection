digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r18 := @parameter0: java.lang.String[];
$r0 = new joinery.DataFrame;
specialinvoke $r0.<joinery.DataFrame: void <init>()>();
$r1 = newarray (java.lang.Object)[1];
$r1[0] = \"number\";
r2 = virtualinvoke $r0.<joinery.DataFrame: joinery.DataFrame add(java.lang.Object[])>($r1);
i0 = 1;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 > 100 goto $r3 = newarray (java.lang.Object)[1];
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r14 = newarray (java.lang.Integer)[1];
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r14[0] = $r15;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);
virtualinvoke r2.<joinery.DataFrame: joinery.DataFrame append(java.util.List)>($r16);
i0 = i0 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r3 = newarray (java.lang.Object)[1];
$r3[0] = \"value\";
$r4 = virtualinvoke r2.<joinery.DataFrame: joinery.DataFrame add(java.lang.Object[])>($r3);
$r5 = new examples.FizzBuzz$1;
specialinvoke $r5.<examples.FizzBuzz$1: void <init>()>();
r19 = virtualinvoke $r4.<joinery.DataFrame: joinery.DataFrame transform(joinery.DataFrame$RowFunction)>($r5);
$r7 = <java.lang.System: java.io.PrintStream out>;
$r6 = newarray (java.lang.Object)[1];
$r6[0] = \"value\";
$r8 = virtualinvoke r19.<joinery.DataFrame: joinery.DataFrame groupBy(java.lang.Object[])>($r6);
$r9 = virtualinvoke $r8.<joinery.DataFrame: joinery.DataFrame count()>();
$r10 = newarray (java.lang.Object)[1];
$r10[0] = \"-number\";
$r11 = virtualinvoke $r9.<joinery.DataFrame: joinery.DataFrame sortBy(java.lang.Object[])>($r10);
$r12 = virtualinvoke $r11.<joinery.DataFrame: joinery.DataFrame head(int)>(3);
$r13 = virtualinvoke $r12.<joinery.DataFrame: joinery.DataFrame resetIndex()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.Object)>($r13);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r18 := @parameter0: java.lang.String[];
$r0 = new joinery.DataFrame;
specialinvoke $r0.<joinery.DataFrame: void <init>()>();
$r1 = newarray (java.lang.Object)[1];
$r1[0] = \"number\";
r2 = virtualinvoke $r0.<joinery.DataFrame: joinery.DataFrame add(java.lang.Object[])>($r1);
i0 = 1;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 > 100 goto $r3 = newarray (java.lang.Object)[1];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 > 100 goto $r3 = newarray (java.lang.Object)[1];
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r14 = newarray (java.lang.Integer)[1];
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r14[0] = $r15;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);
virtualinvoke r2.<joinery.DataFrame: joinery.DataFrame append(java.util.List)>($r16);
i0 = i0 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 > 100 goto $r3 = newarray (java.lang.Object)[1];
"->"Block 3:
[preds: 1 ] [succs: ]
$r3 = newarray (java.lang.Object)[1];
$r3[0] = \"value\";
$r4 = virtualinvoke r2.<joinery.DataFrame: joinery.DataFrame add(java.lang.Object[])>($r3);
$r5 = new examples.FizzBuzz$1;
specialinvoke $r5.<examples.FizzBuzz$1: void <init>()>();
r19 = virtualinvoke $r4.<joinery.DataFrame: joinery.DataFrame transform(joinery.DataFrame$RowFunction)>($r5);
$r7 = <java.lang.System: java.io.PrintStream out>;
$r6 = newarray (java.lang.Object)[1];
$r6[0] = \"value\";
$r8 = virtualinvoke r19.<joinery.DataFrame: joinery.DataFrame groupBy(java.lang.Object[])>($r6);
$r9 = virtualinvoke $r8.<joinery.DataFrame: joinery.DataFrame count()>();
$r10 = newarray (java.lang.Object)[1];
$r10[0] = \"-number\";
$r11 = virtualinvoke $r9.<joinery.DataFrame: joinery.DataFrame sortBy(java.lang.Object[])>($r10);
$r12 = virtualinvoke $r11.<joinery.DataFrame: joinery.DataFrame head(int)>(3);
$r13 = virtualinvoke $r12.<joinery.DataFrame: joinery.DataFrame resetIndex()>();
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.Object)>($r13);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r14 = newarray (java.lang.Integer)[1];
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
$r14[0] = $r15;
$r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);
virtualinvoke r2.<joinery.DataFrame: joinery.DataFrame append(java.util.List)>($r16);
i0 = i0 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i0 > 100 goto $r3 = newarray (java.lang.Object)[1];
";
}
