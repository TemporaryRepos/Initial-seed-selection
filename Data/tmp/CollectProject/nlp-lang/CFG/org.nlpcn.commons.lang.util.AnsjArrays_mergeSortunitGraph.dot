digraph "unitGraph" {
    "r1 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[]"
    "r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[]"
    "i17 := @parameter2: int"
    "i18 := @parameter3: int"
    "i1 := @parameter4: int"
    "i0 = i18 - i17"
    "if i0 >= 7 goto i21 = i17"
    "i19 = i17"
    "if i19 >= i18 goto return"
    "i20 = i19"
    "if i20 <= i17 goto i19 = i19 + 1"
    "$i13 = i20 - 1"
    "$r9 = r0[$i13]"
    "$r8 = r0[i20]"
    "$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"
    "$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14)"
    "if $i15 <= 0 goto i19 = i19 + 1"
    "$i16 = i20 - 1"
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16)"
    "i20 = i20 + -1"
    "goto [?= (branch)]"
    "i19 = i19 + 1"
    "return"
    "i21 = i17"
    "i22 = i18"
    "i23 = i17 + i1"
    "i24 = i18 + i1"
    "$i2 = i23 + i24"
    "i3 = $i2 >>> 1"
    "$i4 = neg i1"
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4)"
    "$i5 = neg i1"
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5)"
    "$i6 = i3 - 1"
    "$r3 = r1[$i6]"
    "$r2 = r1[i3]"
    "$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"
    "$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7)"
    "if $i8 > 0 goto i25 = i21"
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i23, r0, i21, i0)"
    "i25 = i21"
    "i26 = i23"
    "i27 = i3"
    "if i25 >= i22 goto return"
    "if i27 >= i24 goto $i9 = i26"
    "if i26 >= i3 goto $i10 = i27"
    "$r7 = r1[i26]"
    "$r6 = r1[i27]"
    "$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"
    "$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11)"
    "if $i12 > 0 goto $i10 = i27"
    "$i9 = i26"
    "i26 = i26 + 1"
    "$r4 = r1[$i9]"
    "r0[i25] = $r4"
    "goto [?= i25 = i25 + 1]"
    "$i10 = i27"
    "i27 = i27 + 1"
    "$r5 = r1[$i10]"
    "r0[i25] = $r5"
    "i25 = i25 + 1"
    "r1 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[]"->"r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[]";
    "r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[]"->"i17 := @parameter2: int";
    "i17 := @parameter2: int"->"i18 := @parameter3: int";
    "i18 := @parameter3: int"->"i1 := @parameter4: int";
    "i1 := @parameter4: int"->"i0 = i18 - i17";
    "i0 = i18 - i17"->"if i0 >= 7 goto i21 = i17";
    "if i0 >= 7 goto i21 = i17"->"i19 = i17";
    "if i0 >= 7 goto i21 = i17"->"i21 = i17";
    "i19 = i17"->"if i19 >= i18 goto return";
    "if i19 >= i18 goto return"->"i20 = i19";
    "if i19 >= i18 goto return"->"return";
    "i20 = i19"->"if i20 <= i17 goto i19 = i19 + 1";
    "if i20 <= i17 goto i19 = i19 + 1"->"$i13 = i20 - 1";
    "if i20 <= i17 goto i19 = i19 + 1"->"i19 = i19 + 1";
    "$i13 = i20 - 1"->"$r9 = r0[$i13]";
    "$r9 = r0[$i13]"->"$r8 = r0[i20]";
    "$r8 = r0[i20]"->"$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()";
    "$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"->"$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14)";
    "$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14)"->"if $i15 <= 0 goto i19 = i19 + 1";
    "if $i15 <= 0 goto i19 = i19 + 1"->"$i16 = i20 - 1";
    "if $i15 <= 0 goto i19 = i19 + 1"->"i19 = i19 + 1";
    "$i16 = i20 - 1"->"staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16)";
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16)"->"i20 = i20 + -1";
    "i20 = i20 + -1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i20 <= i17 goto i19 = i19 + 1";
    "i19 = i19 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i19 >= i18 goto return";
    "i21 = i17"->"i22 = i18";
    "i22 = i18"->"i23 = i17 + i1";
    "i23 = i17 + i1"->"i24 = i18 + i1";
    "i24 = i18 + i1"->"$i2 = i23 + i24";
    "$i2 = i23 + i24"->"i3 = $i2 >>> 1";
    "i3 = $i2 >>> 1"->"$i4 = neg i1";
    "$i4 = neg i1"->"staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4)";
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4)"->"$i5 = neg i1";
    "$i5 = neg i1"->"staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5)";
    "staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5)"->"$i6 = i3 - 1";
    "$i6 = i3 - 1"->"$r3 = r1[$i6]";
    "$r3 = r1[$i6]"->"$r2 = r1[i3]";
    "$r2 = r1[i3]"->"$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()";
    "$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"->"$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7)";
    "$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7)"->"if $i8 > 0 goto i25 = i21";
    "if $i8 > 0 goto i25 = i21"->"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i23, r0, i21, i0)";
    "if $i8 > 0 goto i25 = i21"->"i25 = i21";
    "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i23, r0, i21, i0)"->"return";
    "i25 = i21"->"i26 = i23";
    "i26 = i23"->"i27 = i3";
    "i27 = i3"->"if i25 >= i22 goto return";
    "if i25 >= i22 goto return"->"if i27 >= i24 goto $i9 = i26";
    "if i25 >= i22 goto return"->"return";
    "if i27 >= i24 goto $i9 = i26"->"if i26 >= i3 goto $i10 = i27";
    "if i27 >= i24 goto $i9 = i26"->"$i9 = i26";
    "if i26 >= i3 goto $i10 = i27"->"$r7 = r1[i26]";
    "if i26 >= i3 goto $i10 = i27"->"$i10 = i27";
    "$r7 = r1[i26]"->"$r6 = r1[i27]";
    "$r6 = r1[i27]"->"$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()";
    "$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>()"->"$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11)";
    "$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11)"->"if $i12 > 0 goto $i10 = i27";
    "if $i12 > 0 goto $i10 = i27"->"$i9 = i26";
    "if $i12 > 0 goto $i10 = i27"->"$i10 = i27";
    "$i9 = i26"->"i26 = i26 + 1";
    "i26 = i26 + 1"->"$r4 = r1[$i9]";
    "$r4 = r1[$i9]"->"r0[i25] = $r4";
    "r0[i25] = $r4"->"goto [?= i25 = i25 + 1]";
    "goto [?= i25 = i25 + 1]"->"i25 = i25 + 1";
    "$i10 = i27"->"i27 = i27 + 1";
    "i27 = i27 + 1"->"$r5 = r1[$i10]";
    "$r5 = r1[$i10]"->"r0[i25] = $r5";
    "r0[i25] = $r5"->"i25 = i25 + 1";
    "i25 = i25 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i25 >= i22 goto return";
}
