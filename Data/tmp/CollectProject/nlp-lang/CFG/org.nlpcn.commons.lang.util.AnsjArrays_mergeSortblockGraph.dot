digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 9 ]
r1 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[];
i17 := @parameter2: int;
i18 := @parameter3: int;
i1 := @parameter4: int;
i0 = i18 - i17;
if i0 >= 7 goto i21 = i17;
"
    "Block 1:
[preds: 0 ] [succs: 2 ]
i19 = i17;
"
    "Block 2:
[preds: 1 7 ] [succs: 3 8 ]
if i19 >= i18 goto return;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
i20 = i19;
"
    "Block 4:
[preds: 3 6 ] [succs: 5 7 ]
if i20 <= i17 goto i19 = i19 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i13 = i20 - 1;
$r9 = r0[$i13];
$r8 = r0[i20];
$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14);
if $i15 <= 0 goto i19 = i19 + 1;
"
    "Block 6:
[preds: 5 ] [succs: 4 ]
$i16 = i20 - 1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16);
i20 = i20 + -1;
goto [?= (branch)];
"
    "Block 7:
[preds: 4 5 ] [succs: 2 ]
i19 = i19 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 2 ] [succs: ]
return;
"
    "Block 9:
[preds: 0 ] [succs: 10 11 ]
i21 = i17;
i22 = i18;
i23 = i17 + i1;
i24 = i18 + i1;
$i2 = i23 + i24;
i3 = $i2 >>> 1;
$i4 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4);
$i5 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5);
$i6 = i3 - 1;
$r3 = r1[$i6];
$r2 = r1[i3];
$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7);
if $i8 > 0 goto i25 = i21;
"
    "Block 10:
[preds: 9 ] [succs: ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i23, r0, i21, i0);
return;
"
    "Block 11:
[preds: 9 ] [succs: 12 ]
i25 = i21;
i26 = i23;
i27 = i3;
"
    "Block 12:
[preds: 11 18 ] [succs: 13 19 ]
if i25 >= i22 goto return;
"
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
if i27 >= i24 goto $i9 = i26;
"
    "Block 14:
[preds: 13 ] [succs: 15 17 ]
if i26 >= i3 goto $i10 = i27;
"
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
$r7 = r1[i26];
$r6 = r1[i27];
$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11);
if $i12 > 0 goto $i10 = i27;
"
    "Block 16:
[preds: 13 15 ] [succs: 18 ]
$i9 = i26;
i26 = i26 + 1;
$r4 = r1[$i9];
r0[i25] = $r4;
goto [?= i25 = i25 + 1];
"
    "Block 17:
[preds: 14 15 ] [succs: 18 ]
$i10 = i27;
i27 = i27 + 1;
$r5 = r1[$i10];
r0[i25] = $r5;
"
    "Block 18:
[preds: 16 17 ] [succs: 12 ]
i25 = i25 + 1;
goto [?= (branch)];
"
    "Block 19:
[preds: 12 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 9 ]
r1 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[];
i17 := @parameter2: int;
i18 := @parameter3: int;
i1 := @parameter4: int;
i0 = i18 - i17;
if i0 >= 7 goto i21 = i17;
"->"Block 1:
[preds: 0 ] [succs: 2 ]
i19 = i17;
";
    "Block 0:
[preds: ] [succs: 1 9 ]
r1 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
r0 := @parameter1: org.nlpcn.commons.lang.tire.domain.SmartForest[];
i17 := @parameter2: int;
i18 := @parameter3: int;
i1 := @parameter4: int;
i0 = i18 - i17;
if i0 >= 7 goto i21 = i17;
"->"Block 9:
[preds: 0 ] [succs: 10 11 ]
i21 = i17;
i22 = i18;
i23 = i17 + i1;
i24 = i18 + i1;
$i2 = i23 + i24;
i3 = $i2 >>> 1;
$i4 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4);
$i5 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5);
$i6 = i3 - 1;
$r3 = r1[$i6];
$r2 = r1[i3];
$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7);
if $i8 > 0 goto i25 = i21;
";
    "Block 1:
[preds: 0 ] [succs: 2 ]
i19 = i17;
"->"Block 2:
[preds: 1 7 ] [succs: 3 8 ]
if i19 >= i18 goto return;
";
    "Block 2:
[preds: 1 7 ] [succs: 3 8 ]
if i19 >= i18 goto return;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
i20 = i19;
";
    "Block 2:
[preds: 1 7 ] [succs: 3 8 ]
if i19 >= i18 goto return;
"->"Block 8:
[preds: 2 ] [succs: ]
return;
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
i20 = i19;
"->"Block 4:
[preds: 3 6 ] [succs: 5 7 ]
if i20 <= i17 goto i19 = i19 + 1;
";
    "Block 4:
[preds: 3 6 ] [succs: 5 7 ]
if i20 <= i17 goto i19 = i19 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
$i13 = i20 - 1;
$r9 = r0[$i13];
$r8 = r0[i20];
$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14);
if $i15 <= 0 goto i19 = i19 + 1;
";
    "Block 4:
[preds: 3 6 ] [succs: 5 7 ]
if i20 <= i17 goto i19 = i19 + 1;
"->"Block 7:
[preds: 4 5 ] [succs: 2 ]
i19 = i19 + 1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i13 = i20 - 1;
$r9 = r0[$i13];
$r8 = r0[i20];
$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14);
if $i15 <= 0 goto i19 = i19 + 1;
"->"Block 6:
[preds: 5 ] [succs: 4 ]
$i16 = i20 - 1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16);
i20 = i20 + -1;
goto [?= (branch)];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
$i13 = i20 - 1;
$r9 = r0[$i13];
$r8 = r0[i20];
$c14 = virtualinvoke $r8.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i15 = virtualinvoke $r9.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c14);
if $i15 <= 0 goto i19 = i19 + 1;
"->"Block 7:
[preds: 4 5 ] [succs: 2 ]
i19 = i19 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 ] [succs: 4 ]
$i16 = i20 - 1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void swap(org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int)>(r0, i20, $i16);
i20 = i20 + -1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 6 ] [succs: 5 7 ]
if i20 <= i17 goto i19 = i19 + 1;
";
    "Block 7:
[preds: 4 5 ] [succs: 2 ]
i19 = i19 + 1;
goto [?= (branch)];
"->"Block 2:
[preds: 1 7 ] [succs: 3 8 ]
if i19 >= i18 goto return;
";
    "Block 9:
[preds: 0 ] [succs: 10 11 ]
i21 = i17;
i22 = i18;
i23 = i17 + i1;
i24 = i18 + i1;
$i2 = i23 + i24;
i3 = $i2 >>> 1;
$i4 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4);
$i5 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5);
$i6 = i3 - 1;
$r3 = r1[$i6];
$r2 = r1[i3];
$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7);
if $i8 > 0 goto i25 = i21;
"->"Block 10:
[preds: 9 ] [succs: ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i23, r0, i21, i0);
return;
";
    "Block 9:
[preds: 0 ] [succs: 10 11 ]
i21 = i17;
i22 = i18;
i23 = i17 + i1;
i24 = i18 + i1;
$i2 = i23 + i24;
i3 = $i2 >>> 1;
$i4 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i23, i3, $i4);
$i5 = neg i1;
staticinvoke <org.nlpcn.commons.lang.util.AnsjArrays: void mergeSort(org.nlpcn.commons.lang.tire.domain.SmartForest[],org.nlpcn.commons.lang.tire.domain.SmartForest[],int,int,int)>(r0, r1, i3, i24, $i5);
$i6 = i3 - 1;
$r3 = r1[$i6];
$r2 = r1[i3];
$c7 = virtualinvoke $r2.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i8 = virtualinvoke $r3.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c7);
if $i8 > 0 goto i25 = i21;
"->"Block 11:
[preds: 9 ] [succs: 12 ]
i25 = i21;
i26 = i23;
i27 = i3;
";
    "Block 11:
[preds: 9 ] [succs: 12 ]
i25 = i21;
i26 = i23;
i27 = i3;
"->"Block 12:
[preds: 11 18 ] [succs: 13 19 ]
if i25 >= i22 goto return;
";
    "Block 12:
[preds: 11 18 ] [succs: 13 19 ]
if i25 >= i22 goto return;
"->"Block 13:
[preds: 12 ] [succs: 14 16 ]
if i27 >= i24 goto $i9 = i26;
";
    "Block 12:
[preds: 11 18 ] [succs: 13 19 ]
if i25 >= i22 goto return;
"->"Block 19:
[preds: 12 ] [succs: ]
return;
";
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
if i27 >= i24 goto $i9 = i26;
"->"Block 14:
[preds: 13 ] [succs: 15 17 ]
if i26 >= i3 goto $i10 = i27;
";
    "Block 13:
[preds: 12 ] [succs: 14 16 ]
if i27 >= i24 goto $i9 = i26;
"->"Block 16:
[preds: 13 15 ] [succs: 18 ]
$i9 = i26;
i26 = i26 + 1;
$r4 = r1[$i9];
r0[i25] = $r4;
goto [?= i25 = i25 + 1];
";
    "Block 14:
[preds: 13 ] [succs: 15 17 ]
if i26 >= i3 goto $i10 = i27;
"->"Block 15:
[preds: 14 ] [succs: 16 17 ]
$r7 = r1[i26];
$r6 = r1[i27];
$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11);
if $i12 > 0 goto $i10 = i27;
";
    "Block 14:
[preds: 13 ] [succs: 15 17 ]
if i26 >= i3 goto $i10 = i27;
"->"Block 17:
[preds: 14 15 ] [succs: 18 ]
$i10 = i27;
i27 = i27 + 1;
$r5 = r1[$i10];
r0[i25] = $r5;
";
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
$r7 = r1[i26];
$r6 = r1[i27];
$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11);
if $i12 > 0 goto $i10 = i27;
"->"Block 16:
[preds: 13 15 ] [succs: 18 ]
$i9 = i26;
i26 = i26 + 1;
$r4 = r1[$i9];
r0[i25] = $r4;
goto [?= i25 = i25 + 1];
";
    "Block 15:
[preds: 14 ] [succs: 16 17 ]
$r7 = r1[i26];
$r6 = r1[i27];
$c11 = virtualinvoke $r6.<org.nlpcn.commons.lang.tire.domain.SmartForest: char getC()>();
$i12 = virtualinvoke $r7.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>($c11);
if $i12 > 0 goto $i10 = i27;
"->"Block 17:
[preds: 14 15 ] [succs: 18 ]
$i10 = i27;
i27 = i27 + 1;
$r5 = r1[$i10];
r0[i25] = $r5;
";
    "Block 16:
[preds: 13 15 ] [succs: 18 ]
$i9 = i26;
i26 = i26 + 1;
$r4 = r1[$i9];
r0[i25] = $r4;
goto [?= i25 = i25 + 1];
"->"Block 18:
[preds: 16 17 ] [succs: 12 ]
i25 = i25 + 1;
goto [?= (branch)];
";
    "Block 17:
[preds: 14 15 ] [succs: 18 ]
$i10 = i27;
i27 = i27 + 1;
$r5 = r1[$i10];
r0[i25] = $r5;
"->"Block 18:
[preds: 16 17 ] [succs: 12 ]
i25 = i25 + 1;
goto [?= (branch)];
";
    "Block 18:
[preds: 16 17 ] [succs: 12 ]
i25 = i25 + 1;
goto [?= (branch)];
"->"Block 12:
[preds: 11 18 ] [succs: 13 19 ]
if i25 >= i22 goto return;
";
}
