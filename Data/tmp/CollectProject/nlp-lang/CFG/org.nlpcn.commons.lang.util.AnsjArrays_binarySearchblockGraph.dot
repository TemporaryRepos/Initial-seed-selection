digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
c6 := @parameter1: char;
$i0 = lengthof r0;
i8 = $i0 - 1;
$i1 = lengthof r0;
if $i1 >= 1 goto i9 = 0;
"
    "Block 1:
[preds: 0 ] [succs: ]
return i8;
"
    "Block 2:
[preds: 0 ] [succs: 3 ]
i9 = 0;
"
    "Block 3:
[preds: 2 9 ] [succs: 4 10 ]
if i9 > i8 goto $i2 = i9 + 1;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = i9 + i8;
i5 = $i4 >>> 1;
$r1 = r0[i5];
i7 = virtualinvoke $r1.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>(c6);
if i7 >= 0 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 9 ]
i9 = i5 + 1;
goto [?= (branch)];
"
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
if i7 <= 0 goto return i5;
"
    "Block 7:
[preds: 6 ] [succs: 9 ]
i8 = i5 - 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 6 ] [succs: ]
return i5;
"
    "Block 9:
[preds: 5 7 ] [succs: 3 ]
goto [?= (branch)];
"
    "Block 10:
[preds: 3 ] [succs: ]
$i2 = i9 + 1;
$i3 = neg $i2;
return $i3;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
c6 := @parameter1: char;
$i0 = lengthof r0;
i8 = $i0 - 1;
$i1 = lengthof r0;
if $i1 >= 1 goto i9 = 0;
"->"Block 1:
[preds: 0 ] [succs: ]
return i8;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r0 := @parameter0: org.nlpcn.commons.lang.tire.domain.SmartForest[];
c6 := @parameter1: char;
$i0 = lengthof r0;
i8 = $i0 - 1;
$i1 = lengthof r0;
if $i1 >= 1 goto i9 = 0;
"->"Block 2:
[preds: 0 ] [succs: 3 ]
i9 = 0;
";
    "Block 2:
[preds: 0 ] [succs: 3 ]
i9 = 0;
"->"Block 3:
[preds: 2 9 ] [succs: 4 10 ]
if i9 > i8 goto $i2 = i9 + 1;
";
    "Block 3:
[preds: 2 9 ] [succs: 4 10 ]
if i9 > i8 goto $i2 = i9 + 1;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = i9 + i8;
i5 = $i4 >>> 1;
$r1 = r0[i5];
i7 = virtualinvoke $r1.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>(c6);
if i7 >= 0 goto (branch);
";
    "Block 3:
[preds: 2 9 ] [succs: 4 10 ]
if i9 > i8 goto $i2 = i9 + 1;
"->"Block 10:
[preds: 3 ] [succs: ]
$i2 = i9 + 1;
$i3 = neg $i2;
return $i3;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = i9 + i8;
i5 = $i4 >>> 1;
$r1 = r0[i5];
i7 = virtualinvoke $r1.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>(c6);
if i7 >= 0 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 9 ]
i9 = i5 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$i4 = i9 + i8;
i5 = $i4 >>> 1;
$r1 = r0[i5];
i7 = virtualinvoke $r1.<org.nlpcn.commons.lang.tire.domain.SmartForest: int compareTo(char)>(c6);
if i7 >= 0 goto (branch);
"->"Block 6:
[preds: 4 ] [succs: 7 8 ]
if i7 <= 0 goto return i5;
";
    "Block 5:
[preds: 4 ] [succs: 9 ]
i9 = i5 + 1;
goto [?= (branch)];
"->"Block 9:
[preds: 5 7 ] [succs: 3 ]
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
if i7 <= 0 goto return i5;
"->"Block 7:
[preds: 6 ] [succs: 9 ]
i8 = i5 - 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 4 ] [succs: 7 8 ]
if i7 <= 0 goto return i5;
"->"Block 8:
[preds: 6 ] [succs: ]
return i5;
";
    "Block 7:
[preds: 6 ] [succs: 9 ]
i8 = i5 - 1;
goto [?= (branch)];
"->"Block 9:
[preds: 5 7 ] [succs: 3 ]
goto [?= (branch)];
";
    "Block 9:
[preds: 5 7 ] [succs: 3 ]
goto [?= (branch)];
"->"Block 3:
[preds: 2 9 ] [succs: 4 10 ]
if i9 > i8 goto $i2 = i9 + 1;
";
}
