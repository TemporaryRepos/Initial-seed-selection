digraph "unitGraph" {
    "r22 := @this: com.flaptor.indextank.index.IndexEngine"
    "r0 := @parameter0: java.util.Map"
    "$r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"factory\")"
    "r2 = (java.lang.String) $r1"
    "$r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"configuration\")"
    "r4 = (java.util.Map) $r3"
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"
    "$r5 = newarray (java.lang.Class)[1]"
    "$r5[0] = class \"Ljava/util/Map;\""
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"
    "$r7 = newarray (java.lang.Object)[1]"
    "$r7[0] = r4"
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"
    "if $z0 == 0 goto (branch)"
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"
    "r24 = $r9"
    "goto [?= return r24]"
    "$r20 := @caughtexception"
    "r25 = $r20"
    "$r21 = new java.lang.RuntimeException"
    "specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not found\", r25)"
    "throw $r21"
    "$r18 := @caughtexception"
    "r26 = $r18"
    "$r19 = new java.lang.RuntimeException"
    "specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not instantiable\", r26)"
    "throw $r19"
    "$r16 := @caughtexception"
    "r27 = $r16"
    "$r17 = new java.lang.RuntimeException"
    "specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r27)"
    "throw $r17"
    "$r14 := @caughtexception"
    "r28 = $r14"
    "$r15 = new java.lang.RuntimeException"
    "specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r28)"
    "throw $r15"
    "$r12 := @caughtexception"
    "r29 = $r12"
    "$r13 = new java.lang.RuntimeException"
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer or it is not accessible\", r29)"
    "throw $r13"
    "$r10 := @caughtexception"
    "r30 = $r10"
    "$r11 = new java.lang.RuntimeException"
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class threw an exception for the give configuration\", r30)"
    "throw $r11"
    "return r24"
    "r22 := @this: com.flaptor.indextank.index.IndexEngine"->"r0 := @parameter0: java.util.Map";
    "r0 := @parameter0: java.util.Map"->"$r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"factory\")";
    "$r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"factory\")"->"r2 = (java.lang.String) $r1";
    "r2 = (java.lang.String) $r1"->"$r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"configuration\")";
    "$r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(\"configuration\")"->"r4 = (java.util.Map) $r3";
    "r4 = (java.util.Map) $r3"->"$r20 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"$r18 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"$r16 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"$r14 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"$r12 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"$r10 := @caughtexception";
    "r4 = (java.util.Map) $r3"->"r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r20 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r18 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r16 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r14 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r12 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r10 := @caughtexception";
    "r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)"->"$r5 = newarray (java.lang.Class)[1]";
    "$r5 = newarray (java.lang.Class)[1]"->"$r20 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r18 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r16 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r14 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r12 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r10 := @caughtexception";
    "$r5 = newarray (java.lang.Class)[1]"->"$r5[0] = class \"Ljava/util/Map;\"";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r20 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r18 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r16 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r14 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r12 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"$r10 := @caughtexception";
    "$r5[0] = class \"Ljava/util/Map;\""->"r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r20 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r18 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r16 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r14 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r12 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r10 := @caughtexception";
    "r6 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(\"buildAnalyzer\", $r5)"->"$r7 = newarray (java.lang.Object)[1]";
    "$r7 = newarray (java.lang.Object)[1]"->"$r20 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r18 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r16 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r14 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r12 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r10 := @caughtexception";
    "$r7 = newarray (java.lang.Object)[1]"->"$r7[0] = r4";
    "$r7[0] = r4"->"$r20 := @caughtexception";
    "$r7[0] = r4"->"$r18 := @caughtexception";
    "$r7[0] = r4"->"$r16 := @caughtexception";
    "$r7[0] = r4"->"$r14 := @caughtexception";
    "$r7[0] = r4"->"$r12 := @caughtexception";
    "$r7[0] = r4"->"$r10 := @caughtexception";
    "$r7[0] = r4"->"$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r20 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r18 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r16 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r14 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r12 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"$r10 := @caughtexception";
    "$r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7)"->"r24 = (org.apache.lucene.analysis.Analyzer) $r8";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r20 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r18 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r16 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r14 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r12 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$r10 := @caughtexception";
    "r24 = (org.apache.lucene.analysis.Analyzer) $r8"->"$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r20 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r18 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r16 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r14 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r12 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"$r10 := @caughtexception";
    "$z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(\"filters\")"->"if $z0 == 0 goto (branch)";
    "if $z0 == 0 goto (branch)"->"$r20 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r18 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r16 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r14 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r12 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r10 := @caughtexception";
    "if $z0 == 0 goto (branch)"->"$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer";
    "if $z0 == 0 goto (branch)"->"goto [?= return r24]";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r20 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r18 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r16 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r14 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r12 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"$r10 := @caughtexception";
    "$r9 = new com.flaptor.indextank.query.analyzers.FilteringAnalyzer"->"specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r20 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r18 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r16 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r14 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r12 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"$r10 := @caughtexception";
    "specialinvoke $r9.<com.flaptor.indextank.query.analyzers.FilteringAnalyzer: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r24, r4)"->"r24 = $r9";
    "r24 = $r9"->"$r20 := @caughtexception";
    "r24 = $r9"->"$r18 := @caughtexception";
    "r24 = $r9"->"$r16 := @caughtexception";
    "r24 = $r9"->"$r14 := @caughtexception";
    "r24 = $r9"->"$r12 := @caughtexception";
    "r24 = $r9"->"$r10 := @caughtexception";
    "r24 = $r9"->"goto [?= return r24]";
    "goto [?= return r24]"->"return r24";
    "$r20 := @caughtexception"->"r25 = $r20";
    "r25 = $r20"->"$r21 = new java.lang.RuntimeException";
    "$r21 = new java.lang.RuntimeException"->"specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not found\", r25)";
    "specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not found\", r25)"->"throw $r21";
    "$r18 := @caughtexception"->"r26 = $r18";
    "r26 = $r18"->"$r19 = new java.lang.RuntimeException";
    "$r19 = new java.lang.RuntimeException"->"specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not instantiable\", r26)";
    "specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class not instantiable\", r26)"->"throw $r19";
    "$r16 := @caughtexception"->"r27 = $r16";
    "r27 = $r16"->"$r17 = new java.lang.RuntimeException";
    "$r17 = new java.lang.RuntimeException"->"specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r27)";
    "specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r27)"->"throw $r17";
    "$r14 := @caughtexception"->"r28 = $r14";
    "r28 = $r14"->"$r15 = new java.lang.RuntimeException";
    "$r15 = new java.lang.RuntimeException"->"specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r28)";
    "specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer\", r28)"->"throw $r15";
    "$r12 := @caughtexception"->"r29 = $r12";
    "r29 = $r12"->"$r13 = new java.lang.RuntimeException";
    "$r13 = new java.lang.RuntimeException"->"specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer or it is not accessible\", r29)";
    "specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class does not have the required static method buildAnalyzer or it is not accessible\", r29)"->"throw $r13";
    "$r10 := @caughtexception"->"r30 = $r10";
    "r30 = $r10"->"$r11 = new java.lang.RuntimeException";
    "$r11 = new java.lang.RuntimeException"->"specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class threw an exception for the give configuration\", r30)";
    "specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(\"Analyzer factory class threw an exception for the give configuration\", r30)"->"throw $r11";
}
