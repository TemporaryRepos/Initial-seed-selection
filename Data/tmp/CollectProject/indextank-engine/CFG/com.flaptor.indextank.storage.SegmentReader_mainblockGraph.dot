digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String[];
r1 = r0;
i0 = lengthof r1;
i3 = 0;
"
    "Block 1:
[preds: 0 9 ] [succs: 2 10 ]
if i3 >= i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i3];
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r2);
$r4 = new com.flaptor.indextank.storage.Segment;
$r5 = new com.flaptor.indextank.storage.LogRoot;
specialinvoke $r5.<com.flaptor.indextank.storage.LogRoot: void <init>()>();
$r6 = new java.io.File;
specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);
specialinvoke $r4.<com.flaptor.indextank.storage.Segment: void <init>(com.flaptor.indextank.storage.LogRoot,java.io.File)>($r5, $r6);
r7 = $r4;
l4 = 0L;
l5 = 0L;
$r8 = virtualinvoke r7.<com.flaptor.indextank.storage.Segment: com.flaptor.indextank.storage.SegmentReader reader()>();
r9 = virtualinvoke $r8.<com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.storage.RecordIterator iterator()>();
"
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $b1 = l4 cmp 0L;
"
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r26 = (com.flaptor.indextank.rpc.LogRecord) $r25;
$l2 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: long get_timestamp_ms()>();
l5 = staticinvoke <java.lang.Math: long max(long,long)>(l5, $l2);
$z1 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: boolean is_set_docid()>();
if $z1 != 0 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
l4 = l4 + 1L;
"
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 7:
[preds: 3 ] [succs: 8 9 ]
$b1 = l4 cmp 0L;
if $b1 <= 0 goto i3 = i3 + 1;
"
    "Block 8:
[preds: 7 ] [succs: 9 ]
$r11 = <com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.util.FormatLogger alertLogger>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
$r17 = newarray (java.lang.Object)[0];
virtualinvoke $r11.<com.flaptor.indextank.util.FormatLogger: void warn(java.lang.String,java.lang.Object[])>($r16, $r17);
$r19 = <java.lang.System: java.io.PrintStream out>;
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);
"
    "Block 9:
[preds: 7 8 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"
    "Block 10:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String[];
r1 = r0;
i0 = lengthof r1;
i3 = 0;
"->"Block 1:
[preds: 0 9 ] [succs: 2 10 ]
if i3 >= i0 goto return;
";
    "Block 1:
[preds: 0 9 ] [succs: 2 10 ]
if i3 >= i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i3];
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r2);
$r4 = new com.flaptor.indextank.storage.Segment;
$r5 = new com.flaptor.indextank.storage.LogRoot;
specialinvoke $r5.<com.flaptor.indextank.storage.LogRoot: void <init>()>();
$r6 = new java.io.File;
specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);
specialinvoke $r4.<com.flaptor.indextank.storage.Segment: void <init>(com.flaptor.indextank.storage.LogRoot,java.io.File)>($r5, $r6);
r7 = $r4;
l4 = 0L;
l5 = 0L;
$r8 = virtualinvoke r7.<com.flaptor.indextank.storage.Segment: com.flaptor.indextank.storage.SegmentReader reader()>();
r9 = virtualinvoke $r8.<com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.storage.RecordIterator iterator()>();
";
    "Block 1:
[preds: 0 9 ] [succs: 2 10 ]
if i3 >= i0 goto return;
"->"Block 10:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
r2 = r1[i3];
$r3 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r2);
$r4 = new com.flaptor.indextank.storage.Segment;
$r5 = new com.flaptor.indextank.storage.LogRoot;
specialinvoke $r5.<com.flaptor.indextank.storage.LogRoot: void <init>()>();
$r6 = new java.io.File;
specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);
specialinvoke $r4.<com.flaptor.indextank.storage.Segment: void <init>(com.flaptor.indextank.storage.LogRoot,java.io.File)>($r5, $r6);
r7 = $r4;
l4 = 0L;
l5 = 0L;
$r8 = virtualinvoke r7.<com.flaptor.indextank.storage.Segment: com.flaptor.indextank.storage.SegmentReader reader()>();
r9 = virtualinvoke $r8.<com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.storage.RecordIterator iterator()>();
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $b1 = l4 cmp 0L;
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $b1 = l4 cmp 0L;
"->"Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r26 = (com.flaptor.indextank.rpc.LogRecord) $r25;
$l2 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: long get_timestamp_ms()>();
l5 = staticinvoke <java.lang.Math: long max(long,long)>(l5, $l2);
$z1 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: boolean is_set_docid()>();
if $z1 != 0 goto (branch);
";
    "Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $b1 = l4 cmp 0L;
"->"Block 7:
[preds: 3 ] [succs: 8 9 ]
$b1 = l4 cmp 0L;
if $b1 <= 0 goto i3 = i3 + 1;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r26 = (com.flaptor.indextank.rpc.LogRecord) $r25;
$l2 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: long get_timestamp_ms()>();
l5 = staticinvoke <java.lang.Math: long max(long,long)>(l5, $l2);
$z1 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: boolean is_set_docid()>();
if $z1 != 0 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 ]
l4 = l4 + 1L;
";
    "Block 4:
[preds: 3 ] [succs: 5 6 ]
$r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
r26 = (com.flaptor.indextank.rpc.LogRecord) $r25;
$l2 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: long get_timestamp_ms()>();
l5 = staticinvoke <java.lang.Math: long max(long,long)>(l5, $l2);
$z1 = virtualinvoke r26.<com.flaptor.indextank.rpc.LogRecord: boolean is_set_docid()>();
if $z1 != 0 goto (branch);
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
l4 = l4 + 1L;
"->"Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 6:
[preds: 4 5 ] [succs: 3 ]
goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()];
"->"Block 3:
[preds: 2 6 ] [succs: 4 7 ]
$z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $b1 = l4 cmp 0L;
";
    "Block 7:
[preds: 3 ] [succs: 8 9 ]
$b1 = l4 cmp 0L;
if $b1 <= 0 goto i3 = i3 + 1;
"->"Block 8:
[preds: 7 ] [succs: 9 ]
$r11 = <com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.util.FormatLogger alertLogger>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
$r17 = newarray (java.lang.Object)[0];
virtualinvoke $r11.<com.flaptor.indextank.util.FormatLogger: void warn(java.lang.String,java.lang.Object[])>($r16, $r17);
$r19 = <java.lang.System: java.io.PrintStream out>;
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);
";
    "Block 7:
[preds: 3 ] [succs: 8 9 ]
$b1 = l4 cmp 0L;
if $b1 <= 0 goto i3 = i3 + 1;
"->"Block 9:
[preds: 7 8 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 7 ] [succs: 9 ]
$r11 = <com.flaptor.indextank.storage.SegmentReader: com.flaptor.indextank.util.FormatLogger alertLogger>;
$r10 = new java.lang.StringBuilder;
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
$r17 = newarray (java.lang.Object)[0];
virtualinvoke $r11.<com.flaptor.indextank.util.FormatLogger: void warn(java.lang.String,java.lang.Object[])>($r16, $r17);
$r19 = <java.lang.System: java.io.PrintStream out>;
$r18 = new java.lang.StringBuilder;
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"=============================================> \");
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" : \");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);
"->"Block 9:
[preds: 7 8 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
";
    "Block 9:
[preds: 7 8 ] [succs: 1 ]
i3 = i3 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 9 ] [succs: 2 10 ]
if i3 >= i0 goto return;
";
}
