digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @this: act.util.FastJsonPropertyPreFilter;
r0 := @parameter0: java.util.Set;
r5 := @parameter1: java.lang.String;
z2 := @parameter2: boolean;
r1 = staticinvoke <act.util.FastJsonPropertyPreFilter: java.util.List spList(java.util.Collection)>(r0);
r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 11 ] [succs: 2 12 ]
$z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
r4 = (act.data.util.StringOrPattern) $r3;
$z1 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean matches(java.lang.String)>(r5);
if $z1 == 0 goto (branch);
"
    "Block 3:
[preds: 2 ] [succs: ]
return 1;
"
    "Block 4:
[preds: 2 ] [succs: 5 11 ]
if z2 != 0 goto (branch);
"
    "Block 5:
[preds: 4 ] [succs: 6 11 ]
$z3 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean isPattern()>();
if $z3 == 0 goto (branch);
"
    "Block 6:
[preds: 5 ] [succs: 7 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\\.)?\");
$r9 = virtualinvoke r4.<act.data.util.StringOrPattern: java.lang.String s()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r11);
$r14 = r13.<act.util.FastJsonPropertyPreFilter: java.util.List fullPaths>;
r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 7:
[preds: 6 10 ] [succs: 8 11 ]
$z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();
r17 = (java.lang.String) $r16;
$r18 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);
$z5 = virtualinvoke $r18.<java.util.regex.Matcher: boolean matches()>();
if $z5 == 0 goto (branch);
"
    "Block 9:
[preds: 8 ] [succs: ]
return 1;
"
    "Block 10:
[preds: 8 ] [succs: 7 ]
goto [?= $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 11:
[preds: 4 5 7 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 12:
[preds: 1 ] [succs: ]
return 0;
"
    "Block 0:
[preds: ] [succs: 1 ]
r13 := @this: act.util.FastJsonPropertyPreFilter;
r0 := @parameter0: java.util.Set;
r5 := @parameter1: java.lang.String;
z2 := @parameter2: boolean;
r1 = staticinvoke <act.util.FastJsonPropertyPreFilter: java.util.List spList(java.util.Collection)>(r0);
r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 11 ] [succs: 2 12 ]
$z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
";
    "Block 1:
[preds: 0 11 ] [succs: 2 12 ]
$z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
r4 = (act.data.util.StringOrPattern) $r3;
$z1 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean matches(java.lang.String)>(r5);
if $z1 == 0 goto (branch);
";
    "Block 1:
[preds: 0 11 ] [succs: 2 12 ]
$z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
"->"Block 12:
[preds: 1 ] [succs: ]
return 0;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
r4 = (act.data.util.StringOrPattern) $r3;
$z1 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean matches(java.lang.String)>(r5);
if $z1 == 0 goto (branch);
"->"Block 3:
[preds: 2 ] [succs: ]
return 1;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
r4 = (act.data.util.StringOrPattern) $r3;
$z1 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean matches(java.lang.String)>(r5);
if $z1 == 0 goto (branch);
"->"Block 4:
[preds: 2 ] [succs: 5 11 ]
if z2 != 0 goto (branch);
";
    "Block 4:
[preds: 2 ] [succs: 5 11 ]
if z2 != 0 goto (branch);
"->"Block 5:
[preds: 4 ] [succs: 6 11 ]
$z3 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean isPattern()>();
if $z3 == 0 goto (branch);
";
    "Block 4:
[preds: 2 ] [succs: 5 11 ]
if z2 != 0 goto (branch);
"->"Block 11:
[preds: 4 5 7 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 4 ] [succs: 6 11 ]
$z3 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean isPattern()>();
if $z3 == 0 goto (branch);
"->"Block 6:
[preds: 5 ] [succs: 7 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\\.)?\");
$r9 = virtualinvoke r4.<act.data.util.StringOrPattern: java.lang.String s()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r11);
$r14 = r13.<act.util.FastJsonPropertyPreFilter: java.util.List fullPaths>;
r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 5:
[preds: 4 ] [succs: 6 11 ]
$z3 = virtualinvoke r4.<act.data.util.StringOrPattern: boolean isPattern()>();
if $z3 == 0 goto (branch);
"->"Block 11:
[preds: 4 5 7 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 6:
[preds: 5 ] [succs: 7 ]
$r6 = new java.lang.StringBuilder;
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"(\\.)?\");
$r9 = virtualinvoke r4.<act.data.util.StringOrPattern: java.lang.String s()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r11);
$r14 = r13.<act.util.FastJsonPropertyPreFilter: java.util.List fullPaths>;
r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();
"->"Block 7:
[preds: 6 10 ] [succs: 8 11 ]
$z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
";
    "Block 7:
[preds: 6 10 ] [succs: 8 11 ]
$z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"->"Block 8:
[preds: 7 ] [succs: 9 10 ]
$r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();
r17 = (java.lang.String) $r16;
$r18 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);
$z5 = virtualinvoke $r18.<java.util.regex.Matcher: boolean matches()>();
if $z5 == 0 goto (branch);
";
    "Block 7:
[preds: 6 10 ] [succs: 8 11 ]
$z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
"->"Block 11:
[preds: 4 5 7 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();
r17 = (java.lang.String) $r16;
$r18 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);
$z5 = virtualinvoke $r18.<java.util.regex.Matcher: boolean matches()>();
if $z5 == 0 goto (branch);
"->"Block 9:
[preds: 8 ] [succs: ]
return 1;
";
    "Block 8:
[preds: 7 ] [succs: 9 10 ]
$r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();
r17 = (java.lang.String) $r16;
$r18 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);
$z5 = virtualinvoke $r18.<java.util.regex.Matcher: boolean matches()>();
if $z5 == 0 goto (branch);
"->"Block 10:
[preds: 8 ] [succs: 7 ]
goto [?= $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 10:
[preds: 8 ] [succs: 7 ]
goto [?= $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()];
"->"Block 7:
[preds: 6 10 ] [succs: 8 11 ]
$z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
if $z4 == 0 goto (branch);
";
    "Block 11:
[preds: 4 5 7 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 11 ] [succs: 2 12 ]
$z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return 0;
";
}
