digraph "unitGraph" {
    "r7 := @this: act.util.FastJsonPropertyPreFilter"
    "r8 := @parameter0: java.util.Set"
    "r0 := @parameter1: java.lang.String[]"
    "r1 = r0"
    "i0 = lengthof r1"
    "i2 = 0"
    "if i2 >= i0 goto return"
    "r2 = r1[i2]"
    "$z0 = staticinvoke <org.osgl.util.S: boolean blank(java.lang.String)>(r2)"
    "if $z0 == 0 goto $r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>"
    "goto [?= i2 = i2 + 1]"
    "$r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>"
    "r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r2)"
    "r5 = r4"
    "i1 = lengthof r5"
    "i3 = 0"
    "if i3 >= i1 goto i2 = i2 + 1"
    "r6 = r5[i3]"
    "specialinvoke r7.<act.util.FastJsonPropertyPreFilter: void addOneTo(java.util.Set,java.lang.String)>(r8, r6)"
    "i3 = i3 + 1"
    "goto [?= (branch)]"
    "i2 = i2 + 1"
    "return"
    "r7 := @this: act.util.FastJsonPropertyPreFilter"->"r8 := @parameter0: java.util.Set";
    "r8 := @parameter0: java.util.Set"->"r0 := @parameter1: java.lang.String[]";
    "r0 := @parameter1: java.lang.String[]"->"r1 = r0";
    "r1 = r0"->"i0 = lengthof r1";
    "i0 = lengthof r1"->"i2 = 0";
    "i2 = 0"->"if i2 >= i0 goto return";
    "if i2 >= i0 goto return"->"r2 = r1[i2]";
    "if i2 >= i0 goto return"->"return";
    "r2 = r1[i2]"->"$z0 = staticinvoke <org.osgl.util.S: boolean blank(java.lang.String)>(r2)";
    "$z0 = staticinvoke <org.osgl.util.S: boolean blank(java.lang.String)>(r2)"->"if $z0 == 0 goto $r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>";
    "if $z0 == 0 goto $r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>"->"goto [?= i2 = i2 + 1]";
    "if $z0 == 0 goto $r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>"->"$r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>";
    "goto [?= i2 = i2 + 1]"->"i2 = i2 + 1";
    "$r3 = <act.util.FastJsonPropertyPreFilter: java.util.regex.Pattern PROPERTY_SEPARATOR>"->"r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r2)";
    "r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r2)"->"r5 = r4";
    "r5 = r4"->"i1 = lengthof r5";
    "i1 = lengthof r5"->"i3 = 0";
    "i3 = 0"->"if i3 >= i1 goto i2 = i2 + 1";
    "if i3 >= i1 goto i2 = i2 + 1"->"r6 = r5[i3]";
    "if i3 >= i1 goto i2 = i2 + 1"->"i2 = i2 + 1";
    "r6 = r5[i3]"->"specialinvoke r7.<act.util.FastJsonPropertyPreFilter: void addOneTo(java.util.Set,java.lang.String)>(r8, r6)";
    "specialinvoke r7.<act.util.FastJsonPropertyPreFilter: void addOneTo(java.util.Set,java.lang.String)>(r8, r6)"->"i3 = i3 + 1";
    "i3 = i3 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i3 >= i1 goto i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= i0 goto return";
}
