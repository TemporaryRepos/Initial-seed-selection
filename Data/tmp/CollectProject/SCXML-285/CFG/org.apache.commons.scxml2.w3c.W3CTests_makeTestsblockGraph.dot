digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r12 := @this: org.apache.commons.scxml2.w3c.W3CTests;
$r0 = new java.io.File;
specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(\"src/w3c/scxml-irp/\");
r1 = $r0;
r2 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)>(\"net.sf.saxon.TransformerFactoryImpl\", null);
virtualinvoke r2.<javax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)>(\"http://saxon.sf.net/feature/suppressXsltNamespaceCheck\", 1);
$r3 = new java.util.HashMap;
specialinvoke $r3.<java.util.HashMap: void <init>()>();
r4 = $r3;
$r8 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel ECMA>;
$r5 = new javax.xml.transform.stream.StreamSource;
$r6 = new java.io.FileInputStream;
$r7 = new java.io.File;
specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, \"confEcma.xsl\");
specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r7);
specialinvoke $r5.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r6);
$r9 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r5);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);
$r13 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel MINIMAL>;
$r11 = new javax.xml.transform.stream.StreamSource;
$r14 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r15 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_MINIMAL_XSL_FILENAME>;
$r16 = virtualinvoke $r14.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r15);
specialinvoke $r11.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r16);
$r17 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r11);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r17);
$r20 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel JEXL>;
$r19 = new javax.xml.transform.stream.StreamSource;
$r21 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r22 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_JEXL_XSL_FILENAME>;
$r23 = virtualinvoke $r21.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r22);
specialinvoke $r19.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r23);
$r24 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r19);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r24);
$r27 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel GROOVY>;
$r26 = new javax.xml.transform.stream.StreamSource;
$r28 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r29 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_GROOVY_XSL_FILENAME>;
$r30 = virtualinvoke $r28.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r29);
specialinvoke $r26.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r30);
$r31 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r26);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r31);
r33 = virtualinvoke r12.<org.apache.commons.scxml2.w3c.W3CTests: org.apache.commons.scxml2.w3c.W3CTests$Assertions loadAssertions()>();
$r34 = virtualinvoke r33.<org.apache.commons.scxml2.w3c.W3CTests$Assertions: java.util.LinkedHashMap getAssertions()>();
$r35 = virtualinvoke $r34.<java.util.LinkedHashMap: java.util.Collection values()>();
r36 = interfaceinvoke $r35.<java.util.Collection: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
$z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();
r38 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion) $r37;
$r39 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.util.List getTestCases()>();
r40 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
$z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r41 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();
r42 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase) $r41;
$r43 = virtualinvoke r42.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase: java.util.List getResources()>();
r44 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto (branch);
"
    "Block 6:
[preds: 5 ] [succs: 5 ]
$r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();
r46 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource) $r45;
$r47 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.lang.String getSpecId()>();
virtualinvoke r12.<org.apache.commons.scxml2.w3c.W3CTests: void processResource(java.lang.String,org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource,java.util.Map)>($r47, r46, r4);
goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 7:
[preds: 5 ] [succs: 3 ]
goto [?= $z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 8:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 9:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r12 := @this: org.apache.commons.scxml2.w3c.W3CTests;
$r0 = new java.io.File;
specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(\"src/w3c/scxml-irp/\");
r1 = $r0;
r2 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)>(\"net.sf.saxon.TransformerFactoryImpl\", null);
virtualinvoke r2.<javax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)>(\"http://saxon.sf.net/feature/suppressXsltNamespaceCheck\", 1);
$r3 = new java.util.HashMap;
specialinvoke $r3.<java.util.HashMap: void <init>()>();
r4 = $r3;
$r8 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel ECMA>;
$r5 = new javax.xml.transform.stream.StreamSource;
$r6 = new java.io.FileInputStream;
$r7 = new java.io.File;
specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, \"confEcma.xsl\");
specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r7);
specialinvoke $r5.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r6);
$r9 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r5);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);
$r13 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel MINIMAL>;
$r11 = new javax.xml.transform.stream.StreamSource;
$r14 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r15 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_MINIMAL_XSL_FILENAME>;
$r16 = virtualinvoke $r14.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r15);
specialinvoke $r11.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r16);
$r17 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r11);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r17);
$r20 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel JEXL>;
$r19 = new javax.xml.transform.stream.StreamSource;
$r21 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r22 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_JEXL_XSL_FILENAME>;
$r23 = virtualinvoke $r21.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r22);
specialinvoke $r19.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r23);
$r24 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r19);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r24);
$r27 = <org.apache.commons.scxml2.w3c.W3CTests$Datamodel: org.apache.commons.scxml2.w3c.W3CTests$Datamodel GROOVY>;
$r26 = new javax.xml.transform.stream.StreamSource;
$r28 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();
$r29 = <org.apache.commons.scxml2.w3c.W3CTests: java.lang.String SCXML_IRP_GROOVY_XSL_FILENAME>;
$r30 = virtualinvoke $r28.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r29);
specialinvoke $r26.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r30);
$r31 = virtualinvoke r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>($r26);
interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r31);
r33 = virtualinvoke r12.<org.apache.commons.scxml2.w3c.W3CTests: org.apache.commons.scxml2.w3c.W3CTests$Assertions loadAssertions()>();
$r34 = virtualinvoke r33.<org.apache.commons.scxml2.w3c.W3CTests$Assertions: java.util.LinkedHashMap getAssertions()>();
$r35 = virtualinvoke $r34.<java.util.LinkedHashMap: java.util.Collection values()>();
r36 = interfaceinvoke $r35.<java.util.Collection: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
$z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
$z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 ]
$r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();
r38 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion) $r37;
$r39 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.util.List getTestCases()>();
r40 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
$z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"->"Block 9:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 ]
$r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();
r38 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion) $r37;
$r39 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.util.List getTestCases()>();
r40 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
$z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
$z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"->"Block 4:
[preds: 3 ] [succs: 5 ]
$r41 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();
r42 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase) $r41;
$r43 = virtualinvoke r42.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase: java.util.List getResources()>();
r44 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();
";
    "Block 3:
[preds: 2 7 ] [succs: 4 8 ]
$z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
"->"Block 8:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 4:
[preds: 3 ] [succs: 5 ]
$r41 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();
r42 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase) $r41;
$r43 = virtualinvoke r42.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$TestCase: java.util.List getResources()>();
r44 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto (branch);
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto (branch);
"->"Block 6:
[preds: 5 ] [succs: 5 ]
$r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();
r46 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource) $r45;
$r47 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.lang.String getSpecId()>();
virtualinvoke r12.<org.apache.commons.scxml2.w3c.W3CTests: void processResource(java.lang.String,org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource,java.util.Map)>($r47, r46, r4);
goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 5:
[preds: 4 6 ] [succs: 6 7 ]
$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto (branch);
"->"Block 7:
[preds: 5 ] [succs: 3 ]
goto [?= $z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 6:
[preds: 5 ] [succs: 5 ]
$r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();
r46 = (org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource) $r45;
$r47 = virtualinvoke r38.<org.apache.commons.scxml2.w3c.W3CTests$Assertions$Assertion: java.lang.String getSpecId()>();
virtualinvoke r12.<org.apache.commons.scxml2.w3c.W3CTests: void processResource(java.lang.String,org.apache.commons.scxml2.w3c.W3CTests$Assertions$Resource,java.util.Map)>($r47, r46, r4);
goto [?= $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()];
"->"Block 5:
[preds: 4 6 ] [succs: 6 7 ]
$z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();
if $z2 == 0 goto (branch);
";
    "Block 7:
[preds: 5 ] [succs: 3 ]
goto [?= $z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()];
"->"Block 3:
[preds: 2 7 ] [succs: 4 8 ]
$z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();
if $z1 == 0 goto (branch);
";
    "Block 8:
[preds: 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
$z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
";
}
