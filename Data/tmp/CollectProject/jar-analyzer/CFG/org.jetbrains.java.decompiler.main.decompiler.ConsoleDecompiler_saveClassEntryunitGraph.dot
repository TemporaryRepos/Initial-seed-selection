digraph "unitGraph" {
    "r1 := @this: org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler"
    "r2 := @parameter0: java.lang.String"
    "r4 := @parameter1: java.lang.String"
    "r21 := @parameter2: java.lang.String"
    "r6 := @parameter3: java.lang.String"
    "r10 := @parameter4: java.lang.String"
    "$r0 = new java.io.File"
    "$r3 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.lang.String getAbsolutePath(java.lang.String)>(r2)"
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, r4)"
    "r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>()"
    "$z0 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: boolean checkEntry(java.lang.String,java.lang.String)>(r6, r5)"
    "if $z0 != 0 goto $r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"
    "return"
    "$r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"
    "$r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)"
    "r22 = (java.util.zip.ZipOutputStream) $r8"
    "$r9 = new java.util.zip.ZipEntry"
    "specialinvoke $r9.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r6)"
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r9)"
    "if r10 == null goto (branch)"
    "$r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>"
    "$r12 = virtualinvoke r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)"
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void write(byte[])>($r12)"
    "goto [?= return]"
    "$r13 := @caughtexception"
    "r23 = $r13"
    "$r14 = new java.lang.StringBuilder"
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot write entry \")"
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)"
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" to \")"
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"
    "r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"
    "$r20 = staticinvoke <org.jetbrains.java.decompiler.main.DecompilerContext: org.jetbrains.java.decompiler.main.extern.IFernflowerLogger getLogger()>()"
    "virtualinvoke $r20.<org.jetbrains.java.decompiler.main.extern.IFernflowerLogger: void writeMessage(java.lang.String,java.lang.Throwable)>(r19, r23)"
    "r1 := @this: org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler"->"r2 := @parameter0: java.lang.String";
    "r2 := @parameter0: java.lang.String"->"r4 := @parameter1: java.lang.String";
    "r4 := @parameter1: java.lang.String"->"r21 := @parameter2: java.lang.String";
    "r21 := @parameter2: java.lang.String"->"r6 := @parameter3: java.lang.String";
    "r6 := @parameter3: java.lang.String"->"r10 := @parameter4: java.lang.String";
    "r10 := @parameter4: java.lang.String"->"$r0 = new java.io.File";
    "$r0 = new java.io.File"->"$r3 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.lang.String getAbsolutePath(java.lang.String)>(r2)";
    "$r3 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.lang.String getAbsolutePath(java.lang.String)>(r2)"->"specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, r4)";
    "specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, r4)"->"r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>()";
    "r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>()"->"$z0 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: boolean checkEntry(java.lang.String,java.lang.String)>(r6, r5)";
    "$z0 = specialinvoke r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: boolean checkEntry(java.lang.String,java.lang.String)>(r6, r5)"->"if $z0 != 0 goto $r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>";
    "if $z0 != 0 goto $r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"->"return";
    "if $z0 != 0 goto $r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"->"$r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>";
    "if $z0 != 0 goto $r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"->"$r13 := @caughtexception";
    "$r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"->"$r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)";
    "$r7 = r1.<org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler: java.util.Map mapArchiveStreams>"->"$r13 := @caughtexception";
    "$r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)"->"r22 = (java.util.zip.ZipOutputStream) $r8";
    "$r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)"->"$r13 := @caughtexception";
    "r22 = (java.util.zip.ZipOutputStream) $r8"->"$r9 = new java.util.zip.ZipEntry";
    "r22 = (java.util.zip.ZipOutputStream) $r8"->"$r13 := @caughtexception";
    "$r9 = new java.util.zip.ZipEntry"->"specialinvoke $r9.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r6)";
    "$r9 = new java.util.zip.ZipEntry"->"$r13 := @caughtexception";
    "specialinvoke $r9.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r6)"->"virtualinvoke r22.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r9)";
    "specialinvoke $r9.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r6)"->"$r13 := @caughtexception";
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r9)"->"if r10 == null goto (branch)";
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r9)"->"$r13 := @caughtexception";
    "if r10 == null goto (branch)"->"$r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>";
    "if r10 == null goto (branch)"->"goto [?= return]";
    "if r10 == null goto (branch)"->"$r13 := @caughtexception";
    "$r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>"->"$r12 = virtualinvoke r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)";
    "$r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>"->"$r13 := @caughtexception";
    "$r12 = virtualinvoke r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)"->"virtualinvoke r22.<java.util.zip.ZipOutputStream: void write(byte[])>($r12)";
    "$r12 = virtualinvoke r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)"->"$r13 := @caughtexception";
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void write(byte[])>($r12)"->"goto [?= return]";
    "virtualinvoke r22.<java.util.zip.ZipOutputStream: void write(byte[])>($r12)"->"$r13 := @caughtexception";
    "goto [?= return]"->"return";
    "$r13 := @caughtexception"->"r23 = $r13";
    "r23 = $r13"->"$r14 = new java.lang.StringBuilder";
    "$r14 = new java.lang.StringBuilder"->"specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()"->"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot write entry \")";
    "$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Cannot write entry \")"->"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)";
    "$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)"->"$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" to \")";
    "$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" to \")"->"$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)";
    "$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)"->"r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()";
    "r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()"->"$r20 = staticinvoke <org.jetbrains.java.decompiler.main.DecompilerContext: org.jetbrains.java.decompiler.main.extern.IFernflowerLogger getLogger()>()";
    "$r20 = staticinvoke <org.jetbrains.java.decompiler.main.DecompilerContext: org.jetbrains.java.decompiler.main.extern.IFernflowerLogger getLogger()>()"->"virtualinvoke $r20.<org.jetbrains.java.decompiler.main.extern.IFernflowerLogger: void writeMessage(java.lang.String,java.lang.Throwable)>(r19, r23)";
    "virtualinvoke $r20.<org.jetbrains.java.decompiler.main.extern.IFernflowerLogger: void writeMessage(java.lang.String,java.lang.Throwable)>(r19, r23)"->"return";
}
