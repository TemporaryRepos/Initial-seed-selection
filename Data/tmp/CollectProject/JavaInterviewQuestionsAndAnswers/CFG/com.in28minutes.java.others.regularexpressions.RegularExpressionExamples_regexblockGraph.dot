digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
r2 := @parameter1: java.lang.String;
r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);
r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$r4 = new java.util.ArrayList;
specialinvoke $r4.<java.util.ArrayList: void <init>()>();
r5 = $r4;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();
if $z0 == 0 goto $r6 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i0 = virtualinvoke r3.<java.util.regex.Matcher: int start()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<\");
$r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\">\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);
goto [?= $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>(r5);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r0 := @parameter0: java.lang.String;
r2 := @parameter1: java.lang.String;
r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);
r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
$r4 = new java.util.ArrayList;
specialinvoke $r4.<java.util.ArrayList: void <init>()>();
r5 = $r4;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();
if $z0 == 0 goto $r6 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();
if $z0 == 0 goto $r6 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i0 = virtualinvoke r3.<java.util.regex.Matcher: int start()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<\");
$r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\">\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);
goto [?= $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();
if $z0 == 0 goto $r6 = <java.lang.System: java.io.PrintStream out>;
"->"Block 3:
[preds: 1 ] [succs: ]
$r6 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>(r5);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r7 = new java.lang.StringBuilder;
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
$i0 = virtualinvoke r3.<java.util.regex.Matcher: int start()>();
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"<\");
$r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group()>();
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\">\");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);
goto [?= $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();
if $z0 == 0 goto $r6 = <java.lang.System: java.io.PrintStream out>;
";
}
