digraph "unitGraph" {
    "r3 := @this: com.iciql.util.GenerateModels"
    "r0 := @parameter0: java.lang.String[]"
    "r11 = null"
    "r12 = \"sa\""
    "r13 = \"\""
    "r14 = null"
    "r15 = null"
    "r16 = \"\""
    "r17 = null"
    "z9 = 1"
    "z10 = 0"
    "i1 = 0"
    "if r0 == null goto (branch)"
    "$i0 = lengthof r0"
    "if i1 >= $i0 goto (branch)"
    "r2 = r0[i1]"
    "$z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-url\")"
    "if $z0 == 0 goto $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")"
    "i1 = i1 + 1"
    "r11 = r0[i1]"
    "goto [?= i1 = i1 + 1]"
    "$z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")"
    "if $z1 == 0 goto $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")"
    "r12 = r0[i1]"
    "$z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")"
    "if $z2 == 0 goto $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")"
    "r13 = r0[i1]"
    "$z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")"
    "if $z3 == 0 goto $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")"
    "r14 = r0[i1]"
    "$z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")"
    "if $z4 == 0 goto $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")"
    "r15 = r0[i1]"
    "$z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")"
    "if $z5 == 0 goto $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")"
    "r16 = r0[i1]"
    "$z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")"
    "if $z6 == 0 goto $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")"
    "r17 = r0[i1]"
    "$z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")"
    "if $z7 == 0 goto $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"
    "$r6 = r0[i1]"
    "z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6)"
    "$r9 := @caughtexception"
    "r18 = $r9"
    "$r10 = new java.sql.SQLException"
    "specialinvoke $r10.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -annotateSchema value\")"
    "throw $r10"
    "$z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"
    "if $z8 == 0 goto virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"
    "$r5 = r0[i1]"
    "z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5)"
    "$r7 := @caughtexception"
    "r19 = $r7"
    "$r8 = new java.sql.SQLException"
    "specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -trimStrings value\")"
    "throw $r8"
    "virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"
    "goto [?= (branch)]"
    "if r11 != null goto staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)"
    "$r1 = new java.sql.SQLException"
    "specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>(\"URL not set\")"
    "throw $r1"
    "staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)"
    "return"
    "r3 := @this: com.iciql.util.GenerateModels"->"r0 := @parameter0: java.lang.String[]";
    "r0 := @parameter0: java.lang.String[]"->"r11 = null";
    "r11 = null"->"r12 = \"sa\"";
    "r12 = \"sa\""->"r13 = \"\"";
    "r13 = \"\""->"r14 = null";
    "r14 = null"->"r15 = null";
    "r15 = null"->"r16 = \"\"";
    "r16 = \"\""->"r17 = null";
    "r17 = null"->"z9 = 1";
    "z9 = 1"->"z10 = 0";
    "z10 = 0"->"i1 = 0";
    "i1 = 0"->"if r0 == null goto (branch)";
    "if r0 == null goto (branch)"->"$i0 = lengthof r0";
    "if r0 == null goto (branch)"->"if r11 != null goto staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)";
    "$i0 = lengthof r0"->"if i1 >= $i0 goto (branch)";
    "if i1 >= $i0 goto (branch)"->"r2 = r0[i1]";
    "if i1 >= $i0 goto (branch)"->"if r11 != null goto staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)";
    "r2 = r0[i1]"->"$z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-url\")";
    "$z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-url\")"->"if $z0 == 0 goto $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")";
    "if $z0 == 0 goto $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")"->"i1 = i1 + 1";
    "if $z0 == 0 goto $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")"->"$z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")";
    "i1 = i1 + 1"->"r11 = r0[i1]";
    "r11 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-user\")"->"if $z1 == 0 goto $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")";
    "if $z1 == 0 goto $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")"->"i1 = i1 + 1";
    "if $z1 == 0 goto $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")"->"$z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")";
    "i1 = i1 + 1"->"r12 = r0[i1]";
    "r12 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-password\")"->"if $z2 == 0 goto $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")";
    "if $z2 == 0 goto $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")"->"i1 = i1 + 1";
    "if $z2 == 0 goto $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")"->"$z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")";
    "i1 = i1 + 1"->"r13 = r0[i1]";
    "r13 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-schema\")"->"if $z3 == 0 goto $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")";
    "if $z3 == 0 goto $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")"->"i1 = i1 + 1";
    "if $z3 == 0 goto $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")"->"$z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")";
    "i1 = i1 + 1"->"r14 = r0[i1]";
    "r14 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-table\")"->"if $z4 == 0 goto $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")";
    "if $z4 == 0 goto $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")"->"i1 = i1 + 1";
    "if $z4 == 0 goto $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")"->"$z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")";
    "i1 = i1 + 1"->"r15 = r0[i1]";
    "r15 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-package\")"->"if $z5 == 0 goto $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")";
    "if $z5 == 0 goto $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")"->"i1 = i1 + 1";
    "if $z5 == 0 goto $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")"->"$z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")";
    "i1 = i1 + 1"->"r16 = r0[i1]";
    "r16 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-folder\")"->"if $z6 == 0 goto $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")";
    "if $z6 == 0 goto $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")"->"i1 = i1 + 1";
    "if $z6 == 0 goto $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")"->"$z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")";
    "i1 = i1 + 1"->"r17 = r0[i1]";
    "r17 = r0[i1]"->"goto [?= i1 = i1 + 1]";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-annotateSchema\")"->"if $z7 == 0 goto $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")";
    "if $z7 == 0 goto $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"->"i1 = i1 + 1";
    "if $z7 == 0 goto $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"->"$z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")";
    "if $z7 == 0 goto $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"->"$r9 := @caughtexception";
    "i1 = i1 + 1"->"$r6 = r0[i1]";
    "i1 = i1 + 1"->"$r9 := @caughtexception";
    "$r6 = r0[i1]"->"z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6)";
    "$r6 = r0[i1]"->"$r9 := @caughtexception";
    "z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6)"->"goto [?= i1 = i1 + 1]";
    "z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6)"->"$r9 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r9 := @caughtexception"->"r18 = $r9";
    "r18 = $r9"->"$r10 = new java.sql.SQLException";
    "$r10 = new java.sql.SQLException"->"specialinvoke $r10.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -annotateSchema value\")";
    "specialinvoke $r10.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -annotateSchema value\")"->"throw $r10";
    "$z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(\"-trimStrings\")"->"if $z8 == 0 goto virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)";
    "if $z8 == 0 goto virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"->"i1 = i1 + 1";
    "if $z8 == 0 goto virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"->"virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)";
    "if $z8 == 0 goto virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"->"$r7 := @caughtexception";
    "i1 = i1 + 1"->"$r5 = r0[i1]";
    "i1 = i1 + 1"->"$r7 := @caughtexception";
    "$r5 = r0[i1]"->"z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5)";
    "$r5 = r0[i1]"->"$r7 := @caughtexception";
    "z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5)"->"goto [?= i1 = i1 + 1]";
    "z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5)"->"$r7 := @caughtexception";
    "goto [?= i1 = i1 + 1]"->"i1 = i1 + 1";
    "$r7 := @caughtexception"->"r19 = $r7";
    "r19 = $r7"->"$r8 = new java.sql.SQLException";
    "$r8 = new java.sql.SQLException"->"specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -trimStrings value\")";
    "specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>(\"Can not parse -trimStrings value\")"->"throw $r8";
    "virtualinvoke r3.<com.iciql.util.GenerateModels: java.sql.SQLException throwUnsupportedOption(java.lang.String)>(r2)"->"i1 = i1 + 1";
    "i1 = i1 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if r0 == null goto (branch)";
    "if r11 != null goto staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)"->"$r1 = new java.sql.SQLException";
    "if r11 != null goto staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)"->"staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)";
    "$r1 = new java.sql.SQLException"->"specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>(\"URL not set\")";
    "specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>(\"URL not set\")"->"throw $r1";
    "staticinvoke <com.iciql.util.GenerateModels: void execute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r11, r12, r13, r14, r15, r16, r17, z9, z10)"->"return";
}
