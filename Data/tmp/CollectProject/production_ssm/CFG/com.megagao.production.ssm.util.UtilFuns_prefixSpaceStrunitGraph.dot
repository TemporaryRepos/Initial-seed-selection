digraph "unitGraph" {
    "r7 := @this: com.megagao.production.ssm.util.UtilFuns"
    "r2 := @parameter0: java.lang.String"
    "i1 := @parameter1: int"
    "$r0 = new java.lang.StringBuffer"
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()"
    "r1 = $r0"
    "$i0 = virtualinvoke r2.<java.lang.String: int length()>()"
    "if $i0 <= i1 goto i4 = 0"
    "return r2"
    "i4 = 0"
    "$i2 = virtualinvoke r2.<java.lang.String: int length()>()"
    "$i3 = i1 - $i2"
    "if i4 >= $i3 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\" \")"
    "i4 = i4 + 1"
    "goto [?= $i2 = virtualinvoke r2.<java.lang.String: int length()>()]"
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"
    "$r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"
    "return $r4"
    "$r6 := @caughtexception"
    "r8 = $r6"
    "r7 := @this: com.megagao.production.ssm.util.UtilFuns"->"r2 := @parameter0: java.lang.String";
    "r2 := @parameter0: java.lang.String"->"i1 := @parameter1: int";
    "i1 := @parameter1: int"->"$r0 = new java.lang.StringBuffer";
    "$r0 = new java.lang.StringBuffer"->"specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()";
    "specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"$i0 = virtualinvoke r2.<java.lang.String: int length()>()";
    "r1 = $r0"->"$r6 := @caughtexception";
    "$i0 = virtualinvoke r2.<java.lang.String: int length()>()"->"if $i0 <= i1 goto i4 = 0";
    "$i0 = virtualinvoke r2.<java.lang.String: int length()>()"->"$r6 := @caughtexception";
    "if $i0 <= i1 goto i4 = 0"->"return r2";
    "if $i0 <= i1 goto i4 = 0"->"i4 = 0";
    "if $i0 <= i1 goto i4 = 0"->"$r6 := @caughtexception";
    "i4 = 0"->"$i2 = virtualinvoke r2.<java.lang.String: int length()>()";
    "i4 = 0"->"$r6 := @caughtexception";
    "$i2 = virtualinvoke r2.<java.lang.String: int length()>()"->"$i3 = i1 - $i2";
    "$i2 = virtualinvoke r2.<java.lang.String: int length()>()"->"$r6 := @caughtexception";
    "$i3 = i1 - $i2"->"if i4 >= $i3 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)";
    "$i3 = i1 - $i2"->"$r6 := @caughtexception";
    "if i4 >= $i3 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\" \")";
    "if i4 >= $i3 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"->"virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)";
    "if i4 >= $i3 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"->"$r6 := @caughtexception";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\" \")"->"i4 = i4 + 1";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(\" \")"->"$r6 := @caughtexception";
    "i4 = i4 + 1"->"goto [?= $i2 = virtualinvoke r2.<java.lang.String: int length()>()]";
    "i4 = i4 + 1"->"$r6 := @caughtexception";
    "goto [?= $i2 = virtualinvoke r2.<java.lang.String: int length()>()]"->"$i2 = virtualinvoke r2.<java.lang.String: int length()>()";
    "goto [?= $i2 = virtualinvoke r2.<java.lang.String: int length()>()]"->"$r6 := @caughtexception";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"->"$r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()";
    "virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2)"->"$r6 := @caughtexception";
    "$r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"->"return $r4";
    "$r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()"->"$r6 := @caughtexception";
    "$r6 := @caughtexception"->"r8 = $r6";
    "r8 = $r6"->"return r2";
}
