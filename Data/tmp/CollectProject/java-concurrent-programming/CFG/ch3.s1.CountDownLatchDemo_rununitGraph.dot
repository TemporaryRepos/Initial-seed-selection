digraph "unitGraph" {
    "r5 := @this: ch3.s1.CountDownLatchDemo"
    "$r0 = new java.util.Random"
    "specialinvoke $r0.<java.util.Random: void <init>()>()"
    "$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(10)"
    "$i1 = $i0 * 1000"
    "$l2 = (long) $i1"
    "staticinvoke <java.lang.Thread: void sleep(long)>($l2)"
    "$r1 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(\"check complete!\")"
    "$r2 = <ch3.s1.CountDownLatchDemo: java.util.concurrent.CountDownLatch end>"
    "virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>()"
    "goto [?= return]"
    "$r3 := @caughtexception"
    "r4 = $r3"
    "virtualinvoke r4.<java.lang.InterruptedException: void printStackTrace()>()"
    "return"
    "r5 := @this: ch3.s1.CountDownLatchDemo"->"$r0 = new java.util.Random";
    "r5 := @this: ch3.s1.CountDownLatchDemo"->"$r3 := @caughtexception";
    "$r0 = new java.util.Random"->"specialinvoke $r0.<java.util.Random: void <init>()>()";
    "$r0 = new java.util.Random"->"$r3 := @caughtexception";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(10)";
    "specialinvoke $r0.<java.util.Random: void <init>()>()"->"$r3 := @caughtexception";
    "$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(10)"->"$i1 = $i0 * 1000";
    "$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(10)"->"$r3 := @caughtexception";
    "$i1 = $i0 * 1000"->"$l2 = (long) $i1";
    "$i1 = $i0 * 1000"->"$r3 := @caughtexception";
    "$l2 = (long) $i1"->"staticinvoke <java.lang.Thread: void sleep(long)>($l2)";
    "$l2 = (long) $i1"->"$r3 := @caughtexception";
    "staticinvoke <java.lang.Thread: void sleep(long)>($l2)"->"$r1 = <java.lang.System: java.io.PrintStream out>";
    "staticinvoke <java.lang.Thread: void sleep(long)>($l2)"->"$r3 := @caughtexception";
    "$r1 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(\"check complete!\")";
    "$r1 = <java.lang.System: java.io.PrintStream out>"->"$r3 := @caughtexception";
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(\"check complete!\")"->"$r2 = <ch3.s1.CountDownLatchDemo: java.util.concurrent.CountDownLatch end>";
    "virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(\"check complete!\")"->"$r3 := @caughtexception";
    "$r2 = <ch3.s1.CountDownLatchDemo: java.util.concurrent.CountDownLatch end>"->"virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>()";
    "$r2 = <ch3.s1.CountDownLatchDemo: java.util.concurrent.CountDownLatch end>"->"$r3 := @caughtexception";
    "virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>()"->"goto [?= return]";
    "virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>()"->"$r3 := @caughtexception";
    "goto [?= return]"->"return";
    "$r3 := @caughtexception"->"r4 = $r3";
    "r4 = $r3"->"virtualinvoke r4.<java.lang.InterruptedException: void printStackTrace()>()";
    "virtualinvoke r4.<java.lang.InterruptedException: void printStackTrace()>()"->"return";
}
