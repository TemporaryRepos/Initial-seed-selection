digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @this: ch3.s1.ReenterLock;
i2 = 0;
"
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= 10000000 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
$r0 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();
"
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i0 = <ch3.s1.ReenterLock: int i>;
"
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
$i1 = $i0 + 1;
"
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
<ch3.s1.ReenterLock: int i> = $i1;
"
    "Block 6:
[preds: 5 ] [succs: 8 ]
$r1 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto [?= i2 = i2 + 1];
"
    "Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r2 := @caughtexception;
r3 = $r2;
$r4 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw r3;
"
    "Block 8:
[preds: 6 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r5 := @this: ch3.s1.ReenterLock;
i2 = 0;
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= 10000000 goto return;
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= 10000000 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 7 ]
$r0 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();
";
    "Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= 10000000 goto return;
"->"Block 9:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
$r0 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();
"->"Block 3:
[preds: 2 ] [succs: 4 7 ]
$i0 = <ch3.s1.ReenterLock: int i>;
";
    "Block 2:
[preds: 1 ] [succs: 3 7 ]
$r0 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r2 := @caughtexception;
r3 = $r2;
$r4 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw r3;
";
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i0 = <ch3.s1.ReenterLock: int i>;
"->"Block 4:
[preds: 3 ] [succs: 5 7 ]
$i1 = $i0 + 1;
";
    "Block 3:
[preds: 2 ] [succs: 4 7 ]
$i0 = <ch3.s1.ReenterLock: int i>;
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r2 := @caughtexception;
r3 = $r2;
$r4 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw r3;
";
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
$i1 = $i0 + 1;
"->"Block 5:
[preds: 4 ] [succs: 6 7 ]
<ch3.s1.ReenterLock: int i> = $i1;
";
    "Block 4:
[preds: 3 ] [succs: 5 7 ]
$i1 = $i0 + 1;
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r2 := @caughtexception;
r3 = $r2;
$r4 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw r3;
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
<ch3.s1.ReenterLock: int i> = $i1;
"->"Block 6:
[preds: 5 ] [succs: 8 ]
$r1 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto [?= i2 = i2 + 1];
";
    "Block 5:
[preds: 4 ] [succs: 6 7 ]
<ch3.s1.ReenterLock: int i> = $i1;
"->"Block 7:
[preds: 2 3 4 5 ] [succs: ]
$r2 := @caughtexception;
r3 = $r2;
$r4 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw r3;
";
    "Block 6:
[preds: 5 ] [succs: 8 ]
$r1 = <ch3.s1.ReenterLock: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto [?= i2 = i2 + 1];
"->"Block 8:
[preds: 6 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
";
    "Block 8:
[preds: 6 ] [succs: 1 ]
i2 = i2 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 8 ] [succs: 2 9 ]
if i2 >= 10000000 goto return;
";
}
