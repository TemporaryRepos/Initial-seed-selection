digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r21 := @parameter0: java.lang.String[];
$r0 = <test.utils.AtomicStampedReferenceTest: java.util.concurrent.atomic.AtomicStampedReference atomicStampedReference>;
i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicStampedReference: int getStamp()>();
$r1 = <test.utils.AtomicStampedReferenceTest: java.util.concurrent.atomic.AtomicStampedReference atomicStampedReference>;
$r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicStampedReference: java.lang.Object getReference()>();
r3 = (java.lang.Integer) $r2;
$r5 = <java.lang.System: java.io.PrintStream out>;
$r4 = new java.lang.StringBuilder;
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"============\");
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);
$r10 = new java.lang.Thread;
$r11 = new test.utils.AtomicStampedReferenceTest$1;
specialinvoke $r11.<test.utils.AtomicStampedReferenceTest$1: void <init>(java.lang.Integer,int)>(r3, i0);
specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>($r11);
r12 = $r10;
$r13 = new java.lang.Thread;
$r14 = new test.utils.AtomicStampedReferenceTest$2;
specialinvoke $r14.<test.utils.AtomicStampedReferenceTest$2: void <init>(int)>(i0);
specialinvoke $r13.<java.lang.Thread: void <init>(java.lang.Runnable)>($r14);
r15 = $r13;
virtualinvoke r12.<java.lang.Thread: void start()>();
virtualinvoke r12.<java.lang.Thread: void join()>();
virtualinvoke r15.<java.lang.Thread: void start()>();
virtualinvoke r15.<java.lang.Thread: void join()>();
$r17 = <java.lang.System: java.io.PrintStream out>;
$r16 = <test.utils.AtomicStampedReferenceTest: java.util.concurrent.atomic.AtomicStampedReference atomicStampedReference>;
$r18 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicStampedReference: java.lang.Object getReference()>();
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.Object)>($r18);
$r20 = <java.lang.System: java.io.PrintStream out>;
$r19 = <test.utils.AtomicStampedReferenceTest: java.util.concurrent.atomic.AtomicStampedReference atomicStampedReference>;
$i1 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicStampedReference: int getStamp()>();
virtualinvoke $r20.<java.io.PrintStream: void println(int)>($i1);
return;
"
}
