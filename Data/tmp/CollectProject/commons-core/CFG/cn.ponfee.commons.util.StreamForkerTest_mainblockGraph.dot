digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r31 := @parameter0: java.lang.String[];
$r0 = newarray (java.lang.Integer)[7];
$r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$r0[0] = $r1;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);
$r0[1] = $r2;
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);
$r0[2] = $r3;
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$r0[3] = $r4;
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
$r0[4] = $r5;
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);
$r0[5] = $r6;
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);
$r0[6] = $r7;
r8 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($r0);
$r9 = new cn.ponfee.commons.collect.StreamForker;
specialinvoke $r9.<cn.ponfee.commons.collect.StreamForker: void <init>(java.util.stream.Stream)>(r8);
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$r11 = staticinvoke <cn.ponfee.commons.util.StreamForkerTest$lambda_main_0__52: java.util.function.Function bootstrap$()>();
$r12 = virtualinvoke $r9.<cn.ponfee.commons.collect.StreamForker: cn.ponfee.commons.collect.StreamForker fork(java.lang.Object,java.util.function.Function)>($r10, $r11);
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);
$r14 = staticinvoke <cn.ponfee.commons.util.StreamForkerTest$lambda_main_1__53: java.util.function.Function bootstrap$()>();
$r15 = virtualinvoke $r12.<cn.ponfee.commons.collect.StreamForker: cn.ponfee.commons.collect.StreamForker fork(java.lang.Object,java.util.function.Function)>($r13, $r14);
r16 = virtualinvoke $r15.<cn.ponfee.commons.collect.StreamForker: cn.ponfee.commons.collect.StreamForker$Results getResults()>();
$r18 = <java.lang.System: java.io.PrintStream out>;
$r17 = new java.lang.StringBuilder;
specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
$r20 = interfaceinvoke r16.<cn.ponfee.commons.collect.StreamForker$Results: java.lang.Object get(java.lang.Object)>($r19);
$r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\");
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r23);
$r25 = <java.lang.System: java.io.PrintStream out>;
$r24 = new java.lang.StringBuilder;
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);
$r27 = interfaceinvoke r16.<cn.ponfee.commons.collect.StreamForker$Results: java.lang.Object get(java.lang.Object)>($r26);
$r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);
$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\");
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r30);
return;
"
}
