digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r28 := @this: cn.ponfee.commons.io.FilesTest;
$r0 = newarray (java.lang.String)[3];
$r0[0] = \"D:\\temp\\withoutbom\\test-utf8-bom.csv\";
$r0[1] = \"D:\\temp\\withoutbom\\test-utf16le-bom.csv\";
$r0[2] = \"D:\\temp\\withoutbom\\test-utf16be-bom.csv\";
r1 = $r0;
$r2 = <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat DEFAULT>;
$r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withDelimiter(char)>(44);
r4 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(char)>(34);
r5 = r1;
i0 = lengthof r5;
i1 = 0;
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
r6 = r5[i1];
r7 = staticinvoke <cn.ponfee.commons.io.CharsetDetector: java.nio.charset.Charset detect(java.lang.String)>(r6);
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n=============================\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" -> , \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"   \");
$r15 = new java.io.File;
specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r6);
$r16 = staticinvoke <cn.ponfee.commons.io.Files: java.lang.String toString(java.io.File)>($r15);
$r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(1, 1000);
$r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\r\n|\n\", \";\");
$r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r20);
$r21 = staticinvoke <cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder newBuilder(java.lang.String)>(r6);
$r22 = virtualinvoke $r21.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder csvFormat(org.apache.commons.csv.CSVFormat)>(r4);
r23 = virtualinvoke $r22.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder startRow(int)>(1);
$r24 = virtualinvoke r23.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractor build()>();
$r25 = virtualinvoke $r24.<cn.ponfee.commons.extract.DataExtractor: java.util.List extract(int)>(2);
$r26 = interfaceinvoke $r25.<java.util.List: java.util.stream.Stream stream()>();
$r27 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_test7_1__40: java.util.function.Consumer bootstrap$()>();
interfaceinvoke $r26.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r27);
i1 = i1 + 1;
goto [?= (branch)];
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r28 := @this: cn.ponfee.commons.io.FilesTest;
$r0 = newarray (java.lang.String)[3];
$r0[0] = \"D:\\temp\\withoutbom\\test-utf8-bom.csv\";
$r0[1] = \"D:\\temp\\withoutbom\\test-utf16le-bom.csv\";
$r0[2] = \"D:\\temp\\withoutbom\\test-utf16be-bom.csv\";
r1 = $r0;
$r2 = <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat DEFAULT>;
$r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withDelimiter(char)>(44);
r4 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.CSVFormat withQuote(char)>(34);
r5 = r1;
i0 = lengthof r5;
i1 = 0;
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
r6 = r5[i1];
r7 = staticinvoke <cn.ponfee.commons.io.CharsetDetector: java.nio.charset.Charset detect(java.lang.String)>(r6);
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n=============================\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" -> , \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"   \");
$r15 = new java.io.File;
specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r6);
$r16 = staticinvoke <cn.ponfee.commons.io.Files: java.lang.String toString(java.io.File)>($r15);
$r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(1, 1000);
$r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\r\n|\n\", \";\");
$r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r20);
$r21 = staticinvoke <cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder newBuilder(java.lang.String)>(r6);
$r22 = virtualinvoke $r21.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder csvFormat(org.apache.commons.csv.CSVFormat)>(r4);
r23 = virtualinvoke $r22.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder startRow(int)>(1);
$r24 = virtualinvoke r23.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractor build()>();
$r25 = virtualinvoke $r24.<cn.ponfee.commons.extract.DataExtractor: java.util.List extract(int)>(2);
$r26 = interfaceinvoke $r25.<java.util.List: java.util.stream.Stream stream()>();
$r27 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_test7_1__40: java.util.function.Consumer bootstrap$()>();
interfaceinvoke $r26.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r27);
i1 = i1 + 1;
goto [?= (branch)];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return;
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
r6 = r5[i1];
r7 = staticinvoke <cn.ponfee.commons.io.CharsetDetector: java.nio.charset.Charset detect(java.lang.String)>(r6);
$r9 = <java.lang.System: java.io.PrintStream out>;
$r8 = new java.lang.StringBuilder;
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\n=============================\");
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" -> , \");
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"   \");
$r15 = new java.io.File;
specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r6);
$r16 = staticinvoke <cn.ponfee.commons.io.Files: java.lang.String toString(java.io.File)>($r15);
$r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(1, 1000);
$r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\"\r\n|\n\", \";\");
$r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r20);
$r21 = staticinvoke <cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder newBuilder(java.lang.String)>(r6);
$r22 = virtualinvoke $r21.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder csvFormat(org.apache.commons.csv.CSVFormat)>(r4);
r23 = virtualinvoke $r22.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractorBuilder startRow(int)>(1);
$r24 = virtualinvoke r23.<cn.ponfee.commons.extract.DataExtractorBuilder: cn.ponfee.commons.extract.DataExtractor build()>();
$r25 = virtualinvoke $r24.<cn.ponfee.commons.extract.DataExtractor: java.util.List extract(int)>(2);
$r26 = interfaceinvoke $r25.<java.util.List: java.util.stream.Stream stream()>();
$r27 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_test7_1__40: java.util.function.Consumer bootstrap$()>();
interfaceinvoke $r26.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r27);
i1 = i1 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if i1 >= i0 goto return;
";
}
