digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: test.ThrowEggsTest;
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 1 goto return 0;
"
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 1 goto $i3 = i0 + 1;
"
    "Block 2:
[preds: 0 1 ] [succs: ]
return 0;
"
    "Block 3:
[preds: 1 ] [succs: 4 ]
$i3 = i0 + 1;
$i2 = i1 + 1;
r0 = newmultiarray (int)[$i3][$i2];
i14 = 1;
"
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i14 > i0 goto i16 = 2;
"
    "Block 5:
[preds: 4 ] [succs: 6 ]
i15 = 1;
"
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i15 > i1 goto i14 = i14 + 1;
"
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r6 = r0[i14];
$r6[i15] = i15;
i15 = i15 + 1;
goto [?= (branch)];
"
    "Block 8:
[preds: 6 ] [succs: 4 ]
i14 = i14 + 1;
goto [?= (branch)];
"
    "Block 9:
[preds: 4 ] [succs: 10 ]
i16 = 2;
"
    "Block 10:
[preds: 9 17 ] [succs: 11 18 ]
if i16 > i0 goto $r1 = r0[i0];
"
    "Block 11:
[preds: 10 ] [succs: 12 ]
i17 = 1;
"
    "Block 12:
[preds: 11 16 ] [succs: 13 17 ]
if i17 > i1 goto i16 = i16 + 1;
"
    "Block 13:
[preds: 12 ] [succs: 14 ]
i18 = 1;
"
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i18 >= i17 goto i17 = i17 + 1;
"
    "Block 15:
[preds: 14 ] [succs: 14 ]
$r5 = r0[i16];
$r2 = r0[i16];
$i10 = $r2[i17];
$i5 = i16 - 1;
$r3 = r0[$i5];
$i6 = i18 - 1;
$i9 = $r3[$i6];
$r4 = r0[i16];
$i7 = i17 - i18;
$i8 = $r4[$i7];
$i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i8);
$i12 = 1 + $i11;
$i13 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i12);
$r5[i17] = $i13;
i18 = i18 + 1;
goto [?= (branch)];
"
    "Block 16:
[preds: 14 ] [succs: 12 ]
i17 = i17 + 1;
goto [?= (branch)];
"
    "Block 17:
[preds: 12 ] [succs: 10 ]
i16 = i16 + 1;
goto [?= (branch)];
"
    "Block 18:
[preds: 10 ] [succs: ]
$r1 = r0[i0];
$i4 = $r1[i1];
return $i4;
"
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: test.ThrowEggsTest;
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 1 goto return 0;
"->"Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 1 goto $i3 = i0 + 1;
";
    "Block 0:
[preds: ] [succs: 1 2 ]
r7 := @this: test.ThrowEggsTest;
i0 := @parameter0: int;
i1 := @parameter1: int;
if i0 < 1 goto return 0;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 1 goto $i3 = i0 + 1;
"->"Block 2:
[preds: 0 1 ] [succs: ]
return 0;
";
    "Block 1:
[preds: 0 ] [succs: 2 3 ]
if i1 >= 1 goto $i3 = i0 + 1;
"->"Block 3:
[preds: 1 ] [succs: 4 ]
$i3 = i0 + 1;
$i2 = i1 + 1;
r0 = newmultiarray (int)[$i3][$i2];
i14 = 1;
";
    "Block 3:
[preds: 1 ] [succs: 4 ]
$i3 = i0 + 1;
$i2 = i1 + 1;
r0 = newmultiarray (int)[$i3][$i2];
i14 = 1;
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i14 > i0 goto i16 = 2;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i14 > i0 goto i16 = 2;
"->"Block 5:
[preds: 4 ] [succs: 6 ]
i15 = 1;
";
    "Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i14 > i0 goto i16 = 2;
"->"Block 9:
[preds: 4 ] [succs: 10 ]
i16 = 2;
";
    "Block 5:
[preds: 4 ] [succs: 6 ]
i15 = 1;
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i15 > i1 goto i14 = i14 + 1;
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i15 > i1 goto i14 = i14 + 1;
"->"Block 7:
[preds: 6 ] [succs: 6 ]
$r6 = r0[i14];
$r6[i15] = i15;
i15 = i15 + 1;
goto [?= (branch)];
";
    "Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i15 > i1 goto i14 = i14 + 1;
"->"Block 8:
[preds: 6 ] [succs: 4 ]
i14 = i14 + 1;
goto [?= (branch)];
";
    "Block 7:
[preds: 6 ] [succs: 6 ]
$r6 = r0[i14];
$r6[i15] = i15;
i15 = i15 + 1;
goto [?= (branch)];
"->"Block 6:
[preds: 5 7 ] [succs: 7 8 ]
if i15 > i1 goto i14 = i14 + 1;
";
    "Block 8:
[preds: 6 ] [succs: 4 ]
i14 = i14 + 1;
goto [?= (branch)];
"->"Block 4:
[preds: 3 8 ] [succs: 5 9 ]
if i14 > i0 goto i16 = 2;
";
    "Block 9:
[preds: 4 ] [succs: 10 ]
i16 = 2;
"->"Block 10:
[preds: 9 17 ] [succs: 11 18 ]
if i16 > i0 goto $r1 = r0[i0];
";
    "Block 10:
[preds: 9 17 ] [succs: 11 18 ]
if i16 > i0 goto $r1 = r0[i0];
"->"Block 11:
[preds: 10 ] [succs: 12 ]
i17 = 1;
";
    "Block 10:
[preds: 9 17 ] [succs: 11 18 ]
if i16 > i0 goto $r1 = r0[i0];
"->"Block 18:
[preds: 10 ] [succs: ]
$r1 = r0[i0];
$i4 = $r1[i1];
return $i4;
";
    "Block 11:
[preds: 10 ] [succs: 12 ]
i17 = 1;
"->"Block 12:
[preds: 11 16 ] [succs: 13 17 ]
if i17 > i1 goto i16 = i16 + 1;
";
    "Block 12:
[preds: 11 16 ] [succs: 13 17 ]
if i17 > i1 goto i16 = i16 + 1;
"->"Block 13:
[preds: 12 ] [succs: 14 ]
i18 = 1;
";
    "Block 12:
[preds: 11 16 ] [succs: 13 17 ]
if i17 > i1 goto i16 = i16 + 1;
"->"Block 17:
[preds: 12 ] [succs: 10 ]
i16 = i16 + 1;
goto [?= (branch)];
";
    "Block 13:
[preds: 12 ] [succs: 14 ]
i18 = 1;
"->"Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i18 >= i17 goto i17 = i17 + 1;
";
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i18 >= i17 goto i17 = i17 + 1;
"->"Block 15:
[preds: 14 ] [succs: 14 ]
$r5 = r0[i16];
$r2 = r0[i16];
$i10 = $r2[i17];
$i5 = i16 - 1;
$r3 = r0[$i5];
$i6 = i18 - 1;
$i9 = $r3[$i6];
$r4 = r0[i16];
$i7 = i17 - i18;
$i8 = $r4[$i7];
$i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i8);
$i12 = 1 + $i11;
$i13 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i12);
$r5[i17] = $i13;
i18 = i18 + 1;
goto [?= (branch)];
";
    "Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i18 >= i17 goto i17 = i17 + 1;
"->"Block 16:
[preds: 14 ] [succs: 12 ]
i17 = i17 + 1;
goto [?= (branch)];
";
    "Block 15:
[preds: 14 ] [succs: 14 ]
$r5 = r0[i16];
$r2 = r0[i16];
$i10 = $r2[i17];
$i5 = i16 - 1;
$r3 = r0[$i5];
$i6 = i18 - 1;
$i9 = $r3[$i6];
$r4 = r0[i16];
$i7 = i17 - i18;
$i8 = $r4[$i7];
$i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i8);
$i12 = 1 + $i11;
$i13 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i12);
$r5[i17] = $i13;
i18 = i18 + 1;
goto [?= (branch)];
"->"Block 14:
[preds: 13 15 ] [succs: 15 16 ]
if i18 >= i17 goto i17 = i17 + 1;
";
    "Block 16:
[preds: 14 ] [succs: 12 ]
i17 = i17 + 1;
goto [?= (branch)];
"->"Block 12:
[preds: 11 16 ] [succs: 13 17 ]
if i17 > i1 goto i16 = i16 + 1;
";
    "Block 17:
[preds: 12 ] [succs: 10 ]
i16 = i16 + 1;
goto [?= (branch)];
"->"Block 10:
[preds: 9 17 ] [succs: 11 18 ]
if i16 > i0 goto $r1 = r0[i0];
";
}
