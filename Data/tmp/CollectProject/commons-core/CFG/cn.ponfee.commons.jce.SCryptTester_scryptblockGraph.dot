digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 := @this: cn.ponfee.commons.jce.SCryptTester;
i0 = 8388608;
b1 = 1;
b2 = 1;
$r1 = r0.<cn.ponfee.commons.jce.SCryptTester: java.lang.String passwd>;
r2 = staticinvoke <cn.ponfee.commons.jce.passwd.SCrypt: java.lang.String create(java.lang.String,int,int,int)>($r1, i0, b1, b2);
r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\\$\");
$i3 = lengthof r3;
$l4 = (long) $i3;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l4);
$r4 = r3[1];
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(\"s0\", $r4);
$r5 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getUrlDecoder()>();
$r6 = r3[3];
$r7 = virtualinvoke $r5.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r6);
$i5 = lengthof $r7;
$l6 = (long) $i5;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l6);
$r8 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getUrlDecoder()>();
$r9 = r3[4];
$r10 = virtualinvoke $r8.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r9);
$i7 = lengthof $r10;
$l8 = (long) $i7;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l8);
$r11 = r3[2];
l9 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r11, 16);
$l12 = (long) i0;
$l10 = l9 >> 16;
$l11 = $l10 & 65535L;
$d0 = (double) $l11;
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);
$i13 = (int) $d1;
$l14 = (long) $i13;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l12, $l14);
$l17 = (long) b1;
$l15 = l9 >> 8;
$l16 = $l15 & 255L;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, $l16);
$l20 = (long) b2;
$l18 = l9 >> 0;
$l19 = $l18 & 255L;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l20, $l19);
return;
"
}
