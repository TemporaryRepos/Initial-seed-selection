digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r11 := @parameter0: java.lang.String[];
$r0 = newarray (java.lang.String)[3];
$r0[0] = \"code\";
$r0[1] = \"b\";
$r0[2] = \"c\";
r1 = staticinvoke <com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter serializeAllExcept(java.lang.String[])>($r0);
$r2 = new com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
specialinvoke $r2.<com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider: void <init>()>();
r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)>(\"fieldFilter\", r1);
$r4 = new com.fasterxml.jackson.databind.ObjectMapper;
specialinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();
r5 = $r4;
$r6 = virtualinvoke r5.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)>(r3);
virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper addMixIn(java.lang.Class,java.lang.Class)>(class \"Ljava/util/Map;\", class \"Lcn/ponfee/commons/json/JacksonIgnore$FieldFilterMixIn;\");
$r8 = <java.lang.System: java.io.PrintStream out>;
$r9 = staticinvoke <cn.ponfee.commons.model.Result: cn.ponfee.commons.model.Result success()>();
$r10 = virtualinvoke r5.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>($r9);
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r10);
return;
"
}
