digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: ]
r0 := @this: cn.ponfee.commons.jce.SCryptTester;
b0 = 2;
s1 = 255;
s2 = 255;
$r1 = r0.<cn.ponfee.commons.jce.SCryptTester: java.lang.String passwd>;
r2 = staticinvoke <cn.ponfee.commons.jce.passwd.SCrypt: java.lang.String create(java.lang.String,int,int,int)>($r1, b0, s1, s2);
$r3 = r0.<cn.ponfee.commons.jce.SCryptTester: java.lang.String passwd>;
$z0 = staticinvoke <cn.ponfee.commons.jce.passwd.SCrypt: boolean check(java.lang.String,java.lang.String)>($r3, r2);
staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);
r4 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(\"\\$\");
$r5 = r4[2];
l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r5, 16);
$l6 = (long) b0;
$l4 = l3 >>> 16;
$l5 = $l4 & 65535L;
$d0 = (double) $l5;
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);
$i7 = (int) $d1;
$l8 = (long) $i7;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);
$l11 = (long) s1;
$l9 = l3 >> 8;
$l10 = $l9 & 255L;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, $l10);
$l14 = (long) s2;
$l12 = l3 >> 0;
$l13 = $l12 & 255L;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l14, $l13);
return;
"
}
