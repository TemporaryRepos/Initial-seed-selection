digraph "unitGraph" {
    "r3 := @parameter0: java.lang.String[]"
    "r0 = newmultiarray (int)[94][94]"
    "$r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0)"
    "$r2 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_main_7__47: java.util.function.Consumer bootstrap$()>()"
    "interfaceinvoke $r1.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r2)"
    "return"
    "r3 := @parameter0: java.lang.String[]"->"r0 = newmultiarray (int)[94][94]";
    "r0 = newmultiarray (int)[94][94]"->"$r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0)";
    "$r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0)"->"$r2 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_main_7__47: java.util.function.Consumer bootstrap$()>()";
    "$r2 = staticinvoke <cn.ponfee.commons.io.FilesTest$lambda_main_7__47: java.util.function.Consumer bootstrap$()>()"->"interfaceinvoke $r1.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r2)";
    "interfaceinvoke $r1.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r2)"->"return";
}
