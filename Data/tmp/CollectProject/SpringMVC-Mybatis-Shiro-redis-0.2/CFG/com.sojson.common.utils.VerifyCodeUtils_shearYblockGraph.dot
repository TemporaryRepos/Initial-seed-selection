digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.awt.Graphics;
i4 := @parameter1: int;
i6 := @parameter2: int;
r2 := @parameter3: java.awt.Color;
$r0 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(40);
i1 = $i0 + 10;
z0 = 1;
b2 = 20;
b3 = 7;
i11 = 0;
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i11 >= i4 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i5 = i1 >> 1;
$d8 = (double) $i5;
$d1 = (double) i11;
$d0 = (double) i1;
$d6 = $d1 / $d0;
$d2 = (double) b3;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) b2;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i7 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(i11, 0, 1, i6, 0, $i7);
if z0 == 0 goto i11 = i11 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);
$i8 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i8, i11, 0);
$i9 = (int) d10;
$i10 = $i9 + i6;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i10, i11, i6);
"
    "Block 4:
[preds: 2 3 ] [succs: 1 ]
i11 = i11 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.awt.Graphics;
i4 := @parameter1: int;
i6 := @parameter2: int;
r2 := @parameter3: java.awt.Color;
$r0 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
$i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(40);
i1 = $i0 + 10;
z0 = 1;
b2 = 20;
b3 = 7;
i11 = 0;
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i11 >= i4 goto return;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i11 >= i4 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$i5 = i1 >> 1;
$d8 = (double) $i5;
$d1 = (double) i11;
$d0 = (double) i1;
$d6 = $d1 / $d0;
$d2 = (double) b3;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) b2;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i7 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(i11, 0, 1, i6, 0, $i7);
if z0 == 0 goto i11 = i11 + 1;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i11 >= i4 goto return;
"->"Block 5:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i5 = i1 >> 1;
$d8 = (double) $i5;
$d1 = (double) i11;
$d0 = (double) i1;
$d6 = $d1 / $d0;
$d2 = (double) b3;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) b2;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i7 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(i11, 0, 1, i6, 0, $i7);
if z0 == 0 goto i11 = i11 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);
$i8 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i8, i11, 0);
$i9 = (int) d10;
$i10 = $i9 + i6;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i10, i11, i6);
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i5 = i1 >> 1;
$d8 = (double) $i5;
$d1 = (double) i11;
$d0 = (double) i1;
$d6 = $d1 / $d0;
$d2 = (double) b3;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) b2;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i7 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(i11, 0, 1, i6, 0, $i7);
if z0 == 0 goto i11 = i11 + 1;
"->"Block 4:
[preds: 2 3 ] [succs: 1 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);
$i8 = (int) d10;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i8, i11, 0);
$i9 = (int) d10;
$i10 = $i9 + i6;
virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i11, $i10, i11, i6);
"->"Block 4:
[preds: 2 3 ] [succs: 1 ]
i11 = i11 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 2 3 ] [succs: 1 ]
i11 = i11 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i11 >= i4 goto return;
";
}
