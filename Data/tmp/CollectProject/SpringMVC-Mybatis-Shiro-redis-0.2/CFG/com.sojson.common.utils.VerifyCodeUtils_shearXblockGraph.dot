digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: java.awt.Graphics;
i4 := @parameter1: int;
i2 := @parameter2: int;
r3 := @parameter3: java.awt.Color;
$r0 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(2);
z0 = 1;
z1 = 1;
$r1 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2);
i9 = 0;
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i9 >= i2 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i3 = i0 >> 1;
$d8 = (double) $i3;
$d1 = (double) i9;
$d0 = (double) i0;
$d6 = $d1 / $d0;
$d2 = (double) i1;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) z1;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i5 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(0, i9, i4, 1, $i5, 0);
if z0 == 0 goto i9 = i9 + 1;
"
    "Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);
$i6 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i6, i9, 0, i9);
$i7 = (int) d10;
$i8 = $i7 + i4;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i8, i9, i4, i9);
"
    "Block 4:
[preds: 2 3 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= (branch)];
"
    "Block 5:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r2 := @parameter0: java.awt.Graphics;
i4 := @parameter1: int;
i2 := @parameter2: int;
r3 := @parameter3: java.awt.Color;
$r0 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(2);
z0 = 1;
z1 = 1;
$r1 = <com.sojson.common.utils.VerifyCodeUtils: java.util.Random random>;
i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2);
i9 = 0;
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i9 >= i2 goto return;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i9 >= i2 goto return;
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$i3 = i0 >> 1;
$d8 = (double) $i3;
$d1 = (double) i9;
$d0 = (double) i0;
$d6 = $d1 / $d0;
$d2 = (double) i1;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) z1;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i5 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(0, i9, i4, 1, $i5, 0);
if z0 == 0 goto i9 = i9 + 1;
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i9 >= i2 goto return;
"->"Block 5:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i3 = i0 >> 1;
$d8 = (double) $i3;
$d1 = (double) i9;
$d0 = (double) i0;
$d6 = $d1 / $d0;
$d2 = (double) i1;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) z1;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i5 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(0, i9, i4, 1, $i5, 0);
if z0 == 0 goto i9 = i9 + 1;
"->"Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);
$i6 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i6, i9, 0, i9);
$i7 = (int) d10;
$i8 = $i7 + i4;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i8, i9, i4, i9);
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$i3 = i0 >> 1;
$d8 = (double) $i3;
$d1 = (double) i9;
$d0 = (double) i0;
$d6 = $d1 / $d0;
$d2 = (double) i1;
$d4 = 6.283185307179586 * $d2;
$d3 = (double) z1;
$d5 = $d4 / $d3;
$d7 = $d6 + $d5;
$d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);
d10 = $d8 * $d9;
$i5 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void copyArea(int,int,int,int,int,int)>(0, i9, i4, 1, $i5, 0);
if z0 == 0 goto i9 = i9 + 1;
"->"Block 4:
[preds: 2 3 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);
$i6 = (int) d10;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i6, i9, 0, i9);
$i7 = (int) d10;
$i8 = $i7 + i4;
virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i8, i9, i4, i9);
"->"Block 4:
[preds: 2 3 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= (branch)];
";
    "Block 4:
[preds: 2 3 ] [succs: 1 ]
i9 = i9 + 1;
goto [?= (branch)];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
if i9 >= i2 goto return;
";
}
