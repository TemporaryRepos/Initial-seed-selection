digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r9 := @this: org.jinstagram.entity.media.MediaInfoFeedTest;
r0 = staticinvoke <org.jinstagram.entity.media.MediaInfoFeedTest: java.lang.String toString(java.lang.String)>(\"media-carousel-videos-1455920561485265648_25025320.json\");
$r1 = staticinvoke <org.jinstagram.InstagramBase: java.lang.Object createObjectFromResponse(java.lang.Class,java.lang.String)>(class \"Lorg/jinstagram/entity/media/MediaInfoFeed;\", r0);
r2 = (org.jinstagram.entity.media.MediaInfoFeed) $r1;
$r3 = virtualinvoke r2.<org.jinstagram.entity.media.MediaInfoFeed: org.jinstagram.entity.users.feed.MediaFeedData getData()>();
r4 = virtualinvoke $r3.<org.jinstagram.entity.users.feed.MediaFeedData: java.util.List getCarouselMedia()>();
$i0 = interfaceinvoke r4.<java.util.List: int size()>();
$l1 = (long) $i0;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);
r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
r7 = (org.jinstagram.entity.users.feed.CarouselMedia) $r6;
$r8 = virtualinvoke r7.<org.jinstagram.entity.users.feed.CarouselMedia: java.lang.String getType()>();
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(\"video\", $r8);
goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 3:
[preds: 1 ] [succs: ]
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r9 := @this: org.jinstagram.entity.media.MediaInfoFeedTest;
r0 = staticinvoke <org.jinstagram.entity.media.MediaInfoFeedTest: java.lang.String toString(java.lang.String)>(\"media-carousel-videos-1455920561485265648_25025320.json\");
$r1 = staticinvoke <org.jinstagram.InstagramBase: java.lang.Object createObjectFromResponse(java.lang.Class,java.lang.String)>(class \"Lorg/jinstagram/entity/media/MediaInfoFeed;\", r0);
r2 = (org.jinstagram.entity.media.MediaInfoFeed) $r1;
$r3 = virtualinvoke r2.<org.jinstagram.entity.media.MediaInfoFeed: org.jinstagram.entity.users.feed.MediaFeedData getData()>();
r4 = virtualinvoke $r3.<org.jinstagram.entity.users.feed.MediaFeedData: java.util.List getCarouselMedia()>();
$i0 = interfaceinvoke r4.<java.util.List: int size()>();
$l1 = (long) $i0;
staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);
r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
r7 = (org.jinstagram.entity.users.feed.CarouselMedia) $r6;
$r8 = virtualinvoke r7.<org.jinstagram.entity.users.feed.CarouselMedia: java.lang.String getType()>();
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(\"video\", $r8);
goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
"->"Block 3:
[preds: 1 ] [succs: ]
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
r7 = (org.jinstagram.entity.users.feed.CarouselMedia) $r6;
$r8 = virtualinvoke r7.<org.jinstagram.entity.users.feed.CarouselMedia: java.lang.String getType()>();
staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(\"video\", $r8);
goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return;
";
}
