digraph "unitGraph" {
    "r21 := @parameter0: java.lang.String[]"
    "r0 = \"D:/git-repo/learn-java-asm/first.jar\""
    "r1 = \"D:/git-repo/learn-java-asm/second.jar\""
    "r2 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r0)"
    "r3 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r1)"
    "$r4 = new java.util.HashSet"
    "specialinvoke $r4.<java.util.HashSet: void <init>()>()"
    "r5 = $r4"
    "interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r2)"
    "interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3)"
    "$r6 = newarray (java.lang.Object)[3]"
    "$i0 = interfaceinvoke r5.<java.util.Set: int size()>()"
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"
    "$r6[0] = $r7"
    "$i1 = interfaceinvoke r2.<java.util.List: int size()>()"
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"
    "$r6[1] = $r8"
    "$i2 = interfaceinvoke r3.<java.util.List: int size()>()"
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"
    "$r6[2] = $r9"
    "r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"total: %s, list1=%s, list2=%s\", $r6)"
    "$r11 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r10)"
    "r12 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r0, r2)"
    "r13 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r1, r3)"
    "r14 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()"
    "$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()"
    "if $z5 == 0 goto return"
    "$r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()"
    "r16 = (java.lang.String) $r15"
    "$z2 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\"/\")"
    "if $z2 == 0 goto r22 = null"
    "goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]"
    "r22 = null"
    "r23 = null"
    "$r17 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)"
    "r18 = (java.io.ByteArrayOutputStream) $r17"
    "$r19 = interfaceinvoke r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)"
    "r20 = (java.io.ByteArrayOutputStream) $r19"
    "if r18 == null goto (branch)"
    "r22 = virtualinvoke r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()"
    "if r20 == null goto z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)"
    "r23 = virtualinvoke r20.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()"
    "z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)"
    "if z3 == 0 goto $z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")"
    "$z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")"
    "if $z4 != 0 goto staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")"
    "staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r22, r16, \"a\")"
    "staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r23, r16, \"b\")"
    "goto [?= (branch)]"
    "staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")"
    "staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r23, \"b\")"
    "return"
    "r21 := @parameter0: java.lang.String[]"->"r0 = \"D:/git-repo/learn-java-asm/first.jar\"";
    "r0 = \"D:/git-repo/learn-java-asm/first.jar\""->"r1 = \"D:/git-repo/learn-java-asm/second.jar\"";
    "r1 = \"D:/git-repo/learn-java-asm/second.jar\""->"r2 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r0)";
    "r2 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r0)"->"r3 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r1)";
    "r3 = staticinvoke <lsieun.utils.JarUtils: java.util.List getAllEntries(java.lang.String)>(r1)"->"$r4 = new java.util.HashSet";
    "$r4 = new java.util.HashSet"->"specialinvoke $r4.<java.util.HashSet: void <init>()>()";
    "specialinvoke $r4.<java.util.HashSet: void <init>()>()"->"r5 = $r4";
    "r5 = $r4"->"interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r2)";
    "interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r2)"->"interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3)";
    "interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3)"->"$r6 = newarray (java.lang.Object)[3]";
    "$r6 = newarray (java.lang.Object)[3]"->"$i0 = interfaceinvoke r5.<java.util.Set: int size()>()";
    "$i0 = interfaceinvoke r5.<java.util.Set: int size()>()"->"$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)";
    "$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)"->"$r6[0] = $r7";
    "$r6[0] = $r7"->"$i1 = interfaceinvoke r2.<java.util.List: int size()>()";
    "$i1 = interfaceinvoke r2.<java.util.List: int size()>()"->"$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)";
    "$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)"->"$r6[1] = $r8";
    "$r6[1] = $r8"->"$i2 = interfaceinvoke r3.<java.util.List: int size()>()";
    "$i2 = interfaceinvoke r3.<java.util.List: int size()>()"->"$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)";
    "$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)"->"$r6[2] = $r9";
    "$r6[2] = $r9"->"r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"total: %s, list1=%s, list2=%s\", $r6)";
    "r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"total: %s, list1=%s, list2=%s\", $r6)"->"$r11 = <java.lang.System: java.io.PrintStream out>";
    "$r11 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r10)";
    "virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r10)"->"r12 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r0, r2)";
    "r12 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r0, r2)"->"r13 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r1, r3)";
    "r13 = staticinvoke <lsieun.utils.JarUtils: java.util.Map getAllEntryMap(java.lang.String,java.util.List)>(r1, r3)"->"r14 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()";
    "r14 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()"->"$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()";
    "$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()"->"if $z5 == 0 goto return";
    "if $z5 == 0 goto return"->"$r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()";
    "if $z5 == 0 goto return"->"return";
    "$r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()"->"r16 = (java.lang.String) $r15";
    "r16 = (java.lang.String) $r15"->"$z2 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\"/\")";
    "$z2 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\"/\")"->"if $z2 == 0 goto r22 = null";
    "if $z2 == 0 goto r22 = null"->"goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]";
    "if $z2 == 0 goto r22 = null"->"r22 = null";
    "goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()";
    "r22 = null"->"r23 = null";
    "r23 = null"->"$r17 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)";
    "$r17 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)"->"r18 = (java.io.ByteArrayOutputStream) $r17";
    "r18 = (java.io.ByteArrayOutputStream) $r17"->"$r19 = interfaceinvoke r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)";
    "$r19 = interfaceinvoke r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)"->"r20 = (java.io.ByteArrayOutputStream) $r19";
    "r20 = (java.io.ByteArrayOutputStream) $r19"->"if r18 == null goto (branch)";
    "if r18 == null goto (branch)"->"r22 = virtualinvoke r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()";
    "if r18 == null goto (branch)"->"if r20 == null goto z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)";
    "r22 = virtualinvoke r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()"->"if r20 == null goto z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)";
    "if r20 == null goto z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)"->"r23 = virtualinvoke r20.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()";
    "if r20 == null goto z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)"->"z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)";
    "r23 = virtualinvoke r20.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()"->"z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)";
    "z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r23)"->"if z3 == 0 goto $z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")";
    "if z3 == 0 goto $z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")"->"goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]";
    "if z3 == 0 goto $z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")"->"$z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")";
    "goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()";
    "$z4 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(\".class\")"->"if $z4 != 0 goto staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")";
    "if $z4 != 0 goto staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")"->"staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r22, r16, \"a\")";
    "if $z4 != 0 goto staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")"->"staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")";
    "staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r22, r16, \"a\")"->"staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r23, r16, \"b\")";
    "staticinvoke <run.jar.CompareTwoJarFile: void generateOtherFile(byte[],java.lang.String,java.lang.String)>(r23, r16, \"b\")"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]";
    "staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r22, \"a\")"->"staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r23, \"b\")";
    "staticinvoke <run.jar.CompareTwoJarFile: void generateClassText(byte[],java.lang.String)>(r23, \"b\")"->"goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]"->"$z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()";
}
