digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r28 := @parameter0: java.lang.String[];
r0 = \"sample/HelloWorld.class\";
r1 = staticinvoke <lsieun.utils.FileUtils: java.lang.String getFilePath(java.lang.String)>(r0);
r2 = staticinvoke <lsieun.utils.FileUtils: byte[] readBytes(java.lang.String)>(r1);
$r3 = new org.objectweb.asm.ClassReader;
specialinvoke $r3.<org.objectweb.asm.ClassReader: void <init>(byte[])>(r2);
r4 = $r3;
$r5 = new org.objectweb.asm.tree.ClassNode;
specialinvoke $r5.<org.objectweb.asm.tree.ClassNode: void <init>()>();
r6 = $r5;
b0 = 6;
virtualinvoke r4.<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,int)>(r6, b0);
r7 = \"test\";
r29 = null;
$r8 = r6.<org.objectweb.asm.tree.ClassNode: java.util.List methods>;
r30 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r26 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();
r31 = (org.objectweb.asm.tree.MethodNode) $r26;
$r27 = r31.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r7);
if $z1 == 0 goto (branch);
"
    "Block 3:
[preds: 2 ] [succs: 5 ]
r29 = r31;
goto [?= (branch)];
"
    "Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 5:
[preds: 1 3 ] [succs: 6 7 ]
if r29 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 6:
[preds: 5 ] [succs: ]
$r22 = <java.lang.System: java.io.PrintStream out>;
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Can not find method: \");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);
return;
"
    "Block 7:
[preds: 5 ] [succs: ]
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"Origin:\");
$r11 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
$r10 = <run.ControlFlowGraphType: run.ControlFlowGraphType NONE>;
staticinvoke <run.ControlFlowGraphRun: void display(java.lang.String,org.objectweb.asm.tree.MethodNode,run.ControlFlowGraphType)>($r11, r29, $r10);
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>(\"Control Flow Graph:\");
$r14 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
$r13 = <run.ControlFlowGraphType: run.ControlFlowGraphType STANDARD>;
staticinvoke <run.ControlFlowGraphRun: void display(java.lang.String,org.objectweb.asm.tree.MethodNode,run.ControlFlowGraphType)>($r14, r29, $r13);
$r15 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
i1 = staticinvoke <lsieun.asm.analysis.cc.CyclomaticComplexity: int getCyclomaticComplexity(java.lang.String,org.objectweb.asm.tree.MethodNode)>($r15, r29);
$r16 = newarray (java.lang.Object)[3];
$r17 = r29.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$r16[0] = $r17;
$r18 = r29.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;
$r16[1] = $r18;
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r16[2] = $r19;
r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%s:%s complexity: %d\", $r16);
$r20 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r32);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
r28 := @parameter0: java.lang.String[];
r0 = \"sample/HelloWorld.class\";
r1 = staticinvoke <lsieun.utils.FileUtils: java.lang.String getFilePath(java.lang.String)>(r0);
r2 = staticinvoke <lsieun.utils.FileUtils: byte[] readBytes(java.lang.String)>(r1);
$r3 = new org.objectweb.asm.ClassReader;
specialinvoke $r3.<org.objectweb.asm.ClassReader: void <init>(byte[])>(r2);
r4 = $r3;
$r5 = new org.objectweb.asm.tree.ClassNode;
specialinvoke $r5.<org.objectweb.asm.tree.ClassNode: void <init>()>();
r6 = $r5;
b0 = 6;
virtualinvoke r4.<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,int)>(r6, b0);
r7 = \"test\";
r29 = null;
$r8 = r6.<org.objectweb.asm.tree.ClassNode: java.util.List methods>;
r30 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 2:
[preds: 1 ] [succs: 3 4 ]
$r26 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();
r31 = (org.objectweb.asm.tree.MethodNode) $r26;
$r27 = r31.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r7);
if $z1 == 0 goto (branch);
";
    "Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
"->"Block 5:
[preds: 1 3 ] [succs: 6 7 ]
if r29 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r26 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();
r31 = (org.objectweb.asm.tree.MethodNode) $r26;
$r27 = r31.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r7);
if $z1 == 0 goto (branch);
"->"Block 3:
[preds: 2 ] [succs: 5 ]
r29 = r31;
goto [?= (branch)];
";
    "Block 2:
[preds: 1 ] [succs: 3 4 ]
$r26 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();
r31 = (org.objectweb.asm.tree.MethodNode) $r26;
$r27 = r31.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r7);
if $z1 == 0 goto (branch);
"->"Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 3:
[preds: 2 ] [succs: 5 ]
r29 = r31;
goto [?= (branch)];
"->"Block 5:
[preds: 1 3 ] [succs: 6 7 ]
if r29 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 4:
[preds: 2 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto (branch);
";
    "Block 5:
[preds: 1 3 ] [succs: 6 7 ]
if r29 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"->"Block 6:
[preds: 5 ] [succs: ]
$r22 = <java.lang.System: java.io.PrintStream out>;
$r21 = new java.lang.StringBuilder;
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Can not find method: \");
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);
return;
";
    "Block 5:
[preds: 1 3 ] [succs: 6 7 ]
if r29 != null goto $r9 = <java.lang.System: java.io.PrintStream out>;
"->"Block 7:
[preds: 5 ] [succs: ]
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(\"Origin:\");
$r11 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
$r10 = <run.ControlFlowGraphType: run.ControlFlowGraphType NONE>;
staticinvoke <run.ControlFlowGraphRun: void display(java.lang.String,org.objectweb.asm.tree.MethodNode,run.ControlFlowGraphType)>($r11, r29, $r10);
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>(\"Control Flow Graph:\");
$r14 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
$r13 = <run.ControlFlowGraphType: run.ControlFlowGraphType STANDARD>;
staticinvoke <run.ControlFlowGraphRun: void display(java.lang.String,org.objectweb.asm.tree.MethodNode,run.ControlFlowGraphType)>($r14, r29, $r13);
$r15 = r6.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;
i1 = staticinvoke <lsieun.asm.analysis.cc.CyclomaticComplexity: int getCyclomaticComplexity(java.lang.String,org.objectweb.asm.tree.MethodNode)>($r15, r29);
$r16 = newarray (java.lang.Object)[3];
$r17 = r29.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;
$r16[0] = $r17;
$r18 = r29.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;
$r16[1] = $r18;
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
$r16[2] = $r19;
r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%s:%s complexity: %d\", $r16);
$r20 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r32);
return;
";
}
