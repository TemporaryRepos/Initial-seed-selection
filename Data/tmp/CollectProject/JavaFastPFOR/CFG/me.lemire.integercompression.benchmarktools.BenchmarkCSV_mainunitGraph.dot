digraph "unitGraph" {
    "r2 := @parameter0: java.lang.String[]"
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"
    "r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "r32 = r2"
    "i1 = lengthof r32"
    "i2 = 0"
    "if i2 >= i1 goto $r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"
    "r33 = r32[i2]"
    "$z3 = virtualinvoke r33.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")"
    "if $z3 == 0 goto virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)"
    "$z5 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--onearrayperfile\")"
    "if $z5 == 0 goto $z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")"
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"
    "goto [?= i2 = i2 + 1]"
    "$z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")"
    "if $z6 == 0 goto $z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")"
    "r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"
    "$z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")"
    "if $z7 == 0 goto $r25 = new java.lang.RuntimeException"
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"
    "$r25 = new java.lang.RuntimeException"
    "$r26 = new java.lang.StringBuilder"
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"I don\'t understand: \")"
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33)"
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"
    "specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29)"
    "throw $r25"
    "virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)"
    "i2 = i2 + 1"
    "goto [?= (branch)]"
    "$r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"
    "if r30 != $r3 goto $r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"
    "$r24 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array.\")"
    "goto [?= $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>]"
    "$r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"
    "if r30 != $r4 goto $r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"
    "$r23 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"Each line of each file is an array: use --onearrayperfile or --oneintperline to change.\")"
    "$r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"
    "if r30 != $r5 goto $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"
    "$r22 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array, with one integer per line.\")"
    "$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"
    "if r31 != $r34 goto $r6 = <java.lang.System: java.io.PrintStream out>"
    "$r21 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"Compressing the integers \'as is\' (no differential coding)\")"
    "goto [?= $r7 = new java.util.ArrayList]"
    "$r6 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Using differential coding (arrays will be sorted): use --nodelta to prevent sorting\")"
    "$r7 = new java.util.ArrayList"
    "specialinvoke $r7.<java.util.ArrayList: void <init>()>()"
    "r35 = $r7"
    "r36 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()"
    "if $z8 == 0 goto $r9 = <java.lang.System: java.io.PrintStream out>"
    "$r17 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()"
    "r37 = (java.lang.String) $r17"
    "$r18 = staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: java.util.ArrayList loadIntegers(java.lang.String,me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format)>(r37, r30)"
    "r38 = virtualinvoke $r18.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()"
    "if $z1 == 0 goto (branch)"
    "$r19 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>()"
    "r20 = (int[]) $r19"
    "virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)"
    "goto [?= $z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()]"
    "goto [?= $z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()]"
    "$r9 = <java.lang.System: java.io.PrintStream out>"
    "$r8 = new java.lang.StringBuilder"
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Loaded \")"
    "$i0 = virtualinvoke r35.<java.util.ArrayList: int size()>()"
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)"
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" array(s)\")"
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13)"
    "$r14 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>"
    "if r31 != $r14 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"
    "$r15 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sorting the arrray(s) because you are using differential coding\")"
    "r39 = virtualinvoke r35.<java.util.ArrayList: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"
    "$r16 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>()"
    "r40 = (int[]) $r16"
    "staticinvoke <java.util.Arrays: void sort(int[])>(r40)"
    "goto [?= $z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()]"
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)"
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)"
    "return"
    "r2 := @parameter0: java.lang.String[]"->"r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>";
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"->"r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>";
    "r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"r32 = r2";
    "r32 = r2"->"i1 = lengthof r32";
    "i1 = lengthof r32"->"i2 = 0";
    "i2 = 0"->"if i2 >= i1 goto $r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>";
    "if i2 >= i1 goto $r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"->"r33 = r32[i2]";
    "if i2 >= i1 goto $r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"->"$r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>";
    "r33 = r32[i2]"->"$z3 = virtualinvoke r33.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")";
    "$z3 = virtualinvoke r33.<java.lang.String: boolean startsWith(java.lang.String)>(\"-\")"->"if $z3 == 0 goto virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)";
    "if $z3 == 0 goto virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)"->"$z5 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--onearrayperfile\")";
    "if $z3 == 0 goto virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)"->"virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)";
    "$z5 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--onearrayperfile\")"->"if $z5 == 0 goto $z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")";
    "if $z5 == 0 goto $z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")"->"r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>";
    "if $z5 == 0 goto $z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")"->"$z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")";
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"->"goto [?= i2 = i2 + 1]";
    "goto [?= i2 = i2 + 1]"->"i2 = i2 + 1";
    "$z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--nodelta\")"->"if $z6 == 0 goto $z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")";
    "if $z6 == 0 goto $z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")"->"r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "if $z6 == 0 goto $z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")"->"$z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")";
    "r31 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"->"goto [?= i2 = i2 + 1]";
    "goto [?= i2 = i2 + 1]"->"i2 = i2 + 1";
    "$z7 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>(\"--oneintperline\")"->"if $z7 == 0 goto $r25 = new java.lang.RuntimeException";
    "if $z7 == 0 goto $r25 = new java.lang.RuntimeException"->"r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>";
    "if $z7 == 0 goto $r25 = new java.lang.RuntimeException"->"$r25 = new java.lang.RuntimeException";
    "r30 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"->"goto [?= i2 = i2 + 1]";
    "goto [?= i2 = i2 + 1]"->"i2 = i2 + 1";
    "$r25 = new java.lang.RuntimeException"->"$r26 = new java.lang.StringBuilder";
    "$r26 = new java.lang.StringBuilder"->"specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()"->"$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"I don\'t understand: \")";
    "$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"I don\'t understand: \")"->"$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33)";
    "$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33)"->"$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()"->"specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29)";
    "specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29)"->"throw $r25";
    "virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r33)"->"i2 = i2 + 1";
    "i2 = i2 + 1"->"goto [?= (branch)]";
    "goto [?= (branch)]"->"if i2 >= i1 goto $r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>";
    "$r3 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERFILE>"->"if r30 != $r3 goto $r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>";
    "if r30 != $r3 goto $r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"->"$r24 = <java.lang.System: java.io.PrintStream out>";
    "if r30 != $r3 goto $r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"->"$r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>";
    "$r24 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array.\")";
    "virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array.\")"->"goto [?= $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>]";
    "goto [?= $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>]"->"$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "$r4 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEARRAYPERLINE>"->"if r30 != $r4 goto $r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>";
    "if r30 != $r4 goto $r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"->"$r23 = <java.lang.System: java.io.PrintStream out>";
    "if r30 != $r4 goto $r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"->"$r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>";
    "$r23 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"Each line of each file is an array: use --onearrayperfile or --oneintperline to change.\")";
    "virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(\"Each line of each file is an array: use --onearrayperfile or --oneintperline to change.\")"->"goto [?= $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>]";
    "goto [?= $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>]"->"$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "$r5 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format: me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format ONEINTPERLINE>"->"if r30 != $r5 goto $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "if r30 != $r5 goto $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"->"$r22 = <java.lang.System: java.io.PrintStream out>";
    "if r30 != $r5 goto $r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"->"$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "$r22 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array, with one integer per line.\")";
    "virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>(\"Treating each file as one array, with one integer per line.\")"->"$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>";
    "$r34 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode AS_IS>"->"if r31 != $r34 goto $r6 = <java.lang.System: java.io.PrintStream out>";
    "if r31 != $r34 goto $r6 = <java.lang.System: java.io.PrintStream out>"->"$r21 = <java.lang.System: java.io.PrintStream out>";
    "if r31 != $r34 goto $r6 = <java.lang.System: java.io.PrintStream out>"->"$r6 = <java.lang.System: java.io.PrintStream out>";
    "$r21 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"Compressing the integers \'as is\' (no differential coding)\")";
    "virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(\"Compressing the integers \'as is\' (no differential coding)\")"->"goto [?= $r7 = new java.util.ArrayList]";
    "goto [?= $r7 = new java.util.ArrayList]"->"$r7 = new java.util.ArrayList";
    "$r6 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Using differential coding (arrays will be sorted): use --nodelta to prevent sorting\")";
    "virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(\"Using differential coding (arrays will be sorted): use --nodelta to prevent sorting\")"->"$r7 = new java.util.ArrayList";
    "$r7 = new java.util.ArrayList"->"specialinvoke $r7.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r7.<java.util.ArrayList: void <init>()>()"->"r35 = $r7";
    "r35 = $r7"->"r36 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r36 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()";
    "$z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()"->"if $z8 == 0 goto $r9 = <java.lang.System: java.io.PrintStream out>";
    "if $z8 == 0 goto $r9 = <java.lang.System: java.io.PrintStream out>"->"$r17 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()";
    "if $z8 == 0 goto $r9 = <java.lang.System: java.io.PrintStream out>"->"$r9 = <java.lang.System: java.io.PrintStream out>";
    "$r17 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()"->"r37 = (java.lang.String) $r17";
    "r37 = (java.lang.String) $r17"->"$r18 = staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: java.util.ArrayList loadIntegers(java.lang.String,me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format)>(r37, r30)";
    "$r18 = staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: java.util.ArrayList loadIntegers(java.lang.String,me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format)>(r37, r30)"->"r38 = virtualinvoke $r18.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r38 = virtualinvoke $r18.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()";
    "$z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()"->"if $z1 == 0 goto (branch)";
    "if $z1 == 0 goto (branch)"->"$r19 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>()";
    "if $z1 == 0 goto (branch)"->"goto [?= $z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()]";
    "$r19 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>()"->"r20 = (int[]) $r19";
    "r20 = (int[]) $r19"->"virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)";
    "virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)"->"goto [?= $z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()]"->"$z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()";
    "$r9 = <java.lang.System: java.io.PrintStream out>"->"$r8 = new java.lang.StringBuilder";
    "$r8 = new java.lang.StringBuilder"->"specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()"->"$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Loaded \")";
    "$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"Loaded \")"->"$i0 = virtualinvoke r35.<java.util.ArrayList: int size()>()";
    "$i0 = virtualinvoke r35.<java.util.ArrayList: int size()>()"->"$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)";
    "$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)"->"$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" array(s)\")";
    "$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\" array(s)\")"->"$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13)";
    "virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13)"->"$r14 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>";
    "$r14 = <me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode: me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode DELTA>"->"if r31 != $r14 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "if r31 != $r14 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"$r15 = <java.lang.System: java.io.PrintStream out>";
    "if r31 != $r14 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "$r15 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sorting the arrray(s) because you are using differential coding\")";
    "virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(\"Sorting the arrray(s) because you are using differential coding\")"->"r39 = virtualinvoke r35.<java.util.ArrayList: java.util.Iterator iterator()>()";
    "r39 = virtualinvoke r35.<java.util.ArrayList: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "if $z0 == 0 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"$r16 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "$r16 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>()"->"r40 = (int[]) $r16";
    "r40 = (int[]) $r16"->"staticinvoke <java.util.Arrays: void sort(int[])>(r40)";
    "staticinvoke <java.util.Arrays: void sort(int[])>(r40)"->"goto [?= $z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 0)"->"staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)";
    "staticinvoke <me.lemire.integercompression.benchmarktools.BenchmarkCSV: void bytebench(java.util.ArrayList,me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode,boolean)>(r35, r31, 1)"->"return";
}
