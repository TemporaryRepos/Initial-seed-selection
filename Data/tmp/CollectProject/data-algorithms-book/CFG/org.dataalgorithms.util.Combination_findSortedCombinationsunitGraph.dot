digraph "unitGraph" {
    "r2 := @parameter0: java.util.Collection"
    "i0 := @parameter1: int"
    "$r0 = new java.util.ArrayList"
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"
    "r1 = $r0"
    "if i0 != 0 goto $i1 = i0 - 1"
    "$r12 = new java.util.ArrayList"
    "specialinvoke $r12.<java.util.ArrayList: void <init>()>()"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12)"
    "return r1"
    "$i1 = i0 - 1"
    "r3 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection,int)>(r2, $i1)"
    "r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()"
    "$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()"
    "if $z0 == 0 goto return r1"
    "$r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()"
    "r6 = (java.util.List) $r5"
    "r7 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()"
    "$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()"
    "if $z8 == 0 goto (branch)"
    "$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()"
    "r9 = (java.lang.Comparable) $r8"
    "$z1 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r9)"
    "if $z1 == 0 goto $r10 = new java.util.ArrayList"
    "goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"
    "$r10 = new java.util.ArrayList"
    "specialinvoke $r10.<java.util.ArrayList: void <init>()>()"
    "r11 = $r10"
    "interfaceinvoke r11.<java.util.List: boolean addAll(java.util.Collection)>(r6)"
    "$z3 = interfaceinvoke r11.<java.util.List: boolean contains(java.lang.Object)>(r9)"
    "if $z3 == 0 goto interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)"
    "interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)"
    "staticinvoke <java.util.Collections: void sort(java.util.List)>(r11)"
    "$z5 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r11)"
    "if $z5 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)"
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)"
    "goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]"
    "r2 := @parameter0: java.util.Collection"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"$r0 = new java.util.ArrayList";
    "$r0 = new java.util.ArrayList"->"specialinvoke $r0.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r0.<java.util.ArrayList: void <init>()>()"->"r1 = $r0";
    "r1 = $r0"->"if i0 != 0 goto $i1 = i0 - 1";
    "if i0 != 0 goto $i1 = i0 - 1"->"$r12 = new java.util.ArrayList";
    "if i0 != 0 goto $i1 = i0 - 1"->"$i1 = i0 - 1";
    "$r12 = new java.util.ArrayList"->"specialinvoke $r12.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r12.<java.util.ArrayList: void <init>()>()"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12)";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12)"->"return r1";
    "$i1 = i0 - 1"->"r3 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection,int)>(r2, $i1)";
    "r3 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection,int)>(r2, $i1)"->"r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()";
    "r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()"->"$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()";
    "$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()"->"if $z0 == 0 goto return r1";
    "if $z0 == 0 goto return r1"->"$r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()";
    "if $z0 == 0 goto return r1"->"return r1";
    "$r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()"->"r6 = (java.util.List) $r5";
    "r6 = (java.util.List) $r5"->"r7 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()";
    "r7 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()"->"$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()"->"if $z8 == 0 goto (branch)";
    "if $z8 == 0 goto (branch)"->"$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()";
    "if $z8 == 0 goto (branch)"->"goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]";
    "$r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()"->"r9 = (java.lang.Comparable) $r8";
    "r9 = (java.lang.Comparable) $r8"->"$z1 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r9)";
    "$z1 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r9)"->"if $z1 == 0 goto $r10 = new java.util.ArrayList";
    "if $z1 == 0 goto $r10 = new java.util.ArrayList"->"goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]";
    "if $z1 == 0 goto $r10 = new java.util.ArrayList"->"$r10 = new java.util.ArrayList";
    "goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "$r10 = new java.util.ArrayList"->"specialinvoke $r10.<java.util.ArrayList: void <init>()>()";
    "specialinvoke $r10.<java.util.ArrayList: void <init>()>()"->"r11 = $r10";
    "r11 = $r10"->"interfaceinvoke r11.<java.util.List: boolean addAll(java.util.Collection)>(r6)";
    "interfaceinvoke r11.<java.util.List: boolean addAll(java.util.Collection)>(r6)"->"$z3 = interfaceinvoke r11.<java.util.List: boolean contains(java.lang.Object)>(r9)";
    "$z3 = interfaceinvoke r11.<java.util.List: boolean contains(java.lang.Object)>(r9)"->"if $z3 == 0 goto interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)";
    "if $z3 == 0 goto interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)"->"goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]";
    "if $z3 == 0 goto interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)"->"interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)";
    "goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r9)"->"staticinvoke <java.util.Collections: void sort(java.util.List)>(r11)";
    "staticinvoke <java.util.Collections: void sort(java.util.List)>(r11)"->"$z5 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r11)";
    "$z5 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r11)"->"if $z5 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)";
    "if $z5 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)"->"goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]";
    "if $z5 == 0 goto interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)"->"interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)";
    "goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r11)"->"goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]";
    "goto [?= $z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]"->"$z8 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()";
    "goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]"->"$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()";
}
