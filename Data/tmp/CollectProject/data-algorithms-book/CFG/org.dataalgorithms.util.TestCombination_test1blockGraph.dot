digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
$r0 = newarray (java.lang.String)[3];
$r0[0] = \"butter\";
$r0[1] = \"milk\";
$r0[2] = \"cracker\";
r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"list=\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);
r7 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection,int)>(r1, 2);
$r8 = <java.lang.System: java.io.PrintStream out>;
$i0 = interfaceinvoke r7.<java.util.List: int size()>();
virtualinvoke $r8.<java.io.PrintStream: void println(int)>($i0);
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r7);
r16 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();
"
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $r10 = <java.lang.System: java.io.PrintStream out>;
"
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r13 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();
r14 = (java.util.List) $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.Object)>(r14);
goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()];
"
    "Block 3:
[preds: 1 ] [succs: ]
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"==========\");
r17 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection)>(r1);
$r11 = <java.lang.System: java.io.PrintStream out>;
$i1 = interfaceinvoke r17.<java.util.List: int size()>();
virtualinvoke $r11.<java.io.PrintStream: void println(int)>($i1);
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>(r17);
return;
"
    "Block 0:
[preds: ] [succs: 1 ]
$r0 = newarray (java.lang.String)[3];
$r0[0] = \"butter\";
$r0[1] = \"milk\";
$r0[2] = \"cracker\";
r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
$r3 = <java.lang.System: java.io.PrintStream out>;
$r2 = new java.lang.StringBuilder;
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"list=\");
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);
r7 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection,int)>(r1, 2);
$r8 = <java.lang.System: java.io.PrintStream out>;
$i0 = interfaceinvoke r7.<java.util.List: int size()>();
virtualinvoke $r8.<java.io.PrintStream: void println(int)>($i0);
$r9 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>(r7);
r16 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $r10 = <java.lang.System: java.io.PrintStream out>;
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $r10 = <java.lang.System: java.io.PrintStream out>;
"->"Block 2:
[preds: 1 ] [succs: 1 ]
$r13 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();
r14 = (java.util.List) $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.Object)>(r14);
goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()];
";
    "Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $r10 = <java.lang.System: java.io.PrintStream out>;
"->"Block 3:
[preds: 1 ] [succs: ]
$r10 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(\"==========\");
r17 = staticinvoke <org.dataalgorithms.util.Combination: java.util.List findSortedCombinations(java.util.Collection)>(r1);
$r11 = <java.lang.System: java.io.PrintStream out>;
$i1 = interfaceinvoke r17.<java.util.List: int size()>();
virtualinvoke $r11.<java.io.PrintStream: void println(int)>($i1);
$r12 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>(r17);
return;
";
    "Block 2:
[preds: 1 ] [succs: 1 ]
$r13 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();
r14 = (java.util.List) $r13;
$r15 = <java.lang.System: java.io.PrintStream out>;
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.Object)>(r14);
goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()];
"->"Block 1:
[preds: 0 2 ] [succs: 2 3 ]
$z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto $r10 = <java.lang.System: java.io.PrintStream out>;
";
}
