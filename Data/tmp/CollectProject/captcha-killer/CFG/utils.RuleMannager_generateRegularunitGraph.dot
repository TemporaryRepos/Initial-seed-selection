digraph "unitGraph" {
    "r0 := @parameter0: java.lang.String"
    "i0 := @parameter1: int"
    "i1 := @parameter2: int"
    "i4 = i0"
    "i5 = i1"
    "r14 = \"\""
    "r15 = \"\""
    "r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1)"
    "r16 = \"\""
    "if i0 <= 3 goto (branch)"
    "i4 = i4 + -3"
    "goto [?= $i6 = virtualinvoke r0.<java.lang.String: int length()>()]"
    "if i0 <= 1 goto $i6 = virtualinvoke r0.<java.lang.String: int length()>()"
    "i4 = i4 + -1"
    "$i6 = virtualinvoke r0.<java.lang.String: int length()>()"
    "$i7 = $i6 - 3"
    "if i1 >= $i7 goto i8 = 0"
    "i5 = i5 + 3"
    "i8 = 0"
    "$i9 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if i8 >= $i9 goto return r16"
    "r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i0)"
    "r18 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r17)"
    "r19 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i5)"
    "r20 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r19)"
    "$r2 = newarray (java.lang.Object)[2]"
    "$r2[0] = r18"
    "$r2[1] = r20"
    "r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%s(.*?)%s\", $r2)"
    "$r3 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"---------------------------------------\")"
    "$r4 = <java.lang.System: java.io.PrintStream out>"
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r16)"
    "$r5 = <burp.BurpExtender: java.io.PrintWriter stderr>"
    "virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(\"------------------------------\")"
    "$r7 = <burp.BurpExtender: java.io.PrintWriter stderr>"
    "$r6 = new java.lang.StringBuilder"
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"[+] \")"
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)"
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"
    "virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>($r10)"
    "$r11 = <burp.BurpExtender: java.io.PrintWriter stderr>"
    "virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>(r16)"
    "$r12 = staticinvoke <utils.RuleMannager: entity.MatchResult matchByRegular(java.lang.String,java.lang.String)>(r0, r16)"
    "$r13 = virtualinvoke $r12.<entity.MatchResult: java.lang.String getResult()>()"
    "$z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)"
    "if $z0 == 0 goto (branch)"
    "goto [?= return r16]"
    "if i4 != 0 goto (branch)"
    "$i3 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if i5 != $i3 goto (branch)"
    "if i4 <= 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>()"
    "$i2 = virtualinvoke r0.<java.lang.String: int length()>()"
    "if i5 >= $i2 goto i8 = i8 + 1"
    "i5 = i5 + 1"
    "i8 = i8 + 1"
    "goto [?= $i9 = virtualinvoke r0.<java.lang.String: int length()>()]"
    "return r16"
    "r0 := @parameter0: java.lang.String"->"i0 := @parameter1: int";
    "i0 := @parameter1: int"->"i1 := @parameter2: int";
    "i1 := @parameter2: int"->"i4 = i0";
    "i4 = i0"->"i5 = i1";
    "i5 = i1"->"r14 = \"\"";
    "r14 = \"\""->"r15 = \"\"";
    "r15 = \"\""->"r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1)";
    "r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1)"->"r16 = \"\"";
    "r16 = \"\""->"if i0 <= 3 goto (branch)";
    "if i0 <= 3 goto (branch)"->"i4 = i4 + -3";
    "if i0 <= 3 goto (branch)"->"if i0 <= 1 goto $i6 = virtualinvoke r0.<java.lang.String: int length()>()";
    "i4 = i4 + -3"->"goto [?= $i6 = virtualinvoke r0.<java.lang.String: int length()>()]";
    "goto [?= $i6 = virtualinvoke r0.<java.lang.String: int length()>()]"->"$i6 = virtualinvoke r0.<java.lang.String: int length()>()";
    "if i0 <= 1 goto $i6 = virtualinvoke r0.<java.lang.String: int length()>()"->"i4 = i4 + -1";
    "if i0 <= 1 goto $i6 = virtualinvoke r0.<java.lang.String: int length()>()"->"$i6 = virtualinvoke r0.<java.lang.String: int length()>()";
    "i4 = i4 + -1"->"$i6 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i6 = virtualinvoke r0.<java.lang.String: int length()>()"->"$i7 = $i6 - 3";
    "$i7 = $i6 - 3"->"if i1 >= $i7 goto i8 = 0";
    "if i1 >= $i7 goto i8 = 0"->"i5 = i5 + 3";
    "if i1 >= $i7 goto i8 = 0"->"i8 = 0";
    "i5 = i5 + 3"->"i8 = 0";
    "i8 = 0"->"$i9 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i9 = virtualinvoke r0.<java.lang.String: int length()>()"->"if i8 >= $i9 goto return r16";
    "if i8 >= $i9 goto return r16"->"r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i0)";
    "if i8 >= $i9 goto return r16"->"return r16";
    "r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i0)"->"r18 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r17)";
    "r18 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r17)"->"r19 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i5)";
    "r19 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i5)"->"r20 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r19)";
    "r20 = staticinvoke <utils.Util: java.lang.String escapeExprSpecialWord(java.lang.String)>(r19)"->"$r2 = newarray (java.lang.Object)[2]";
    "$r2 = newarray (java.lang.Object)[2]"->"$r2[0] = r18";
    "$r2[0] = r18"->"$r2[1] = r20";
    "$r2[1] = r20"->"r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%s(.*?)%s\", $r2)";
    "r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"%s(.*?)%s\", $r2)"->"$r3 = <java.lang.System: java.io.PrintStream out>";
    "$r3 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"---------------------------------------\")";
    "virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(\"---------------------------------------\")"->"$r4 = <java.lang.System: java.io.PrintStream out>";
    "$r4 = <java.lang.System: java.io.PrintStream out>"->"virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r16)";
    "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r16)"->"$r5 = <burp.BurpExtender: java.io.PrintWriter stderr>";
    "$r5 = <burp.BurpExtender: java.io.PrintWriter stderr>"->"virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(\"------------------------------\")";
    "virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(\"------------------------------\")"->"$r7 = <burp.BurpExtender: java.io.PrintWriter stderr>";
    "$r7 = <burp.BurpExtender: java.io.PrintWriter stderr>"->"$r6 = new java.lang.StringBuilder";
    "$r6 = new java.lang.StringBuilder"->"specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()";
    "specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()"->"$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"[+] \")";
    "$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"[+] \")"->"$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)";
    "$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)"->"$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()";
    "$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()"->"virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>($r10)";
    "virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>($r10)"->"$r11 = <burp.BurpExtender: java.io.PrintWriter stderr>";
    "$r11 = <burp.BurpExtender: java.io.PrintWriter stderr>"->"virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>(r16)";
    "virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>(r16)"->"$r12 = staticinvoke <utils.RuleMannager: entity.MatchResult matchByRegular(java.lang.String,java.lang.String)>(r0, r16)";
    "$r12 = staticinvoke <utils.RuleMannager: entity.MatchResult matchByRegular(java.lang.String,java.lang.String)>(r0, r16)"->"$r13 = virtualinvoke $r12.<entity.MatchResult: java.lang.String getResult()>()";
    "$r13 = virtualinvoke $r12.<entity.MatchResult: java.lang.String getResult()>()"->"$z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)";
    "$z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)"->"if $z0 == 0 goto (branch)";
    "if $z0 == 0 goto (branch)"->"goto [?= return r16]";
    "if $z0 == 0 goto (branch)"->"if i4 != 0 goto (branch)";
    "goto [?= return r16]"->"return r16";
    "if i4 != 0 goto (branch)"->"$i3 = virtualinvoke r0.<java.lang.String: int length()>()";
    "if i4 != 0 goto (branch)"->"if i4 <= 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i3 = virtualinvoke r0.<java.lang.String: int length()>()"->"if i5 != $i3 goto (branch)";
    "if i5 != $i3 goto (branch)"->"goto [?= return r16]";
    "if i5 != $i3 goto (branch)"->"if i4 <= 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>()";
    "goto [?= return r16]"->"return r16";
    "if i4 <= 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>()"->"i4 = i4 + -1";
    "if i4 <= 0 goto $i2 = virtualinvoke r0.<java.lang.String: int length()>()"->"$i2 = virtualinvoke r0.<java.lang.String: int length()>()";
    "i4 = i4 + -1"->"$i2 = virtualinvoke r0.<java.lang.String: int length()>()";
    "$i2 = virtualinvoke r0.<java.lang.String: int length()>()"->"if i5 >= $i2 goto i8 = i8 + 1";
    "if i5 >= $i2 goto i8 = i8 + 1"->"i5 = i5 + 1";
    "if i5 >= $i2 goto i8 = i8 + 1"->"i8 = i8 + 1";
    "i5 = i5 + 1"->"i8 = i8 + 1";
    "i8 = i8 + 1"->"goto [?= $i9 = virtualinvoke r0.<java.lang.String: int length()>()]";
    "goto [?= $i9 = virtualinvoke r0.<java.lang.String: int length()>()]"->"$i9 = virtualinvoke r0.<java.lang.String: int length()>()";
}
