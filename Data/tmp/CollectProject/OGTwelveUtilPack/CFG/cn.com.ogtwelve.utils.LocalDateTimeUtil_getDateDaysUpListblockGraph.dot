digraph "unitGraph" {
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.lang.Integer;
r0 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime monthFirst(int)>(0);
$i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();
r2 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime monthLast(int)>($i0);
$r3 = new java.util.ArrayList;
specialinvoke $r3.<java.util.ArrayList: void <init>()>();
r4 = $r3;
$r5 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
$i1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: int week(java.time.LocalDateTime)>(r0);
specialinvoke $r5.<cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: void <init>(java.time.LocalDateTime,int)>(r0, $i1);
interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);
"
    "Block 1:
[preds: 0 3 ] [succs: 2 3 ]
$i2 = interfaceinvoke r4.<java.util.List: int size()>();
$i3 = $i2 - 1;
$r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);
$r7 = (cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays) $r6;
$r8 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: java.time.LocalDateTime access$000(cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays)>($r7);
$r9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
r10 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime plus(java.time.LocalDateTime,long,java.time.temporal.TemporalUnit)>($r8, 1L, $r9);
$z1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: boolean isAfter(java.time.LocalDateTime,java.time.LocalDateTime)>(r10, r2);
if $z1 == 0 goto $r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
"
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= return r4];
"
    "Block 3:
[preds: 1 ] [succs: 1 ]
$r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
$i4 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: int week(java.time.LocalDateTime)>(r10);
specialinvoke $r11.<cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: void <init>(java.time.LocalDateTime,int)>(r10, $i4);
interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11);
goto [?= $i2 = interfaceinvoke r4.<java.util.List: int size()>()];
"
    "Block 4:
[preds: 2 ] [succs: ]
return r4;
"
    "Block 0:
[preds: ] [succs: 1 ]
r1 := @parameter0: java.lang.Integer;
r0 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime monthFirst(int)>(0);
$i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();
r2 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime monthLast(int)>($i0);
$r3 = new java.util.ArrayList;
specialinvoke $r3.<java.util.ArrayList: void <init>()>();
r4 = $r3;
$r5 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
$i1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: int week(java.time.LocalDateTime)>(r0);
specialinvoke $r5.<cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: void <init>(java.time.LocalDateTime,int)>(r0, $i1);
interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);
"->"Block 1:
[preds: 0 3 ] [succs: 2 3 ]
$i2 = interfaceinvoke r4.<java.util.List: int size()>();
$i3 = $i2 - 1;
$r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);
$r7 = (cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays) $r6;
$r8 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: java.time.LocalDateTime access$000(cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays)>($r7);
$r9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
r10 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime plus(java.time.LocalDateTime,long,java.time.temporal.TemporalUnit)>($r8, 1L, $r9);
$z1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: boolean isAfter(java.time.LocalDateTime,java.time.LocalDateTime)>(r10, r2);
if $z1 == 0 goto $r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
";
    "Block 1:
[preds: 0 3 ] [succs: 2 3 ]
$i2 = interfaceinvoke r4.<java.util.List: int size()>();
$i3 = $i2 - 1;
$r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);
$r7 = (cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays) $r6;
$r8 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: java.time.LocalDateTime access$000(cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays)>($r7);
$r9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
r10 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime plus(java.time.LocalDateTime,long,java.time.temporal.TemporalUnit)>($r8, 1L, $r9);
$z1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: boolean isAfter(java.time.LocalDateTime,java.time.LocalDateTime)>(r10, r2);
if $z1 == 0 goto $r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
"->"Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= return r4];
";
    "Block 1:
[preds: 0 3 ] [succs: 2 3 ]
$i2 = interfaceinvoke r4.<java.util.List: int size()>();
$i3 = $i2 - 1;
$r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);
$r7 = (cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays) $r6;
$r8 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: java.time.LocalDateTime access$000(cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays)>($r7);
$r9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
r10 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime plus(java.time.LocalDateTime,long,java.time.temporal.TemporalUnit)>($r8, 1L, $r9);
$z1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: boolean isAfter(java.time.LocalDateTime,java.time.LocalDateTime)>(r10, r2);
if $z1 == 0 goto $r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
"->"Block 3:
[preds: 1 ] [succs: 1 ]
$r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
$i4 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: int week(java.time.LocalDateTime)>(r10);
specialinvoke $r11.<cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: void <init>(java.time.LocalDateTime,int)>(r10, $i4);
interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11);
goto [?= $i2 = interfaceinvoke r4.<java.util.List: int size()>()];
";
    "Block 2:
[preds: 1 ] [succs: 4 ]
goto [?= return r4];
"->"Block 4:
[preds: 2 ] [succs: ]
return r4;
";
    "Block 3:
[preds: 1 ] [succs: 1 ]
$r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
$i4 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: int week(java.time.LocalDateTime)>(r10);
specialinvoke $r11.<cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: void <init>(java.time.LocalDateTime,int)>(r10, $i4);
interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11);
goto [?= $i2 = interfaceinvoke r4.<java.util.List: int size()>()];
"->"Block 1:
[preds: 0 3 ] [succs: 2 3 ]
$i2 = interfaceinvoke r4.<java.util.List: int size()>();
$i3 = $i2 - 1;
$r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);
$r7 = (cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays) $r6;
$r8 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays: java.time.LocalDateTime access$000(cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays)>($r7);
$r9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
r10 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: java.time.LocalDateTime plus(java.time.LocalDateTime,long,java.time.temporal.TemporalUnit)>($r8, 1L, $r9);
$z1 = staticinvoke <cn.com.ogtwelve.utils.LocalDateTimeUtil: boolean isAfter(java.time.LocalDateTime,java.time.LocalDateTime)>(r10, r2);
if $z1 == 0 goto $r11 = new cn.com.ogtwelve.utils.LocalDateTimeUtil$DateDays;
";
}
